/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Monitors } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NewRelicObservability } from "../newRelicObservability";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  NewRelicMonitorResource,
  MonitorsListBySubscriptionNextOptionalParams,
  MonitorsListBySubscriptionOptionalParams,
  MonitorsListBySubscriptionResponse,
  MonitorsListByResourceGroupNextOptionalParams,
  MonitorsListByResourceGroupOptionalParams,
  MonitorsListByResourceGroupResponse,
  AppServiceInfo,
  AppServicesGetRequest,
  MonitorsListAppServicesNextOptionalParams,
  MonitorsListAppServicesOptionalParams,
  MonitorsListAppServicesResponse,
  VMInfo,
  HostsGetRequest,
  MonitorsListHostsNextOptionalParams,
  MonitorsListHostsOptionalParams,
  MonitorsListHostsResponse,
  MonitoredResource,
  MonitorsListMonitoredResourcesNextOptionalParams,
  MonitorsListMonitoredResourcesOptionalParams,
  MonitorsListMonitoredResourcesResponse,
  MonitorsGetOptionalParams,
  MonitorsGetResponse,
  MonitorsCreateOrUpdateOptionalParams,
  MonitorsCreateOrUpdateResponse,
  NewRelicMonitorResourceUpdate,
  MonitorsUpdateOptionalParams,
  MonitorsUpdateResponse,
  MonitorsDeleteOptionalParams,
  MetricsRequest,
  MonitorsGetMetricRulesOptionalParams,
  MonitorsGetMetricRulesResponse,
  MetricsStatusRequest,
  MonitorsGetMetricStatusOptionalParams,
  MonitorsGetMetricStatusResponse,
  SwitchBillingRequest,
  MonitorsSwitchBillingOptionalParams,
  MonitorsSwitchBillingResponse,
  MonitorsVmHostPayloadOptionalParams,
  MonitorsVmHostPayloadResponse,
  MonitorsListBySubscriptionNextResponse,
  MonitorsListByResourceGroupNextResponse,
  MonitorsListAppServicesNextResponse,
  MonitorsListHostsNextResponse,
  MonitorsListMonitoredResourcesNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Monitors operations. */
export class MonitorsImpl implements Monitors {
  private readonly client: NewRelicObservability;

  /**
   * Initialize a new instance of the class Monitors class.
   * @param client Reference to the service client
   */
  constructor(client: NewRelicObservability) {
    this.client = client;
  }

  /**
   * List NewRelicMonitorResource resources by subscription ID
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: MonitorsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<NewRelicMonitorResource> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: MonitorsListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<NewRelicMonitorResource[]> {
    let result: MonitorsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: MonitorsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<NewRelicMonitorResource> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List NewRelicMonitorResource resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: MonitorsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<NewRelicMonitorResource> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: MonitorsListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<NewRelicMonitorResource[]> {
    let result: MonitorsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: MonitorsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<NewRelicMonitorResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List the app service resources currently being monitored by the NewRelic resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param request The details of the app services get request.
   * @param options The options parameters.
   */
  public listAppServices(
    resourceGroupName: string,
    monitorName: string,
    request: AppServicesGetRequest,
    options?: MonitorsListAppServicesOptionalParams
  ): PagedAsyncIterableIterator<AppServiceInfo> {
    const iter = this.listAppServicesPagingAll(
      resourceGroupName,
      monitorName,
      request,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAppServicesPagingPage(
          resourceGroupName,
          monitorName,
          request,
          options,
          settings
        );
      }
    };
  }

  private async *listAppServicesPagingPage(
    resourceGroupName: string,
    monitorName: string,
    request: AppServicesGetRequest,
    options?: MonitorsListAppServicesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<AppServiceInfo[]> {
    let result: MonitorsListAppServicesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAppServices(
        resourceGroupName,
        monitorName,
        request,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAppServicesNext(
        resourceGroupName,
        monitorName,
        request,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAppServicesPagingAll(
    resourceGroupName: string,
    monitorName: string,
    request: AppServicesGetRequest,
    options?: MonitorsListAppServicesOptionalParams
  ): AsyncIterableIterator<AppServiceInfo> {
    for await (const page of this.listAppServicesPagingPage(
      resourceGroupName,
      monitorName,
      request,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List the compute vm resources currently being monitored by the NewRelic resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param request The details of the Hosts get request.
   * @param options The options parameters.
   */
  public listHosts(
    resourceGroupName: string,
    monitorName: string,
    request: HostsGetRequest,
    options?: MonitorsListHostsOptionalParams
  ): PagedAsyncIterableIterator<VMInfo> {
    const iter = this.listHostsPagingAll(
      resourceGroupName,
      monitorName,
      request,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listHostsPagingPage(
          resourceGroupName,
          monitorName,
          request,
          options,
          settings
        );
      }
    };
  }

  private async *listHostsPagingPage(
    resourceGroupName: string,
    monitorName: string,
    request: HostsGetRequest,
    options?: MonitorsListHostsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<VMInfo[]> {
    let result: MonitorsListHostsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listHosts(
        resourceGroupName,
        monitorName,
        request,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listHostsNext(
        resourceGroupName,
        monitorName,
        request,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listHostsPagingAll(
    resourceGroupName: string,
    monitorName: string,
    request: HostsGetRequest,
    options?: MonitorsListHostsOptionalParams
  ): AsyncIterableIterator<VMInfo> {
    for await (const page of this.listHostsPagingPage(
      resourceGroupName,
      monitorName,
      request,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List the resources currently being monitored by the NewRelic monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param options The options parameters.
   */
  public listMonitoredResources(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorsListMonitoredResourcesOptionalParams
  ): PagedAsyncIterableIterator<MonitoredResource> {
    const iter = this.listMonitoredResourcesPagingAll(
      resourceGroupName,
      monitorName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listMonitoredResourcesPagingPage(
          resourceGroupName,
          monitorName,
          options,
          settings
        );
      }
    };
  }

  private async *listMonitoredResourcesPagingPage(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorsListMonitoredResourcesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<MonitoredResource[]> {
    let result: MonitorsListMonitoredResourcesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listMonitoredResources(
        resourceGroupName,
        monitorName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listMonitoredResourcesNext(
        resourceGroupName,
        monitorName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listMonitoredResourcesPagingAll(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorsListMonitoredResourcesOptionalParams
  ): AsyncIterableIterator<MonitoredResource> {
    for await (const page of this.listMonitoredResourcesPagingPage(
      resourceGroupName,
      monitorName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List NewRelicMonitorResource resources by subscription ID
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: MonitorsListBySubscriptionOptionalParams
  ): Promise<MonitorsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * List NewRelicMonitorResource resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: MonitorsListByResourceGroupOptionalParams
  ): Promise<MonitorsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Get a NewRelicMonitorResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorsGetOptionalParams
  ): Promise<MonitorsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, options },
      getOperationSpec
    );
  }

  /**
   * Create a NewRelicMonitorResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    monitorName: string,
    resource: NewRelicMonitorResource,
    options?: MonitorsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<MonitorsCreateOrUpdateResponse>,
      MonitorsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<MonitorsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, monitorName, resource, options },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      MonitorsCreateOrUpdateResponse,
      OperationState<MonitorsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a NewRelicMonitorResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    monitorName: string,
    resource: NewRelicMonitorResource,
    options?: MonitorsCreateOrUpdateOptionalParams
  ): Promise<MonitorsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      monitorName,
      resource,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a NewRelicMonitorResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    monitorName: string,
    properties: NewRelicMonitorResourceUpdate,
    options?: MonitorsUpdateOptionalParams
  ): Promise<MonitorsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, properties, options },
      updateOperationSpec
    );
  }

  /**
   * Delete a NewRelicMonitorResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param userEmail User Email.
   * @param monitorName Name of the Monitors resource
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    userEmail: string,
    monitorName: string,
    options?: MonitorsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, userEmail, monitorName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a NewRelicMonitorResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param userEmail User Email.
   * @param monitorName Name of the Monitors resource
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    userEmail: string,
    monitorName: string,
    options?: MonitorsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      userEmail,
      monitorName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get metric rules
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param request The details of the get metrics status request.
   * @param options The options parameters.
   */
  getMetricRules(
    resourceGroupName: string,
    monitorName: string,
    request: MetricsRequest,
    options?: MonitorsGetMetricRulesOptionalParams
  ): Promise<MonitorsGetMetricRulesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, request, options },
      getMetricRulesOperationSpec
    );
  }

  /**
   * Get metric status
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param request The details of the get metrics status request.
   * @param options The options parameters.
   */
  getMetricStatus(
    resourceGroupName: string,
    monitorName: string,
    request: MetricsStatusRequest,
    options?: MonitorsGetMetricStatusOptionalParams
  ): Promise<MonitorsGetMetricStatusResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, request, options },
      getMetricStatusOperationSpec
    );
  }

  /**
   * List the app service resources currently being monitored by the NewRelic resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param request The details of the app services get request.
   * @param options The options parameters.
   */
  private _listAppServices(
    resourceGroupName: string,
    monitorName: string,
    request: AppServicesGetRequest,
    options?: MonitorsListAppServicesOptionalParams
  ): Promise<MonitorsListAppServicesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, request, options },
      listAppServicesOperationSpec
    );
  }

  /**
   * Switches the billing for NewRelic monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param request The details of the switch billing request.
   * @param options The options parameters.
   */
  switchBilling(
    resourceGroupName: string,
    monitorName: string,
    request: SwitchBillingRequest,
    options?: MonitorsSwitchBillingOptionalParams
  ): Promise<MonitorsSwitchBillingResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, request, options },
      switchBillingOperationSpec
    );
  }

  /**
   * List the compute vm resources currently being monitored by the NewRelic resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param request The details of the Hosts get request.
   * @param options The options parameters.
   */
  private _listHosts(
    resourceGroupName: string,
    monitorName: string,
    request: HostsGetRequest,
    options?: MonitorsListHostsOptionalParams
  ): Promise<MonitorsListHostsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, request, options },
      listHostsOperationSpec
    );
  }

  /**
   * List the resources currently being monitored by the NewRelic monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param options The options parameters.
   */
  private _listMonitoredResources(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorsListMonitoredResourcesOptionalParams
  ): Promise<MonitorsListMonitoredResourcesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, options },
      listMonitoredResourcesOperationSpec
    );
  }

  /**
   * Returns the payload that needs to be passed in the request body for installing NewRelic agent on a
   * VM.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param options The options parameters.
   */
  vmHostPayload(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorsVmHostPayloadOptionalParams
  ): Promise<MonitorsVmHostPayloadResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, options },
      vmHostPayloadOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: MonitorsListBySubscriptionNextOptionalParams
  ): Promise<MonitorsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: MonitorsListByResourceGroupNextOptionalParams
  ): Promise<MonitorsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListAppServicesNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param request The details of the app services get request.
   * @param nextLink The nextLink from the previous successful call to the ListAppServices method.
   * @param options The options parameters.
   */
  private _listAppServicesNext(
    resourceGroupName: string,
    monitorName: string,
    request: AppServicesGetRequest,
    nextLink: string,
    options?: MonitorsListAppServicesNextOptionalParams
  ): Promise<MonitorsListAppServicesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, request, nextLink, options },
      listAppServicesNextOperationSpec
    );
  }

  /**
   * ListHostsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param request The details of the Hosts get request.
   * @param nextLink The nextLink from the previous successful call to the ListHosts method.
   * @param options The options parameters.
   */
  private _listHostsNext(
    resourceGroupName: string,
    monitorName: string,
    request: HostsGetRequest,
    nextLink: string,
    options?: MonitorsListHostsNextOptionalParams
  ): Promise<MonitorsListHostsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, request, nextLink, options },
      listHostsNextOperationSpec
    );
  }

  /**
   * ListMonitoredResourcesNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param nextLink The nextLink from the previous successful call to the ListMonitoredResources method.
   * @param options The options parameters.
   */
  private _listMonitoredResourcesNext(
    resourceGroupName: string,
    monitorName: string,
    nextLink: string,
    options?: MonitorsListMonitoredResourcesNextOptionalParams
  ): Promise<MonitorsListMonitoredResourcesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, monitorName, nextLink, options },
      listMonitoredResourcesNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/NewRelic.Observability/monitors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NewRelicMonitorResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NewRelicMonitorResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NewRelicMonitorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.NewRelicMonitorResource
    },
    201: {
      bodyMapper: Mappers.NewRelicMonitorResource
    },
    202: {
      bodyMapper: Mappers.NewRelicMonitorResource
    },
    204: {
      bodyMapper: Mappers.NewRelicMonitorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.NewRelicMonitorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.userEmail],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getMetricRulesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}/getMetricRules",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricRules
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.request,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getMetricStatusOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}/getMetricStatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricsStatusResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.request1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listAppServicesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}/listAppServices",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AppServicesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.request2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const switchBillingOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}/switchBilling",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.NewRelicMonitorResource
    },
    202: {
      headersMapper: Mappers.MonitorsSwitchBillingHeaders
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.request3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listHostsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}/listHosts",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VMHostsListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.request4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listMonitoredResourcesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}/monitoredResources",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoredResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const vmHostPayloadOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}/vmHostPayloads",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VMExtensionPayload
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NewRelicMonitorResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NewRelicMonitorResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAppServicesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppServicesListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listHostsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VMHostsListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listMonitoredResourcesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MonitoredResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
