/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  NewRelicMonitorResource as NewRelicMonitorResourceMapper,
  NewRelicMonitorResourceUpdate as NewRelicMonitorResourceUpdateMapper,
  MetricsRequest as MetricsRequestMapper,
  MetricsStatusRequest as MetricsStatusRequestMapper,
  AppServicesGetRequest as AppServicesGetRequestMapper,
  SwitchBillingRequest as SwitchBillingRequestMapper,
  HostsGetRequest as HostsGetRequestMapper,
  TagRule as TagRuleMapper,
  TagRuleUpdate as TagRuleUpdateMapper,
  MonitoredSubscriptionProperties as MonitoredSubscriptionPropertiesMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-01-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1,
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const userEmail: OperationQueryParameter = {
  parameterPath: "userEmail",
  mapper: {
    serializedName: "userEmail",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const location: OperationQueryParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1,
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const monitorName: OperationURLParameter = {
  parameterPath: "monitorName",
  mapper: {
    serializedName: "monitorName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: NewRelicMonitorResourceMapper,
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: NewRelicMonitorResourceUpdateMapper,
};

export const request: OperationParameter = {
  parameterPath: "request",
  mapper: MetricsRequestMapper,
};

export const request1: OperationParameter = {
  parameterPath: "request",
  mapper: MetricsStatusRequestMapper,
};

export const request2: OperationParameter = {
  parameterPath: "request",
  mapper: AppServicesGetRequestMapper,
};

export const request3: OperationParameter = {
  parameterPath: "request",
  mapper: SwitchBillingRequestMapper,
};

export const request4: OperationParameter = {
  parameterPath: "request",
  mapper: HostsGetRequestMapper,
};

export const monitorName1: OperationURLParameter = {
  parameterPath: "monitorName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^.*$"),
    },
    serializedName: "monitorName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const accountId: OperationQueryParameter = {
  parameterPath: ["options", "accountId"],
  mapper: {
    serializedName: "accountId",
    type: {
      name: "String",
    },
  },
};

export const organizationId: OperationQueryParameter = {
  parameterPath: ["options", "organizationId"],
  mapper: {
    serializedName: "organizationId",
    type: {
      name: "String",
    },
  },
};

export const body: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\\.)+[A-Za-z]{2,}$",
      ),
    },
    serializedName: "body",
    type: {
      name: "String",
    },
  },
};

export const ruleSetName: OperationURLParameter = {
  parameterPath: "ruleSetName",
  mapper: {
    serializedName: "ruleSetName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const resource1: OperationParameter = {
  parameterPath: "resource",
  mapper: TagRuleMapper,
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: TagRuleUpdateMapper,
};

export const configurationName: OperationURLParameter = {
  parameterPath: "configurationName",
  mapper: {
    serializedName: "configurationName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const body1: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: MonitoredSubscriptionPropertiesMapper,
};
