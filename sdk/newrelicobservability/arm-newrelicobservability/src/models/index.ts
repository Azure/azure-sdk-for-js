/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Response of get all accounts Operation. */
export interface AccountsListResponse {
  /** The AccountResource items on this page */
  value: AccountResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The response of a NewRelicMonitorResource list operation. */
export interface NewRelicMonitorResourceListResult {
  /** The NewRelicMonitorResource items on this page */
  value: NewRelicMonitorResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Properties of the NewRelic account */
export interface NewRelicAccountProperties {
  /** User id */
  userId?: string;
  /** NewRelic Account Information */
  accountInfo?: AccountInfo;
  /** NewRelic Organization Information */
  organizationInfo?: OrganizationInfo;
  /** date when plan was applied */
  singleSignOnProperties?: NewRelicSingleSignOnProperties;
}

/** Account Info of the NewRelic account */
export interface AccountInfo {
  /** Account id */
  accountId?: string;
  /**
   * ingestion key of account
   * This value contains a credential. Consider obscuring before showing to users
   */
  ingestionKey?: string;
  /** NewRelic account region */
  region?: string;
}

/** Organization Info of the NewRelic account */
export interface OrganizationInfo {
  /** Organization id */
  organizationId?: string;
}

/** Single sign on Info of the NewRelic account */
export interface NewRelicSingleSignOnProperties {
  /** Single sign-on state */
  singleSignOnState?: SingleSignOnStates;
  /** The Id of the Enterprise App used for Single sign-on. */
  enterpriseAppId?: string;
  /** The login URL specific to this NewRelic Organization */
  singleSignOnUrl?: string;
  /** Provisioning state */
  provisioningState?: ProvisioningState;
}

/** User Info of NewRelic Monitor resource */
export interface UserInfo {
  /** First name */
  firstName?: string;
  /** Last name */
  lastName?: string;
  /** User Email */
  emailAddress?: string;
  /** Contact phone number */
  phoneNumber?: string;
  /** country if user */
  country?: string;
}

/** Plan data of NewRelic Monitor resource */
export interface PlanData {
  /** Different usage type like PAYG/COMMITTED. this could be enum */
  usageType?: UsageType;
  /** Different billing cycles like MONTHLY/WEEKLY. this could be enum */
  billingCycle?: BillingCycle;
  /** plan id as published by NewRelic */
  planDetails?: string;
  /** date when plan was applied */
  effectiveDate?: Date;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export interface ManagedServiceIdentity {
  /**
   * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
  type: ManagedServiceIdentityType;
  /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Response of get all organizations Operation. */
export interface OrganizationsListResponse {
  /** The OrganizationResource items on this page */
  value: OrganizationResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Response of get all plan data Operation. */
export interface PlanDataListResponse {
  /** The PlanDataResource items on this page */
  value: PlanDataResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The type used for update operations of the NewRelicMonitorResource. */
export interface NewRelicMonitorResourceUpdate {
  /** The managed service identities assigned to this resource. */
  identity?: ManagedServiceIdentity;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** MarketplaceSubscriptionStatus of the resource */
  newRelicAccountProperties?: NewRelicAccountProperties;
  /** User Info */
  userInfo?: UserInfo;
  /** Plan details */
  planData?: PlanData;
  /** Source of org creation */
  orgCreationSource?: OrgCreationSource;
  /** Source of account creation */
  accountCreationSource?: AccountCreationSource;
}

/** Request of get metrics Operation. */
export interface MetricsRequest {
  /** User Email */
  userEmail: string;
}

/** Set of rules for sending metrics for the Monitor resource. */
export interface MetricRules {
  /** Flag specifying if metrics should be sent for the Monitor resource. */
  sendMetrics?: SendMetricsStatus;
  /** List of filtering tags to be used for capturing metrics. */
  filteringTags?: FilteringTag[];
  /** User Email */
  userEmail?: string;
}

/** The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored. */
export interface FilteringTag {
  /** The name (also known as the key) of the tag. */
  name?: string;
  /** The value of the tag. */
  value?: string;
  /** Valid actions for a filtering tag. Exclusion takes priority over inclusion. */
  action?: TagAction;
}

/** Request of get metrics status Operation. */
export interface MetricsStatusRequest {
  /** Azure resource IDs */
  azureResourceIds?: string[];
  /** User Email */
  userEmail: string;
}

/** Response of get metrics status Operation. */
export interface MetricsStatusResponse {
  /** Azure resource IDs */
  azureResourceIds?: string[];
}

/** Request of a app services get Operation. */
export interface AppServicesGetRequest {
  /** Azure resource IDs */
  azureResourceIds?: string[];
  /** User Email */
  userEmail: string;
}

/** Response of a list app services Operation. */
export interface AppServicesListResponse {
  /** The AppServiceInfo items on this page */
  value: AppServiceInfo[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Details of VM Resource having NewRelic OneAgent installed */
export interface AppServiceInfo {
  /** Azure App service resource ID */
  azureResourceId?: string;
  /** Version of the NewRelic agent installed on the App service. */
  agentVersion?: string;
  /** Status of the NewRelic agent installed on the App service. */
  agentStatus?: string;
}

/** Request of a switch billing Operation. */
export interface SwitchBillingRequest {
  /** Azure resource Id */
  azureResourceId?: string;
  /** Organization id */
  organizationId?: string;
  /** Plan details */
  planData?: PlanData;
  /** User Email */
  userEmail: string;
}

/** Request of a Hosts get Operation. */
export interface HostsGetRequest {
  /** VM resource IDs */
  vmIds?: string[];
  /** User Email */
  userEmail: string;
}

/** Response of a list VM Host Operation. */
export interface VMHostsListResponse {
  /** The VMInfo items on this page */
  value: VMInfo[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Details of VM Resource having NewRelic OneAgent installed */
export interface VMInfo {
  /** Azure VM resource ID */
  vmId?: string;
  /** Version of the NewRelic agent installed on the VM. */
  agentVersion?: string;
  /** Status of the NewRelic agent installed on the VM. */
  agentStatus?: string;
}

/** List of all the resources being monitored by NewRelic monitor resource */
export interface MonitoredResourceListResponse {
  /** The MonitoredResource items on this page */
  value: MonitoredResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Details of resource being monitored by NewRelic monitor resource */
export interface MonitoredResource {
  /** The ARM id of the resource. */
  id?: string;
  /** Flag indicating if resource is sending metrics to NewRelic. */
  sendingMetrics?: SendingMetricsStatus;
  /** Reason for why the resource is sending metrics (or why it is not sending). */
  reasonForMetricsStatus?: string;
  /** Flag indicating if resource is sending logs to NewRelic. */
  sendingLogs?: SendingLogsStatus;
  /** Reason for why the resource is sending logs (or why it is not sending). */
  reasonForLogsStatus?: string;
}

/** The response of a TagRule list operation. */
export interface TagRuleListResult {
  /** The TagRule items on this page */
  value: TagRule[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Set of rules for sending logs for the Monitor resource. */
export interface LogRules {
  /** Flag specifying if AAD logs should be sent for the Monitor resource. */
  sendAadLogs?: SendAadLogsStatus;
  /** Flag specifying if subscription logs should be sent for the Monitor resource. */
  sendSubscriptionLogs?: SendSubscriptionLogsStatus;
  /** Flag specifying if activity logs from Azure resources should be sent for the Monitor resource. */
  sendActivityLogs?: SendActivityLogsStatus;
  /**
   * List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured.
   * If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
   */
  filteringTags?: FilteringTag[];
}

/** The type used for update operations of the TagRule. */
export interface TagRuleUpdate {
  /** Set of rules for sending logs for the Monitor resource. */
  logRules?: LogRules;
  /** Set of rules for sending metrics for the Monitor resource. */
  metricRules?: MetricRules;
}

/** Response of payload to be passed while installing VM agent. */
export interface VMExtensionPayload {
  /** Ingestion key of the account */
  ingestionKey?: string;
}

/** App services Get Parameter specification. */
export interface AppServicesGetParameter {
  /** The details of the app services get request. */
  request: AppServicesGetRequest;
}

/** Switch Billing Parameter specification. */
export interface SwitchBillingParameter {
  /** The details of the switch billing request. */
  request: SwitchBillingRequest;
}

/** Host Get Parameter specification. */
export interface HostsGetParameter {
  /** The details of the Hosts get request. */
  request: HostsGetRequest;
}

/** Get Metrics Status Parameter specification. */
export interface MetricsRequestParameter {
  /** The details of the get metrics status request. */
  request: MetricsRequest;
}

/** Get Metrics Status Parameter specification. */
export interface MetricsStatusRequestParameter {
  /** The details of the get metrics status request. */
  request: MetricsStatusRequest;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The details of a account resource. */
export interface AccountResource extends ProxyResource {
  /** organization id */
  organizationId?: string;
  /** account id */
  accountId?: string;
  /** account name */
  accountName?: string;
  /** region */
  region?: string;
}

/** The details of a Organization resource. */
export interface OrganizationResource extends ProxyResource {
  /** organization id */
  organizationId?: string;
  /** organization name */
  organizationName?: string;
  /** Billing source */
  billingSource?: BillingSource;
}

/** The details of a PlanData resource. */
export interface PlanDataResource extends ProxyResource {
  /** Plan details */
  planData?: PlanData;
  /** Source of org creation */
  orgCreationSource?: OrgCreationSource;
  /** Source of account creation */
  accountCreationSource?: AccountCreationSource;
}

/** A tag rule belonging to NewRelic account */
export interface TagRule extends ProxyResource {
  /**
   * Provisioning State of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Set of rules for sending logs for the Monitor resource. */
  logRules?: LogRules;
  /** Set of rules for sending metrics for the Monitor resource. */
  metricRules?: MetricRules;
}

/** A Monitor Resource by NewRelic */
export interface NewRelicMonitorResource extends TrackedResource {
  /** The managed service identities assigned to this resource. */
  identity?: ManagedServiceIdentity;
  /**
   * Provisioning State of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * MonitoringStatus of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly monitoringStatus?: MonitoringStatus;
  /**
   * NewRelic Organization properties of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly marketplaceSubscriptionStatus?: MarketplaceSubscriptionStatus;
  /**
   * Marketplace Subscription Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly marketplaceSubscriptionId?: string;
  /** MarketplaceSubscriptionStatus of the resource */
  newRelicAccountProperties?: NewRelicAccountProperties;
  /** User Info */
  userInfo?: UserInfo;
  /** Plan details */
  planData?: PlanData;
  /**
   * Liftr resource category
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly liftrResourceCategory?: LiftrResourceCategories;
  /**
   * Liftr resource preference. The priority of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly liftrResourcePreference?: number;
  /** Source of org creation */
  orgCreationSource?: OrgCreationSource;
  /** Source of account creation */
  accountCreationSource?: AccountCreationSource;
}

/** Defines headers for Monitors_createOrUpdate operation. */
export interface MonitorsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Monitors_delete operation. */
export interface MonitorsDeleteHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Monitors_switchBilling operation. */
export interface MonitorsSwitchBillingHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for TagRules_createOrUpdate operation. */
export interface TagRulesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for TagRules_delete operation. */
export interface TagRulesDeleteHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Monitor resource creation request accepted */
  Accepted = "Accepted",
  /** Monitor resource creation started */
  Creating = "Creating",
  /** Monitor resource is being updated */
  Updating = "Updating",
  /** Monitor resource deletion started */
  Deleting = "Deleting",
  /** Monitor resource creation successful */
  Succeeded = "Succeeded",
  /** Monitor resource creation failed */
  Failed = "Failed",
  /** Monitor resource creation canceled */
  Canceled = "Canceled",
  /** Monitor resource is deleted */
  Deleted = "Deleted",
  /** Monitor resource state is unknown */
  NotSpecified = "NotSpecified"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted**: Monitor resource creation request accepted \
 * **Creating**: Monitor resource creation started \
 * **Updating**: Monitor resource is being updated \
 * **Deleting**: Monitor resource deletion started \
 * **Succeeded**: Monitor resource creation successful \
 * **Failed**: Monitor resource creation failed \
 * **Canceled**: Monitor resource creation canceled \
 * **Deleted**: Monitor resource is deleted \
 * **NotSpecified**: Monitor resource state is unknown
 */
export type ProvisioningState = string;

/** Known values of {@link MonitoringStatus} that the service accepts. */
export enum KnownMonitoringStatus {
  /** monitoring is enabled */
  Enabled = "Enabled",
  /** monitoring is disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for MonitoringStatus. \
 * {@link KnownMonitoringStatus} can be used interchangeably with MonitoringStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: monitoring is enabled \
 * **Disabled**: monitoring is disabled
 */
export type MonitoringStatus = string;

/** Known values of {@link MarketplaceSubscriptionStatus} that the service accepts. */
export enum KnownMarketplaceSubscriptionStatus {
  /** monitoring is enabled */
  Active = "Active",
  /** monitoring is disabled */
  Suspended = "Suspended"
}

/**
 * Defines values for MarketplaceSubscriptionStatus. \
 * {@link KnownMarketplaceSubscriptionStatus} can be used interchangeably with MarketplaceSubscriptionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active**: monitoring is enabled \
 * **Suspended**: monitoring is disabled
 */
export type MarketplaceSubscriptionStatus = string;

/** Known values of {@link SingleSignOnStates} that the service accepts. */
export enum KnownSingleSignOnStates {
  /** Initial */
  Initial = "Initial",
  /** Enable */
  Enable = "Enable",
  /** Disable */
  Disable = "Disable",
  /** Existing */
  Existing = "Existing"
}

/**
 * Defines values for SingleSignOnStates. \
 * {@link KnownSingleSignOnStates} can be used interchangeably with SingleSignOnStates,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initial** \
 * **Enable** \
 * **Disable** \
 * **Existing**
 */
export type SingleSignOnStates = string;

/** Known values of {@link UsageType} that the service accepts. */
export enum KnownUsageType {
  /** Usage type is PAYG */
  Payg = "PAYG",
  /** Usage type is COMMITTED */
  Committed = "COMMITTED"
}

/**
 * Defines values for UsageType. \
 * {@link KnownUsageType} can be used interchangeably with UsageType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PAYG**: Usage type is PAYG \
 * **COMMITTED**: Usage type is COMMITTED
 */
export type UsageType = string;

/** Known values of {@link BillingCycle} that the service accepts. */
export enum KnownBillingCycle {
  /** Billing cycle is YEARLY */
  Yearly = "YEARLY",
  /** Billing cycle is MONTHLY */
  Monthly = "MONTHLY",
  /** Billing cycle is WEEKLY */
  Weekly = "WEEKLY"
}

/**
 * Defines values for BillingCycle. \
 * {@link KnownBillingCycle} can be used interchangeably with BillingCycle,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **YEARLY**: Billing cycle is YEARLY \
 * **MONTHLY**: Billing cycle is MONTHLY \
 * **WEEKLY**: Billing cycle is WEEKLY
 */
export type BillingCycle = string;

/** Known values of {@link LiftrResourceCategories} that the service accepts. */
export enum KnownLiftrResourceCategories {
  /** Unknown */
  Unknown = "Unknown",
  /** MonitorLogs */
  MonitorLogs = "MonitorLogs"
}

/**
 * Defines values for LiftrResourceCategories. \
 * {@link KnownLiftrResourceCategories} can be used interchangeably with LiftrResourceCategories,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **MonitorLogs**
 */
export type LiftrResourceCategories = string;

/** Known values of {@link OrgCreationSource} that the service accepts. */
export enum KnownOrgCreationSource {
  /** Org is created from LIFTR */
  Liftr = "LIFTR",
  /** Org is created from NEWRELIC */
  Newrelic = "NEWRELIC"
}

/**
 * Defines values for OrgCreationSource. \
 * {@link KnownOrgCreationSource} can be used interchangeably with OrgCreationSource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LIFTR**: Org is created from LIFTR \
 * **NEWRELIC**: Org is created from NEWRELIC
 */
export type OrgCreationSource = string;

/** Known values of {@link AccountCreationSource} that the service accepts. */
export enum KnownAccountCreationSource {
  /** Account is created from LIFTR */
  Liftr = "LIFTR",
  /** Account is created from NEWRELIC */
  Newrelic = "NEWRELIC"
}

/**
 * Defines values for AccountCreationSource. \
 * {@link KnownAccountCreationSource} can be used interchangeably with AccountCreationSource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LIFTR**: Account is created from LIFTR \
 * **NEWRELIC**: Account is created from NEWRELIC
 */
export type AccountCreationSource = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned, UserAssigned"
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned**
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link BillingSource} that the service accepts. */
export enum KnownBillingSource {
  /** Billing source is Azure */
  Azure = "AZURE",
  /** Newrelic */
  Newrelic = "NEWRELIC"
}

/**
 * Defines values for BillingSource. \
 * {@link KnownBillingSource} can be used interchangeably with BillingSource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AZURE**: Billing source is Azure \
 * **NEWRELIC**
 */
export type BillingSource = string;

/** Known values of {@link SendMetricsStatus} that the service accepts. */
export enum KnownSendMetricsStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for SendMetricsStatus. \
 * {@link KnownSendMetricsStatus} can be used interchangeably with SendMetricsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type SendMetricsStatus = string;

/** Known values of {@link TagAction} that the service accepts. */
export enum KnownTagAction {
  /** Include */
  Include = "Include",
  /** Exclude */
  Exclude = "Exclude"
}

/**
 * Defines values for TagAction. \
 * {@link KnownTagAction} can be used interchangeably with TagAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Include** \
 * **Exclude**
 */
export type TagAction = string;

/** Known values of {@link SendingMetricsStatus} that the service accepts. */
export enum KnownSendingMetricsStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for SendingMetricsStatus. \
 * {@link KnownSendingMetricsStatus} can be used interchangeably with SendingMetricsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type SendingMetricsStatus = string;

/** Known values of {@link SendingLogsStatus} that the service accepts. */
export enum KnownSendingLogsStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for SendingLogsStatus. \
 * {@link KnownSendingLogsStatus} can be used interchangeably with SendingLogsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type SendingLogsStatus = string;

/** Known values of {@link SendAadLogsStatus} that the service accepts. */
export enum KnownSendAadLogsStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for SendAadLogsStatus. \
 * {@link KnownSendAadLogsStatus} can be used interchangeably with SendAadLogsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type SendAadLogsStatus = string;

/** Known values of {@link SendSubscriptionLogsStatus} that the service accepts. */
export enum KnownSendSubscriptionLogsStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for SendSubscriptionLogsStatus. \
 * {@link KnownSendSubscriptionLogsStatus} can be used interchangeably with SendSubscriptionLogsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type SendSubscriptionLogsStatus = string;

/** Known values of {@link SendActivityLogsStatus} that the service accepts. */
export enum KnownSendActivityLogsStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for SendActivityLogsStatus. \
 * {@link KnownSendActivityLogsStatus} can be used interchangeably with SendActivityLogsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type SendActivityLogsStatus = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface AccountsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AccountsListOperationResponse = AccountsListResponse;

/** Optional parameters. */
export interface AccountsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AccountsListNextResponse = AccountsListResponse;

/** Optional parameters. */
export interface MonitorsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type MonitorsListBySubscriptionResponse = NewRelicMonitorResourceListResult;

/** Optional parameters. */
export interface MonitorsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type MonitorsListByResourceGroupResponse = NewRelicMonitorResourceListResult;

/** Optional parameters. */
export interface MonitorsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MonitorsGetResponse = NewRelicMonitorResource;

/** Optional parameters. */
export interface MonitorsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type MonitorsCreateOrUpdateResponse = NewRelicMonitorResource;

/** Optional parameters. */
export interface MonitorsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type MonitorsUpdateResponse = NewRelicMonitorResource;

/** Optional parameters. */
export interface MonitorsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface MonitorsGetMetricRulesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getMetricRules operation. */
export type MonitorsGetMetricRulesResponse = MetricRules;

/** Optional parameters. */
export interface MonitorsGetMetricStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getMetricStatus operation. */
export type MonitorsGetMetricStatusResponse = MetricsStatusResponse;

/** Optional parameters. */
export interface MonitorsListAppServicesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAppServices operation. */
export type MonitorsListAppServicesResponse = AppServicesListResponse;

/** Optional parameters. */
export interface MonitorsSwitchBillingOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the switchBilling operation. */
export type MonitorsSwitchBillingResponse = NewRelicMonitorResource;

/** Optional parameters. */
export interface MonitorsListHostsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listHosts operation. */
export type MonitorsListHostsResponse = VMHostsListResponse;

/** Optional parameters. */
export interface MonitorsListMonitoredResourcesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMonitoredResources operation. */
export type MonitorsListMonitoredResourcesResponse = MonitoredResourceListResponse;

/** Optional parameters. */
export interface MonitorsVmHostPayloadOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the vmHostPayload operation. */
export type MonitorsVmHostPayloadResponse = VMExtensionPayload;

/** Optional parameters. */
export interface MonitorsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type MonitorsListBySubscriptionNextResponse = NewRelicMonitorResourceListResult;

/** Optional parameters. */
export interface MonitorsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type MonitorsListByResourceGroupNextResponse = NewRelicMonitorResourceListResult;

/** Optional parameters. */
export interface MonitorsListAppServicesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAppServicesNext operation. */
export type MonitorsListAppServicesNextResponse = AppServicesListResponse;

/** Optional parameters. */
export interface MonitorsListHostsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listHostsNext operation. */
export type MonitorsListHostsNextResponse = VMHostsListResponse;

/** Optional parameters. */
export interface MonitorsListMonitoredResourcesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMonitoredResourcesNext operation. */
export type MonitorsListMonitoredResourcesNextResponse = MonitoredResourceListResponse;

/** Optional parameters. */
export interface OrganizationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OrganizationsListOperationResponse = OrganizationsListResponse;

/** Optional parameters. */
export interface OrganizationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OrganizationsListNextResponse = OrganizationsListResponse;

/** Optional parameters. */
export interface PlansListOptionalParams extends coreClient.OperationOptions {
  /** Account Id. */
  accountId?: string;
  /** Organization Id. */
  organizationId?: string;
}

/** Contains response data for the list operation. */
export type PlansListResponse = PlanDataListResponse;

/** Optional parameters. */
export interface PlansListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type PlansListNextResponse = PlanDataListResponse;

/** Optional parameters. */
export interface TagRulesListByNewRelicMonitorResourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByNewRelicMonitorResource operation. */
export type TagRulesListByNewRelicMonitorResourceResponse = TagRuleListResult;

/** Optional parameters. */
export interface TagRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TagRulesGetResponse = TagRule;

/** Optional parameters. */
export interface TagRulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type TagRulesCreateOrUpdateResponse = TagRule;

/** Optional parameters. */
export interface TagRulesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TagRulesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type TagRulesUpdateResponse = TagRule;

/** Optional parameters. */
export interface TagRulesListByNewRelicMonitorResourceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByNewRelicMonitorResourceNext operation. */
export type TagRulesListByNewRelicMonitorResourceNextResponse = TagRuleListResult;

/** Optional parameters. */
export interface NewRelicObservabilityOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
