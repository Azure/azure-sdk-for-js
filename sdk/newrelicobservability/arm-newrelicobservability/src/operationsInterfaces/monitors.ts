/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  NewRelicMonitorResource,
  MonitorsListBySubscriptionOptionalParams,
  MonitorsListByResourceGroupOptionalParams,
  AppServiceInfo,
  AppServicesGetRequest,
  MonitorsListAppServicesOptionalParams,
  VMInfo,
  HostsGetRequest,
  MonitorsListHostsOptionalParams,
  MonitoredResource,
  MonitorsListMonitoredResourcesOptionalParams,
  MonitorsGetOptionalParams,
  MonitorsGetResponse,
  MonitorsCreateOrUpdateOptionalParams,
  MonitorsCreateOrUpdateResponse,
  NewRelicMonitorResourceUpdate,
  MonitorsUpdateOptionalParams,
  MonitorsUpdateResponse,
  MonitorsDeleteOptionalParams,
  MetricsRequest,
  MonitorsGetMetricRulesOptionalParams,
  MonitorsGetMetricRulesResponse,
  MetricsStatusRequest,
  MonitorsGetMetricStatusOptionalParams,
  MonitorsGetMetricStatusResponse,
  SwitchBillingRequest,
  MonitorsSwitchBillingOptionalParams,
  MonitorsSwitchBillingResponse,
  MonitorsVmHostPayloadOptionalParams,
  MonitorsVmHostPayloadResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Monitors. */
export interface Monitors {
  /**
   * List NewRelicMonitorResource resources by subscription ID
   * @param options The options parameters.
   */
  listBySubscription(
    options?: MonitorsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<NewRelicMonitorResource>;
  /**
   * List NewRelicMonitorResource resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: MonitorsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<NewRelicMonitorResource>;
  /**
   * List the app service resources currently being monitored by the NewRelic resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param request The details of the app services get request.
   * @param options The options parameters.
   */
  listAppServices(
    resourceGroupName: string,
    monitorName: string,
    request: AppServicesGetRequest,
    options?: MonitorsListAppServicesOptionalParams
  ): PagedAsyncIterableIterator<AppServiceInfo>;
  /**
   * List the compute vm resources currently being monitored by the NewRelic resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param request The details of the Hosts get request.
   * @param options The options parameters.
   */
  listHosts(
    resourceGroupName: string,
    monitorName: string,
    request: HostsGetRequest,
    options?: MonitorsListHostsOptionalParams
  ): PagedAsyncIterableIterator<VMInfo>;
  /**
   * List the resources currently being monitored by the NewRelic monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param options The options parameters.
   */
  listMonitoredResources(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorsListMonitoredResourcesOptionalParams
  ): PagedAsyncIterableIterator<MonitoredResource>;
  /**
   * Get a NewRelicMonitorResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorsGetOptionalParams
  ): Promise<MonitorsGetResponse>;
  /**
   * Create a NewRelicMonitorResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    monitorName: string,
    resource: NewRelicMonitorResource,
    options?: MonitorsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<MonitorsCreateOrUpdateResponse>,
      MonitorsCreateOrUpdateResponse
    >
  >;
  /**
   * Create a NewRelicMonitorResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    monitorName: string,
    resource: NewRelicMonitorResource,
    options?: MonitorsCreateOrUpdateOptionalParams
  ): Promise<MonitorsCreateOrUpdateResponse>;
  /**
   * Update a NewRelicMonitorResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    monitorName: string,
    properties: NewRelicMonitorResourceUpdate,
    options?: MonitorsUpdateOptionalParams
  ): Promise<MonitorsUpdateResponse>;
  /**
   * Delete a NewRelicMonitorResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param userEmail User Email.
   * @param monitorName Name of the Monitors resource
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    userEmail: string,
    monitorName: string,
    options?: MonitorsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete a NewRelicMonitorResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param userEmail User Email.
   * @param monitorName Name of the Monitors resource
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    userEmail: string,
    monitorName: string,
    options?: MonitorsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Get metric rules
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param request The details of the get metrics status request.
   * @param options The options parameters.
   */
  getMetricRules(
    resourceGroupName: string,
    monitorName: string,
    request: MetricsRequest,
    options?: MonitorsGetMetricRulesOptionalParams
  ): Promise<MonitorsGetMetricRulesResponse>;
  /**
   * Get metric status
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param request The details of the get metrics status request.
   * @param options The options parameters.
   */
  getMetricStatus(
    resourceGroupName: string,
    monitorName: string,
    request: MetricsStatusRequest,
    options?: MonitorsGetMetricStatusOptionalParams
  ): Promise<MonitorsGetMetricStatusResponse>;
  /**
   * Switches the billing for NewRelic monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param request The details of the switch billing request.
   * @param options The options parameters.
   */
  switchBilling(
    resourceGroupName: string,
    monitorName: string,
    request: SwitchBillingRequest,
    options?: MonitorsSwitchBillingOptionalParams
  ): Promise<MonitorsSwitchBillingResponse>;
  /**
   * Returns the payload that needs to be passed in the request body for installing NewRelic agent on a
   * VM.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Name of the Monitors resource
   * @param options The options parameters.
   */
  vmHostPayload(
    resourceGroupName: string,
    monitorName: string,
    options?: MonitorsVmHostPayloadOptionalParams
  ): Promise<MonitorsVmHostPayloadResponse>;
}
