/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type InventoryItemPropertiesUnion =
  | InventoryItemProperties
  | ResourcePoolInventoryItem
  | VirtualMachineInventoryItem
  | VirtualMachineTemplateInventoryItem
  | VirtualNetworkInventoryItem
  | ClusterInventoryItem
  | DatastoreInventoryItem
  | HostInventoryItem;

/** Lists the operations available. */
export interface OperationsList {
  /** Url to follow for getting next page of operations. */
  nextLink?: string;
  /** Array of operations */
  value: Operation[];
}

/** Operation provided by provider */
export interface Operation {
  /** Name of the operation */
  name?: string;
  /** Indicates whether the operation is data action or not. */
  isDataAction?: boolean;
  /** Properties of the operation */
  display?: OperationDisplay;
}

/** Properties of the operation */
export interface OperationDisplay {
  /** Provider name */
  provider?: string;
  /** Resource name */
  resource?: string;
  /** Operation name */
  operation?: string;
  /** Description of the operation */
  description?: string;
}

/** Error response. */
export interface ErrorResponse {
  /** The error details. */
  error?: ErrorDefinition;
}

/** Error definition. */
export interface ErrorDefinition {
  /**
   * Service specific error code which serves as the substatus for the HTTP error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Description of the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Internal error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDefinition[];
}

/** Describes the properties of an AssessPatches result. */
export interface VirtualMachineAssessPatchesResult {
  /**
   * The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: PatchOperationStatus;
  /**
   * The activity ID of the operation that produced this result.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assessmentActivityId?: string;
  /**
   * The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rebootPending?: boolean;
  /** Summarization of patches available for installation on the machine by classification. */
  availablePatchCountByClassification?: AvailablePatchCountByClassification;
  /**
   * The UTC timestamp when the operation began.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startDateTime?: Date;
  /**
   * The UTC timestamp when the operation finished.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedDateTime?: Date;
  /**
   * Indicates if operation was triggered by user or by platform.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedBy?: PatchOperationStartedBy;
  /**
   * Specifies the patch service used for the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly patchServiceUsed?: PatchServiceUsed;
  /**
   * The operating system type of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OsTypeUM;
  /**
   * The errors that were encountered during execution of the operation. The details array contains the list of them.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorDetails?: ErrorDetail;
}

/** Summarization of patches available for installation on the machine by classification. */
export interface AvailablePatchCountByClassification {
  /**
   * Number of security patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly security?: number;
  /**
   * Number of critical patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly critical?: number;
  /**
   * Number of definition patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly definition?: number;
  /**
   * Number of update Rollup patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updateRollup?: number;
  /**
   * Number of feature pack patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly featurePack?: number;
  /**
   * Number of service pack patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly servicePack?: number;
  /**
   * Number of tools patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tools?: number;
  /**
   * Number of updates category patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updates?: number;
  /**
   * Number of other patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly other?: number;
}

/** Error details. */
export interface ErrorDetail {
  /** The error's code. */
  code: string;
  /** A human readable error message. */
  message: string;
  /** Indicates which property in the request is responsible for the error. */
  target?: string;
  /** Additional error details. */
  details?: ErrorDetail[];
}

/** Input for InstallPatches as directly received by the API */
export interface VirtualMachineInstallPatchesParameters {
  /** Specifies the maximum amount of time that the operation will run. It must be an ISO 8601-compliant duration string such as PT4H (4 hours) */
  maximumDuration: string;
  /** Defines when it is acceptable to reboot a VM during a software update operation. */
  rebootSetting: VMGuestPatchRebootSetting;
  /** Input for InstallPatches on a Windows VM, as directly received by the API */
  windowsParameters?: WindowsParameters;
  /** Input for InstallPatches on a Linux VM, as directly received by the API */
  linuxParameters?: LinuxParameters;
}

/** Input for InstallPatches on a Windows VM, as directly received by the API */
export interface WindowsParameters {
  /** The update classifications to select when installing patches for Windows. */
  classificationsToInclude?: VMGuestPatchClassificationWindows[];
  /** Kbs to include in the patch operation */
  kbNumbersToInclude?: string[];
  /** Kbs to exclude in the patch operation */
  kbNumbersToExclude?: string[];
  /** Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true. */
  excludeKbsRequiringReboot?: boolean;
  /** This is used to install patches that were published on or before this given max published date. */
  maxPatchPublishDate?: Date;
}

/** Input for InstallPatches on a Linux VM, as directly received by the API */
export interface LinuxParameters {
  /** The update classifications to select when installing patches for Linux. */
  classificationsToInclude?: VMGuestPatchClassificationLinux[];
  /** packages to include in the patch operation. Format: packageName_packageVersion */
  packageNameMasksToInclude?: string[];
  /** packages to exclude in the patch operation. Format: packageName_packageVersion */
  packageNameMasksToExclude?: string[];
}

/** The result summary of an installation operation. */
export interface VirtualMachineInstallPatchesResult {
  /**
   * The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Failed", "Succeeded", "Unknown" or "CompletedWithWarnings."
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: PatchOperationStatus;
  /**
   * The activity ID of the operation that produced this result.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly installationActivityId?: string;
  /**
   * The reboot state of the VM following completion of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rebootStatus?: VMGuestPatchRebootStatus;
  /**
   * Whether the operation ran out of time before it completed all its intended actions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maintenanceWindowExceeded?: boolean;
  /**
   * The number of patches that were not installed due to the user blocking their installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly excludedPatchCount?: number;
  /**
   * The number of patches that were detected as available for install, but did not meet the operation's criteria.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly notSelectedPatchCount?: number;
  /**
   * The number of patches that were identified as meeting the installation criteria, but were not able to be installed. Typically this happens when maintenanceWindowExceeded == true.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly pendingPatchCount?: number;
  /**
   * The number of patches successfully installed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly installedPatchCount?: number;
  /**
   * The number of patches that could not be installed due to some issue. See errors for details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly failedPatchCount?: number;
  /**
   * The UTC timestamp when the operation began.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startDateTime?: Date;
  /**
   * The UTC timestamp when the operation finished.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedDateTime?: Date;
  /**
   * Indicates if operation was triggered by user or by platform.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedBy?: PatchOperationStartedBy;
  /**
   * Specifies the patch service used for the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly patchServiceUsed?: PatchServiceUsed;
  /**
   * The operating system type of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OsTypeUM;
  /**
   * The errors that were encountered during execution of the operation. The details array contains the list of them.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorDetails?: ErrorDetail;
}

/** Define the resourcePool. */
export interface ResourcePool {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Gets or sets the ARM Id of the vCenter resource in which this resource pool resides. */
  vCenterId?: string;
  /** Gets or sets the vCenter MoRef (Managed Object Reference) ID for the resource pool. */
  moRefId?: string;
  /** Gets or sets the inventory Item ID for the resource pool. */
  inventoryItemId?: string;
  /**
   * Gets or sets the vCenter Managed Object name for the resource pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moName?: string;
  /**
   * Gets or sets CPUSharesLevel which specifies the CPU allocation level for this pool.
   * This property is used in relative allocation between resource consumers.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuSharesLevel?: string;
  /**
   * Gets or sets CPUReservationMHz which specifies the CPU size in MHz that is guaranteed
   * to be available.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuReservationMHz?: number;
  /**
   * Gets or sets CPULimitMHz which specifies a CPU usage limit in MHz.
   * Utilization will not exceed this limit even if there are available resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuLimitMHz?: number;
  /**
   * Gets or sets CPUSharesLevel which specifies the memory allocation level for this pool.
   * This property is used in relative allocation between resource consumers.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memSharesLevel?: string;
  /**
   * Gets or sets MemReservationMB which specifies the guaranteed available memory in
   * megabytes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memReservationMB?: number;
  /**
   * Gets or sets MemLimitMB specifies a memory usage limit in megabytes.
   * Utilization will not exceed the specified limit even if there are available resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memLimitMB?: number;
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets or sets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** The resource status information. */
export interface ResourceStatus {
  /**
   * The type of the condition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Status of the condition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * The reason for the condition's status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: string;
  /**
   * A human readable message indicating details about the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Severity with which to treat failures of this type of condition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly severity?: string;
  /**
   * The last update time for this condition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdatedAt?: Date;
}

/** The extended location. */
export interface ExtendedLocation {
  /** The extended location type. */
  type?: string;
  /** The extended location name. */
  name?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Object containing updates for patch operations. */
export interface ResourcePatch {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** List of ResourcePools. */
export interface ResourcePoolsList {
  /** Url to follow for getting next page of ResourcePools. */
  nextLink?: string;
  /** Array of ResourcePools */
  value: ResourcePool[];
}

/** Define the cluster. */
export interface Cluster {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Gets or sets the ARM Id of the vCenter resource in which this cluster resides. */
  vCenterId?: string;
  /** Gets or sets the vCenter MoRef (Managed Object Reference) ID for the cluster. */
  moRefId?: string;
  /** Gets or sets the inventory Item ID for the cluster. */
  inventoryItemId?: string;
  /**
   * Gets or sets the vCenter Managed Object name for the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moName?: string;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * Gets or sets the datastore ARM ids.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly datastoreIds?: string[];
  /**
   * Gets or sets the network ARM ids.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkIds?: string[];
  /**
   * Gets or sets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** List of Clusters. */
export interface ClustersList {
  /** Url to follow for getting next page of Clusters. */
  nextLink?: string;
  /** Array of Clusters */
  value: Cluster[];
}

/** Define the host. */
export interface Host {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Gets or sets the ARM Id of the vCenter resource in which this host resides. */
  vCenterId?: string;
  /** Gets or sets the vCenter MoRef (Managed Object Reference) ID for the host. */
  moRefId?: string;
  /** Gets or sets the inventory Item ID for the host. */
  inventoryItemId?: string;
  /**
   * Gets or sets the vCenter Managed Object name for the host.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moName?: string;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * Gets or sets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** List of Hosts. */
export interface HostsList {
  /** Url to follow for getting next page of Hosts. */
  nextLink?: string;
  /** Array of Hosts */
  value: Host[];
}

/** Define the datastore. */
export interface Datastore {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Gets or sets the ARM Id of the vCenter resource in which this datastore resides. */
  vCenterId?: string;
  /** Gets or sets the vCenter MoRef (Managed Object Reference) ID for the datastore. */
  moRefId?: string;
  /** Gets or sets the inventory Item ID for the datastore. */
  inventoryItemId?: string;
  /**
   * Gets or sets the vCenter Managed Object name for the datastore.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moName?: string;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** List of Datastores. */
export interface DatastoresList {
  /** Url to follow for getting next page of Datastores. */
  nextLink?: string;
  /** Array of Datastores */
  value: Datastore[];
}

/** Defines the vCenter. */
export interface VCenter {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Gets or sets the FQDN/IPAddress of the vCenter. */
  fqdn: string;
  /** Gets or sets the port of the vCenter. */
  port?: number;
  /**
   * Gets or sets the version of the vCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Gets or sets the instance UUID of the vCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceUuid?: string;
  /**
   * Gets or sets the connection status to the vCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionStatus?: string;
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /** Username / Password Credentials to connect to vcenter. */
  credentials?: VICredential;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets or sets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Username / Password Credentials to connect to vcenter. */
export interface VICredential {
  /** Gets or sets username to connect with the vCenter. */
  username?: string;
  /** Gets or sets the password to connect with the vCenter. */
  password?: string;
}

/** List of VCenters. */
export interface VCentersList {
  /** Url to follow for getting next page of VCenters. */
  nextLink?: string;
  /** Array of VCenters */
  value: VCenter[];
}

/** Define the virtualMachine. */
export interface VirtualMachine {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /** The identity of the resource. */
  identity?: Identity;
  /**
   * Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will
   * deploy.
   */
  resourcePoolId?: string;
  /** Gets or sets the ARM Id of the template resource to deploy the virtual machine. */
  templateId?: string;
  /** Gets or sets the ARM Id of the vCenter resource in which this resource pool resides. */
  vCenterId?: string;
  /** Placement properties. */
  placementProfile?: PlacementProfile;
  /** OS properties. */
  osProfile?: OsProfile;
  /** Hardware properties. */
  hardwareProfile?: HardwareProfile;
  /** Network properties. */
  networkProfile?: NetworkProfile;
  /** Storage properties. */
  storageProfile?: StorageProfile;
  /** Guest agent status properties. */
  guestAgentProfile?: GuestAgentProfile;
  /** Gets the security profile. */
  securityProfile?: SecurityProfile;
  /** Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine. */
  moRefId?: string;
  /** Gets or sets the inventory Item ID for the virtual machine. */
  inventoryItemId?: string;
  /**
   * Gets or sets the vCenter Managed Object name for the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moName?: string;
  /**
   * Gets or sets the folder path of the vm.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly folderPath?: string;
  /**
   * Gets or sets the instance uuid of the vm.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceUuid?: string;
  /** Gets or sets the SMBIOS UUID of the vm. */
  smbiosUuid?: string;
  /** Firmware type */
  firmwareType?: FirmwareType;
  /**
   * Gets the power state of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly powerState?: string;
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets or sets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * Gets or sets a unique identifier for the vm resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmId?: string;
}

/** Defines the resource properties. */
export interface PlacementProfile {
  /** Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy. */
  resourcePoolId?: string;
  /** Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy. */
  clusterId?: string;
  /** Gets or sets the ARM Id of the host resource on which this virtual machine will deploy. */
  hostId?: string;
  /** Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept. */
  datastoreId?: string;
}

/** Defines the resource properties. */
export interface OsProfile {
  /** Gets or sets computer name. */
  computerName?: string;
  /** Gets or sets administrator username. */
  adminUsername?: string;
  /** Gets or sets administrator password. */
  adminPassword?: string;
  /** Gets or sets the guestId. */
  guestId?: string;
  /**
   * Gets or sets a value indicating whether the VM is ready for extension operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly allowExtensionOperations?: boolean;
  /** Gets or sets the type of the os. */
  osType?: OsType;
  /**
   * Gets or sets os name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osName?: string;
  /**
   * Gets or sets the current running status of VMware Tools running in the guest operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsRunningStatus?: string;
  /**
   * Gets or sets the current version status of VMware Tools installed in the guest operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsVersionStatus?: string;
  /**
   * Gets or sets the current version of VMware Tools.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsVersion?: string;
  /** Specifies the windows configuration for update management. */
  windowsConfiguration?: OsProfileWindowsConfiguration;
  /** Specifies the linux configuration for update management. */
  linuxConfiguration?: OsProfileLinuxConfiguration;
}

/** Specifies the windows configuration for update management. */
export interface OsProfileWindowsConfiguration {
  /** Specifies the assessment mode. */
  assessmentMode?: string;
  /** Specifies the patch mode. */
  patchMode?: string;
}

/** Specifies the linux configuration for update management. */
export interface OsProfileLinuxConfiguration {
  /** Specifies the assessment mode. */
  assessmentMode?: string;
  /** Specifies the patch mode. */
  patchMode?: string;
}

/** Defines the resource properties. */
export interface HardwareProfile {
  /** Gets or sets memory size in MBs for the vm. */
  memorySizeMB?: number;
  /** Gets or sets the number of vCPUs for the vm. */
  numCPUs?: number;
  /** Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified. */
  numCoresPerSocket?: number;
  /**
   * Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuHotAddEnabled?: boolean;
  /**
   * Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuHotRemoveEnabled?: boolean;
  /**
   * Gets or sets a value indicating whether memory can be added while this virtual machine is running.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memoryHotAddEnabled?: boolean;
}

/** Defines the resource properties. */
export interface NetworkProfile {
  /** Gets or sets the list of network interfaces associated with the virtual machine. */
  networkInterfaces?: NetworkInterface[];
}

/** Network Interface model */
export interface NetworkInterface {
  /** Gets or sets the name of the network interface. */
  name?: string;
  /**
   * Gets or sets the label of the virtual network in vCenter that the nic is connected to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly label?: string;
  /**
   * Gets or sets the nic ip addresses.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddresses?: string[];
  /**
   * Gets or sets the NIC MAC address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly macAddress?: string;
  /** Gets or sets the ARM Id of the network resource to connect the virtual machine. */
  networkId?: string;
  /** NIC type */
  nicType?: NICType;
  /** Gets or sets the power on boot. */
  powerOnBoot?: PowerOnBootOption;
  /**
   * Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network
   * that the nic is connected to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkMoRefId?: string;
  /**
   * Gets or sets the name of the virtual network in vCenter that the nic is connected to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkMoName?: string;
  /** Gets or sets the device key value. */
  deviceKey?: number;
  /** Gets or sets the ipsettings. */
  ipSettings?: NicIPSettings;
}

/** Defines the network interface ip settings. */
export interface NicIPSettings {
  /** Gets or sets the nic allocation method. */
  allocationMethod?: IPAddressAllocationMethod;
  /** Gets or sets the dns servers. */
  dnsServers?: string[];
  /** Gets or sets the gateway. */
  gateway?: string[];
  /** Gets or sets the ip address for the nic. */
  ipAddress?: string;
  /** Gets or sets the mask. */
  subnetMask?: string;
  /**
   * Gets or sets the primary server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryWinsServer?: string;
  /**
   * Gets or sets the secondary server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secondaryWinsServer?: string;
  /**
   * Gets or sets the IP address information being reported for this NIC. This contains the same IPv4 information above plus IPV6 information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddressInfo?: NicIPAddressSettings[];
}

/** IP address information for a virtual network adapter reported by the fabric. */
export interface NicIPAddressSettings {
  /**
   * Gets the ip address allocation method.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly allocationMethod?: string;
  /**
   * Gets the ip address for the nic.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddress?: string;
  /**
   * Gets the mask.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subnetMask?: string;
}

/** Defines the resource properties. */
export interface StorageProfile {
  /** Gets or sets the list of virtual disks associated with the virtual machine. */
  disks?: VirtualDisk[];
  /**
   * Gets or sets the list of virtual SCSI controllers associated with the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scsiControllers?: VirtualScsiController[];
}

/** Virtual disk model */
export interface VirtualDisk {
  /** Gets or sets the name of the virtual disk. */
  name?: string;
  /**
   * Gets or sets the label of the virtual disk in vCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly label?: string;
  /**
   * Gets or sets the disk object id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskObjectId?: string;
  /** Gets or sets the disk total size. */
  diskSizeGB?: number;
  /** Gets or sets the device key value. */
  deviceKey?: number;
  /** Gets or sets the disk mode. */
  diskMode?: DiskMode;
  /** Gets or sets the controller id. */
  controllerKey?: number;
  /** Gets or sets the unit number of the disk on the controller. */
  unitNumber?: number;
  /** Gets or sets the device name. */
  deviceName?: string;
  /** Gets or sets the disk backing type. */
  diskType?: DiskType;
}

/** This data object type contains the properties of a SCSI controller device attached to a virtual machine that is reported by the controller. */
export interface VirtualScsiController {
  /** Gets or sets the controller type. */
  type?: ScsiControllerType;
  /** Gets or sets the key of the controller. */
  controllerKey?: number;
  /** Gets or sets the bus number of the controller. */
  busNumber?: number;
  /** Gets or sets the SCSI controller unit number. */
  scsiCtlrUnitNumber?: number;
  /** Gets or sets the sharing mode. */
  sharing?: VirtualScsiSharing;
}

/** Defines the resource properties. */
export interface GuestAgentProfile {
  /**
   * Specifies the VM's unique SMBIOS ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmUuid?: string;
  /**
   * The status of the hybrid machine agent.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: StatusTypes;
  /**
   * The time of the last status change.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastStatusChange?: Date;
  /**
   * The hybrid machine agent full version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly agentVersion?: string;
  /**
   * Details about the error state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorDetails?: ErrorDetail[];
}

/** Specifies the Security profile settings for the virtual machine. */
export interface SecurityProfile {
  /** Specifies the security settings like secure boot used while creating the virtual machine. */
  uefiSettings?: UefiSettings;
}

/** Specifies the security settings like secure boot used while creating the virtual machine. */
export interface UefiSettings {
  /** Specifies whether secure boot should be enabled on the virtual machine. */
  secureBootEnabled?: boolean;
}

/** Managed service identity. */
export interface Identity {
  /**
   * The principal id of managed service identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant of managed service identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The type of managed service identity. */
  type: IdentityType;
}

/** Defines the virtualMachineUpdate. */
export interface VirtualMachineUpdate {
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The identity of the resource. */
  identity?: Identity;
  /** Defines the resource properties. */
  hardwareProfile?: HardwareProfile;
  /** OS properties. */
  osProfile?: OsProfileUpdate;
  /** Defines the resource update properties. */
  storageProfile?: StorageProfileUpdate;
  /** Defines the update resource properties. */
  networkProfile?: NetworkProfileUpdate;
}

/** Defines the os update properties. */
export interface OsProfileUpdate {
  /** Specifies the windows configuration for update management. */
  windowsConfiguration?: OsProfileUpdateWindowsConfiguration;
  /** Specifies the linux configuration for update management. */
  linuxConfiguration?: OsProfileUpdateLinuxConfiguration;
}

/** Specifies the windows configuration for update management. */
export interface OsProfileUpdateWindowsConfiguration {
  /** Specifies the assessment mode. */
  assessmentMode?: string;
  /** Specifies the patch mode. */
  patchMode?: string;
}

/** Specifies the linux configuration for update management. */
export interface OsProfileUpdateLinuxConfiguration {
  /** Specifies the assessment mode. */
  assessmentMode?: string;
  /** Specifies the patch mode. */
  patchMode?: string;
}

/** Defines the resource update properties. */
export interface StorageProfileUpdate {
  /** Gets or sets the list of virtual disks associated with the virtual machine. */
  disks?: VirtualDiskUpdate[];
}

/** Defines the virtual disk update. */
export interface VirtualDiskUpdate {
  /** Gets or sets the name of the virtual disk. */
  name?: string;
  /** Gets or sets the disk total size. */
  diskSizeGB?: number;
  /** Gets or sets the device key value. */
  deviceKey?: number;
  /** Gets or sets the disk mode. */
  diskMode?: DiskMode;
  /** Gets or sets the controller id. */
  controllerKey?: number;
  /** Gets or sets the unit number of the disk on the controller. */
  unitNumber?: number;
  /** Gets or sets the device name. */
  deviceName?: string;
  /** Gets or sets the disk backing type. */
  diskType?: DiskType;
}

/** Defines the update resource properties. */
export interface NetworkProfileUpdate {
  /** Gets or sets the list of network interfaces associated with the virtual machine. */
  networkInterfaces?: NetworkInterfaceUpdate[];
}

/** Defines the network interface update. */
export interface NetworkInterfaceUpdate {
  /** Gets or sets the name of the network interface. */
  name?: string;
  /** Gets or sets the ARM Id of the network resource to connect the virtual machine. */
  networkId?: string;
  /** NIC type */
  nicType?: NICType;
  /** Gets or sets the power on boot. */
  powerOnBoot?: PowerOnBootOption;
  /** Gets or sets the device key value. */
  deviceKey?: number;
}

/** Defines the stop action properties. */
export interface StopVirtualMachineOptions {
  /** Gets or sets a value indicating whether to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Defaults to false. */
  skipShutdown?: boolean;
}

/** List of VirtualMachines. */
export interface VirtualMachinesList {
  /** Url to follow for getting next page of VirtualMachines. */
  nextLink?: string;
  /** Array of VirtualMachines */
  value: VirtualMachine[];
}

/** Define the virtualMachineTemplate. */
export interface VirtualMachineTemplate {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Gets or sets the ARM Id of the vCenter resource in which this template resides. */
  vCenterId?: string;
  /**
   * Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine
   * template.
   */
  moRefId?: string;
  /** Gets or sets the inventory Item ID for the virtual machine template. */
  inventoryItemId?: string;
  /**
   * Gets or sets the vCenter Managed Object name for the virtual machine template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moName?: string;
  /**
   * Gets or sets memory size in MBs for the template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memorySizeMB?: number;
  /**
   * Gets or sets the number of vCPUs for the template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numCPUs?: number;
  /**
   * Gets or sets the number of cores per socket for the template.
   * Defaults to 1 if unspecified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numCoresPerSocket?: number;
  /**
   * Gets or sets the type of the os.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OsType;
  /**
   * Gets or sets os name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osName?: string;
  /**
   * Gets or sets the folder path of the template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly folderPath?: string;
  /**
   * Gets or sets the network interfaces of the template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkInterfaces?: NetworkInterface[];
  /**
   * Gets or sets the disks the template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disks?: VirtualDisk[];
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * Gets or sets the current version status of VMware Tools installed in the guest operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsVersionStatus?: string;
  /**
   * Gets or sets the current version of VMware Tools.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsVersion?: string;
  /**
   * Firmware type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly firmwareType?: FirmwareType;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets or sets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** List of VirtualMachineTemplates. */
export interface VirtualMachineTemplatesList {
  /** Url to follow for getting next page of VirtualMachineTemplates. */
  nextLink?: string;
  /** Array of VirtualMachineTemplates */
  value: VirtualMachineTemplate[];
}

/** Define the virtualNetwork. */
export interface VirtualNetwork {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Gets or sets the ARM Id of the vCenter resource in which this template resides. */
  vCenterId?: string;
  /** Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual network. */
  moRefId?: string;
  /** Gets or sets the inventory Item ID for the virtual network. */
  inventoryItemId?: string;
  /**
   * Gets or sets the vCenter Managed Object name for the virtual network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moName?: string;
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets or sets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** List of VirtualNetworks. */
export interface VirtualNetworksList {
  /** Url to follow for getting next page of VirtualNetworks. */
  nextLink?: string;
  /** Array of VirtualNetworks */
  value: VirtualNetwork[];
}

/** Defines the resource properties. */
export interface InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType:
    | "ResourcePool"
    | "VirtualMachine"
    | "VirtualMachineTemplate"
    | "VirtualNetwork"
    | "Cluster"
    | "Datastore"
    | "Host";
  /** Gets or sets the tracked resource id corresponding to the inventory resource. */
  managedResourceId?: string;
  /** Gets or sets the MoRef (Managed Object Reference) ID for the inventory item. */
  moRefId?: string;
  /** Gets or sets the vCenter Managed Object name for the inventory item. */
  moName?: string;
  /**
   * Gets or sets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** List of InventoryItems. */
export interface InventoryItemsList {
  /** Url to follow for getting next page of InventoryItems. */
  nextLink?: string;
  /** Array of InventoryItems */
  value: InventoryItem[];
}

/** List of HybridIdentityMetadata. */
export interface HybridIdentityMetadataList {
  /** Url to follow for getting next page of HybridIdentityMetadata. */
  nextLink?: string;
  /** Array of HybridIdentityMetadata */
  value: HybridIdentityMetadata[];
}

/** Describes a Machine Extension. */
export interface MachineExtension {
  /** Gets or sets the location. */
  location?: string;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** How the extension handler should be forced to update even if the extension configuration has not changed. */
  forceUpdateTag?: string;
  /** The name of the extension handler publisher. */
  publisher?: string;
  /** Specifies the type of the extension; an example is "CustomScriptExtension". */
  typePropertiesType?: string;
  /** Specifies the version of the script handler. */
  typeHandlerVersion?: string;
  /** Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. */
  enableAutomaticUpgrade?: boolean;
  /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
  autoUpgradeMinorVersion?: boolean;
  /** Json formatted public settings for the extension. */
  settings?: Record<string, unknown>;
  /** The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. */
  protectedSettings?: Record<string, unknown>;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The machine extension instance view. */
  instanceView?: MachineExtensionPropertiesInstanceView;
}

/** Describes the Machine Extension Instance View. */
export interface MachineExtensionInstanceView {
  /**
   * The machine extension name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Specifies the type of the extension; an example is "CustomScriptExtension".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Specifies the version of the script handler.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typeHandlerVersion?: string;
  /** Instance view status. */
  status?: MachineExtensionInstanceViewStatus;
}

/** Instance view status. */
export interface MachineExtensionInstanceViewStatus {
  /**
   * The status code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The level code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly level?: StatusLevelTypes;
  /**
   * The short localizable label for the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayStatus?: string;
  /**
   * The detailed status message, including for alerts and error messages.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The time of the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly time?: Date;
}

/** Describes the Machine Extensions List Result. */
export interface MachineExtensionsListResult {
  /** The list of extensions */
  value?: MachineExtension[];
  /** The uri to fetch the next page of machine extensions. Call ListNext() with this to fetch the next page of extensions. */
  nextLink?: string;
}

/** Username / Password Credentials to connect to guest. */
export interface GuestCredential {
  /** Gets or sets username to connect with the guest. */
  username?: string;
  /** Gets or sets the password to connect with the guest. */
  password?: string;
}

/** HTTP Proxy configuration for the VM. */
export interface HttpProxyConfiguration {
  /** Gets or sets httpsProxy url. */
  httpsProxy?: string;
}

/** List of GuestAgent. */
export interface GuestAgentList {
  /** Url to follow for getting next page of GuestAgent. */
  nextLink?: string;
  /** Array of GuestAgent */
  value: GuestAgent[];
}

/** Condition defines an extension to status. */
export interface Condition {
  /**
   * Status of the condition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * The reason for the condition's status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: string;
  /**
   * A human readable message indicating details about the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Severity with which to treat failures of this type of condition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly severity?: string;
}

/** Defines the resource properties. */
export interface InventoryItemDetails {
  /** Gets or sets the inventory Item ID for the resource. */
  inventoryItemId?: string;
  /** Gets or sets the vCenter Managed Object name for the resource. */
  moName?: string;
}

/** Describes a Machine Extension Update. */
export interface MachineExtensionUpdate extends ResourcePatch {
  /** How the extension handler should be forced to update even if the extension configuration has not changed. */
  forceUpdateTag?: string;
  /** The name of the extension handler publisher. */
  publisher?: string;
  /** Specifies the type of the extension; an example is "CustomScriptExtension". */
  type?: string;
  /** Specifies the version of the script handler. */
  typeHandlerVersion?: string;
  /** Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. */
  enableAutomaticUpgrade?: boolean;
  /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
  autoUpgradeMinorVersion?: boolean;
  /** Json formatted public settings for the extension. */
  settings?: Record<string, unknown>;
  /** The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. */
  protectedSettings?: Record<string, unknown>;
}

/** The resource pool inventory item. */
export interface ResourcePoolInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "ResourcePool";
  /** Parent resourcePool inventory resource details. */
  parent?: InventoryItemDetails;
}

/** The VM inventory item. */
export interface VirtualMachineInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "VirtualMachine";
  /** Gets or sets the type of the os. */
  osType?: OsType;
  /** Gets or sets os name. */
  osName?: string;
  /** Gets or sets the nic ip addresses. */
  ipAddresses?: string[];
  /** Gets or sets the folder path of the vm. */
  folderPath?: string;
  /** Host inventory resource details. */
  host?: InventoryItemDetails;
  /** ResourcePool inventory resource details. */
  resourcePool?: InventoryItemDetails;
  /** Gets or sets the instance uuid of the vm. */
  instanceUuid?: string;
  /** Gets or sets the SMBIOS UUID of the vm. */
  smbiosUuid?: string;
  /**
   * Gets the power state of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly powerState?: string;
  /**
   * Gets or sets the current running status of VMware Tools running in the guest operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsRunningStatus?: string;
  /**
   * Gets or sets the current version status of VMware Tools installed in the guest operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsVersionStatus?: string;
  /**
   * Gets or sets the current version of VMware Tools.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsVersion?: string;
}

/** The VM Template inventory item. */
export interface VirtualMachineTemplateInventoryItem
  extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "VirtualMachineTemplate";
  /** Gets or sets memory size in MBs for the template. */
  memorySizeMB?: number;
  /** Gets or sets the number of vCPUs for the template. */
  numCPUs?: number;
  /**
   * Gets or sets the number of cores per socket for the template.
   * Defaults to 1 if unspecified.
   */
  numCoresPerSocket?: number;
  /** Gets or sets the type of the os. */
  osType?: OsType;
  /** Gets or sets os name. */
  osName?: string;
  /** Gets or sets the folder path of the template. */
  folderPath?: string;
}

/** The Virtual network inventory item. */
export interface VirtualNetworkInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "VirtualNetwork";
}

/** The cluster inventory item. */
export interface ClusterInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "Cluster";
}

/** The datastore inventory item. */
export interface DatastoreInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "Datastore";
  /** Gets or sets Maximum capacity of this datastore, in GBs. */
  capacityGB?: number;
  /** Gets or sets Available space of this datastore, in GBs. */
  freeSpaceGB?: number;
}

/** The host inventory item. */
export interface HostInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "Host";
  /** Parent host inventory resource details. */
  parent?: InventoryItemDetails;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The machine extension instance view. */
export interface MachineExtensionPropertiesInstanceView
  extends MachineExtensionInstanceView {}

/** Defines the inventory item. */
export interface InventoryItem extends ProxyResource {
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /** They inventory type. */
  inventoryType: InventoryType;
  /** Gets or sets the tracked resource id corresponding to the inventory resource. */
  managedResourceId?: string;
  /** Gets or sets the MoRef (Managed Object Reference) ID for the inventory item. */
  moRefId?: string;
  /** Gets or sets the vCenter Managed Object name for the inventory item. */
  moName?: string;
  /**
   * Gets or sets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Defines the HybridIdentityMetadata. */
export interface HybridIdentityMetadata extends ProxyResource {
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Vm Id. */
  vmId?: string;
  /** Gets or sets the Public Key. */
  publicKey?: string;
  /**
   * The identity of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly identity?: Identity;
  /**
   * Gets or sets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Defines the GuestAgent. */
export interface GuestAgent extends ProxyResource {
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Username / Password Credentials to provision guest agent. */
  credentials?: GuestCredential;
  /** HTTP Proxy configuration for the VM. */
  httpProxyConfig?: HttpProxyConfiguration;
  /** Gets or sets the guest agent provisioning action. */
  provisioningAction?: ProvisioningAction;
  /**
   * Gets or sets the guest agent status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets or sets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Known values of {@link PatchOperationStatus} that the service accepts. */
export enum KnownPatchOperationStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** InProgress */
  InProgress = "InProgress",
  /** Failed */
  Failed = "Failed",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** CompletedWithWarnings */
  CompletedWithWarnings = "CompletedWithWarnings"
}

/**
 * Defines values for PatchOperationStatus. \
 * {@link KnownPatchOperationStatus} can be used interchangeably with PatchOperationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **InProgress** \
 * **Failed** \
 * **Succeeded** \
 * **CompletedWithWarnings**
 */
export type PatchOperationStatus = string;

/** Known values of {@link PatchOperationStartedBy} that the service accepts. */
export enum KnownPatchOperationStartedBy {
  /** User */
  User = "User",
  /** Platform */
  Platform = "Platform"
}

/**
 * Defines values for PatchOperationStartedBy. \
 * {@link KnownPatchOperationStartedBy} can be used interchangeably with PatchOperationStartedBy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Platform**
 */
export type PatchOperationStartedBy = string;

/** Known values of {@link PatchServiceUsed} that the service accepts. */
export enum KnownPatchServiceUsed {
  /** Unknown */
  Unknown = "Unknown",
  /** WU */
  WU = "WU",
  /** WUWsus */
  WUWsus = "WU_WSUS",
  /** YUM */
  YUM = "YUM",
  /** APT */
  APT = "APT",
  /** Zypper */
  Zypper = "Zypper"
}

/**
 * Defines values for PatchServiceUsed. \
 * {@link KnownPatchServiceUsed} can be used interchangeably with PatchServiceUsed,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **WU** \
 * **WU_WSUS** \
 * **YUM** \
 * **APT** \
 * **Zypper**
 */
export type PatchServiceUsed = string;

/** Known values of {@link OsTypeUM} that the service accepts. */
export enum KnownOsTypeUM {
  /** Windows */
  Windows = "Windows",
  /** Linux */
  Linux = "Linux"
}

/**
 * Defines values for OsTypeUM. \
 * {@link KnownOsTypeUM} can be used interchangeably with OsTypeUM,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux**
 */
export type OsTypeUM = string;

/** Known values of {@link VMGuestPatchRebootSetting} that the service accepts. */
export enum KnownVMGuestPatchRebootSetting {
  /** IfRequired */
  IfRequired = "IfRequired",
  /** Never */
  Never = "Never",
  /** Always */
  Always = "Always"
}

/**
 * Defines values for VMGuestPatchRebootSetting. \
 * {@link KnownVMGuestPatchRebootSetting} can be used interchangeably with VMGuestPatchRebootSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IfRequired** \
 * **Never** \
 * **Always**
 */
export type VMGuestPatchRebootSetting = string;

/** Known values of {@link VMGuestPatchClassificationWindows} that the service accepts. */
export enum KnownVMGuestPatchClassificationWindows {
  /** Critical */
  Critical = "Critical",
  /** Security */
  Security = "Security",
  /** UpdateRollUp */
  UpdateRollUp = "UpdateRollUp",
  /** FeaturePack */
  FeaturePack = "FeaturePack",
  /** ServicePack */
  ServicePack = "ServicePack",
  /** Definition */
  Definition = "Definition",
  /** Tools */
  Tools = "Tools",
  /** Updates */
  Updates = "Updates"
}

/**
 * Defines values for VMGuestPatchClassificationWindows. \
 * {@link KnownVMGuestPatchClassificationWindows} can be used interchangeably with VMGuestPatchClassificationWindows,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Critical** \
 * **Security** \
 * **UpdateRollUp** \
 * **FeaturePack** \
 * **ServicePack** \
 * **Definition** \
 * **Tools** \
 * **Updates**
 */
export type VMGuestPatchClassificationWindows = string;

/** Known values of {@link VMGuestPatchClassificationLinux} that the service accepts. */
export enum KnownVMGuestPatchClassificationLinux {
  /** Critical */
  Critical = "Critical",
  /** Security */
  Security = "Security",
  /** Other */
  Other = "Other"
}

/**
 * Defines values for VMGuestPatchClassificationLinux. \
 * {@link KnownVMGuestPatchClassificationLinux} can be used interchangeably with VMGuestPatchClassificationLinux,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Critical** \
 * **Security** \
 * **Other**
 */
export type VMGuestPatchClassificationLinux = string;

/** Known values of {@link VMGuestPatchRebootStatus} that the service accepts. */
export enum KnownVMGuestPatchRebootStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** NotNeeded */
  NotNeeded = "NotNeeded",
  /** Required */
  Required = "Required",
  /** Started */
  Started = "Started",
  /** Failed */
  Failed = "Failed",
  /** Completed */
  Completed = "Completed"
}

/**
 * Defines values for VMGuestPatchRebootStatus. \
 * {@link KnownVMGuestPatchRebootStatus} can be used interchangeably with VMGuestPatchRebootStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **NotNeeded** \
 * **Required** \
 * **Started** \
 * **Failed** \
 * **Completed**
 */
export type VMGuestPatchRebootStatus = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting",
  /** Accepted */
  Accepted = "Accepted",
  /** Created */
  Created = "Created"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Updating** \
 * **Deleting** \
 * **Accepted** \
 * **Created**
 */
export type ProvisioningState = string;

/** Known values of {@link OsType} that the service accepts. */
export enum KnownOsType {
  /** Windows */
  Windows = "Windows",
  /** Linux */
  Linux = "Linux",
  /** Other */
  Other = "Other"
}

/**
 * Defines values for OsType. \
 * {@link KnownOsType} can be used interchangeably with OsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux** \
 * **Other**
 */
export type OsType = string;

/** Known values of {@link NICType} that the service accepts. */
export enum KnownNICType {
  /** Vmxnet3 */
  Vmxnet3 = "vmxnet3",
  /** Vmxnet2 */
  Vmxnet2 = "vmxnet2",
  /** Vmxnet */
  Vmxnet = "vmxnet",
  /** E1000 */
  E1000 = "e1000",
  /** E1000E */
  E1000E = "e1000e",
  /** Pcnet32 */
  Pcnet32 = "pcnet32"
}

/**
 * Defines values for NICType. \
 * {@link KnownNICType} can be used interchangeably with NICType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **vmxnet3** \
 * **vmxnet2** \
 * **vmxnet** \
 * **e1000** \
 * **e1000e** \
 * **pcnet32**
 */
export type NICType = string;

/** Known values of {@link PowerOnBootOption} that the service accepts. */
export enum KnownPowerOnBootOption {
  /** Enabled */
  Enabled = "enabled",
  /** Disabled */
  Disabled = "disabled"
}

/**
 * Defines values for PowerOnBootOption. \
 * {@link KnownPowerOnBootOption} can be used interchangeably with PowerOnBootOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export type PowerOnBootOption = string;

/** Known values of {@link IPAddressAllocationMethod} that the service accepts. */
export enum KnownIPAddressAllocationMethod {
  /** Unset */
  Unset = "unset",
  /** Dynamic */
  Dynamic = "dynamic",
  /** Static */
  Static = "static",
  /** Linklayer */
  Linklayer = "linklayer",
  /** Random */
  Random = "random",
  /** Other */
  Other = "other"
}

/**
 * Defines values for IPAddressAllocationMethod. \
 * {@link KnownIPAddressAllocationMethod} can be used interchangeably with IPAddressAllocationMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **unset** \
 * **dynamic** \
 * **static** \
 * **linklayer** \
 * **random** \
 * **other**
 */
export type IPAddressAllocationMethod = string;

/** Known values of {@link DiskMode} that the service accepts. */
export enum KnownDiskMode {
  /** Persistent */
  Persistent = "persistent",
  /** IndependentPersistent */
  IndependentPersistent = "independent_persistent",
  /** IndependentNonpersistent */
  IndependentNonpersistent = "independent_nonpersistent"
}

/**
 * Defines values for DiskMode. \
 * {@link KnownDiskMode} can be used interchangeably with DiskMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **persistent** \
 * **independent_persistent** \
 * **independent_nonpersistent**
 */
export type DiskMode = string;

/** Known values of {@link DiskType} that the service accepts. */
export enum KnownDiskType {
  /** Flat */
  Flat = "flat",
  /** Pmem */
  Pmem = "pmem",
  /** Rawphysical */
  Rawphysical = "rawphysical",
  /** Rawvirtual */
  Rawvirtual = "rawvirtual",
  /** Sparse */
  Sparse = "sparse",
  /** Sesparse */
  Sesparse = "sesparse",
  /** Unknown */
  Unknown = "unknown"
}

/**
 * Defines values for DiskType. \
 * {@link KnownDiskType} can be used interchangeably with DiskType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **flat** \
 * **pmem** \
 * **rawphysical** \
 * **rawvirtual** \
 * **sparse** \
 * **sesparse** \
 * **unknown**
 */
export type DiskType = string;

/** Known values of {@link ScsiControllerType} that the service accepts. */
export enum KnownScsiControllerType {
  /** Lsilogic */
  Lsilogic = "lsilogic",
  /** Buslogic */
  Buslogic = "buslogic",
  /** Pvscsi */
  Pvscsi = "pvscsi",
  /** Lsilogicsas */
  Lsilogicsas = "lsilogicsas"
}

/**
 * Defines values for ScsiControllerType. \
 * {@link KnownScsiControllerType} can be used interchangeably with ScsiControllerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **lsilogic** \
 * **buslogic** \
 * **pvscsi** \
 * **lsilogicsas**
 */
export type ScsiControllerType = string;

/** Known values of {@link VirtualScsiSharing} that the service accepts. */
export enum KnownVirtualScsiSharing {
  /** NoSharing */
  NoSharing = "noSharing",
  /** PhysicalSharing */
  PhysicalSharing = "physicalSharing",
  /** VirtualSharing */
  VirtualSharing = "virtualSharing"
}

/**
 * Defines values for VirtualScsiSharing. \
 * {@link KnownVirtualScsiSharing} can be used interchangeably with VirtualScsiSharing,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **noSharing** \
 * **physicalSharing** \
 * **virtualSharing**
 */
export type VirtualScsiSharing = string;

/** Known values of {@link StatusTypes} that the service accepts. */
export enum KnownStatusTypes {
  /** Connected */
  Connected = "Connected",
  /** Disconnected */
  Disconnected = "Disconnected",
  /** Error */
  Error = "Error"
}

/**
 * Defines values for StatusTypes. \
 * {@link KnownStatusTypes} can be used interchangeably with StatusTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Connected** \
 * **Disconnected** \
 * **Error**
 */
export type StatusTypes = string;

/** Known values of {@link FirmwareType} that the service accepts. */
export enum KnownFirmwareType {
  /** Bios */
  Bios = "bios",
  /** Efi */
  Efi = "efi"
}

/**
 * Defines values for FirmwareType. \
 * {@link KnownFirmwareType} can be used interchangeably with FirmwareType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **bios** \
 * **efi**
 */
export type FirmwareType = string;

/** Known values of {@link IdentityType} that the service accepts. */
export enum KnownIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned"
}

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned**
 */
export type IdentityType = string;

/** Known values of {@link InventoryType} that the service accepts. */
export enum KnownInventoryType {
  /** ResourcePool */
  ResourcePool = "ResourcePool",
  /** VirtualMachine */
  VirtualMachine = "VirtualMachine",
  /** VirtualMachineTemplate */
  VirtualMachineTemplate = "VirtualMachineTemplate",
  /** VirtualNetwork */
  VirtualNetwork = "VirtualNetwork",
  /** Cluster */
  Cluster = "Cluster",
  /** Datastore */
  Datastore = "Datastore",
  /** Host */
  Host = "Host"
}

/**
 * Defines values for InventoryType. \
 * {@link KnownInventoryType} can be used interchangeably with InventoryType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ResourcePool** \
 * **VirtualMachine** \
 * **VirtualMachineTemplate** \
 * **VirtualNetwork** \
 * **Cluster** \
 * **Datastore** \
 * **Host**
 */
export type InventoryType = string;

/** Known values of {@link StatusLevelTypes} that the service accepts. */
export enum KnownStatusLevelTypes {
  /** Info */
  Info = "Info",
  /** Warning */
  Warning = "Warning",
  /** Error */
  Error = "Error"
}

/**
 * Defines values for StatusLevelTypes. \
 * {@link KnownStatusLevelTypes} can be used interchangeably with StatusLevelTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Info** \
 * **Warning** \
 * **Error**
 */
export type StatusLevelTypes = string;

/** Known values of {@link ProvisioningAction} that the service accepts. */
export enum KnownProvisioningAction {
  /** Install */
  Install = "install",
  /** Uninstall */
  Uninstall = "uninstall",
  /** Repair */
  Repair = "repair"
}

/**
 * Defines values for ProvisioningAction. \
 * {@link KnownProvisioningAction} can be used interchangeably with ProvisioningAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **install** \
 * **uninstall** \
 * **repair**
 */
export type ProvisioningAction = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationsList;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationsList;

/** Optional parameters. */
export interface VirtualMachinesAssessPatchesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the assessPatches operation. */
export type VirtualMachinesAssessPatchesResponse = VirtualMachineAssessPatchesResult;

/** Optional parameters. */
export interface VirtualMachinesInstallPatchesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the installPatches operation. */
export type VirtualMachinesInstallPatchesResponse = VirtualMachineInstallPatchesResult;

/** Optional parameters. */
export interface VirtualMachinesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: VirtualMachine;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type VirtualMachinesCreateResponse = VirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualMachinesGetResponse = VirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: VirtualMachineUpdate;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VirtualMachinesUpdateResponse = VirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Whether to just disable the VM from azure and retain the VM in the VMM. */
  retain?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesStopOptionalParams
  extends coreClient.OperationOptions {
  /** Virtualmachine stop action payload. */
  body?: StopVirtualMachineOptions;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesRestartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VirtualMachinesListResponse = VirtualMachinesList;

/** Optional parameters. */
export interface VirtualMachinesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VirtualMachinesListByResourceGroupResponse = VirtualMachinesList;

/** Optional parameters. */
export interface VirtualMachinesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VirtualMachinesListNextResponse = VirtualMachinesList;

/** Optional parameters. */
export interface VirtualMachinesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VirtualMachinesListByResourceGroupNextResponse = VirtualMachinesList;

/** Optional parameters. */
export interface ResourcePoolsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: ResourcePool;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type ResourcePoolsCreateResponse = ResourcePool;

/** Optional parameters. */
export interface ResourcePoolsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ResourcePoolsGetResponse = ResourcePool;

/** Optional parameters. */
export interface ResourcePoolsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: ResourcePatch;
}

/** Contains response data for the update operation. */
export type ResourcePoolsUpdateResponse = ResourcePool;

/** Optional parameters. */
export interface ResourcePoolsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ResourcePoolsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ResourcePoolsListResponse = ResourcePoolsList;

/** Optional parameters. */
export interface ResourcePoolsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ResourcePoolsListByResourceGroupResponse = ResourcePoolsList;

/** Optional parameters. */
export interface ResourcePoolsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ResourcePoolsListNextResponse = ResourcePoolsList;

/** Optional parameters. */
export interface ResourcePoolsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ResourcePoolsListByResourceGroupNextResponse = ResourcePoolsList;

/** Optional parameters. */
export interface ClustersCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: Cluster;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type ClustersCreateResponse = Cluster;

/** Optional parameters. */
export interface ClustersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ClustersGetResponse = Cluster;

/** Optional parameters. */
export interface ClustersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: ResourcePatch;
}

/** Contains response data for the update operation. */
export type ClustersUpdateResponse = Cluster;

/** Optional parameters. */
export interface ClustersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ClustersListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ClustersListResponse = ClustersList;

/** Optional parameters. */
export interface ClustersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ClustersListByResourceGroupResponse = ClustersList;

/** Optional parameters. */
export interface ClustersListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ClustersListNextResponse = ClustersList;

/** Optional parameters. */
export interface ClustersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ClustersListByResourceGroupNextResponse = ClustersList;

/** Optional parameters. */
export interface HostsCreateOptionalParams extends coreClient.OperationOptions {
  /** Request payload. */
  body?: Host;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type HostsCreateResponse = Host;

/** Optional parameters. */
export interface HostsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type HostsGetResponse = Host;

/** Optional parameters. */
export interface HostsUpdateOptionalParams extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: ResourcePatch;
}

/** Contains response data for the update operation. */
export type HostsUpdateResponse = Host;

/** Optional parameters. */
export interface HostsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface HostsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type HostsListResponse = HostsList;

/** Optional parameters. */
export interface HostsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type HostsListByResourceGroupResponse = HostsList;

/** Optional parameters. */
export interface HostsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type HostsListNextResponse = HostsList;

/** Optional parameters. */
export interface HostsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type HostsListByResourceGroupNextResponse = HostsList;

/** Optional parameters. */
export interface DatastoresCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: Datastore;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type DatastoresCreateResponse = Datastore;

/** Optional parameters. */
export interface DatastoresGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DatastoresGetResponse = Datastore;

/** Optional parameters. */
export interface DatastoresUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: ResourcePatch;
}

/** Contains response data for the update operation. */
export type DatastoresUpdateResponse = Datastore;

/** Optional parameters. */
export interface DatastoresDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DatastoresListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DatastoresListResponse = DatastoresList;

/** Optional parameters. */
export interface DatastoresListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type DatastoresListByResourceGroupResponse = DatastoresList;

/** Optional parameters. */
export interface DatastoresListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DatastoresListNextResponse = DatastoresList;

/** Optional parameters. */
export interface DatastoresListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type DatastoresListByResourceGroupNextResponse = DatastoresList;

/** Optional parameters. */
export interface VCentersCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: VCenter;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type VCentersCreateResponse = VCenter;

/** Optional parameters. */
export interface VCentersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VCentersGetResponse = VCenter;

/** Optional parameters. */
export interface VCentersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: ResourcePatch;
}

/** Contains response data for the update operation. */
export type VCentersUpdateResponse = VCenter;

/** Optional parameters. */
export interface VCentersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VCentersListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VCentersListResponse = VCentersList;

/** Optional parameters. */
export interface VCentersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VCentersListByResourceGroupResponse = VCentersList;

/** Optional parameters. */
export interface VCentersListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VCentersListNextResponse = VCentersList;

/** Optional parameters. */
export interface VCentersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VCentersListByResourceGroupNextResponse = VCentersList;

/** Optional parameters. */
export interface VirtualMachineTemplatesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: VirtualMachineTemplate;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type VirtualMachineTemplatesCreateResponse = VirtualMachineTemplate;

/** Optional parameters. */
export interface VirtualMachineTemplatesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualMachineTemplatesGetResponse = VirtualMachineTemplate;

/** Optional parameters. */
export interface VirtualMachineTemplatesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: ResourcePatch;
}

/** Contains response data for the update operation. */
export type VirtualMachineTemplatesUpdateResponse = VirtualMachineTemplate;

/** Optional parameters. */
export interface VirtualMachineTemplatesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachineTemplatesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VirtualMachineTemplatesListResponse = VirtualMachineTemplatesList;

/** Optional parameters. */
export interface VirtualMachineTemplatesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VirtualMachineTemplatesListByResourceGroupResponse = VirtualMachineTemplatesList;

/** Optional parameters. */
export interface VirtualMachineTemplatesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VirtualMachineTemplatesListNextResponse = VirtualMachineTemplatesList;

/** Optional parameters. */
export interface VirtualMachineTemplatesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VirtualMachineTemplatesListByResourceGroupNextResponse = VirtualMachineTemplatesList;

/** Optional parameters. */
export interface VirtualNetworksCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: VirtualNetwork;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type VirtualNetworksCreateResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualNetworksGetResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: ResourcePatch;
}

/** Contains response data for the update operation. */
export type VirtualNetworksUpdateResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualNetworksListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VirtualNetworksListResponse = VirtualNetworksList;

/** Optional parameters. */
export interface VirtualNetworksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VirtualNetworksListByResourceGroupResponse = VirtualNetworksList;

/** Optional parameters. */
export interface VirtualNetworksListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VirtualNetworksListNextResponse = VirtualNetworksList;

/** Optional parameters. */
export interface VirtualNetworksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VirtualNetworksListByResourceGroupNextResponse = VirtualNetworksList;

/** Optional parameters. */
export interface InventoryItemsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: InventoryItem;
}

/** Contains response data for the create operation. */
export type InventoryItemsCreateResponse = InventoryItem;

/** Optional parameters. */
export interface InventoryItemsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type InventoryItemsGetResponse = InventoryItem;

/** Optional parameters. */
export interface InventoryItemsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface InventoryItemsListByVCenterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVCenter operation. */
export type InventoryItemsListByVCenterResponse = InventoryItemsList;

/** Optional parameters. */
export interface InventoryItemsListByVCenterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVCenterNext operation. */
export type InventoryItemsListByVCenterNextResponse = InventoryItemsList;

/** Optional parameters. */
export interface HybridIdentityMetadataCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: HybridIdentityMetadata;
}

/** Contains response data for the create operation. */
export type HybridIdentityMetadataCreateResponse = HybridIdentityMetadata;

/** Optional parameters. */
export interface HybridIdentityMetadataGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type HybridIdentityMetadataGetResponse = HybridIdentityMetadata;

/** Optional parameters. */
export interface HybridIdentityMetadataDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface HybridIdentityMetadataListByVmOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVm operation. */
export type HybridIdentityMetadataListByVmResponse = HybridIdentityMetadataList;

/** Optional parameters. */
export interface HybridIdentityMetadataListByVmNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVmNext operation. */
export type HybridIdentityMetadataListByVmNextResponse = HybridIdentityMetadataList;

/** Optional parameters. */
export interface MachineExtensionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type MachineExtensionsCreateOrUpdateResponse = MachineExtension;

/** Optional parameters. */
export interface MachineExtensionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type MachineExtensionsUpdateResponse = MachineExtension;

/** Optional parameters. */
export interface MachineExtensionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface MachineExtensionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MachineExtensionsGetResponse = MachineExtension;

/** Optional parameters. */
export interface MachineExtensionsListOptionalParams
  extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. */
  expand?: string;
}

/** Contains response data for the list operation. */
export type MachineExtensionsListResponse = MachineExtensionsListResult;

/** Optional parameters. */
export interface MachineExtensionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type MachineExtensionsListNextResponse = MachineExtensionsListResult;

/** Optional parameters. */
export interface GuestAgentsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: GuestAgent;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type GuestAgentsCreateResponse = GuestAgent;

/** Optional parameters. */
export interface GuestAgentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GuestAgentsGetResponse = GuestAgent;

/** Optional parameters. */
export interface GuestAgentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface GuestAgentsListByVmOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVm operation. */
export type GuestAgentsListByVmResponse = GuestAgentList;

/** Optional parameters. */
export interface GuestAgentsListByVmNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVmNext operation. */
export type GuestAgentsListByVmNextResponse = GuestAgentList;

/** Optional parameters. */
export interface AzureArcVMwareManagementServiceAPIOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
