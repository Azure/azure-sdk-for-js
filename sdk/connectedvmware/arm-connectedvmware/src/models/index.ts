/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type InventoryItemPropertiesUnion =
  | InventoryItemProperties
  | ResourcePoolInventoryItem
  | VirtualMachineInventoryItem
  | VirtualMachineTemplateInventoryItem
  | VirtualNetworkInventoryItem
  | ClusterInventoryItem
  | DatastoreInventoryItem
  | HostInventoryItem;

/** Lists the operations available. */
export interface OperationsList {
  /** Url to follow for getting next page of operations. */
  nextLink?: string;
  /** Array of operations */
  value: Operation[];
}

/** Operation provided by provider */
export interface Operation {
  /** Name of the operation */
  name?: string;
  /** Indicates whether the operation is data action or not. */
  isDataAction?: boolean;
  /** Properties of the operation */
  display?: OperationDisplay;
}

/** Properties of the operation */
export interface OperationDisplay {
  /** Provider name */
  provider?: string;
  /** Resource name */
  resource?: string;
  /** Operation name */
  operation?: string;
  /** Description of the operation */
  description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Define the resourcePool. */
export interface ResourcePool {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Gets or sets the ARM Id of the vCenter resource in which this resource pool resides. */
  vCenterId?: string;
  /** Gets or sets the vCenter MoRef (Managed Object Reference) ID for the resource pool. */
  moRefId?: string;
  /** Gets or sets the inventory Item ID for the resource pool. */
  inventoryItemId?: string;
  /**
   * Gets or sets the vCenter Managed Object name for the resource pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moName?: string;
  /**
   * Gets or sets CPUSharesLevel which specifies the CPU allocation level for this pool.
   * This property is used in relative allocation between resource consumers.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuSharesLevel?: string;
  /**
   * Gets or sets CPUReservationMHz which specifies the CPU size in MHz that is guaranteed
   * to be available.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuReservationMHz?: number;
  /**
   * Gets or sets CPULimitMHz which specifies a CPU usage limit in MHz.
   * Utilization will not exceed this limit even if there are available resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuLimitMHz?: number;
  /**
   * Gets or sets CPUSharesLevel which specifies the memory allocation level for this pool.
   * This property is used in relative allocation between resource consumers.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memSharesLevel?: string;
  /**
   * Gets or sets MemReservationMB which specifies the guaranteed available memory in
   * megabytes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memReservationMB?: number;
  /**
   * Gets or sets MemLimitMB specifies a memory usage limit in megabytes.
   * Utilization will not exceed the specified limit even if there are available resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memLimitMB?: number;
  /**
   * Gets the used physical memory on the pool in GB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memOverallUsageGB?: number;
  /**
   * Gets the total amount of physical memory on the pool in GB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memCapacityGB?: number;
  /**
   * Gets the used CPU usage across all cores on the pool in MHz.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuOverallUsageMHz?: number;
  /**
   * Gets the max CPU usage across all cores on the pool in MHz.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuCapacityMHz?: number;
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * Gets the datastore ARM ids.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly datastoreIds?: string[];
  /**
   * Gets the network ARM ids.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkIds?: string[];
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The resource status information. */
export interface ResourceStatus {
  /**
   * The type of the condition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Status of the condition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * The reason for the condition's status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: string;
  /**
   * A human readable message indicating details about the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Severity with which to treat failures of this type of condition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly severity?: string;
  /**
   * The last update time for this condition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdatedAt?: Date;
}

/** The extended location. */
export interface ExtendedLocation {
  /** The extended location type. */
  type?: string;
  /** The extended location name. */
  name?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Object containing updates for patch operations. */
export interface ResourcePatch {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** List of ResourcePools. */
export interface ResourcePoolsList {
  /** Url to follow for getting next page of ResourcePools. */
  nextLink?: string;
  /** Array of ResourcePools */
  value: ResourcePool[];
}

/** Define the cluster. */
export interface Cluster {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Gets or sets the ARM Id of the vCenter resource in which this cluster resides. */
  vCenterId?: string;
  /** Gets or sets the vCenter MoRef (Managed Object Reference) ID for the cluster. */
  moRefId?: string;
  /** Gets or sets the inventory Item ID for the cluster. */
  inventoryItemId?: string;
  /**
   * Gets or sets the vCenter Managed Object name for the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moName?: string;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * Gets the used physical memory on the cluster in GB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly usedMemoryGB?: number;
  /**
   * Gets the total amount of physical memory on the cluster in GB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalMemoryGB?: number;
  /**
   * Gets the used CPU usage across all cores on the cluster in MHz.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly usedCpuMHz?: number;
  /**
   * Gets the max CPU usage across all cores on the cluster in MHz.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalCpuMHz?: number;
  /**
   * Gets the datastore ARM ids.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly datastoreIds?: string[];
  /**
   * Gets the network ARM ids.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkIds?: string[];
  /**
   * Gets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** List of Clusters. */
export interface ClustersList {
  /** Url to follow for getting next page of Clusters. */
  nextLink?: string;
  /** Array of Clusters */
  value: Cluster[];
}

/** Define the host. */
export interface Host {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Gets or sets the ARM Id of the vCenter resource in which this host resides. */
  vCenterId?: string;
  /** Gets or sets the vCenter MoRef (Managed Object Reference) ID for the host. */
  moRefId?: string;
  /** Gets or sets the inventory Item ID for the host. */
  inventoryItemId?: string;
  /**
   * Gets or sets the vCenter Managed Object name for the host.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moName?: string;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * Gets the used physical memory on the host in GB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly overallMemoryUsageGB?: number;
  /**
   * Gets the total amount of physical memory on the host in GB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memorySizeGB?: number;
  /**
   * Gets the used CPU usage across all cores in MHz.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly overallCpuUsageMHz?: number;
  /**
   * Gets the max CPU usage across all cores in MHz.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuMhz?: number;
  /**
   * Gets the datastore ARM ids.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly datastoreIds?: string[];
  /**
   * Gets the network ARM ids.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkIds?: string[];
  /**
   * Gets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** List of Hosts. */
export interface HostsList {
  /** Url to follow for getting next page of Hosts. */
  nextLink?: string;
  /** Array of Hosts */
  value: Host[];
}

/** Define the datastore. */
export interface Datastore {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Gets or sets the ARM Id of the vCenter resource in which this datastore resides. */
  vCenterId?: string;
  /** Gets or sets the vCenter MoRef (Managed Object Reference) ID for the datastore. */
  moRefId?: string;
  /** Gets or sets the inventory Item ID for the datastore. */
  inventoryItemId?: string;
  /**
   * Gets or sets the vCenter Managed Object name for the datastore.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moName?: string;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * Gets or sets Maximum capacity of this datastore in GBs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capacityGB?: number;
  /**
   * Gets or sets Available space of this datastore in GBs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly freeSpaceGB?: number;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** List of Datastores. */
export interface DatastoresList {
  /** Url to follow for getting next page of Datastores. */
  nextLink?: string;
  /** Array of Datastores */
  value: Datastore[];
}

/** Defines the vCenter. */
export interface VCenter {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Gets or sets the FQDN/IPAddress of the vCenter. */
  fqdn: string;
  /** Gets or sets the port of the vCenter. */
  port?: number;
  /**
   * Gets or sets the version of the vCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * Gets or sets the instance UUID of the vCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceUuid?: string;
  /**
   * Gets or sets the connection status to the vCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionStatus?: string;
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /** Username / Password Credentials to connect to vcenter. */
  credentials?: VICredential;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Username / Password Credentials to connect to vcenter. */
export interface VICredential {
  /** Gets or sets username to connect with the vCenter. */
  username?: string;
  /** Gets or sets the password to connect with the vCenter. */
  password?: string;
}

/** List of VCenters. */
export interface VCentersList {
  /** Url to follow for getting next page of VCenters. */
  nextLink?: string;
  /** Array of VCenters */
  value: VCenter[];
}

/** Define the virtualMachineTemplate. */
export interface VirtualMachineTemplate {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Gets or sets the ARM Id of the vCenter resource in which this template resides. */
  vCenterId?: string;
  /**
   * Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine
   * template.
   */
  moRefId?: string;
  /** Gets or sets the inventory Item ID for the virtual machine template. */
  inventoryItemId?: string;
  /**
   * Gets or sets the vCenter Managed Object name for the virtual machine template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moName?: string;
  /**
   * Gets or sets memory size in MBs for the template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memorySizeMB?: number;
  /**
   * Gets or sets the number of vCPUs for the template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numCPUs?: number;
  /**
   * Gets or sets the number of cores per socket for the template.
   * Defaults to 1 if unspecified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numCoresPerSocket?: number;
  /**
   * Gets or sets the type of the os.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OsType;
  /**
   * Gets or sets os name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osName?: string;
  /**
   * Gets or sets the folder path of the template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly folderPath?: string;
  /**
   * Gets or sets the network interfaces of the template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkInterfaces?: NetworkInterface[];
  /**
   * Gets or sets the disks the template.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disks?: VirtualDisk[];
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * Gets or sets the current version status of VMware Tools installed in the guest operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsVersionStatus?: string;
  /**
   * Gets or sets the current version of VMware Tools.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsVersion?: string;
  /**
   * Firmware type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly firmwareType?: FirmwareType;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Network Interface model */
export interface NetworkInterface {
  /** Gets or sets the name of the network interface. */
  name?: string;
  /**
   * Gets or sets the label of the virtual network in vCenter that the nic is connected to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly label?: string;
  /**
   * Gets or sets the nic ip addresses.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddresses?: string[];
  /**
   * Gets or sets the NIC MAC address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly macAddress?: string;
  /** Gets or sets the ARM Id of the network resource to connect the virtual machine. */
  networkId?: string;
  /** NIC type */
  nicType?: NICType;
  /** Gets or sets the power on boot. */
  powerOnBoot?: PowerOnBootOption;
  /**
   * Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network
   * that the nic is connected to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkMoRefId?: string;
  /**
   * Gets or sets the name of the virtual network in vCenter that the nic is connected to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkMoName?: string;
  /** Gets or sets the device key value. */
  deviceKey?: number;
  /** Gets or sets the ipsettings. */
  ipSettings?: NicIPSettings;
}

/** Defines the network interface ip settings. */
export interface NicIPSettings {
  /** Gets or sets the nic allocation method. */
  allocationMethod?: IPAddressAllocationMethod;
  /** Gets or sets the dns servers. */
  dnsServers?: string[];
  /** Gets or sets the gateway. */
  gateway?: string[];
  /** Gets or sets the ip address for the nic. */
  ipAddress?: string;
  /** Gets or sets the mask. */
  subnetMask?: string;
  /**
   * Gets or sets the primary server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryWinsServer?: string;
  /**
   * Gets or sets the secondary server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly secondaryWinsServer?: string;
  /**
   * Gets or sets the IP address information being reported for this NIC. This contains the same IPv4 information above plus IPV6 information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddressInfo?: NicIPAddressSettings[];
}

/** IP address information for a virtual network adapter reported by the fabric. */
export interface NicIPAddressSettings {
  /**
   * Gets the ip address allocation method.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly allocationMethod?: string;
  /**
   * Gets the ip address for the nic.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddress?: string;
  /**
   * Gets the mask.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subnetMask?: string;
}

/** Virtual disk model */
export interface VirtualDisk {
  /** Gets or sets the name of the virtual disk. */
  name?: string;
  /**
   * Gets or sets the label of the virtual disk in vCenter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly label?: string;
  /**
   * Gets or sets the disk object id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diskObjectId?: string;
  /** Gets or sets the disk total size. */
  diskSizeGB?: number;
  /** Gets or sets the device key value. */
  deviceKey?: number;
  /** Gets or sets the disk mode. */
  diskMode?: DiskMode;
  /** Gets or sets the controller id. */
  controllerKey?: number;
  /** Gets or sets the unit number of the disk on the controller. */
  unitNumber?: number;
  /** Gets or sets the device name. */
  deviceName?: string;
  /** Gets or sets the disk backing type. */
  diskType?: DiskType;
}

/** List of VirtualMachineTemplates. */
export interface VirtualMachineTemplatesList {
  /** Url to follow for getting next page of VirtualMachineTemplates. */
  nextLink?: string;
  /** Array of VirtualMachineTemplates */
  value: VirtualMachineTemplate[];
}

/** Define the virtualNetwork. */
export interface VirtualNetwork {
  /** Gets or sets the location. */
  location: string;
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /**
   * The system data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Gets or sets the Resource tags. */
  tags?: { [propertyName: string]: string };
  /**
   * Gets or sets the name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Gets or sets the Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Gets or sets the type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Gets or sets the ARM Id of the vCenter resource in which this template resides. */
  vCenterId?: string;
  /** Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual network. */
  moRefId?: string;
  /** Gets or sets the inventory Item ID for the virtual network. */
  inventoryItemId?: string;
  /**
   * Gets or sets the vCenter Managed Object name for the virtual network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moName?: string;
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** List of VirtualNetworks. */
export interface VirtualNetworksList {
  /** Url to follow for getting next page of VirtualNetworks. */
  nextLink?: string;
  /** Array of VirtualNetworks */
  value: VirtualNetwork[];
}

/** Describes the properties of an Inventory Item. */
export interface InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType:
    | "ResourcePool"
    | "VirtualMachine"
    | "VirtualMachineTemplate"
    | "VirtualNetwork"
    | "Cluster"
    | "Datastore"
    | "Host";
  /** Gets or sets the tracked resource id corresponding to the inventory resource. */
  managedResourceId?: string;
  /** Gets or sets the MoRef (Managed Object Reference) ID for the inventory item. */
  moRefId?: string;
  /** Gets or sets the vCenter Managed Object name for the inventory item. */
  moName?: string;
  /**
   * Gets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** List of InventoryItems. */
export interface InventoryItemsList {
  /** Url to follow for getting next page of InventoryItems. */
  nextLink?: string;
  /** Array of InventoryItems */
  value: InventoryItem[];
}

/** Specifies the compute and storage placement settings for the virtual machine. */
export interface PlacementProfile {
  /** Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy. */
  resourcePoolId?: string;
  /** Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy. */
  clusterId?: string;
  /** Gets or sets the ARM Id of the host resource on which this virtual machine will deploy. */
  hostId?: string;
  /** Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept. */
  datastoreId?: string;
}

/** Specifies the operating system settings for the virtual machine. */
export interface OsProfileForVMInstance {
  /** Gets or sets computer name. */
  computerName?: string;
  /** Gets or sets administrator username. */
  adminUsername?: string;
  /** Sets administrator password. */
  adminPassword?: string;
  /** Gets or sets the guestId. */
  guestId?: string;
  /** Gets or sets the type of the os. */
  osType?: OsType;
  /**
   * Gets or sets os sku.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osSku?: string;
  /**
   * Gets or sets the current running status of VMware Tools running in the guest operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsRunningStatus?: string;
  /**
   * Gets or sets the current version status of VMware Tools installed in the guest operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsVersionStatus?: string;
  /**
   * Gets or sets the current version of VMware Tools.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsVersion?: string;
}

/** Specifies the hardware settings for the virtual machine. */
export interface HardwareProfile {
  /** Gets or sets memory size in MBs for the vm. */
  memorySizeMB?: number;
  /** Gets or sets the number of vCPUs for the vm. */
  numCPUs?: number;
  /** Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified. */
  numCoresPerSocket?: number;
  /**
   * Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuHotAddEnabled?: boolean;
  /**
   * Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuHotRemoveEnabled?: boolean;
  /**
   * Gets or sets a value indicating whether memory can be added while this virtual machine is running.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memoryHotAddEnabled?: boolean;
}

/** Specifies the network interfaces of the virtual machine. */
export interface NetworkProfile {
  /** Gets or sets the list of network interfaces associated with the virtual machine. */
  networkInterfaces?: NetworkInterface[];
}

/** Specifies the storage settings for the virtual machine disks. */
export interface StorageProfile {
  /** Gets or sets the list of virtual disks associated with the virtual machine. */
  disks?: VirtualDisk[];
  /**
   * Gets or sets the list of virtual SCSI controllers associated with the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scsiControllers?: VirtualScsiController[];
}

/** This data object type contains the properties of a SCSI controller device attached to a virtual machine that is reported by the controller. */
export interface VirtualScsiController {
  /** Gets or sets the controller type. */
  type?: ScsiControllerType;
  /** Gets or sets the key of the controller. */
  controllerKey?: number;
  /** Gets or sets the bus number of the controller. */
  busNumber?: number;
  /** Gets or sets the SCSI controller unit number. */
  scsiCtlrUnitNumber?: number;
  /** Gets or sets the sharing mode. */
  sharing?: VirtualScsiSharing;
}

/** Specifies the Security profile settings for the virtual machine. */
export interface SecurityProfile {
  /** Specifies the security settings like secure boot used while creating the virtual machine. */
  uefiSettings?: UefiSettings;
}

/** Specifies the security settings like secure boot used while creating the virtual machine. */
export interface UefiSettings {
  /** Specifies whether secure boot should be enabled on the virtual machine. */
  secureBootEnabled?: boolean;
}

/** Specifies the vCenter infrastructure specific settings for the virtual machine. */
export interface InfrastructureProfile {
  /** Gets or sets the ARM Id of the template resource to deploy the virtual machine. */
  templateId?: string;
  /** Gets or sets the ARM Id of the vCenter resource in which this resource pool resides. */
  vCenterId?: string;
  /**
   * Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moRefId?: string;
  /** Gets or sets the inventory Item ID for the virtual machine. */
  inventoryItemId?: string;
  /**
   * Gets or sets the vCenter Managed Object name for the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly moName?: string;
  /**
   * Gets or sets the folder path of the vm.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly folderPath?: string;
  /**
   * Gets or sets the instance uuid of the vm.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceUuid?: string;
  /** Gets or sets the SMBIOS UUID of the vm. */
  smbiosUuid?: string;
  /** Firmware type */
  firmwareType?: FirmwareType;
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
}

/** Defines the virtualMachineInstanceUpdate. */
export interface VirtualMachineInstanceUpdate {
  /** Specifies the hardware settings for the virtual machine. */
  hardwareProfile?: HardwareProfile;
  /** Specifies the storage settings for the virtual machine disks. */
  storageProfile?: StorageProfileUpdate;
  /** Specifies the network interfaces of the virtual machine. */
  networkProfile?: NetworkProfileUpdate;
}

/** Specifies the storage settings for the virtual machine disks. */
export interface StorageProfileUpdate {
  /** Gets or sets the list of virtual disks associated with the virtual machine. */
  disks?: VirtualDiskUpdate[];
}

/** Defines the virtual disk update. */
export interface VirtualDiskUpdate {
  /** Gets or sets the name of the virtual disk. */
  name?: string;
  /** Gets or sets the disk total size. */
  diskSizeGB?: number;
  /** Gets or sets the device key value. */
  deviceKey?: number;
  /** Gets or sets the disk mode. */
  diskMode?: DiskMode;
  /** Gets or sets the controller id. */
  controllerKey?: number;
  /** Gets or sets the unit number of the disk on the controller. */
  unitNumber?: number;
  /** Gets or sets the device name. */
  deviceName?: string;
  /** Gets or sets the disk backing type. */
  diskType?: DiskType;
}

/** Specifies the network interfaces of the virtual machine. */
export interface NetworkProfileUpdate {
  /** Gets or sets the list of network interfaces associated with the virtual machine. */
  networkInterfaces?: NetworkInterfaceUpdate[];
}

/** Defines the network interface update. */
export interface NetworkInterfaceUpdate {
  /** Gets or sets the name of the network interface. */
  name?: string;
  /** Gets or sets the ARM Id of the network resource to connect the virtual machine. */
  networkId?: string;
  /** NIC type */
  nicType?: NICType;
  /** Gets or sets the power on boot. */
  powerOnBoot?: PowerOnBootOption;
  /** Gets or sets the device key value. */
  deviceKey?: number;
}

/** List of VirtualMachineInstances. */
export interface VirtualMachineInstancesList {
  /** Url to follow for getting next page of VirtualMachines. */
  nextLink?: string;
  /** Array of VirtualMachines */
  value: VirtualMachineInstance[];
}

/** Defines the stop action properties. */
export interface StopVirtualMachineOptions {
  /** Gets or sets a value indicating whether to request non-graceful VM shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates otherwise. Defaults to false. */
  skipShutdown?: boolean;
}

/** List of HybridIdentityMetadata. */
export interface VmInstanceHybridIdentityMetadataList {
  /** Url to follow for getting next page of HybridIdentityMetadata. */
  nextLink?: string;
  /** Array of HybridIdentityMetadata */
  value: VmInstanceHybridIdentityMetadata[];
}

/** Username / Password Credentials to connect to guest. */
export interface GuestCredential {
  /** Gets or sets username to connect with the guest. */
  username?: string;
  /** Gets or sets the password to connect with the guest. */
  password?: string;
}

/** HTTP Proxy configuration for the VM. */
export interface HttpProxyConfiguration {
  /** Gets or sets httpsProxy url. */
  httpsProxy?: string;
}

/** List of GuestAgent. */
export interface GuestAgentList {
  /** Url to follow for getting next page of GuestAgent. */
  nextLink?: string;
  /** Array of GuestAgent */
  value: GuestAgent[];
}

/** Condition defines an extension to status. */
export interface Condition {
  /**
   * Status of the condition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * The reason for the condition's status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: string;
  /**
   * A human readable message indicating details about the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Severity with which to treat failures of this type of condition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly severity?: string;
}

/** Describes the properties of an Inventory Item reference. */
export interface InventoryItemDetails {
  /** Gets or sets the inventory Item ID for the resource. */
  inventoryItemId?: string;
  /** Gets or sets the vCenter Managed Object name for the resource. */
  moName?: string;
  /** The inventory type. */
  inventoryType?: InventoryType;
}

/** The resource pool inventory item. */
export interface ResourcePoolInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "ResourcePool";
  /** Parent resourcePool inventory resource details. */
  parent?: InventoryItemDetails;
}

/** The VM inventory item. */
export interface VirtualMachineInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "VirtualMachine";
  /** Gets or sets the type of the os. */
  osType?: OsType;
  /** Gets or sets os name. */
  osName?: string;
  /** Gets or sets the nic ip addresses. */
  ipAddresses?: string[];
  /** Gets or sets the folder path of the vm. */
  folderPath?: string;
  /** Host inventory resource details. */
  host?: InventoryItemDetails;
  /** ResourcePool inventory resource details. */
  resourcePool?: InventoryItemDetails;
  /** Cluster inventory resource details. */
  cluster?: InventoryItemDetails;
  /** Gets or sets the instance uuid of the vm. */
  instanceUuid?: string;
  /** Gets or sets the SMBIOS UUID of the vm. */
  smbiosUuid?: string;
  /**
   * Gets the power state of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly powerState?: string;
  /**
   * Gets or sets the current running status of VMware Tools running in the guest operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsRunningStatus?: string;
  /**
   * Gets or sets the current version status of VMware Tools installed in the guest operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsVersionStatus?: string;
  /**
   * Gets or sets the current version of VMware Tools.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsVersion?: string;
}

/** The VM Template inventory item. */
export interface VirtualMachineTemplateInventoryItem
  extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "VirtualMachineTemplate";
  /** Gets or sets memory size in MBs for the template. */
  memorySizeMB?: number;
  /** Gets or sets the number of vCPUs for the template. */
  numCPUs?: number;
  /**
   * Gets or sets the number of cores per socket for the template.
   * Defaults to 1 if unspecified.
   */
  numCoresPerSocket?: number;
  /** Gets or sets the type of the os. */
  osType?: OsType;
  /** Gets or sets os name. */
  osName?: string;
  /**
   * Gets or sets the current version status of VMware Tools installed in the guest operating system.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsVersionStatus?: string;
  /**
   * Gets or sets the current version of VMware Tools.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly toolsVersion?: string;
  /** Gets or sets the folder path of the template. */
  folderPath?: string;
}

/** The Virtual network inventory item. */
export interface VirtualNetworkInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "VirtualNetwork";
}

/** The cluster inventory item. */
export interface ClusterInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "Cluster";
}

/** The datastore inventory item. */
export interface DatastoreInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "Datastore";
  /** Gets or sets Maximum capacity of this datastore, in GBs. */
  capacityGB?: number;
  /** Gets or sets Available space of this datastore, in GBs. */
  freeSpaceGB?: number;
}

/** The host inventory item. */
export interface HostInventoryItem extends InventoryItemProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  inventoryType: "Host";
  /** Parent host inventory resource details. */
  parent?: InventoryItemDetails;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** Defines the inventory item. */
export interface InventoryItem extends ProxyResource {
  /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
  kind?: string;
  /** They inventory type. */
  inventoryType: InventoryType;
  /** Gets or sets the tracked resource id corresponding to the inventory resource. */
  managedResourceId?: string;
  /** Gets or sets the MoRef (Managed Object Reference) ID for the inventory item. */
  moRefId?: string;
  /** Gets or sets the vCenter Managed Object name for the inventory item. */
  moName?: string;
  /**
   * Gets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Define the virtualMachineInstance. */
export interface VirtualMachineInstance extends ProxyResource {
  /** Gets or sets the extended location. */
  extendedLocation?: ExtendedLocation;
  /** Placement properties. */
  placementProfile?: PlacementProfile;
  /** OS properties. */
  osProfile?: OsProfileForVMInstance;
  /** Hardware properties. */
  hardwareProfile?: HardwareProfile;
  /** Network properties. */
  networkProfile?: NetworkProfile;
  /** Storage properties. */
  storageProfile?: StorageProfile;
  /** Gets the security profile. */
  securityProfile?: SecurityProfile;
  /** Gets the infrastructure profile. */
  infrastructureProfile?: InfrastructureProfile;
  /**
   * Gets the power state of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly powerState?: string;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Gets or sets a unique identifier for the vm resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceUid?: string;
}

/** Defines the HybridIdentityMetadata. */
export interface VmInstanceHybridIdentityMetadata extends ProxyResource {
  /** The unique identifier for the resource. */
  resourceUid?: string;
  /** Gets or sets the Public Key. */
  publicKey?: string;
  /**
   * Gets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Defines the GuestAgent. */
export interface GuestAgent extends ProxyResource {
  /**
   * Gets or sets a unique identifier for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uuid?: string;
  /** Username / Password Credentials to provision guest agent. */
  credentials?: GuestCredential;
  /** The resource id of the private link scope this machine is assigned to, if any. */
  privateLinkScopeResourceId?: string;
  /** HTTP Proxy configuration for the VM. */
  httpProxyConfig?: HttpProxyConfiguration;
  /** Gets or sets the guest agent provisioning action. */
  provisioningAction?: ProvisioningAction;
  /**
   * Gets or sets the guest agent status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * Gets the name of the corresponding resource in Kubernetes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly customResourceName?: string;
  /**
   * The resource status information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statuses?: ResourceStatus[];
  /**
   * Gets the provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Defines headers for ResourcePools_delete operation. */
export interface ResourcePoolsDeleteHeaders {
  location?: string;
}

/** Defines headers for Clusters_delete operation. */
export interface ClustersDeleteHeaders {
  location?: string;
}

/** Defines headers for Hosts_delete operation. */
export interface HostsDeleteHeaders {
  location?: string;
}

/** Defines headers for Datastores_delete operation. */
export interface DatastoresDeleteHeaders {
  location?: string;
}

/** Defines headers for VCenters_delete operation. */
export interface VCentersDeleteHeaders {
  location?: string;
}

/** Defines headers for VirtualMachineTemplates_delete operation. */
export interface VirtualMachineTemplatesDeleteHeaders {
  location?: string;
}

/** Defines headers for VirtualNetworks_delete operation. */
export interface VirtualNetworksDeleteHeaders {
  location?: string;
}

/** Defines headers for VirtualMachineInstances_update operation. */
export interface VirtualMachineInstancesUpdateHeaders {
  location?: string;
}

/** Defines headers for VirtualMachineInstances_delete operation. */
export interface VirtualMachineInstancesDeleteHeaders {
  location?: string;
}

/** Defines headers for VirtualMachineInstances_stop operation. */
export interface VirtualMachineInstancesStopHeaders {
  location?: string;
}

/** Defines headers for VirtualMachineInstances_start operation. */
export interface VirtualMachineInstancesStartHeaders {
  location?: string;
}

/** Defines headers for VirtualMachineInstances_restart operation. */
export interface VirtualMachineInstancesRestartHeaders {
  location?: string;
}

/** Defines headers for VMInstanceGuestAgents_delete operation. */
export interface VMInstanceGuestAgentsDeleteHeaders {
  location?: string;
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting",
  /** Accepted */
  Accepted = "Accepted",
  /** Created */
  Created = "Created"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Provisioning** \
 * **Updating** \
 * **Deleting** \
 * **Accepted** \
 * **Created**
 */
export type ProvisioningState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link OsType} that the service accepts. */
export enum KnownOsType {
  /** Windows */
  Windows = "Windows",
  /** Linux */
  Linux = "Linux",
  /** Other */
  Other = "Other"
}

/**
 * Defines values for OsType. \
 * {@link KnownOsType} can be used interchangeably with OsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux** \
 * **Other**
 */
export type OsType = string;

/** Known values of {@link NICType} that the service accepts. */
export enum KnownNICType {
  /** Vmxnet3 */
  Vmxnet3 = "vmxnet3",
  /** Vmxnet2 */
  Vmxnet2 = "vmxnet2",
  /** Vmxnet */
  Vmxnet = "vmxnet",
  /** E1000 */
  E1000 = "e1000",
  /** E1000E */
  E1000E = "e1000e",
  /** Pcnet32 */
  Pcnet32 = "pcnet32"
}

/**
 * Defines values for NICType. \
 * {@link KnownNICType} can be used interchangeably with NICType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **vmxnet3** \
 * **vmxnet2** \
 * **vmxnet** \
 * **e1000** \
 * **e1000e** \
 * **pcnet32**
 */
export type NICType = string;

/** Known values of {@link PowerOnBootOption} that the service accepts. */
export enum KnownPowerOnBootOption {
  /** Enabled */
  Enabled = "enabled",
  /** Disabled */
  Disabled = "disabled"
}

/**
 * Defines values for PowerOnBootOption. \
 * {@link KnownPowerOnBootOption} can be used interchangeably with PowerOnBootOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export type PowerOnBootOption = string;

/** Known values of {@link IPAddressAllocationMethod} that the service accepts. */
export enum KnownIPAddressAllocationMethod {
  /** Unset */
  Unset = "unset",
  /** Dynamic */
  Dynamic = "dynamic",
  /** Static */
  Static = "static",
  /** Linklayer */
  Linklayer = "linklayer",
  /** Random */
  Random = "random",
  /** Other */
  Other = "other"
}

/**
 * Defines values for IPAddressAllocationMethod. \
 * {@link KnownIPAddressAllocationMethod} can be used interchangeably with IPAddressAllocationMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **unset** \
 * **dynamic** \
 * **static** \
 * **linklayer** \
 * **random** \
 * **other**
 */
export type IPAddressAllocationMethod = string;

/** Known values of {@link DiskMode} that the service accepts. */
export enum KnownDiskMode {
  /** Persistent */
  Persistent = "persistent",
  /** IndependentPersistent */
  IndependentPersistent = "independent_persistent",
  /** IndependentNonpersistent */
  IndependentNonpersistent = "independent_nonpersistent"
}

/**
 * Defines values for DiskMode. \
 * {@link KnownDiskMode} can be used interchangeably with DiskMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **persistent** \
 * **independent_persistent** \
 * **independent_nonpersistent**
 */
export type DiskMode = string;

/** Known values of {@link DiskType} that the service accepts. */
export enum KnownDiskType {
  /** Flat */
  Flat = "flat",
  /** Pmem */
  Pmem = "pmem",
  /** Rawphysical */
  Rawphysical = "rawphysical",
  /** Rawvirtual */
  Rawvirtual = "rawvirtual",
  /** Sparse */
  Sparse = "sparse",
  /** Sesparse */
  Sesparse = "sesparse",
  /** Unknown */
  Unknown = "unknown"
}

/**
 * Defines values for DiskType. \
 * {@link KnownDiskType} can be used interchangeably with DiskType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **flat** \
 * **pmem** \
 * **rawphysical** \
 * **rawvirtual** \
 * **sparse** \
 * **sesparse** \
 * **unknown**
 */
export type DiskType = string;

/** Known values of {@link FirmwareType} that the service accepts. */
export enum KnownFirmwareType {
  /** Bios */
  Bios = "bios",
  /** Efi */
  Efi = "efi"
}

/**
 * Defines values for FirmwareType. \
 * {@link KnownFirmwareType} can be used interchangeably with FirmwareType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **bios** \
 * **efi**
 */
export type FirmwareType = string;

/** Known values of {@link InventoryType} that the service accepts. */
export enum KnownInventoryType {
  /** ResourcePool */
  ResourcePool = "ResourcePool",
  /** VirtualMachine */
  VirtualMachine = "VirtualMachine",
  /** VirtualMachineTemplate */
  VirtualMachineTemplate = "VirtualMachineTemplate",
  /** VirtualNetwork */
  VirtualNetwork = "VirtualNetwork",
  /** Cluster */
  Cluster = "Cluster",
  /** Datastore */
  Datastore = "Datastore",
  /** Host */
  Host = "Host"
}

/**
 * Defines values for InventoryType. \
 * {@link KnownInventoryType} can be used interchangeably with InventoryType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ResourcePool** \
 * **VirtualMachine** \
 * **VirtualMachineTemplate** \
 * **VirtualNetwork** \
 * **Cluster** \
 * **Datastore** \
 * **Host**
 */
export type InventoryType = string;

/** Known values of {@link ScsiControllerType} that the service accepts. */
export enum KnownScsiControllerType {
  /** Lsilogic */
  Lsilogic = "lsilogic",
  /** Buslogic */
  Buslogic = "buslogic",
  /** Pvscsi */
  Pvscsi = "pvscsi",
  /** Lsilogicsas */
  Lsilogicsas = "lsilogicsas"
}

/**
 * Defines values for ScsiControllerType. \
 * {@link KnownScsiControllerType} can be used interchangeably with ScsiControllerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **lsilogic** \
 * **buslogic** \
 * **pvscsi** \
 * **lsilogicsas**
 */
export type ScsiControllerType = string;

/** Known values of {@link VirtualScsiSharing} that the service accepts. */
export enum KnownVirtualScsiSharing {
  /** NoSharing */
  NoSharing = "noSharing",
  /** PhysicalSharing */
  PhysicalSharing = "physicalSharing",
  /** VirtualSharing */
  VirtualSharing = "virtualSharing"
}

/**
 * Defines values for VirtualScsiSharing. \
 * {@link KnownVirtualScsiSharing} can be used interchangeably with VirtualScsiSharing,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **noSharing** \
 * **physicalSharing** \
 * **virtualSharing**
 */
export type VirtualScsiSharing = string;

/** Known values of {@link ProvisioningAction} that the service accepts. */
export enum KnownProvisioningAction {
  /** Install */
  Install = "install",
  /** Uninstall */
  Uninstall = "uninstall",
  /** Repair */
  Repair = "repair"
}

/**
 * Defines values for ProvisioningAction. \
 * {@link KnownProvisioningAction} can be used interchangeably with ProvisioningAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **install** \
 * **uninstall** \
 * **repair**
 */
export type ProvisioningAction = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationsList;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationsList;

/** Optional parameters. */
export interface ResourcePoolsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: ResourcePool;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type ResourcePoolsCreateResponse = ResourcePool;

/** Optional parameters. */
export interface ResourcePoolsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ResourcePoolsGetResponse = ResourcePool;

/** Optional parameters. */
export interface ResourcePoolsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: ResourcePatch;
}

/** Contains response data for the update operation. */
export type ResourcePoolsUpdateResponse = ResourcePool;

/** Optional parameters. */
export interface ResourcePoolsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ResourcePoolsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ResourcePoolsListResponse = ResourcePoolsList;

/** Optional parameters. */
export interface ResourcePoolsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ResourcePoolsListByResourceGroupResponse = ResourcePoolsList;

/** Optional parameters. */
export interface ResourcePoolsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ResourcePoolsListNextResponse = ResourcePoolsList;

/** Optional parameters. */
export interface ResourcePoolsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ResourcePoolsListByResourceGroupNextResponse = ResourcePoolsList;

/** Optional parameters. */
export interface ClustersCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: Cluster;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type ClustersCreateResponse = Cluster;

/** Optional parameters. */
export interface ClustersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ClustersGetResponse = Cluster;

/** Optional parameters. */
export interface ClustersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: ResourcePatch;
}

/** Contains response data for the update operation. */
export type ClustersUpdateResponse = Cluster;

/** Optional parameters. */
export interface ClustersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ClustersListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ClustersListResponse = ClustersList;

/** Optional parameters. */
export interface ClustersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ClustersListByResourceGroupResponse = ClustersList;

/** Optional parameters. */
export interface ClustersListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ClustersListNextResponse = ClustersList;

/** Optional parameters. */
export interface ClustersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ClustersListByResourceGroupNextResponse = ClustersList;

/** Optional parameters. */
export interface HostsCreateOptionalParams extends coreClient.OperationOptions {
  /** Request payload. */
  body?: Host;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type HostsCreateResponse = Host;

/** Optional parameters. */
export interface HostsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type HostsGetResponse = Host;

/** Optional parameters. */
export interface HostsUpdateOptionalParams extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: ResourcePatch;
}

/** Contains response data for the update operation. */
export type HostsUpdateResponse = Host;

/** Optional parameters. */
export interface HostsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface HostsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type HostsListResponse = HostsList;

/** Optional parameters. */
export interface HostsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type HostsListByResourceGroupResponse = HostsList;

/** Optional parameters. */
export interface HostsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type HostsListNextResponse = HostsList;

/** Optional parameters. */
export interface HostsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type HostsListByResourceGroupNextResponse = HostsList;

/** Optional parameters. */
export interface DatastoresCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: Datastore;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type DatastoresCreateResponse = Datastore;

/** Optional parameters. */
export interface DatastoresGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DatastoresGetResponse = Datastore;

/** Optional parameters. */
export interface DatastoresUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: ResourcePatch;
}

/** Contains response data for the update operation. */
export type DatastoresUpdateResponse = Datastore;

/** Optional parameters. */
export interface DatastoresDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DatastoresListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DatastoresListResponse = DatastoresList;

/** Optional parameters. */
export interface DatastoresListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type DatastoresListByResourceGroupResponse = DatastoresList;

/** Optional parameters. */
export interface DatastoresListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DatastoresListNextResponse = DatastoresList;

/** Optional parameters. */
export interface DatastoresListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type DatastoresListByResourceGroupNextResponse = DatastoresList;

/** Optional parameters. */
export interface VCentersCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: VCenter;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type VCentersCreateResponse = VCenter;

/** Optional parameters. */
export interface VCentersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VCentersGetResponse = VCenter;

/** Optional parameters. */
export interface VCentersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: ResourcePatch;
}

/** Contains response data for the update operation. */
export type VCentersUpdateResponse = VCenter;

/** Optional parameters. */
export interface VCentersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VCentersListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VCentersListResponse = VCentersList;

/** Optional parameters. */
export interface VCentersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VCentersListByResourceGroupResponse = VCentersList;

/** Optional parameters. */
export interface VCentersListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VCentersListNextResponse = VCentersList;

/** Optional parameters. */
export interface VCentersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VCentersListByResourceGroupNextResponse = VCentersList;

/** Optional parameters. */
export interface VirtualMachineTemplatesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: VirtualMachineTemplate;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type VirtualMachineTemplatesCreateResponse = VirtualMachineTemplate;

/** Optional parameters. */
export interface VirtualMachineTemplatesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualMachineTemplatesGetResponse = VirtualMachineTemplate;

/** Optional parameters. */
export interface VirtualMachineTemplatesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: ResourcePatch;
}

/** Contains response data for the update operation. */
export type VirtualMachineTemplatesUpdateResponse = VirtualMachineTemplate;

/** Optional parameters. */
export interface VirtualMachineTemplatesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachineTemplatesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VirtualMachineTemplatesListResponse = VirtualMachineTemplatesList;

/** Optional parameters. */
export interface VirtualMachineTemplatesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VirtualMachineTemplatesListByResourceGroupResponse = VirtualMachineTemplatesList;

/** Optional parameters. */
export interface VirtualMachineTemplatesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VirtualMachineTemplatesListNextResponse = VirtualMachineTemplatesList;

/** Optional parameters. */
export interface VirtualMachineTemplatesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VirtualMachineTemplatesListByResourceGroupNextResponse = VirtualMachineTemplatesList;

/** Optional parameters. */
export interface VirtualNetworksCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: VirtualNetwork;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type VirtualNetworksCreateResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualNetworksGetResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: ResourcePatch;
}

/** Contains response data for the update operation. */
export type VirtualNetworksUpdateResponse = VirtualNetwork;

/** Optional parameters. */
export interface VirtualNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualNetworksListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VirtualNetworksListResponse = VirtualNetworksList;

/** Optional parameters. */
export interface VirtualNetworksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VirtualNetworksListByResourceGroupResponse = VirtualNetworksList;

/** Optional parameters. */
export interface VirtualNetworksListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VirtualNetworksListNextResponse = VirtualNetworksList;

/** Optional parameters. */
export interface VirtualNetworksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VirtualNetworksListByResourceGroupNextResponse = VirtualNetworksList;

/** Optional parameters. */
export interface InventoryItemsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: InventoryItem;
}

/** Contains response data for the create operation. */
export type InventoryItemsCreateResponse = InventoryItem;

/** Optional parameters. */
export interface InventoryItemsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type InventoryItemsGetResponse = InventoryItem;

/** Optional parameters. */
export interface InventoryItemsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface InventoryItemsListByVCenterOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVCenter operation. */
export type InventoryItemsListByVCenterResponse = InventoryItemsList;

/** Optional parameters. */
export interface InventoryItemsListByVCenterNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVCenterNext operation. */
export type InventoryItemsListByVCenterNextResponse = InventoryItemsList;

/** Optional parameters. */
export interface VirtualMachineInstancesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: VirtualMachineInstance;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VirtualMachineInstancesCreateOrUpdateResponse = VirtualMachineInstance;

/** Optional parameters. */
export interface VirtualMachineInstancesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualMachineInstancesGetResponse = VirtualMachineInstance;

/** Optional parameters. */
export interface VirtualMachineInstancesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Resource properties to update. */
  body?: VirtualMachineInstanceUpdate;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type VirtualMachineInstancesUpdateResponse = VirtualMachineInstance;

/** Optional parameters. */
export interface VirtualMachineInstancesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Whether force delete was specified. */
  force?: boolean;
  /** Whether to delete the VM from the vCenter. */
  deleteFromHost?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type VirtualMachineInstancesDeleteResponse = VirtualMachineInstancesDeleteHeaders;

/** Optional parameters. */
export interface VirtualMachineInstancesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VirtualMachineInstancesListResponse = VirtualMachineInstancesList;

/** Optional parameters. */
export interface VirtualMachineInstancesStopOptionalParams
  extends coreClient.OperationOptions {
  /** Virtualmachine stop action payload. */
  body?: StopVirtualMachineOptions;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the stop operation. */
export type VirtualMachineInstancesStopResponse = VirtualMachineInstancesStopHeaders;

/** Optional parameters. */
export interface VirtualMachineInstancesStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the start operation. */
export type VirtualMachineInstancesStartResponse = VirtualMachineInstancesStartHeaders;

/** Optional parameters. */
export interface VirtualMachineInstancesRestartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the restart operation. */
export type VirtualMachineInstancesRestartResponse = VirtualMachineInstancesRestartHeaders;

/** Optional parameters. */
export interface VirtualMachineInstancesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VirtualMachineInstancesListNextResponse = VirtualMachineInstancesList;

/** Optional parameters. */
export interface VmInstanceHybridIdentityMetadataGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VmInstanceHybridIdentityMetadataGetResponse = VmInstanceHybridIdentityMetadata;

/** Optional parameters. */
export interface VmInstanceHybridIdentityMetadataListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VmInstanceHybridIdentityMetadataListResponse = VmInstanceHybridIdentityMetadataList;

/** Optional parameters. */
export interface VmInstanceHybridIdentityMetadataListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VmInstanceHybridIdentityMetadataListNextResponse = VmInstanceHybridIdentityMetadataList;

/** Optional parameters. */
export interface VMInstanceGuestAgentsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Request payload. */
  body?: GuestAgent;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type VMInstanceGuestAgentsCreateResponse = GuestAgent;

/** Optional parameters. */
export interface VMInstanceGuestAgentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VMInstanceGuestAgentsGetResponse = GuestAgent;

/** Optional parameters. */
export interface VMInstanceGuestAgentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type VMInstanceGuestAgentsDeleteResponse = VMInstanceGuestAgentsDeleteHeaders;

/** Optional parameters. */
export interface VMInstanceGuestAgentsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type VMInstanceGuestAgentsListResponse = GuestAgentList;

/** Optional parameters. */
export interface VMInstanceGuestAgentsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type VMInstanceGuestAgentsListNextResponse = GuestAgentList;

/** Optional parameters. */
export interface AzureArcVMwareManagementServiceAPIOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
