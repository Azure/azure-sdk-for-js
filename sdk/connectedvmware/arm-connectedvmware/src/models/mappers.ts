/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDefinition"
        }
      }
    }
  }
};

export const ErrorDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDefinition",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDefinition"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineAssessPatchesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineAssessPatchesResult",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      assessmentActivityId: {
        serializedName: "assessmentActivityId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rebootPending: {
        serializedName: "rebootPending",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      availablePatchCountByClassification: {
        serializedName: "availablePatchCountByClassification",
        type: {
          name: "Composite",
          className: "AvailablePatchCountByClassification"
        }
      },
      startDateTime: {
        serializedName: "startDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedDateTime: {
        serializedName: "lastModifiedDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      startedBy: {
        serializedName: "startedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      patchServiceUsed: {
        serializedName: "patchServiceUsed",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const AvailablePatchCountByClassification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailablePatchCountByClassification",
    modelProperties: {
      security: {
        serializedName: "security",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      critical: {
        serializedName: "critical",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      definition: {
        serializedName: "definition",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      updateRollup: {
        serializedName: "updateRollup",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      featurePack: {
        serializedName: "featurePack",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      servicePack: {
        serializedName: "servicePack",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      tools: {
        serializedName: "tools",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      updates: {
        serializedName: "updates",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      other: {
        serializedName: "other",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineInstallPatchesParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstallPatchesParameters",
    modelProperties: {
      maximumDuration: {
        serializedName: "maximumDuration",
        required: true,
        type: {
          name: "String"
        }
      },
      rebootSetting: {
        serializedName: "rebootSetting",
        required: true,
        type: {
          name: "String"
        }
      },
      windowsParameters: {
        serializedName: "windowsParameters",
        type: {
          name: "Composite",
          className: "WindowsParameters"
        }
      },
      linuxParameters: {
        serializedName: "linuxParameters",
        type: {
          name: "Composite",
          className: "LinuxParameters"
        }
      }
    }
  }
};

export const WindowsParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WindowsParameters",
    modelProperties: {
      classificationsToInclude: {
        serializedName: "classificationsToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      kbNumbersToInclude: {
        serializedName: "kbNumbersToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      kbNumbersToExclude: {
        serializedName: "kbNumbersToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      excludeKbsRequiringReboot: {
        serializedName: "excludeKbsRequiringReboot",
        type: {
          name: "Boolean"
        }
      },
      maxPatchPublishDate: {
        serializedName: "maxPatchPublishDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const LinuxParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxParameters",
    modelProperties: {
      classificationsToInclude: {
        serializedName: "classificationsToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      packageNameMasksToInclude: {
        serializedName: "packageNameMasksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      packageNameMasksToExclude: {
        serializedName: "packageNameMasksToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineInstallPatchesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineInstallPatchesResult",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      installationActivityId: {
        serializedName: "installationActivityId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rebootStatus: {
        serializedName: "rebootStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maintenanceWindowExceeded: {
        serializedName: "maintenanceWindowExceeded",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      excludedPatchCount: {
        serializedName: "excludedPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      notSelectedPatchCount: {
        serializedName: "notSelectedPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      pendingPatchCount: {
        serializedName: "pendingPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      installedPatchCount: {
        serializedName: "installedPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      failedPatchCount: {
        serializedName: "failedPatchCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      startDateTime: {
        serializedName: "startDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedDateTime: {
        serializedName: "lastModifiedDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      startedBy: {
        serializedName: "startedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      patchServiceUsed: {
        serializedName: "patchServiceUsed",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ResourcePool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourcePool",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "properties.uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCenterId: {
        serializedName: "properties.vCenterId",
        type: {
          name: "String"
        }
      },
      moRefId: {
        serializedName: "properties.moRefId",
        type: {
          name: "String"
        }
      },
      inventoryItemId: {
        serializedName: "properties.inventoryItemId",
        type: {
          name: "String"
        }
      },
      moName: {
        serializedName: "properties.moName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      cpuSharesLevel: {
        serializedName: "properties.cpuSharesLevel",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      cpuReservationMHz: {
        serializedName: "properties.cpuReservationMHz",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      cpuLimitMHz: {
        serializedName: "properties.cpuLimitMHz",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      memSharesLevel: {
        serializedName: "properties.memSharesLevel",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memReservationMB: {
        serializedName: "properties.memReservationMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      memLimitMB: {
        serializedName: "properties.memLimitMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      customResourceName: {
        serializedName: "properties.customResourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statuses: {
        serializedName: "properties.statuses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceStatus"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceStatus",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastUpdatedAt: {
        serializedName: "lastUpdatedAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ResourcePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourcePatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ResourcePoolsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourcePoolsList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourcePool"
            }
          }
        }
      }
    }
  }
};

export const Cluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Cluster",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "properties.uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCenterId: {
        serializedName: "properties.vCenterId",
        type: {
          name: "String"
        }
      },
      moRefId: {
        serializedName: "properties.moRefId",
        type: {
          name: "String"
        }
      },
      inventoryItemId: {
        serializedName: "properties.inventoryItemId",
        type: {
          name: "String"
        }
      },
      moName: {
        serializedName: "properties.moName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statuses: {
        serializedName: "properties.statuses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceStatus"
            }
          }
        }
      },
      customResourceName: {
        serializedName: "properties.customResourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datastoreIds: {
        serializedName: "properties.datastoreIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      networkIds: {
        serializedName: "properties.networkIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Cluster"
            }
          }
        }
      }
    }
  }
};

export const Host: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Host",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "properties.uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCenterId: {
        serializedName: "properties.vCenterId",
        type: {
          name: "String"
        }
      },
      moRefId: {
        serializedName: "properties.moRefId",
        type: {
          name: "String"
        }
      },
      inventoryItemId: {
        serializedName: "properties.inventoryItemId",
        type: {
          name: "String"
        }
      },
      moName: {
        serializedName: "properties.moName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statuses: {
        serializedName: "properties.statuses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceStatus"
            }
          }
        }
      },
      customResourceName: {
        serializedName: "properties.customResourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HostsList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Host"
            }
          }
        }
      }
    }
  }
};

export const Datastore: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Datastore",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "properties.uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCenterId: {
        serializedName: "properties.vCenterId",
        type: {
          name: "String"
        }
      },
      moRefId: {
        serializedName: "properties.moRefId",
        type: {
          name: "String"
        }
      },
      inventoryItemId: {
        serializedName: "properties.inventoryItemId",
        type: {
          name: "String"
        }
      },
      moName: {
        serializedName: "properties.moName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statuses: {
        serializedName: "properties.statuses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceStatus"
            }
          }
        }
      },
      customResourceName: {
        serializedName: "properties.customResourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatastoresList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatastoresList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Datastore"
            }
          }
        }
      }
    }
  }
};

export const VCenter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VCenter",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "properties.uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "properties.fqdn",
        required: true,
        type: {
          name: "String"
        }
      },
      port: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "properties.port",
        type: {
          name: "Number"
        }
      },
      version: {
        serializedName: "properties.version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceUuid: {
        serializedName: "properties.instanceUuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectionStatus: {
        serializedName: "properties.connectionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customResourceName: {
        serializedName: "properties.customResourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "properties.credentials",
        type: {
          name: "Composite",
          className: "VICredential"
        }
      },
      statuses: {
        serializedName: "properties.statuses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceStatus"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VICredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VICredential",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VCentersList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VCentersList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VCenter"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachine: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachine",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      resourcePoolId: {
        serializedName: "properties.resourcePoolId",
        type: {
          name: "String"
        }
      },
      templateId: {
        serializedName: "properties.templateId",
        type: {
          name: "String"
        }
      },
      vCenterId: {
        serializedName: "properties.vCenterId",
        type: {
          name: "String"
        }
      },
      placementProfile: {
        serializedName: "properties.placementProfile",
        type: {
          name: "Composite",
          className: "PlacementProfile"
        }
      },
      osProfile: {
        serializedName: "properties.osProfile",
        type: {
          name: "Composite",
          className: "OsProfile"
        }
      },
      hardwareProfile: {
        serializedName: "properties.hardwareProfile",
        type: {
          name: "Composite",
          className: "HardwareProfile"
        }
      },
      networkProfile: {
        serializedName: "properties.networkProfile",
        type: {
          name: "Composite",
          className: "NetworkProfile"
        }
      },
      storageProfile: {
        serializedName: "properties.storageProfile",
        type: {
          name: "Composite",
          className: "StorageProfile"
        }
      },
      guestAgentProfile: {
        serializedName: "properties.guestAgentProfile",
        type: {
          name: "Composite",
          className: "GuestAgentProfile"
        }
      },
      securityProfile: {
        serializedName: "properties.securityProfile",
        type: {
          name: "Composite",
          className: "SecurityProfile"
        }
      },
      moRefId: {
        serializedName: "properties.moRefId",
        type: {
          name: "String"
        }
      },
      inventoryItemId: {
        serializedName: "properties.inventoryItemId",
        type: {
          name: "String"
        }
      },
      moName: {
        serializedName: "properties.moName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      folderPath: {
        serializedName: "properties.folderPath",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceUuid: {
        serializedName: "properties.instanceUuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      smbiosUuid: {
        serializedName: "properties.smbiosUuid",
        type: {
          name: "String"
        }
      },
      firmwareType: {
        serializedName: "properties.firmwareType",
        type: {
          name: "String"
        }
      },
      powerState: {
        serializedName: "properties.powerState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customResourceName: {
        serializedName: "properties.customResourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "properties.uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statuses: {
        serializedName: "properties.statuses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceStatus"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vmId: {
        serializedName: "properties.vmId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PlacementProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlacementProfile",
    modelProperties: {
      resourcePoolId: {
        serializedName: "resourcePoolId",
        type: {
          name: "String"
        }
      },
      clusterId: {
        serializedName: "clusterId",
        type: {
          name: "String"
        }
      },
      hostId: {
        serializedName: "hostId",
        type: {
          name: "String"
        }
      },
      datastoreId: {
        serializedName: "datastoreId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OsProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OsProfile",
    modelProperties: {
      computerName: {
        serializedName: "computerName",
        type: {
          name: "String"
        }
      },
      adminUsername: {
        serializedName: "adminUsername",
        type: {
          name: "String"
        }
      },
      adminPassword: {
        serializedName: "adminPassword",
        type: {
          name: "String"
        }
      },
      guestId: {
        serializedName: "guestId",
        type: {
          name: "String"
        }
      },
      allowExtensionOperations: {
        serializedName: "allowExtensionOperations",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "osName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      toolsRunningStatus: {
        serializedName: "toolsRunningStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      toolsVersionStatus: {
        serializedName: "toolsVersionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      toolsVersion: {
        serializedName: "toolsVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      windowsConfiguration: {
        serializedName: "windowsConfiguration",
        type: {
          name: "Composite",
          className: "OsProfileWindowsConfiguration"
        }
      },
      linuxConfiguration: {
        serializedName: "linuxConfiguration",
        type: {
          name: "Composite",
          className: "OsProfileLinuxConfiguration"
        }
      }
    }
  }
};

export const OsProfileWindowsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OsProfileWindowsConfiguration",
    modelProperties: {
      assessmentMode: {
        serializedName: "patchSettings.assessmentMode",
        type: {
          name: "String"
        }
      },
      patchMode: {
        serializedName: "patchSettings.patchMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OsProfileLinuxConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OsProfileLinuxConfiguration",
    modelProperties: {
      assessmentMode: {
        serializedName: "patchSettings.assessmentMode",
        type: {
          name: "String"
        }
      },
      patchMode: {
        serializedName: "patchSettings.patchMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HardwareProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HardwareProfile",
    modelProperties: {
      memorySizeMB: {
        serializedName: "memorySizeMB",
        type: {
          name: "Number"
        }
      },
      numCPUs: {
        serializedName: "numCPUs",
        type: {
          name: "Number"
        }
      },
      numCoresPerSocket: {
        serializedName: "numCoresPerSocket",
        type: {
          name: "Number"
        }
      },
      cpuHotAddEnabled: {
        serializedName: "cpuHotAddEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      cpuHotRemoveEnabled: {
        serializedName: "cpuHotRemoveEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      memoryHotAddEnabled: {
        serializedName: "memoryHotAddEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfile",
    modelProperties: {
      networkInterfaces: {
        serializedName: "networkInterfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterface"
            }
          }
        }
      }
    }
  }
};

export const NetworkInterface: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterface",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkId: {
        serializedName: "networkId",
        type: {
          name: "String"
        }
      },
      nicType: {
        serializedName: "nicType",
        type: {
          name: "String"
        }
      },
      powerOnBoot: {
        serializedName: "powerOnBoot",
        type: {
          name: "String"
        }
      },
      networkMoRefId: {
        serializedName: "networkMoRefId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkMoName: {
        serializedName: "networkMoName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deviceKey: {
        serializedName: "deviceKey",
        type: {
          name: "Number"
        }
      },
      ipSettings: {
        serializedName: "ipSettings",
        type: {
          name: "Composite",
          className: "NicIPSettings"
        }
      }
    }
  }
};

export const NicIPSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NicIPSettings",
    modelProperties: {
      allocationMethod: {
        serializedName: "allocationMethod",
        type: {
          name: "String"
        }
      },
      dnsServers: {
        serializedName: "dnsServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      gateway: {
        serializedName: "gateway",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      subnetMask: {
        serializedName: "subnetMask",
        type: {
          name: "String"
        }
      },
      primaryWinsServer: {
        serializedName: "primaryWinsServer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryWinsServer: {
        serializedName: "secondaryWinsServer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddressInfo: {
        serializedName: "ipAddressInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NicIPAddressSettings"
            }
          }
        }
      }
    }
  }
};

export const NicIPAddressSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NicIPAddressSettings",
    modelProperties: {
      allocationMethod: {
        serializedName: "allocationMethod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnetMask: {
        serializedName: "subnetMask",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageProfile",
    modelProperties: {
      disks: {
        serializedName: "disks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualDisk"
            }
          }
        }
      },
      scsiControllers: {
        serializedName: "scsiControllers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualScsiController"
            }
          }
        }
      }
    }
  }
};

export const VirtualDisk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualDisk",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskObjectId: {
        serializedName: "diskObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        type: {
          name: "Number"
        }
      },
      deviceKey: {
        serializedName: "deviceKey",
        type: {
          name: "Number"
        }
      },
      diskMode: {
        serializedName: "diskMode",
        type: {
          name: "String"
        }
      },
      controllerKey: {
        serializedName: "controllerKey",
        type: {
          name: "Number"
        }
      },
      unitNumber: {
        serializedName: "unitNumber",
        type: {
          name: "Number"
        }
      },
      deviceName: {
        serializedName: "deviceName",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualScsiController: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualScsiController",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      controllerKey: {
        serializedName: "controllerKey",
        type: {
          name: "Number"
        }
      },
      busNumber: {
        serializedName: "busNumber",
        type: {
          name: "Number"
        }
      },
      scsiCtlrUnitNumber: {
        serializedName: "scsiCtlrUnitNumber",
        type: {
          name: "Number"
        }
      },
      sharing: {
        serializedName: "sharing",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GuestAgentProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GuestAgentProfile",
    modelProperties: {
      vmUuid: {
        serializedName: "vmUuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastStatusChange: {
        serializedName: "lastStatusChange",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      agentVersion: {
        serializedName: "agentVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      }
    }
  }
};

export const SecurityProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityProfile",
    modelProperties: {
      uefiSettings: {
        serializedName: "uefiSettings",
        type: {
          name: "Composite",
          className: "UefiSettings"
        }
      }
    }
  }
};

export const UefiSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UefiSettings",
    modelProperties: {
      secureBootEnabled: {
        serializedName: "secureBootEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      hardwareProfile: {
        serializedName: "properties.hardwareProfile",
        type: {
          name: "Composite",
          className: "HardwareProfile"
        }
      },
      osProfile: {
        serializedName: "properties.osProfile",
        type: {
          name: "Composite",
          className: "OsProfileUpdate"
        }
      },
      storageProfile: {
        serializedName: "properties.storageProfile",
        type: {
          name: "Composite",
          className: "StorageProfileUpdate"
        }
      },
      networkProfile: {
        serializedName: "properties.networkProfile",
        type: {
          name: "Composite",
          className: "NetworkProfileUpdate"
        }
      }
    }
  }
};

export const OsProfileUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OsProfileUpdate",
    modelProperties: {
      windowsConfiguration: {
        serializedName: "windowsConfiguration",
        type: {
          name: "Composite",
          className: "OsProfileUpdateWindowsConfiguration"
        }
      },
      linuxConfiguration: {
        serializedName: "linuxConfiguration",
        type: {
          name: "Composite",
          className: "OsProfileUpdateLinuxConfiguration"
        }
      }
    }
  }
};

export const OsProfileUpdateWindowsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OsProfileUpdateWindowsConfiguration",
    modelProperties: {
      assessmentMode: {
        serializedName: "patchSettings.assessmentMode",
        type: {
          name: "String"
        }
      },
      patchMode: {
        serializedName: "patchSettings.patchMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OsProfileUpdateLinuxConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OsProfileUpdateLinuxConfiguration",
    modelProperties: {
      assessmentMode: {
        serializedName: "patchSettings.assessmentMode",
        type: {
          name: "String"
        }
      },
      patchMode: {
        serializedName: "patchSettings.patchMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageProfileUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageProfileUpdate",
    modelProperties: {
      disks: {
        serializedName: "disks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualDiskUpdate"
            }
          }
        }
      }
    }
  }
};

export const VirtualDiskUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualDiskUpdate",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        type: {
          name: "Number"
        }
      },
      deviceKey: {
        serializedName: "deviceKey",
        type: {
          name: "Number"
        }
      },
      diskMode: {
        serializedName: "diskMode",
        type: {
          name: "String"
        }
      },
      controllerKey: {
        serializedName: "controllerKey",
        type: {
          name: "Number"
        }
      },
      unitNumber: {
        serializedName: "unitNumber",
        type: {
          name: "Number"
        }
      },
      deviceName: {
        serializedName: "deviceName",
        type: {
          name: "String"
        }
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkProfileUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfileUpdate",
    modelProperties: {
      networkInterfaces: {
        serializedName: "networkInterfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterfaceUpdate"
            }
          }
        }
      }
    }
  }
};

export const NetworkInterfaceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceUpdate",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      networkId: {
        serializedName: "networkId",
        type: {
          name: "String"
        }
      },
      nicType: {
        serializedName: "nicType",
        type: {
          name: "String"
        }
      },
      powerOnBoot: {
        serializedName: "powerOnBoot",
        type: {
          name: "String"
        }
      },
      deviceKey: {
        serializedName: "deviceKey",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const StopVirtualMachineOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StopVirtualMachineOptions",
    modelProperties: {
      skipShutdown: {
        defaultValue: false,
        serializedName: "skipShutdown",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VirtualMachinesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachinesList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachine"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineTemplate",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "properties.uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCenterId: {
        serializedName: "properties.vCenterId",
        type: {
          name: "String"
        }
      },
      moRefId: {
        serializedName: "properties.moRefId",
        type: {
          name: "String"
        }
      },
      inventoryItemId: {
        serializedName: "properties.inventoryItemId",
        type: {
          name: "String"
        }
      },
      moName: {
        serializedName: "properties.moName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memorySizeMB: {
        serializedName: "properties.memorySizeMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numCPUs: {
        serializedName: "properties.numCPUs",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numCoresPerSocket: {
        serializedName: "properties.numCoresPerSocket",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      osType: {
        serializedName: "properties.osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "properties.osName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      folderPath: {
        serializedName: "properties.folderPath",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkInterfaces: {
        serializedName: "properties.networkInterfaces",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterface"
            }
          }
        }
      },
      disks: {
        serializedName: "properties.disks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualDisk"
            }
          }
        }
      },
      customResourceName: {
        serializedName: "properties.customResourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      toolsVersionStatus: {
        serializedName: "properties.toolsVersionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      toolsVersion: {
        serializedName: "properties.toolsVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      firmwareType: {
        serializedName: "properties.firmwareType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statuses: {
        serializedName: "properties.statuses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceStatus"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineTemplatesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineTemplatesList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineTemplate"
            }
          }
        }
      }
    }
  }
};

export const VirtualNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetwork",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      uuid: {
        serializedName: "properties.uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCenterId: {
        serializedName: "properties.vCenterId",
        type: {
          name: "String"
        }
      },
      moRefId: {
        serializedName: "properties.moRefId",
        type: {
          name: "String"
        }
      },
      inventoryItemId: {
        serializedName: "properties.inventoryItemId",
        type: {
          name: "String"
        }
      },
      moName: {
        serializedName: "properties.moName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customResourceName: {
        serializedName: "properties.customResourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statuses: {
        serializedName: "properties.statuses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceStatus"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworksList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworksList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetwork"
            }
          }
        }
      }
    }
  }
};

export const InventoryItemProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InventoryItemProperties",
    uberParent: "InventoryItemProperties",
    polymorphicDiscriminator: {
      serializedName: "inventoryType",
      clientName: "inventoryType"
    },
    modelProperties: {
      inventoryType: {
        serializedName: "inventoryType",
        required: true,
        type: {
          name: "String"
        }
      },
      managedResourceId: {
        serializedName: "managedResourceId",
        type: {
          name: "String"
        }
      },
      moRefId: {
        serializedName: "moRefId",
        type: {
          name: "String"
        }
      },
      moName: {
        serializedName: "moName",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InventoryItemsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InventoryItemsList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InventoryItem"
            }
          }
        }
      }
    }
  }
};

export const HybridIdentityMetadataList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridIdentityMetadataList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HybridIdentityMetadata"
            }
          }
        }
      }
    }
  }
};

export const MachineExtension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtension",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      forceUpdateTag: {
        serializedName: "properties.forceUpdateTag",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "properties.publisher",
        type: {
          name: "String"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      typeHandlerVersion: {
        serializedName: "properties.typeHandlerVersion",
        type: {
          name: "String"
        }
      },
      enableAutomaticUpgrade: {
        serializedName: "properties.enableAutomaticUpgrade",
        type: {
          name: "Boolean"
        }
      },
      autoUpgradeMinorVersion: {
        serializedName: "properties.autoUpgradeMinorVersion",
        type: {
          name: "Boolean"
        }
      },
      settings: {
        serializedName: "properties.settings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      protectedSettings: {
        serializedName: "properties.protectedSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceView: {
        serializedName: "properties.instanceView",
        type: {
          name: "Composite",
          className: "MachineExtensionPropertiesInstanceView"
        }
      }
    }
  }
};

export const MachineExtensionInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtensionInstanceView",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      typeHandlerVersion: {
        serializedName: "typeHandlerVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "MachineExtensionInstanceViewStatus"
        }
      }
    }
  }
};

export const MachineExtensionInstanceViewStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtensionInstanceViewStatus",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      level: {
        serializedName: "level",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayStatus: {
        serializedName: "displayStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "time",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MachineExtensionsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtensionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MachineExtension"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GuestCredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GuestCredential",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpProxyConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpProxyConfiguration",
    modelProperties: {
      httpsProxy: {
        serializedName: "httpsProxy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GuestAgentList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GuestAgentList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GuestAgent"
            }
          }
        }
      }
    }
  }
};

export const Condition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Condition",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InventoryItemDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InventoryItemDetails",
    modelProperties: {
      inventoryItemId: {
        serializedName: "inventoryItemId",
        type: {
          name: "String"
        }
      },
      moName: {
        serializedName: "moName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MachineExtensionUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtensionUpdate",
    modelProperties: {
      ...ResourcePatch.type.modelProperties,
      forceUpdateTag: {
        serializedName: "properties.forceUpdateTag",
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "properties.publisher",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      typeHandlerVersion: {
        serializedName: "properties.typeHandlerVersion",
        type: {
          name: "String"
        }
      },
      enableAutomaticUpgrade: {
        serializedName: "properties.enableAutomaticUpgrade",
        type: {
          name: "Boolean"
        }
      },
      autoUpgradeMinorVersion: {
        serializedName: "properties.autoUpgradeMinorVersion",
        type: {
          name: "Boolean"
        }
      },
      settings: {
        serializedName: "properties.settings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      protectedSettings: {
        serializedName: "properties.protectedSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ResourcePoolInventoryItem: coreClient.CompositeMapper = {
  serializedName: "ResourcePool",
  type: {
    name: "Composite",
    className: "ResourcePoolInventoryItem",
    uberParent: "InventoryItemProperties",
    polymorphicDiscriminator:
      InventoryItemProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...InventoryItemProperties.type.modelProperties,
      parent: {
        serializedName: "parent",
        type: {
          name: "Composite",
          className: "InventoryItemDetails"
        }
      }
    }
  }
};

export const VirtualMachineInventoryItem: coreClient.CompositeMapper = {
  serializedName: "VirtualMachine",
  type: {
    name: "Composite",
    className: "VirtualMachineInventoryItem",
    uberParent: "InventoryItemProperties",
    polymorphicDiscriminator:
      InventoryItemProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...InventoryItemProperties.type.modelProperties,
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "osName",
        type: {
          name: "String"
        }
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      folderPath: {
        serializedName: "folderPath",
        type: {
          name: "String"
        }
      },
      host: {
        serializedName: "host",
        type: {
          name: "Composite",
          className: "InventoryItemDetails"
        }
      },
      resourcePool: {
        serializedName: "resourcePool",
        type: {
          name: "Composite",
          className: "InventoryItemDetails"
        }
      },
      instanceUuid: {
        serializedName: "instanceUuid",
        type: {
          name: "String"
        }
      },
      smbiosUuid: {
        serializedName: "smbiosUuid",
        type: {
          name: "String"
        }
      },
      powerState: {
        serializedName: "powerState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      toolsRunningStatus: {
        serializedName: "toolsRunningStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      toolsVersionStatus: {
        serializedName: "toolsVersionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      toolsVersion: {
        serializedName: "toolsVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineTemplateInventoryItem: coreClient.CompositeMapper = {
  serializedName: "VirtualMachineTemplate",
  type: {
    name: "Composite",
    className: "VirtualMachineTemplateInventoryItem",
    uberParent: "InventoryItemProperties",
    polymorphicDiscriminator:
      InventoryItemProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...InventoryItemProperties.type.modelProperties,
      memorySizeMB: {
        serializedName: "memorySizeMB",
        type: {
          name: "Number"
        }
      },
      numCPUs: {
        serializedName: "numCPUs",
        type: {
          name: "Number"
        }
      },
      numCoresPerSocket: {
        serializedName: "numCoresPerSocket",
        type: {
          name: "Number"
        }
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "osName",
        type: {
          name: "String"
        }
      },
      folderPath: {
        serializedName: "folderPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkInventoryItem: coreClient.CompositeMapper = {
  serializedName: "VirtualNetwork",
  type: {
    name: "Composite",
    className: "VirtualNetworkInventoryItem",
    uberParent: "InventoryItemProperties",
    polymorphicDiscriminator:
      InventoryItemProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...InventoryItemProperties.type.modelProperties
    }
  }
};

export const ClusterInventoryItem: coreClient.CompositeMapper = {
  serializedName: "Cluster",
  type: {
    name: "Composite",
    className: "ClusterInventoryItem",
    uberParent: "InventoryItemProperties",
    polymorphicDiscriminator:
      InventoryItemProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...InventoryItemProperties.type.modelProperties
    }
  }
};

export const DatastoreInventoryItem: coreClient.CompositeMapper = {
  serializedName: "Datastore",
  type: {
    name: "Composite",
    className: "DatastoreInventoryItem",
    uberParent: "InventoryItemProperties",
    polymorphicDiscriminator:
      InventoryItemProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...InventoryItemProperties.type.modelProperties,
      capacityGB: {
        serializedName: "capacityGB",
        type: {
          name: "Number"
        }
      },
      freeSpaceGB: {
        serializedName: "freeSpaceGB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HostInventoryItem: coreClient.CompositeMapper = {
  serializedName: "Host",
  type: {
    name: "Composite",
    className: "HostInventoryItem",
    uberParent: "InventoryItemProperties",
    polymorphicDiscriminator:
      InventoryItemProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...InventoryItemProperties.type.modelProperties,
      parent: {
        serializedName: "parent",
        type: {
          name: "Composite",
          className: "InventoryItemDetails"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const MachineExtensionPropertiesInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtensionPropertiesInstanceView",
    modelProperties: {
      ...MachineExtensionInstanceView.type.modelProperties
    }
  }
};

export const InventoryItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InventoryItem",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      inventoryType: {
        serializedName: "properties.inventoryType",
        required: true,
        type: {
          name: "String"
        }
      },
      managedResourceId: {
        serializedName: "properties.managedResourceId",
        type: {
          name: "String"
        }
      },
      moRefId: {
        serializedName: "properties.moRefId",
        type: {
          name: "String"
        }
      },
      moName: {
        serializedName: "properties.moName",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridIdentityMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridIdentityMetadata",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      vmId: {
        serializedName: "properties.vmId",
        type: {
          name: "String"
        }
      },
      publicKey: {
        serializedName: "properties.publicKey",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "properties.identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GuestAgent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GuestAgent",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      uuid: {
        serializedName: "properties.uuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "properties.credentials",
        type: {
          name: "Composite",
          className: "GuestCredential"
        }
      },
      httpProxyConfig: {
        serializedName: "properties.httpProxyConfig",
        type: {
          name: "Composite",
          className: "HttpProxyConfiguration"
        }
      },
      provisioningAction: {
        serializedName: "properties.provisioningAction",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customResourceName: {
        serializedName: "properties.customResourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statuses: {
        serializedName: "properties.statuses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceStatus"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  InventoryItemProperties: InventoryItemProperties,
  "InventoryItemProperties.ResourcePool": ResourcePoolInventoryItem,
  "InventoryItemProperties.VirtualMachine": VirtualMachineInventoryItem,
  "InventoryItemProperties.VirtualMachineTemplate": VirtualMachineTemplateInventoryItem,
  "InventoryItemProperties.VirtualNetwork": VirtualNetworkInventoryItem,
  "InventoryItemProperties.Cluster": ClusterInventoryItem,
  "InventoryItemProperties.Datastore": DatastoreInventoryItem,
  "InventoryItemProperties.Host": HostInventoryItem
};
