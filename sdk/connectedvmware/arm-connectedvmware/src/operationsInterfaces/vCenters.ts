/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  VCenter,
  VCentersListOptionalParams,
  VCentersListByResourceGroupOptionalParams,
  VCentersCreateOptionalParams,
  VCentersCreateResponse,
  VCentersGetOptionalParams,
  VCentersGetResponse,
  VCentersUpdateOptionalParams,
  VCentersUpdateResponse,
  VCentersDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a VCenters. */
export interface VCenters {
  /**
   * List of vCenters in a subscription.
   * @param options The options parameters.
   */
  list(
    options?: VCentersListOptionalParams
  ): PagedAsyncIterableIterator<VCenter>;
  /**
   * List of vCenters in a resource group.
   * @param resourceGroupName The Resource Group Name.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: VCentersListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<VCenter>;
  /**
   * Create Or Update vCenter.
   * @param resourceGroupName The Resource Group Name.
   * @param vcenterName Name of the vCenter.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    vcenterName: string,
    options?: VCentersCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<VCentersCreateResponse>,
      VCentersCreateResponse
    >
  >;
  /**
   * Create Or Update vCenter.
   * @param resourceGroupName The Resource Group Name.
   * @param vcenterName Name of the vCenter.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    vcenterName: string,
    options?: VCentersCreateOptionalParams
  ): Promise<VCentersCreateResponse>;
  /**
   * Implements vCenter GET method.
   * @param resourceGroupName The Resource Group Name.
   * @param vcenterName Name of the vCenter.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    vcenterName: string,
    options?: VCentersGetOptionalParams
  ): Promise<VCentersGetResponse>;
  /**
   * API to update certain properties of the vCenter resource.
   * @param resourceGroupName The Resource Group Name.
   * @param vcenterName Name of the vCenter.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    vcenterName: string,
    options?: VCentersUpdateOptionalParams
  ): Promise<VCentersUpdateResponse>;
  /**
   * Implements vCenter DELETE method.
   * @param resourceGroupName The Resource Group Name.
   * @param vcenterName Name of the vCenter.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    vcenterName: string,
    options?: VCentersDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Implements vCenter DELETE method.
   * @param resourceGroupName The Resource Group Name.
   * @param vcenterName Name of the vCenter.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    vcenterName: string,
    options?: VCentersDeleteOptionalParams
  ): Promise<void>;
}
