/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const Profile: msRest.CompositeMapper = {
  serializedName: "Profile",
  type: {
    name: "Composite",
    className: "Profile",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        required: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      resourceState: {
        readOnly: true,
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      frontdoorId: {
        readOnly: true,
        serializedName: "properties.frontdoorId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProfileUpdateParameters: msRest.CompositeMapper = {
  serializedName: "ProfileUpdateParameters",
  type: {
    name: "Composite",
    className: "ProfileUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SsoUri: msRest.CompositeMapper = {
  serializedName: "SsoUri",
  type: {
    name: "Composite",
    className: "SsoUri",
    modelProperties: {
      ssoUriValue: {
        readOnly: true,
        serializedName: "ssoUriValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SupportedOptimizationTypesListResult: msRest.CompositeMapper = {
  serializedName: "SupportedOptimizationTypesListResult",
  type: {
    name: "Composite",
    className: "SupportedOptimizationTypesListResult",
    modelProperties: {
      supportedOptimizationTypes: {
        readOnly: true,
        serializedName: "supportedOptimizationTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeepCreatedOrigin: msRest.CompositeMapper = {
  serializedName: "DeepCreatedOrigin",
  type: {
    name: "Composite",
    className: "DeepCreatedOrigin",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      hostName: {
        required: true,
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        serializedName: "properties.httpPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        serializedName: "properties.httpsPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "properties.priority",
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      weight: {
        serializedName: "properties.weight",
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      privateLinkAlias: {
        serializedName: "properties.privateLinkAlias",
        type: {
          name: "String"
        }
      },
      privateLinkResourceId: {
        serializedName: "properties.privateLinkResourceId",
        type: {
          name: "String"
        }
      },
      privateLinkLocation: {
        serializedName: "properties.privateLinkLocation",
        type: {
          name: "String"
        }
      },
      privateLinkApprovalMessage: {
        serializedName: "properties.privateLinkApprovalMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthProbeParameters: msRest.CompositeMapper = {
  serializedName: "HealthProbeParameters",
  type: {
    name: "Composite",
    className: "HealthProbeParameters",
    modelProperties: {
      probePath: {
        serializedName: "probePath",
        type: {
          name: "String"
        }
      },
      probeRequestType: {
        serializedName: "probeRequestType",
        type: {
          name: "Enum",
          allowedValues: [
            "NotSet",
            "GET",
            "HEAD"
          ]
        }
      },
      probeProtocol: {
        serializedName: "probeProtocol",
        type: {
          name: "Enum",
          allowedValues: [
            "NotSet",
            "Http",
            "Https"
          ]
        }
      },
      probeIntervalInSeconds: {
        serializedName: "probeIntervalInSeconds",
        constraints: {
          InclusiveMaximum: 255,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ResourceReference: msRest.CompositeMapper = {
  serializedName: "ResourceReference",
  type: {
    name: "Composite",
    className: "ResourceReference",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpErrorRangeParameters: msRest.CompositeMapper = {
  serializedName: "HttpErrorRangeParameters",
  type: {
    name: "Composite",
    className: "HttpErrorRangeParameters",
    modelProperties: {
      begin: {
        serializedName: "begin",
        constraints: {
          InclusiveMaximum: 999,
          InclusiveMinimum: 100
        },
        type: {
          name: "Number"
        }
      },
      end: {
        serializedName: "end",
        constraints: {
          InclusiveMaximum: 999,
          InclusiveMinimum: 100
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ResponseBasedOriginErrorDetectionParameters: msRest.CompositeMapper = {
  serializedName: "ResponseBasedOriginErrorDetectionParameters",
  type: {
    name: "Composite",
    className: "ResponseBasedOriginErrorDetectionParameters",
    modelProperties: {
      responseBasedDetectedErrorTypes: {
        serializedName: "responseBasedDetectedErrorTypes",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "TcpErrorsOnly",
            "TcpAndHttpErrors"
          ]
        }
      },
      responseBasedFailoverThresholdPercentage: {
        serializedName: "responseBasedFailoverThresholdPercentage",
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      httpErrorRanges: {
        serializedName: "httpErrorRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HttpErrorRangeParameters"
            }
          }
        }
      }
    }
  }
};

export const DeepCreatedOriginGroup: msRest.CompositeMapper = {
  serializedName: "DeepCreatedOriginGroup",
  type: {
    name: "Composite",
    className: "DeepCreatedOriginGroup",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      healthProbeSettings: {
        serializedName: "properties.healthProbeSettings",
        type: {
          name: "Composite",
          className: "HealthProbeParameters"
        }
      },
      origins: {
        required: true,
        serializedName: "properties.origins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
        serializedName: "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
        constraints: {
          InclusiveMaximum: 50,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      responseBasedOriginErrorDetectionSettings: {
        serializedName: "properties.responseBasedOriginErrorDetectionSettings",
        type: {
          name: "Composite",
          className: "ResponseBasedOriginErrorDetectionParameters"
        }
      }
    }
  }
};

export const Endpoint: msRest.CompositeMapper = {
  serializedName: "Endpoint",
  type: {
    name: "Composite",
    className: "Endpoint",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      originPath: {
        serializedName: "properties.originPath",
        type: {
          name: "String"
        }
      },
      contentTypesToCompress: {
        serializedName: "properties.contentTypesToCompress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      isCompressionEnabled: {
        serializedName: "properties.isCompressionEnabled",
        type: {
          name: "Boolean"
        }
      },
      isHttpAllowed: {
        serializedName: "properties.isHttpAllowed",
        type: {
          name: "Boolean"
        }
      },
      isHttpsAllowed: {
        serializedName: "properties.isHttpsAllowed",
        type: {
          name: "Boolean"
        }
      },
      queryStringCachingBehavior: {
        serializedName: "properties.queryStringCachingBehavior",
        type: {
          name: "Enum",
          allowedValues: [
            "IgnoreQueryString",
            "BypassCaching",
            "UseQueryString",
            "NotSet"
          ]
        }
      },
      optimizationType: {
        serializedName: "properties.optimizationType",
        type: {
          name: "String"
        }
      },
      probePath: {
        serializedName: "properties.probePath",
        type: {
          name: "String"
        }
      },
      geoFilters: {
        serializedName: "properties.geoFilters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoFilter"
            }
          }
        }
      },
      defaultOriginGroup: {
        serializedName: "properties.defaultOriginGroup",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      urlSigningKeys: {
        serializedName: "properties.urlSigningKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UrlSigningKey"
            }
          }
        }
      },
      deliveryPolicy: {
        serializedName: "properties.deliveryPolicy",
        type: {
          name: "Composite",
          className: "EndpointPropertiesUpdateParametersDeliveryPolicy"
        }
      },
      webApplicationFirewallPolicyLink: {
        serializedName: "properties.webApplicationFirewallPolicyLink",
        type: {
          name: "Composite",
          className: "EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink"
        }
      },
      hostName: {
        readOnly: true,
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      origins: {
        required: true,
        serializedName: "properties.origins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeepCreatedOrigin"
            }
          }
        }
      },
      originGroups: {
        serializedName: "properties.originGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeepCreatedOriginGroup"
            }
          }
        }
      },
      resourceState: {
        readOnly: true,
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoFilter: msRest.CompositeMapper = {
  serializedName: "GeoFilter",
  type: {
    name: "Composite",
    className: "GeoFilter",
    modelProperties: {
      relativePath: {
        required: true,
        serializedName: "relativePath",
        type: {
          name: "String"
        }
      },
      action: {
        required: true,
        serializedName: "action",
        type: {
          name: "Enum",
          allowedValues: [
            "Block",
            "Allow"
          ]
        }
      },
      countryCodes: {
        required: true,
        serializedName: "countryCodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const KeyVaultSigningKeyParameters: msRest.CompositeMapper = {
  serializedName: "KeyVaultSigningKeyParameters",
  type: {
    name: "Composite",
    className: "KeyVaultSigningKeyParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.KeyVaultSigningKeyParameters',
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      resourceGroupName: {
        required: true,
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      },
      vaultName: {
        required: true,
        serializedName: "vaultName",
        type: {
          name: "String"
        }
      },
      secretName: {
        required: true,
        serializedName: "secretName",
        type: {
          name: "String"
        }
      },
      secretVersion: {
        required: true,
        serializedName: "secretVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UrlSigningKey: msRest.CompositeMapper = {
  serializedName: "UrlSigningKey",
  type: {
    name: "Composite",
    className: "UrlSigningKey",
    modelProperties: {
      keyId: {
        required: true,
        serializedName: "keyId",
        type: {
          name: "String"
        }
      },
      keySourceParameters: {
        required: true,
        serializedName: "keySourceParameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "KeyVaultSigningKeyParameters"
        }
      }
    }
  }
};

export const DeliveryRuleCondition: msRest.CompositeMapper = {
  serializedName: "DeliveryRuleCondition",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "name",
      clientName: "name"
    },
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleCondition",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeliveryRuleAction: msRest.CompositeMapper = {
  serializedName: "DeliveryRuleAction",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "name",
      clientName: "name"
    },
    uberParent: "DeliveryRuleAction",
    className: "DeliveryRuleAction",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeliveryRule: msRest.CompositeMapper = {
  serializedName: "DeliveryRule",
  type: {
    name: "Composite",
    className: "DeliveryRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      order: {
        required: true,
        serializedName: "order",
        type: {
          name: "Number"
        }
      },
      conditions: {
        serializedName: "conditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleCondition"
            }
          }
        }
      },
      actions: {
        required: true,
        serializedName: "actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleAction"
            }
          }
        }
      }
    }
  }
};

export const EndpointPropertiesUpdateParametersDeliveryPolicy: msRest.CompositeMapper = {
  serializedName: "EndpointPropertiesUpdateParameters_deliveryPolicy",
  type: {
    name: "Composite",
    className: "EndpointPropertiesUpdateParametersDeliveryPolicy",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      rules: {
        required: true,
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRule"
            }
          }
        }
      }
    }
  }
};

export const EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink: msRest.CompositeMapper = {
  serializedName: "EndpointPropertiesUpdateParameters_webApplicationFirewallPolicyLink",
  type: {
    name: "Composite",
    className: "EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointUpdateParameters: msRest.CompositeMapper = {
  serializedName: "EndpointUpdateParameters",
  type: {
    name: "Composite",
    className: "EndpointUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      originPath: {
        serializedName: "properties.originPath",
        type: {
          name: "String"
        }
      },
      contentTypesToCompress: {
        serializedName: "properties.contentTypesToCompress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      isCompressionEnabled: {
        serializedName: "properties.isCompressionEnabled",
        type: {
          name: "Boolean"
        }
      },
      isHttpAllowed: {
        serializedName: "properties.isHttpAllowed",
        type: {
          name: "Boolean"
        }
      },
      isHttpsAllowed: {
        serializedName: "properties.isHttpsAllowed",
        type: {
          name: "Boolean"
        }
      },
      queryStringCachingBehavior: {
        serializedName: "properties.queryStringCachingBehavior",
        type: {
          name: "Enum",
          allowedValues: [
            "IgnoreQueryString",
            "BypassCaching",
            "UseQueryString",
            "NotSet"
          ]
        }
      },
      optimizationType: {
        serializedName: "properties.optimizationType",
        type: {
          name: "String"
        }
      },
      probePath: {
        serializedName: "properties.probePath",
        type: {
          name: "String"
        }
      },
      geoFilters: {
        serializedName: "properties.geoFilters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoFilter"
            }
          }
        }
      },
      defaultOriginGroup: {
        serializedName: "properties.defaultOriginGroup",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      urlSigningKeys: {
        serializedName: "properties.urlSigningKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UrlSigningKey"
            }
          }
        }
      },
      deliveryPolicy: {
        serializedName: "properties.deliveryPolicy",
        type: {
          name: "Composite",
          className: "EndpointPropertiesUpdateParametersDeliveryPolicy"
        }
      },
      webApplicationFirewallPolicyLink: {
        serializedName: "properties.webApplicationFirewallPolicyLink",
        type: {
          name: "Composite",
          className: "EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink"
        }
      }
    }
  }
};

export const RemoteAddressMatchConditionParameters: msRest.CompositeMapper = {
  serializedName: "RemoteAddressMatchConditionParameters",
  type: {
    name: "Composite",
    className: "RemoteAddressMatchConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleRemoteAddressConditionParameters',
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleRemoteAddressCondition: msRest.CompositeMapper = {
  serializedName: "RemoteAddress",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleRemoteAddressCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "RemoteAddressMatchConditionParameters"
        }
      }
    }
  }
};

export const RequestMethodMatchConditionParameters: msRest.CompositeMapper = {
  serializedName: "RequestMethodMatchConditionParameters",
  type: {
    name: "Composite",
    className: "RequestMethodMatchConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleRequestMethodConditionParameters',
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        isConstant: true,
        serializedName: "operator",
        defaultValue: 'Equal',
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleRequestMethodCondition: msRest.CompositeMapper = {
  serializedName: "RequestMethod",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleRequestMethodCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "RequestMethodMatchConditionParameters"
        }
      }
    }
  }
};

export const QueryStringMatchConditionParameters: msRest.CompositeMapper = {
  serializedName: "QueryStringMatchConditionParameters",
  type: {
    name: "Composite",
    className: "QueryStringMatchConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleQueryStringConditionParameters',
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleQueryStringCondition: msRest.CompositeMapper = {
  serializedName: "QueryString",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleQueryStringCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "QueryStringMatchConditionParameters"
        }
      }
    }
  }
};

export const PostArgsMatchConditionParameters: msRest.CompositeMapper = {
  serializedName: "PostArgsMatchConditionParameters",
  type: {
    name: "Composite",
    className: "PostArgsMatchConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRulePostArgsConditionParameters',
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRulePostArgsCondition: msRest.CompositeMapper = {
  serializedName: "PostArgs",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRulePostArgsCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "PostArgsMatchConditionParameters"
        }
      }
    }
  }
};

export const RequestUriMatchConditionParameters: msRest.CompositeMapper = {
  serializedName: "RequestUriMatchConditionParameters",
  type: {
    name: "Composite",
    className: "RequestUriMatchConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleRequestUriConditionParameters',
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleRequestUriCondition: msRest.CompositeMapper = {
  serializedName: "RequestUri",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleRequestUriCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "RequestUriMatchConditionParameters"
        }
      }
    }
  }
};

export const RequestHeaderMatchConditionParameters: msRest.CompositeMapper = {
  serializedName: "RequestHeaderMatchConditionParameters",
  type: {
    name: "Composite",
    className: "RequestHeaderMatchConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleRequestHeaderConditionParameters',
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleRequestHeaderCondition: msRest.CompositeMapper = {
  serializedName: "RequestHeader",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleRequestHeaderCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "RequestHeaderMatchConditionParameters"
        }
      }
    }
  }
};

export const RequestBodyMatchConditionParameters: msRest.CompositeMapper = {
  serializedName: "RequestBodyMatchConditionParameters",
  type: {
    name: "Composite",
    className: "RequestBodyMatchConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleRequestBodyConditionParameters',
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleRequestBodyCondition: msRest.CompositeMapper = {
  serializedName: "RequestBody",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleRequestBodyCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "RequestBodyMatchConditionParameters"
        }
      }
    }
  }
};

export const RequestSchemeMatchConditionParameters: msRest.CompositeMapper = {
  serializedName: "RequestSchemeMatchConditionParameters",
  type: {
    name: "Composite",
    className: "RequestSchemeMatchConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleRequestSchemeConditionParameters',
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        isConstant: true,
        serializedName: "operator",
        defaultValue: 'Equal',
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleRequestSchemeCondition: msRest.CompositeMapper = {
  serializedName: "RequestScheme",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleRequestSchemeCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "RequestSchemeMatchConditionParameters"
        }
      }
    }
  }
};

export const UrlPathMatchConditionParameters: msRest.CompositeMapper = {
  serializedName: "UrlPathMatchConditionParameters",
  type: {
    name: "Composite",
    className: "UrlPathMatchConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlPathMatchConditionParameters',
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleUrlPathCondition: msRest.CompositeMapper = {
  serializedName: "UrlPath",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleUrlPathCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "UrlPathMatchConditionParameters"
        }
      }
    }
  }
};

export const UrlFileExtensionMatchConditionParameters: msRest.CompositeMapper = {
  serializedName: "UrlFileExtensionMatchConditionParameters",
  type: {
    name: "Composite",
    className: "UrlFileExtensionMatchConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlFileExtensionMatchConditionParameters',
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleUrlFileExtensionCondition: msRest.CompositeMapper = {
  serializedName: "UrlFileExtension",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleUrlFileExtensionCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "UrlFileExtensionMatchConditionParameters"
        }
      }
    }
  }
};

export const UrlFileNameMatchConditionParameters: msRest.CompositeMapper = {
  serializedName: "UrlFileNameMatchConditionParameters",
  type: {
    name: "Composite",
    className: "UrlFileNameMatchConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlFilenameConditionParameters',
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleUrlFileNameCondition: msRest.CompositeMapper = {
  serializedName: "UrlFileName",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleUrlFileNameCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "UrlFileNameMatchConditionParameters"
        }
      }
    }
  }
};

export const HttpVersionMatchConditionParameters: msRest.CompositeMapper = {
  serializedName: "HttpVersionMatchConditionParameters",
  type: {
    name: "Composite",
    className: "HttpVersionMatchConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleHttpVersionConditionParameters',
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        isConstant: true,
        serializedName: "operator",
        defaultValue: 'Equal',
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleHttpVersionCondition: msRest.CompositeMapper = {
  serializedName: "HttpVersion",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleHttpVersionCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "HttpVersionMatchConditionParameters"
        }
      }
    }
  }
};

export const CookiesMatchConditionParameters: msRest.CompositeMapper = {
  serializedName: "CookiesMatchConditionParameters",
  type: {
    name: "Composite",
    className: "CookiesMatchConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleCookiesConditionParameters',
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleCookiesCondition: msRest.CompositeMapper = {
  serializedName: "Cookies",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleCookiesCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "CookiesMatchConditionParameters"
        }
      }
    }
  }
};

export const IsDeviceMatchConditionParameters: msRest.CompositeMapper = {
  serializedName: "IsDeviceMatchConditionParameters",
  type: {
    name: "Composite",
    className: "IsDeviceMatchConditionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleIsDeviceConditionParameters',
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        isConstant: true,
        serializedName: "operator",
        defaultValue: 'Equal',
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleIsDeviceCondition: msRest.CompositeMapper = {
  serializedName: "IsDevice",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleCondition",
    className: "DeliveryRuleIsDeviceCondition",
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "IsDeviceMatchConditionParameters"
        }
      }
    }
  }
};

export const UrlRedirectActionParameters: msRest.CompositeMapper = {
  serializedName: "UrlRedirectActionParameters",
  type: {
    name: "Composite",
    className: "UrlRedirectActionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlRedirectActionParameters',
        type: {
          name: "String"
        }
      },
      redirectType: {
        required: true,
        serializedName: "redirectType",
        type: {
          name: "String"
        }
      },
      destinationProtocol: {
        serializedName: "destinationProtocol",
        type: {
          name: "String"
        }
      },
      customPath: {
        serializedName: "customPath",
        type: {
          name: "String"
        }
      },
      customHostname: {
        serializedName: "customHostname",
        type: {
          name: "String"
        }
      },
      customQueryString: {
        serializedName: "customQueryString",
        type: {
          name: "String"
        }
      },
      customFragment: {
        serializedName: "customFragment",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UrlRedirectAction: msRest.CompositeMapper = {
  serializedName: "UrlRedirect",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleAction.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleAction",
    className: "UrlRedirectAction",
    modelProperties: {
      ...DeliveryRuleAction.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "UrlRedirectActionParameters"
        }
      }
    }
  }
};

export const UrlSigningParamIdentifier: msRest.CompositeMapper = {
  serializedName: "UrlSigningParamIdentifier",
  type: {
    name: "Composite",
    className: "UrlSigningParamIdentifier",
    modelProperties: {
      paramIndicator: {
        required: true,
        serializedName: "paramIndicator",
        type: {
          name: "String"
        }
      },
      paramName: {
        required: true,
        serializedName: "paramName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UrlSigningActionParameters: msRest.CompositeMapper = {
  serializedName: "UrlSigningActionParameters",
  type: {
    name: "Composite",
    className: "UrlSigningActionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlSigningActionParameters',
        type: {
          name: "String"
        }
      },
      algorithm: {
        serializedName: "algorithm",
        type: {
          name: "String"
        }
      },
      parameterNameOverride: {
        serializedName: "parameterNameOverride",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UrlSigningParamIdentifier"
            }
          }
        }
      }
    }
  }
};

export const UrlSigningAction: msRest.CompositeMapper = {
  serializedName: "UrlSigning",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleAction.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleAction",
    className: "UrlSigningAction",
    modelProperties: {
      ...DeliveryRuleAction.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "UrlSigningActionParameters"
        }
      }
    }
  }
};

export const OriginGroupOverrideActionParameters: msRest.CompositeMapper = {
  serializedName: "OriginGroupOverrideActionParameters",
  type: {
    name: "Composite",
    className: "OriginGroupOverrideActionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleOriginGroupOverrideActionParameters',
        type: {
          name: "String"
        }
      },
      originGroup: {
        required: true,
        serializedName: "originGroup",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      }
    }
  }
};

export const OriginGroupOverrideAction: msRest.CompositeMapper = {
  serializedName: "OriginGroupOverride",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleAction.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleAction",
    className: "OriginGroupOverrideAction",
    modelProperties: {
      ...DeliveryRuleAction.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "OriginGroupOverrideActionParameters"
        }
      }
    }
  }
};

export const UrlRewriteActionParameters: msRest.CompositeMapper = {
  serializedName: "UrlRewriteActionParameters",
  type: {
    name: "Composite",
    className: "UrlRewriteActionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleUrlRewriteActionParameters',
        type: {
          name: "String"
        }
      },
      sourcePattern: {
        required: true,
        serializedName: "sourcePattern",
        type: {
          name: "String"
        }
      },
      destination: {
        required: true,
        serializedName: "destination",
        type: {
          name: "String"
        }
      },
      preserveUnmatchedPath: {
        serializedName: "preserveUnmatchedPath",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const UrlRewriteAction: msRest.CompositeMapper = {
  serializedName: "UrlRewrite",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleAction.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleAction",
    className: "UrlRewriteAction",
    modelProperties: {
      ...DeliveryRuleAction.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "UrlRewriteActionParameters"
        }
      }
    }
  }
};

export const HeaderActionParameters: msRest.CompositeMapper = {
  serializedName: "HeaderActionParameters",
  type: {
    name: "Composite",
    className: "HeaderActionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleHeaderActionParameters',
        type: {
          name: "String"
        }
      },
      headerAction: {
        required: true,
        serializedName: "headerAction",
        type: {
          name: "String"
        }
      },
      headerName: {
        required: true,
        serializedName: "headerName",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeliveryRuleRequestHeaderAction: msRest.CompositeMapper = {
  serializedName: "ModifyRequestHeader",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleAction.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleAction",
    className: "DeliveryRuleRequestHeaderAction",
    modelProperties: {
      ...DeliveryRuleAction.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "HeaderActionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleResponseHeaderAction: msRest.CompositeMapper = {
  serializedName: "ModifyResponseHeader",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleAction.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleAction",
    className: "DeliveryRuleResponseHeaderAction",
    modelProperties: {
      ...DeliveryRuleAction.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "HeaderActionParameters"
        }
      }
    }
  }
};

export const CacheExpirationActionParameters: msRest.CompositeMapper = {
  serializedName: "CacheExpirationActionParameters",
  type: {
    name: "Composite",
    className: "CacheExpirationActionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleCacheExpirationActionParameters',
        type: {
          name: "String"
        }
      },
      cacheBehavior: {
        required: true,
        serializedName: "cacheBehavior",
        type: {
          name: "String"
        }
      },
      cacheType: {
        required: true,
        isConstant: true,
        serializedName: "cacheType",
        defaultValue: 'All',
        type: {
          name: "String"
        }
      },
      cacheDuration: {
        nullable: true,
        serializedName: "cacheDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeliveryRuleCacheExpirationAction: msRest.CompositeMapper = {
  serializedName: "CacheExpiration",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleAction.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleAction",
    className: "DeliveryRuleCacheExpirationAction",
    modelProperties: {
      ...DeliveryRuleAction.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "CacheExpirationActionParameters"
        }
      }
    }
  }
};

export const CacheKeyQueryStringActionParameters: msRest.CompositeMapper = {
  serializedName: "CacheKeyQueryStringActionParameters",
  type: {
    name: "Composite",
    className: "CacheKeyQueryStringActionParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.DeliveryRuleCacheKeyQueryStringBehaviorActionParameters',
        type: {
          name: "String"
        }
      },
      queryStringBehavior: {
        required: true,
        serializedName: "queryStringBehavior",
        type: {
          name: "String"
        }
      },
      queryParameters: {
        nullable: true,
        serializedName: "queryParameters",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeliveryRuleCacheKeyQueryStringAction: msRest.CompositeMapper = {
  serializedName: "CacheKeyQueryString",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DeliveryRuleAction.type.polymorphicDiscriminator,
    uberParent: "DeliveryRuleAction",
    className: "DeliveryRuleCacheKeyQueryStringAction",
    modelProperties: {
      ...DeliveryRuleAction.type.modelProperties,
      parameters: {
        required: true,
        serializedName: "parameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "CacheKeyQueryStringActionParameters"
        }
      }
    }
  }
};

export const PurgeParameters: msRest.CompositeMapper = {
  serializedName: "PurgeParameters",
  type: {
    name: "Composite",
    className: "PurgeParameters",
    modelProperties: {
      contentPaths: {
        required: true,
        serializedName: "contentPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const LoadParameters: msRest.CompositeMapper = {
  serializedName: "LoadParameters",
  type: {
    name: "Composite",
    className: "LoadParameters",
    modelProperties: {
      contentPaths: {
        required: true,
        serializedName: "contentPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const Origin: msRest.CompositeMapper = {
  serializedName: "Origin",
  type: {
    name: "Composite",
    className: "Origin",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        serializedName: "properties.httpPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        serializedName: "properties.httpsPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "properties.priority",
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      weight: {
        serializedName: "properties.weight",
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      privateLinkAlias: {
        serializedName: "properties.privateLinkAlias",
        type: {
          name: "String"
        }
      },
      privateLinkResourceId: {
        serializedName: "properties.privateLinkResourceId",
        type: {
          name: "String"
        }
      },
      privateLinkLocation: {
        serializedName: "properties.privateLinkLocation",
        type: {
          name: "String"
        }
      },
      privateLinkApprovalMessage: {
        serializedName: "properties.privateLinkApprovalMessage",
        type: {
          name: "String"
        }
      },
      resourceState: {
        readOnly: true,
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      privateEndpointStatus: {
        readOnly: true,
        serializedName: "properties.privateEndpointStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginUpdateParameters: msRest.CompositeMapper = {
  serializedName: "OriginUpdateParameters",
  type: {
    name: "Composite",
    className: "OriginUpdateParameters",
    modelProperties: {
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        serializedName: "properties.httpPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        serializedName: "properties.httpsPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "properties.priority",
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      weight: {
        serializedName: "properties.weight",
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      privateLinkAlias: {
        serializedName: "properties.privateLinkAlias",
        type: {
          name: "String"
        }
      },
      privateLinkResourceId: {
        serializedName: "properties.privateLinkResourceId",
        type: {
          name: "String"
        }
      },
      privateLinkLocation: {
        serializedName: "properties.privateLinkLocation",
        type: {
          name: "String"
        }
      },
      privateLinkApprovalMessage: {
        serializedName: "properties.privateLinkApprovalMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginGroup: msRest.CompositeMapper = {
  serializedName: "OriginGroup",
  type: {
    name: "Composite",
    className: "OriginGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      healthProbeSettings: {
        serializedName: "properties.healthProbeSettings",
        type: {
          name: "Composite",
          className: "HealthProbeParameters"
        }
      },
      origins: {
        serializedName: "properties.origins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
        serializedName: "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
        constraints: {
          InclusiveMaximum: 50,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      responseBasedOriginErrorDetectionSettings: {
        serializedName: "properties.responseBasedOriginErrorDetectionSettings",
        type: {
          name: "Composite",
          className: "ResponseBasedOriginErrorDetectionParameters"
        }
      },
      resourceState: {
        readOnly: true,
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginGroupUpdateParameters: msRest.CompositeMapper = {
  serializedName: "OriginGroupUpdateParameters",
  type: {
    name: "Composite",
    className: "OriginGroupUpdateParameters",
    modelProperties: {
      healthProbeSettings: {
        serializedName: "properties.healthProbeSettings",
        type: {
          name: "Composite",
          className: "HealthProbeParameters"
        }
      },
      origins: {
        serializedName: "properties.origins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
        serializedName: "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
        constraints: {
          InclusiveMaximum: 50,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      responseBasedOriginErrorDetectionSettings: {
        serializedName: "properties.responseBasedOriginErrorDetectionSettings",
        type: {
          name: "Composite",
          className: "ResponseBasedOriginErrorDetectionParameters"
        }
      }
    }
  }
};

export const CustomDomain: msRest.CompositeMapper = {
  serializedName: "CustomDomain",
  type: {
    name: "Composite",
    className: "CustomDomain",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      hostName: {
        required: true,
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      resourceState: {
        readOnly: true,
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      customHttpsProvisioningState: {
        readOnly: true,
        serializedName: "properties.customHttpsProvisioningState",
        type: {
          name: "String"
        }
      },
      customHttpsProvisioningSubstate: {
        readOnly: true,
        serializedName: "properties.customHttpsProvisioningSubstate",
        type: {
          name: "String"
        }
      },
      validationData: {
        serializedName: "properties.validationData",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomDomainParameters: msRest.CompositeMapper = {
  serializedName: "CustomDomainParameters",
  type: {
    name: "Composite",
    className: "CustomDomainParameters",
    modelProperties: {
      hostName: {
        required: true,
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomDomainHttpsParameters: msRest.CompositeMapper = {
  serializedName: "CustomDomainHttpsParameters",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "certificateSource",
      clientName: "certificateSource"
    },
    uberParent: "CustomDomainHttpsParameters",
    className: "CustomDomainHttpsParameters",
    modelProperties: {
      protocolType: {
        required: true,
        serializedName: "protocolType",
        type: {
          name: "String"
        }
      },
      minimumTlsVersion: {
        serializedName: "minimumTlsVersion",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "TLS10",
            "TLS12"
          ]
        }
      },
      certificateSource: {
        required: true,
        serializedName: "certificateSource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CdnCertificateSourceParameters: msRest.CompositeMapper = {
  serializedName: "CdnCertificateSourceParameters",
  type: {
    name: "Composite",
    className: "CdnCertificateSourceParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.CdnCertificateSourceParameters',
        type: {
          name: "String"
        }
      },
      certificateType: {
        required: true,
        serializedName: "certificateType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CdnManagedHttpsParameters: msRest.CompositeMapper = {
  serializedName: "Cdn",
  type: {
    name: "Composite",
    polymorphicDiscriminator: CustomDomainHttpsParameters.type.polymorphicDiscriminator,
    uberParent: "CustomDomainHttpsParameters",
    className: "CdnManagedHttpsParameters",
    modelProperties: {
      ...CustomDomainHttpsParameters.type.modelProperties,
      certificateSourceParameters: {
        required: true,
        serializedName: "certificateSourceParameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "CdnCertificateSourceParameters"
        }
      }
    }
  }
};

export const KeyVaultCertificateSourceParameters: msRest.CompositeMapper = {
  serializedName: "KeyVaultCertificateSourceParameters",
  type: {
    name: "Composite",
    className: "KeyVaultCertificateSourceParameters",
    modelProperties: {
      odatatype: {
        required: true,
        isConstant: true,
        serializedName: "@odata\\.type",
        defaultValue: '#Microsoft.Azure.Cdn.Models.KeyVaultCertificateSourceParameters',
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      resourceGroupName: {
        required: true,
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      },
      vaultName: {
        required: true,
        serializedName: "vaultName",
        type: {
          name: "String"
        }
      },
      secretName: {
        required: true,
        serializedName: "secretName",
        type: {
          name: "String"
        }
      },
      secretVersion: {
        serializedName: "secretVersion",
        type: {
          name: "String"
        }
      },
      updateRule: {
        required: true,
        isConstant: true,
        serializedName: "updateRule",
        defaultValue: 'NoAction',
        type: {
          name: "String"
        }
      },
      deleteRule: {
        required: true,
        isConstant: true,
        serializedName: "deleteRule",
        defaultValue: 'NoAction',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserManagedHttpsParameters: msRest.CompositeMapper = {
  serializedName: "AzureKeyVault",
  type: {
    name: "Composite",
    polymorphicDiscriminator: CustomDomainHttpsParameters.type.polymorphicDiscriminator,
    uberParent: "CustomDomainHttpsParameters",
    className: "UserManagedHttpsParameters",
    modelProperties: {
      ...CustomDomainHttpsParameters.type.modelProperties,
      certificateSourceParameters: {
        required: true,
        serializedName: "certificateSourceParameters",
        defaultValue: {},
        type: {
          name: "Composite",
          className: "KeyVaultCertificateSourceParameters"
        }
      }
    }
  }
};

export const ValidateCustomDomainInput: msRest.CompositeMapper = {
  serializedName: "ValidateCustomDomainInput",
  type: {
    name: "Composite",
    className: "ValidateCustomDomainInput",
    modelProperties: {
      hostName: {
        required: true,
        serializedName: "hostName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateCustomDomainOutput: msRest.CompositeMapper = {
  serializedName: "ValidateCustomDomainOutput",
  type: {
    name: "Composite",
    className: "ValidateCustomDomainOutput",
    modelProperties: {
      customDomainValidated: {
        readOnly: true,
        serializedName: "customDomainValidated",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityInput: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityInput",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityInput",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'Microsoft.Cdn/Profiles/Endpoints',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityOutput: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityOutput",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityOutput",
    modelProperties: {
      nameAvailable: {
        readOnly: true,
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateProbeInput: msRest.CompositeMapper = {
  serializedName: "ValidateProbeInput",
  type: {
    name: "Composite",
    className: "ValidateProbeInput",
    modelProperties: {
      probeURL: {
        required: true,
        serializedName: "probeURL",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateProbeOutput: msRest.CompositeMapper = {
  serializedName: "ValidateProbeOutput",
  type: {
    name: "Composite",
    className: "ValidateProbeOutput",
    modelProperties: {
      isValid: {
        readOnly: true,
        serializedName: "isValid",
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        readOnly: true,
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceUsage: msRest.CompositeMapper = {
  serializedName: "ResourceUsage",
  type: {
    name: "Composite",
    className: "ResourceUsage",
    modelProperties: {
      resourceType: {
        readOnly: true,
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        readOnly: true,
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const CidrIpAddress: msRest.CompositeMapper = {
  serializedName: "cidrIpAddress",
  type: {
    name: "Composite",
    className: "CidrIpAddress",
    modelProperties: {
      baseIpAddress: {
        serializedName: "baseIpAddress",
        type: {
          name: "String"
        }
      },
      prefixLength: {
        serializedName: "prefixLength",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IpAddressGroup: msRest.CompositeMapper = {
  serializedName: "IpAddressGroup",
  type: {
    name: "Composite",
    className: "IpAddressGroup",
    modelProperties: {
      deliveryRegion: {
        serializedName: "deliveryRegion",
        type: {
          name: "String"
        }
      },
      ipv4Addresses: {
        serializedName: "ipv4Addresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CidrIpAddress"
            }
          }
        }
      },
      ipv6Addresses: {
        serializedName: "ipv6Addresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CidrIpAddress"
            }
          }
        }
      }
    }
  }
};

export const EdgeNode: msRest.CompositeMapper = {
  serializedName: "EdgeNode",
  type: {
    name: "Composite",
    className: "EdgeNode",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      ipAddressGroups: {
        required: true,
        serializedName: "properties.ipAddressGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpAddressGroup"
            }
          }
        }
      }
    }
  }
};

export const SystemData: msRest.CompositeMapper = {
  serializedName: "SystemData",
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AfdPurgeParameters: msRest.CompositeMapper = {
  serializedName: "AfdPurgeParameters",
  type: {
    name: "Composite",
    className: "AfdPurgeParameters",
    modelProperties: {
      contentPaths: {
        required: true,
        serializedName: "contentPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      domains: {
        serializedName: "domains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Certificate: msRest.CompositeMapper = {
  serializedName: "Certificate",
  type: {
    name: "Composite",
    className: "Certificate",
    modelProperties: {
      subject: {
        serializedName: "subject",
        type: {
          name: "String"
        }
      },
      expirationDate: {
        serializedName: "expirationDate",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedCertificate: msRest.CompositeMapper = {
  serializedName: "ManagedCertificate",
  type: {
    name: "Composite",
    className: "ManagedCertificate",
    modelProperties: {
      ...Certificate.type.modelProperties
    }
  }
};

export const CustomerCertificate: msRest.CompositeMapper = {
  serializedName: "CustomerCertificate",
  type: {
    name: "Composite",
    className: "CustomerCertificate",
    modelProperties: {
      ...Certificate.type.modelProperties,
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      certificateAuthority: {
        serializedName: "certificateAuthority",
        type: {
          name: "String"
        }
      },
      certificateUrl: {
        required: true,
        serializedName: "certificateUrl",
        type: {
          name: "String"
        }
      },
      useLatestVersion: {
        serializedName: "useLatestVersion",
        type: {
          name: "Boolean"
        }
      },
      subjectAlternativeNames: {
        serializedName: "subjectAlternativeNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ValidateSecretInput: msRest.CompositeMapper = {
  serializedName: "ValidateSecretInput",
  type: {
    name: "Composite",
    className: "ValidateSecretInput",
    modelProperties: {
      secretSource: {
        required: true,
        serializedName: "secretSource",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      secretType: {
        required: true,
        serializedName: "secretType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateSecretOutput: msRest.CompositeMapper = {
  serializedName: "ValidateSecretOutput",
  type: {
    name: "Composite",
    className: "ValidateSecretOutput",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDDomainHttpsParameters: msRest.CompositeMapper = {
  serializedName: "AFDDomainHttpsParameters",
  type: {
    name: "Composite",
    className: "AFDDomainHttpsParameters",
    modelProperties: {
      certificateType: {
        required: true,
        serializedName: "certificateType",
        type: {
          name: "String"
        }
      },
      minimumTlsVersion: {
        serializedName: "minimumTlsVersion",
        type: {
          name: "Enum",
          allowedValues: [
            "TLS10",
            "TLS12"
          ]
        }
      },
      secret: {
        serializedName: "secret",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      }
    }
  }
};

export const DomainValidationProperties: msRest.CompositeMapper = {
  serializedName: "DomainValidationProperties",
  type: {
    name: "Composite",
    className: "DomainValidationProperties",
    modelProperties: {
      validationToken: {
        readOnly: true,
        serializedName: "validationToken",
        type: {
          name: "String"
        }
      },
      expirationDate: {
        readOnly: true,
        serializedName: "expirationDate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDDomain: msRest.CompositeMapper = {
  serializedName: "AFDDomain",
  type: {
    name: "Composite",
    className: "AFDDomain",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      tlsSettings: {
        serializedName: "properties.tlsSettings",
        type: {
          name: "Composite",
          className: "AFDDomainHttpsParameters"
        }
      },
      azureDnsZone: {
        serializedName: "properties.azureDnsZone",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        readOnly: true,
        serializedName: "properties.deploymentStatus",
        type: {
          name: "String"
        }
      },
      domainValidationState: {
        readOnly: true,
        serializedName: "properties.domainValidationState",
        type: {
          name: "String"
        }
      },
      hostName: {
        required: true,
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      validationProperties: {
        readOnly: true,
        serializedName: "properties.validationProperties",
        type: {
          name: "Composite",
          className: "DomainValidationProperties"
        }
      }
    }
  }
};

export const AFDDomainUpdateParameters: msRest.CompositeMapper = {
  serializedName: "AFDDomainUpdateParameters",
  type: {
    name: "Composite",
    className: "AFDDomainUpdateParameters",
    modelProperties: {
      tlsSettings: {
        serializedName: "properties.tlsSettings",
        type: {
          name: "Composite",
          className: "AFDDomainHttpsParameters"
        }
      },
      azureDnsZone: {
        serializedName: "properties.azureDnsZone",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      }
    }
  }
};

export const SecurityPolicyWebApplicationFirewallAssociation: msRest.CompositeMapper = {
  serializedName: "SecurityPolicyWebApplicationFirewallAssociation",
  type: {
    name: "Composite",
    className: "SecurityPolicyWebApplicationFirewallAssociation",
    modelProperties: {
      domains: {
        serializedName: "domains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      patternsToMatch: {
        serializedName: "patternsToMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SecurityPolicyParameters: msRest.CompositeMapper = {
  serializedName: "SecurityPolicyParameters",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    uberParent: "SecurityPolicyParameters",
    className: "SecurityPolicyParameters",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityPolicyWebApplicationFirewallParameters: msRest.CompositeMapper = {
  serializedName: "WebApplicationFirewall",
  type: {
    name: "Composite",
    polymorphicDiscriminator: SecurityPolicyParameters.type.polymorphicDiscriminator,
    uberParent: "SecurityPolicyParameters",
    className: "SecurityPolicyWebApplicationFirewallParameters",
    modelProperties: {
      ...SecurityPolicyParameters.type.modelProperties,
      wafPolicy: {
        serializedName: "wafPolicy",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      associations: {
        serializedName: "associations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityPolicyWebApplicationFirewallAssociation"
            }
          }
        }
      }
    }
  }
};

export const SecurityPolicy: msRest.CompositeMapper = {
  serializedName: "SecurityPolicy",
  type: {
    name: "Composite",
    className: "SecurityPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        readOnly: true,
        serializedName: "properties.deploymentStatus",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Composite",
          className: "SecurityPolicyWebApplicationFirewallParameters"
        }
      }
    }
  }
};

export const AFDEndpoint: msRest.CompositeMapper = {
  serializedName: "AFDEndpoint",
  type: {
    name: "Composite",
    className: "AFDEndpoint",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      originResponseTimeoutSeconds: {
        serializedName: "properties.originResponseTimeoutSeconds",
        constraints: {
          InclusiveMinimum: 16
        },
        type: {
          name: "Number"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        readOnly: true,
        serializedName: "properties.deploymentStatus",
        type: {
          name: "String"
        }
      },
      hostName: {
        readOnly: true,
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDEndpointUpdateParameters: msRest.CompositeMapper = {
  serializedName: "AFDEndpointUpdateParameters",
  type: {
    name: "Composite",
    className: "AFDEndpointUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      originResponseTimeoutSeconds: {
        serializedName: "properties.originResponseTimeoutSeconds",
        constraints: {
          InclusiveMinimum: 16
        },
        type: {
          name: "Number"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CompressionSettings: msRest.CompositeMapper = {
  serializedName: "CompressionSettings",
  type: {
    name: "Composite",
    className: "CompressionSettings",
    modelProperties: {
      contentTypesToCompress: {
        serializedName: "contentTypesToCompress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isCompressionEnabled: {
        serializedName: "isCompressionEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SecretParameters: msRest.CompositeMapper = {
  serializedName: "SecretParameters",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    uberParent: "SecretParameters",
    className: "SecretParameters",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDStateProperties: msRest.CompositeMapper = {
  serializedName: "AFDStateProperties",
  type: {
    name: "Composite",
    className: "AFDStateProperties",
    modelProperties: {
      provisioningState: {
        readOnly: true,
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        readOnly: true,
        serializedName: "deploymentStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretProperties: msRest.CompositeMapper = {
  serializedName: "SecretProperties",
  type: {
    name: "Composite",
    className: "SecretProperties",
    modelProperties: {
      ...AFDStateProperties.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "SecretParameters"
        }
      }
    }
  }
};

export const Secret: msRest.CompositeMapper = {
  serializedName: "Secret",
  type: {
    name: "Composite",
    className: "Secret",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        readOnly: true,
        serializedName: "properties.deploymentStatus",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Composite",
          className: "SecretParameters"
        }
      }
    }
  }
};

export const UrlSigningKeyParameters: msRest.CompositeMapper = {
  serializedName: "UrlSigningKey",
  type: {
    name: "Composite",
    polymorphicDiscriminator: SecretParameters.type.polymorphicDiscriminator,
    uberParent: "SecretParameters",
    className: "UrlSigningKeyParameters",
    modelProperties: {
      ...SecretParameters.type.modelProperties,
      keyId: {
        required: true,
        serializedName: "keyId",
        type: {
          name: "String"
        }
      },
      secretSource: {
        required: true,
        serializedName: "secretSource",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      secretVersion: {
        serializedName: "secretVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedCertificateParameters: msRest.CompositeMapper = {
  serializedName: "ManagedCertificate",
  type: {
    name: "Composite",
    className: "ManagedCertificateParameters",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      subject: {
        serializedName: "subject",
        type: {
          name: "String"
        }
      },
      expirationDate: {
        serializedName: "expirationDate",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomerCertificateParameters: msRest.CompositeMapper = {
  serializedName: "CustomerCertificate",
  type: {
    name: "Composite",
    className: "CustomerCertificateParameters",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      subject: {
        serializedName: "subject",
        type: {
          name: "String"
        }
      },
      expirationDate: {
        serializedName: "expirationDate",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      secretSource: {
        required: true,
        serializedName: "secretSource",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      secretVersion: {
        serializedName: "secretVersion",
        type: {
          name: "String"
        }
      },
      certificateAuthority: {
        serializedName: "certificateAuthority",
        type: {
          name: "String"
        }
      },
      useLatestVersion: {
        serializedName: "useLatestVersion",
        type: {
          name: "Boolean"
        }
      },
      subjectAlternativeNames: {
        serializedName: "subjectAlternativeNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RuleSet: msRest.CompositeMapper = {
  serializedName: "RuleSet",
  type: {
    name: "Composite",
    className: "RuleSet",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        readOnly: true,
        serializedName: "properties.deploymentStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDOrigin: msRest.CompositeMapper = {
  serializedName: "AFDOrigin",
  type: {
    name: "Composite",
    className: "AFDOrigin",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      azureOrigin: {
        serializedName: "properties.azureOrigin",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      hostName: {
        required: true,
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        serializedName: "properties.httpPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        serializedName: "properties.httpsPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "properties.priority",
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      weight: {
        serializedName: "properties.weight",
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      sharedPrivateLinkResource: {
        serializedName: "properties.sharedPrivateLinkResource",
        type: {
          name: "Object"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        readOnly: true,
        serializedName: "properties.deploymentStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDOriginUpdateParameters: msRest.CompositeMapper = {
  serializedName: "AFDOriginUpdateParameters",
  type: {
    name: "Composite",
    className: "AFDOriginUpdateParameters",
    modelProperties: {
      azureOrigin: {
        serializedName: "properties.azureOrigin",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        serializedName: "properties.httpPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        serializedName: "properties.httpsPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "properties.priority",
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      weight: {
        serializedName: "properties.weight",
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      sharedPrivateLinkResource: {
        serializedName: "properties.sharedPrivateLinkResource",
        type: {
          name: "Object"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SharedPrivateLinkResourceProperties: msRest.CompositeMapper = {
  serializedName: "SharedPrivateLinkResourceProperties",
  type: {
    name: "Composite",
    className: "SharedPrivateLinkResourceProperties",
    modelProperties: {
      privateLink: {
        serializedName: "privateLink",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      privateLinkLocation: {
        serializedName: "privateLinkLocation",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      requestMessage: {
        serializedName: "requestMessage",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Pending",
            "Approved",
            "Rejected",
            "Disconnected",
            "Timeout"
          ]
        }
      }
    }
  }
};

export const LoadBalancingSettingsParameters: msRest.CompositeMapper = {
  serializedName: "LoadBalancingSettingsParameters",
  type: {
    name: "Composite",
    className: "LoadBalancingSettingsParameters",
    modelProperties: {
      sampleSize: {
        serializedName: "sampleSize",
        type: {
          name: "Number"
        }
      },
      successfulSamplesRequired: {
        serializedName: "successfulSamplesRequired",
        type: {
          name: "Number"
        }
      },
      additionalLatencyInMilliseconds: {
        serializedName: "additionalLatencyInMilliseconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AFDOriginGroup: msRest.CompositeMapper = {
  serializedName: "AFDOriginGroup",
  type: {
    name: "Composite",
    className: "AFDOriginGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      loadBalancingSettings: {
        serializedName: "properties.loadBalancingSettings",
        type: {
          name: "Composite",
          className: "LoadBalancingSettingsParameters"
        }
      },
      healthProbeSettings: {
        serializedName: "properties.healthProbeSettings",
        type: {
          name: "Composite",
          className: "HealthProbeParameters"
        }
      },
      trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
        serializedName: "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
        constraints: {
          InclusiveMaximum: 50,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      responseBasedAfdOriginErrorDetectionSettings: {
        serializedName: "properties.responseBasedAfdOriginErrorDetectionSettings",
        type: {
          name: "Composite",
          className: "ResponseBasedOriginErrorDetectionParameters"
        }
      },
      sessionAffinityState: {
        serializedName: "properties.sessionAffinityState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        readOnly: true,
        serializedName: "properties.deploymentStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDOriginGroupUpdateParameters: msRest.CompositeMapper = {
  serializedName: "AFDOriginGroupUpdateParameters",
  type: {
    name: "Composite",
    className: "AFDOriginGroupUpdateParameters",
    modelProperties: {
      loadBalancingSettings: {
        serializedName: "properties.loadBalancingSettings",
        type: {
          name: "Composite",
          className: "LoadBalancingSettingsParameters"
        }
      },
      healthProbeSettings: {
        serializedName: "properties.healthProbeSettings",
        type: {
          name: "Composite",
          className: "HealthProbeParameters"
        }
      },
      trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
        serializedName: "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
        constraints: {
          InclusiveMaximum: 50,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      responseBasedAfdOriginErrorDetectionSettings: {
        serializedName: "properties.responseBasedAfdOriginErrorDetectionSettings",
        type: {
          name: "Composite",
          className: "ResponseBasedOriginErrorDetectionParameters"
        }
      },
      sessionAffinityState: {
        serializedName: "properties.sessionAffinityState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Route: msRest.CompositeMapper = {
  serializedName: "Route",
  type: {
    name: "Composite",
    className: "Route",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      customDomains: {
        serializedName: "properties.customDomains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      originGroup: {
        required: true,
        serializedName: "properties.originGroup",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      originPath: {
        serializedName: "properties.originPath",
        type: {
          name: "String"
        }
      },
      ruleSets: {
        serializedName: "properties.ruleSets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      supportedProtocols: {
        serializedName: "properties.supportedProtocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      patternsToMatch: {
        serializedName: "properties.patternsToMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      compressionSettings: {
        serializedName: "properties.compressionSettings",
        type: {
          name: "Object"
        }
      },
      queryStringCachingBehavior: {
        serializedName: "properties.queryStringCachingBehavior",
        type: {
          name: "Enum",
          allowedValues: [
            "IgnoreQueryString",
            "BypassCaching",
            "UseQueryString",
            "NotSet"
          ]
        }
      },
      optimizationType: {
        serializedName: "properties.optimizationType",
        type: {
          name: "String"
        }
      },
      forwardingProtocol: {
        serializedName: "properties.forwardingProtocol",
        type: {
          name: "String"
        }
      },
      linkToDefaultDomain: {
        serializedName: "properties.linkToDefaultDomain",
        type: {
          name: "String"
        }
      },
      httpsRedirect: {
        serializedName: "properties.httpsRedirect",
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        readOnly: true,
        serializedName: "properties.deploymentStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteUpdateParameters: msRest.CompositeMapper = {
  serializedName: "RouteUpdateParameters",
  type: {
    name: "Composite",
    className: "RouteUpdateParameters",
    modelProperties: {
      customDomains: {
        serializedName: "properties.customDomains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      originGroup: {
        serializedName: "properties.originGroup",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      originPath: {
        serializedName: "properties.originPath",
        type: {
          name: "String"
        }
      },
      ruleSets: {
        serializedName: "properties.ruleSets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      supportedProtocols: {
        serializedName: "properties.supportedProtocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      patternsToMatch: {
        serializedName: "properties.patternsToMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      compressionSettings: {
        serializedName: "properties.compressionSettings",
        type: {
          name: "Object"
        }
      },
      queryStringCachingBehavior: {
        serializedName: "properties.queryStringCachingBehavior",
        type: {
          name: "Enum",
          allowedValues: [
            "IgnoreQueryString",
            "BypassCaching",
            "UseQueryString",
            "NotSet"
          ]
        }
      },
      optimizationType: {
        serializedName: "properties.optimizationType",
        type: {
          name: "String"
        }
      },
      forwardingProtocol: {
        serializedName: "properties.forwardingProtocol",
        type: {
          name: "String"
        }
      },
      linkToDefaultDomain: {
        serializedName: "properties.linkToDefaultDomain",
        type: {
          name: "String"
        }
      },
      httpsRedirect: {
        serializedName: "properties.httpsRedirect",
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Rule: msRest.CompositeMapper = {
  serializedName: "Rule",
  type: {
    name: "Composite",
    className: "Rule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      order: {
        required: true,
        serializedName: "properties.order",
        type: {
          name: "Number"
        }
      },
      conditions: {
        serializedName: "properties.conditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleCondition"
            }
          }
        }
      },
      actions: {
        required: true,
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleAction"
            }
          }
        }
      },
      matchProcessingBehavior: {
        serializedName: "properties.matchProcessingBehavior",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        readOnly: true,
        serializedName: "properties.deploymentStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleUpdateParameters: msRest.CompositeMapper = {
  serializedName: "RuleUpdateParameters",
  type: {
    name: "Composite",
    className: "RuleUpdateParameters",
    modelProperties: {
      order: {
        serializedName: "properties.order",
        type: {
          name: "Number"
        }
      },
      conditions: {
        serializedName: "properties.conditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleCondition"
            }
          }
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleAction"
            }
          }
        }
      },
      matchProcessingBehavior: {
        serializedName: "properties.matchProcessingBehavior",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidationToken: msRest.CompositeMapper = {
  serializedName: "ValidationToken",
  type: {
    name: "Composite",
    className: "ValidationToken",
    modelProperties: {
      token: {
        readOnly: true,
        serializedName: "token",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AfdErrorResponse: msRest.CompositeMapper = {
  serializedName: "AfdErrorResponse",
  type: {
    name: "Composite",
    className: "AfdErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponse"
        }
      }
    }
  }
};

export const MetricsResponseSeriesItemGroupsItem: msRest.CompositeMapper = {
  serializedName: "MetricsResponse_seriesItem_groupsItem",
  type: {
    name: "Composite",
    className: "MetricsResponseSeriesItemGroupsItem",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricsResponseSeriesItemDataItem: msRest.CompositeMapper = {
  serializedName: "MetricsResponse_seriesItem_dataItem",
  type: {
    name: "Composite",
    className: "MetricsResponseSeriesItemDataItem",
    modelProperties: {
      dateTime: {
        serializedName: "dateTime",
        type: {
          name: "DateTime"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MetricsResponseSeriesItem: msRest.CompositeMapper = {
  serializedName: "MetricsResponse_seriesItem",
  type: {
    name: "Composite",
    className: "MetricsResponseSeriesItem",
    modelProperties: {
      metric: {
        serializedName: "metric",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      groups: {
        serializedName: "groups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricsResponseSeriesItemGroupsItem"
            }
          }
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricsResponseSeriesItemDataItem"
            }
          }
        }
      }
    }
  }
};

export const MetricsResponse: msRest.CompositeMapper = {
  serializedName: "MetricsResponse",
  type: {
    name: "Composite",
    className: "MetricsResponse",
    modelProperties: {
      dateTimeBegin: {
        serializedName: "dateTimeBegin",
        type: {
          name: "DateTime"
        }
      },
      dateTimeEnd: {
        serializedName: "dateTimeEnd",
        type: {
          name: "DateTime"
        }
      },
      granularity: {
        serializedName: "granularity",
        type: {
          name: "String"
        }
      },
      series: {
        serializedName: "series",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricsResponseSeriesItem"
            }
          }
        }
      }
    }
  }
};

export const RankingsResponseTablesItemDataItemMetricsItem: msRest.CompositeMapper = {
  serializedName: "RankingsResponse_tablesItem_dataItem_metricsItem",
  type: {
    name: "Composite",
    className: "RankingsResponseTablesItemDataItemMetricsItem",
    modelProperties: {
      metric: {
        serializedName: "metric",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      },
      percentage: {
        serializedName: "percentage",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RankingsResponseTablesItemDataItem: msRest.CompositeMapper = {
  serializedName: "RankingsResponse_tablesItem_dataItem",
  type: {
    name: "Composite",
    className: "RankingsResponseTablesItemDataItem",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      metrics: {
        serializedName: "metrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RankingsResponseTablesItemDataItemMetricsItem"
            }
          }
        }
      }
    }
  }
};

export const RankingsResponseTablesItem: msRest.CompositeMapper = {
  serializedName: "RankingsResponse_tablesItem",
  type: {
    name: "Composite",
    className: "RankingsResponseTablesItem",
    modelProperties: {
      ranking: {
        serializedName: "ranking",
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RankingsResponseTablesItemDataItem"
            }
          }
        }
      }
    }
  }
};

export const RankingsResponse: msRest.CompositeMapper = {
  serializedName: "RankingsResponse",
  type: {
    name: "Composite",
    className: "RankingsResponse",
    modelProperties: {
      dateTimeBegin: {
        serializedName: "dateTimeBegin",
        type: {
          name: "DateTime"
        }
      },
      dateTimeEnd: {
        serializedName: "dateTimeEnd",
        type: {
          name: "DateTime"
        }
      },
      tables: {
        serializedName: "tables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RankingsResponseTablesItem"
            }
          }
        }
      }
    }
  }
};

export const ContinentsResponseContinentsItem: msRest.CompositeMapper = {
  serializedName: "ContinentsResponse_continentsItem",
  type: {
    name: "Composite",
    className: "ContinentsResponseContinentsItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContinentsResponseCountryOrRegionsItem: msRest.CompositeMapper = {
  serializedName: "ContinentsResponse_countryOrRegionsItem",
  type: {
    name: "Composite",
    className: "ContinentsResponseCountryOrRegionsItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      continentId: {
        serializedName: "continentId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContinentsResponse: msRest.CompositeMapper = {
  serializedName: "ContinentsResponse",
  type: {
    name: "Composite",
    className: "ContinentsResponse",
    modelProperties: {
      continents: {
        serializedName: "continents",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContinentsResponseContinentsItem"
            }
          }
        }
      },
      countryOrRegions: {
        serializedName: "countryOrRegions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContinentsResponseCountryOrRegionsItem"
            }
          }
        }
      }
    }
  }
};

export const ResourcesResponseEndpointsItemCustomDomainsItem: msRest.CompositeMapper = {
  serializedName: "ResourcesResponse_endpointsItem_customDomainsItem",
  type: {
    name: "Composite",
    className: "ResourcesResponseEndpointsItemCustomDomainsItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      endpointId: {
        serializedName: "endpointId",
        type: {
          name: "String"
        }
      },
      history: {
        serializedName: "history",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ResourcesResponseEndpointsItem: msRest.CompositeMapper = {
  serializedName: "ResourcesResponse_endpointsItem",
  type: {
    name: "Composite",
    className: "ResourcesResponseEndpointsItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      history: {
        serializedName: "history",
        type: {
          name: "Boolean"
        }
      },
      customDomains: {
        serializedName: "customDomains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourcesResponseEndpointsItemCustomDomainsItem"
            }
          }
        }
      }
    }
  }
};

export const ResourcesResponseCustomDomainsItem: msRest.CompositeMapper = {
  serializedName: "ResourcesResponse_customDomainsItem",
  type: {
    name: "Composite",
    className: "ResourcesResponseCustomDomainsItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      endpointId: {
        serializedName: "endpointId",
        type: {
          name: "String"
        }
      },
      history: {
        serializedName: "history",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ResourcesResponse: msRest.CompositeMapper = {
  serializedName: "ResourcesResponse",
  type: {
    name: "Composite",
    className: "ResourcesResponse",
    modelProperties: {
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourcesResponseEndpointsItem"
            }
          }
        }
      },
      customDomains: {
        serializedName: "customDomains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourcesResponseCustomDomainsItem"
            }
          }
        }
      }
    }
  }
};

export const WafMetricsResponseSeriesItemGroupsItem: msRest.CompositeMapper = {
  serializedName: "WafMetricsResponse_seriesItem_groupsItem",
  type: {
    name: "Composite",
    className: "WafMetricsResponseSeriesItemGroupsItem",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WafMetricsResponseSeriesItemDataItem: msRest.CompositeMapper = {
  serializedName: "WafMetricsResponse_seriesItem_dataItem",
  type: {
    name: "Composite",
    className: "WafMetricsResponseSeriesItemDataItem",
    modelProperties: {
      dateTime: {
        serializedName: "dateTime",
        type: {
          name: "DateTime"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const WafMetricsResponseSeriesItem: msRest.CompositeMapper = {
  serializedName: "WafMetricsResponse_seriesItem",
  type: {
    name: "Composite",
    className: "WafMetricsResponseSeriesItem",
    modelProperties: {
      metric: {
        serializedName: "metric",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      groups: {
        serializedName: "groups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WafMetricsResponseSeriesItemGroupsItem"
            }
          }
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WafMetricsResponseSeriesItemDataItem"
            }
          }
        }
      }
    }
  }
};

export const WafMetricsResponse: msRest.CompositeMapper = {
  serializedName: "WafMetricsResponse",
  type: {
    name: "Composite",
    className: "WafMetricsResponse",
    modelProperties: {
      dateTimeBegin: {
        serializedName: "dateTimeBegin",
        type: {
          name: "DateTime"
        }
      },
      dateTimeEnd: {
        serializedName: "dateTimeEnd",
        type: {
          name: "DateTime"
        }
      },
      granularity: {
        serializedName: "granularity",
        type: {
          name: "String"
        }
      },
      series: {
        serializedName: "series",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WafMetricsResponseSeriesItem"
            }
          }
        }
      }
    }
  }
};

export const WafRankingsResponseDataItemMetricsItem: msRest.CompositeMapper = {
  serializedName: "WafRankingsResponse_dataItem_metricsItem",
  type: {
    name: "Composite",
    className: "WafRankingsResponseDataItemMetricsItem",
    modelProperties: {
      metric: {
        serializedName: "metric",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      },
      percentage: {
        serializedName: "percentage",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const WafRankingsResponseDataItem: msRest.CompositeMapper = {
  serializedName: "WafRankingsResponse_dataItem",
  type: {
    name: "Composite",
    className: "WafRankingsResponseDataItem",
    modelProperties: {
      groupValues: {
        serializedName: "groupValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      metrics: {
        serializedName: "metrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WafRankingsResponseDataItemMetricsItem"
            }
          }
        }
      }
    }
  }
};

export const WafRankingsResponse: msRest.CompositeMapper = {
  serializedName: "WafRankingsResponse",
  type: {
    name: "Composite",
    className: "WafRankingsResponse",
    modelProperties: {
      dateTimeBegin: {
        serializedName: "dateTimeBegin",
        type: {
          name: "DateTime"
        }
      },
      dateTimeEnd: {
        serializedName: "dateTimeEnd",
        type: {
          name: "DateTime"
        }
      },
      groups: {
        serializedName: "groups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WafRankingsResponseDataItem"
            }
          }
        }
      }
    }
  }
};

export const UsageName: msRest.CompositeMapper = {
  serializedName: "UsageName",
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: msRest.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      unit: {
        required: true,
        isConstant: true,
        serializedName: "unit",
        defaultValue: 'Count',
        type: {
          name: "String"
        }
      },
      currentValue: {
        required: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        required: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const PolicySettings: msRest.CompositeMapper = {
  serializedName: "policySettings",
  type: {
    name: "Composite",
    className: "PolicySettings",
    modelProperties: {
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      defaultRedirectUrl: {
        serializedName: "defaultRedirectUrl",
        type: {
          name: "String"
        }
      },
      defaultCustomBlockResponseStatusCode: {
        serializedName: "defaultCustomBlockResponseStatusCode",
        type: {
          name: "Number"
        }
      },
      defaultCustomBlockResponseBody: {
        serializedName: "defaultCustomBlockResponseBody",
        constraints: {
          Pattern: /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{4})$/
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomRule: msRest.CompositeMapper = {
  serializedName: "CustomRule",
  type: {
    name: "Composite",
    className: "CustomRule",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      priority: {
        required: true,
        serializedName: "priority",
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      matchConditions: {
        required: true,
        serializedName: "matchConditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MatchCondition"
            }
          }
        }
      },
      action: {
        required: true,
        serializedName: "action",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RateLimitRule: msRest.CompositeMapper = {
  serializedName: "RateLimitRule",
  type: {
    name: "Composite",
    className: "RateLimitRule",
    modelProperties: {
      ...CustomRule.type.modelProperties,
      rateLimitThreshold: {
        required: true,
        serializedName: "rateLimitThreshold",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      rateLimitDurationInMinutes: {
        required: true,
        serializedName: "rateLimitDurationInMinutes",
        constraints: {
          InclusiveMaximum: 60,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RateLimitRuleList: msRest.CompositeMapper = {
  serializedName: "RateLimitRuleList",
  type: {
    name: "Composite",
    className: "RateLimitRuleList",
    modelProperties: {
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RateLimitRule"
            }
          }
        }
      }
    }
  }
};

export const MatchCondition: msRest.CompositeMapper = {
  serializedName: "MatchCondition",
  type: {
    name: "Composite",
    className: "MatchCondition",
    modelProperties: {
      matchVariable: {
        required: true,
        serializedName: "matchVariable",
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValue: {
        required: true,
        serializedName: "matchValue",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CustomRuleList: msRest.CompositeMapper = {
  serializedName: "CustomRuleList",
  type: {
    name: "Composite",
    className: "CustomRuleList",
    modelProperties: {
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomRule"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleOverride: msRest.CompositeMapper = {
  serializedName: "ManagedRuleOverride",
  type: {
    name: "Composite",
    className: "ManagedRuleOverride",
    modelProperties: {
      ruleId: {
        required: true,
        serializedName: "ruleId",
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRuleGroupOverride: msRest.CompositeMapper = {
  serializedName: "ManagedRuleGroupOverride",
  type: {
    name: "Composite",
    className: "ManagedRuleGroupOverride",
    modelProperties: {
      ruleGroupName: {
        required: true,
        serializedName: "ruleGroupName",
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleOverride"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleSet: msRest.CompositeMapper = {
  serializedName: "ManagedRuleSet",
  type: {
    name: "Composite",
    className: "ManagedRuleSet",
    modelProperties: {
      ruleSetType: {
        required: true,
        serializedName: "ruleSetType",
        type: {
          name: "String"
        }
      },
      ruleSetVersion: {
        required: true,
        serializedName: "ruleSetVersion",
        type: {
          name: "String"
        }
      },
      anomalyScore: {
        serializedName: "anomalyScore",
        constraints: {
          InclusiveMaximum: 20,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      ruleGroupOverrides: {
        serializedName: "ruleGroupOverrides",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleGroupOverride"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleSetList: msRest.CompositeMapper = {
  serializedName: "ManagedRuleSetList",
  type: {
    name: "Composite",
    className: "ManagedRuleSetList",
    modelProperties: {
      managedRuleSets: {
        serializedName: "managedRuleSets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleSet"
            }
          }
        }
      }
    }
  }
};

export const CdnEndpoint: msRest.CompositeMapper = {
  serializedName: "CdnEndpoint",
  type: {
    name: "Composite",
    className: "CdnEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CdnWebApplicationFirewallPolicy: msRest.CompositeMapper = {
  serializedName: "CdnWebApplicationFirewallPolicy",
  type: {
    name: "Composite",
    className: "CdnWebApplicationFirewallPolicy",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      policySettings: {
        serializedName: "properties.policySettings",
        type: {
          name: "Composite",
          className: "PolicySettings"
        }
      },
      rateLimitRules: {
        serializedName: "properties.rateLimitRules",
        type: {
          name: "Composite",
          className: "RateLimitRuleList"
        }
      },
      customRules: {
        serializedName: "properties.customRules",
        type: {
          name: "Composite",
          className: "CustomRuleList"
        }
      },
      managedRules: {
        serializedName: "properties.managedRules",
        type: {
          name: "Composite",
          className: "ManagedRuleSetList"
        }
      },
      endpointLinks: {
        readOnly: true,
        serializedName: "properties.endpointLinks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CdnEndpoint"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      resourceState: {
        readOnly: true,
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      sku: {
        required: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const CdnWebApplicationFirewallPolicyPatchParameters: msRest.CompositeMapper = {
  serializedName: "CdnWebApplicationFirewallPolicyPatchParameters",
  type: {
    name: "Composite",
    className: "CdnWebApplicationFirewallPolicyPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleDefinition: msRest.CompositeMapper = {
  serializedName: "ManagedRuleDefinition",
  type: {
    name: "Composite",
    className: "ManagedRuleDefinition",
    modelProperties: {
      ruleId: {
        readOnly: true,
        serializedName: "ruleId",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRuleGroupDefinition: msRest.CompositeMapper = {
  serializedName: "ManagedRuleGroupDefinition",
  type: {
    name: "Composite",
    className: "ManagedRuleGroupDefinition",
    modelProperties: {
      ruleGroupName: {
        readOnly: true,
        serializedName: "ruleGroupName",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      rules: {
        readOnly: true,
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleDefinition"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleSetDefinition: msRest.CompositeMapper = {
  serializedName: "ManagedRuleSetDefinition",
  type: {
    name: "Composite",
    className: "ManagedRuleSetDefinition",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      ruleSetType: {
        readOnly: true,
        serializedName: "properties.ruleSetType",
        type: {
          name: "String"
        }
      },
      ruleSetVersion: {
        readOnly: true,
        serializedName: "properties.ruleSetVersion",
        type: {
          name: "String"
        }
      },
      ruleGroups: {
        readOnly: true,
        serializedName: "properties.ruleGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleGroupDefinition"
            }
          }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const ProfileListResult: msRest.CompositeMapper = {
  serializedName: "ProfileListResult",
  type: {
    name: "Composite",
    className: "ProfileListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Profile"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceUsageListResult: msRest.CompositeMapper = {
  serializedName: "ResourceUsageListResult",
  type: {
    name: "Composite",
    className: "ResourceUsageListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceUsage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointListResult: msRest.CompositeMapper = {
  serializedName: "EndpointListResult",
  type: {
    name: "Composite",
    className: "EndpointListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Endpoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginListResult: msRest.CompositeMapper = {
  serializedName: "OriginListResult",
  type: {
    name: "Composite",
    className: "OriginListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Origin"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginGroupListResult: msRest.CompositeMapper = {
  serializedName: "OriginGroupListResult",
  type: {
    name: "Composite",
    className: "OriginGroupListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OriginGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomDomainListResult: msRest.CompositeMapper = {
  serializedName: "CustomDomainListResult",
  type: {
    name: "Composite",
    className: "CustomDomainListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomDomain"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsListResult: msRest.CompositeMapper = {
  serializedName: "OperationsListResult",
  type: {
    name: "Composite",
    className: "OperationsListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EdgenodeResult: msRest.CompositeMapper = {
  serializedName: "EdgenodeResult",
  type: {
    name: "Composite",
    className: "EdgenodeResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EdgeNode"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsagesListResult: msRest.CompositeMapper = {
  serializedName: "UsagesListResult",
  type: {
    name: "Composite",
    className: "UsagesListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDDomainListResult: msRest.CompositeMapper = {
  serializedName: "AFDDomainListResult",
  type: {
    name: "Composite",
    className: "AFDDomainListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AFDDomain"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDEndpointListResult: msRest.CompositeMapper = {
  serializedName: "AFDEndpointListResult",
  type: {
    name: "Composite",
    className: "AFDEndpointListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AFDEndpoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDOriginGroupListResult: msRest.CompositeMapper = {
  serializedName: "AFDOriginGroupListResult",
  type: {
    name: "Composite",
    className: "AFDOriginGroupListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AFDOriginGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDOriginListResult: msRest.CompositeMapper = {
  serializedName: "AFDOriginListResult",
  type: {
    name: "Composite",
    className: "AFDOriginListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AFDOrigin"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteListResult: msRest.CompositeMapper = {
  serializedName: "RouteListResult",
  type: {
    name: "Composite",
    className: "RouteListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Route"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleSetListResult: msRest.CompositeMapper = {
  serializedName: "RuleSetListResult",
  type: {
    name: "Composite",
    className: "RuleSetListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RuleSet"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleListResult: msRest.CompositeMapper = {
  serializedName: "RuleListResult",
  type: {
    name: "Composite",
    className: "RuleListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Rule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityPolicyListResult: msRest.CompositeMapper = {
  serializedName: "SecurityPolicyListResult",
  type: {
    name: "Composite",
    className: "SecurityPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretListResult: msRest.CompositeMapper = {
  serializedName: "SecretListResult",
  type: {
    name: "Composite",
    className: "SecretListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Secret"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CdnWebApplicationFirewallPolicyList: msRest.CompositeMapper = {
  serializedName: "CdnWebApplicationFirewallPolicyList",
  type: {
    name: "Composite",
    className: "CdnWebApplicationFirewallPolicyList",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CdnWebApplicationFirewallPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRuleSetDefinitionList: msRest.CompositeMapper = {
  serializedName: "ManagedRuleSetDefinitionList",
  type: {
    name: "Composite",
    className: "ManagedRuleSetDefinitionList",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleSetDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const discriminators = {
  'DeliveryRuleCondition' : DeliveryRuleCondition,
  'DeliveryRuleAction' : DeliveryRuleAction,
  'DeliveryRuleCondition.RemoteAddress' : DeliveryRuleRemoteAddressCondition,
  'DeliveryRuleCondition.RequestMethod' : DeliveryRuleRequestMethodCondition,
  'DeliveryRuleCondition.QueryString' : DeliveryRuleQueryStringCondition,
  'DeliveryRuleCondition.PostArgs' : DeliveryRulePostArgsCondition,
  'DeliveryRuleCondition.RequestUri' : DeliveryRuleRequestUriCondition,
  'DeliveryRuleCondition.RequestHeader' : DeliveryRuleRequestHeaderCondition,
  'DeliveryRuleCondition.RequestBody' : DeliveryRuleRequestBodyCondition,
  'DeliveryRuleCondition.RequestScheme' : DeliveryRuleRequestSchemeCondition,
  'DeliveryRuleCondition.UrlPath' : DeliveryRuleUrlPathCondition,
  'DeliveryRuleCondition.UrlFileExtension' : DeliveryRuleUrlFileExtensionCondition,
  'DeliveryRuleCondition.UrlFileName' : DeliveryRuleUrlFileNameCondition,
  'DeliveryRuleCondition.HttpVersion' : DeliveryRuleHttpVersionCondition,
  'DeliveryRuleCondition.Cookies' : DeliveryRuleCookiesCondition,
  'DeliveryRuleCondition.IsDevice' : DeliveryRuleIsDeviceCondition,
  'DeliveryRuleAction.UrlRedirect' : UrlRedirectAction,
  'DeliveryRuleAction.UrlSigning' : UrlSigningAction,
  'DeliveryRuleAction.OriginGroupOverride' : OriginGroupOverrideAction,
  'DeliveryRuleAction.UrlRewrite' : UrlRewriteAction,
  'DeliveryRuleAction.ModifyRequestHeader' : DeliveryRuleRequestHeaderAction,
  'DeliveryRuleAction.ModifyResponseHeader' : DeliveryRuleResponseHeaderAction,
  'DeliveryRuleAction.CacheExpiration' : DeliveryRuleCacheExpirationAction,
  'DeliveryRuleAction.CacheKeyQueryString' : DeliveryRuleCacheKeyQueryStringAction,
  'CustomDomainHttpsParameters' : CustomDomainHttpsParameters,
  'CustomDomainHttpsParameters.Cdn' : CdnManagedHttpsParameters,
  'CustomDomainHttpsParameters.AzureKeyVault' : UserManagedHttpsParameters,
  'SecurityPolicyParameters.WebApplicationFirewall' : SecurityPolicyWebApplicationFirewallParameters,
  'SecurityPolicyParameters' : SecurityPolicyParameters,
  'SecretParameters' : SecretParameters,
  'SecretParameters.UrlSigningKey' : UrlSigningKeyParameters

};
