/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const CheckEndpointNameAvailabilityInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckEndpointNameAvailabilityInput",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      autoGeneratedDomainNameLabelScope: {
        serializedName: "autoGeneratedDomainNameLabelScope",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckEndpointNameAvailabilityOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckEndpointNameAvailabilityOutput",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      availableHostname: {
        serializedName: "availableHostname",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AfdErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AfdErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const UsagesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsagesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        required: true,
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        required: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        required: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const UsageName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckHostNameAvailabilityInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckHostNameAvailabilityInput",
    modelProperties: {
      hostName: {
        serializedName: "hostName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityOutput",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDDomainListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDDomainListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AFDDomain"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainValidationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DomainValidationProperties",
    modelProperties: {
      validationToken: {
        serializedName: "validationToken",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expirationDate: {
        serializedName: "expirationDate",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDDomainUpdatePropertiesParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDDomainUpdatePropertiesParameters",
    modelProperties: {
      profileName: {
        serializedName: "profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tlsSettings: {
        serializedName: "tlsSettings",
        type: {
          name: "Composite",
          className: "AFDDomainHttpsParameters"
        }
      },
      azureDnsZone: {
        serializedName: "azureDnsZone",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      preValidatedCustomDomainResourceId: {
        serializedName: "preValidatedCustomDomainResourceId",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      }
    }
  }
};

export const AFDDomainHttpsParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDDomainHttpsParameters",
    modelProperties: {
      certificateType: {
        serializedName: "certificateType",
        required: true,
        type: {
          name: "String"
        }
      },
      minimumTlsVersion: {
        serializedName: "minimumTlsVersion",
        type: {
          name: "Enum",
          allowedValues: ["TLS10", "TLS12"]
        }
      },
      secret: {
        serializedName: "secret",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      }
    }
  }
};

export const ResourceReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceReference",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDStateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDStateProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        serializedName: "deploymentStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AFDDomainUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDDomainUpdateParameters",
    modelProperties: {
      profileName: {
        serializedName: "properties.profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tlsSettings: {
        serializedName: "properties.tlsSettings",
        type: {
          name: "Composite",
          className: "AFDDomainHttpsParameters"
        }
      },
      azureDnsZone: {
        serializedName: "properties.azureDnsZone",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      preValidatedCustomDomainResourceId: {
        serializedName: "properties.preValidatedCustomDomainResourceId",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      }
    }
  }
};

export const AFDEndpointListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDEndpointListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AFDEndpoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDEndpointPropertiesUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDEndpointPropertiesUpdateParameters",
    modelProperties: {
      profileName: {
        serializedName: "profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDEndpointUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDEndpointUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      profileName: {
        serializedName: "properties.profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AfdPurgeParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AfdPurgeParameters",
    modelProperties: {
      contentPaths: {
        serializedName: "contentPaths",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      domains: {
        serializedName: "domains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ValidateCustomDomainInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateCustomDomainInput",
    modelProperties: {
      hostName: {
        serializedName: "hostName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateCustomDomainOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateCustomDomainOutput",
    modelProperties: {
      customDomainValidated: {
        serializedName: "customDomainValidated",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDOriginGroupListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDOriginGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AFDOriginGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDOriginGroupUpdatePropertiesParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDOriginGroupUpdatePropertiesParameters",
    modelProperties: {
      profileName: {
        serializedName: "profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      loadBalancingSettings: {
        serializedName: "loadBalancingSettings",
        type: {
          name: "Composite",
          className: "LoadBalancingSettingsParameters"
        }
      },
      healthProbeSettings: {
        serializedName: "healthProbeSettings",
        type: {
          name: "Composite",
          className: "HealthProbeParameters"
        }
      },
      trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
        constraints: {
          InclusiveMaximum: 50,
          InclusiveMinimum: 0
        },
        serializedName: "trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
        type: {
          name: "Number"
        }
      },
      sessionAffinityState: {
        serializedName: "sessionAffinityState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancingSettingsParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadBalancingSettingsParameters",
    modelProperties: {
      sampleSize: {
        serializedName: "sampleSize",
        type: {
          name: "Number"
        }
      },
      successfulSamplesRequired: {
        serializedName: "successfulSamplesRequired",
        type: {
          name: "Number"
        }
      },
      additionalLatencyInMilliseconds: {
        serializedName: "additionalLatencyInMilliseconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HealthProbeParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthProbeParameters",
    modelProperties: {
      probePath: {
        serializedName: "probePath",
        type: {
          name: "String"
        }
      },
      probeRequestType: {
        serializedName: "probeRequestType",
        type: {
          name: "Enum",
          allowedValues: ["NotSet", "GET", "HEAD"]
        }
      },
      probeProtocol: {
        serializedName: "probeProtocol",
        type: {
          name: "Enum",
          allowedValues: ["NotSet", "Http", "Https"]
        }
      },
      probeIntervalInSeconds: {
        constraints: {
          InclusiveMaximum: 255,
          InclusiveMinimum: 1
        },
        serializedName: "probeIntervalInSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AFDOriginGroupUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDOriginGroupUpdateParameters",
    modelProperties: {
      profileName: {
        serializedName: "properties.profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      loadBalancingSettings: {
        serializedName: "properties.loadBalancingSettings",
        type: {
          name: "Composite",
          className: "LoadBalancingSettingsParameters"
        }
      },
      healthProbeSettings: {
        serializedName: "properties.healthProbeSettings",
        type: {
          name: "Composite",
          className: "HealthProbeParameters"
        }
      },
      trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
        constraints: {
          InclusiveMaximum: 50,
          InclusiveMinimum: 0
        },
        serializedName:
          "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
        type: {
          name: "Number"
        }
      },
      sessionAffinityState: {
        serializedName: "properties.sessionAffinityState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDOriginListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDOriginListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AFDOrigin"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDOriginUpdatePropertiesParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDOriginUpdatePropertiesParameters",
    modelProperties: {
      originGroupName: {
        serializedName: "originGroupName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azureOrigin: {
        serializedName: "azureOrigin",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      hostName: {
        serializedName: "hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "httpPort",
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "httpsPort",
        type: {
          name: "Number"
        }
      },
      originHostHeader: {
        serializedName: "originHostHeader",
        type: {
          name: "String"
        }
      },
      priority: {
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 1
        },
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      weight: {
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        serializedName: "weight",
        type: {
          name: "Number"
        }
      },
      sharedPrivateLinkResource: {
        serializedName: "sharedPrivateLinkResource",
        type: {
          name: "Composite",
          className: "SharedPrivateLinkResourceProperties"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      enforceCertificateNameCheck: {
        defaultValue: true,
        serializedName: "enforceCertificateNameCheck",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SharedPrivateLinkResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SharedPrivateLinkResourceProperties",
    modelProperties: {
      privateLink: {
        serializedName: "privateLink",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      privateLinkLocation: {
        serializedName: "privateLinkLocation",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      requestMessage: {
        serializedName: "requestMessage",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Pending",
            "Approved",
            "Rejected",
            "Disconnected",
            "Timeout"
          ]
        }
      }
    }
  }
};

export const AFDOriginUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDOriginUpdateParameters",
    modelProperties: {
      originGroupName: {
        serializedName: "properties.originGroupName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azureOrigin: {
        serializedName: "properties.azureOrigin",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "properties.httpPort",
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "properties.httpsPort",
        type: {
          name: "Number"
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      priority: {
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 1
        },
        serializedName: "properties.priority",
        type: {
          name: "Number"
        }
      },
      weight: {
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        serializedName: "properties.weight",
        type: {
          name: "Number"
        }
      },
      sharedPrivateLinkResource: {
        serializedName: "properties.sharedPrivateLinkResource",
        type: {
          name: "Composite",
          className: "SharedPrivateLinkResourceProperties"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      },
      enforceCertificateNameCheck: {
        defaultValue: true,
        serializedName: "properties.enforceCertificateNameCheck",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RouteListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Route"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteUpdatePropertiesParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteUpdatePropertiesParameters",
    modelProperties: {
      endpointName: {
        serializedName: "endpointName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customDomains: {
        serializedName: "customDomains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActivatedResourceReference"
            }
          }
        }
      },
      originGroup: {
        serializedName: "originGroup",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      originPath: {
        serializedName: "originPath",
        type: {
          name: "String"
        }
      },
      ruleSets: {
        serializedName: "ruleSets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      supportedProtocols: {
        serializedName: "supportedProtocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      patternsToMatch: {
        serializedName: "patternsToMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      cacheConfiguration: {
        serializedName: "cacheConfiguration",
        type: {
          name: "Composite",
          className: "AfdRouteCacheConfiguration"
        }
      },
      forwardingProtocol: {
        serializedName: "forwardingProtocol",
        type: {
          name: "String"
        }
      },
      linkToDefaultDomain: {
        serializedName: "linkToDefaultDomain",
        type: {
          name: "String"
        }
      },
      httpsRedirect: {
        serializedName: "httpsRedirect",
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActivatedResourceReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActivatedResourceReference",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      isActive: {
        serializedName: "isActive",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AfdRouteCacheConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AfdRouteCacheConfiguration",
    modelProperties: {
      queryStringCachingBehavior: {
        serializedName: "queryStringCachingBehavior",
        type: {
          name: "String"
        }
      },
      queryParameters: {
        serializedName: "queryParameters",
        type: {
          name: "String"
        }
      },
      compressionSettings: {
        serializedName: "compressionSettings",
        type: {
          name: "Composite",
          className: "CompressionSettings"
        }
      }
    }
  }
};

export const CompressionSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CompressionSettings",
    modelProperties: {
      contentTypesToCompress: {
        serializedName: "contentTypesToCompress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isCompressionEnabled: {
        serializedName: "isCompressionEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RouteUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteUpdateParameters",
    modelProperties: {
      endpointName: {
        serializedName: "properties.endpointName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customDomains: {
        serializedName: "properties.customDomains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActivatedResourceReference"
            }
          }
        }
      },
      originGroup: {
        serializedName: "properties.originGroup",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      originPath: {
        serializedName: "properties.originPath",
        type: {
          name: "String"
        }
      },
      ruleSets: {
        serializedName: "properties.ruleSets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      supportedProtocols: {
        serializedName: "properties.supportedProtocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      patternsToMatch: {
        serializedName: "properties.patternsToMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      cacheConfiguration: {
        serializedName: "properties.cacheConfiguration",
        type: {
          name: "Composite",
          className: "AfdRouteCacheConfiguration"
        }
      },
      forwardingProtocol: {
        serializedName: "properties.forwardingProtocol",
        type: {
          name: "String"
        }
      },
      linkToDefaultDomain: {
        serializedName: "properties.linkToDefaultDomain",
        type: {
          name: "String"
        }
      },
      httpsRedirect: {
        serializedName: "properties.httpsRedirect",
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleSetListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuleSetListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RuleSet"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Rule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleUpdatePropertiesParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuleUpdatePropertiesParameters",
    modelProperties: {
      ruleSetName: {
        serializedName: "ruleSetName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      order: {
        serializedName: "order",
        type: {
          name: "Number"
        }
      },
      conditions: {
        serializedName: "conditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleCondition"
            }
          }
        }
      },
      actions: {
        serializedName: "actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleActionAutoGenerated"
            }
          }
        }
      },
      matchProcessingBehavior: {
        serializedName: "matchProcessingBehavior",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeliveryRuleCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeliveryRuleCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator: {
      serializedName: "name",
      clientName: "name"
    },
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeliveryRuleActionAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeliveryRuleActionAutoGenerated",
    uberParent: "DeliveryRuleActionAutoGenerated",
    polymorphicDiscriminator: {
      serializedName: "name",
      clientName: "name"
    },
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuleUpdateParameters",
    modelProperties: {
      ruleSetName: {
        serializedName: "properties.ruleSetName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      order: {
        serializedName: "properties.order",
        type: {
          name: "Number"
        }
      },
      conditions: {
        serializedName: "properties.conditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleCondition"
            }
          }
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleActionAutoGenerated"
            }
          }
        }
      },
      matchProcessingBehavior: {
        serializedName: "properties.matchProcessingBehavior",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityPolicyListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityPolicyPropertiesParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityPolicyPropertiesParameters",
    uberParent: "SecurityPolicyPropertiesParameters",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityPolicyUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityPolicyUpdateParameters",
    modelProperties: {
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Composite",
          className: "SecurityPolicyPropertiesParameters"
        }
      }
    }
  }
};

export const SecretListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Secret"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretParameters",
    uberParent: "SecretParameters",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateSecretInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateSecretInput",
    modelProperties: {
      secretType: {
        serializedName: "secretType",
        required: true,
        type: {
          name: "String"
        }
      },
      secretSource: {
        serializedName: "secretSource",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      secretVersion: {
        serializedName: "secretVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateSecretOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateSecretOutput",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricsResponse",
    modelProperties: {
      dateTimeBegin: {
        serializedName: "dateTimeBegin",
        type: {
          name: "DateTime"
        }
      },
      dateTimeEnd: {
        serializedName: "dateTimeEnd",
        type: {
          name: "DateTime"
        }
      },
      granularity: {
        serializedName: "granularity",
        type: {
          name: "String"
        }
      },
      series: {
        serializedName: "series",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricsResponseSeriesItem"
            }
          }
        }
      }
    }
  }
};

export const MetricsResponseSeriesItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricsResponseSeriesItem",
    modelProperties: {
      metric: {
        serializedName: "metric",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      groups: {
        serializedName: "groups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricsResponseSeriesPropertiesItemsItem"
            }
          }
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className:
                "Components1Gs0LlpSchemasMetricsresponsePropertiesSeriesItemsPropertiesDataItems"
            }
          }
        }
      }
    }
  }
};

export const MetricsResponseSeriesPropertiesItemsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricsResponseSeriesPropertiesItemsItem",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Components1Gs0LlpSchemasMetricsresponsePropertiesSeriesItemsPropertiesDataItems: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "Components1Gs0LlpSchemasMetricsresponsePropertiesSeriesItemsPropertiesDataItems",
    modelProperties: {
      dateTime: {
        serializedName: "dateTime",
        type: {
          name: "DateTime"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RankingsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RankingsResponse",
    modelProperties: {
      dateTimeBegin: {
        serializedName: "dateTimeBegin",
        type: {
          name: "DateTime"
        }
      },
      dateTimeEnd: {
        serializedName: "dateTimeEnd",
        type: {
          name: "DateTime"
        }
      },
      tables: {
        serializedName: "tables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RankingsResponseTablesItem"
            }
          }
        }
      }
    }
  }
};

export const RankingsResponseTablesItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RankingsResponseTablesItem",
    modelProperties: {
      ranking: {
        serializedName: "ranking",
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RankingsResponseTablesPropertiesItemsItem"
            }
          }
        }
      }
    }
  }
};

export const RankingsResponseTablesPropertiesItemsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RankingsResponseTablesPropertiesItemsItem",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      metrics: {
        serializedName: "metrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RankingsResponseTablesPropertiesItemsMetricsItem"
            }
          }
        }
      }
    }
  }
};

export const RankingsResponseTablesPropertiesItemsMetricsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RankingsResponseTablesPropertiesItemsMetricsItem",
    modelProperties: {
      metric: {
        serializedName: "metric",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      },
      percentage: {
        serializedName: "percentage",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContinentsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContinentsResponse",
    modelProperties: {
      continents: {
        serializedName: "continents",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContinentsResponseContinentsItem"
            }
          }
        }
      },
      countryOrRegions: {
        serializedName: "countryOrRegions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContinentsResponseCountryOrRegionsItem"
            }
          }
        }
      }
    }
  }
};

export const ContinentsResponseContinentsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContinentsResponseContinentsItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContinentsResponseCountryOrRegionsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContinentsResponseCountryOrRegionsItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      continentId: {
        serializedName: "continentId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourcesResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourcesResponse",
    modelProperties: {
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourcesResponseEndpointsItem"
            }
          }
        }
      },
      customDomains: {
        serializedName: "customDomains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourcesResponseCustomDomainsItem"
            }
          }
        }
      }
    }
  }
};

export const ResourcesResponseEndpointsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourcesResponseEndpointsItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      history: {
        serializedName: "history",
        type: {
          name: "Boolean"
        }
      },
      customDomains: {
        serializedName: "customDomains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourcesResponseEndpointsPropertiesItemsItem"
            }
          }
        }
      }
    }
  }
};

export const ResourcesResponseEndpointsPropertiesItemsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourcesResponseEndpointsPropertiesItemsItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      endpointId: {
        serializedName: "endpointId",
        type: {
          name: "String"
        }
      },
      history: {
        serializedName: "history",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ResourcesResponseCustomDomainsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourcesResponseCustomDomainsItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      endpointId: {
        serializedName: "endpointId",
        type: {
          name: "String"
        }
      },
      history: {
        serializedName: "history",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const WafMetricsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WafMetricsResponse",
    modelProperties: {
      dateTimeBegin: {
        serializedName: "dateTimeBegin",
        type: {
          name: "DateTime"
        }
      },
      dateTimeEnd: {
        serializedName: "dateTimeEnd",
        type: {
          name: "DateTime"
        }
      },
      granularity: {
        serializedName: "granularity",
        type: {
          name: "String"
        }
      },
      series: {
        serializedName: "series",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WafMetricsResponseSeriesItem"
            }
          }
        }
      }
    }
  }
};

export const WafMetricsResponseSeriesItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WafMetricsResponseSeriesItem",
    modelProperties: {
      metric: {
        serializedName: "metric",
        type: {
          name: "String"
        }
      },
      unit: {
        defaultValue: "count",
        isConstant: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      groups: {
        serializedName: "groups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WafMetricsResponseSeriesPropertiesItemsItem"
            }
          }
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className:
                "Components18OrqelSchemasWafmetricsresponsePropertiesSeriesItemsPropertiesDataItems"
            }
          }
        }
      }
    }
  }
};

export const WafMetricsResponseSeriesPropertiesItemsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WafMetricsResponseSeriesPropertiesItemsItem",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Components18OrqelSchemasWafmetricsresponsePropertiesSeriesItemsPropertiesDataItems: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "Components18OrqelSchemasWafmetricsresponsePropertiesSeriesItemsPropertiesDataItems",
    modelProperties: {
      dateTime: {
        serializedName: "dateTime",
        type: {
          name: "DateTime"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const WafRankingsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WafRankingsResponse",
    modelProperties: {
      dateTimeBegin: {
        serializedName: "dateTimeBegin",
        type: {
          name: "DateTime"
        }
      },
      dateTimeEnd: {
        serializedName: "dateTimeEnd",
        type: {
          name: "DateTime"
        }
      },
      groups: {
        serializedName: "groups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WafRankingsResponseDataItem"
            }
          }
        }
      }
    }
  }
};

export const WafRankingsResponseDataItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WafRankingsResponseDataItem",
    modelProperties: {
      groupValues: {
        serializedName: "groupValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      metrics: {
        serializedName: "metrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className:
                "ComponentsKpo1PjSchemasWafrankingsresponsePropertiesDataItemsPropertiesMetricsItems"
            }
          }
        }
      }
    }
  }
};

export const ComponentsKpo1PjSchemasWafrankingsresponsePropertiesDataItemsPropertiesMetricsItems: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "ComponentsKpo1PjSchemasWafrankingsresponsePropertiesDataItemsPropertiesMetricsItems",
    modelProperties: {
      metric: {
        serializedName: "metric",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      },
      percentage: {
        serializedName: "percentage",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ProfileListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProfileListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Profile"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ProfileUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProfileUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      originResponseTimeoutSeconds: {
        constraints: {
          InclusiveMinimum: 16
        },
        serializedName: "properties.originResponseTimeoutSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SsoUri: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SsoUri",
    modelProperties: {
      ssoUriValue: {
        serializedName: "ssoUriValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SupportedOptimizationTypesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedOptimizationTypesListResult",
    modelProperties: {
      supportedOptimizationTypes: {
        serializedName: "supportedOptimizationTypes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ResourceUsageListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceUsageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceUsage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceUsage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceUsage",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EndpointListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Endpoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeepCreatedOrigin: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeepCreatedOrigin",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "properties.httpPort",
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "properties.httpsPort",
        type: {
          name: "Number"
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      priority: {
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 1
        },
        serializedName: "properties.priority",
        type: {
          name: "Number"
        }
      },
      weight: {
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        serializedName: "properties.weight",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      privateLinkAlias: {
        serializedName: "properties.privateLinkAlias",
        type: {
          name: "String"
        }
      },
      privateLinkResourceId: {
        serializedName: "properties.privateLinkResourceId",
        type: {
          name: "String"
        }
      },
      privateLinkLocation: {
        serializedName: "properties.privateLinkLocation",
        type: {
          name: "String"
        }
      },
      privateLinkApprovalMessage: {
        serializedName: "properties.privateLinkApprovalMessage",
        type: {
          name: "String"
        }
      },
      privateEndpointStatus: {
        serializedName: "properties.privateEndpointStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeepCreatedOriginGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeepCreatedOriginGroup",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      healthProbeSettings: {
        serializedName: "properties.healthProbeSettings",
        type: {
          name: "Composite",
          className: "HealthProbeParameters"
        }
      },
      origins: {
        serializedName: "properties.origins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
        constraints: {
          InclusiveMaximum: 50,
          InclusiveMinimum: 0
        },
        serializedName:
          "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
        type: {
          name: "Number"
        }
      },
      responseBasedOriginErrorDetectionSettings: {
        serializedName: "properties.responseBasedOriginErrorDetectionSettings",
        type: {
          name: "Composite",
          className: "ResponseBasedOriginErrorDetectionParameters"
        }
      }
    }
  }
};

export const ResponseBasedOriginErrorDetectionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResponseBasedOriginErrorDetectionParameters",
    modelProperties: {
      responseBasedDetectedErrorTypes: {
        serializedName: "responseBasedDetectedErrorTypes",
        type: {
          name: "Enum",
          allowedValues: ["None", "TcpErrorsOnly", "TcpAndHttpErrors"]
        }
      },
      responseBasedFailoverThresholdPercentage: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "responseBasedFailoverThresholdPercentage",
        type: {
          name: "Number"
        }
      },
      httpErrorRanges: {
        serializedName: "httpErrorRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HttpErrorRangeParameters"
            }
          }
        }
      }
    }
  }
};

export const HttpErrorRangeParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpErrorRangeParameters",
    modelProperties: {
      begin: {
        constraints: {
          InclusiveMaximum: 999,
          InclusiveMinimum: 100
        },
        serializedName: "begin",
        type: {
          name: "Number"
        }
      },
      end: {
        constraints: {
          InclusiveMaximum: 999,
          InclusiveMinimum: 100
        },
        serializedName: "end",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CustomDomainHttpsParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDomainHttpsParameters",
    uberParent: "CustomDomainHttpsParameters",
    polymorphicDiscriminator: {
      serializedName: "certificateSource",
      clientName: "certificateSource"
    },
    modelProperties: {
      certificateSource: {
        serializedName: "certificateSource",
        required: true,
        type: {
          name: "String"
        }
      },
      protocolType: {
        serializedName: "protocolType",
        required: true,
        type: {
          name: "String"
        }
      },
      minimumTlsVersion: {
        serializedName: "minimumTlsVersion",
        type: {
          name: "Enum",
          allowedValues: ["None", "TLS10", "TLS12"]
        }
      }
    }
  }
};

export const EndpointPropertiesUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointPropertiesUpdateParameters",
    modelProperties: {
      originPath: {
        serializedName: "originPath",
        type: {
          name: "String"
        }
      },
      contentTypesToCompress: {
        serializedName: "contentTypesToCompress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      originHostHeader: {
        serializedName: "originHostHeader",
        type: {
          name: "String"
        }
      },
      isCompressionEnabled: {
        serializedName: "isCompressionEnabled",
        type: {
          name: "Boolean"
        }
      },
      isHttpAllowed: {
        serializedName: "isHttpAllowed",
        type: {
          name: "Boolean"
        }
      },
      isHttpsAllowed: {
        serializedName: "isHttpsAllowed",
        type: {
          name: "Boolean"
        }
      },
      queryStringCachingBehavior: {
        serializedName: "queryStringCachingBehavior",
        type: {
          name: "Enum",
          allowedValues: [
            "IgnoreQueryString",
            "BypassCaching",
            "UseQueryString",
            "NotSet"
          ]
        }
      },
      optimizationType: {
        serializedName: "optimizationType",
        type: {
          name: "String"
        }
      },
      probePath: {
        serializedName: "probePath",
        type: {
          name: "String"
        }
      },
      geoFilters: {
        serializedName: "geoFilters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoFilter"
            }
          }
        }
      },
      defaultOriginGroup: {
        serializedName: "defaultOriginGroup",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      urlSigningKeys: {
        serializedName: "urlSigningKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UrlSigningKey"
            }
          }
        }
      },
      deliveryPolicy: {
        serializedName: "deliveryPolicy",
        type: {
          name: "Composite",
          className: "EndpointPropertiesUpdateParametersDeliveryPolicy"
        }
      },
      webApplicationFirewallPolicyLink: {
        serializedName: "webApplicationFirewallPolicyLink",
        type: {
          name: "Composite",
          className:
            "EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink"
        }
      }
    }
  }
};

export const GeoFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoFilter",
    modelProperties: {
      relativePath: {
        serializedName: "relativePath",
        required: true,
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Block", "Allow"]
        }
      },
      countryCodes: {
        serializedName: "countryCodes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const UrlSigningKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UrlSigningKey",
    modelProperties: {
      keyId: {
        serializedName: "keyId",
        required: true,
        type: {
          name: "String"
        }
      },
      keySourceParameters: {
        serializedName: "keySourceParameters",
        type: {
          name: "Composite",
          className: "KeyVaultSigningKeyParameters"
        }
      }
    }
  }
};

export const KeyVaultSigningKeyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultSigningKeyParameters",
    modelProperties: {
      typeName: {
        defaultValue: "KeyVaultSigningKeyParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceGroupName: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      vaultName: {
        serializedName: "vaultName",
        required: true,
        type: {
          name: "String"
        }
      },
      secretName: {
        serializedName: "secretName",
        required: true,
        type: {
          name: "String"
        }
      },
      secretVersion: {
        serializedName: "secretVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointPropertiesUpdateParametersDeliveryPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointPropertiesUpdateParametersDeliveryPolicy",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "rules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRule"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeliveryRule",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      order: {
        serializedName: "order",
        required: true,
        type: {
          name: "Number"
        }
      },
      conditions: {
        serializedName: "conditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleCondition"
            }
          }
        }
      },
      actions: {
        serializedName: "actions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleActionAutoGenerated"
            }
          }
        }
      }
    }
  }
};

export const EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      originPath: {
        serializedName: "properties.originPath",
        type: {
          name: "String"
        }
      },
      contentTypesToCompress: {
        serializedName: "properties.contentTypesToCompress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      isCompressionEnabled: {
        serializedName: "properties.isCompressionEnabled",
        type: {
          name: "Boolean"
        }
      },
      isHttpAllowed: {
        serializedName: "properties.isHttpAllowed",
        type: {
          name: "Boolean"
        }
      },
      isHttpsAllowed: {
        serializedName: "properties.isHttpsAllowed",
        type: {
          name: "Boolean"
        }
      },
      queryStringCachingBehavior: {
        serializedName: "properties.queryStringCachingBehavior",
        type: {
          name: "Enum",
          allowedValues: [
            "IgnoreQueryString",
            "BypassCaching",
            "UseQueryString",
            "NotSet"
          ]
        }
      },
      optimizationType: {
        serializedName: "properties.optimizationType",
        type: {
          name: "String"
        }
      },
      probePath: {
        serializedName: "properties.probePath",
        type: {
          name: "String"
        }
      },
      geoFilters: {
        serializedName: "properties.geoFilters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoFilter"
            }
          }
        }
      },
      defaultOriginGroup: {
        serializedName: "properties.defaultOriginGroup",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      urlSigningKeys: {
        serializedName: "properties.urlSigningKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UrlSigningKey"
            }
          }
        }
      },
      deliveryPolicy: {
        serializedName: "properties.deliveryPolicy",
        type: {
          name: "Composite",
          className: "EndpointPropertiesUpdateParametersDeliveryPolicy"
        }
      },
      webApplicationFirewallPolicyLink: {
        serializedName: "properties.webApplicationFirewallPolicyLink",
        type: {
          name: "Composite",
          className:
            "EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink"
        }
      }
    }
  }
};

export const PurgeParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PurgeParameters",
    modelProperties: {
      contentPaths: {
        serializedName: "contentPaths",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const LoadParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoadParameters",
    modelProperties: {
      contentPaths: {
        serializedName: "contentPaths",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OriginListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OriginListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Origin"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginUpdatePropertiesParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OriginUpdatePropertiesParameters",
    modelProperties: {
      hostName: {
        serializedName: "hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "httpPort",
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "httpsPort",
        type: {
          name: "Number"
        }
      },
      originHostHeader: {
        serializedName: "originHostHeader",
        type: {
          name: "String"
        }
      },
      priority: {
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 1
        },
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      weight: {
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        serializedName: "weight",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      privateLinkAlias: {
        serializedName: "privateLinkAlias",
        type: {
          name: "String"
        }
      },
      privateLinkResourceId: {
        serializedName: "privateLinkResourceId",
        type: {
          name: "String"
        }
      },
      privateLinkLocation: {
        serializedName: "privateLinkLocation",
        type: {
          name: "String"
        }
      },
      privateLinkApprovalMessage: {
        serializedName: "privateLinkApprovalMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OriginUpdateParameters",
    modelProperties: {
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "properties.httpPort",
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "properties.httpsPort",
        type: {
          name: "Number"
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      priority: {
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 1
        },
        serializedName: "properties.priority",
        type: {
          name: "Number"
        }
      },
      weight: {
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        serializedName: "properties.weight",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      privateLinkAlias: {
        serializedName: "properties.privateLinkAlias",
        type: {
          name: "String"
        }
      },
      privateLinkResourceId: {
        serializedName: "properties.privateLinkResourceId",
        type: {
          name: "String"
        }
      },
      privateLinkLocation: {
        serializedName: "properties.privateLinkLocation",
        type: {
          name: "String"
        }
      },
      privateLinkApprovalMessage: {
        serializedName: "properties.privateLinkApprovalMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginGroupListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OriginGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OriginGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginGroupUpdatePropertiesParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OriginGroupUpdatePropertiesParameters",
    modelProperties: {
      healthProbeSettings: {
        serializedName: "healthProbeSettings",
        type: {
          name: "Composite",
          className: "HealthProbeParameters"
        }
      },
      origins: {
        serializedName: "origins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
        constraints: {
          InclusiveMaximum: 50,
          InclusiveMinimum: 0
        },
        serializedName: "trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
        type: {
          name: "Number"
        }
      },
      responseBasedOriginErrorDetectionSettings: {
        serializedName: "responseBasedOriginErrorDetectionSettings",
        type: {
          name: "Composite",
          className: "ResponseBasedOriginErrorDetectionParameters"
        }
      }
    }
  }
};

export const OriginGroupUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OriginGroupUpdateParameters",
    modelProperties: {
      healthProbeSettings: {
        serializedName: "properties.healthProbeSettings",
        type: {
          name: "Composite",
          className: "HealthProbeParameters"
        }
      },
      origins: {
        serializedName: "properties.origins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
        constraints: {
          InclusiveMaximum: 50,
          InclusiveMinimum: 0
        },
        serializedName:
          "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
        type: {
          name: "Number"
        }
      },
      responseBasedOriginErrorDetectionSettings: {
        serializedName: "properties.responseBasedOriginErrorDetectionSettings",
        type: {
          name: "Composite",
          className: "ResponseBasedOriginErrorDetectionParameters"
        }
      }
    }
  }
};

export const CustomDomainListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDomainListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomDomain"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomDomainParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDomainParameters",
    modelProperties: {
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityInput",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateProbeInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateProbeInput",
    modelProperties: {
      probeURL: {
        serializedName: "probeURL",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateProbeOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateProbeOutput",
    modelProperties: {
      isValid: {
        serializedName: "isValid",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogSpecification"
            }
          }
        }
      },
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSpecification"
            }
          }
        }
      }
    }
  }
};

export const LogSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      },
      logFilterPattern: {
        serializedName: "logFilterPattern",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      availabilities: {
        serializedName: "availabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailability"
            }
          }
        }
      },
      supportedTimeGrainTypes: {
        serializedName: "supportedTimeGrainTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DimensionProperties"
            }
          }
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      metricFilterPattern: {
        serializedName: "metricFilterPattern",
        type: {
          name: "String"
        }
      },
      isInternal: {
        serializedName: "isInternal",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MetricAvailability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DimensionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DimensionProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      internalName: {
        serializedName: "internalName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EdgenodeResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EdgenodeResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EdgeNode"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpAddressGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpAddressGroup",
    modelProperties: {
      deliveryRegion: {
        serializedName: "deliveryRegion",
        type: {
          name: "String"
        }
      },
      ipv4Addresses: {
        serializedName: "ipv4Addresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CidrIpAddress"
            }
          }
        }
      },
      ipv6Addresses: {
        serializedName: "ipv6Addresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CidrIpAddress"
            }
          }
        }
      }
    }
  }
};

export const CidrIpAddress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CidrIpAddress",
    modelProperties: {
      baseIpAddress: {
        serializedName: "baseIpAddress",
        type: {
          name: "String"
        }
      },
      prefixLength: {
        serializedName: "prefixLength",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CdnWebApplicationFirewallPolicyList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CdnWebApplicationFirewallPolicyList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CdnWebApplicationFirewallPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicySettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicySettings",
    modelProperties: {
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      defaultRedirectUrl: {
        serializedName: "defaultRedirectUrl",
        type: {
          name: "String"
        }
      },
      defaultCustomBlockResponseStatusCode: {
        serializedName: "defaultCustomBlockResponseStatusCode",
        type: {
          name: "Number"
        }
      },
      defaultCustomBlockResponseBody: {
        constraints: {
          Pattern: new RegExp(
            "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
          )
        },
        serializedName: "defaultCustomBlockResponseBody",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RateLimitRuleList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RateLimitRuleList",
    modelProperties: {
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RateLimitRule"
            }
          }
        }
      }
    }
  }
};

export const CustomRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomRule",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      priority: {
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 0
        },
        serializedName: "priority",
        required: true,
        type: {
          name: "Number"
        }
      },
      matchConditions: {
        serializedName: "matchConditions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MatchCondition"
            }
          }
        }
      },
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MatchCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MatchCondition",
    modelProperties: {
      matchVariable: {
        serializedName: "matchVariable",
        required: true,
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValue: {
        serializedName: "matchValue",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CustomRuleList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomRuleList",
    modelProperties: {
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomRule"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleSetList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleSetList",
    modelProperties: {
      managedRuleSets: {
        serializedName: "managedRuleSets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleSet"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleSet",
    modelProperties: {
      ruleSetType: {
        serializedName: "ruleSetType",
        required: true,
        type: {
          name: "String"
        }
      },
      ruleSetVersion: {
        serializedName: "ruleSetVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      anomalyScore: {
        constraints: {
          InclusiveMaximum: 20,
          InclusiveMinimum: 0
        },
        serializedName: "anomalyScore",
        type: {
          name: "Number"
        }
      },
      ruleGroupOverrides: {
        serializedName: "ruleGroupOverrides",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleGroupOverride"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleGroupOverride: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleGroupOverride",
    modelProperties: {
      ruleGroupName: {
        serializedName: "ruleGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleOverride"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleOverride: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleOverride",
    modelProperties: {
      ruleId: {
        serializedName: "ruleId",
        required: true,
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CdnEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CdnEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CdnWebApplicationFirewallPolicyPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CdnWebApplicationFirewallPolicyPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ManagedRuleSetDefinitionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleSetDefinitionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleSetDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRuleGroupDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleGroupDefinition",
    modelProperties: {
      ruleGroupName: {
        serializedName: "ruleGroupName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "rules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleDefinition"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleDefinition",
    modelProperties: {
      ruleId: {
        serializedName: "ruleId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Certificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Certificate",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      subject: {
        serializedName: "subject",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expirationDate: {
        serializedName: "expirationDate",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityPolicyWebApplicationFirewallAssociation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityPolicyWebApplicationFirewallAssociation",
    modelProperties: {
      domains: {
        serializedName: "domains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActivatedResourceReference"
            }
          }
        }
      },
      patternsToMatch: {
        serializedName: "patternsToMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ValidationToken: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidationToken",
    modelProperties: {
      token: {
        serializedName: "token",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RemoteAddressMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoteAddressMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleRemoteAddressConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RequestMethodMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RequestMethodMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleRequestMethodConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const QueryStringMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryStringMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleQueryStringConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PostArgsMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PostArgsMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRulePostArgsConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RequestUriMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RequestUriMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleRequestUriConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RequestHeaderMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RequestHeaderMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleRequestHeaderConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RequestBodyMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RequestBodyMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleRequestBodyConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RequestSchemeMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RequestSchemeMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleRequestSchemeConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        defaultValue: "Equal",
        isConstant: true,
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const UrlPathMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UrlPathMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleUrlPathMatchConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const UrlFileExtensionMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UrlFileExtensionMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleUrlFileExtensionMatchConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const UrlFileNameMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UrlFileNameMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleUrlFilenameConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const HttpVersionMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpVersionMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleHttpVersionConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CookiesMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CookiesMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleCookiesConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IsDeviceMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IsDeviceMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleIsDeviceConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SocketAddrMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SocketAddrMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleSocketAddrConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ClientPortMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientPortMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleClientPortConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ServerPortMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerPortMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleServerPortConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const HostNameMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HostNameMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleHostNameConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SslProtocolMatchConditionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SslProtocolMatchConditionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleSslProtocolConditionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValues: {
        serializedName: "matchValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const UrlRedirectActionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UrlRedirectActionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleUrlRedirectActionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      redirectType: {
        serializedName: "redirectType",
        required: true,
        type: {
          name: "String"
        }
      },
      destinationProtocol: {
        serializedName: "destinationProtocol",
        type: {
          name: "String"
        }
      },
      customPath: {
        serializedName: "customPath",
        type: {
          name: "String"
        }
      },
      customHostname: {
        serializedName: "customHostname",
        type: {
          name: "String"
        }
      },
      customQueryString: {
        serializedName: "customQueryString",
        type: {
          name: "String"
        }
      },
      customFragment: {
        serializedName: "customFragment",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UrlSigningActionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UrlSigningActionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleUrlSigningActionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      algorithm: {
        serializedName: "algorithm",
        type: {
          name: "String"
        }
      },
      parameterNameOverride: {
        serializedName: "parameterNameOverride",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UrlSigningParamIdentifier"
            }
          }
        }
      }
    }
  }
};

export const UrlSigningParamIdentifier: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UrlSigningParamIdentifier",
    modelProperties: {
      paramIndicator: {
        serializedName: "paramIndicator",
        required: true,
        type: {
          name: "String"
        }
      },
      paramName: {
        serializedName: "paramName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginGroupOverrideActionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OriginGroupOverrideActionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleOriginGroupOverrideActionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      originGroup: {
        serializedName: "originGroup",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      }
    }
  }
};

export const UrlRewriteActionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UrlRewriteActionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleUrlRewriteActionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      sourcePattern: {
        serializedName: "sourcePattern",
        required: true,
        type: {
          name: "String"
        }
      },
      destination: {
        serializedName: "destination",
        required: true,
        type: {
          name: "String"
        }
      },
      preserveUnmatchedPath: {
        serializedName: "preserveUnmatchedPath",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const HeaderActionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HeaderActionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleHeaderActionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      headerAction: {
        serializedName: "headerAction",
        required: true,
        type: {
          name: "String"
        }
      },
      headerName: {
        serializedName: "headerName",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CacheExpirationActionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CacheExpirationActionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleCacheExpirationActionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      cacheBehavior: {
        serializedName: "cacheBehavior",
        required: true,
        type: {
          name: "String"
        }
      },
      cacheType: {
        serializedName: "cacheType",
        required: true,
        type: {
          name: "String"
        }
      },
      cacheDuration: {
        serializedName: "cacheDuration",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CacheKeyQueryStringActionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CacheKeyQueryStringActionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleCacheKeyQueryStringBehaviorActionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      queryStringBehavior: {
        serializedName: "queryStringBehavior",
        required: true,
        type: {
          name: "String"
        }
      },
      queryParameters: {
        serializedName: "queryParameters",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteConfigurationOverrideActionParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteConfigurationOverrideActionParameters",
    modelProperties: {
      typeName: {
        defaultValue: "DeliveryRuleRouteConfigurationOverrideActionParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      originGroupOverride: {
        serializedName: "originGroupOverride",
        type: {
          name: "Composite",
          className: "OriginGroupOverride"
        }
      },
      cacheConfiguration: {
        serializedName: "cacheConfiguration",
        type: {
          name: "Composite",
          className: "CacheConfiguration"
        }
      }
    }
  }
};

export const OriginGroupOverride: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OriginGroupOverride",
    modelProperties: {
      originGroup: {
        serializedName: "originGroup",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      forwardingProtocol: {
        serializedName: "forwardingProtocol",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CacheConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CacheConfiguration",
    modelProperties: {
      queryStringCachingBehavior: {
        serializedName: "queryStringCachingBehavior",
        type: {
          name: "String"
        }
      },
      queryParameters: {
        serializedName: "queryParameters",
        type: {
          name: "String"
        }
      },
      isCompressionEnabled: {
        serializedName: "isCompressionEnabled",
        type: {
          name: "String"
        }
      },
      cacheBehavior: {
        serializedName: "cacheBehavior",
        type: {
          name: "String"
        }
      },
      cacheDuration: {
        serializedName: "cacheDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CdnCertificateSourceParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CdnCertificateSourceParameters",
    modelProperties: {
      typeName: {
        defaultValue: "CdnCertificateSourceParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      certificateType: {
        serializedName: "certificateType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultCertificateSourceParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultCertificateSourceParameters",
    modelProperties: {
      typeName: {
        defaultValue: "KeyVaultCertificateSourceParameters",
        isConstant: true,
        serializedName: "typeName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceGroupName: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
          name: "String"
        }
      },
      vaultName: {
        serializedName: "vaultName",
        required: true,
        type: {
          name: "String"
        }
      },
      secretName: {
        serializedName: "secretName",
        required: true,
        type: {
          name: "String"
        }
      },
      secretVersion: {
        serializedName: "secretVersion",
        type: {
          name: "String"
        }
      },
      updateRule: {
        serializedName: "updateRule",
        required: true,
        type: {
          name: "String"
        }
      },
      deleteRule: {
        serializedName: "deleteRule",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDDomainProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDDomainProperties",
    modelProperties: {
      ...AFDDomainUpdatePropertiesParameters.type.modelProperties,
      ...AFDStateProperties.type.modelProperties,
      domainValidationState: {
        serializedName: "domainValidationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        required: true,
        type: {
          name: "String"
        }
      },
      validationProperties: {
        serializedName: "validationProperties",
        type: {
          name: "Composite",
          className: "DomainValidationProperties"
        }
      }
    }
  }
};

export const AFDEndpointProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDEndpointProperties",
    modelProperties: {
      ...AFDEndpointPropertiesUpdateParameters.type.modelProperties,
      ...AFDStateProperties.type.modelProperties,
      hostName: {
        serializedName: "hostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      autoGeneratedDomainNameLabelScope: {
        serializedName: "autoGeneratedDomainNameLabelScope",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDOriginGroupProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDOriginGroupProperties",
    modelProperties: {
      ...AFDOriginGroupUpdatePropertiesParameters.type.modelProperties,
      ...AFDStateProperties.type.modelProperties
    }
  }
};

export const AFDOriginProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDOriginProperties",
    modelProperties: {
      ...AFDOriginUpdatePropertiesParameters.type.modelProperties,
      ...AFDStateProperties.type.modelProperties
    }
  }
};

export const RouteProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteProperties",
    modelProperties: {
      ...RouteUpdatePropertiesParameters.type.modelProperties,
      ...AFDStateProperties.type.modelProperties
    }
  }
};

export const RuleSetProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuleSetProperties",
    modelProperties: {
      ...AFDStateProperties.type.modelProperties,
      profileName: {
        serializedName: "profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuleProperties",
    modelProperties: {
      ...RuleUpdatePropertiesParameters.type.modelProperties,
      ...AFDStateProperties.type.modelProperties
    }
  }
};

export const SecurityPolicyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityPolicyProperties",
    modelProperties: {
      ...AFDStateProperties.type.modelProperties,
      profileName: {
        serializedName: "profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "SecurityPolicyPropertiesParameters"
        }
      }
    }
  }
};

export const SecretProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretProperties",
    modelProperties: {
      ...AFDStateProperties.type.modelProperties,
      profileName: {
        serializedName: "profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "SecretParameters"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ManagedRuleSetDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedRuleSetDefinition",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ruleSetType: {
        serializedName: "properties.ruleSetType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ruleSetVersion: {
        serializedName: "properties.ruleSetVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ruleGroups: {
        serializedName: "properties.ruleGroups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleGroupDefinition"
            }
          }
        }
      }
    }
  }
};

export const DeliveryRuleRemoteAddressCondition: coreClient.CompositeMapper = {
  serializedName: "RemoteAddress",
  type: {
    name: "Composite",
    className: "DeliveryRuleRemoteAddressCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "RemoteAddressMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleRequestMethodCondition: coreClient.CompositeMapper = {
  serializedName: "RequestMethod",
  type: {
    name: "Composite",
    className: "DeliveryRuleRequestMethodCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "RequestMethodMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleQueryStringCondition: coreClient.CompositeMapper = {
  serializedName: "QueryString",
  type: {
    name: "Composite",
    className: "DeliveryRuleQueryStringCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "QueryStringMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRulePostArgsCondition: coreClient.CompositeMapper = {
  serializedName: "PostArgs",
  type: {
    name: "Composite",
    className: "DeliveryRulePostArgsCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "PostArgsMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleRequestUriCondition: coreClient.CompositeMapper = {
  serializedName: "RequestUri",
  type: {
    name: "Composite",
    className: "DeliveryRuleRequestUriCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "RequestUriMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleRequestHeaderCondition: coreClient.CompositeMapper = {
  serializedName: "RequestHeader",
  type: {
    name: "Composite",
    className: "DeliveryRuleRequestHeaderCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "RequestHeaderMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleRequestBodyCondition: coreClient.CompositeMapper = {
  serializedName: "RequestBody",
  type: {
    name: "Composite",
    className: "DeliveryRuleRequestBodyCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "RequestBodyMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleRequestSchemeCondition: coreClient.CompositeMapper = {
  serializedName: "RequestScheme",
  type: {
    name: "Composite",
    className: "DeliveryRuleRequestSchemeCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "RequestSchemeMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleUrlPathCondition: coreClient.CompositeMapper = {
  serializedName: "UrlPath",
  type: {
    name: "Composite",
    className: "DeliveryRuleUrlPathCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "UrlPathMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleUrlFileExtensionCondition: coreClient.CompositeMapper = {
  serializedName: "UrlFileExtension",
  type: {
    name: "Composite",
    className: "DeliveryRuleUrlFileExtensionCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "UrlFileExtensionMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleUrlFileNameCondition: coreClient.CompositeMapper = {
  serializedName: "UrlFileName",
  type: {
    name: "Composite",
    className: "DeliveryRuleUrlFileNameCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "UrlFileNameMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleHttpVersionCondition: coreClient.CompositeMapper = {
  serializedName: "HttpVersion",
  type: {
    name: "Composite",
    className: "DeliveryRuleHttpVersionCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "HttpVersionMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleCookiesCondition: coreClient.CompositeMapper = {
  serializedName: "Cookies",
  type: {
    name: "Composite",
    className: "DeliveryRuleCookiesCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "CookiesMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleIsDeviceCondition: coreClient.CompositeMapper = {
  serializedName: "IsDevice",
  type: {
    name: "Composite",
    className: "DeliveryRuleIsDeviceCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "IsDeviceMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleSocketAddrCondition: coreClient.CompositeMapper = {
  serializedName: "SocketAddr",
  type: {
    name: "Composite",
    className: "DeliveryRuleSocketAddrCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "SocketAddrMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleClientPortCondition: coreClient.CompositeMapper = {
  serializedName: "ClientPort",
  type: {
    name: "Composite",
    className: "DeliveryRuleClientPortCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "ClientPortMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleServerPortCondition: coreClient.CompositeMapper = {
  serializedName: "ServerPort",
  type: {
    name: "Composite",
    className: "DeliveryRuleServerPortCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "ServerPortMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleHostNameCondition: coreClient.CompositeMapper = {
  serializedName: "HostName",
  type: {
    name: "Composite",
    className: "DeliveryRuleHostNameCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "HostNameMatchConditionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleSslProtocolCondition: coreClient.CompositeMapper = {
  serializedName: "SslProtocol",
  type: {
    name: "Composite",
    className: "DeliveryRuleSslProtocolCondition",
    uberParent: "DeliveryRuleCondition",
    polymorphicDiscriminator:
      DeliveryRuleCondition.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleCondition.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "SslProtocolMatchConditionParameters"
        }
      }
    }
  }
};

export const UrlRedirectAction: coreClient.CompositeMapper = {
  serializedName: "UrlRedirect",
  type: {
    name: "Composite",
    className: "UrlRedirectAction",
    uberParent: "DeliveryRuleActionAutoGenerated",
    polymorphicDiscriminator:
      DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleActionAutoGenerated.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "UrlRedirectActionParameters"
        }
      }
    }
  }
};

export const UrlSigningAction: coreClient.CompositeMapper = {
  serializedName: "UrlSigning",
  type: {
    name: "Composite",
    className: "UrlSigningAction",
    uberParent: "DeliveryRuleActionAutoGenerated",
    polymorphicDiscriminator:
      DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleActionAutoGenerated.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "UrlSigningActionParameters"
        }
      }
    }
  }
};

export const OriginGroupOverrideAction: coreClient.CompositeMapper = {
  serializedName: "OriginGroupOverride",
  type: {
    name: "Composite",
    className: "OriginGroupOverrideAction",
    uberParent: "DeliveryRuleActionAutoGenerated",
    polymorphicDiscriminator:
      DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleActionAutoGenerated.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "OriginGroupOverrideActionParameters"
        }
      }
    }
  }
};

export const UrlRewriteAction: coreClient.CompositeMapper = {
  serializedName: "UrlRewrite",
  type: {
    name: "Composite",
    className: "UrlRewriteAction",
    uberParent: "DeliveryRuleActionAutoGenerated",
    polymorphicDiscriminator:
      DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleActionAutoGenerated.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "UrlRewriteActionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleRequestHeaderAction: coreClient.CompositeMapper = {
  serializedName: "ModifyRequestHeader",
  type: {
    name: "Composite",
    className: "DeliveryRuleRequestHeaderAction",
    uberParent: "DeliveryRuleActionAutoGenerated",
    polymorphicDiscriminator:
      DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleActionAutoGenerated.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "HeaderActionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleResponseHeaderAction: coreClient.CompositeMapper = {
  serializedName: "ModifyResponseHeader",
  type: {
    name: "Composite",
    className: "DeliveryRuleResponseHeaderAction",
    uberParent: "DeliveryRuleActionAutoGenerated",
    polymorphicDiscriminator:
      DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleActionAutoGenerated.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "HeaderActionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleCacheExpirationAction: coreClient.CompositeMapper = {
  serializedName: "CacheExpiration",
  type: {
    name: "Composite",
    className: "DeliveryRuleCacheExpirationAction",
    uberParent: "DeliveryRuleActionAutoGenerated",
    polymorphicDiscriminator:
      DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleActionAutoGenerated.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "CacheExpirationActionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleCacheKeyQueryStringAction: coreClient.CompositeMapper = {
  serializedName: "CacheKeyQueryString",
  type: {
    name: "Composite",
    className: "DeliveryRuleCacheKeyQueryStringAction",
    uberParent: "DeliveryRuleActionAutoGenerated",
    polymorphicDiscriminator:
      DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleActionAutoGenerated.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "CacheKeyQueryStringActionParameters"
        }
      }
    }
  }
};

export const DeliveryRuleRouteConfigurationOverrideAction: coreClient.CompositeMapper = {
  serializedName: "RouteConfigurationOverride",
  type: {
    name: "Composite",
    className: "DeliveryRuleRouteConfigurationOverrideAction",
    uberParent: "DeliveryRuleActionAutoGenerated",
    polymorphicDiscriminator:
      DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeliveryRuleActionAutoGenerated.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "RouteConfigurationOverrideActionParameters"
        }
      }
    }
  }
};

export const SecurityPolicyWebApplicationFirewallParameters: coreClient.CompositeMapper = {
  serializedName: "WebApplicationFirewall",
  type: {
    name: "Composite",
    className: "SecurityPolicyWebApplicationFirewallParameters",
    uberParent: "SecurityPolicyPropertiesParameters",
    polymorphicDiscriminator:
      SecurityPolicyPropertiesParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...SecurityPolicyPropertiesParameters.type.modelProperties,
      wafPolicy: {
        serializedName: "wafPolicy",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      associations: {
        serializedName: "associations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecurityPolicyWebApplicationFirewallAssociation"
            }
          }
        }
      }
    }
  }
};

export const UrlSigningKeyParameters: coreClient.CompositeMapper = {
  serializedName: "UrlSigningKey",
  type: {
    name: "Composite",
    className: "UrlSigningKeyParameters",
    uberParent: "SecretParameters",
    polymorphicDiscriminator: SecretParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...SecretParameters.type.modelProperties,
      keyId: {
        serializedName: "keyId",
        required: true,
        type: {
          name: "String"
        }
      },
      secretSource: {
        serializedName: "secretSource",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      secretVersion: {
        serializedName: "secretVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedCertificateParameters: coreClient.CompositeMapper = {
  serializedName: "ManagedCertificate",
  type: {
    name: "Composite",
    className: "ManagedCertificateParameters",
    uberParent: "SecretParameters",
    polymorphicDiscriminator: SecretParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...SecretParameters.type.modelProperties,
      subject: {
        serializedName: "subject",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expirationDate: {
        serializedName: "expirationDate",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomerCertificateParameters: coreClient.CompositeMapper = {
  serializedName: "CustomerCertificate",
  type: {
    name: "Composite",
    className: "CustomerCertificateParameters",
    uberParent: "SecretParameters",
    polymorphicDiscriminator: SecretParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...SecretParameters.type.modelProperties,
      secretSource: {
        serializedName: "secretSource",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      secretVersion: {
        serializedName: "secretVersion",
        type: {
          name: "String"
        }
      },
      useLatestVersion: {
        serializedName: "useLatestVersion",
        type: {
          name: "Boolean"
        }
      },
      subject: {
        serializedName: "subject",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expirationDate: {
        serializedName: "expirationDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      certificateAuthority: {
        serializedName: "certificateAuthority",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subjectAlternativeNames: {
        serializedName: "subjectAlternativeNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirstPartyManagedCertificateParameters: coreClient.CompositeMapper = {
  serializedName: "AzureFirstPartyManagedCertificate",
  type: {
    name: "Composite",
    className: "AzureFirstPartyManagedCertificateParameters",
    uberParent: "SecretParameters",
    polymorphicDiscriminator: SecretParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...SecretParameters.type.modelProperties
    }
  }
};

export const CdnManagedHttpsParameters: coreClient.CompositeMapper = {
  serializedName: "Cdn",
  type: {
    name: "Composite",
    className: "CdnManagedHttpsParameters",
    uberParent: "CustomDomainHttpsParameters",
    polymorphicDiscriminator:
      CustomDomainHttpsParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...CustomDomainHttpsParameters.type.modelProperties,
      certificateSourceParameters: {
        serializedName: "certificateSourceParameters",
        type: {
          name: "Composite",
          className: "CdnCertificateSourceParameters"
        }
      }
    }
  }
};

export const UserManagedHttpsParameters: coreClient.CompositeMapper = {
  serializedName: "AzureKeyVault",
  type: {
    name: "Composite",
    className: "UserManagedHttpsParameters",
    uberParent: "CustomDomainHttpsParameters",
    polymorphicDiscriminator:
      CustomDomainHttpsParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...CustomDomainHttpsParameters.type.modelProperties,
      certificateSourceParameters: {
        serializedName: "certificateSourceParameters",
        type: {
          name: "Composite",
          className: "KeyVaultCertificateSourceParameters"
        }
      }
    }
  }
};

export const EndpointProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointProperties",
    modelProperties: {
      ...EndpointPropertiesUpdateParameters.type.modelProperties,
      hostName: {
        serializedName: "hostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      origins: {
        serializedName: "origins",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeepCreatedOrigin"
            }
          }
        }
      },
      originGroups: {
        serializedName: "originGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeepCreatedOriginGroup"
            }
          }
        }
      },
      customDomains: {
        serializedName: "customDomains",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomDomain"
            }
          }
        }
      },
      resourceState: {
        serializedName: "resourceState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OriginProperties",
    modelProperties: {
      ...OriginUpdatePropertiesParameters.type.modelProperties,
      resourceState: {
        serializedName: "resourceState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateEndpointStatus: {
        serializedName: "privateEndpointStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginGroupProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OriginGroupProperties",
    modelProperties: {
      ...OriginGroupUpdatePropertiesParameters.type.modelProperties,
      resourceState: {
        serializedName: "resourceState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RateLimitRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RateLimitRule",
    modelProperties: {
      ...CustomRule.type.modelProperties,
      rateLimitThreshold: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "rateLimitThreshold",
        required: true,
        type: {
          name: "Number"
        }
      },
      rateLimitDurationInMinutes: {
        constraints: {
          InclusiveMaximum: 60,
          InclusiveMinimum: 0
        },
        serializedName: "rateLimitDurationInMinutes",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedCertificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedCertificate",
    modelProperties: {
      ...Certificate.type.modelProperties
    }
  }
};

export const CustomerCertificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomerCertificate",
    modelProperties: {
      ...Certificate.type.modelProperties,
      secretSource: {
        serializedName: "secretSource",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      secretVersion: {
        serializedName: "secretVersion",
        type: {
          name: "String"
        }
      },
      certificateAuthority: {
        serializedName: "certificateAuthority",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      useLatestVersion: {
        serializedName: "useLatestVersion",
        type: {
          name: "Boolean"
        }
      },
      subjectAlternativeNames: {
        serializedName: "subjectAlternativeNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFirstPartyManagedCertificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFirstPartyManagedCertificate",
    modelProperties: {
      ...Certificate.type.modelProperties
    }
  }
};

export const AFDDomain: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDDomain",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      profileName: {
        serializedName: "properties.profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tlsSettings: {
        serializedName: "properties.tlsSettings",
        type: {
          name: "Composite",
          className: "AFDDomainHttpsParameters"
        }
      },
      azureDnsZone: {
        serializedName: "properties.azureDnsZone",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      preValidatedCustomDomainResourceId: {
        serializedName: "properties.preValidatedCustomDomainResourceId",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        serializedName: "properties.deploymentStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      domainValidationState: {
        serializedName: "properties.domainValidationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      validationProperties: {
        serializedName: "properties.validationProperties",
        type: {
          name: "Composite",
          className: "DomainValidationProperties"
        }
      }
    }
  }
};

export const AFDOriginGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDOriginGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      profileName: {
        serializedName: "properties.profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      loadBalancingSettings: {
        serializedName: "properties.loadBalancingSettings",
        type: {
          name: "Composite",
          className: "LoadBalancingSettingsParameters"
        }
      },
      healthProbeSettings: {
        serializedName: "properties.healthProbeSettings",
        type: {
          name: "Composite",
          className: "HealthProbeParameters"
        }
      },
      trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
        constraints: {
          InclusiveMaximum: 50,
          InclusiveMinimum: 0
        },
        serializedName:
          "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
        type: {
          name: "Number"
        }
      },
      sessionAffinityState: {
        serializedName: "properties.sessionAffinityState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        serializedName: "properties.deploymentStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AFDOrigin: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDOrigin",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      originGroupName: {
        serializedName: "properties.originGroupName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azureOrigin: {
        serializedName: "properties.azureOrigin",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "properties.httpPort",
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "properties.httpsPort",
        type: {
          name: "Number"
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      priority: {
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 1
        },
        serializedName: "properties.priority",
        type: {
          name: "Number"
        }
      },
      weight: {
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        serializedName: "properties.weight",
        type: {
          name: "Number"
        }
      },
      sharedPrivateLinkResource: {
        serializedName: "properties.sharedPrivateLinkResource",
        type: {
          name: "Composite",
          className: "SharedPrivateLinkResourceProperties"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      },
      enforceCertificateNameCheck: {
        defaultValue: true,
        serializedName: "properties.enforceCertificateNameCheck",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        serializedName: "properties.deploymentStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Route: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Route",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      endpointName: {
        serializedName: "properties.endpointName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customDomains: {
        serializedName: "properties.customDomains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ActivatedResourceReference"
            }
          }
        }
      },
      originGroup: {
        serializedName: "properties.originGroup",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      originPath: {
        serializedName: "properties.originPath",
        type: {
          name: "String"
        }
      },
      ruleSets: {
        serializedName: "properties.ruleSets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      supportedProtocols: {
        serializedName: "properties.supportedProtocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      patternsToMatch: {
        serializedName: "properties.patternsToMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      cacheConfiguration: {
        serializedName: "properties.cacheConfiguration",
        type: {
          name: "Composite",
          className: "AfdRouteCacheConfiguration"
        }
      },
      forwardingProtocol: {
        serializedName: "properties.forwardingProtocol",
        type: {
          name: "String"
        }
      },
      linkToDefaultDomain: {
        serializedName: "properties.linkToDefaultDomain",
        type: {
          name: "String"
        }
      },
      httpsRedirect: {
        serializedName: "properties.httpsRedirect",
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        serializedName: "properties.deploymentStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuleSet",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        serializedName: "properties.deploymentStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      profileName: {
        serializedName: "properties.profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Rule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Rule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      ruleSetName: {
        serializedName: "properties.ruleSetName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      order: {
        serializedName: "properties.order",
        type: {
          name: "Number"
        }
      },
      conditions: {
        serializedName: "properties.conditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleCondition"
            }
          }
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryRuleActionAutoGenerated"
            }
          }
        }
      },
      matchProcessingBehavior: {
        serializedName: "properties.matchProcessingBehavior",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        serializedName: "properties.deploymentStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecurityPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecurityPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        serializedName: "properties.deploymentStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      profileName: {
        serializedName: "properties.profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Composite",
          className: "SecurityPolicyPropertiesParameters"
        }
      }
    }
  }
};

export const Secret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Secret",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        serializedName: "properties.deploymentStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      profileName: {
        serializedName: "properties.profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Composite",
          className: "SecretParameters"
        }
      }
    }
  }
};

export const CustomDomain: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDomain",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customHttpsProvisioningState: {
        serializedName: "properties.customHttpsProvisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customHttpsProvisioningSubstate: {
        serializedName: "properties.customHttpsProvisioningSubstate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customHttpsParameters: {
        serializedName: "properties.customHttpsParameters",
        type: {
          name: "Composite",
          className: "CustomDomainHttpsParameters"
        }
      },
      validationData: {
        serializedName: "properties.validationData",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Origin: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Origin",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      httpPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "properties.httpPort",
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "properties.httpsPort",
        type: {
          name: "Number"
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      priority: {
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 1
        },
        serializedName: "properties.priority",
        type: {
          name: "Number"
        }
      },
      weight: {
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        serializedName: "properties.weight",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      privateLinkAlias: {
        serializedName: "properties.privateLinkAlias",
        type: {
          name: "String"
        }
      },
      privateLinkResourceId: {
        serializedName: "properties.privateLinkResourceId",
        type: {
          name: "String"
        }
      },
      privateLinkLocation: {
        serializedName: "properties.privateLinkLocation",
        type: {
          name: "String"
        }
      },
      privateLinkApprovalMessage: {
        serializedName: "properties.privateLinkApprovalMessage",
        type: {
          name: "String"
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateEndpointStatus: {
        serializedName: "properties.privateEndpointStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OriginGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OriginGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      healthProbeSettings: {
        serializedName: "properties.healthProbeSettings",
        type: {
          name: "Composite",
          className: "HealthProbeParameters"
        }
      },
      origins: {
        serializedName: "properties.origins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
        constraints: {
          InclusiveMaximum: 50,
          InclusiveMinimum: 0
        },
        serializedName:
          "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
        type: {
          name: "Number"
        }
      },
      responseBasedOriginErrorDetectionSettings: {
        serializedName: "properties.responseBasedOriginErrorDetectionSettings",
        type: {
          name: "Composite",
          className: "ResponseBasedOriginErrorDetectionParameters"
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EdgeNode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EdgeNode",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      ipAddressGroups: {
        serializedName: "properties.ipAddressGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpAddressGroup"
            }
          }
        }
      }
    }
  }
};

export const AFDEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AFDEndpoint",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      profileName: {
        serializedName: "properties.profileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deploymentStatus: {
        serializedName: "properties.deploymentStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      autoGeneratedDomainNameLabelScope: {
        serializedName: "properties.autoGeneratedDomainNameLabelScope",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Profile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Profile",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      frontDoorId: {
        serializedName: "properties.frontDoorId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      originResponseTimeoutSeconds: {
        constraints: {
          InclusiveMinimum: 16
        },
        serializedName: "properties.originResponseTimeoutSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Endpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Endpoint",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      originPath: {
        serializedName: "properties.originPath",
        type: {
          name: "String"
        }
      },
      contentTypesToCompress: {
        serializedName: "properties.contentTypesToCompress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      originHostHeader: {
        serializedName: "properties.originHostHeader",
        type: {
          name: "String"
        }
      },
      isCompressionEnabled: {
        serializedName: "properties.isCompressionEnabled",
        type: {
          name: "Boolean"
        }
      },
      isHttpAllowed: {
        serializedName: "properties.isHttpAllowed",
        type: {
          name: "Boolean"
        }
      },
      isHttpsAllowed: {
        serializedName: "properties.isHttpsAllowed",
        type: {
          name: "Boolean"
        }
      },
      queryStringCachingBehavior: {
        serializedName: "properties.queryStringCachingBehavior",
        type: {
          name: "Enum",
          allowedValues: [
            "IgnoreQueryString",
            "BypassCaching",
            "UseQueryString",
            "NotSet"
          ]
        }
      },
      optimizationType: {
        serializedName: "properties.optimizationType",
        type: {
          name: "String"
        }
      },
      probePath: {
        serializedName: "properties.probePath",
        type: {
          name: "String"
        }
      },
      geoFilters: {
        serializedName: "properties.geoFilters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoFilter"
            }
          }
        }
      },
      defaultOriginGroup: {
        serializedName: "properties.defaultOriginGroup",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      urlSigningKeys: {
        serializedName: "properties.urlSigningKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UrlSigningKey"
            }
          }
        }
      },
      deliveryPolicy: {
        serializedName: "properties.deliveryPolicy",
        type: {
          name: "Composite",
          className: "EndpointPropertiesUpdateParametersDeliveryPolicy"
        }
      },
      webApplicationFirewallPolicyLink: {
        serializedName: "properties.webApplicationFirewallPolicyLink",
        type: {
          name: "Composite",
          className:
            "EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      origins: {
        serializedName: "properties.origins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeepCreatedOrigin"
            }
          }
        }
      },
      originGroups: {
        serializedName: "properties.originGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeepCreatedOriginGroup"
            }
          }
        }
      },
      customDomains: {
        serializedName: "properties.customDomains",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomDomain"
            }
          }
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CdnWebApplicationFirewallPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CdnWebApplicationFirewallPolicy",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      policySettings: {
        serializedName: "properties.policySettings",
        type: {
          name: "Composite",
          className: "PolicySettings"
        }
      },
      rateLimitRules: {
        serializedName: "properties.rateLimitRules",
        type: {
          name: "Composite",
          className: "RateLimitRuleList"
        }
      },
      customRules: {
        serializedName: "properties.customRules",
        type: {
          name: "Composite",
          className: "CustomRuleList"
        }
      },
      managedRules: {
        serializedName: "properties.managedRules",
        type: {
          name: "Composite",
          className: "ManagedRuleSetList"
        }
      },
      endpointLinks: {
        serializedName: "properties.endpointLinks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CdnEndpoint"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  DeliveryRuleCondition: DeliveryRuleCondition,
  DeliveryRuleActionAutoGenerated: DeliveryRuleActionAutoGenerated,
  SecurityPolicyPropertiesParameters: SecurityPolicyPropertiesParameters,
  SecretParameters: SecretParameters,
  CustomDomainHttpsParameters: CustomDomainHttpsParameters,
  "DeliveryRuleCondition.RemoteAddress": DeliveryRuleRemoteAddressCondition,
  "DeliveryRuleCondition.RequestMethod": DeliveryRuleRequestMethodCondition,
  "DeliveryRuleCondition.QueryString": DeliveryRuleQueryStringCondition,
  "DeliveryRuleCondition.PostArgs": DeliveryRulePostArgsCondition,
  "DeliveryRuleCondition.RequestUri": DeliveryRuleRequestUriCondition,
  "DeliveryRuleCondition.RequestHeader": DeliveryRuleRequestHeaderCondition,
  "DeliveryRuleCondition.RequestBody": DeliveryRuleRequestBodyCondition,
  "DeliveryRuleCondition.RequestScheme": DeliveryRuleRequestSchemeCondition,
  "DeliveryRuleCondition.UrlPath": DeliveryRuleUrlPathCondition,
  "DeliveryRuleCondition.UrlFileExtension": DeliveryRuleUrlFileExtensionCondition,
  "DeliveryRuleCondition.UrlFileName": DeliveryRuleUrlFileNameCondition,
  "DeliveryRuleCondition.HttpVersion": DeliveryRuleHttpVersionCondition,
  "DeliveryRuleCondition.Cookies": DeliveryRuleCookiesCondition,
  "DeliveryRuleCondition.IsDevice": DeliveryRuleIsDeviceCondition,
  "DeliveryRuleCondition.SocketAddr": DeliveryRuleSocketAddrCondition,
  "DeliveryRuleCondition.ClientPort": DeliveryRuleClientPortCondition,
  "DeliveryRuleCondition.ServerPort": DeliveryRuleServerPortCondition,
  "DeliveryRuleCondition.HostName": DeliveryRuleHostNameCondition,
  "DeliveryRuleCondition.SslProtocol": DeliveryRuleSslProtocolCondition,
  "DeliveryRuleActionAutoGenerated.UrlRedirect": UrlRedirectAction,
  "DeliveryRuleActionAutoGenerated.UrlSigning": UrlSigningAction,
  "DeliveryRuleActionAutoGenerated.OriginGroupOverride": OriginGroupOverrideAction,
  "DeliveryRuleActionAutoGenerated.UrlRewrite": UrlRewriteAction,
  "DeliveryRuleActionAutoGenerated.ModifyRequestHeader": DeliveryRuleRequestHeaderAction,
  "DeliveryRuleActionAutoGenerated.ModifyResponseHeader": DeliveryRuleResponseHeaderAction,
  "DeliveryRuleActionAutoGenerated.CacheExpiration": DeliveryRuleCacheExpirationAction,
  "DeliveryRuleActionAutoGenerated.CacheKeyQueryString": DeliveryRuleCacheKeyQueryStringAction,
  "DeliveryRuleActionAutoGenerated.RouteConfigurationOverride": DeliveryRuleRouteConfigurationOverrideAction,
  "SecurityPolicyPropertiesParameters.WebApplicationFirewall": SecurityPolicyWebApplicationFirewallParameters,
  "SecretParameters.UrlSigningKey": UrlSigningKeyParameters,
  "SecretParameters.ManagedCertificate": ManagedCertificateParameters,
  "SecretParameters.CustomerCertificate": CustomerCertificateParameters,
  "SecretParameters.AzureFirstPartyManagedCertificate": AzureFirstPartyManagedCertificateParameters,
  "CustomDomainHttpsParameters.Cdn": CdnManagedHttpsParameters,
  "CustomDomainHttpsParameters.AzureKeyVault": UserManagedHttpsParameters
};
