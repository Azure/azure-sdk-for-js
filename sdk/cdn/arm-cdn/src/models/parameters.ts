/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";

export const acceptLanguage: msRest.OperationParameter = {
  parameterPath: "acceptLanguage",
  mapper: {
    serializedName: "accept-language",
    defaultValue: 'en-US',
    type: {
      name: "String"
    }
  }
};
export const actions: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "actions"
  ],
  mapper: {
    serializedName: "actions",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: msRest.QueryCollectionFormat.Multi
};
export const apiVersion: msRest.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    required: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};
export const continents: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "continents"
  ],
  mapper: {
    serializedName: "continents",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: msRest.QueryCollectionFormat.Multi
};
export const countryOrRegions: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "countryOrRegions"
  ],
  mapper: {
    serializedName: "countryOrRegions",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: msRest.QueryCollectionFormat.Multi
};
export const customDomainName: msRest.OperationURLParameter = {
  parameterPath: "customDomainName",
  mapper: {
    required: true,
    serializedName: "customDomainName",
    type: {
      name: "String"
    }
  }
};
export const customDomains0: msRest.OperationQueryParameter = {
  parameterPath: "customDomains",
  mapper: {
    required: true,
    serializedName: "customDomains",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: msRest.QueryCollectionFormat.Multi
};
export const customDomains1: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "customDomains"
  ],
  mapper: {
    serializedName: "customDomains",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: msRest.QueryCollectionFormat.Multi
};
export const dateTimeBegin: msRest.OperationQueryParameter = {
  parameterPath: "dateTimeBegin",
  mapper: {
    required: true,
    serializedName: "dateTimeBegin",
    type: {
      name: "DateTime"
    }
  }
};
export const dateTimeEnd: msRest.OperationQueryParameter = {
  parameterPath: "dateTimeEnd",
  mapper: {
    required: true,
    serializedName: "dateTimeEnd",
    type: {
      name: "DateTime"
    }
  }
};
export const endpointName: msRest.OperationURLParameter = {
  parameterPath: "endpointName",
  mapper: {
    required: true,
    serializedName: "endpointName",
    type: {
      name: "String"
    }
  }
};
export const granularity: msRest.OperationQueryParameter = {
  parameterPath: "granularity",
  mapper: {
    required: true,
    serializedName: "granularity",
    type: {
      name: "String"
    }
  }
};
export const groupBy: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "groupBy"
  ],
  mapper: {
    serializedName: "groupBy",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: msRest.QueryCollectionFormat.Multi
};
export const maxRanking: msRest.OperationQueryParameter = {
  parameterPath: "maxRanking",
  mapper: {
    required: true,
    serializedName: "maxRanking",
    type: {
      name: "Number"
    }
  }
};
export const metrics: msRest.OperationQueryParameter = {
  parameterPath: "metrics",
  mapper: {
    required: true,
    serializedName: "metrics",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: msRest.QueryCollectionFormat.Multi
};
export const nextPageLink: msRest.OperationURLParameter = {
  parameterPath: "nextPageLink",
  mapper: {
    required: true,
    serializedName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const originGroupName: msRest.OperationURLParameter = {
  parameterPath: "originGroupName",
  mapper: {
    required: true,
    serializedName: "originGroupName",
    type: {
      name: "String"
    }
  }
};
export const originName: msRest.OperationURLParameter = {
  parameterPath: "originName",
  mapper: {
    required: true,
    serializedName: "originName",
    type: {
      name: "String"
    }
  }
};
export const policyName: msRest.OperationURLParameter = {
  parameterPath: "policyName",
  mapper: {
    required: true,
    serializedName: "policyName",
    constraints: {
      MaxLength: 128
    },
    type: {
      name: "String"
    }
  }
};
export const profileName: msRest.OperationURLParameter = {
  parameterPath: "profileName",
  mapper: {
    required: true,
    serializedName: "profileName",
    type: {
      name: "String"
    }
  }
};
export const protocols: msRest.OperationQueryParameter = {
  parameterPath: "protocols",
  mapper: {
    required: true,
    serializedName: "protocols",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: msRest.QueryCollectionFormat.Multi
};
export const rankings: msRest.OperationQueryParameter = {
  parameterPath: "rankings",
  mapper: {
    required: true,
    serializedName: "rankings",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: msRest.QueryCollectionFormat.Multi
};
export const resourceGroupName0: msRest.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    required: true,
    serializedName: "resourceGroupName",
    constraints: {
      MaxLength: 90,
      MinLength: 1,
      Pattern: /^[-\w\._\(\)]+$/
    },
    type: {
      name: "String"
    }
  }
};
export const resourceGroupName1: msRest.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    required: true,
    serializedName: "resourceGroupName",
    constraints: {
      MaxLength: 80,
      MinLength: 1,
      Pattern: /^[a-zA-Z0-9_\-\(\)\.]*[^\.]$/
    },
    type: {
      name: "String"
    }
  }
};
export const routeName: msRest.OperationURLParameter = {
  parameterPath: "routeName",
  mapper: {
    required: true,
    serializedName: "routeName",
    type: {
      name: "String"
    }
  }
};
export const ruleName: msRest.OperationURLParameter = {
  parameterPath: "ruleName",
  mapper: {
    required: true,
    serializedName: "ruleName",
    type: {
      name: "String"
    }
  }
};
export const ruleSetName: msRest.OperationURLParameter = {
  parameterPath: "ruleSetName",
  mapper: {
    required: true,
    serializedName: "ruleSetName",
    type: {
      name: "String"
    }
  }
};
export const ruleTypes: msRest.OperationQueryParameter = {
  parameterPath: [
    "options",
    "ruleTypes"
  ],
  mapper: {
    serializedName: "ruleTypes",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: msRest.QueryCollectionFormat.Multi
};
export const secretName: msRest.OperationURLParameter = {
  parameterPath: "secretName",
  mapper: {
    required: true,
    serializedName: "secretName",
    type: {
      name: "String"
    }
  }
};
export const securityPolicyName: msRest.OperationURLParameter = {
  parameterPath: "securityPolicyName",
  mapper: {
    required: true,
    serializedName: "securityPolicyName",
    type: {
      name: "String"
    }
  }
};
export const subscriptionId: msRest.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    required: true,
    serializedName: "subscriptionId",
    type: {
      name: "String"
    }
  }
};
