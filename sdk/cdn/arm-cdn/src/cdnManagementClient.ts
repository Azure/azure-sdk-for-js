/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import {
  AfdProfilesImpl,
  AfdCustomDomainsImpl,
  AfdEndpointsImpl,
  AfdOriginGroupsImpl,
  AfdOriginsImpl,
  RoutesImpl,
  RuleSetsImpl,
  RulesImpl,
  SecurityPoliciesImpl,
  SecretsImpl,
  ValidateImpl,
  LogAnalyticsImpl,
  ProfilesImpl,
  EndpointsImpl,
  OriginsImpl,
  OriginGroupsImpl,
  CustomDomainsImpl,
  ResourceUsageOperationsImpl,
  OperationsImpl,
  EdgeNodesImpl,
  PoliciesImpl,
  ManagedRuleSetsImpl
} from "./operations";
import {
  AfdProfiles,
  AfdCustomDomains,
  AfdEndpoints,
  AfdOriginGroups,
  AfdOrigins,
  Routes,
  RuleSets,
  Rules,
  SecurityPolicies,
  Secrets,
  Validate,
  LogAnalytics,
  Profiles,
  Endpoints,
  Origins,
  OriginGroups,
  CustomDomains,
  ResourceUsageOperations,
  Operations,
  EdgeNodes,
  Policies,
  ManagedRuleSets
} from "./operationsInterfaces";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import {
  CdnManagementClientOptionalParams,
  CheckEndpointNameAvailabilityInput,
  CheckEndpointNameAvailabilityOptionalParams,
  CheckEndpointNameAvailabilityResponse,
  CheckNameAvailabilityInput,
  CheckNameAvailabilityOptionalParams,
  CheckNameAvailabilityResponse,
  CheckNameAvailabilityWithSubscriptionOptionalParams,
  CheckNameAvailabilityWithSubscriptionResponse,
  ValidateProbeInput,
  ValidateProbeOptionalParams,
  ValidateProbeResponse
} from "./models";

export class CdnManagementClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the CdnManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Azure Subscription ID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: CdnManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: CdnManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-cdn/7.0.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2021-06-01";
    this.afdProfiles = new AfdProfilesImpl(this);
    this.afdCustomDomains = new AfdCustomDomainsImpl(this);
    this.afdEndpoints = new AfdEndpointsImpl(this);
    this.afdOriginGroups = new AfdOriginGroupsImpl(this);
    this.afdOrigins = new AfdOriginsImpl(this);
    this.routes = new RoutesImpl(this);
    this.ruleSets = new RuleSetsImpl(this);
    this.rules = new RulesImpl(this);
    this.securityPolicies = new SecurityPoliciesImpl(this);
    this.secrets = new SecretsImpl(this);
    this.validate = new ValidateImpl(this);
    this.logAnalytics = new LogAnalyticsImpl(this);
    this.profiles = new ProfilesImpl(this);
    this.endpoints = new EndpointsImpl(this);
    this.origins = new OriginsImpl(this);
    this.originGroups = new OriginGroupsImpl(this);
    this.customDomains = new CustomDomainsImpl(this);
    this.resourceUsageOperations = new ResourceUsageOperationsImpl(this);
    this.operations = new OperationsImpl(this);
    this.edgeNodes = new EdgeNodesImpl(this);
    this.policies = new PoliciesImpl(this);
    this.managedRuleSets = new ManagedRuleSetsImpl(this);
  }

  /**
   * Check the availability of a resource name. This is needed for resources where name is globally
   * unique, such as a afdx endpoint.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param checkEndpointNameAvailabilityInput Input to check.
   * @param options The options parameters.
   */
  checkEndpointNameAvailability(
    resourceGroupName: string,
    checkEndpointNameAvailabilityInput: CheckEndpointNameAvailabilityInput,
    options?: CheckEndpointNameAvailabilityOptionalParams
  ): Promise<CheckEndpointNameAvailabilityResponse> {
    return this.sendOperationRequest(
      { resourceGroupName, checkEndpointNameAvailabilityInput, options },
      checkEndpointNameAvailabilityOperationSpec
    );
  }

  /**
   * Check the availability of a resource name. This is needed for resources where name is globally
   * unique, such as a CDN endpoint.
   * @param checkNameAvailabilityInput Input to check.
   * @param options The options parameters.
   */
  checkNameAvailability(
    checkNameAvailabilityInput: CheckNameAvailabilityInput,
    options?: CheckNameAvailabilityOptionalParams
  ): Promise<CheckNameAvailabilityResponse> {
    return this.sendOperationRequest(
      { checkNameAvailabilityInput, options },
      checkNameAvailabilityOperationSpec
    );
  }

  /**
   * Check the availability of a resource name. This is needed for resources where name is globally
   * unique, such as a CDN endpoint.
   * @param checkNameAvailabilityInput Input to check.
   * @param options The options parameters.
   */
  checkNameAvailabilityWithSubscription(
    checkNameAvailabilityInput: CheckNameAvailabilityInput,
    options?: CheckNameAvailabilityWithSubscriptionOptionalParams
  ): Promise<CheckNameAvailabilityWithSubscriptionResponse> {
    return this.sendOperationRequest(
      { checkNameAvailabilityInput, options },
      checkNameAvailabilityWithSubscriptionOperationSpec
    );
  }

  /**
   * Check if the probe path is a valid path and the file can be accessed. Probe path is the path to a
   * file hosted on the origin server to help accelerate the delivery of dynamic content via the CDN
   * endpoint. This path is relative to the origin path specified in the endpoint configuration.
   * @param validateProbeInput Input to check.
   * @param options The options parameters.
   */
  validateProbe(
    validateProbeInput: ValidateProbeInput,
    options?: ValidateProbeOptionalParams
  ): Promise<ValidateProbeResponse> {
    return this.sendOperationRequest(
      { validateProbeInput, options },
      validateProbeOperationSpec
    );
  }

  afdProfiles: AfdProfiles;
  afdCustomDomains: AfdCustomDomains;
  afdEndpoints: AfdEndpoints;
  afdOriginGroups: AfdOriginGroups;
  afdOrigins: AfdOrigins;
  routes: Routes;
  ruleSets: RuleSets;
  rules: Rules;
  securityPolicies: SecurityPolicies;
  secrets: Secrets;
  validate: Validate;
  logAnalytics: LogAnalytics;
  profiles: Profiles;
  endpoints: Endpoints;
  origins: Origins;
  originGroups: OriginGroups;
  customDomains: CustomDomains;
  resourceUsageOperations: ResourceUsageOperations;
  operations: Operations;
  edgeNodes: EdgeNodes;
  policies: Policies;
  managedRuleSets: ManagedRuleSets;
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkEndpointNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/checkEndpointNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckEndpointNameAvailabilityOutput
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  requestBody: Parameters.checkEndpointNameAvailabilityInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Cdn/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityOutput
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.checkNameAvailabilityInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const checkNameAvailabilityWithSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Cdn/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityOutput
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.checkNameAvailabilityInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const validateProbeOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Cdn/validateProbe",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ValidateProbeOutput
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.validateProbeInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
