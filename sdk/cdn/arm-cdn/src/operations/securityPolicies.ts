/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/securityPoliciesMappers";
import * as Parameters from "../models/parameters";
import { CdnManagementClientContext } from "../cdnManagementClientContext";

/** Class representing a SecurityPolicies. */
export class SecurityPolicies {
  private readonly client: CdnManagementClientContext;

  /**
   * Create a SecurityPolicies.
   * @param {CdnManagementClientContext} client Reference to the service client.
   */
  constructor(client: CdnManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists security policies associated with the profile
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.SecurityPoliciesListByProfileResponse>
   */
  listByProfile(resourceGroupName: string, profileName: string, options?: msRest.RequestOptionsBase): Promise<Models.SecurityPoliciesListByProfileResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param callback The callback
   */
  listByProfile(resourceGroupName: string, profileName: string, callback: msRest.ServiceCallback<Models.SecurityPolicyListResult>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByProfile(resourceGroupName: string, profileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SecurityPolicyListResult>): void;
  listByProfile(resourceGroupName: string, profileName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SecurityPolicyListResult>, callback?: msRest.ServiceCallback<Models.SecurityPolicyListResult>): Promise<Models.SecurityPoliciesListByProfileResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        options
      },
      listByProfileOperationSpec,
      callback) as Promise<Models.SecurityPoliciesListByProfileResponse>;
  }

  /**
   * Gets an existing security policy within a profile.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param securityPolicyName Name of the security policy under the profile.
   * @param [options] The optional parameters
   * @returns Promise<Models.SecurityPoliciesGetResponse>
   */
  get(resourceGroupName: string, profileName: string, securityPolicyName: string, options?: msRest.RequestOptionsBase): Promise<Models.SecurityPoliciesGetResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param securityPolicyName Name of the security policy under the profile.
   * @param callback The callback
   */
  get(resourceGroupName: string, profileName: string, securityPolicyName: string, callback: msRest.ServiceCallback<Models.SecurityPolicy>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param securityPolicyName Name of the security policy under the profile.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, profileName: string, securityPolicyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SecurityPolicy>): void;
  get(resourceGroupName: string, profileName: string, securityPolicyName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SecurityPolicy>, callback?: msRest.ServiceCallback<Models.SecurityPolicy>): Promise<Models.SecurityPoliciesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        securityPolicyName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SecurityPoliciesGetResponse>;
  }

  /**
   * Creates a new security policy within the specified profile.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param securityPolicyName Name of the security policy under the profile.
   * @param [options] The optional parameters
   * @returns Promise<Models.SecurityPoliciesCreateResponse>
   */
  create(resourceGroupName: string, profileName: string, securityPolicyName: string, options?: Models.SecurityPoliciesCreateOptionalParams): Promise<Models.SecurityPoliciesCreateResponse> {
    return this.beginCreate(resourceGroupName,profileName,securityPolicyName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SecurityPoliciesCreateResponse>;
  }

  /**
   * Updates an existing Secret within a profile.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param securityPolicyName Name of the security policy under the profile.
   * @param securityPolicyParameters Security policy update properties
   * @param [options] The optional parameters
   * @returns Promise<Models.SecurityPoliciesPatchResponse>
   */
  patch(resourceGroupName: string, profileName: string, securityPolicyName: string, securityPolicyParameters: Models.SecurityPolicyWebApplicationFirewallParameters, options?: msRest.RequestOptionsBase): Promise<Models.SecurityPoliciesPatchResponse> {
    return this.beginPatch(resourceGroupName,profileName,securityPolicyName,securityPolicyParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SecurityPoliciesPatchResponse>;
  }

  /**
   * Deletes an existing security policy within profile.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param securityPolicyName Name of the Secret under the profile.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, profileName: string, securityPolicyName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,profileName,securityPolicyName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates a new security policy within the specified profile.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param securityPolicyName Name of the security policy under the profile.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, profileName: string, securityPolicyName: string, options?: Models.SecurityPoliciesBeginCreateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        profileName,
        securityPolicyName,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Updates an existing Secret within a profile.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param securityPolicyName Name of the security policy under the profile.
   * @param securityPolicyParameters Security policy update properties
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPatch(resourceGroupName: string, profileName: string, securityPolicyName: string, securityPolicyParameters: Models.SecurityPolicyWebApplicationFirewallParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        profileName,
        securityPolicyName,
        securityPolicyParameters,
        options
      },
      beginPatchOperationSpec,
      options);
  }

  /**
   * Deletes an existing security policy within profile.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param securityPolicyName Name of the Secret under the profile.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, profileName: string, securityPolicyName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        profileName,
        securityPolicyName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists security policies associated with the profile
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SecurityPoliciesListByProfileNextResponse>
   */
  listByProfileNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SecurityPoliciesListByProfileNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByProfileNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SecurityPolicyListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByProfileNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SecurityPolicyListResult>): void;
  listByProfileNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SecurityPolicyListResult>, callback?: msRest.ServiceCallback<Models.SecurityPolicyListResult>): Promise<Models.SecurityPoliciesListByProfileNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByProfileNextOperationSpec,
      callback) as Promise<Models.SecurityPoliciesListByProfileNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/securityPolicies",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityPolicyListResult
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/securityPolicies/{securityPolicyName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.securityPolicyName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityPolicy
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/securityPolicies/{securityPolicyName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.securityPolicyName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      parameters: [
        "options",
        "parameters"
      ]
    },
    mapper: {
      ...Mappers.SecurityPolicy,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SecurityPolicy
    },
    201: {
      bodyMapper: Mappers.SecurityPolicy
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const beginPatchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/securityPolicies/{securityPolicyName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.securityPolicyName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "securityPolicyParameters",
    mapper: {
      ...Mappers.SecurityPolicyWebApplicationFirewallParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SecurityPolicy
    },
    202: {
      bodyMapper: Mappers.SecurityPolicy
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/securityPolicies/{securityPolicyName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.securityPolicyName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const listByProfileNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityPolicyListResult
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};
