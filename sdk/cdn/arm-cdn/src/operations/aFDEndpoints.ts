/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/aFDEndpointsMappers";
import * as Parameters from "../models/parameters";
import { CdnManagementClientContext } from "../cdnManagementClientContext";

/** Class representing a AFDEndpoints. */
export class AFDEndpoints {
  private readonly client: CdnManagementClientContext;

  /**
   * Create a AFDEndpoints.
   * @param {CdnManagementClientContext} client Reference to the service client.
   */
  constructor(client: CdnManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists existing AzureFrontDoor endpoints.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.AFDEndpointsListByProfileResponse>
   */
  listByProfile(resourceGroupName: string, profileName: string, options?: msRest.RequestOptionsBase): Promise<Models.AFDEndpointsListByProfileResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param callback The callback
   */
  listByProfile(resourceGroupName: string, profileName: string, callback: msRest.ServiceCallback<Models.AFDEndpointListResult>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByProfile(resourceGroupName: string, profileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AFDEndpointListResult>): void;
  listByProfile(resourceGroupName: string, profileName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AFDEndpointListResult>, callback?: msRest.ServiceCallback<Models.AFDEndpointListResult>): Promise<Models.AFDEndpointsListByProfileResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        options
      },
      listByProfileOperationSpec,
      callback) as Promise<Models.AFDEndpointsListByProfileResponse>;
  }

  /**
   * Gets an existing AzureFrontDoor endpoint with the specified endpoint name under the specified
   * subscription, resource group and profile.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param [options] The optional parameters
   * @returns Promise<Models.AFDEndpointsGetResponse>
   */
  get(resourceGroupName: string, profileName: string, endpointName: string, options?: msRest.RequestOptionsBase): Promise<Models.AFDEndpointsGetResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param callback The callback
   */
  get(resourceGroupName: string, profileName: string, endpointName: string, callback: msRest.ServiceCallback<Models.AFDEndpoint>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, profileName: string, endpointName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AFDEndpoint>): void;
  get(resourceGroupName: string, profileName: string, endpointName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AFDEndpoint>, callback?: msRest.ServiceCallback<Models.AFDEndpoint>): Promise<Models.AFDEndpointsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        endpointName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.AFDEndpointsGetResponse>;
  }

  /**
   * Creates a new AzureFrontDoor endpoint with the specified endpoint name under the specified
   * subscription, resource group and profile.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param endpoint Endpoint properties
   * @param [options] The optional parameters
   * @returns Promise<Models.AFDEndpointsCreateResponse>
   */
  create(resourceGroupName: string, profileName: string, endpointName: string, endpoint: Models.AFDEndpoint, options?: msRest.RequestOptionsBase): Promise<Models.AFDEndpointsCreateResponse> {
    return this.beginCreate(resourceGroupName,profileName,endpointName,endpoint,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.AFDEndpointsCreateResponse>;
  }

  /**
   * Updates an existing AzureFrontDoor endpoint with the specified endpoint name under the specified
   * subscription, resource group and profile. Only tags can be updated after creating an endpoint.
   * To update origins, use the Update Origin operation. To update origin groups, use the Update
   * Origin group operation. To update domains, use the Update Custom Domain operation.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param endpointUpdateProperties Endpoint update properties
   * @param [options] The optional parameters
   * @returns Promise<Models.AFDEndpointsUpdateResponse>
   */
  update(resourceGroupName: string, profileName: string, endpointName: string, endpointUpdateProperties: Models.AFDEndpointUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.AFDEndpointsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,profileName,endpointName,endpointUpdateProperties,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.AFDEndpointsUpdateResponse>;
  }

  /**
   * Deletes an existing AzureFrontDoor endpoint with the specified endpoint name under the specified
   * subscription, resource group and profile.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, profileName: string, endpointName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,profileName,endpointName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Removes a content from AzureFrontDoor.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param contentPaths The path to the content to be purged. Can describe a file path or a wild
   * card directory.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  purgeContent(resourceGroupName: string, profileName: string, endpointName: string, contentPaths: string[], options?: Models.AFDEndpointsPurgeContentOptionalParams): Promise<msRest.RestResponse> {
    return this.beginPurgeContent(resourceGroupName,profileName,endpointName,contentPaths,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Checks the quota and actual usage of endpoints under the given CDN profile.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param [options] The optional parameters
   * @returns Promise<Models.AFDEndpointsListResourceUsageResponse>
   */
  listResourceUsage(resourceGroupName: string, profileName: string, endpointName: string, options?: msRest.RequestOptionsBase): Promise<Models.AFDEndpointsListResourceUsageResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param callback The callback
   */
  listResourceUsage(resourceGroupName: string, profileName: string, endpointName: string, callback: msRest.ServiceCallback<Models.UsagesListResult>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param options The optional parameters
   * @param callback The callback
   */
  listResourceUsage(resourceGroupName: string, profileName: string, endpointName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UsagesListResult>): void;
  listResourceUsage(resourceGroupName: string, profileName: string, endpointName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UsagesListResult>, callback?: msRest.ServiceCallback<Models.UsagesListResult>): Promise<Models.AFDEndpointsListResourceUsageResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        endpointName,
        options
      },
      listResourceUsageOperationSpec,
      callback) as Promise<Models.AFDEndpointsListResourceUsageResponse>;
  }

  /**
   * Validates the custom domain mapping to ensure it maps to the correct CDN endpoint in DNS.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param hostName The host name of the custom domain. Must be a domain name.
   * @param [options] The optional parameters
   * @returns Promise<Models.AFDEndpointsValidateCustomDomainResponse>
   */
  validateCustomDomain(resourceGroupName: string, profileName: string, endpointName: string, hostName: string, options?: msRest.RequestOptionsBase): Promise<Models.AFDEndpointsValidateCustomDomainResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param hostName The host name of the custom domain. Must be a domain name.
   * @param callback The callback
   */
  validateCustomDomain(resourceGroupName: string, profileName: string, endpointName: string, hostName: string, callback: msRest.ServiceCallback<Models.ValidateCustomDomainOutput>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param hostName The host name of the custom domain. Must be a domain name.
   * @param options The optional parameters
   * @param callback The callback
   */
  validateCustomDomain(resourceGroupName: string, profileName: string, endpointName: string, hostName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ValidateCustomDomainOutput>): void;
  validateCustomDomain(resourceGroupName: string, profileName: string, endpointName: string, hostName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ValidateCustomDomainOutput>, callback?: msRest.ServiceCallback<Models.ValidateCustomDomainOutput>): Promise<Models.AFDEndpointsValidateCustomDomainResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        endpointName,
        hostName,
        options
      },
      validateCustomDomainOperationSpec,
      callback) as Promise<Models.AFDEndpointsValidateCustomDomainResponse>;
  }

  /**
   * Creates a new AzureFrontDoor endpoint with the specified endpoint name under the specified
   * subscription, resource group and profile.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param endpoint Endpoint properties
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, profileName: string, endpointName: string, endpoint: Models.AFDEndpoint, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        profileName,
        endpointName,
        endpoint,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Updates an existing AzureFrontDoor endpoint with the specified endpoint name under the specified
   * subscription, resource group and profile. Only tags can be updated after creating an endpoint.
   * To update origins, use the Update Origin operation. To update origin groups, use the Update
   * Origin group operation. To update domains, use the Update Custom Domain operation.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param endpointUpdateProperties Endpoint update properties
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, profileName: string, endpointName: string, endpointUpdateProperties: Models.AFDEndpointUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        profileName,
        endpointName,
        endpointUpdateProperties,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Deletes an existing AzureFrontDoor endpoint with the specified endpoint name under the specified
   * subscription, resource group and profile.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, profileName: string, endpointName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        profileName,
        endpointName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Removes a content from AzureFrontDoor.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param contentPaths The path to the content to be purged. Can describe a file path or a wild
   * card directory.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPurgeContent(resourceGroupName: string, profileName: string, endpointName: string, contentPaths: string[], options?: Models.AFDEndpointsBeginPurgeContentOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        profileName,
        endpointName,
        contentPaths,
        options
      },
      beginPurgeContentOperationSpec,
      options);
  }

  /**
   * Lists existing AzureFrontDoor endpoints.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AFDEndpointsListByProfileNextResponse>
   */
  listByProfileNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AFDEndpointsListByProfileNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByProfileNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AFDEndpointListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByProfileNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AFDEndpointListResult>): void;
  listByProfileNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AFDEndpointListResult>, callback?: msRest.ServiceCallback<Models.AFDEndpointListResult>): Promise<Models.AFDEndpointsListByProfileNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByProfileNextOperationSpec,
      callback) as Promise<Models.AFDEndpointsListByProfileNextResponse>;
  }

  /**
   * Checks the quota and actual usage of endpoints under the given CDN profile.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AFDEndpointsListResourceUsageNextResponse>
   */
  listResourceUsageNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AFDEndpointsListResourceUsageNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listResourceUsageNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.UsagesListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listResourceUsageNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UsagesListResult>): void;
  listResourceUsageNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UsagesListResult>, callback?: msRest.ServiceCallback<Models.UsagesListResult>): Promise<Models.AFDEndpointsListResourceUsageNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listResourceUsageNextOperationSpec,
      callback) as Promise<Models.AFDEndpointsListResourceUsageNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/afdEndpoints",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AFDEndpointListResult
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/afdEndpoints/{endpointName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AFDEndpoint
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const listResourceUsageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/afdEndpoints/{endpointName}/usages",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UsagesListResult
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const validateCustomDomainOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/afdEndpoints/{endpointName}/validateCustomDomain",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      hostName: "hostName"
    },
    mapper: {
      ...Mappers.ValidateCustomDomainInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ValidateCustomDomainOutput
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/afdEndpoints/{endpointName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "endpoint",
    mapper: {
      ...Mappers.AFDEndpoint,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AFDEndpoint
    },
    201: {
      bodyMapper: Mappers.AFDEndpoint
    },
    202: {
      bodyMapper: Mappers.AFDEndpoint
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/afdEndpoints/{endpointName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "endpointUpdateProperties",
    mapper: {
      ...Mappers.AFDEndpointUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AFDEndpoint
    },
    202: {
      bodyMapper: Mappers.AFDEndpoint
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/afdEndpoints/{endpointName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const beginPurgeContentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/afdEndpoints/{endpointName}/purge",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      contentPaths: "contentPaths",
      domains: [
        "options",
        "domains"
      ]
    },
    mapper: {
      ...Mappers.AfdPurgeParameters,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const listByProfileNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AFDEndpointListResult
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const listResourceUsageNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UsagesListResult
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};
