/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Rules } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CdnManagementClient } from "../cdnManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Rule,
  RulesListByRuleSetNextOptionalParams,
  RulesListByRuleSetOptionalParams,
  RulesListByRuleSetResponse,
  RulesGetOptionalParams,
  RulesGetResponse,
  RulesCreateOptionalParams,
  RulesCreateResponse,
  RuleUpdateParameters,
  RulesUpdateOptionalParams,
  RulesUpdateResponse,
  RulesDeleteOptionalParams,
  RulesListByRuleSetNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Rules operations. */
export class RulesImpl implements Rules {
  private readonly client: CdnManagementClient;

  /**
   * Initialize a new instance of the class Rules class.
   * @param client Reference to the service client
   */
  constructor(client: CdnManagementClient) {
    this.client = client;
  }

  /**
   * Lists all of the existing delivery rules within a rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
   *                    is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param options The options parameters.
   */
  public listByRuleSet(
    resourceGroupName: string,
    profileName: string,
    ruleSetName: string,
    options?: RulesListByRuleSetOptionalParams
  ): PagedAsyncIterableIterator<Rule> {
    const iter = this.listByRuleSetPagingAll(
      resourceGroupName,
      profileName,
      ruleSetName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByRuleSetPagingPage(
          resourceGroupName,
          profileName,
          ruleSetName,
          options,
          settings
        );
      }
    };
  }

  private async *listByRuleSetPagingPage(
    resourceGroupName: string,
    profileName: string,
    ruleSetName: string,
    options?: RulesListByRuleSetOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Rule[]> {
    let result: RulesListByRuleSetResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByRuleSet(
        resourceGroupName,
        profileName,
        ruleSetName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByRuleSetNext(
        resourceGroupName,
        profileName,
        ruleSetName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByRuleSetPagingAll(
    resourceGroupName: string,
    profileName: string,
    ruleSetName: string,
    options?: RulesListByRuleSetOptionalParams
  ): AsyncIterableIterator<Rule> {
    for await (const page of this.listByRuleSetPagingPage(
      resourceGroupName,
      profileName,
      ruleSetName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all of the existing delivery rules within a rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
   *                    is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param options The options parameters.
   */
  private _listByRuleSet(
    resourceGroupName: string,
    profileName: string,
    ruleSetName: string,
    options?: RulesListByRuleSetOptionalParams
  ): Promise<RulesListByRuleSetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, profileName, ruleSetName, options },
      listByRuleSetOperationSpec
    );
  }

  /**
   * Gets an existing delivery rule within a rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
   *                    is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    profileName: string,
    ruleSetName: string,
    ruleName: string,
    options?: RulesGetOptionalParams
  ): Promise<RulesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, profileName, ruleSetName, ruleName, options },
      getOperationSpec
    );
  }

  /**
   * Creates a new delivery rule within the specified rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
   *                    is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param rule The delivery rule properties.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    profileName: string,
    ruleSetName: string,
    ruleName: string,
    rule: Rule,
    options?: RulesCreateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<RulesCreateResponse>, RulesCreateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<RulesCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, profileName, ruleSetName, ruleName, rule, options },
      createOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates a new delivery rule within the specified rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
   *                    is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param rule The delivery rule properties.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    profileName: string,
    ruleSetName: string,
    ruleName: string,
    rule: Rule,
    options?: RulesCreateOptionalParams
  ): Promise<RulesCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      profileName,
      ruleSetName,
      ruleName,
      rule,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates an existing delivery rule within a rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
   *                    is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param ruleUpdateProperties Delivery rule properties
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    profileName: string,
    ruleSetName: string,
    ruleName: string,
    ruleUpdateProperties: RuleUpdateParameters,
    options?: RulesUpdateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<RulesUpdateResponse>, RulesUpdateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<RulesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        profileName,
        ruleSetName,
        ruleName,
        ruleUpdateProperties,
        options
      },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates an existing delivery rule within a rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
   *                    is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param ruleUpdateProperties Delivery rule properties
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    profileName: string,
    ruleSetName: string,
    ruleName: string,
    ruleUpdateProperties: RuleUpdateParameters,
    options?: RulesUpdateOptionalParams
  ): Promise<RulesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      profileName,
      ruleSetName,
      ruleName,
      ruleUpdateProperties,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes an existing delivery rule within a rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
   *                    is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    profileName: string,
    ruleSetName: string,
    ruleName: string,
    options?: RulesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, profileName, ruleSetName, ruleName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes an existing delivery rule within a rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
   *                    is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    profileName: string,
    ruleSetName: string,
    ruleName: string,
    options?: RulesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      profileName,
      ruleSetName,
      ruleName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByRuleSetNext
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
   *                    is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param nextLink The nextLink from the previous successful call to the ListByRuleSet method.
   * @param options The options parameters.
   */
  private _listByRuleSetNext(
    resourceGroupName: string,
    profileName: string,
    ruleSetName: string,
    nextLink: string,
    options?: RulesListByRuleSetNextOptionalParams
  ): Promise<RulesListByRuleSetNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, profileName, ruleSetName, nextLink, options },
      listByRuleSetNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByRuleSetOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/ruleSets/{ruleSetName}/rules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RuleListResult
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.ruleSetName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/ruleSets/{ruleSetName}/rules/{ruleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Rule
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.ruleSetName,
    Parameters.ruleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/ruleSets/{ruleSetName}/rules/{ruleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Rule
    },
    201: {
      bodyMapper: Mappers.Rule
    },
    202: {
      bodyMapper: Mappers.Rule
    },
    204: {
      bodyMapper: Mappers.Rule
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  requestBody: Parameters.rule,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.ruleSetName,
    Parameters.ruleName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/ruleSets/{ruleSetName}/rules/{ruleName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Rule
    },
    201: {
      bodyMapper: Mappers.Rule
    },
    202: {
      bodyMapper: Mappers.Rule
    },
    204: {
      bodyMapper: Mappers.Rule
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  requestBody: Parameters.ruleUpdateProperties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.ruleSetName,
    Parameters.ruleName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/ruleSets/{ruleSetName}/rules/{ruleName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.ruleSetName,
    Parameters.ruleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByRuleSetNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RuleListResult
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.nextLink,
    Parameters.ruleSetName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
