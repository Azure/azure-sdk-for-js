/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/rulesMappers";
import * as Parameters from "../models/parameters";
import { CdnManagementClientContext } from "../cdnManagementClientContext";

/** Class representing a Rules. */
export class Rules {
  private readonly client: CdnManagementClientContext;

  /**
   * Create a Rules.
   * @param {CdnManagementClientContext} client Reference to the service client.
   */
  constructor(client: CdnManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all of the existing delivery rules within a rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param [options] The optional parameters
   * @returns Promise<Models.RulesListByRuleSetResponse>
   */
  listByRuleSet(resourceGroupName: string, profileName: string, ruleSetName: string, options?: msRest.RequestOptionsBase): Promise<Models.RulesListByRuleSetResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param callback The callback
   */
  listByRuleSet(resourceGroupName: string, profileName: string, ruleSetName: string, callback: msRest.ServiceCallback<Models.RuleListResult>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByRuleSet(resourceGroupName: string, profileName: string, ruleSetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RuleListResult>): void;
  listByRuleSet(resourceGroupName: string, profileName: string, ruleSetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RuleListResult>, callback?: msRest.ServiceCallback<Models.RuleListResult>): Promise<Models.RulesListByRuleSetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        ruleSetName,
        options
      },
      listByRuleSetOperationSpec,
      callback) as Promise<Models.RulesListByRuleSetResponse>;
  }

  /**
   * Gets an existing delivery rule within a rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param [options] The optional parameters
   * @returns Promise<Models.RulesGetResponse>
   */
  get(resourceGroupName: string, profileName: string, ruleSetName: string, ruleName: string, options?: msRest.RequestOptionsBase): Promise<Models.RulesGetResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param callback The callback
   */
  get(resourceGroupName: string, profileName: string, ruleSetName: string, ruleName: string, callback: msRest.ServiceCallback<Models.Rule>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, profileName: string, ruleSetName: string, ruleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Rule>): void;
  get(resourceGroupName: string, profileName: string, ruleSetName: string, ruleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Rule>, callback?: msRest.ServiceCallback<Models.Rule>): Promise<Models.RulesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        ruleSetName,
        ruleName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.RulesGetResponse>;
  }

  /**
   * Creates a new delivery rule within the specified rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param rule The delivery rule properties.
   * @param [options] The optional parameters
   * @returns Promise<Models.RulesCreateResponse>
   */
  create(resourceGroupName: string, profileName: string, ruleSetName: string, ruleName: string, rule: Models.Rule, options?: msRest.RequestOptionsBase): Promise<Models.RulesCreateResponse> {
    return this.beginCreate(resourceGroupName,profileName,ruleSetName,ruleName,rule,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.RulesCreateResponse>;
  }

  /**
   * Updates an existing delivery rule within a rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param ruleUpdateProperties Delivery rule properties
   * @param [options] The optional parameters
   * @returns Promise<Models.RulesUpdateResponse>
   */
  update(resourceGroupName: string, profileName: string, ruleSetName: string, ruleName: string, ruleUpdateProperties: Models.RuleUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.RulesUpdateResponse> {
    return this.beginUpdate(resourceGroupName,profileName,ruleSetName,ruleName,ruleUpdateProperties,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.RulesUpdateResponse>;
  }

  /**
   * Deletes an existing delivery rule within a rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, profileName: string, ruleSetName: string, ruleName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,profileName,ruleSetName,ruleName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates a new delivery rule within the specified rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param rule The delivery rule properties.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, profileName: string, ruleSetName: string, ruleName: string, rule: Models.Rule, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        profileName,
        ruleSetName,
        ruleName,
        rule,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Updates an existing delivery rule within a rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param ruleUpdateProperties Delivery rule properties
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, profileName: string, ruleSetName: string, ruleName: string, ruleUpdateProperties: Models.RuleUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        profileName,
        ruleSetName,
        ruleName,
        ruleUpdateProperties,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Deletes an existing delivery rule within a rule set.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param ruleSetName Name of the rule set under the profile.
   * @param ruleName Name of the delivery rule which is unique within the endpoint.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, profileName: string, ruleSetName: string, ruleName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        profileName,
        ruleSetName,
        ruleName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists all of the existing delivery rules within a rule set.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RulesListByRuleSetNextResponse>
   */
  listByRuleSetNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RulesListByRuleSetNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByRuleSetNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RuleListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByRuleSetNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RuleListResult>): void;
  listByRuleSetNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RuleListResult>, callback?: msRest.ServiceCallback<Models.RuleListResult>): Promise<Models.RulesListByRuleSetNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByRuleSetNextOperationSpec,
      callback) as Promise<Models.RulesListByRuleSetNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByRuleSetOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/ruleSets/{ruleSetName}/rules",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.ruleSetName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RuleListResult
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/ruleSets/{ruleSetName}/rules/{ruleName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.ruleSetName,
    Parameters.ruleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Rule
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/ruleSets/{ruleSetName}/rules/{ruleName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.ruleSetName,
    Parameters.ruleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "rule",
    mapper: {
      ...Mappers.Rule,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Rule
    },
    201: {
      bodyMapper: Mappers.Rule
    },
    202: {
      bodyMapper: Mappers.Rule
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/ruleSets/{ruleSetName}/rules/{ruleName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.ruleSetName,
    Parameters.ruleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "ruleUpdateProperties",
    mapper: {
      ...Mappers.RuleUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Rule
    },
    202: {
      bodyMapper: Mappers.Rule
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/ruleSets/{ruleSetName}/rules/{ruleName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.ruleSetName,
    Parameters.ruleName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const listByRuleSetNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RuleListResult
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};
