/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/routesMappers";
import * as Parameters from "../models/parameters";
import { CdnManagementClientContext } from "../cdnManagementClientContext";

/** Class representing a Routes. */
export class Routes {
  private readonly client: CdnManagementClientContext;

  /**
   * Create a Routes.
   * @param {CdnManagementClientContext} client Reference to the service client.
   */
  constructor(client: CdnManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all of the existing origins within a profile.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param [options] The optional parameters
   * @returns Promise<Models.RoutesListByEndpointResponse>
   */
  listByEndpoint(resourceGroupName: string, profileName: string, endpointName: string, options?: msRest.RequestOptionsBase): Promise<Models.RoutesListByEndpointResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param callback The callback
   */
  listByEndpoint(resourceGroupName: string, profileName: string, endpointName: string, callback: msRest.ServiceCallback<Models.RouteListResult>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByEndpoint(resourceGroupName: string, profileName: string, endpointName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RouteListResult>): void;
  listByEndpoint(resourceGroupName: string, profileName: string, endpointName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RouteListResult>, callback?: msRest.ServiceCallback<Models.RouteListResult>): Promise<Models.RoutesListByEndpointResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        endpointName,
        options
      },
      listByEndpointOperationSpec,
      callback) as Promise<Models.RoutesListByEndpointResponse>;
  }

  /**
   * Gets an existing route with the specified route name under the specified subscription, resource
   * group, profile, and AzureFrontDoor endpoint.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param routeName Name of the routing rule.
   * @param [options] The optional parameters
   * @returns Promise<Models.RoutesGetResponse>
   */
  get(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, options?: msRest.RequestOptionsBase): Promise<Models.RoutesGetResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param routeName Name of the routing rule.
   * @param callback The callback
   */
  get(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, callback: msRest.ServiceCallback<Models.Route>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param routeName Name of the routing rule.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Route>): void;
  get(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Route>, callback?: msRest.ServiceCallback<Models.Route>): Promise<Models.RoutesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        endpointName,
        routeName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.RoutesGetResponse>;
  }

  /**
   * Creates a new route with the specified route name under the specified subscription, resource
   * group, profile, and AzureFrontDoor endpoint.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param routeName Name of the routing rule.
   * @param route Route properties
   * @param [options] The optional parameters
   * @returns Promise<Models.RoutesCreateResponse>
   */
  create(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, route: Models.Route, options?: msRest.RequestOptionsBase): Promise<Models.RoutesCreateResponse> {
    return this.beginCreate(resourceGroupName,profileName,endpointName,routeName,route,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.RoutesCreateResponse>;
  }

  /**
   * Updates an existing route with the specified route name under the specified subscription,
   * resource group, profile, and AzureFrontDoor endpoint.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param routeName Name of the routing rule.
   * @param routeUpdateProperties Route update properties
   * @param [options] The optional parameters
   * @returns Promise<Models.RoutesUpdateResponse>
   */
  update(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, routeUpdateProperties: Models.RouteUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.RoutesUpdateResponse> {
    return this.beginUpdate(resourceGroupName,profileName,endpointName,routeName,routeUpdateProperties,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.RoutesUpdateResponse>;
  }

  /**
   * Deletes an existing route with the specified route name under the specified subscription,
   * resource group, profile, and AzureFrontDoor endpoint.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param routeName Name of the routing rule.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,profileName,endpointName,routeName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates a new route with the specified route name under the specified subscription, resource
   * group, profile, and AzureFrontDoor endpoint.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param routeName Name of the routing rule.
   * @param route Route properties
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, route: Models.Route, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        profileName,
        endpointName,
        routeName,
        route,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Updates an existing route with the specified route name under the specified subscription,
   * resource group, profile, and AzureFrontDoor endpoint.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param routeName Name of the routing rule.
   * @param routeUpdateProperties Route update properties
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, routeUpdateProperties: Models.RouteUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        profileName,
        endpointName,
        routeName,
        routeUpdateProperties,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Deletes an existing route with the specified route name under the specified subscription,
   * resource group, profile, and AzureFrontDoor endpoint.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName Name of the CDN profile which is unique within the resource group.
   * @param endpointName Name of the endpoint under the profile which is unique globally.
   * @param routeName Name of the routing rule.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        profileName,
        endpointName,
        routeName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists all of the existing origins within a profile.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RoutesListByEndpointNextResponse>
   */
  listByEndpointNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RoutesListByEndpointNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByEndpointNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RouteListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByEndpointNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RouteListResult>): void;
  listByEndpointNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RouteListResult>, callback?: msRest.ServiceCallback<Models.RouteListResult>): Promise<Models.RoutesListByEndpointNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByEndpointNextOperationSpec,
      callback) as Promise<Models.RoutesListByEndpointNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/afdEndpoints/{endpointName}/routes",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RouteListResult
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/afdEndpoints/{endpointName}/routes/{routeName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.endpointName,
    Parameters.routeName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Route
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/afdEndpoints/{endpointName}/routes/{routeName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.endpointName,
    Parameters.routeName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "route",
    mapper: {
      ...Mappers.Route,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Route
    },
    201: {
      bodyMapper: Mappers.Route
    },
    202: {
      bodyMapper: Mappers.Route
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/afdEndpoints/{endpointName}/routes/{routeName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.endpointName,
    Parameters.routeName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "routeUpdateProperties",
    mapper: {
      ...Mappers.RouteUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Route
    },
    202: {
      bodyMapper: Mappers.Route
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/afdEndpoints/{endpointName}/routes/{routeName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.profileName,
    Parameters.endpointName,
    Parameters.routeName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};

const listByEndpointNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RouteListResult
    },
    default: {
      bodyMapper: Mappers.AfdErrorResponse
    }
  },
  serializer
};
