/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { StudentLabs } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EducationManagementClient } from "../educationManagementClient";
import {
  StudentLabDetails,
  StudentLabsListAllNextOptionalParams,
  StudentLabsListAllOptionalParams,
  StudentLabsListAllResponse,
  StudentLabsGetOptionalParams,
  StudentLabsGetResponse,
  StudentLabsListAllNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing StudentLabs operations. */
export class StudentLabsImpl implements StudentLabs {
  private readonly client: EducationManagementClient;

  /**
   * Initialize a new instance of the class StudentLabs class.
   * @param client Reference to the service client
   */
  constructor(client: EducationManagementClient) {
    this.client = client;
  }

  /**
   * Get a list of all labs associated with the caller of the API.
   * @param options The options parameters.
   */
  public listAll(
    options?: StudentLabsListAllOptionalParams
  ): PagedAsyncIterableIterator<StudentLabDetails> {
    const iter = this.listAllPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listAllPagingPage(options);
      }
    };
  }

  private async *listAllPagingPage(
    options?: StudentLabsListAllOptionalParams
  ): AsyncIterableIterator<StudentLabDetails[]> {
    let result = await this._listAll(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listAllNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listAllPagingAll(
    options?: StudentLabsListAllOptionalParams
  ): AsyncIterableIterator<StudentLabDetails> {
    for await (const page of this.listAllPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get a list of all labs associated with the caller of the API.
   * @param options The options parameters.
   */
  private _listAll(
    options?: StudentLabsListAllOptionalParams
  ): Promise<StudentLabsListAllResponse> {
    return this.client.sendOperationRequest({ options }, listAllOperationSpec);
  }

  /**
   * Get the details for a specified lab associated with the student lab.
   * @param studentLabName Student lab name.
   * @param options The options parameters.
   */
  get(
    studentLabName: string,
    options?: StudentLabsGetOptionalParams
  ): Promise<StudentLabsGetResponse> {
    return this.client.sendOperationRequest(
      { studentLabName, options },
      getOperationSpec
    );
  }

  /**
   * ListAllNext
   * @param nextLink The nextLink from the previous successful call to the ListAll method.
   * @param options The options parameters.
   */
  private _listAllNext(
    nextLink: string,
    options?: StudentLabsListAllNextOptionalParams
  ): Promise<StudentLabsListAllNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAllNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listAllOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Education/studentLabs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StudentLabListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Education/studentLabs/{studentLabName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StudentLabDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.studentLabName],
  headerParameters: [Parameters.accept],
  serializer
};
const listAllNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StudentLabListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
