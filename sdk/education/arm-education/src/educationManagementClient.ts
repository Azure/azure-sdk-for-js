/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  OperationsImpl,
  GrantsImpl,
  GrantImpl,
  GetImpl,
  LabsImpl,
  LabImpl,
  DeleteImpl,
  CreateImpl,
  GenerateImpl,
  JoinRequestsImpl,
  JoinRequestImpl,
  ApproveImpl,
  DenyImpl,
  RedeemImpl,
  StudentsImpl,
  StudentLabsImpl
} from "./operations";
import {
  Operations,
  Grants,
  Grant,
  Get,
  Labs,
  Lab,
  Delete,
  Create,
  Generate,
  JoinRequests,
  JoinRequest,
  Approve,
  Deny,
  Redeem,
  Students,
  StudentLabs
} from "./operationsInterfaces";
import { EducationManagementClientOptionalParams } from "./models";

export class EducationManagementClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the EducationManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    options?: EducationManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: EducationManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-education/1.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
      if (!bearerTokenAuthenticationPolicyFound) {
        this.pipeline.removePolicy({
          name: coreRestPipeline.bearerTokenAuthenticationPolicyName
        });
        this.pipeline.addPolicy(
          coreRestPipeline.bearerTokenAuthenticationPolicy({
            scopes: `${optionsWithDefaults.baseUri}/.default`,
            challengeCallbacks: {
              authorizeRequestOnChallenge:
                coreClient.authorizeRequestOnClaimChallenge
            }
          })
        );
      }
    }

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2021-12-01-preview";
    this.operations = new OperationsImpl(this);
    this.grants = new GrantsImpl(this);
    this.grant = new GrantImpl(this);
    this.get = new GetImpl(this);
    this.labs = new LabsImpl(this);
    this.lab = new LabImpl(this);
    this.delete = new DeleteImpl(this);
    this.create = new CreateImpl(this);
    this.generate = new GenerateImpl(this);
    this.joinRequests = new JoinRequestsImpl(this);
    this.joinRequest = new JoinRequestImpl(this);
    this.approve = new ApproveImpl(this);
    this.deny = new DenyImpl(this);
    this.redeem = new RedeemImpl(this);
    this.students = new StudentsImpl(this);
    this.studentLabs = new StudentLabsImpl(this);
  }

  operations: Operations;
  grants: Grants;
  grant: Grant;
  get: Get;
  labs: Labs;
  lab: Lab;
  delete: Delete;
  create: Create;
  generate: Generate;
  joinRequests: JoinRequests;
  joinRequest: JoinRequest;
  approve: Approve;
  deny: Deny;
  redeem: Redeem;
  students: Students;
  studentLabs: StudentLabs;
}
