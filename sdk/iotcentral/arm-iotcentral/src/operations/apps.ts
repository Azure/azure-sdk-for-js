/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Apps } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { IotCentralClient } from "../iotCentralClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  App,
  AppsListBySubscriptionNextOptionalParams,
  AppsListBySubscriptionOptionalParams,
  AppsListByResourceGroupNextOptionalParams,
  AppsListByResourceGroupOptionalParams,
  AppTemplate,
  AppsListTemplatesNextOptionalParams,
  AppsListTemplatesOptionalParams,
  AppsGetOptionalParams,
  AppsGetResponse,
  AppsCreateOrUpdateOptionalParams,
  AppsCreateOrUpdateResponse,
  AppPatch,
  AppsUpdateOptionalParams,
  AppsUpdateResponse,
  AppsDeleteOptionalParams,
  AppsDeleteResponse,
  AppsListBySubscriptionResponse,
  AppsListByResourceGroupResponse,
  OperationInputs,
  AppsCheckNameAvailabilityOptionalParams,
  AppsCheckNameAvailabilityResponse,
  AppsCheckSubdomainAvailabilityOptionalParams,
  AppsCheckSubdomainAvailabilityResponse,
  AppsListTemplatesResponse,
  AppsListBySubscriptionNextResponse,
  AppsListByResourceGroupNextResponse,
  AppsListTemplatesNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Apps operations. */
export class AppsImpl implements Apps {
  private readonly client: IotCentralClient;

  /**
   * Initialize a new instance of the class Apps class.
   * @param client Reference to the service client
   */
  constructor(client: IotCentralClient) {
    this.client = client;
  }

  /**
   * Get all IoT Central Applications in a subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: AppsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<App> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: AppsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<App[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: AppsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<App> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get all the IoT Central Applications in a resource group.
   * @param resourceGroupName The name of the resource group that contains the IoT Central application.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: AppsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<App> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: AppsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<App[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: AppsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<App> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get all available application templates.
   * @param options The options parameters.
   */
  public listTemplates(
    options?: AppsListTemplatesOptionalParams
  ): PagedAsyncIterableIterator<AppTemplate> {
    const iter = this.listTemplatesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listTemplatesPagingPage(options);
      }
    };
  }

  private async *listTemplatesPagingPage(
    options?: AppsListTemplatesOptionalParams
  ): AsyncIterableIterator<AppTemplate[]> {
    let result = await this._listTemplates(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listTemplatesNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listTemplatesPagingAll(
    options?: AppsListTemplatesOptionalParams
  ): AsyncIterableIterator<AppTemplate> {
    for await (const page of this.listTemplatesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get the metadata of an IoT Central application.
   * @param resourceGroupName The name of the resource group that contains the IoT Central application.
   * @param resourceName The ARM resource name of the IoT Central application.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    options?: AppsGetOptionalParams
  ): Promise<AppsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update the metadata of an IoT Central application. The usual pattern to modify a property
   * is to retrieve the IoT Central application metadata and security metadata, and then combine them
   * with the modified values in a new body to update the IoT Central application.
   * @param resourceGroupName The name of the resource group that contains the IoT Central application.
   * @param resourceName The ARM resource name of the IoT Central application.
   * @param app The IoT Central application metadata and security metadata.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    resourceName: string,
    app: App,
    options?: AppsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<AppsCreateOrUpdateResponse>,
      AppsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AppsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, resourceName, app, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update the metadata of an IoT Central application. The usual pattern to modify a property
   * is to retrieve the IoT Central application metadata and security metadata, and then combine them
   * with the modified values in a new body to update the IoT Central application.
   * @param resourceGroupName The name of the resource group that contains the IoT Central application.
   * @param resourceName The ARM resource name of the IoT Central application.
   * @param app The IoT Central application metadata and security metadata.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    resourceName: string,
    app: App,
    options?: AppsCreateOrUpdateOptionalParams
  ): Promise<AppsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      resourceName,
      app,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update the metadata of an IoT Central application.
   * @param resourceGroupName The name of the resource group that contains the IoT Central application.
   * @param resourceName The ARM resource name of the IoT Central application.
   * @param appPatch The IoT Central application metadata and security metadata.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    resourceName: string,
    appPatch: AppPatch,
    options?: AppsUpdateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<AppsUpdateResponse>, AppsUpdateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AppsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, resourceName, appPatch, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update the metadata of an IoT Central application.
   * @param resourceGroupName The name of the resource group that contains the IoT Central application.
   * @param resourceName The ARM resource name of the IoT Central application.
   * @param appPatch The IoT Central application metadata and security metadata.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    resourceName: string,
    appPatch: AppPatch,
    options?: AppsUpdateOptionalParams
  ): Promise<AppsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      resourceName,
      appPatch,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete an IoT Central application.
   * @param resourceGroupName The name of the resource group that contains the IoT Central application.
   * @param resourceName The ARM resource name of the IoT Central application.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    resourceName: string,
    options?: AppsDeleteOptionalParams
  ): Promise<
    PollerLike<PollOperationState<AppsDeleteResponse>, AppsDeleteResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AppsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, resourceName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete an IoT Central application.
   * @param resourceGroupName The name of the resource group that contains the IoT Central application.
   * @param resourceName The ARM resource name of the IoT Central application.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    resourceName: string,
    options?: AppsDeleteOptionalParams
  ): Promise<AppsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      resourceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get all IoT Central Applications in a subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: AppsListBySubscriptionOptionalParams
  ): Promise<AppsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Get all the IoT Central Applications in a resource group.
   * @param resourceGroupName The name of the resource group that contains the IoT Central application.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: AppsListByResourceGroupOptionalParams
  ): Promise<AppsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Check if an IoT Central application name is available.
   * @param operationInputs Set the name parameter in the OperationInputs structure to the name of the
   *                        IoT Central application to check.
   * @param options The options parameters.
   */
  checkNameAvailability(
    operationInputs: OperationInputs,
    options?: AppsCheckNameAvailabilityOptionalParams
  ): Promise<AppsCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { operationInputs, options },
      checkNameAvailabilityOperationSpec
    );
  }

  /**
   * Check if an IoT Central application subdomain is available.
   * @param operationInputs Set the name parameter in the OperationInputs structure to the subdomain of
   *                        the IoT Central application to check.
   * @param options The options parameters.
   */
  checkSubdomainAvailability(
    operationInputs: OperationInputs,
    options?: AppsCheckSubdomainAvailabilityOptionalParams
  ): Promise<AppsCheckSubdomainAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { operationInputs, options },
      checkSubdomainAvailabilityOperationSpec
    );
  }

  /**
   * Get all available application templates.
   * @param options The options parameters.
   */
  private _listTemplates(
    options?: AppsListTemplatesOptionalParams
  ): Promise<AppsListTemplatesResponse> {
    return this.client.sendOperationRequest(
      { options },
      listTemplatesOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: AppsListBySubscriptionNextOptionalParams
  ): Promise<AppsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group that contains the IoT Central application.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: AppsListByResourceGroupNextOptionalParams
  ): Promise<AppsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListTemplatesNext
   * @param nextLink The nextLink from the previous successful call to the ListTemplates method.
   * @param options The options parameters.
   */
  private _listTemplatesNext(
    nextLink: string,
    options?: AppsListTemplatesNextOptionalParams
  ): Promise<AppsListTemplatesNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listTemplatesNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTCentral/iotApps/{resourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.App
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTCentral/iotApps/{resourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.App,
      headersMapper: Mappers.AppsCreateOrUpdateHeaders
    },
    201: {
      bodyMapper: Mappers.App,
      headersMapper: Mappers.AppsCreateOrUpdateHeaders
    },
    202: {
      bodyMapper: Mappers.App,
      headersMapper: Mappers.AppsCreateOrUpdateHeaders
    },
    204: {
      bodyMapper: Mappers.App,
      headersMapper: Mappers.AppsCreateOrUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.app,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTCentral/iotApps/{resourceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      headersMapper: Mappers.AppsUpdateHeaders
    },
    201: {
      headersMapper: Mappers.AppsUpdateHeaders
    },
    202: {
      headersMapper: Mappers.AppsUpdateHeaders
    },
    204: {
      headersMapper: Mappers.AppsUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.appPatch,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTCentral/iotApps/{resourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.AppsDeleteHeaders
    },
    201: {
      headersMapper: Mappers.AppsDeleteHeaders
    },
    202: {
      headersMapper: Mappers.AppsDeleteHeaders
    },
    204: {
      headersMapper: Mappers.AppsDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/iotApps",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTCentral/iotApps",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AppAvailabilityInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.operationInputs,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const checkSubdomainAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/checkSubdomainAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AppAvailabilityInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.operationInputs,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listTemplatesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.IoTCentral/appTemplates",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AppTemplatesResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listTemplatesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AppTemplatesResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
