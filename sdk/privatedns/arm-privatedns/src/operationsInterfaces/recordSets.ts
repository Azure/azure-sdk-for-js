/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  RecordSet,
  RecordType,
  RecordSetsListByTypeOptionalParams,
  RecordSetsListOptionalParams,
  RecordSetsCreateOrUpdateOptionalParams,
  RecordSetsCreateOrUpdateResponse,
  RecordSetsUpdateOptionalParams,
  RecordSetsUpdateResponse,
  RecordSetsDeleteOptionalParams,
  RecordSetsGetOptionalParams,
  RecordSetsGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a RecordSets. */
export interface RecordSets {
  /**
   * Lists the record sets of a specified type in a Private DNS zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param recordType The type of record sets to enumerate.
   * @param options The options parameters.
   */
  listByType(
    resourceGroupName: string,
    privateZoneName: string,
    recordType: RecordType,
    options?: RecordSetsListByTypeOptionalParams
  ): PagedAsyncIterableIterator<RecordSet>;
  /**
   * Lists all record sets in a Private DNS zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    privateZoneName: string,
    options?: RecordSetsListOptionalParams
  ): PagedAsyncIterableIterator<RecordSet>;
  /**
   * Creates or updates a record set within a Private DNS zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param recordType The type of DNS record in this record set. Record sets of type SOA can be updated
   *                   but not created (they are created when the Private DNS zone is created).
   * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
   * @param parameters Parameters supplied to the CreateOrUpdate operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    privateZoneName: string,
    recordType: RecordType,
    relativeRecordSetName: string,
    parameters: RecordSet,
    options?: RecordSetsCreateOrUpdateOptionalParams
  ): Promise<RecordSetsCreateOrUpdateResponse>;
  /**
   * Updates a record set within a Private DNS zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param recordType The type of DNS record in this record set.
   * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
   * @param parameters Parameters supplied to the Update operation.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    privateZoneName: string,
    recordType: RecordType,
    relativeRecordSetName: string,
    parameters: RecordSet,
    options?: RecordSetsUpdateOptionalParams
  ): Promise<RecordSetsUpdateResponse>;
  /**
   * Deletes a record set from a Private DNS zone. This operation cannot be undone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param recordType The type of DNS record in this record set. Record sets of type SOA cannot be
   *                   deleted (they are deleted when the Private DNS zone is deleted).
   * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    privateZoneName: string,
    recordType: RecordType,
    relativeRecordSetName: string,
    options?: RecordSetsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Gets a record set.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param recordType The type of DNS record in this record set.
   * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    privateZoneName: string,
    recordType: RecordType,
    relativeRecordSetName: string,
    options?: RecordSetsGetOptionalParams
  ): Promise<RecordSetsGetResponse>;
}
