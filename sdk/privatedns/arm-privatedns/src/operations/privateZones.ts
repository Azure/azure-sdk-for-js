/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/privateZonesMappers";
import * as Parameters from "../models/parameters";
import { PrivateDnsManagementClientContext } from "../privateDnsManagementClientContext";

/** Class representing a PrivateZones. */
export class PrivateZones {
  private readonly client: PrivateDnsManagementClientContext;

  /**
   * Create a PrivateZones.
   * @param {PrivateDnsManagementClientContext} client Reference to the service client.
   */
  constructor(client: PrivateDnsManagementClientContext) {
    this.client = client;
  }

  /**
   * Creates or updates a Private DNS zone. Does not modify Links to virtual networks or DNS records
   * within the zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param parameters Parameters supplied to the CreateOrUpdate operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateZonesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, privateZoneName: string, parameters: Models.PrivateZone, options?: Models.PrivateZonesCreateOrUpdateOptionalParams): Promise<Models.PrivateZonesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,privateZoneName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PrivateZonesCreateOrUpdateResponse>;
  }

  /**
   * Updates a Private DNS zone. Does not modify virtual network links or DNS records within the
   * zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param parameters Parameters supplied to the Update operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateZonesUpdateResponse>
   */
  update(resourceGroupName: string, privateZoneName: string, parameters: Models.PrivateZone, options?: Models.PrivateZonesUpdateOptionalParams): Promise<Models.PrivateZonesUpdateResponse> {
    return this.beginUpdate(resourceGroupName,privateZoneName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PrivateZonesUpdateResponse>;
  }

  /**
   * Deletes a Private DNS zone. WARNING: All DNS records in the zone will also be deleted. This
   * operation cannot be undone. Private DNS zone cannot be deleted unless all virtual network links
   * to it are removed.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, privateZoneName: string, options?: Models.PrivateZonesDeleteMethodOptionalParams): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,privateZoneName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Gets a Private DNS zone. Retrieves the zone properties, but not the virtual networks links or
   * the record sets within the zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateZonesGetResponse>
   */
  get(resourceGroupName: string, privateZoneName: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateZonesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param callback The callback
   */
  get(resourceGroupName: string, privateZoneName: string, callback: msRest.ServiceCallback<Models.PrivateZone>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, privateZoneName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateZone>): void;
  get(resourceGroupName: string, privateZoneName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateZone>, callback?: msRest.ServiceCallback<Models.PrivateZone>): Promise<Models.PrivateZonesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        privateZoneName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PrivateZonesGetResponse>;
  }

  /**
   * Lists the Private DNS zones in all resource groups in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateZonesListResponse>
   */
  list(options?: Models.PrivateZonesListOptionalParams): Promise<Models.PrivateZonesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.PrivateZoneListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.PrivateZonesListOptionalParams, callback: msRest.ServiceCallback<Models.PrivateZoneListResult>): void;
  list(options?: Models.PrivateZonesListOptionalParams | msRest.ServiceCallback<Models.PrivateZoneListResult>, callback?: msRest.ServiceCallback<Models.PrivateZoneListResult>): Promise<Models.PrivateZonesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PrivateZonesListResponse>;
  }

  /**
   * Lists the Private DNS zones within a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateZonesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.PrivateZonesListByResourceGroupOptionalParams): Promise<Models.PrivateZonesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PrivateZoneListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.PrivateZonesListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.PrivateZoneListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.PrivateZonesListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.PrivateZoneListResult>, callback?: msRest.ServiceCallback<Models.PrivateZoneListResult>): Promise<Models.PrivateZonesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.PrivateZonesListByResourceGroupResponse>;
  }

  /**
   * Creates or updates a Private DNS zone. Does not modify Links to virtual networks or DNS records
   * within the zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param parameters Parameters supplied to the CreateOrUpdate operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, privateZoneName: string, parameters: Models.PrivateZone, options?: Models.PrivateZonesBeginCreateOrUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        privateZoneName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Updates a Private DNS zone. Does not modify virtual network links or DNS records within the
   * zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param parameters Parameters supplied to the Update operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, privateZoneName: string, parameters: Models.PrivateZone, options?: Models.PrivateZonesBeginUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        privateZoneName,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a Private DNS zone. WARNING: All DNS records in the zone will also be deleted. This
   * operation cannot be undone. Private DNS zone cannot be deleted unless all virtual network links
   * to it are removed.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, privateZoneName: string, options?: Models.PrivateZonesBeginDeleteMethodOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        privateZoneName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists the Private DNS zones in all resource groups in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateZonesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateZonesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PrivateZoneListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateZoneListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateZoneListResult>, callback?: msRest.ServiceCallback<Models.PrivateZoneListResult>): Promise<Models.PrivateZonesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.PrivateZonesListNextResponse>;
  }

  /**
   * Lists the Private DNS zones within a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateZonesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateZonesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PrivateZoneListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateZoneListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateZoneListResult>, callback?: msRest.ServiceCallback<Models.PrivateZoneListResult>): Promise<Models.PrivateZonesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.PrivateZonesListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateZone
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/privateDnsZones",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateZoneListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateZoneListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PrivateZone,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateZone
    },
    201: {
      bodyMapper: Mappers.PrivateZone
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PrivateZone,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateZone
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateZoneListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateZoneListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
