/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/virtualNetworkLinksMappers";
import * as Parameters from "../models/parameters";
import { PrivateDnsManagementClientContext } from "../privateDnsManagementClientContext";

/** Class representing a VirtualNetworkLinks. */
export class VirtualNetworkLinks {
  private readonly client: PrivateDnsManagementClientContext;

  /**
   * Create a VirtualNetworkLinks.
   * @param {PrivateDnsManagementClientContext} client Reference to the service client.
   */
  constructor(client: PrivateDnsManagementClientContext) {
    this.client = client;
  }

  /**
   * Creates or updates a virtual network link to the specified Private DNS zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param virtualNetworkLinkName The name of the virtual network link.
   * @param parameters Parameters supplied to the CreateOrUpdate operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkLinksCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, parameters: Models.VirtualNetworkLink, options?: Models.VirtualNetworkLinksCreateOrUpdateOptionalParams): Promise<Models.VirtualNetworkLinksCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,privateZoneName,virtualNetworkLinkName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkLinksCreateOrUpdateResponse>;
  }

  /**
   * Updates a virtual network link to the specified Private DNS zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param virtualNetworkLinkName The name of the virtual network link.
   * @param parameters Parameters supplied to the Update operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkLinksUpdateResponse>
   */
  update(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, parameters: Models.VirtualNetworkLink, options?: Models.VirtualNetworkLinksUpdateOptionalParams): Promise<Models.VirtualNetworkLinksUpdateResponse> {
    return this.beginUpdate(resourceGroupName,privateZoneName,virtualNetworkLinkName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VirtualNetworkLinksUpdateResponse>;
  }

  /**
   * Deletes a virtual network link to the specified Private DNS zone. WARNING: In case of a
   * registration virtual network, all auto-registered DNS records in the zone for the virtual
   * network will also be deleted. This operation cannot be undone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param virtualNetworkLinkName The name of the virtual network link.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, options?: Models.VirtualNetworkLinksDeleteMethodOptionalParams): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,privateZoneName,virtualNetworkLinkName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Gets a virtual network link to the specified Private DNS zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param virtualNetworkLinkName The name of the virtual network link.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkLinksGetResponse>
   */
  get(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkLinksGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param virtualNetworkLinkName The name of the virtual network link.
   * @param callback The callback
   */
  get(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, callback: msRest.ServiceCallback<Models.VirtualNetworkLink>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param virtualNetworkLinkName The name of the virtual network link.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualNetworkLink>): void;
  get(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VirtualNetworkLink>, callback?: msRest.ServiceCallback<Models.VirtualNetworkLink>): Promise<Models.VirtualNetworkLinksGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        privateZoneName,
        virtualNetworkLinkName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VirtualNetworkLinksGetResponse>;
  }

  /**
   * Lists the virtual network links to the specified Private DNS zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkLinksListResponse>
   */
  list(resourceGroupName: string, privateZoneName: string, options?: Models.VirtualNetworkLinksListOptionalParams): Promise<Models.VirtualNetworkLinksListResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param callback The callback
   */
  list(resourceGroupName: string, privateZoneName: string, callback: msRest.ServiceCallback<Models.VirtualNetworkLinkListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, privateZoneName: string, options: Models.VirtualNetworkLinksListOptionalParams, callback: msRest.ServiceCallback<Models.VirtualNetworkLinkListResult>): void;
  list(resourceGroupName: string, privateZoneName: string, options?: Models.VirtualNetworkLinksListOptionalParams | msRest.ServiceCallback<Models.VirtualNetworkLinkListResult>, callback?: msRest.ServiceCallback<Models.VirtualNetworkLinkListResult>): Promise<Models.VirtualNetworkLinksListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        privateZoneName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.VirtualNetworkLinksListResponse>;
  }

  /**
   * Creates or updates a virtual network link to the specified Private DNS zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param virtualNetworkLinkName The name of the virtual network link.
   * @param parameters Parameters supplied to the CreateOrUpdate operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, parameters: Models.VirtualNetworkLink, options?: Models.VirtualNetworkLinksBeginCreateOrUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        privateZoneName,
        virtualNetworkLinkName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Updates a virtual network link to the specified Private DNS zone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param virtualNetworkLinkName The name of the virtual network link.
   * @param parameters Parameters supplied to the Update operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, parameters: Models.VirtualNetworkLink, options?: Models.VirtualNetworkLinksBeginUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        privateZoneName,
        virtualNetworkLinkName,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a virtual network link to the specified Private DNS zone. WARNING: In case of a
   * registration virtual network, all auto-registered DNS records in the zone for the virtual
   * network will also be deleted. This operation cannot be undone.
   * @param resourceGroupName The name of the resource group.
   * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
   * @param virtualNetworkLinkName The name of the virtual network link.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, options?: Models.VirtualNetworkLinksBeginDeleteMethodOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        privateZoneName,
        virtualNetworkLinkName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists the virtual network links to the specified Private DNS zone.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VirtualNetworkLinksListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VirtualNetworkLinksListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VirtualNetworkLinkListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualNetworkLinkListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VirtualNetworkLinkListResult>, callback?: msRest.ServiceCallback<Models.VirtualNetworkLinkListResult>): Promise<Models.VirtualNetworkLinksListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.VirtualNetworkLinksListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks/{virtualNetworkLinkName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.virtualNetworkLinkName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkLink
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.top,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkLinkListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks/{virtualNetworkLinkName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.virtualNetworkLinkName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VirtualNetworkLink,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkLink
    },
    201: {
      bodyMapper: Mappers.VirtualNetworkLink
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks/{virtualNetworkLinkName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.virtualNetworkLinkName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VirtualNetworkLink,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkLink
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/virtualNetworkLinks/{virtualNetworkLinkName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.privateZoneName,
    Parameters.virtualNetworkLinkName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkLinkListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
