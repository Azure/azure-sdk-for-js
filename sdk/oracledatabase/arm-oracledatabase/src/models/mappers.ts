/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const AutonomousDatabaseListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AutonomousDatabase",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AutonomousDatabaseBaseProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabaseBaseProperties",
    uberParent: "AutonomousDatabaseBaseProperties",
    polymorphicDiscriminator: {
      serializedName: "dataBaseType",
      clientName: "dataBaseType",
    },
    modelProperties: {
      adminPassword: {
        serializedName: "adminPassword",
        type: {
          name: "String",
        },
      },
      dataBaseType: {
        serializedName: "dataBaseType",
        required: true,
        type: {
          name: "String",
        },
      },
      autonomousMaintenanceScheduleType: {
        serializedName: "autonomousMaintenanceScheduleType",
        type: {
          name: "String",
        },
      },
      characterSet: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "characterSet",
        type: {
          name: "String",
        },
      },
      computeCount: {
        constraints: {
          InclusiveMaximum: 512,
          InclusiveMinimum: 0.1,
        },
        serializedName: "computeCount",
        type: {
          name: "Number",
        },
      },
      computeModel: {
        serializedName: "computeModel",
        type: {
          name: "String",
        },
      },
      cpuCoreCount: {
        constraints: {
          InclusiveMaximum: 128,
          InclusiveMinimum: 1,
        },
        serializedName: "cpuCoreCount",
        type: {
          name: "Number",
        },
      },
      customerContacts: {
        serializedName: "customerContacts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomerContact",
            },
          },
        },
      },
      dataStorageSizeInTbs: {
        constraints: {
          InclusiveMaximum: 384,
          InclusiveMinimum: 1,
        },
        serializedName: "dataStorageSizeInTbs",
        type: {
          name: "Number",
        },
      },
      dataStorageSizeInGbs: {
        constraints: {
          InclusiveMaximum: 393216,
          InclusiveMinimum: 20,
        },
        serializedName: "dataStorageSizeInGbs",
        type: {
          name: "Number",
        },
      },
      dbVersion: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "dbVersion",
        type: {
          name: "String",
        },
      },
      dbWorkload: {
        serializedName: "dbWorkload",
        type: {
          name: "String",
        },
      },
      displayName: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
      isAutoScalingEnabled: {
        serializedName: "isAutoScalingEnabled",
        type: {
          name: "Boolean",
        },
      },
      isAutoScalingForStorageEnabled: {
        serializedName: "isAutoScalingForStorageEnabled",
        type: {
          name: "Boolean",
        },
      },
      peerDbIds: {
        serializedName: "peerDbIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      peerDbId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "peerDbId",
        type: {
          name: "String",
        },
      },
      isLocalDataGuardEnabled: {
        serializedName: "isLocalDataGuardEnabled",
        type: {
          name: "Boolean",
        },
      },
      isRemoteDataGuardEnabled: {
        serializedName: "isRemoteDataGuardEnabled",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      localDisasterRecoveryType: {
        serializedName: "localDisasterRecoveryType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      localStandbyDb: {
        serializedName: "localStandbyDb",
        type: {
          name: "Composite",
          className: "AutonomousDatabaseStandbySummary",
        },
      },
      failedDataRecoveryInSeconds: {
        serializedName: "failedDataRecoveryInSeconds",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      isMtlsConnectionRequired: {
        serializedName: "isMtlsConnectionRequired",
        type: {
          name: "Boolean",
        },
      },
      isPreviewVersionWithServiceTermsAccepted: {
        serializedName: "isPreviewVersionWithServiceTermsAccepted",
        type: {
          name: "Boolean",
        },
      },
      licenseModel: {
        serializedName: "licenseModel",
        type: {
          name: "String",
        },
      },
      ncharacterSet: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "ncharacterSet",
        type: {
          name: "String",
        },
      },
      lifecycleDetails: {
        serializedName: "lifecycleDetails",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lifecycleState: {
        serializedName: "lifecycleState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      scheduledOperations: {
        serializedName: "scheduledOperations",
        type: {
          name: "Composite",
          className: "ScheduledOperationsType",
        },
      },
      privateEndpointIp: {
        serializedName: "privateEndpointIp",
        type: {
          name: "String",
        },
      },
      privateEndpointLabel: {
        serializedName: "privateEndpointLabel",
        type: {
          name: "String",
        },
      },
      ociUrl: {
        serializedName: "ociUrl",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String",
        },
      },
      vnetId: {
        serializedName: "vnetId",
        type: {
          name: "String",
        },
      },
      timeCreated: {
        serializedName: "timeCreated",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      timeMaintenanceBegin: {
        serializedName: "timeMaintenanceBegin",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      timeMaintenanceEnd: {
        serializedName: "timeMaintenanceEnd",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      actualUsedDataStorageSizeInTbs: {
        serializedName: "actualUsedDataStorageSizeInTbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      allocatedStorageSizeInTbs: {
        serializedName: "allocatedStorageSizeInTbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      apexDetails: {
        serializedName: "apexDetails",
        type: {
          name: "Composite",
          className: "ApexDetailsType",
        },
      },
      availableUpgradeVersions: {
        serializedName: "availableUpgradeVersions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      connectionStrings: {
        serializedName: "connectionStrings",
        type: {
          name: "Composite",
          className: "ConnectionStringType",
        },
      },
      connectionUrls: {
        serializedName: "connectionUrls",
        type: {
          name: "Composite",
          className: "ConnectionUrlType",
        },
      },
      dataSafeStatus: {
        serializedName: "dataSafeStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      databaseEdition: {
        serializedName: "databaseEdition",
        type: {
          name: "String",
        },
      },
      autonomousDatabaseId: {
        serializedName: "autonomousDatabaseId",
        type: {
          name: "String",
        },
      },
      inMemoryAreaInGbs: {
        serializedName: "inMemoryAreaInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      isPreview: {
        serializedName: "isPreview",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      localAdgAutoFailoverMaxDataLossLimit: {
        constraints: {
          InclusiveMaximum: 3600,
          InclusiveMinimum: 0,
        },
        serializedName: "localAdgAutoFailoverMaxDataLossLimit",
        type: {
          name: "Number",
        },
      },
      memoryPerOracleComputeUnitInGbs: {
        serializedName: "memoryPerOracleComputeUnitInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      openMode: {
        serializedName: "openMode",
        type: {
          name: "String",
        },
      },
      operationsInsightsStatus: {
        serializedName: "operationsInsightsStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      permissionLevel: {
        serializedName: "permissionLevel",
        type: {
          name: "String",
        },
      },
      privateEndpoint: {
        serializedName: "privateEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisionableCpus: {
        serializedName: "provisionableCpus",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number",
            },
          },
        },
      },
      role: {
        serializedName: "role",
        type: {
          name: "String",
        },
      },
      serviceConsoleUrl: {
        constraints: {
          MaxLength: 255,
          MinLength: 10,
        },
        serializedName: "serviceConsoleUrl",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      sqlWebDeveloperUrl: {
        constraints: {
          MaxLength: 2048,
          MinLength: 10,
        },
        serializedName: "sqlWebDeveloperUrl",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      supportedRegionsToCloneTo: {
        constraints: {
          MaxItems: 50,
        },
        serializedName: "supportedRegionsToCloneTo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      timeDataGuardRoleChanged: {
        serializedName: "timeDataGuardRoleChanged",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeDeletionOfFreeAutonomousDatabase: {
        serializedName: "timeDeletionOfFreeAutonomousDatabase",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeLocalDataGuardEnabled: {
        serializedName: "timeLocalDataGuardEnabled",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeOfLastFailover: {
        serializedName: "timeOfLastFailover",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeOfLastRefresh: {
        serializedName: "timeOfLastRefresh",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeOfLastRefreshPoint: {
        serializedName: "timeOfLastRefreshPoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeOfLastSwitchover: {
        serializedName: "timeOfLastSwitchover",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeReclamationOfFreeAutonomousDatabase: {
        serializedName: "timeReclamationOfFreeAutonomousDatabase",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      usedDataStorageSizeInGbs: {
        serializedName: "usedDataStorageSizeInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      usedDataStorageSizeInTbs: {
        serializedName: "usedDataStorageSizeInTbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      ocid: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "ocid",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      backupRetentionPeriodInDays: {
        serializedName: "backupRetentionPeriodInDays",
        type: {
          name: "Number",
        },
      },
      whitelistedIps: {
        serializedName: "whitelistedIps",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 1024,
              MinLength: 1,
            },
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const CustomerContact: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomerContact",
    modelProperties: {
      email: {
        constraints: {
          MaxLength: 320,
          MinLength: 1,
        },
        serializedName: "email",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AutonomousDatabaseStandbySummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabaseStandbySummary",
    modelProperties: {
      lagTimeInSeconds: {
        serializedName: "lagTimeInSeconds",
        type: {
          name: "Number",
        },
      },
      lifecycleState: {
        serializedName: "lifecycleState",
        type: {
          name: "String",
        },
      },
      lifecycleDetails: {
        serializedName: "lifecycleDetails",
        type: {
          name: "String",
        },
      },
      timeDataGuardRoleChanged: {
        serializedName: "timeDataGuardRoleChanged",
        type: {
          name: "String",
        },
      },
      timeDisasterRecoveryRoleChanged: {
        serializedName: "timeDisasterRecoveryRoleChanged",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ScheduledOperationsType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduledOperationsType",
    modelProperties: {
      dayOfWeek: {
        serializedName: "dayOfWeek",
        type: {
          name: "Composite",
          className: "DayOfWeek",
        },
      },
      scheduledStartTime: {
        constraints: {
          MaxLength: 50,
          MinLength: 1,
        },
        serializedName: "scheduledStartTime",
        type: {
          name: "String",
        },
      },
      scheduledStopTime: {
        constraints: {
          MaxLength: 50,
          MinLength: 1,
        },
        serializedName: "scheduledStopTime",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DayOfWeek: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DayOfWeek",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApexDetailsType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApexDetailsType",
    modelProperties: {
      apexVersion: {
        serializedName: "apexVersion",
        type: {
          name: "String",
        },
      },
      ordsVersion: {
        serializedName: "ordsVersion",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ConnectionStringType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionStringType",
    modelProperties: {
      allConnectionStrings: {
        serializedName: "allConnectionStrings",
        type: {
          name: "Composite",
          className: "AllConnectionStringType",
        },
      },
      dedicated: {
        constraints: {
          MaxLength: 255,
          MinLength: 10,
        },
        serializedName: "dedicated",
        type: {
          name: "String",
        },
      },
      high: {
        constraints: {
          MaxLength: 255,
          MinLength: 10,
        },
        serializedName: "high",
        type: {
          name: "String",
        },
      },
      low: {
        constraints: {
          MaxLength: 255,
          MinLength: 10,
        },
        serializedName: "low",
        type: {
          name: "String",
        },
      },
      medium: {
        constraints: {
          MaxLength: 255,
          MinLength: 10,
        },
        serializedName: "medium",
        type: {
          name: "String",
        },
      },
      profiles: {
        serializedName: "profiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProfileType",
            },
          },
        },
      },
    },
  },
};

export const AllConnectionStringType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AllConnectionStringType",
    modelProperties: {
      high: {
        constraints: {
          MaxLength: 255,
          MinLength: 10,
        },
        serializedName: "high",
        type: {
          name: "String",
        },
      },
      low: {
        constraints: {
          MaxLength: 255,
          MinLength: 10,
        },
        serializedName: "low",
        type: {
          name: "String",
        },
      },
      medium: {
        constraints: {
          MaxLength: 255,
          MinLength: 10,
        },
        serializedName: "medium",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProfileType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProfileType",
    modelProperties: {
      consumerGroup: {
        serializedName: "consumerGroup",
        type: {
          name: "String",
        },
      },
      displayName: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "displayName",
        required: true,
        type: {
          name: "String",
        },
      },
      hostFormat: {
        serializedName: "hostFormat",
        required: true,
        type: {
          name: "String",
        },
      },
      isRegional: {
        serializedName: "isRegional",
        type: {
          name: "Boolean",
        },
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        type: {
          name: "String",
        },
      },
      sessionMode: {
        serializedName: "sessionMode",
        required: true,
        type: {
          name: "String",
        },
      },
      syntaxFormat: {
        serializedName: "syntaxFormat",
        required: true,
        type: {
          name: "String",
        },
      },
      tlsAuthentication: {
        serializedName: "tlsAuthentication",
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ConnectionUrlType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionUrlType",
    modelProperties: {
      apexUrl: {
        constraints: {
          MaxLength: 512,
          MinLength: 10,
        },
        serializedName: "apexUrl",
        type: {
          name: "String",
        },
      },
      databaseTransformsUrl: {
        constraints: {
          MaxLength: 512,
          MinLength: 10,
        },
        serializedName: "databaseTransformsUrl",
        type: {
          name: "String",
        },
      },
      graphStudioUrl: {
        constraints: {
          MaxLength: 512,
          MinLength: 10,
        },
        serializedName: "graphStudioUrl",
        type: {
          name: "String",
        },
      },
      machineLearningNotebookUrl: {
        constraints: {
          MaxLength: 512,
          MinLength: 10,
        },
        serializedName: "machineLearningNotebookUrl",
        type: {
          name: "String",
        },
      },
      mongoDbUrl: {
        constraints: {
          MaxLength: 512,
          MinLength: 10,
        },
        serializedName: "mongoDbUrl",
        type: {
          name: "String",
        },
      },
      ordsUrl: {
        constraints: {
          MaxLength: 512,
          MinLength: 10,
        },
        serializedName: "ordsUrl",
        type: {
          name: "String",
        },
      },
      sqlDevWebUrl: {
        constraints: {
          MaxLength: 512,
          MinLength: 10,
        },
        serializedName: "sqlDevWebUrl",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const CloudExadataInfrastructureListResult: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CloudExadataInfrastructureListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "CloudExadataInfrastructure",
              },
            },
          },
        },
        nextLink: {
          serializedName: "nextLink",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const CloudExadataInfrastructureProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CloudExadataInfrastructureProperties",
      modelProperties: {
        ocid: {
          constraints: {
            MaxLength: 255,
            MinLength: 1,
          },
          serializedName: "ocid",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        computeCount: {
          serializedName: "computeCount",
          type: {
            name: "Number",
          },
        },
        storageCount: {
          serializedName: "storageCount",
          type: {
            name: "Number",
          },
        },
        totalStorageSizeInGbs: {
          serializedName: "totalStorageSizeInGbs",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        availableStorageSizeInGbs: {
          serializedName: "availableStorageSizeInGbs",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        timeCreated: {
          serializedName: "timeCreated",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        lifecycleDetails: {
          serializedName: "lifecycleDetails",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        maintenanceWindow: {
          serializedName: "maintenanceWindow",
          type: {
            name: "Composite",
            className: "MaintenanceWindow",
          },
        },
        estimatedPatchingTime: {
          serializedName: "estimatedPatchingTime",
          type: {
            name: "Composite",
            className: "EstimatedPatchingTime",
          },
        },
        customerContacts: {
          serializedName: "customerContacts",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "CustomerContact",
              },
            },
          },
        },
        provisioningState: {
          serializedName: "provisioningState",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        lifecycleState: {
          serializedName: "lifecycleState",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        shape: {
          serializedName: "shape",
          required: true,
          type: {
            name: "String",
          },
        },
        ociUrl: {
          serializedName: "ociUrl",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        cpuCount: {
          serializedName: "cpuCount",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        maxCpuCount: {
          serializedName: "maxCpuCount",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        memorySizeInGbs: {
          serializedName: "memorySizeInGbs",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        maxMemoryInGbs: {
          serializedName: "maxMemoryInGbs",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        dbNodeStorageSizeInGbs: {
          serializedName: "dbNodeStorageSizeInGbs",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        maxDbNodeStorageSizeInGbs: {
          serializedName: "maxDbNodeStorageSizeInGbs",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        dataStorageSizeInTbs: {
          serializedName: "dataStorageSizeInTbs",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        maxDataStorageInTbs: {
          serializedName: "maxDataStorageInTbs",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        dbServerVersion: {
          serializedName: "dbServerVersion",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        storageServerVersion: {
          serializedName: "storageServerVersion",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        activatedStorageCount: {
          serializedName: "activatedStorageCount",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        additionalStorageCount: {
          serializedName: "additionalStorageCount",
          readOnly: true,
          type: {
            name: "Number",
          },
        },
        displayName: {
          constraints: {
            MaxLength: 255,
            MinLength: 1,
          },
          serializedName: "displayName",
          required: true,
          type: {
            name: "String",
          },
        },
        lastMaintenanceRunId: {
          constraints: {
            MaxLength: 255,
            MinLength: 1,
          },
          serializedName: "lastMaintenanceRunId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        nextMaintenanceRunId: {
          constraints: {
            MaxLength: 255,
            MinLength: 1,
          },
          serializedName: "nextMaintenanceRunId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        monthlyDbServerVersion: {
          serializedName: "monthlyDbServerVersion",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        monthlyStorageServerVersion: {
          serializedName: "monthlyStorageServerVersion",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const MaintenanceWindow: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceWindow",
    modelProperties: {
      preference: {
        serializedName: "preference",
        type: {
          name: "String",
        },
      },
      months: {
        serializedName: "months",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Month",
            },
          },
        },
      },
      weeksOfMonth: {
        serializedName: "weeksOfMonth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number",
            },
          },
        },
      },
      daysOfWeek: {
        serializedName: "daysOfWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DayOfWeek",
            },
          },
        },
      },
      hoursOfDay: {
        serializedName: "hoursOfDay",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number",
            },
          },
        },
      },
      leadTimeInWeeks: {
        serializedName: "leadTimeInWeeks",
        type: {
          name: "Number",
        },
      },
      patchingMode: {
        serializedName: "patchingMode",
        type: {
          name: "String",
        },
      },
      customActionTimeoutInMins: {
        constraints: {
          InclusiveMaximum: 120,
          InclusiveMinimum: 0,
        },
        serializedName: "customActionTimeoutInMins",
        type: {
          name: "Number",
        },
      },
      isCustomActionTimeoutEnabled: {
        serializedName: "isCustomActionTimeoutEnabled",
        type: {
          name: "Boolean",
        },
      },
      isMonthlyPatchingEnabled: {
        serializedName: "isMonthlyPatchingEnabled",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const Month: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Month",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EstimatedPatchingTime: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EstimatedPatchingTime",
    modelProperties: {
      estimatedDbServerPatchingTime: {
        constraints: {
          InclusiveMaximum: 3000,
          InclusiveMinimum: 1,
        },
        serializedName: "estimatedDbServerPatchingTime",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      estimatedNetworkSwitchesPatchingTime: {
        constraints: {
          InclusiveMaximum: 3000,
          InclusiveMinimum: 1,
        },
        serializedName: "estimatedNetworkSwitchesPatchingTime",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      estimatedStorageServerPatchingTime: {
        constraints: {
          InclusiveMaximum: 3000,
          InclusiveMinimum: 1,
        },
        serializedName: "estimatedStorageServerPatchingTime",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      totalEstimatedPatchingTime: {
        constraints: {
          InclusiveMaximum: 3000,
          InclusiveMinimum: 1,
        },
        serializedName: "totalEstimatedPatchingTime",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const CloudVmClusterListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudVmClusterListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudVmCluster",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CloudVmClusterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudVmClusterProperties",
    modelProperties: {
      ocid: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "ocid",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      listenerPort: {
        serializedName: "listenerPort",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      nodeCount: {
        serializedName: "nodeCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      storageSizeInGbs: {
        serializedName: "storageSizeInGbs",
        type: {
          name: "Number",
        },
      },
      dataStorageSizeInTbs: {
        serializedName: "dataStorageSizeInTbs",
        type: {
          name: "Number",
        },
      },
      dbNodeStorageSizeInGbs: {
        serializedName: "dbNodeStorageSizeInGbs",
        type: {
          name: "Number",
        },
      },
      memorySizeInGbs: {
        serializedName: "memorySizeInGbs",
        type: {
          name: "Number",
        },
      },
      timeCreated: {
        serializedName: "timeCreated",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lifecycleDetails: {
        serializedName: "lifecycleDetails",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeZone: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "timeZone",
        type: {
          name: "String",
        },
      },
      zoneId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "zoneId",
        type: {
          name: "String",
        },
      },
      hostname: {
        constraints: {
          MaxLength: 23,
          MinLength: 1,
        },
        serializedName: "hostname",
        required: true,
        type: {
          name: "String",
        },
      },
      domain: {
        serializedName: "domain",
        type: {
          name: "String",
        },
      },
      cpuCoreCount: {
        serializedName: "cpuCoreCount",
        required: true,
        type: {
          name: "Number",
        },
      },
      ocpuCount: {
        serializedName: "ocpuCount",
        type: {
          name: "Number",
        },
      },
      clusterName: {
        constraints: {
          MaxLength: 11,
          MinLength: 1,
        },
        serializedName: "clusterName",
        type: {
          name: "String",
        },
      },
      dataStoragePercentage: {
        serializedName: "dataStoragePercentage",
        type: {
          name: "Number",
        },
      },
      isLocalBackupEnabled: {
        defaultValue: false,
        serializedName: "isLocalBackupEnabled",
        type: {
          name: "Boolean",
        },
      },
      cloudExadataInfrastructureId: {
        serializedName: "cloudExadataInfrastructureId",
        required: true,
        type: {
          name: "String",
        },
      },
      isSparseDiskgroupEnabled: {
        defaultValue: false,
        serializedName: "isSparseDiskgroupEnabled",
        type: {
          name: "Boolean",
        },
      },
      systemVersion: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "systemVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      sshPublicKeys: {
        serializedName: "sshPublicKeys",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      licenseModel: {
        serializedName: "licenseModel",
        type: {
          name: "String",
        },
      },
      diskRedundancy: {
        serializedName: "diskRedundancy",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      scanIpIds: {
        serializedName: "scanIpIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      vipIds: {
        serializedName: "vipIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      scanDnsName: {
        constraints: {
          MaxLength: 72,
          MinLength: 1,
        },
        serializedName: "scanDnsName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      scanListenerPortTcp: {
        serializedName: "scanListenerPortTcp",
        type: {
          name: "Number",
        },
      },
      scanListenerPortTcpSsl: {
        serializedName: "scanListenerPortTcpSsl",
        type: {
          name: "Number",
        },
      },
      scanDnsRecordId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "scanDnsRecordId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      shape: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "shape",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lifecycleState: {
        serializedName: "lifecycleState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      vnetId: {
        serializedName: "vnetId",
        required: true,
        type: {
          name: "String",
        },
      },
      giVersion: {
        serializedName: "giVersion",
        required: true,
        type: {
          name: "String",
        },
      },
      ociUrl: {
        serializedName: "ociUrl",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      nsgUrl: {
        serializedName: "nsgUrl",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      subnetId: {
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String",
        },
      },
      backupSubnetCidr: {
        constraints: {
          MaxLength: 32,
          MinLength: 1,
        },
        serializedName: "backupSubnetCidr",
        type: {
          name: "String",
        },
      },
      nsgCidrs: {
        serializedName: "nsgCidrs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NSGCidr",
            },
          },
        },
      },
      dataCollectionOptions: {
        serializedName: "dataCollectionOptions",
        type: {
          name: "Composite",
          className: "DataCollectionOptions",
        },
      },
      displayName: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "displayName",
        required: true,
        type: {
          name: "String",
        },
      },
      computeNodes: {
        serializedName: "computeNodes",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 255,
              MinLength: 1,
            },
            type: {
              name: "String",
            },
          },
        },
      },
      iormConfigCache: {
        serializedName: "iormConfigCache",
        type: {
          name: "Composite",
          className: "ExadataIormConfig",
        },
      },
      lastUpdateHistoryEntryId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "lastUpdateHistoryEntryId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      dbServers: {
        serializedName: "dbServers",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 255,
              MinLength: 1,
            },
            type: {
              name: "String",
            },
          },
        },
      },
      compartmentId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "compartmentId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      subnetOcid: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "subnetOcid",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NSGCidr: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NSGCidr",
    modelProperties: {
      source: {
        constraints: {
          MaxLength: 128,
          MinLength: 1,
        },
        serializedName: "source",
        required: true,
        type: {
          name: "String",
        },
      },
      destinationPortRange: {
        serializedName: "destinationPortRange",
        type: {
          name: "Composite",
          className: "PortRange",
        },
      },
    },
  },
};

export const PortRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PortRange",
    modelProperties: {
      min: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1,
        },
        serializedName: "min",
        required: true,
        type: {
          name: "Number",
        },
      },
      max: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1,
        },
        serializedName: "max",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const DataCollectionOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataCollectionOptions",
    modelProperties: {
      isDiagnosticsEventsEnabled: {
        defaultValue: false,
        serializedName: "isDiagnosticsEventsEnabled",
        type: {
          name: "Boolean",
        },
      },
      isHealthMonitoringEnabled: {
        defaultValue: false,
        serializedName: "isHealthMonitoringEnabled",
        type: {
          name: "Boolean",
        },
      },
      isIncidentLogsEnabled: {
        defaultValue: false,
        serializedName: "isIncidentLogsEnabled",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const ExadataIormConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExadataIormConfig",
    modelProperties: {
      dbPlans: {
        serializedName: "dbPlans",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DbIormConfig",
            },
          },
        },
      },
      lifecycleDetails: {
        serializedName: "lifecycleDetails",
        type: {
          name: "String",
        },
      },
      lifecycleState: {
        serializedName: "lifecycleState",
        type: {
          name: "String",
        },
      },
      objective: {
        serializedName: "objective",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DbIormConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DbIormConfig",
    modelProperties: {
      dbName: {
        serializedName: "dbName",
        type: {
          name: "String",
        },
      },
      flashCacheLimit: {
        serializedName: "flashCacheLimit",
        type: {
          name: "String",
        },
      },
      share: {
        constraints: {
          InclusiveMaximum: 32,
          InclusiveMinimum: 1,
        },
        serializedName: "share",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const AutonomousDatabaseCharacterSetListResult: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AutonomousDatabaseCharacterSetListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "AutonomousDatabaseCharacterSet",
              },
            },
          },
        },
        nextLink: {
          serializedName: "nextLink",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const AutonomousDatabaseCharacterSetProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AutonomousDatabaseCharacterSetProperties",
      modelProperties: {
        characterSet: {
          constraints: {
            MaxLength: 255,
            MinLength: 1,
          },
          serializedName: "characterSet",
          required: true,
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const AutonomousDatabaseNationalCharacterSetListResult: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AutonomousDatabaseNationalCharacterSetListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "AutonomousDatabaseNationalCharacterSet",
              },
            },
          },
        },
        nextLink: {
          serializedName: "nextLink",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const AutonomousDatabaseNationalCharacterSetProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AutonomousDatabaseNationalCharacterSetProperties",
      modelProperties: {
        characterSet: {
          constraints: {
            MaxLength: 255,
            MinLength: 1,
          },
          serializedName: "characterSet",
          required: true,
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const AutonomousDbVersionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDbVersionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AutonomousDbVersion",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AutonomousDbVersionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDbVersionProperties",
    modelProperties: {
      version: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "version",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      dbWorkload: {
        serializedName: "dbWorkload",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDefaultForFree: {
        serializedName: "isDefaultForFree",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      isDefaultForPaid: {
        serializedName: "isDefaultForPaid",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      isFreeTierEnabled: {
        serializedName: "isFreeTierEnabled",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      isPaidEnabled: {
        serializedName: "isPaidEnabled",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const DbSystemShapeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DbSystemShapeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DbSystemShape",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DbSystemShapeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DbSystemShapeProperties",
    modelProperties: {
      shapeFamily: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "shapeFamily",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      availableCoreCount: {
        serializedName: "availableCoreCount",
        required: true,
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      minimumCoreCount: {
        serializedName: "minimumCoreCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      runtimeMinimumCoreCount: {
        serializedName: "runtimeMinimumCoreCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      coreCountIncrement: {
        serializedName: "coreCountIncrement",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      minStorageCount: {
        serializedName: "minStorageCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      maxStorageCount: {
        serializedName: "maxStorageCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      availableDataStoragePerServerInTbs: {
        serializedName: "availableDataStoragePerServerInTbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      availableMemoryPerNodeInGbs: {
        serializedName: "availableMemoryPerNodeInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      availableDbNodePerNodeInGbs: {
        serializedName: "availableDbNodePerNodeInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      minCoreCountPerNode: {
        serializedName: "minCoreCountPerNode",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      availableMemoryInGbs: {
        serializedName: "availableMemoryInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      minMemoryPerNodeInGbs: {
        serializedName: "minMemoryPerNodeInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      availableDbNodeStorageInGbs: {
        serializedName: "availableDbNodeStorageInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      minDbNodeStoragePerNodeInGbs: {
        serializedName: "minDbNodeStoragePerNodeInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      availableDataStorageInTbs: {
        serializedName: "availableDataStorageInTbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      minDataStorageInTbs: {
        serializedName: "minDataStorageInTbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      minimumNodeCount: {
        serializedName: "minimumNodeCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      maximumNodeCount: {
        serializedName: "maximumNodeCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      availableCoreCountPerNode: {
        serializedName: "availableCoreCountPerNode",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const DnsPrivateViewListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DnsPrivateViewListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DnsPrivateView",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DnsPrivateViewProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DnsPrivateViewProperties",
    modelProperties: {
      ocid: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "ocid",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isProtected: {
        serializedName: "isProtected",
        required: true,
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      lifecycleState: {
        serializedName: "lifecycleState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      self: {
        serializedName: "self",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeCreated: {
        serializedName: "timeCreated",
        required: true,
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      timeUpdated: {
        serializedName: "timeUpdated",
        required: true,
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DnsPrivateZoneListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DnsPrivateZoneListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DnsPrivateZone",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DnsPrivateZoneProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DnsPrivateZoneProperties",
    modelProperties: {
      ocid: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "ocid",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isProtected: {
        serializedName: "isProtected",
        required: true,
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      lifecycleState: {
        serializedName: "lifecycleState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      self: {
        serializedName: "self",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      serial: {
        serializedName: "serial",
        required: true,
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      version: {
        serializedName: "version",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      viewId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "viewId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      zoneType: {
        serializedName: "zoneType",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeCreated: {
        serializedName: "timeCreated",
        required: true,
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GiVersionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GiVersionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GiVersion",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GiVersionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GiVersionProperties",
    modelProperties: {
      version: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "version",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OracleSubscriptionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OracleSubscriptionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OracleSubscription",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OracleSubscriptionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OracleSubscriptionProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      saasSubscriptionId: {
        serializedName: "saasSubscriptionId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      cloudAccountId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "cloudAccountId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      cloudAccountState: {
        serializedName: "cloudAccountState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      termUnit: {
        serializedName: "termUnit",
        type: {
          name: "String",
        },
      },
      productCode: {
        serializedName: "productCode",
        type: {
          name: "String",
        },
      },
      intent: {
        serializedName: "intent",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Plan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Plan",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      publisher: {
        serializedName: "publisher",
        required: true,
        type: {
          name: "String",
        },
      },
      product: {
        serializedName: "product",
        required: true,
        type: {
          name: "String",
        },
      },
      promotionCode: {
        serializedName: "promotionCode",
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "version",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OracleSubscriptionUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OracleSubscriptionUpdate",
    modelProperties: {
      plan: {
        serializedName: "plan",
        type: {
          name: "Composite",
          className: "ResourcePlanTypeUpdate",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OracleSubscriptionUpdateProperties",
        },
      },
    },
  },
};

export const ResourcePlanTypeUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourcePlanTypeUpdate",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String",
        },
      },
      product: {
        serializedName: "product",
        type: {
          name: "String",
        },
      },
      promotionCode: {
        serializedName: "promotionCode",
        type: {
          name: "String",
        },
      },
      version: {
        serializedName: "version",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OracleSubscriptionUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OracleSubscriptionUpdateProperties",
    modelProperties: {
      productCode: {
        serializedName: "productCode",
        type: {
          name: "String",
        },
      },
      intent: {
        serializedName: "intent",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ActivationLinks: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActivationLinks",
    modelProperties: {
      newCloudAccountActivationLink: {
        serializedName: "newCloudAccountActivationLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      existingCloudAccountActivationLink: {
        serializedName: "existingCloudAccountActivationLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CloudAccountDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudAccountDetails",
    modelProperties: {
      cloudAccountName: {
        serializedName: "cloudAccountName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      cloudAccountHomeRegion: {
        serializedName: "cloudAccountHomeRegion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SaasSubscriptionDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SaasSubscriptionDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      subscriptionName: {
        serializedName: "subscriptionName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeCreated: {
        serializedName: "timeCreated",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      offerId: {
        serializedName: "offerId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      planId: {
        serializedName: "planId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      saasSubscriptionStatus: {
        serializedName: "saasSubscriptionStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      publisherId: {
        serializedName: "publisherId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      purchaserEmailId: {
        serializedName: "purchaserEmailId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      purchaserTenantId: {
        serializedName: "purchaserTenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      termUnit: {
        serializedName: "termUnit",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isAutoRenew: {
        serializedName: "isAutoRenew",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      isFreeTrial: {
        serializedName: "isFreeTrial",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const AutonomousDatabaseUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabaseUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AutonomousDatabaseUpdateProperties",
        },
      },
    },
  },
};

export const AutonomousDatabaseUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabaseUpdateProperties",
    modelProperties: {
      adminPassword: {
        serializedName: "adminPassword",
        type: {
          name: "String",
        },
      },
      autonomousMaintenanceScheduleType: {
        serializedName: "autonomousMaintenanceScheduleType",
        type: {
          name: "String",
        },
      },
      computeCount: {
        constraints: {
          InclusiveMaximum: 512,
          InclusiveMinimum: 0.1,
        },
        serializedName: "computeCount",
        type: {
          name: "Number",
        },
      },
      cpuCoreCount: {
        constraints: {
          InclusiveMaximum: 128,
          InclusiveMinimum: 1,
        },
        serializedName: "cpuCoreCount",
        type: {
          name: "Number",
        },
      },
      customerContacts: {
        serializedName: "customerContacts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomerContact",
            },
          },
        },
      },
      dataStorageSizeInTbs: {
        constraints: {
          InclusiveMaximum: 384,
          InclusiveMinimum: 1,
        },
        serializedName: "dataStorageSizeInTbs",
        type: {
          name: "Number",
        },
      },
      dataStorageSizeInGbs: {
        constraints: {
          InclusiveMaximum: 393216,
          InclusiveMinimum: 20,
        },
        serializedName: "dataStorageSizeInGbs",
        type: {
          name: "Number",
        },
      },
      displayName: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
      isAutoScalingEnabled: {
        serializedName: "isAutoScalingEnabled",
        type: {
          name: "Boolean",
        },
      },
      isAutoScalingForStorageEnabled: {
        serializedName: "isAutoScalingForStorageEnabled",
        type: {
          name: "Boolean",
        },
      },
      peerDbId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "peerDbId",
        type: {
          name: "String",
        },
      },
      isLocalDataGuardEnabled: {
        serializedName: "isLocalDataGuardEnabled",
        type: {
          name: "Boolean",
        },
      },
      isMtlsConnectionRequired: {
        serializedName: "isMtlsConnectionRequired",
        type: {
          name: "Boolean",
        },
      },
      licenseModel: {
        serializedName: "licenseModel",
        type: {
          name: "String",
        },
      },
      scheduledOperations: {
        serializedName: "scheduledOperations",
        type: {
          name: "Composite",
          className: "ScheduledOperationsTypeUpdate",
        },
      },
      databaseEdition: {
        serializedName: "databaseEdition",
        type: {
          name: "String",
        },
      },
      localAdgAutoFailoverMaxDataLossLimit: {
        constraints: {
          InclusiveMaximum: 3600,
          InclusiveMinimum: 0,
        },
        serializedName: "localAdgAutoFailoverMaxDataLossLimit",
        type: {
          name: "Number",
        },
      },
      openMode: {
        serializedName: "openMode",
        type: {
          name: "String",
        },
      },
      permissionLevel: {
        serializedName: "permissionLevel",
        type: {
          name: "String",
        },
      },
      role: {
        serializedName: "role",
        type: {
          name: "String",
        },
      },
      backupRetentionPeriodInDays: {
        serializedName: "backupRetentionPeriodInDays",
        type: {
          name: "Number",
        },
      },
      whitelistedIps: {
        serializedName: "whitelistedIps",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 1024,
              MinLength: 1,
            },
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const ScheduledOperationsTypeUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduledOperationsTypeUpdate",
    modelProperties: {
      dayOfWeek: {
        serializedName: "dayOfWeek",
        type: {
          name: "Composite",
          className: "DayOfWeekUpdate",
        },
      },
      scheduledStartTime: {
        constraints: {
          MaxLength: 50,
          MinLength: 1,
        },
        serializedName: "scheduledStartTime",
        type: {
          name: "String",
        },
      },
      scheduledStopTime: {
        constraints: {
          MaxLength: 50,
          MinLength: 1,
        },
        serializedName: "scheduledStopTime",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DayOfWeekUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DayOfWeekUpdate",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AutonomousDatabaseBackupListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabaseBackupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AutonomousDatabaseBackup",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AutonomousDatabaseBackupProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabaseBackupProperties",
    modelProperties: {
      autonomousDatabaseId: {
        serializedName: "autonomousDatabaseId",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      databaseSizeInTBs: {
        serializedName: "databaseSizeInTBs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      dbVersion: {
        serializedName: "dbVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
      ocid: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "ocid",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isAutomatic: {
        serializedName: "isAutomatic",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      isRestorable: {
        serializedName: "isRestorable",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      lifecycleDetails: {
        serializedName: "lifecycleDetails",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lifecycleState: {
        serializedName: "lifecycleState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      retentionPeriodInDays: {
        constraints: {
          InclusiveMaximum: 3650,
          InclusiveMinimum: 90,
        },
        serializedName: "retentionPeriodInDays",
        type: {
          name: "Number",
        },
      },
      sizeInTBs: {
        serializedName: "sizeInTBs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      timeAvailableTil: {
        serializedName: "timeAvailableTil",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      timeEnded: {
        serializedName: "timeEnded",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AutonomousDatabaseBackupUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabaseBackupUpdate",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AutonomousDatabaseBackupUpdateProperties",
        },
      },
    },
  },
};

export const AutonomousDatabaseBackupUpdateProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AutonomousDatabaseBackupUpdateProperties",
      modelProperties: {
        retentionPeriodInDays: {
          constraints: {
            InclusiveMaximum: 3650,
            InclusiveMinimum: 90,
          },
          serializedName: "retentionPeriodInDays",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const PeerDbDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeerDbDetails",
    modelProperties: {
      peerDbId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "peerDbId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GenerateAutonomousDatabaseWalletDetails: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "GenerateAutonomousDatabaseWalletDetails",
      modelProperties: {
        generateType: {
          serializedName: "generateType",
          type: {
            name: "String",
          },
        },
        isRegional: {
          serializedName: "isRegional",
          type: {
            name: "Boolean",
          },
        },
        password: {
          serializedName: "password",
          required: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const AutonomousDatabaseWalletFile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabaseWalletFile",
    modelProperties: {
      walletFiles: {
        serializedName: "walletFiles",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CloudExadataInfrastructureUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudExadataInfrastructureUpdate",
    modelProperties: {
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CloudExadataInfrastructureUpdateProperties",
        },
      },
    },
  },
};

export const CloudExadataInfrastructureUpdateProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CloudExadataInfrastructureUpdateProperties",
      modelProperties: {
        computeCount: {
          serializedName: "computeCount",
          type: {
            name: "Number",
          },
        },
        storageCount: {
          serializedName: "storageCount",
          type: {
            name: "Number",
          },
        },
        maintenanceWindow: {
          serializedName: "maintenanceWindow",
          type: {
            name: "Composite",
            className: "MaintenanceWindow",
          },
        },
        customerContacts: {
          serializedName: "customerContacts",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "CustomerContact",
              },
            },
          },
        },
        displayName: {
          constraints: {
            MaxLength: 255,
            MinLength: 1,
          },
          serializedName: "displayName",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const DbServerListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DbServerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DbServer",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DbServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DbServerProperties",
    modelProperties: {
      ocid: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "ocid",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      displayName: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      compartmentId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "compartmentId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      exadataInfrastructureId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "exadataInfrastructureId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      cpuCoreCount: {
        serializedName: "cpuCoreCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      dbServerPatchingDetails: {
        serializedName: "dbServerPatchingDetails",
        type: {
          name: "Composite",
          className: "DbServerPatchingDetails",
        },
      },
      maxMemoryInGbs: {
        serializedName: "maxMemoryInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      dbNodeStorageSizeInGbs: {
        serializedName: "dbNodeStorageSizeInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      vmClusterIds: {
        serializedName: "vmClusterIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 255,
              MinLength: 1,
            },
            type: {
              name: "String",
            },
          },
        },
      },
      dbNodeIds: {
        serializedName: "dbNodeIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 255,
              MinLength: 1,
            },
            type: {
              name: "String",
            },
          },
        },
      },
      lifecycleDetails: {
        serializedName: "lifecycleDetails",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lifecycleState: {
        serializedName: "lifecycleState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      maxCpuCount: {
        serializedName: "maxCpuCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      autonomousVmClusterIds: {
        serializedName: "autonomousVmClusterIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 255,
              MinLength: 1,
            },
            type: {
              name: "String",
            },
          },
        },
      },
      autonomousVirtualMachineIds: {
        serializedName: "autonomousVirtualMachineIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 255,
              MinLength: 1,
            },
            type: {
              name: "String",
            },
          },
        },
      },
      maxDbNodeStorageInGbs: {
        serializedName: "maxDbNodeStorageInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      memorySizeInGbs: {
        serializedName: "memorySizeInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      shape: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "shape",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeCreated: {
        serializedName: "timeCreated",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DbServerPatchingDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DbServerPatchingDetails",
    modelProperties: {
      estimatedPatchDuration: {
        constraints: {
          InclusiveMaximum: 3000,
          InclusiveMinimum: 1,
        },
        serializedName: "estimatedPatchDuration",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      patchingStatus: {
        serializedName: "patchingStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timePatchingEnded: {
        serializedName: "timePatchingEnded",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      timePatchingStarted: {
        serializedName: "timePatchingStarted",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const CloudVmClusterUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudVmClusterUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CloudVmClusterUpdateProperties",
        },
      },
    },
  },
};

export const CloudVmClusterUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudVmClusterUpdateProperties",
    modelProperties: {
      storageSizeInGbs: {
        serializedName: "storageSizeInGbs",
        type: {
          name: "Number",
        },
      },
      dataStorageSizeInTbs: {
        serializedName: "dataStorageSizeInTbs",
        type: {
          name: "Number",
        },
      },
      dbNodeStorageSizeInGbs: {
        serializedName: "dbNodeStorageSizeInGbs",
        type: {
          name: "Number",
        },
      },
      memorySizeInGbs: {
        serializedName: "memorySizeInGbs",
        type: {
          name: "Number",
        },
      },
      cpuCoreCount: {
        serializedName: "cpuCoreCount",
        type: {
          name: "Number",
        },
      },
      ocpuCount: {
        serializedName: "ocpuCount",
        type: {
          name: "Number",
        },
      },
      sshPublicKeys: {
        serializedName: "sshPublicKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      licenseModel: {
        serializedName: "licenseModel",
        type: {
          name: "String",
        },
      },
      dataCollectionOptions: {
        serializedName: "dataCollectionOptions",
        type: {
          name: "Composite",
          className: "DataCollectionOptions",
        },
      },
      displayName: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "displayName",
        type: {
          name: "String",
        },
      },
      computeNodes: {
        serializedName: "computeNodes",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 255,
              MinLength: 1,
            },
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const AddRemoveDbNode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddRemoveDbNode",
    modelProperties: {
      dbServers: {
        serializedName: "dbServers",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MaxLength: 255,
              MinLength: 1,
            },
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const DbNodeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DbNodeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DbNode",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DbNodeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DbNodeProperties",
    modelProperties: {
      ocid: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "ocid",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      additionalDetails: {
        serializedName: "additionalDetails",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      backupIpId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "backupIpId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      backupVnic2Id: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "backupVnic2Id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      backupVnicId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "backupVnicId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      cpuCoreCount: {
        serializedName: "cpuCoreCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      dbNodeStorageSizeInGbs: {
        serializedName: "dbNodeStorageSizeInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      dbServerId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "dbServerId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      dbSystemId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "dbSystemId",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      faultDomain: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "faultDomain",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      hostIpId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "hostIpId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      hostname: {
        serializedName: "hostname",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lifecycleState: {
        serializedName: "lifecycleState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lifecycleDetails: {
        serializedName: "lifecycleDetails",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      maintenanceType: {
        serializedName: "maintenanceType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      memorySizeInGbs: {
        serializedName: "memorySizeInGbs",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      softwareStorageSizeInGb: {
        serializedName: "softwareStorageSizeInGb",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      timeCreated: {
        serializedName: "timeCreated",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      timeMaintenanceWindowEnd: {
        serializedName: "timeMaintenanceWindowEnd",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      timeMaintenanceWindowStart: {
        serializedName: "timeMaintenanceWindowStart",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      vnic2Id: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "vnic2Id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      vnicId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "vnicId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DbNodeAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DbNodeAction",
    modelProperties: {
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateIpAddressesFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateIpAddressesFilter",
    modelProperties: {
      subnetId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String",
        },
      },
      vnicId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "vnicId",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateIpAddressProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateIpAddressProperties",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        required: true,
        type: {
          name: "String",
        },
      },
      hostnameLabel: {
        serializedName: "hostnameLabel",
        required: true,
        type: {
          name: "String",
        },
      },
      ocid: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "ocid",
        required: true,
        type: {
          name: "String",
        },
      },
      ipAddress: {
        serializedName: "ipAddress",
        required: true,
        type: {
          name: "String",
        },
      },
      subnetId: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VirtualNetworkAddressListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkAddressListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkAddress",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VirtualNetworkAddressProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkAddressProperties",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String",
        },
      },
      vmOcid: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "vmOcid",
        type: {
          name: "String",
        },
      },
      ocid: {
        constraints: {
          MaxLength: 255,
          MinLength: 1,
        },
        serializedName: "ocid",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      domain: {
        serializedName: "domain",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lifecycleDetails: {
        serializedName: "lifecycleDetails",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lifecycleState: {
        serializedName: "lifecycleState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeAssigned: {
        serializedName: "timeAssigned",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ValidationError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidationError",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ValidationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidationResult",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        readOnly: true,
        type: {
          name: "String",
        },
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ValidationError",
        },
      },
    },
  },
};

export const AutonomousDatabaseCloneProperties: coreClient.CompositeMapper = {
  serializedName: "Clone",
  type: {
    name: "Composite",
    className: "AutonomousDatabaseCloneProperties",
    uberParent: "AutonomousDatabaseBaseProperties",
    polymorphicDiscriminator:
      AutonomousDatabaseBaseProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...AutonomousDatabaseBaseProperties.type.modelProperties,
      source: {
        serializedName: "source",
        type: {
          name: "String",
        },
      },
      sourceId: {
        serializedName: "sourceId",
        required: true,
        type: {
          name: "String",
        },
      },
      cloneType: {
        serializedName: "cloneType",
        required: true,
        type: {
          name: "String",
        },
      },
      isReconnectCloneEnabled: {
        serializedName: "isReconnectCloneEnabled",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      isRefreshableClone: {
        serializedName: "isRefreshableClone",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      refreshableModel: {
        serializedName: "refreshableModel",
        type: {
          name: "String",
        },
      },
      refreshableStatus: {
        serializedName: "refreshableStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      timeUntilReconnectCloneEnabled: {
        serializedName: "timeUntilReconnectCloneEnabled",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AutonomousDatabaseProperties: coreClient.CompositeMapper = {
  serializedName: "Regular",
  type: {
    name: "Composite",
    className: "AutonomousDatabaseProperties",
    uberParent: "AutonomousDatabaseBaseProperties",
    polymorphicDiscriminator:
      AutonomousDatabaseBaseProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...AutonomousDatabaseBaseProperties.type.modelProperties,
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const AutonomousDatabase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabase",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AutonomousDatabaseBaseProperties",
        },
      },
    },
  },
};

export const CloudExadataInfrastructure: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudExadataInfrastructure",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CloudExadataInfrastructureProperties",
        },
      },
      zones: {
        serializedName: "zones",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const CloudVmCluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudVmCluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CloudVmClusterProperties",
        },
      },
    },
  },
};

export const AutonomousDatabaseCharacterSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabaseCharacterSet",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AutonomousDatabaseCharacterSetProperties",
        },
      },
    },
  },
};

export const AutonomousDatabaseNationalCharacterSet: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AutonomousDatabaseNationalCharacterSet",
      modelProperties: {
        ...ProxyResource.type.modelProperties,
        properties: {
          serializedName: "properties",
          type: {
            name: "Composite",
            className: "AutonomousDatabaseNationalCharacterSetProperties",
          },
        },
      },
    },
  };

export const AutonomousDbVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDbVersion",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AutonomousDbVersionProperties",
        },
      },
    },
  },
};

export const DbSystemShape: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DbSystemShape",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DbSystemShapeProperties",
        },
      },
    },
  },
};

export const DnsPrivateView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DnsPrivateView",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DnsPrivateViewProperties",
        },
      },
    },
  },
};

export const DnsPrivateZone: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DnsPrivateZone",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DnsPrivateZoneProperties",
        },
      },
    },
  },
};

export const GiVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GiVersion",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "GiVersionProperties",
        },
      },
    },
  },
};

export const OracleSubscription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OracleSubscription",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OracleSubscriptionProperties",
        },
      },
      plan: {
        serializedName: "plan",
        type: {
          name: "Composite",
          className: "Plan",
        },
      },
    },
  },
};

export const AutonomousDatabaseBackup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabaseBackup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AutonomousDatabaseBackupProperties",
        },
      },
    },
  },
};

export const DbServer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DbServer",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DbServerProperties",
        },
      },
    },
  },
};

export const DbNode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DbNode",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DbNodeProperties",
        },
      },
    },
  },
};

export const VirtualNetworkAddress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkAddress",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VirtualNetworkAddressProperties",
        },
      },
    },
  },
};

export const AutonomousDatabasesCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AutonomousDatabasesCreateOrUpdateHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const AutonomousDatabasesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabasesUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AutonomousDatabasesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabasesDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AutonomousDatabasesFailoverHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutonomousDatabasesFailoverHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AutonomousDatabasesSwitchoverHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AutonomousDatabasesSwitchoverHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const CloudExadataInfrastructuresCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CloudExadataInfrastructuresCreateOrUpdateHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const CloudExadataInfrastructuresUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CloudExadataInfrastructuresUpdateHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const CloudExadataInfrastructuresDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CloudExadataInfrastructuresDeleteHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const CloudExadataInfrastructuresAddStorageCapacityHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CloudExadataInfrastructuresAddStorageCapacityHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const CloudVmClustersCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "CloudVmClustersCreateOrUpdateHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const CloudVmClustersUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudVmClustersUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CloudVmClustersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudVmClustersDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CloudVmClustersAddVmsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudVmClustersAddVmsHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CloudVmClustersRemoveVmsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudVmClustersRemoveVmsHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OracleSubscriptionsCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "OracleSubscriptionsCreateOrUpdateHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const OracleSubscriptionsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OracleSubscriptionsUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OracleSubscriptionsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OracleSubscriptionsDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OracleSubscriptionsListActivationLinksHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "OracleSubscriptionsListActivationLinksHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const OracleSubscriptionsListCloudAccountDetailsHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "OracleSubscriptionsListCloudAccountDetailsHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const OracleSubscriptionsListSaasSubscriptionDetailsHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "OracleSubscriptionsListSaasSubscriptionDetailsHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const AutonomousDatabaseBackupsCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AutonomousDatabaseBackupsCreateOrUpdateHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const AutonomousDatabaseBackupsUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AutonomousDatabaseBackupsUpdateHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const AutonomousDatabaseBackupsDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "AutonomousDatabaseBackupsDeleteHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const DbNodesActionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DbNodesActionHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const VirtualNetworkAddressesCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "VirtualNetworkAddressesCreateOrUpdateHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
      },
    },
  };

export const VirtualNetworkAddressesDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "VirtualNetworkAddressesDeleteHeaders",
      modelProperties: {
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export let discriminators = {
  AutonomousDatabaseBaseProperties: AutonomousDatabaseBaseProperties,
  "AutonomousDatabaseBaseProperties.Clone": AutonomousDatabaseCloneProperties,
  "AutonomousDatabaseBaseProperties.Regular": AutonomousDatabaseProperties,
};
