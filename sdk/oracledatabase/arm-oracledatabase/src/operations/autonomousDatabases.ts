/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AutonomousDatabases } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { OracleDatabaseManagementClient } from "../oracleDatabaseManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  AutonomousDatabase,
  AutonomousDatabasesListBySubscriptionNextOptionalParams,
  AutonomousDatabasesListBySubscriptionOptionalParams,
  AutonomousDatabasesListBySubscriptionResponse,
  AutonomousDatabasesListByResourceGroupNextOptionalParams,
  AutonomousDatabasesListByResourceGroupOptionalParams,
  AutonomousDatabasesListByResourceGroupResponse,
  AutonomousDatabasesGetOptionalParams,
  AutonomousDatabasesGetResponse,
  AutonomousDatabasesCreateOrUpdateOptionalParams,
  AutonomousDatabasesCreateOrUpdateResponse,
  AutonomousDatabaseUpdate,
  AutonomousDatabasesUpdateOptionalParams,
  AutonomousDatabasesUpdateResponse,
  AutonomousDatabasesDeleteOptionalParams,
  AutonomousDatabasesDeleteResponse,
  PeerDbDetails,
  AutonomousDatabasesFailoverOptionalParams,
  AutonomousDatabasesFailoverResponse,
  GenerateAutonomousDatabaseWalletDetails,
  AutonomousDatabasesGenerateWalletOptionalParams,
  AutonomousDatabasesGenerateWalletResponse,
  RestoreAutonomousDatabaseDetails,
  AutonomousDatabasesRestoreOptionalParams,
  AutonomousDatabasesRestoreResponse,
  AutonomousDatabasesShrinkOptionalParams,
  AutonomousDatabasesShrinkResponse,
  AutonomousDatabasesSwitchoverOptionalParams,
  AutonomousDatabasesSwitchoverResponse,
  AutonomousDatabasesListBySubscriptionNextResponse,
  AutonomousDatabasesListByResourceGroupNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AutonomousDatabases operations. */
export class AutonomousDatabasesImpl implements AutonomousDatabases {
  private readonly client: OracleDatabaseManagementClient;

  /**
   * Initialize a new instance of the class AutonomousDatabases class.
   * @param client Reference to the service client
   */
  constructor(client: OracleDatabaseManagementClient) {
    this.client = client;
  }

  /**
   * List AutonomousDatabase resources by subscription ID
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: AutonomousDatabasesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<AutonomousDatabase> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: AutonomousDatabasesListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AutonomousDatabase[]> {
    let result: AutonomousDatabasesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: AutonomousDatabasesListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<AutonomousDatabase> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List AutonomousDatabase resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: AutonomousDatabasesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<AutonomousDatabase> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: AutonomousDatabasesListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AutonomousDatabase[]> {
    let result: AutonomousDatabasesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: AutonomousDatabasesListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<AutonomousDatabase> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List AutonomousDatabase resources by subscription ID
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: AutonomousDatabasesListBySubscriptionOptionalParams,
  ): Promise<AutonomousDatabasesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * List AutonomousDatabase resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: AutonomousDatabasesListByResourceGroupOptionalParams,
  ): Promise<AutonomousDatabasesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Get a AutonomousDatabase
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    autonomousdatabasename: string,
    options?: AutonomousDatabasesGetOptionalParams,
  ): Promise<AutonomousDatabasesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, autonomousdatabasename, options },
      getOperationSpec,
    );
  }

  /**
   * Create a AutonomousDatabase
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    autonomousdatabasename: string,
    resource: AutonomousDatabase,
    options?: AutonomousDatabasesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AutonomousDatabasesCreateOrUpdateResponse>,
      AutonomousDatabasesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutonomousDatabasesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, autonomousdatabasename, resource, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      AutonomousDatabasesCreateOrUpdateResponse,
      OperationState<AutonomousDatabasesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a AutonomousDatabase
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    autonomousdatabasename: string,
    resource: AutonomousDatabase,
    options?: AutonomousDatabasesCreateOrUpdateOptionalParams,
  ): Promise<AutonomousDatabasesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      autonomousdatabasename,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a AutonomousDatabase
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    autonomousdatabasename: string,
    properties: AutonomousDatabaseUpdate,
    options?: AutonomousDatabasesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AutonomousDatabasesUpdateResponse>,
      AutonomousDatabasesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutonomousDatabasesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, autonomousdatabasename, properties, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      AutonomousDatabasesUpdateResponse,
      OperationState<AutonomousDatabasesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a AutonomousDatabase
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    autonomousdatabasename: string,
    properties: AutonomousDatabaseUpdate,
    options?: AutonomousDatabasesUpdateOptionalParams,
  ): Promise<AutonomousDatabasesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      autonomousdatabasename,
      properties,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a AutonomousDatabase
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    autonomousdatabasename: string,
    options?: AutonomousDatabasesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AutonomousDatabasesDeleteResponse>,
      AutonomousDatabasesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutonomousDatabasesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, autonomousdatabasename, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      AutonomousDatabasesDeleteResponse,
      OperationState<AutonomousDatabasesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a AutonomousDatabase
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    autonomousdatabasename: string,
    options?: AutonomousDatabasesDeleteOptionalParams,
  ): Promise<AutonomousDatabasesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      autonomousdatabasename,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Perform failover action on Autonomous Database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginFailover(
    resourceGroupName: string,
    autonomousdatabasename: string,
    body: PeerDbDetails,
    options?: AutonomousDatabasesFailoverOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AutonomousDatabasesFailoverResponse>,
      AutonomousDatabasesFailoverResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutonomousDatabasesFailoverResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, autonomousdatabasename, body, options },
      spec: failoverOperationSpec,
    });
    const poller = await createHttpPoller<
      AutonomousDatabasesFailoverResponse,
      OperationState<AutonomousDatabasesFailoverResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Perform failover action on Autonomous Database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginFailoverAndWait(
    resourceGroupName: string,
    autonomousdatabasename: string,
    body: PeerDbDetails,
    options?: AutonomousDatabasesFailoverOptionalParams,
  ): Promise<AutonomousDatabasesFailoverResponse> {
    const poller = await this.beginFailover(
      resourceGroupName,
      autonomousdatabasename,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Generate wallet action on Autonomous Database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  generateWallet(
    resourceGroupName: string,
    autonomousdatabasename: string,
    body: GenerateAutonomousDatabaseWalletDetails,
    options?: AutonomousDatabasesGenerateWalletOptionalParams,
  ): Promise<AutonomousDatabasesGenerateWalletResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, autonomousdatabasename, body, options },
      generateWalletOperationSpec,
    );
  }

  /**
   * Restores an Autonomous Database based on the provided request parameters.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginRestore(
    resourceGroupName: string,
    autonomousdatabasename: string,
    body: RestoreAutonomousDatabaseDetails,
    options?: AutonomousDatabasesRestoreOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AutonomousDatabasesRestoreResponse>,
      AutonomousDatabasesRestoreResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutonomousDatabasesRestoreResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, autonomousdatabasename, body, options },
      spec: restoreOperationSpec,
    });
    const poller = await createHttpPoller<
      AutonomousDatabasesRestoreResponse,
      OperationState<AutonomousDatabasesRestoreResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Restores an Autonomous Database based on the provided request parameters.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginRestoreAndWait(
    resourceGroupName: string,
    autonomousdatabasename: string,
    body: RestoreAutonomousDatabaseDetails,
    options?: AutonomousDatabasesRestoreOptionalParams,
  ): Promise<AutonomousDatabasesRestoreResponse> {
    const poller = await this.beginRestore(
      resourceGroupName,
      autonomousdatabasename,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * This operation shrinks the current allocated storage down to the current actual used data storage.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param options The options parameters.
   */
  async beginShrink(
    resourceGroupName: string,
    autonomousdatabasename: string,
    options?: AutonomousDatabasesShrinkOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AutonomousDatabasesShrinkResponse>,
      AutonomousDatabasesShrinkResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutonomousDatabasesShrinkResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, autonomousdatabasename, options },
      spec: shrinkOperationSpec,
    });
    const poller = await createHttpPoller<
      AutonomousDatabasesShrinkResponse,
      OperationState<AutonomousDatabasesShrinkResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * This operation shrinks the current allocated storage down to the current actual used data storage.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param options The options parameters.
   */
  async beginShrinkAndWait(
    resourceGroupName: string,
    autonomousdatabasename: string,
    options?: AutonomousDatabasesShrinkOptionalParams,
  ): Promise<AutonomousDatabasesShrinkResponse> {
    const poller = await this.beginShrink(
      resourceGroupName,
      autonomousdatabasename,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Perform switchover action on Autonomous Database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginSwitchover(
    resourceGroupName: string,
    autonomousdatabasename: string,
    body: PeerDbDetails,
    options?: AutonomousDatabasesSwitchoverOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AutonomousDatabasesSwitchoverResponse>,
      AutonomousDatabasesSwitchoverResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutonomousDatabasesSwitchoverResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, autonomousdatabasename, body, options },
      spec: switchoverOperationSpec,
    });
    const poller = await createHttpPoller<
      AutonomousDatabasesSwitchoverResponse,
      OperationState<AutonomousDatabasesSwitchoverResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Perform switchover action on Autonomous Database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginSwitchoverAndWait(
    resourceGroupName: string,
    autonomousdatabasename: string,
    body: PeerDbDetails,
    options?: AutonomousDatabasesSwitchoverOptionalParams,
  ): Promise<AutonomousDatabasesSwitchoverResponse> {
    const poller = await this.beginSwitchover(
      resourceGroupName,
      autonomousdatabasename,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: AutonomousDatabasesListBySubscriptionNextOptionalParams,
  ): Promise<AutonomousDatabasesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: AutonomousDatabasesListByResourceGroupNextOptionalParams,
  ): Promise<AutonomousDatabasesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Oracle.Database/autonomousDatabases",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabaseListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabaseListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    201: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    202: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    204: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    201: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    202: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    204: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.AutonomousDatabasesDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.AutonomousDatabasesDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.AutonomousDatabasesDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.AutonomousDatabasesDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const failoverOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}/failover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    201: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    202: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    204: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const generateWalletOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}/generateWallet",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabaseWalletFile,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const restoreOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}/restore",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    201: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    202: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    204: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const shrinkOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}/shrink",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    201: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    202: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    204: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const switchoverOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}/switchover",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    201: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    202: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    204: {
      bodyMapper: Mappers.AutonomousDatabase,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabaseListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabaseListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
