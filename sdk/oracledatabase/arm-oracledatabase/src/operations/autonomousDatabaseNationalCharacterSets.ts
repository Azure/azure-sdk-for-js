/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AutonomousDatabaseNationalCharacterSets } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { OracleDatabaseManagementClient } from "../oracleDatabaseManagementClient";
import {
  AutonomousDatabaseNationalCharacterSet,
  AutonomousDatabaseNationalCharacterSetsListByLocationNextOptionalParams,
  AutonomousDatabaseNationalCharacterSetsListByLocationOptionalParams,
  AutonomousDatabaseNationalCharacterSetsListByLocationResponse,
  AutonomousDatabaseNationalCharacterSetsGetOptionalParams,
  AutonomousDatabaseNationalCharacterSetsGetResponse,
  AutonomousDatabaseNationalCharacterSetsListByLocationNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AutonomousDatabaseNationalCharacterSets operations. */
export class AutonomousDatabaseNationalCharacterSetsImpl
  implements AutonomousDatabaseNationalCharacterSets
{
  private readonly client: OracleDatabaseManagementClient;

  /**
   * Initialize a new instance of the class AutonomousDatabaseNationalCharacterSets class.
   * @param client Reference to the service client
   */
  constructor(client: OracleDatabaseManagementClient) {
    this.client = client;
  }

  /**
   * List AutonomousDatabaseNationalCharacterSet resources by Location
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  public listByLocation(
    location: string,
    options?: AutonomousDatabaseNationalCharacterSetsListByLocationOptionalParams,
  ): PagedAsyncIterableIterator<AutonomousDatabaseNationalCharacterSet> {
    const iter = this.listByLocationPagingAll(location, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByLocationPagingPage(location, options, settings);
      },
    };
  }

  private async *listByLocationPagingPage(
    location: string,
    options?: AutonomousDatabaseNationalCharacterSetsListByLocationOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AutonomousDatabaseNationalCharacterSet[]> {
    let result: AutonomousDatabaseNationalCharacterSetsListByLocationResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByLocation(location, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByLocationNext(
        location,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByLocationPagingAll(
    location: string,
    options?: AutonomousDatabaseNationalCharacterSetsListByLocationOptionalParams,
  ): AsyncIterableIterator<AutonomousDatabaseNationalCharacterSet> {
    for await (const page of this.listByLocationPagingPage(location, options)) {
      yield* page;
    }
  }

  /**
   * List AutonomousDatabaseNationalCharacterSet resources by Location
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  private _listByLocation(
    location: string,
    options?: AutonomousDatabaseNationalCharacterSetsListByLocationOptionalParams,
  ): Promise<AutonomousDatabaseNationalCharacterSetsListByLocationResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      listByLocationOperationSpec,
    );
  }

  /**
   * Get a AutonomousDatabaseNationalCharacterSet
   * @param location The name of the Azure region.
   * @param adbsncharsetname AutonomousDatabaseNationalCharacterSets name
   * @param options The options parameters.
   */
  get(
    location: string,
    adbsncharsetname: string,
    options?: AutonomousDatabaseNationalCharacterSetsGetOptionalParams,
  ): Promise<AutonomousDatabaseNationalCharacterSetsGetResponse> {
    return this.client.sendOperationRequest(
      { location, adbsncharsetname, options },
      getOperationSpec,
    );
  }

  /**
   * ListByLocationNext
   * @param location The name of the Azure region.
   * @param nextLink The nextLink from the previous successful call to the ListByLocation method.
   * @param options The options parameters.
   */
  private _listByLocationNext(
    location: string,
    nextLink: string,
    options?: AutonomousDatabaseNationalCharacterSetsListByLocationNextOptionalParams,
  ): Promise<AutonomousDatabaseNationalCharacterSetsListByLocationNextResponse> {
    return this.client.sendOperationRequest(
      { location, nextLink, options },
      listByLocationNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByLocationOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/autonomousDatabaseNationalCharacterSets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabaseNationalCharacterSetListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Oracle.Database/locations/{location}/autonomousDatabaseNationalCharacterSets/{adbsncharsetname}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabaseNationalCharacterSet,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.adbsncharsetname,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByLocationNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabaseNationalCharacterSetListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
