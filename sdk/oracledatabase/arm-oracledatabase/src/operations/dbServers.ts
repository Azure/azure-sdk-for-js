/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { DbServers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { OracleDatabaseManagementClient } from "../oracleDatabaseManagementClient";
import {
  DbServer,
  DbServersListByCloudExadataInfrastructureNextOptionalParams,
  DbServersListByCloudExadataInfrastructureOptionalParams,
  DbServersListByCloudExadataInfrastructureResponse,
  DbServersGetOptionalParams,
  DbServersGetResponse,
  DbServersListByCloudExadataInfrastructureNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DbServers operations. */
export class DbServersImpl implements DbServers {
  private readonly client: OracleDatabaseManagementClient;

  /**
   * Initialize a new instance of the class DbServers class.
   * @param client Reference to the service client
   */
  constructor(client: OracleDatabaseManagementClient) {
    this.client = client;
  }

  /**
   * List DbServer resources by CloudExadataInfrastructure
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudexadatainfrastructurename CloudExadataInfrastructure name
   * @param options The options parameters.
   */
  public listByCloudExadataInfrastructure(
    resourceGroupName: string,
    cloudexadatainfrastructurename: string,
    options?: DbServersListByCloudExadataInfrastructureOptionalParams,
  ): PagedAsyncIterableIterator<DbServer> {
    const iter = this.listByCloudExadataInfrastructurePagingAll(
      resourceGroupName,
      cloudexadatainfrastructurename,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByCloudExadataInfrastructurePagingPage(
          resourceGroupName,
          cloudexadatainfrastructurename,
          options,
          settings,
        );
      },
    };
  }

  private async *listByCloudExadataInfrastructurePagingPage(
    resourceGroupName: string,
    cloudexadatainfrastructurename: string,
    options?: DbServersListByCloudExadataInfrastructureOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DbServer[]> {
    let result: DbServersListByCloudExadataInfrastructureResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByCloudExadataInfrastructure(
        resourceGroupName,
        cloudexadatainfrastructurename,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByCloudExadataInfrastructureNext(
        resourceGroupName,
        cloudexadatainfrastructurename,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByCloudExadataInfrastructurePagingAll(
    resourceGroupName: string,
    cloudexadatainfrastructurename: string,
    options?: DbServersListByCloudExadataInfrastructureOptionalParams,
  ): AsyncIterableIterator<DbServer> {
    for await (const page of this.listByCloudExadataInfrastructurePagingPage(
      resourceGroupName,
      cloudexadatainfrastructurename,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List DbServer resources by CloudExadataInfrastructure
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudexadatainfrastructurename CloudExadataInfrastructure name
   * @param options The options parameters.
   */
  private _listByCloudExadataInfrastructure(
    resourceGroupName: string,
    cloudexadatainfrastructurename: string,
    options?: DbServersListByCloudExadataInfrastructureOptionalParams,
  ): Promise<DbServersListByCloudExadataInfrastructureResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, cloudexadatainfrastructurename, options },
      listByCloudExadataInfrastructureOperationSpec,
    );
  }

  /**
   * Get a DbServer
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudexadatainfrastructurename CloudExadataInfrastructure name
   * @param dbserverocid DbServer OCID.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    cloudexadatainfrastructurename: string,
    dbserverocid: string,
    options?: DbServersGetOptionalParams,
  ): Promise<DbServersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        cloudexadatainfrastructurename,
        dbserverocid,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * ListByCloudExadataInfrastructureNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudexadatainfrastructurename CloudExadataInfrastructure name
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByCloudExadataInfrastructure method.
   * @param options The options parameters.
   */
  private _listByCloudExadataInfrastructureNext(
    resourceGroupName: string,
    cloudexadatainfrastructurename: string,
    nextLink: string,
    options?: DbServersListByCloudExadataInfrastructureNextOptionalParams,
  ): Promise<DbServersListByCloudExadataInfrastructureNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, cloudexadatainfrastructurename, nextLink, options },
      listByCloudExadataInfrastructureNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByCloudExadataInfrastructureOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudExadataInfrastructures/{cloudexadatainfrastructurename}/dbServers",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.DbServerListResult,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.cloudexadatainfrastructurename,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudExadataInfrastructures/{cloudexadatainfrastructurename}/dbServers/{dbserverocid}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DbServer,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cloudexadatainfrastructurename,
    Parameters.dbserverocid,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByCloudExadataInfrastructureNextOperationSpec: coreClient.OperationSpec =
  {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.DbServerListResult,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    urlParameters: [
      Parameters.$host,
      Parameters.nextLink,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.cloudexadatainfrastructurename,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
