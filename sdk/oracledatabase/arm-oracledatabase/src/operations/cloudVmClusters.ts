/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { CloudVmClusters } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { OracleDatabaseManagementClient } from "../oracleDatabaseManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  CloudVmCluster,
  CloudVmClustersListBySubscriptionNextOptionalParams,
  CloudVmClustersListBySubscriptionOptionalParams,
  CloudVmClustersListBySubscriptionResponse,
  CloudVmClustersListByResourceGroupNextOptionalParams,
  CloudVmClustersListByResourceGroupOptionalParams,
  CloudVmClustersListByResourceGroupResponse,
  CloudVmClustersGetOptionalParams,
  CloudVmClustersGetResponse,
  CloudVmClustersCreateOrUpdateOptionalParams,
  CloudVmClustersCreateOrUpdateResponse,
  CloudVmClusterUpdate,
  CloudVmClustersUpdateOptionalParams,
  CloudVmClustersUpdateResponse,
  CloudVmClustersDeleteOptionalParams,
  CloudVmClustersDeleteResponse,
  AddRemoveDbNode,
  CloudVmClustersAddVmsOptionalParams,
  CloudVmClustersAddVmsResponse,
  PrivateIpAddressesFilter,
  CloudVmClustersListPrivateIpAddressesOptionalParams,
  CloudVmClustersListPrivateIpAddressesResponse,
  CloudVmClustersRemoveVmsOptionalParams,
  CloudVmClustersRemoveVmsResponse,
  CloudVmClustersListBySubscriptionNextResponse,
  CloudVmClustersListByResourceGroupNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CloudVmClusters operations. */
export class CloudVmClustersImpl implements CloudVmClusters {
  private readonly client: OracleDatabaseManagementClient;

  /**
   * Initialize a new instance of the class CloudVmClusters class.
   * @param client Reference to the service client
   */
  constructor(client: OracleDatabaseManagementClient) {
    this.client = client;
  }

  /**
   * List CloudVmCluster resources by subscription ID
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: CloudVmClustersListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<CloudVmCluster> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: CloudVmClustersListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<CloudVmCluster[]> {
    let result: CloudVmClustersListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: CloudVmClustersListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<CloudVmCluster> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List CloudVmCluster resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: CloudVmClustersListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<CloudVmCluster> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: CloudVmClustersListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<CloudVmCluster[]> {
    let result: CloudVmClustersListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: CloudVmClustersListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<CloudVmCluster> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List CloudVmCluster resources by subscription ID
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: CloudVmClustersListBySubscriptionOptionalParams,
  ): Promise<CloudVmClustersListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * List CloudVmCluster resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: CloudVmClustersListByResourceGroupOptionalParams,
  ): Promise<CloudVmClustersListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Get a CloudVmCluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudvmclustername CloudVmCluster name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    cloudvmclustername: string,
    options?: CloudVmClustersGetOptionalParams,
  ): Promise<CloudVmClustersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, cloudvmclustername, options },
      getOperationSpec,
    );
  }

  /**
   * Create a CloudVmCluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudvmclustername CloudVmCluster name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    cloudvmclustername: string,
    resource: CloudVmCluster,
    options?: CloudVmClustersCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CloudVmClustersCreateOrUpdateResponse>,
      CloudVmClustersCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CloudVmClustersCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cloudvmclustername, resource, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      CloudVmClustersCreateOrUpdateResponse,
      OperationState<CloudVmClustersCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a CloudVmCluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudvmclustername CloudVmCluster name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    cloudvmclustername: string,
    resource: CloudVmCluster,
    options?: CloudVmClustersCreateOrUpdateOptionalParams,
  ): Promise<CloudVmClustersCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      cloudvmclustername,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a CloudVmCluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudvmclustername CloudVmCluster name
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    cloudvmclustername: string,
    properties: CloudVmClusterUpdate,
    options?: CloudVmClustersUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CloudVmClustersUpdateResponse>,
      CloudVmClustersUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CloudVmClustersUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cloudvmclustername, properties, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      CloudVmClustersUpdateResponse,
      OperationState<CloudVmClustersUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a CloudVmCluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudvmclustername CloudVmCluster name
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    cloudvmclustername: string,
    properties: CloudVmClusterUpdate,
    options?: CloudVmClustersUpdateOptionalParams,
  ): Promise<CloudVmClustersUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      cloudvmclustername,
      properties,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a CloudVmCluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudvmclustername CloudVmCluster name
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    cloudvmclustername: string,
    options?: CloudVmClustersDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CloudVmClustersDeleteResponse>,
      CloudVmClustersDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CloudVmClustersDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cloudvmclustername, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      CloudVmClustersDeleteResponse,
      OperationState<CloudVmClustersDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a CloudVmCluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudvmclustername CloudVmCluster name
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    cloudvmclustername: string,
    options?: CloudVmClustersDeleteOptionalParams,
  ): Promise<CloudVmClustersDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      cloudvmclustername,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Add VMs to the VM Cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudvmclustername CloudVmCluster name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginAddVms(
    resourceGroupName: string,
    cloudvmclustername: string,
    body: AddRemoveDbNode,
    options?: CloudVmClustersAddVmsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CloudVmClustersAddVmsResponse>,
      CloudVmClustersAddVmsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CloudVmClustersAddVmsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cloudvmclustername, body, options },
      spec: addVmsOperationSpec,
    });
    const poller = await createHttpPoller<
      CloudVmClustersAddVmsResponse,
      OperationState<CloudVmClustersAddVmsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Add VMs to the VM Cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudvmclustername CloudVmCluster name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginAddVmsAndWait(
    resourceGroupName: string,
    cloudvmclustername: string,
    body: AddRemoveDbNode,
    options?: CloudVmClustersAddVmsOptionalParams,
  ): Promise<CloudVmClustersAddVmsResponse> {
    const poller = await this.beginAddVms(
      resourceGroupName,
      cloudvmclustername,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * List Private IP Addresses by the provided filter
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudvmclustername CloudVmCluster name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  listPrivateIpAddresses(
    resourceGroupName: string,
    cloudvmclustername: string,
    body: PrivateIpAddressesFilter,
    options?: CloudVmClustersListPrivateIpAddressesOptionalParams,
  ): Promise<CloudVmClustersListPrivateIpAddressesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, cloudvmclustername, body, options },
      listPrivateIpAddressesOperationSpec,
    );
  }

  /**
   * Remove VMs from the VM Cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudvmclustername CloudVmCluster name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginRemoveVms(
    resourceGroupName: string,
    cloudvmclustername: string,
    body: AddRemoveDbNode,
    options?: CloudVmClustersRemoveVmsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CloudVmClustersRemoveVmsResponse>,
      CloudVmClustersRemoveVmsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<CloudVmClustersRemoveVmsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cloudvmclustername, body, options },
      spec: removeVmsOperationSpec,
    });
    const poller = await createHttpPoller<
      CloudVmClustersRemoveVmsResponse,
      OperationState<CloudVmClustersRemoveVmsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Remove VMs from the VM Cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cloudvmclustername CloudVmCluster name
   * @param body The content of the action request
   * @param options The options parameters.
   */
  async beginRemoveVmsAndWait(
    resourceGroupName: string,
    cloudvmclustername: string,
    body: AddRemoveDbNode,
    options?: CloudVmClustersRemoveVmsOptionalParams,
  ): Promise<CloudVmClustersRemoveVmsResponse> {
    const poller = await this.beginRemoveVms(
      resourceGroupName,
      cloudvmclustername,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: CloudVmClustersListBySubscriptionNextOptionalParams,
  ): Promise<CloudVmClustersListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: CloudVmClustersListByResourceGroupNextOptionalParams,
  ): Promise<CloudVmClustersListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Oracle.Database/cloudVmClusters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CloudVmClusterListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudVmClusters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CloudVmClusterListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudVmClusters/{cloudvmclustername}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cloudvmclustername,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudVmClusters/{cloudvmclustername}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    201: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    202: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    204: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cloudvmclustername,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudVmClusters/{cloudvmclustername}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    201: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    202: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    204: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cloudvmclustername,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudVmClusters/{cloudvmclustername}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.CloudVmClustersDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.CloudVmClustersDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.CloudVmClustersDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.CloudVmClustersDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cloudvmclustername,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const addVmsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudVmClusters/{cloudvmclustername}/addVms",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    201: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    202: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    204: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cloudvmclustername,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listPrivateIpAddressesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudVmClusters/{cloudvmclustername}/listPrivateIpAddresses",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateIpAddressProperties",
            },
          },
        },
      },
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cloudvmclustername,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const removeVmsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudVmClusters/{cloudvmclustername}/removeVms",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    201: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    202: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    204: {
      bodyMapper: Mappers.CloudVmCluster,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cloudvmclustername,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CloudVmClusterListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CloudVmClusterListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
