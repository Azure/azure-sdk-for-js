/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AutonomousDatabaseBackups } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { OracleDatabaseManagementClient } from "../oracleDatabaseManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  AutonomousDatabaseBackup,
  AutonomousDatabaseBackupsListByAutonomousDatabaseNextOptionalParams,
  AutonomousDatabaseBackupsListByAutonomousDatabaseOptionalParams,
  AutonomousDatabaseBackupsListByAutonomousDatabaseResponse,
  AutonomousDatabaseBackupsGetOptionalParams,
  AutonomousDatabaseBackupsGetResponse,
  AutonomousDatabaseBackupsCreateOrUpdateOptionalParams,
  AutonomousDatabaseBackupsCreateOrUpdateResponse,
  AutonomousDatabaseBackupUpdate,
  AutonomousDatabaseBackupsUpdateOptionalParams,
  AutonomousDatabaseBackupsUpdateResponse,
  AutonomousDatabaseBackupsDeleteOptionalParams,
  AutonomousDatabaseBackupsDeleteResponse,
  AutonomousDatabaseBackupsListByAutonomousDatabaseNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AutonomousDatabaseBackups operations. */
export class AutonomousDatabaseBackupsImpl
  implements AutonomousDatabaseBackups
{
  private readonly client: OracleDatabaseManagementClient;

  /**
   * Initialize a new instance of the class AutonomousDatabaseBackups class.
   * @param client Reference to the service client
   */
  constructor(client: OracleDatabaseManagementClient) {
    this.client = client;
  }

  /**
   * List AutonomousDatabaseBackup resources by AutonomousDatabase
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param options The options parameters.
   */
  public listByAutonomousDatabase(
    resourceGroupName: string,
    autonomousdatabasename: string,
    options?: AutonomousDatabaseBackupsListByAutonomousDatabaseOptionalParams,
  ): PagedAsyncIterableIterator<AutonomousDatabaseBackup> {
    const iter = this.listByAutonomousDatabasePagingAll(
      resourceGroupName,
      autonomousdatabasename,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByAutonomousDatabasePagingPage(
          resourceGroupName,
          autonomousdatabasename,
          options,
          settings,
        );
      },
    };
  }

  private async *listByAutonomousDatabasePagingPage(
    resourceGroupName: string,
    autonomousdatabasename: string,
    options?: AutonomousDatabaseBackupsListByAutonomousDatabaseOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AutonomousDatabaseBackup[]> {
    let result: AutonomousDatabaseBackupsListByAutonomousDatabaseResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByAutonomousDatabase(
        resourceGroupName,
        autonomousdatabasename,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByAutonomousDatabaseNext(
        resourceGroupName,
        autonomousdatabasename,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByAutonomousDatabasePagingAll(
    resourceGroupName: string,
    autonomousdatabasename: string,
    options?: AutonomousDatabaseBackupsListByAutonomousDatabaseOptionalParams,
  ): AsyncIterableIterator<AutonomousDatabaseBackup> {
    for await (const page of this.listByAutonomousDatabasePagingPage(
      resourceGroupName,
      autonomousdatabasename,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List AutonomousDatabaseBackup resources by AutonomousDatabase
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param options The options parameters.
   */
  private _listByAutonomousDatabase(
    resourceGroupName: string,
    autonomousdatabasename: string,
    options?: AutonomousDatabaseBackupsListByAutonomousDatabaseOptionalParams,
  ): Promise<AutonomousDatabaseBackupsListByAutonomousDatabaseResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, autonomousdatabasename, options },
      listByAutonomousDatabaseOperationSpec,
    );
  }

  /**
   * Get a AutonomousDatabaseBackup
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param adbbackupid AutonomousDatabaseBackup id
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    autonomousdatabasename: string,
    adbbackupid: string,
    options?: AutonomousDatabaseBackupsGetOptionalParams,
  ): Promise<AutonomousDatabaseBackupsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, autonomousdatabasename, adbbackupid, options },
      getOperationSpec,
    );
  }

  /**
   * Create a AutonomousDatabaseBackup
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param adbbackupid AutonomousDatabaseBackup id
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    autonomousdatabasename: string,
    adbbackupid: string,
    resource: AutonomousDatabaseBackup,
    options?: AutonomousDatabaseBackupsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AutonomousDatabaseBackupsCreateOrUpdateResponse>,
      AutonomousDatabaseBackupsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutonomousDatabaseBackupsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        autonomousdatabasename,
        adbbackupid,
        resource,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      AutonomousDatabaseBackupsCreateOrUpdateResponse,
      OperationState<AutonomousDatabaseBackupsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a AutonomousDatabaseBackup
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param adbbackupid AutonomousDatabaseBackup id
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    autonomousdatabasename: string,
    adbbackupid: string,
    resource: AutonomousDatabaseBackup,
    options?: AutonomousDatabaseBackupsCreateOrUpdateOptionalParams,
  ): Promise<AutonomousDatabaseBackupsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      autonomousdatabasename,
      adbbackupid,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a AutonomousDatabaseBackup
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param adbbackupid AutonomousDatabaseBackup id
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    autonomousdatabasename: string,
    adbbackupid: string,
    properties: AutonomousDatabaseBackupUpdate,
    options?: AutonomousDatabaseBackupsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AutonomousDatabaseBackupsUpdateResponse>,
      AutonomousDatabaseBackupsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutonomousDatabaseBackupsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        autonomousdatabasename,
        adbbackupid,
        properties,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      AutonomousDatabaseBackupsUpdateResponse,
      OperationState<AutonomousDatabaseBackupsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a AutonomousDatabaseBackup
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param adbbackupid AutonomousDatabaseBackup id
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    autonomousdatabasename: string,
    adbbackupid: string,
    properties: AutonomousDatabaseBackupUpdate,
    options?: AutonomousDatabaseBackupsUpdateOptionalParams,
  ): Promise<AutonomousDatabaseBackupsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      autonomousdatabasename,
      adbbackupid,
      properties,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a AutonomousDatabaseBackup
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param adbbackupid AutonomousDatabaseBackup id
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    autonomousdatabasename: string,
    adbbackupid: string,
    options?: AutonomousDatabaseBackupsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AutonomousDatabaseBackupsDeleteResponse>,
      AutonomousDatabaseBackupsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutonomousDatabaseBackupsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, autonomousdatabasename, adbbackupid, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      AutonomousDatabaseBackupsDeleteResponse,
      OperationState<AutonomousDatabaseBackupsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a AutonomousDatabaseBackup
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param adbbackupid AutonomousDatabaseBackup id
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    autonomousdatabasename: string,
    adbbackupid: string,
    options?: AutonomousDatabaseBackupsDeleteOptionalParams,
  ): Promise<AutonomousDatabaseBackupsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      autonomousdatabasename,
      adbbackupid,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByAutonomousDatabaseNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param autonomousdatabasename The database name.
   * @param nextLink The nextLink from the previous successful call to the ListByAutonomousDatabase
   *                 method.
   * @param options The options parameters.
   */
  private _listByAutonomousDatabaseNext(
    resourceGroupName: string,
    autonomousdatabasename: string,
    nextLink: string,
    options?: AutonomousDatabaseBackupsListByAutonomousDatabaseNextOptionalParams,
  ): Promise<AutonomousDatabaseBackupsListByAutonomousDatabaseNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, autonomousdatabasename, nextLink, options },
      listByAutonomousDatabaseNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByAutonomousDatabaseOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}/autonomousDatabaseBackups",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabaseBackupListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}/autonomousDatabaseBackups/{adbbackupid}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabaseBackup,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
    Parameters.adbbackupid,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}/autonomousDatabaseBackups/{adbbackupid}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabaseBackup,
    },
    201: {
      bodyMapper: Mappers.AutonomousDatabaseBackup,
    },
    202: {
      bodyMapper: Mappers.AutonomousDatabaseBackup,
    },
    204: {
      bodyMapper: Mappers.AutonomousDatabaseBackup,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
    Parameters.adbbackupid,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}/autonomousDatabaseBackups/{adbbackupid}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabaseBackup,
    },
    201: {
      bodyMapper: Mappers.AutonomousDatabaseBackup,
    },
    202: {
      bodyMapper: Mappers.AutonomousDatabaseBackup,
    },
    204: {
      bodyMapper: Mappers.AutonomousDatabaseBackup,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
    Parameters.adbbackupid,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}/autonomousDatabaseBackups/{adbbackupid}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.AutonomousDatabaseBackupsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.AutonomousDatabaseBackupsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.AutonomousDatabaseBackupsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.AutonomousDatabaseBackupsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
    Parameters.adbbackupid,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByAutonomousDatabaseNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutonomousDatabaseBackupListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.autonomousdatabasename,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
