// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { AIProjectContext } from "../../api/aiProjectContext.js";
import {
  PendingUploadRequest,
  PendingUploadResponse,
  EvaluationResult,
} from "../../models/models.js";
import {
  EvaluationResultsStartPendingUploadOptionalParams,
  EvaluationResultsCreateVersionOptionalParams,
  EvaluationResultsCreateOptionalParams,
  EvaluationResultsDeleteVersionOptionalParams,
  EvaluationResultsGetVersionOptionalParams,
  EvaluationResultsListLatestOptionalParams,
  EvaluationResultsListVersionsOptionalParams,
} from "../../api/evaluationResults/options.js";
import {
  startPendingUpload,
  createVersion,
  create,
  deleteVersion,
  getVersion,
  listLatest,
  listVersions,
} from "../../api/evaluationResults/operations.js";
import { PagedAsyncIterableIterator } from "../../static-helpers/pagingHelpers.js";

/** Interface representing a EvaluationResults operations. */
export interface EvaluationResultsOperations {
  /** Create or start a pending upload of a evaluation results for a specific version. */
  startPendingUpload: (
    name: string,
    version: string,
    body: PendingUploadRequest,
    options?: EvaluationResultsStartPendingUploadOptionalParams,
  ) => Promise<PendingUploadResponse>;
  /** Create a new or replace an existing EvaluationResult with the given version id */
  createVersion: (
    name: string,
    version: string,
    body: EvaluationResult,
    options?: EvaluationResultsCreateVersionOptionalParams,
  ) => Promise<EvaluationResult>;
  /** Create a new EvaluationResult. The version id will be generated by the service. */
  create: (
    name: string,
    body: EvaluationResult,
    options?: EvaluationResultsCreateOptionalParams,
  ) => Promise<EvaluationResult>;
  /** Delete the specific version of the EvaluationResult */
  deleteVersion: (
    name: string,
    version: string,
    options?: EvaluationResultsDeleteVersionOptionalParams,
  ) => Promise<void>;
  /** Get the specific version of the EvaluationResult */
  getVersion: (
    name: string,
    version: string,
    options?: EvaluationResultsGetVersionOptionalParams,
  ) => Promise<EvaluationResult>;
  /** List the latest version of each EvaluationResult */
  listLatest: (
    options?: EvaluationResultsListLatestOptionalParams,
  ) => PagedAsyncIterableIterator<EvaluationResult>;
  /** List all versions of the given EvaluationResult */
  listVersions: (
    name: string,
    options?: EvaluationResultsListVersionsOptionalParams,
  ) => PagedAsyncIterableIterator<EvaluationResult>;
}

function _getEvaluationResults(context: AIProjectContext) {
  return {
    startPendingUpload: (
      name: string,
      version: string,
      body: PendingUploadRequest,
      options?: EvaluationResultsStartPendingUploadOptionalParams,
    ) => startPendingUpload(context, name, version, body, options),
    createVersion: (
      name: string,
      version: string,
      body: EvaluationResult,
      options?: EvaluationResultsCreateVersionOptionalParams,
    ) => createVersion(context, name, version, body, options),
    create: (
      name: string,
      body: EvaluationResult,
      options?: EvaluationResultsCreateOptionalParams,
    ) => create(context, name, body, options),
    deleteVersion: (
      name: string,
      version: string,
      options?: EvaluationResultsDeleteVersionOptionalParams,
    ) => deleteVersion(context, name, version, options),
    getVersion: (
      name: string,
      version: string,
      options?: EvaluationResultsGetVersionOptionalParams,
    ) => getVersion(context, name, version, options),
    listLatest: (options?: EvaluationResultsListLatestOptionalParams) =>
      listLatest(context, options),
    listVersions: (name: string, options?: EvaluationResultsListVersionsOptionalParams) =>
      listVersions(context, name, options),
  };
}

export function _getEvaluationResultsOperations(
  context: AIProjectContext,
): EvaluationResultsOperations {
  return {
    ..._getEvaluationResults(context),
  };
}
