/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The response of a Fleet list operation. */
export interface FleetListResult {
  /** The Fleet items on this page */
  value: Fleet[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The FleetHubProfile configures the fleet hub. */
export interface FleetHubProfile {
  /** DNS prefix used to create the FQDN for the Fleet hub. */
  dnsPrefix?: string;
  /**
   * The FQDN of the Fleet hub.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdn?: string;
  /**
   * The Kubernetes version of the Fleet hub.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kubernetesVersion?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Properties of a Fleet that can be patched. */
export interface FleetPatch {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** The Credential results response. */
export interface FleetCredentialResults {
  /**
   * Array of base64-encoded Kubernetes configuration files.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kubeconfigs?: FleetCredentialResult[];
}

/** One credential result item. */
export interface FleetCredentialResult {
  /**
   * The name of the credential.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Base64-encoded Kubernetes configuration file.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Uint8Array;
}

/** The response of a FleetMember list operation. */
export interface FleetMemberListResult {
  /** The FleetMember items on this page */
  value: FleetMember[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The type used for update operations of the FleetMember. */
export interface FleetMemberUpdate {
  /** The group this member belongs to for multi-cluster update management. */
  group?: string;
}

/** The response of a UpdateRun list operation. */
export interface UpdateRunListResult {
  /** The UpdateRun items on this page */
  value: UpdateRun[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The UpdateRunStrategy configures the sequence of Stages and Groups in which the clusters will be updated. */
export interface UpdateRunStrategy {
  /** The list of stages that compose this update run. */
  stages: UpdateStage[];
}

/**
 * Contains the groups to be updated by an UpdateRun.
 * Update order:
 * - Sequential between stages: Stages run sequentially. The previous stage must complete before the next one starts.
 * - Parallel within a stage: Groups within a stage run in parallel.
 * - Sequential within a group: Clusters within a group are updated sequentially.
 */
export interface UpdateStage {
  /** The name of the stage. Must be unique within the UpdateRun. */
  name: string;
  /**
   * A list of group names that compose the stage.
   * The groups will be updated in parallel. Each group name can only appear once in the UpdateRun.
   */
  groups?: UpdateGroup[];
  /** The time in seconds to wait at the end of this stage before starting the next one. Defaults to 0 seconds if unspecified. */
  afterStageWaitInSeconds?: number;
}

/** A group to be updated. */
export interface UpdateGroup {
  /**
   * The name of the Fleet member group to update.
   * It should match the name of an existing FleetMember group.
   * A group can only appear once across all UpdateStages in the UpdateRun.
   */
  name: string;
}

/** The update to be applied to the ManagedClusters. */
export interface ManagedClusterUpdate {
  /** The upgrade to apply to the ManagedClusters. */
  upgrade: ManagedClusterUpgradeSpec;
}

/** The upgrade to apply to a ManagedCluster. */
export interface ManagedClusterUpgradeSpec {
  /**
   * The upgrade type.
   * Full requires the KubernetesVersion property to be set.
   * NodeImageOnly requires the KubernetesVersion property not to be set.
   */
  type: ManagedClusterUpgradeType;
  /** The Kubernetes version to upgrade the member clusters to. */
  kubernetesVersion?: string;
}

/** The status of a UpdateRun. */
export interface UpdateRunStatus {
  /**
   * The status of the UpdateRun.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: UpdateStatus;
  /**
   * The stages composing an update run. Stages are run sequentially withing an UpdateRun.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly stages?: UpdateStageStatus[];
}

/** The status for an operation or group of operations. */
export interface UpdateStatus {
  /**
   * The time the operation or group was started.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * The time the operation or group was completed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly completedTime?: Date;
  /**
   * The State of the operation or group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: UpdateState;
  /**
   * The error details when a failure is encountered.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ErrorDetail;
}

/** The status of a UpdateStage. */
export interface UpdateStageStatus {
  /**
   * The status of the UpdateStage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: UpdateStatus;
  /**
   * The name of the UpdateStage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The list of groups to be updated as part of this UpdateStage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groups?: UpdateGroupStatus[];
  /**
   * The status of the wait period configured on the UpdateStage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly afterStageWaitStatus?: WaitStatus;
}

/** The status of a UpdateGroup. */
export interface UpdateGroupStatus {
  /**
   * The status of the UpdateGroup.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: UpdateStatus;
  /**
   * The name of the UpdateGroup.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The list of member this UpdateGroup updates.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly members?: MemberUpdateStatus[];
}

/** The status of a member update operation. */
export interface MemberUpdateStatus {
  /**
   * The status of the MemberUpdate operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: UpdateStatus;
  /**
   * The name of the FleetMember.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The Azure resource id of the target Kubernetes cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterResourceId?: string;
  /**
   * The operation resource id of the latest attempt to perform the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationId?: string;
}

/** The status of the wait duration. */
export interface WaitStatus {
  /**
   * The status of the wait duration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: UpdateStatus;
  /**
   * The wait duration configured in seconds.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly waitDurationInSeconds?: number;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The Fleet resource. */
export interface Fleet extends TrackedResource {
  /**
   * If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eTag?: string;
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: FleetProvisioningState;
  /** The FleetHubProfile configures the Fleet's hub. */
  hubProfile?: FleetHubProfile;
}

/** A member of the Fleet. It contains a reference to an existing Kubernetes cluster on Azure. */
export interface FleetMember extends ProxyResource {
  /**
   * If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eTag?: string;
  /** The ARM resource id of the cluster that joins the Fleet. Must be a valid Azure resource id. e.g.: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'. */
  clusterResourceId?: string;
  /** The group this member belongs to for multi-cluster update management. */
  group?: string;
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: FleetMemberProvisioningState;
}

/** An UpdateRun is a multi-stage process to perform update operations across members of a Fleet. */
export interface UpdateRun extends ProxyResource {
  /**
   * If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eTag?: string;
  /**
   * The provisioning state of the UpdateRun resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: UpdateRunProvisioningState;
  /**
   * The strategy defines the order in which the clusters will be updated.
   * If not set, all members will be updated sequentially. The UpdateRun status will show a single UpdateStage and a single UpdateGroup targeting all members.
   * The strategy of the UpdateRun can be modified until the run is started.
   */
  strategy?: UpdateRunStrategy;
  /** The update to be applied to all clusters in the UpdateRun. The managedClusterUpdate can be modified until the run is started. */
  managedClusterUpdate?: ManagedClusterUpdate;
  /**
   * The status of the UpdateRun.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: UpdateRunStatus;
}

/** Defines headers for Fleets_createOrUpdate operation. */
export interface FleetsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Fleets_delete operation. */
export interface FleetsDeleteHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for FleetMembers_create operation. */
export interface FleetMembersCreateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for FleetMembers_delete operation. */
export interface FleetMembersDeleteHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for UpdateRuns_createOrUpdate operation. */
export interface UpdateRunsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for UpdateRuns_delete operation. */
export interface UpdateRunsDeleteHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for UpdateRuns_start operation. */
export interface UpdateRunsStartHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for UpdateRuns_stop operation. */
export interface UpdateRunsStopHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link FleetProvisioningState} that the service accepts. */
export enum KnownFleetProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting"
}

/**
 * Defines values for FleetProvisioningState. \
 * {@link KnownFleetProvisioningState} can be used interchangeably with FleetProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Creating** \
 * **Updating** \
 * **Deleting**
 */
export type FleetProvisioningState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link FleetMemberProvisioningState} that the service accepts. */
export enum KnownFleetMemberProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Joining */
  Joining = "Joining",
  /** Leaving */
  Leaving = "Leaving",
  /** Updating */
  Updating = "Updating"
}

/**
 * Defines values for FleetMemberProvisioningState. \
 * {@link KnownFleetMemberProvisioningState} can be used interchangeably with FleetMemberProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Joining** \
 * **Leaving** \
 * **Updating**
 */
export type FleetMemberProvisioningState = string;

/** Known values of {@link UpdateRunProvisioningState} that the service accepts. */
export enum KnownUpdateRunProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled"
}

/**
 * Defines values for UpdateRunProvisioningState. \
 * {@link KnownUpdateRunProvisioningState} can be used interchangeably with UpdateRunProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export type UpdateRunProvisioningState = string;

/** Known values of {@link ManagedClusterUpgradeType} that the service accepts. */
export enum KnownManagedClusterUpgradeType {
  /** Full upgrades the control plane and all agent pools of the target ManagedClusters. */
  Full = "Full",
  /** NodeImageOnly upgrades only the node images of the target ManagedClusters. */
  NodeImageOnly = "NodeImageOnly"
}

/**
 * Defines values for ManagedClusterUpgradeType. \
 * {@link KnownManagedClusterUpgradeType} can be used interchangeably with ManagedClusterUpgradeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Full**: Full upgrades the control plane and all agent pools of the target ManagedClusters. \
 * **NodeImageOnly**: NodeImageOnly upgrades only the node images of the target ManagedClusters.
 */
export type ManagedClusterUpgradeType = string;

/** Known values of {@link UpdateState} that the service accepts. */
export enum KnownUpdateState {
  /** NotStarted */
  NotStarted = "NotStarted",
  /** Running */
  Running = "Running",
  /** Stopping */
  Stopping = "Stopping",
  /** Stopped */
  Stopped = "Stopped",
  /** Failed */
  Failed = "Failed",
  /** Completed */
  Completed = "Completed"
}

/**
 * Defines values for UpdateState. \
 * {@link KnownUpdateState} can be used interchangeably with UpdateState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted** \
 * **Running** \
 * **Stopping** \
 * **Stopped** \
 * **Failed** \
 * **Completed**
 */
export type UpdateState = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface FleetsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type FleetsListBySubscriptionResponse = FleetListResult;

/** Optional parameters. */
export interface FleetsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type FleetsListByResourceGroupResponse = FleetListResult;

/** Optional parameters. */
export interface FleetsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FleetsGetResponse = Fleet;

/** Optional parameters. */
export interface FleetsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** The request should only proceed if no entity matches this string. */
  ifNoneMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type FleetsCreateOrUpdateResponse = Fleet;

/** Optional parameters. */
export interface FleetsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
}

/** Contains response data for the update operation. */
export type FleetsUpdateResponse = Fleet;

/** Optional parameters. */
export interface FleetsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface FleetsListCredentialsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listCredentials operation. */
export type FleetsListCredentialsResponse = FleetCredentialResults;

/** Optional parameters. */
export interface FleetsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type FleetsListBySubscriptionNextResponse = FleetListResult;

/** Optional parameters. */
export interface FleetsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type FleetsListByResourceGroupNextResponse = FleetListResult;

/** Optional parameters. */
export interface FleetMembersListByFleetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByFleet operation. */
export type FleetMembersListByFleetResponse = FleetMemberListResult;

/** Optional parameters. */
export interface FleetMembersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FleetMembersGetResponse = FleetMember;

/** Optional parameters. */
export interface FleetMembersCreateOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** The request should only proceed if no entity matches this string. */
  ifNoneMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type FleetMembersCreateResponse = FleetMember;

/** Optional parameters. */
export interface FleetMembersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
}

/** Contains response data for the update operation. */
export type FleetMembersUpdateResponse = FleetMember;

/** Optional parameters. */
export interface FleetMembersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface FleetMembersListByFleetNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByFleetNext operation. */
export type FleetMembersListByFleetNextResponse = FleetMemberListResult;

/** Optional parameters. */
export interface UpdateRunsListByFleetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByFleet operation. */
export type UpdateRunsListByFleetResponse = UpdateRunListResult;

/** Optional parameters. */
export interface UpdateRunsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type UpdateRunsGetResponse = UpdateRun;

/** Optional parameters. */
export interface UpdateRunsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** The request should only proceed if no entity matches this string. */
  ifNoneMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type UpdateRunsCreateOrUpdateResponse = UpdateRun;

/** Optional parameters. */
export interface UpdateRunsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface UpdateRunsStartOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the start operation. */
export type UpdateRunsStartResponse = UpdateRun;

/** Optional parameters. */
export interface UpdateRunsStopOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the stop operation. */
export type UpdateRunsStopResponse = UpdateRun;

/** Optional parameters. */
export interface UpdateRunsListByFleetNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByFleetNext operation. */
export type UpdateRunsListByFleetNextResponse = UpdateRunListResult;

/** Optional parameters. */
export interface ContainerServiceFleetClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
