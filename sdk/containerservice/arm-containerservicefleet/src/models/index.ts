/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The response of a Fleet list operation. */
export interface FleetListResult {
  /** The Fleet items on this page */
  value: Fleet[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The FleetHubProfile configures the fleet hub. */
export interface FleetHubProfile {
  /** DNS prefix used to create the FQDN for the Fleet hub. */
  dnsPrefix?: string;
  /** The access profile for the Fleet hub API server. */
  apiServerAccessProfile?: APIServerAccessProfile;
  /** The agent profile for the Fleet hub. */
  agentProfile?: AgentProfile;
  /**
   * The FQDN of the Fleet hub.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fqdn?: string;
  /**
   * The Kubernetes version of the Fleet hub.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kubernetesVersion?: string;
  /**
   * The Azure Portal FQDN of the Fleet hub.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly portalFqdn?: string;
}

/** Access profile for the Fleet hub API server. */
export interface APIServerAccessProfile {
  /** Whether to create the Fleet hub as a private cluster or not. */
  enablePrivateCluster?: boolean;
  /** Whether to enable apiserver vnet integration for the Fleet hub or not. */
  enableVnetIntegration?: boolean;
  /** The subnet to be used when apiserver vnet integration is enabled. It is required when creating a new Fleet with BYO vnet. */
  subnetId?: string;
}

/** Agent profile for the Fleet hub. */
export interface AgentProfile {
  /** The ID of the subnet which the Fleet hub node will join on startup. If this is not specified, a vnet and subnet will be generated and used. */
  subnetId?: string;
  /** The virtual machine size of the Fleet hub. */
  vmSize?: string;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export interface ManagedServiceIdentity {
  /**
   * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
  type: ManagedServiceIdentityType;
  /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Properties of a Fleet that can be patched. */
export interface FleetPatch {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** Managed identity. */
  identity?: ManagedServiceIdentity;
}

/** The response of a AutoUpgradeProfile list operation. */
export interface AutoUpgradeProfileListResult {
  /** The AutoUpgradeProfile items on this page */
  value: AutoUpgradeProfile[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The node image upgrade to be applied to the target clusters in auto upgrade. */
export interface AutoUpgradeNodeImageSelection {
  /** The node image upgrade type. */
  type: AutoUpgradeNodeImageSelectionType;
}

/** The Credential results response. */
export interface FleetCredentialResults {
  /**
   * Array of base64-encoded Kubernetes configuration files.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kubeconfigs?: FleetCredentialResult[];
}

/** One credential result item. */
export interface FleetCredentialResult {
  /**
   * The name of the credential.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Base64-encoded Kubernetes configuration file.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Uint8Array;
}

/** The response of a FleetMember list operation. */
export interface FleetMemberListResult {
  /** The FleetMember items on this page */
  value: FleetMember[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The type used for update operations of the FleetMember. */
export interface FleetMemberUpdate {
  /** The group this member belongs to for multi-cluster update management. */
  group?: string;
}

/** The response of a UpdateRun list operation. */
export interface UpdateRunListResult {
  /** The UpdateRun items on this page */
  value: UpdateRun[];
  /** The link to the next page of items */
  nextLink?: string;
}

/**
 * Defines the update sequence of the clusters via stages and groups.
 *
 * Stages within a run are executed sequentially one after another.
 * Groups within a stage are executed in parallel.
 * Member clusters within a group are updated sequentially one after another.
 *
 * A valid strategy contains no duplicate groups within or across stages.
 */
export interface UpdateRunStrategy {
  /** The list of stages that compose this update run. Min size: 1. */
  stages: UpdateStage[];
}

/** Defines a stage which contains the groups to update and the steps to take (e.g., wait for a time period) before starting the next stage. */
export interface UpdateStage {
  /** The name of the stage. Must be unique within the UpdateRun. */
  name: string;
  /** Defines the groups to be executed in parallel in this stage. Duplicate groups are not allowed. Min size: 1. */
  groups?: UpdateGroup[];
  /** The time in seconds to wait at the end of this stage before starting the next one. Defaults to 0 seconds if unspecified. */
  afterStageWaitInSeconds?: number;
}

/** A group to be updated. */
export interface UpdateGroup {
  /**
   * Name of the group.
   * It must match a group name of an existing fleet member.
   */
  name: string;
}

/** The update to be applied to the ManagedClusters. */
export interface ManagedClusterUpdate {
  /** The upgrade to apply to the ManagedClusters. */
  upgrade: ManagedClusterUpgradeSpec;
  /** The node image upgrade to be applied to the target nodes in update run. */
  nodeImageSelection?: NodeImageSelection;
}

/** The upgrade to apply to a ManagedCluster. */
export interface ManagedClusterUpgradeSpec {
  /** ManagedClusterUpgradeType is the type of upgrade to be applied. */
  type: ManagedClusterUpgradeType;
  /** The Kubernetes version to upgrade the member clusters to. */
  kubernetesVersion?: string;
}

/** The node image upgrade to be applied to the target nodes in update run. */
export interface NodeImageSelection {
  /** The node image upgrade type. */
  type: NodeImageSelectionType;
  /** Custom node image versions to upgrade the nodes to. This field is required if node image selection type is Custom. Otherwise, it must be empty. For each node image family (e.g., 'AKSUbuntu-1804gen2containerd'), this field can contain at most one version (e.g., only one of 'AKSUbuntu-1804gen2containerd-2023.01.12' or 'AKSUbuntu-1804gen2containerd-2023.02.12', not both). If the nodes belong to a family without a matching image version in this field, they are not upgraded. */
  customNodeImageVersions?: NodeImageVersion[];
}

/** The node upgrade image version. */
export interface NodeImageVersion {
  /**
   * The image version to upgrade the nodes to (e.g., 'AKSUbuntu-1804gen2containerd-2022.12.13').
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
}

/** The status of a UpdateRun. */
export interface UpdateRunStatus {
  /**
   * The status of the UpdateRun.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: UpdateStatus;
  /**
   * The stages composing an update run. Stages are run sequentially withing an UpdateRun.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly stages?: UpdateStageStatus[];
  /**
   * The node image upgrade specs for the update run. It is only set in update run when `NodeImageSelection.type` is `Consistent`.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodeImageSelection?: NodeImageSelectionStatus;
}

/** The status for an operation or group of operations. */
export interface UpdateStatus {
  /**
   * The time the operation or group was started.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * The time the operation or group was completed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly completedTime?: Date;
  /**
   * The State of the operation or group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: UpdateState;
  /**
   * The error details when a failure is encountered.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ErrorDetail;
}

/** The status of a UpdateStage. */
export interface UpdateStageStatus {
  /**
   * The status of the UpdateStage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: UpdateStatus;
  /**
   * The name of the UpdateStage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The list of groups to be updated as part of this UpdateStage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groups?: UpdateGroupStatus[];
  /**
   * The status of the wait period configured on the UpdateStage.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly afterStageWaitStatus?: WaitStatus;
}

/** The status of a UpdateGroup. */
export interface UpdateGroupStatus {
  /**
   * The status of the UpdateGroup.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: UpdateStatus;
  /**
   * The name of the UpdateGroup.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The list of member this UpdateGroup updates.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly members?: MemberUpdateStatus[];
}

/** The status of a member update operation. */
export interface MemberUpdateStatus {
  /**
   * The status of the MemberUpdate operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: UpdateStatus;
  /**
   * The name of the FleetMember.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The Azure resource id of the target Kubernetes cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clusterResourceId?: string;
  /**
   * The operation resource id of the latest attempt to perform the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationId?: string;
  /**
   * The status message after processing the member update operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** The status of the wait duration. */
export interface WaitStatus {
  /**
   * The status of the wait duration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: UpdateStatus;
  /**
   * The wait duration configured in seconds.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly waitDurationInSeconds?: number;
}

/** The node image upgrade specs for the update run. */
export interface NodeImageSelectionStatus {
  /**
   * The image versions to upgrade the nodes to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly selectedNodeImageVersions?: NodeImageVersion[];
}

/** The properties of a skip operation containing multiple skip requests. */
export interface SkipProperties {
  /** The targets to skip. */
  targets: SkipTarget[];
}

/** The definition of a single skip request. */
export interface SkipTarget {
  /** The skip target type. */
  type: TargetType;
  /**
   * The skip target's name.
   * To skip a member/group/stage, use the member/group/stage's name;
   * Tp skip an after stage wait, use the parent stage's name.
   */
  name: string;
}

/** The response of a FleetUpdateStrategy list operation. */
export interface FleetUpdateStrategyListResult {
  /** The FleetUpdateStrategy items on this page */
  value: FleetUpdateStrategy[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The Fleet resource. */
export interface Fleet extends TrackedResource {
  /**
   * If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eTag?: string;
  /** Managed identity. */
  identity?: ManagedServiceIdentity;
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: FleetProvisioningState;
  /** The FleetHubProfile configures the Fleet's hub. */
  hubProfile?: FleetHubProfile;
}

/** The AutoUpgradeProfile resource. */
export interface AutoUpgradeProfile extends ProxyResource {
  /**
   * If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eTag?: string;
  /**
   * The provisioning state of the AutoUpgradeProfile resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: AutoUpgradeProfileProvisioningState;
  /** The resource id of the UpdateStrategy resource to reference. If not specified, the auto upgrade will run on all clusters which are members of the fleet. */
  updateStrategyId?: string;
  /** Configures how auto-upgrade will be run. */
  channel?: UpgradeChannel;
  /** The node image upgrade to be applied to the target clusters in auto upgrade. */
  nodeImageSelection?: AutoUpgradeNodeImageSelection;
  /**
   * If set to False: the auto upgrade has effect - target managed clusters will be upgraded on schedule.
   * If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed clusters.
   * This is a boolean and not an enum because enabled/disabled are all available states of the auto upgrade profile.
   * By default, this is set to False.
   */
  disabled?: boolean;
}

/** A member of the Fleet. It contains a reference to an existing Kubernetes cluster on Azure. */
export interface FleetMember extends ProxyResource {
  /**
   * If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eTag?: string;
  /** The ARM resource id of the cluster that joins the Fleet. Must be a valid Azure resource id. e.g.: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'. */
  clusterResourceId?: string;
  /** The group this member belongs to for multi-cluster update management. */
  group?: string;
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: FleetMemberProvisioningState;
}

/** A multi-stage process to perform update operations across members of a Fleet. */
export interface UpdateRun extends ProxyResource {
  /**
   * If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eTag?: string;
  /**
   * The provisioning state of the UpdateRun resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: UpdateRunProvisioningState;
  /**
   * The resource id of the FleetUpdateStrategy resource to reference.
   *
   * When creating a new run, there are three ways to define a strategy for the run:
   * 1. Define a new strategy in place: Set the "strategy" field.
   * 2. Use an existing strategy: Set the "updateStrategyId" field. (since 2023-08-15-preview)
   * 3. Use the default strategy to update all the members one by one: Leave both "updateStrategyId" and "strategy" unset. (since 2023-08-15-preview)
   *
   * Setting both "updateStrategyId" and "strategy" is invalid.
   *
   * UpdateRuns created by "updateStrategyId" snapshot the referenced UpdateStrategy at the time of creation and store it in the "strategy" field.
   * Subsequent changes to the referenced FleetUpdateStrategy resource do not propagate.
   * UpdateRunStrategy changes can be made directly on the "strategy" field before launching the UpdateRun.
   */
  updateStrategyId?: string;
  /**
   * The strategy defines the order in which the clusters will be updated.
   * If not set, all members will be updated sequentially. The UpdateRun status will show a single UpdateStage and a single UpdateGroup targeting all members.
   * The strategy of the UpdateRun can be modified until the run is started.
   */
  strategy?: UpdateRunStrategy;
  /** The update to be applied to all clusters in the UpdateRun. The managedClusterUpdate can be modified until the run is started. */
  managedClusterUpdate?: ManagedClusterUpdate;
  /**
   * The status of the UpdateRun.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: UpdateRunStatus;
}

/** Defines a multi-stage process to perform update operations across members of a Fleet. */
export interface FleetUpdateStrategy extends ProxyResource {
  /**
   * If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eTag?: string;
  /**
   * The provisioning state of the UpdateStrategy resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: FleetUpdateStrategyProvisioningState;
  /** Defines the update sequence of the clusters. */
  strategy?: UpdateRunStrategy;
}

/** Defines headers for Fleets_createOrUpdate operation. */
export interface FleetsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Fleets_update operation. */
export interface FleetsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Fleets_delete operation. */
export interface FleetsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for AutoUpgradeProfiles_createOrUpdate operation. */
export interface AutoUpgradeProfilesCreateOrUpdateHeaders {
  /** A link to the status monitor */
  azureAsyncOperation?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for AutoUpgradeProfiles_delete operation. */
export interface AutoUpgradeProfilesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for FleetMembers_create operation. */
export interface FleetMembersCreateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for FleetMembers_update operation. */
export interface FleetMembersUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for FleetMembers_delete operation. */
export interface FleetMembersDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for UpdateRuns_createOrUpdate operation. */
export interface UpdateRunsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for UpdateRuns_delete operation. */
export interface UpdateRunsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for UpdateRuns_skip operation. */
export interface UpdateRunsSkipHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for UpdateRuns_start operation. */
export interface UpdateRunsStartHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for UpdateRuns_stop operation. */
export interface UpdateRunsStopHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for FleetUpdateStrategies_createOrUpdate operation. */
export interface FleetUpdateStrategiesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for FleetUpdateStrategies_delete operation. */
export interface FleetUpdateStrategiesDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system",
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal",
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link FleetProvisioningState} that the service accepts. */
export enum KnownFleetProvisioningState {
  /** Resource has been created. */
  Succeeded = "Succeeded",
  /** Resource creation failed. */
  Failed = "Failed",
  /** Resource creation was canceled. */
  Canceled = "Canceled",
  /** The provisioning state of a fleet being created. */
  Creating = "Creating",
  /** The provisioning state of a fleet being updated. */
  Updating = "Updating",
  /** The provisioning state of a fleet being deleted. */
  Deleting = "Deleting",
}

/**
 * Defines values for FleetProvisioningState. \
 * {@link KnownFleetProvisioningState} can be used interchangeably with FleetProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: Resource has been created. \
 * **Failed**: Resource creation failed. \
 * **Canceled**: Resource creation was canceled. \
 * **Creating**: The provisioning state of a fleet being created. \
 * **Updating**: The provisioning state of a fleet being updated. \
 * **Deleting**: The provisioning state of a fleet being deleted.
 */
export type FleetProvisioningState = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned, UserAssigned",
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned**
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link AutoUpgradeProfileProvisioningState} that the service accepts. */
export enum KnownAutoUpgradeProfileProvisioningState {
  /** Resource has been created. */
  Succeeded = "Succeeded",
  /** Resource creation failed. */
  Failed = "Failed",
  /** Resource creation was canceled. */
  Canceled = "Canceled",
}

/**
 * Defines values for AutoUpgradeProfileProvisioningState. \
 * {@link KnownAutoUpgradeProfileProvisioningState} can be used interchangeably with AutoUpgradeProfileProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: Resource has been created. \
 * **Failed**: Resource creation failed. \
 * **Canceled**: Resource creation was canceled.
 */
export type AutoUpgradeProfileProvisioningState = string;

/** Known values of {@link UpgradeChannel} that the service accepts. */
export enum KnownUpgradeChannel {
  /**
   *  Upgrades the clusters kubernetes version to the latest supported patch release on minor version N-1, where N is the latest supported minor version.
   *  For example, if a cluster runs version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, the cluster upgrades to 1.18.6.
   */
  Stable = "Stable",
  /** Upgrades the clusters kubernetes version to the latest supported patch release on the latest supported minor version. */
  Rapid = "Rapid",
  /** Upgrade node image version of the clusters. */
  NodeImage = "NodeImage",
}

/**
 * Defines values for UpgradeChannel. \
 * {@link KnownUpgradeChannel} can be used interchangeably with UpgradeChannel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Stable**:  Upgrades the clusters kubernetes version to the latest supported patch release on minor version N-1, where N is the latest supported minor version.
 *  For example, if a cluster runs version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, the cluster upgrades to 1.18.6. \
 * **Rapid**: Upgrades the clusters kubernetes version to the latest supported patch release on the latest supported minor version. \
 * **NodeImage**: Upgrade node image version of the clusters.
 */
export type UpgradeChannel = string;

/** Known values of {@link AutoUpgradeNodeImageSelectionType} that the service accepts. */
export enum KnownAutoUpgradeNodeImageSelectionType {
  /** Use the latest image version when upgrading nodes. Clusters may use different image versions (e.g., 'AKSUbuntu-1804gen2containerd-2021.10.12' and 'AKSUbuntu-1804gen2containerd-2021.10.19') because, for example, the latest available version is different in different regions. */
  Latest = "Latest",
  /** The image versions to upgrade nodes to are selected as described below: for each node pool in managed clusters affected by the update run, the system selects the latest image version such that it is available across all other node pools (in all other clusters) of the same image type. As a result, all node pools of the same image type will be upgraded to the same image version. For example, if the latest image version for image type 'AKSUbuntu-1804gen2containerd' is 'AKSUbuntu-1804gen2containerd-2021.10.12' for a node pool in cluster A in region X, and is 'AKSUbuntu-1804gen2containerd-2021.10.17' for a node pool in cluster B in region Y, the system will upgrade both node pools to image version 'AKSUbuntu-1804gen2containerd-2021.10.12'. */
  Consistent = "Consistent",
}

/**
 * Defines values for AutoUpgradeNodeImageSelectionType. \
 * {@link KnownAutoUpgradeNodeImageSelectionType} can be used interchangeably with AutoUpgradeNodeImageSelectionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Latest**: Use the latest image version when upgrading nodes. Clusters may use different image versions (e.g., 'AKSUbuntu-1804gen2containerd-2021.10.12' and 'AKSUbuntu-1804gen2containerd-2021.10.19') because, for example, the latest available version is different in different regions. \
 * **Consistent**: The image versions to upgrade nodes to are selected as described below: for each node pool in managed clusters affected by the update run, the system selects the latest image version such that it is available across all other node pools (in all other clusters) of the same image type. As a result, all node pools of the same image type will be upgraded to the same image version. For example, if the latest image version for image type 'AKSUbuntu-1804gen2containerd' is 'AKSUbuntu-1804gen2containerd-2021.10.12' for a node pool in cluster A in region X, and is 'AKSUbuntu-1804gen2containerd-2021.10.17' for a node pool in cluster B in region Y, the system will upgrade both node pools to image version 'AKSUbuntu-1804gen2containerd-2021.10.12'.
 */
export type AutoUpgradeNodeImageSelectionType = string;

/** Known values of {@link FleetMemberProvisioningState} that the service accepts. */
export enum KnownFleetMemberProvisioningState {
  /** Resource has been created. */
  Succeeded = "Succeeded",
  /** Resource creation failed. */
  Failed = "Failed",
  /** Resource creation was canceled. */
  Canceled = "Canceled",
  /** The provisioning state of a member joining a fleet. */
  Joining = "Joining",
  /** The provisioning state of a member leaving a fleet. */
  Leaving = "Leaving",
  /** The provisioning state of a member being updated. */
  Updating = "Updating",
}

/**
 * Defines values for FleetMemberProvisioningState. \
 * {@link KnownFleetMemberProvisioningState} can be used interchangeably with FleetMemberProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: Resource has been created. \
 * **Failed**: Resource creation failed. \
 * **Canceled**: Resource creation was canceled. \
 * **Joining**: The provisioning state of a member joining a fleet. \
 * **Leaving**: The provisioning state of a member leaving a fleet. \
 * **Updating**: The provisioning state of a member being updated.
 */
export type FleetMemberProvisioningState = string;

/** Known values of {@link UpdateRunProvisioningState} that the service accepts. */
export enum KnownUpdateRunProvisioningState {
  /** Resource has been created. */
  Succeeded = "Succeeded",
  /** Resource creation failed. */
  Failed = "Failed",
  /** Resource creation was canceled. */
  Canceled = "Canceled",
}

/**
 * Defines values for UpdateRunProvisioningState. \
 * {@link KnownUpdateRunProvisioningState} can be used interchangeably with UpdateRunProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: Resource has been created. \
 * **Failed**: Resource creation failed. \
 * **Canceled**: Resource creation was canceled.
 */
export type UpdateRunProvisioningState = string;

/** Known values of {@link ManagedClusterUpgradeType} that the service accepts. */
export enum KnownManagedClusterUpgradeType {
  /** Full upgrades the control plane and all agent pools of the target ManagedClusters. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to be set. */
  Full = "Full",
  /** NodeImageOnly upgrades only the node images of the target ManagedClusters. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to NOT be set. */
  NodeImageOnly = "NodeImageOnly",
  /** ControlPlaneOnly upgrades only targets the KubernetesVersion of the ManagedClusters and will not be applied to the AgentPool. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to be set. */
  ControlPlaneOnly = "ControlPlaneOnly",
}

/**
 * Defines values for ManagedClusterUpgradeType. \
 * {@link KnownManagedClusterUpgradeType} can be used interchangeably with ManagedClusterUpgradeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Full**: Full upgrades the control plane and all agent pools of the target ManagedClusters. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to be set. \
 * **NodeImageOnly**: NodeImageOnly upgrades only the node images of the target ManagedClusters. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to NOT be set. \
 * **ControlPlaneOnly**: ControlPlaneOnly upgrades only targets the KubernetesVersion of the ManagedClusters and will not be applied to the AgentPool. Requires the ManagedClusterUpgradeSpec.KubernetesVersion property to be set.
 */
export type ManagedClusterUpgradeType = string;

/** Known values of {@link NodeImageSelectionType} that the service accepts. */
export enum KnownNodeImageSelectionType {
  /** Use the latest image version when upgrading nodes. Clusters may use different image versions (e.g., 'AKSUbuntu-1804gen2containerd-2021.10.12' and 'AKSUbuntu-1804gen2containerd-2021.10.19') because, for example, the latest available version is different in different regions. */
  Latest = "Latest",
  /** The image versions to upgrade nodes to are selected as described below: for each node pool in managed clusters affected by the update run, the system selects the latest image version such that it is available across all other node pools (in all other clusters) of the same image type. As a result, all node pools of the same image type will be upgraded to the same image version. For example, if the latest image version for image type 'AKSUbuntu-1804gen2containerd' is 'AKSUbuntu-1804gen2containerd-2021.10.12' for a node pool in cluster A in region X, and is 'AKSUbuntu-1804gen2containerd-2021.10.17' for a node pool in cluster B in region Y, the system will upgrade both node pools to image version 'AKSUbuntu-1804gen2containerd-2021.10.12'. */
  Consistent = "Consistent",
  /** Upgrade the nodes to the custom image versions. When set, update run will use node image versions provided in customNodeImageVersions to upgrade the nodes. If set, customNodeImageVersions must not be empty. */
  Custom = "Custom",
}

/**
 * Defines values for NodeImageSelectionType. \
 * {@link KnownNodeImageSelectionType} can be used interchangeably with NodeImageSelectionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Latest**: Use the latest image version when upgrading nodes. Clusters may use different image versions (e.g., 'AKSUbuntu-1804gen2containerd-2021.10.12' and 'AKSUbuntu-1804gen2containerd-2021.10.19') because, for example, the latest available version is different in different regions. \
 * **Consistent**: The image versions to upgrade nodes to are selected as described below: for each node pool in managed clusters affected by the update run, the system selects the latest image version such that it is available across all other node pools (in all other clusters) of the same image type. As a result, all node pools of the same image type will be upgraded to the same image version. For example, if the latest image version for image type 'AKSUbuntu-1804gen2containerd' is 'AKSUbuntu-1804gen2containerd-2021.10.12' for a node pool in cluster A in region X, and is 'AKSUbuntu-1804gen2containerd-2021.10.17' for a node pool in cluster B in region Y, the system will upgrade both node pools to image version 'AKSUbuntu-1804gen2containerd-2021.10.12'. \
 * **Custom**: Upgrade the nodes to the custom image versions. When set, update run will use node image versions provided in customNodeImageVersions to upgrade the nodes. If set, customNodeImageVersions must not be empty.
 */
export type NodeImageSelectionType = string;

/** Known values of {@link UpdateState} that the service accepts. */
export enum KnownUpdateState {
  /** The state of an UpdateRun\/UpdateStage\/UpdateGroup\/MemberUpdate that has not been started. */
  NotStarted = "NotStarted",
  /** The state of an UpdateRun\/UpdateStage\/UpdateGroup\/MemberUpdate that is running. */
  Running = "Running",
  /** The state of an UpdateRun\/UpdateStage\/UpdateGroup\/MemberUpdate that is being stopped. */
  Stopping = "Stopping",
  /** The state of an UpdateRun\/UpdateStage\/UpdateGroup\/MemberUpdate that has stopped. */
  Stopped = "Stopped",
  /** The state of an UpdateRun\/UpdateStage\/UpdateGroup\/MemberUpdate that has been skipped. */
  Skipped = "Skipped",
  /** The state of an UpdateRun\/UpdateStage\/UpdateGroup\/MemberUpdate that has failed. */
  Failed = "Failed",
  /** The state of an UpdateRun\/UpdateStage\/UpdateGroup\/MemberUpdate that has completed. */
  Completed = "Completed",
}

/**
 * Defines values for UpdateState. \
 * {@link KnownUpdateState} can be used interchangeably with UpdateState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted**: The state of an UpdateRun\/UpdateStage\/UpdateGroup\/MemberUpdate that has not been started. \
 * **Running**: The state of an UpdateRun\/UpdateStage\/UpdateGroup\/MemberUpdate that is running. \
 * **Stopping**: The state of an UpdateRun\/UpdateStage\/UpdateGroup\/MemberUpdate that is being stopped. \
 * **Stopped**: The state of an UpdateRun\/UpdateStage\/UpdateGroup\/MemberUpdate that has stopped. \
 * **Skipped**: The state of an UpdateRun\/UpdateStage\/UpdateGroup\/MemberUpdate that has been skipped. \
 * **Failed**: The state of an UpdateRun\/UpdateStage\/UpdateGroup\/MemberUpdate that has failed. \
 * **Completed**: The state of an UpdateRun\/UpdateStage\/UpdateGroup\/MemberUpdate that has completed.
 */
export type UpdateState = string;

/** Known values of {@link TargetType} that the service accepts. */
export enum KnownTargetType {
  /** Skip the update of a member. */
  Member = "Member",
  /** Skip the update of a group. */
  Group = "Group",
  /** Skip the update of an entire stage including the after stage wait. */
  Stage = "Stage",
  /** Skip the update of the after stage wait of a certain stage. */
  AfterStageWait = "AfterStageWait",
}

/**
 * Defines values for TargetType. \
 * {@link KnownTargetType} can be used interchangeably with TargetType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Member**: Skip the update of a member. \
 * **Group**: Skip the update of a group. \
 * **Stage**: Skip the update of an entire stage including the after stage wait. \
 * **AfterStageWait**: Skip the update of the after stage wait of a certain stage.
 */
export type TargetType = string;

/** Known values of {@link FleetUpdateStrategyProvisioningState} that the service accepts. */
export enum KnownFleetUpdateStrategyProvisioningState {
  /** Resource has been created. */
  Succeeded = "Succeeded",
  /** Resource creation failed. */
  Failed = "Failed",
  /** Resource creation was canceled. */
  Canceled = "Canceled",
}

/**
 * Defines values for FleetUpdateStrategyProvisioningState. \
 * {@link KnownFleetUpdateStrategyProvisioningState} can be used interchangeably with FleetUpdateStrategyProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: Resource has been created. \
 * **Failed**: Resource creation failed. \
 * **Canceled**: Resource creation was canceled.
 */
export type FleetUpdateStrategyProvisioningState = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface FleetsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type FleetsListBySubscriptionResponse = FleetListResult;

/** Optional parameters. */
export interface FleetsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type FleetsListByResourceGroupResponse = FleetListResult;

/** Optional parameters. */
export interface FleetsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FleetsGetResponse = Fleet;

/** Optional parameters. */
export interface FleetsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** The request should only proceed if no entity matches this string. */
  ifNoneMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type FleetsCreateOrUpdateResponse = Fleet;

/** Optional parameters. */
export interface FleetsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type FleetsUpdateResponse = Fleet;

/** Optional parameters. */
export interface FleetsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface FleetsListCredentialsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listCredentials operation. */
export type FleetsListCredentialsResponse = FleetCredentialResults;

/** Optional parameters. */
export interface FleetsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type FleetsListBySubscriptionNextResponse = FleetListResult;

/** Optional parameters. */
export interface FleetsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type FleetsListByResourceGroupNextResponse = FleetListResult;

/** Optional parameters. */
export interface AutoUpgradeProfilesListByFleetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByFleet operation. */
export type AutoUpgradeProfilesListByFleetResponse =
  AutoUpgradeProfileListResult;

/** Optional parameters. */
export interface AutoUpgradeProfilesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AutoUpgradeProfilesGetResponse = AutoUpgradeProfile;

/** Optional parameters. */
export interface AutoUpgradeProfilesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** The request should only proceed if no entity matches this string. */
  ifNoneMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AutoUpgradeProfilesCreateOrUpdateResponse = AutoUpgradeProfile;

/** Optional parameters. */
export interface AutoUpgradeProfilesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type AutoUpgradeProfilesDeleteResponse =
  AutoUpgradeProfilesDeleteHeaders;

/** Optional parameters. */
export interface AutoUpgradeProfilesListByFleetNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByFleetNext operation. */
export type AutoUpgradeProfilesListByFleetNextResponse =
  AutoUpgradeProfileListResult;

/** Optional parameters. */
export interface FleetMembersListByFleetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByFleet operation. */
export type FleetMembersListByFleetResponse = FleetMemberListResult;

/** Optional parameters. */
export interface FleetMembersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FleetMembersGetResponse = FleetMember;

/** Optional parameters. */
export interface FleetMembersCreateOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** The request should only proceed if no entity matches this string. */
  ifNoneMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type FleetMembersCreateResponse = FleetMember;

/** Optional parameters. */
export interface FleetMembersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type FleetMembersUpdateResponse = FleetMember;

/** Optional parameters. */
export interface FleetMembersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface FleetMembersListByFleetNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByFleetNext operation. */
export type FleetMembersListByFleetNextResponse = FleetMemberListResult;

/** Optional parameters. */
export interface UpdateRunsListByFleetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByFleet operation. */
export type UpdateRunsListByFleetResponse = UpdateRunListResult;

/** Optional parameters. */
export interface UpdateRunsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type UpdateRunsGetResponse = UpdateRun;

/** Optional parameters. */
export interface UpdateRunsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** The request should only proceed if no entity matches this string. */
  ifNoneMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type UpdateRunsCreateOrUpdateResponse = UpdateRun;

/** Optional parameters. */
export interface UpdateRunsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface UpdateRunsSkipOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the skip operation. */
export type UpdateRunsSkipResponse = UpdateRun;

/** Optional parameters. */
export interface UpdateRunsStartOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the start operation. */
export type UpdateRunsStartResponse = UpdateRun;

/** Optional parameters. */
export interface UpdateRunsStopOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the stop operation. */
export type UpdateRunsStopResponse = UpdateRun;

/** Optional parameters. */
export interface UpdateRunsListByFleetNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByFleetNext operation. */
export type UpdateRunsListByFleetNextResponse = UpdateRunListResult;

/** Optional parameters. */
export interface FleetUpdateStrategiesListByFleetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByFleet operation. */
export type FleetUpdateStrategiesListByFleetResponse =
  FleetUpdateStrategyListResult;

/** Optional parameters. */
export interface FleetUpdateStrategiesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FleetUpdateStrategiesGetResponse = FleetUpdateStrategy;

/** Optional parameters. */
export interface FleetUpdateStrategiesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** The request should only proceed if no entity matches this string. */
  ifNoneMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type FleetUpdateStrategiesCreateOrUpdateResponse = FleetUpdateStrategy;

/** Optional parameters. */
export interface FleetUpdateStrategiesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** The request should only proceed if an entity matches this string. */
  ifMatch?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface FleetUpdateStrategiesListByFleetNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByFleetNext operation. */
export type FleetUpdateStrategiesListByFleetNextResponse =
  FleetUpdateStrategyListResult;

/** Optional parameters. */
export interface ContainerServiceFleetClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
