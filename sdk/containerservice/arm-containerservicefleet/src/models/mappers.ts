/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const FleetListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FleetListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Fleet"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FleetHubProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FleetHubProfile",
    modelProperties: {
      dnsPrefix: {
        constraints: {
          Pattern: new RegExp(
            "^[a-zA-Z0-9]$|^[a-zA-Z0-9][a-zA-Z0-9-]{0,52}[a-zA-Z0-9]$"
          ),
          MaxLength: 54,
          MinLength: 1
        },
        serializedName: "dnsPrefix",
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const FleetPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FleetPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const FleetCredentialResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FleetCredentialResults",
    modelProperties: {
      kubeconfigs: {
        serializedName: "kubeconfigs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FleetCredentialResult"
            }
          }
        }
      }
    }
  }
};

export const FleetCredentialResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FleetCredentialResult",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const FleetMemberListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FleetMemberListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FleetMember"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FleetMemberUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FleetMemberUpdate",
    modelProperties: {
      group: {
        constraints: {
          Pattern: new RegExp("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"),
          MaxLength: 50,
          MinLength: 1
        },
        serializedName: "properties.group",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateRunListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateRunListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateRun"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateRunStrategy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateRunStrategy",
    modelProperties: {
      stages: {
        serializedName: "stages",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateStage"
            }
          }
        }
      }
    }
  }
};

export const UpdateStage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateStage",
    modelProperties: {
      name: {
        constraints: {
          Pattern: new RegExp("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"),
          MaxLength: 50,
          MinLength: 1
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      groups: {
        serializedName: "groups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateGroup"
            }
          }
        }
      },
      afterStageWaitInSeconds: {
        serializedName: "afterStageWaitInSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateGroup",
    modelProperties: {
      name: {
        constraints: {
          Pattern: new RegExp("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"),
          MaxLength: 50,
          MinLength: 1
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterUpdate",
    modelProperties: {
      upgrade: {
        serializedName: "upgrade",
        type: {
          name: "Composite",
          className: "ManagedClusterUpgradeSpec"
        }
      }
    }
  }
};

export const ManagedClusterUpgradeSpec: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterUpgradeSpec",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateRunStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateRunStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "UpdateStatus"
        }
      },
      stages: {
        serializedName: "stages",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateStageStatus"
            }
          }
        }
      }
    }
  }
};

export const UpdateStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateStatus",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      completedTime: {
        serializedName: "completedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const UpdateStageStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateStageStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "UpdateStatus"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      groups: {
        serializedName: "groups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateGroupStatus"
            }
          }
        }
      },
      afterStageWaitStatus: {
        serializedName: "afterStageWaitStatus",
        type: {
          name: "Composite",
          className: "WaitStatus"
        }
      }
    }
  }
};

export const UpdateGroupStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateGroupStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "UpdateStatus"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      members: {
        serializedName: "members",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MemberUpdateStatus"
            }
          }
        }
      }
    }
  }
};

export const MemberUpdateStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MemberUpdateStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "UpdateStatus"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clusterResourceId: {
        serializedName: "clusterResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationId: {
        serializedName: "operationId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WaitStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WaitStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "UpdateStatus"
        }
      },
      waitDurationInSeconds: {
        serializedName: "waitDurationInSeconds",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const Fleet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Fleet",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      eTag: {
        serializedName: "eTag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hubProfile: {
        serializedName: "properties.hubProfile",
        type: {
          name: "Composite",
          className: "FleetHubProfile"
        }
      }
    }
  }
};

export const FleetMember: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FleetMember",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      eTag: {
        serializedName: "eTag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clusterResourceId: {
        serializedName: "properties.clusterResourceId",
        type: {
          name: "String"
        }
      },
      group: {
        constraints: {
          Pattern: new RegExp("^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"),
          MaxLength: 50,
          MinLength: 1
        },
        serializedName: "properties.group",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateRun: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateRun",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      eTag: {
        serializedName: "eTag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      strategy: {
        serializedName: "properties.strategy",
        type: {
          name: "Composite",
          className: "UpdateRunStrategy"
        }
      },
      managedClusterUpdate: {
        serializedName: "properties.managedClusterUpdate",
        type: {
          name: "Composite",
          className: "ManagedClusterUpdate"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "UpdateRunStatus"
        }
      }
    }
  }
};

export const FleetsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FleetsCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FleetsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FleetsDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FleetMembersCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FleetMembersCreateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FleetMembersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FleetMembersDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateRunsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateRunsCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateRunsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateRunsDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateRunsStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateRunsStartHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateRunsStopHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateRunsStopHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};
