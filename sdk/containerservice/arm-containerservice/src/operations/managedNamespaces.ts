// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import type { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import type { ManagedNamespaces } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import type { ContainerServiceClient } from "../containerServiceClient.js";
import type { SimplePollerLike, OperationState } from "@azure/core-lro";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import type {
  ManagedNamespace,
  ManagedNamespacesListByManagedClusterNextOptionalParams,
  ManagedNamespacesListByManagedClusterOptionalParams,
  ManagedNamespacesListByManagedClusterResponse,
  ManagedNamespacesGetOptionalParams,
  ManagedNamespacesGetResponse,
  ManagedNamespacesCreateOrUpdateOptionalParams,
  ManagedNamespacesCreateOrUpdateResponse,
  ManagedNamespacesDeleteOptionalParams,
  ManagedNamespacesDeleteResponse,
  TagsObject,
  ManagedNamespacesUpdateOptionalParams,
  ManagedNamespacesUpdateResponse,
  ManagedNamespacesListCredentialOptionalParams,
  ManagedNamespacesListCredentialResponse,
  ManagedNamespacesListByManagedClusterNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing ManagedNamespaces operations. */
export class ManagedNamespacesImpl implements ManagedNamespaces {
  private readonly client: ContainerServiceClient;

  /**
   * Initialize a new instance of the class ManagedNamespaces class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerServiceClient) {
    this.client = client;
  }

  /**
   * Gets a list of managed namespaces in the specified managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  public listByManagedCluster(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedNamespacesListByManagedClusterOptionalParams,
  ): PagedAsyncIterableIterator<ManagedNamespace> {
    const iter = this.listByManagedClusterPagingAll(resourceGroupName, resourceName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByManagedClusterPagingPage(
          resourceGroupName,
          resourceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByManagedClusterPagingPage(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedNamespacesListByManagedClusterOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ManagedNamespace[]> {
    let result: ManagedNamespacesListByManagedClusterResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByManagedCluster(resourceGroupName, resourceName, options);
      const page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByManagedClusterNext(
        resourceGroupName,
        resourceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      const page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByManagedClusterPagingAll(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedNamespacesListByManagedClusterOptionalParams,
  ): AsyncIterableIterator<ManagedNamespace> {
    for await (const page of this.listByManagedClusterPagingPage(
      resourceGroupName,
      resourceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of managed namespaces in the specified managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  private _listByManagedCluster(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedNamespacesListByManagedClusterOptionalParams,
  ): Promise<ManagedNamespacesListByManagedClusterResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listByManagedClusterOperationSpec,
    );
  }

  /**
   * Gets the specified namespace of a managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param managedNamespaceName The name of the managed namespace.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    managedNamespaceName: string,
    options?: ManagedNamespacesGetOptionalParams,
  ): Promise<ManagedNamespacesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, managedNamespaceName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates a managed namespace in the specified managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param managedNamespaceName The name of the managed namespace.
   * @param parameters The namespace to create or update.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    resourceName: string,
    managedNamespaceName: string,
    parameters: ManagedNamespace,
    options?: ManagedNamespacesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagedNamespacesCreateOrUpdateResponse>,
      ManagedNamespacesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagedNamespacesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        resourceName,
        managedNamespaceName,
        parameters,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagedNamespacesCreateOrUpdateResponse,
      OperationState<ManagedNamespacesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates a managed namespace in the specified managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param managedNamespaceName The name of the managed namespace.
   * @param parameters The namespace to create or update.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    resourceName: string,
    managedNamespaceName: string,
    parameters: ManagedNamespace,
    options?: ManagedNamespacesCreateOrUpdateOptionalParams,
  ): Promise<ManagedNamespacesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      resourceName,
      managedNamespaceName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a namespace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param managedNamespaceName The name of the managed namespace.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    resourceName: string,
    managedNamespaceName: string,
    options?: ManagedNamespacesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagedNamespacesDeleteResponse>,
      ManagedNamespacesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagedNamespacesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, managedNamespaceName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagedNamespacesDeleteResponse,
      OperationState<ManagedNamespacesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a namespace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param managedNamespaceName The name of the managed namespace.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    resourceName: string,
    managedNamespaceName: string,
    options?: ManagedNamespacesDeleteOptionalParams,
  ): Promise<ManagedNamespacesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      resourceName,
      managedNamespaceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates tags on a managed namespace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param managedNamespaceName The name of the managed namespace.
   * @param parameters Parameters supplied to the patch namespace operation, we only support patch tags
   *                   for now.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    resourceName: string,
    managedNamespaceName: string,
    parameters: TagsObject,
    options?: ManagedNamespacesUpdateOptionalParams,
  ): Promise<ManagedNamespacesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        managedNamespaceName,
        parameters,
        options,
      },
      updateOperationSpec,
    );
  }

  /**
   * Lists the credentials of a namespace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param managedNamespaceName The name of the managed namespace.
   * @param options The options parameters.
   */
  listCredential(
    resourceGroupName: string,
    resourceName: string,
    managedNamespaceName: string,
    options?: ManagedNamespacesListCredentialOptionalParams,
  ): Promise<ManagedNamespacesListCredentialResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, managedNamespaceName, options },
      listCredentialOperationSpec,
    );
  }

  /**
   * ListByManagedClusterNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param nextLink The nextLink from the previous successful call to the ListByManagedCluster method.
   * @param options The options parameters.
   */
  private _listByManagedClusterNext(
    resourceGroupName: string,
    resourceName: string,
    nextLink: string,
    options?: ManagedNamespacesListByManagedClusterNextOptionalParams,
  ): Promise<ManagedNamespacesListByManagedClusterNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, nextLink, options },
      listByManagedClusterNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByManagedClusterOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/managedNamespaces",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedNamespaceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/managedNamespaces/{managedNamespaceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedNamespace,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.managedNamespaceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/managedNamespaces/{managedNamespaceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedNamespace,
      headersMapper: Mappers.ManagedNamespacesCreateOrUpdateHeaders,
    },
    201: {
      bodyMapper: Mappers.ManagedNamespace,
      headersMapper: Mappers.ManagedNamespacesCreateOrUpdateHeaders,
    },
    202: {
      bodyMapper: Mappers.ManagedNamespace,
      headersMapper: Mappers.ManagedNamespacesCreateOrUpdateHeaders,
    },
    204: {
      bodyMapper: Mappers.ManagedNamespace,
      headersMapper: Mappers.ManagedNamespacesCreateOrUpdateHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.ManagedNamespacesCreateOrUpdateExceptionHeaders,
    },
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.managedNamespaceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/managedNamespaces/{managedNamespaceName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ManagedNamespacesDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ManagedNamespacesDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ManagedNamespacesDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ManagedNamespacesDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.ManagedNamespacesDeleteExceptionHeaders,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.managedNamespaceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/managedNamespaces/{managedNamespaceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedNamespace,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.managedNamespaceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listCredentialOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/managedNamespaces/{managedNamespaceName}/listCredential",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CredentialResults,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.managedNamespaceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByManagedClusterNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedNamespaceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
