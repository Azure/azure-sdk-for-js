/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/containerServicesMappers";
import * as Parameters from "../models/parameters";
import { ContainerServiceClientContext } from "../containerServiceClientContext";

/** Class representing a ContainerServices. */
export class ContainerServices {
  private readonly client: ContainerServiceClientContext;

  /**
   * Create a ContainerServices.
   * @param {ContainerServiceClientContext} client Reference to the service client.
   */
  constructor(client: ContainerServiceClientContext) {
    this.client = client;
  }

  /**
   * Gets a list of supported orchestrators in the specified subscription. The operation returns
   * properties of each orchestrator including version, available upgrades and whether that version
   * or upgrades are in preview.
   * @summary Gets a list of supported orchestrators in the specified subscription.
   * @param location The name of a supported Azure region.
   * @param [options] The optional parameters
   * @returns Promise<Models.ContainerServicesListOrchestratorsResponse>
   */
  listOrchestrators(location: string, options?: Models.ContainerServicesListOrchestratorsOptionalParams): Promise<Models.ContainerServicesListOrchestratorsResponse>;
  /**
   * @param location The name of a supported Azure region.
   * @param callback The callback
   */
  listOrchestrators(location: string, callback: msRest.ServiceCallback<Models.OrchestratorVersionProfileListResult>): void;
  /**
   * @param location The name of a supported Azure region.
   * @param options The optional parameters
   * @param callback The callback
   */
  listOrchestrators(location: string, options: Models.ContainerServicesListOrchestratorsOptionalParams, callback: msRest.ServiceCallback<Models.OrchestratorVersionProfileListResult>): void;
  listOrchestrators(location: string, options?: Models.ContainerServicesListOrchestratorsOptionalParams | msRest.ServiceCallback<Models.OrchestratorVersionProfileListResult>, callback?: msRest.ServiceCallback<Models.OrchestratorVersionProfileListResult>): Promise<Models.ContainerServicesListOrchestratorsResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        options
      },
      listOrchestratorsOperationSpec,
      callback) as Promise<Models.ContainerServicesListOrchestratorsResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOrchestratorsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/orchestrators",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.resourceType
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OrchestratorVersionProfileListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
