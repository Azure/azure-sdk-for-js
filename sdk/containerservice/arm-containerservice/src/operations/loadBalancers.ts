/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { LoadBalancers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerServiceClient } from "../containerServiceClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  LoadBalancer,
  LoadBalancersListByManagedClusterNextOptionalParams,
  LoadBalancersListByManagedClusterOptionalParams,
  LoadBalancersListByManagedClusterResponse,
  LoadBalancersGetOptionalParams,
  LoadBalancersGetResponse,
  LoadBalancersCreateOrUpdateOptionalParams,
  LoadBalancersCreateOrUpdateResponse,
  LoadBalancersDeleteOptionalParams,
  LoadBalancersDeleteResponse,
  LoadBalancersListByManagedClusterNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing LoadBalancers operations. */
export class LoadBalancersImpl implements LoadBalancers {
  private readonly client: ContainerServiceClient;

  /**
   * Initialize a new instance of the class LoadBalancers class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerServiceClient) {
    this.client = client;
  }

  /**
   * Gets a list of load balancers in the specified managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  public listByManagedCluster(
    resourceGroupName: string,
    resourceName: string,
    options?: LoadBalancersListByManagedClusterOptionalParams,
  ): PagedAsyncIterableIterator<LoadBalancer> {
    const iter = this.listByManagedClusterPagingAll(
      resourceGroupName,
      resourceName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByManagedClusterPagingPage(
          resourceGroupName,
          resourceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByManagedClusterPagingPage(
    resourceGroupName: string,
    resourceName: string,
    options?: LoadBalancersListByManagedClusterOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<LoadBalancer[]> {
    let result: LoadBalancersListByManagedClusterResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByManagedCluster(
        resourceGroupName,
        resourceName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByManagedClusterNext(
        resourceGroupName,
        resourceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByManagedClusterPagingAll(
    resourceGroupName: string,
    resourceName: string,
    options?: LoadBalancersListByManagedClusterOptionalParams,
  ): AsyncIterableIterator<LoadBalancer> {
    for await (const page of this.listByManagedClusterPagingPage(
      resourceGroupName,
      resourceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of load balancers in the specified managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  private _listByManagedCluster(
    resourceGroupName: string,
    resourceName: string,
    options?: LoadBalancersListByManagedClusterOptionalParams,
  ): Promise<LoadBalancersListByManagedClusterResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listByManagedClusterOperationSpec,
    );
  }

  /**
   * Gets the specified load balancer.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param loadBalancerName The name of the load balancer.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    loadBalancerName: string,
    options?: LoadBalancersGetOptionalParams,
  ): Promise<LoadBalancersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, loadBalancerName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates a load balancer in the specified managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param loadBalancerName The name of the load balancer.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    resourceName: string,
    loadBalancerName: string,
    options?: LoadBalancersCreateOrUpdateOptionalParams,
  ): Promise<LoadBalancersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, loadBalancerName, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Deletes a load balancer in the specified managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param loadBalancerName The name of the load balancer.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    resourceName: string,
    loadBalancerName: string,
    options?: LoadBalancersDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LoadBalancersDeleteResponse>,
      LoadBalancersDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<LoadBalancersDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, loadBalancerName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      LoadBalancersDeleteResponse,
      OperationState<LoadBalancersDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a load balancer in the specified managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param loadBalancerName The name of the load balancer.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    resourceName: string,
    loadBalancerName: string,
    options?: LoadBalancersDeleteOptionalParams,
  ): Promise<LoadBalancersDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      resourceName,
      loadBalancerName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByManagedClusterNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param nextLink The nextLink from the previous successful call to the ListByManagedCluster method.
   * @param options The options parameters.
   */
  private _listByManagedClusterNext(
    resourceGroupName: string,
    resourceName: string,
    nextLink: string,
    options?: LoadBalancersListByManagedClusterNextOptionalParams,
  ): Promise<LoadBalancersListByManagedClusterNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, nextLink, options },
      listByManagedClusterNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByManagedClusterOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/loadBalancers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LoadBalancerListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/loadBalancers/{loadBalancerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LoadBalancer,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.loadBalancerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/loadBalancers/{loadBalancerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.LoadBalancer,
    },
    201: {
      bodyMapper: Mappers.LoadBalancer,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: {
    parameterPath: {
      name: ["options", "name"],
      primaryAgentPoolName: ["options", "primaryAgentPoolName"],
      allowServicePlacement: ["options", "allowServicePlacement"],
      serviceLabelSelector: ["options", "serviceLabelSelector"],
      serviceNamespaceSelector: ["options", "serviceNamespaceSelector"],
      nodeSelector: ["options", "nodeSelector"],
    },
    mapper: { ...Mappers.LoadBalancer, required: true },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.loadBalancerName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/loadBalancers/{loadBalancerName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.LoadBalancersDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.LoadBalancersDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.LoadBalancersDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.LoadBalancersDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.loadBalancerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByManagedClusterNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LoadBalancerListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
