/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ManagedClusters } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerServiceClient } from "../containerServiceClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ManagedCluster,
  ManagedClustersListNextOptionalParams,
  ManagedClustersListOptionalParams,
  ManagedClustersListResponse,
  ManagedClustersListByResourceGroupNextOptionalParams,
  ManagedClustersListByResourceGroupOptionalParams,
  ManagedClustersListByResourceGroupResponse,
  OutboundEnvironmentEndpoint,
  ManagedClustersListOutboundNetworkDependenciesEndpointsNextOptionalParams,
  ManagedClustersListOutboundNetworkDependenciesEndpointsOptionalParams,
  ManagedClustersListOutboundNetworkDependenciesEndpointsResponse,
  GuardrailsAvailableVersion,
  ManagedClustersListGuardrailsVersionsNextOptionalParams,
  ManagedClustersListGuardrailsVersionsOptionalParams,
  ManagedClustersListGuardrailsVersionsResponse,
  SafeguardsAvailableVersion,
  ManagedClustersListSafeguardsVersionsNextOptionalParams,
  ManagedClustersListSafeguardsVersionsOptionalParams,
  ManagedClustersListSafeguardsVersionsResponse,
  MeshRevisionProfile,
  ManagedClustersListMeshRevisionProfilesNextOptionalParams,
  ManagedClustersListMeshRevisionProfilesOptionalParams,
  ManagedClustersListMeshRevisionProfilesResponse,
  MeshUpgradeProfile,
  ManagedClustersListMeshUpgradeProfilesNextOptionalParams,
  ManagedClustersListMeshUpgradeProfilesOptionalParams,
  ManagedClustersListMeshUpgradeProfilesResponse,
  ManagedClustersListKubernetesVersionsOptionalParams,
  ManagedClustersListKubernetesVersionsResponse,
  ManagedClustersGetUpgradeProfileOptionalParams,
  ManagedClustersGetUpgradeProfileResponse,
  ManagedClustersGetAccessProfileOptionalParams,
  ManagedClustersGetAccessProfileResponse,
  ManagedClustersListClusterAdminCredentialsOptionalParams,
  ManagedClustersListClusterAdminCredentialsResponse,
  ManagedClustersListClusterUserCredentialsOptionalParams,
  ManagedClustersListClusterUserCredentialsResponse,
  ManagedClustersListClusterMonitoringUserCredentialsOptionalParams,
  ManagedClustersListClusterMonitoringUserCredentialsResponse,
  ManagedClustersGetOptionalParams,
  ManagedClustersGetResponse,
  ManagedClustersCreateOrUpdateOptionalParams,
  ManagedClustersCreateOrUpdateResponse,
  TagsObject,
  ManagedClustersUpdateTagsOptionalParams,
  ManagedClustersUpdateTagsResponse,
  ManagedClustersDeleteOptionalParams,
  ManagedClustersDeleteResponse,
  ManagedClusterServicePrincipalProfile,
  ManagedClustersResetServicePrincipalProfileOptionalParams,
  ManagedClusterAADProfile,
  ManagedClustersResetAADProfileOptionalParams,
  ManagedClustersAbortLatestOperationOptionalParams,
  ManagedClustersAbortLatestOperationResponse,
  ManagedClustersRotateClusterCertificatesOptionalParams,
  ManagedClustersRotateClusterCertificatesResponse,
  ManagedClustersRotateServiceAccountSigningKeysOptionalParams,
  ManagedClustersRotateServiceAccountSigningKeysResponse,
  ManagedClustersStopOptionalParams,
  ManagedClustersStopResponse,
  ManagedClustersStartOptionalParams,
  ManagedClustersStartResponse,
  RunCommandRequest,
  ManagedClustersRunCommandOptionalParams,
  ManagedClustersRunCommandResponse,
  ManagedClustersGetCommandResultOptionalParams,
  ManagedClustersGetCommandResultResponse,
  ManagedClustersGetGuardrailsVersionsOptionalParams,
  ManagedClustersGetGuardrailsVersionsResponse,
  ManagedClustersGetSafeguardsVersionsOptionalParams,
  ManagedClustersGetSafeguardsVersionsResponse,
  ManagedClustersGetMeshRevisionProfileOptionalParams,
  ManagedClustersGetMeshRevisionProfileResponse,
  ManagedClustersGetMeshUpgradeProfileOptionalParams,
  ManagedClustersGetMeshUpgradeProfileResponse,
  RebalanceLoadBalancersRequestBody,
  ManagedClustersRebalanceLoadBalancersOptionalParams,
  ManagedClustersRebalanceLoadBalancersResponse,
  ManagedClustersListNextResponse,
  ManagedClustersListByResourceGroupNextResponse,
  ManagedClustersListOutboundNetworkDependenciesEndpointsNextResponse,
  ManagedClustersListGuardrailsVersionsNextResponse,
  ManagedClustersListSafeguardsVersionsNextResponse,
  ManagedClustersListMeshRevisionProfilesNextResponse,
  ManagedClustersListMeshUpgradeProfilesNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ManagedClusters operations. */
export class ManagedClustersImpl implements ManagedClusters {
  private readonly client: ContainerServiceClient;

  /**
   * Initialize a new instance of the class ManagedClusters class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerServiceClient) {
    this.client = client;
  }

  /**
   * Gets a list of managed clusters in the specified subscription.
   * @param options The options parameters.
   */
  public list(
    options?: ManagedClustersListOptionalParams,
  ): PagedAsyncIterableIterator<ManagedCluster> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: ManagedClustersListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ManagedCluster[]> {
    let result: ManagedClustersListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: ManagedClustersListOptionalParams,
  ): AsyncIterableIterator<ManagedCluster> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists managed clusters in the specified subscription and resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: ManagedClustersListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<ManagedCluster> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: ManagedClustersListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ManagedCluster[]> {
    let result: ManagedClustersListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: ManagedClustersListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<ManagedCluster> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of egress endpoints (network endpoints of all outbound dependencies) in the specified
   * managed cluster. The operation returns properties of each egress endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  public listOutboundNetworkDependenciesEndpoints(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersListOutboundNetworkDependenciesEndpointsOptionalParams,
  ): PagedAsyncIterableIterator<OutboundEnvironmentEndpoint> {
    const iter = this.listOutboundNetworkDependenciesEndpointsPagingAll(
      resourceGroupName,
      resourceName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listOutboundNetworkDependenciesEndpointsPagingPage(
          resourceGroupName,
          resourceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listOutboundNetworkDependenciesEndpointsPagingPage(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersListOutboundNetworkDependenciesEndpointsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<OutboundEnvironmentEndpoint[]> {
    let result: ManagedClustersListOutboundNetworkDependenciesEndpointsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listOutboundNetworkDependenciesEndpoints(
        resourceGroupName,
        resourceName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listOutboundNetworkDependenciesEndpointsNext(
        resourceGroupName,
        resourceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listOutboundNetworkDependenciesEndpointsPagingAll(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersListOutboundNetworkDependenciesEndpointsOptionalParams,
  ): AsyncIterableIterator<OutboundEnvironmentEndpoint> {
    for await (const page of this.listOutboundNetworkDependenciesEndpointsPagingPage(
      resourceGroupName,
      resourceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Contains list of Guardrails version along with its support info and whether it is a default version.
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  public listGuardrailsVersions(
    location: string,
    options?: ManagedClustersListGuardrailsVersionsOptionalParams,
  ): PagedAsyncIterableIterator<GuardrailsAvailableVersion> {
    const iter = this.listGuardrailsVersionsPagingAll(location, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listGuardrailsVersionsPagingPage(
          location,
          options,
          settings,
        );
      },
    };
  }

  private async *listGuardrailsVersionsPagingPage(
    location: string,
    options?: ManagedClustersListGuardrailsVersionsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<GuardrailsAvailableVersion[]> {
    let result: ManagedClustersListGuardrailsVersionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listGuardrailsVersions(location, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listGuardrailsVersionsNext(
        location,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listGuardrailsVersionsPagingAll(
    location: string,
    options?: ManagedClustersListGuardrailsVersionsOptionalParams,
  ): AsyncIterableIterator<GuardrailsAvailableVersion> {
    for await (const page of this.listGuardrailsVersionsPagingPage(
      location,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Contains list of Safeguards version along with its support info and whether it is a default version.
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  public listSafeguardsVersions(
    location: string,
    options?: ManagedClustersListSafeguardsVersionsOptionalParams,
  ): PagedAsyncIterableIterator<SafeguardsAvailableVersion> {
    const iter = this.listSafeguardsVersionsPagingAll(location, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSafeguardsVersionsPagingPage(
          location,
          options,
          settings,
        );
      },
    };
  }

  private async *listSafeguardsVersionsPagingPage(
    location: string,
    options?: ManagedClustersListSafeguardsVersionsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SafeguardsAvailableVersion[]> {
    let result: ManagedClustersListSafeguardsVersionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSafeguardsVersions(location, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSafeguardsVersionsNext(
        location,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSafeguardsVersionsPagingAll(
    location: string,
    options?: ManagedClustersListSafeguardsVersionsOptionalParams,
  ): AsyncIterableIterator<SafeguardsAvailableVersion> {
    for await (const page of this.listSafeguardsVersionsPagingPage(
      location,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Contains extra metadata on each revision, including supported revisions, cluster compatibility and
   * available upgrades
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  public listMeshRevisionProfiles(
    location: string,
    options?: ManagedClustersListMeshRevisionProfilesOptionalParams,
  ): PagedAsyncIterableIterator<MeshRevisionProfile> {
    const iter = this.listMeshRevisionProfilesPagingAll(location, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listMeshRevisionProfilesPagingPage(
          location,
          options,
          settings,
        );
      },
    };
  }

  private async *listMeshRevisionProfilesPagingPage(
    location: string,
    options?: ManagedClustersListMeshRevisionProfilesOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<MeshRevisionProfile[]> {
    let result: ManagedClustersListMeshRevisionProfilesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listMeshRevisionProfiles(location, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listMeshRevisionProfilesNext(
        location,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listMeshRevisionProfilesPagingAll(
    location: string,
    options?: ManagedClustersListMeshRevisionProfilesOptionalParams,
  ): AsyncIterableIterator<MeshRevisionProfile> {
    for await (const page of this.listMeshRevisionProfilesPagingPage(
      location,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists available upgrades for all service meshes in a specific cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  public listMeshUpgradeProfiles(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersListMeshUpgradeProfilesOptionalParams,
  ): PagedAsyncIterableIterator<MeshUpgradeProfile> {
    const iter = this.listMeshUpgradeProfilesPagingAll(
      resourceGroupName,
      resourceName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listMeshUpgradeProfilesPagingPage(
          resourceGroupName,
          resourceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listMeshUpgradeProfilesPagingPage(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersListMeshUpgradeProfilesOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<MeshUpgradeProfile[]> {
    let result: ManagedClustersListMeshUpgradeProfilesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listMeshUpgradeProfiles(
        resourceGroupName,
        resourceName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listMeshUpgradeProfilesNext(
        resourceGroupName,
        resourceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listMeshUpgradeProfilesPagingAll(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersListMeshUpgradeProfilesOptionalParams,
  ): AsyncIterableIterator<MeshUpgradeProfile> {
    for await (const page of this.listMeshUpgradeProfilesPagingPage(
      resourceGroupName,
      resourceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Contains extra metadata on the version, including supported patch versions, capabilities, available
   * upgrades, and details on preview status of the version
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  listKubernetesVersions(
    location: string,
    options?: ManagedClustersListKubernetesVersionsOptionalParams,
  ): Promise<ManagedClustersListKubernetesVersionsResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      listKubernetesVersionsOperationSpec,
    );
  }

  /**
   * Gets a list of managed clusters in the specified subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: ManagedClustersListOptionalParams,
  ): Promise<ManagedClustersListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Lists managed clusters in the specified subscription and resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: ManagedClustersListByResourceGroupOptionalParams,
  ): Promise<ManagedClustersListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Gets the upgrade profile of a managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  getUpgradeProfile(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersGetUpgradeProfileOptionalParams,
  ): Promise<ManagedClustersGetUpgradeProfileResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      getUpgradeProfileOperationSpec,
    );
  }

  /**
   * **WARNING**: This API will be deprecated. Instead use
   * [ListClusterUserCredentials](https://docs.microsoft.com/rest/api/aks/managedclusters/listclusterusercredentials)
   * or
   * [ListClusterAdminCredentials](https://docs.microsoft.com/rest/api/aks/managedclusters/listclusteradmincredentials)
   * .
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param roleName The name of the role for managed cluster accessProfile resource.
   * @param options The options parameters.
   */
  getAccessProfile(
    resourceGroupName: string,
    resourceName: string,
    roleName: string,
    options?: ManagedClustersGetAccessProfileOptionalParams,
  ): Promise<ManagedClustersGetAccessProfileResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, roleName, options },
      getAccessProfileOperationSpec,
    );
  }

  /**
   * Lists the admin credentials of a managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  listClusterAdminCredentials(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersListClusterAdminCredentialsOptionalParams,
  ): Promise<ManagedClustersListClusterAdminCredentialsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listClusterAdminCredentialsOperationSpec,
    );
  }

  /**
   * Lists the user credentials of a managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  listClusterUserCredentials(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersListClusterUserCredentialsOptionalParams,
  ): Promise<ManagedClustersListClusterUserCredentialsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listClusterUserCredentialsOperationSpec,
    );
  }

  /**
   * Lists the cluster monitoring user credentials of a managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  listClusterMonitoringUserCredentials(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersListClusterMonitoringUserCredentialsOptionalParams,
  ): Promise<ManagedClustersListClusterMonitoringUserCredentialsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listClusterMonitoringUserCredentialsOperationSpec,
    );
  }

  /**
   * Gets a managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersGetOptionalParams,
  ): Promise<ManagedClustersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates a managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param parameters The managed cluster to create or update.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    resourceName: string,
    parameters: ManagedCluster,
    options?: ManagedClustersCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagedClustersCreateOrUpdateResponse>,
      ManagedClustersCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagedClustersCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, parameters, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagedClustersCreateOrUpdateResponse,
      OperationState<ManagedClustersCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates a managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param parameters The managed cluster to create or update.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    resourceName: string,
    parameters: ManagedCluster,
    options?: ManagedClustersCreateOrUpdateOptionalParams,
  ): Promise<ManagedClustersCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      resourceName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates tags on a managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param parameters Parameters supplied to the Update Managed Cluster Tags operation.
   * @param options The options parameters.
   */
  async beginUpdateTags(
    resourceGroupName: string,
    resourceName: string,
    parameters: TagsObject,
    options?: ManagedClustersUpdateTagsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagedClustersUpdateTagsResponse>,
      ManagedClustersUpdateTagsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagedClustersUpdateTagsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, parameters, options },
      spec: updateTagsOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagedClustersUpdateTagsResponse,
      OperationState<ManagedClustersUpdateTagsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates tags on a managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param parameters Parameters supplied to the Update Managed Cluster Tags operation.
   * @param options The options parameters.
   */
  async beginUpdateTagsAndWait(
    resourceGroupName: string,
    resourceName: string,
    parameters: TagsObject,
    options?: ManagedClustersUpdateTagsOptionalParams,
  ): Promise<ManagedClustersUpdateTagsResponse> {
    const poller = await this.beginUpdateTags(
      resourceGroupName,
      resourceName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagedClustersDeleteResponse>,
      ManagedClustersDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagedClustersDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagedClustersDeleteResponse,
      OperationState<ManagedClustersDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersDeleteOptionalParams,
  ): Promise<ManagedClustersDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      resourceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * This action cannot be performed on a cluster that is not using a service principal
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param parameters The service principal profile to set on the managed cluster.
   * @param options The options parameters.
   */
  async beginResetServicePrincipalProfile(
    resourceGroupName: string,
    resourceName: string,
    parameters: ManagedClusterServicePrincipalProfile,
    options?: ManagedClustersResetServicePrincipalProfileOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, parameters, options },
      spec: resetServicePrincipalProfileOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * This action cannot be performed on a cluster that is not using a service principal
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param parameters The service principal profile to set on the managed cluster.
   * @param options The options parameters.
   */
  async beginResetServicePrincipalProfileAndWait(
    resourceGroupName: string,
    resourceName: string,
    parameters: ManagedClusterServicePrincipalProfile,
    options?: ManagedClustersResetServicePrincipalProfileOptionalParams,
  ): Promise<void> {
    const poller = await this.beginResetServicePrincipalProfile(
      resourceGroupName,
      resourceName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * **WARNING**: This API will be deprecated. Please see [AKS-managed Azure Active Directory
   * integration](https://aka.ms/aks-managed-aad) to update your cluster with AKS-managed Azure AD.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param parameters The AAD profile to set on the Managed Cluster
   * @param options The options parameters.
   */
  async beginResetAADProfile(
    resourceGroupName: string,
    resourceName: string,
    parameters: ManagedClusterAADProfile,
    options?: ManagedClustersResetAADProfileOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, parameters, options },
      spec: resetAADProfileOperationSpec,
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * **WARNING**: This API will be deprecated. Please see [AKS-managed Azure Active Directory
   * integration](https://aka.ms/aks-managed-aad) to update your cluster with AKS-managed Azure AD.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param parameters The AAD profile to set on the Managed Cluster
   * @param options The options parameters.
   */
  async beginResetAADProfileAndWait(
    resourceGroupName: string,
    resourceName: string,
    parameters: ManagedClusterAADProfile,
    options?: ManagedClustersResetAADProfileOptionalParams,
  ): Promise<void> {
    const poller = await this.beginResetAADProfile(
      resourceGroupName,
      resourceName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Aborts the currently running operation on the managed cluster. The Managed Cluster will be moved to
   * a Canceling state and eventually to a Canceled state when cancellation finishes. If the operation
   * completes before cancellation can take place, an error is returned.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  async beginAbortLatestOperation(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersAbortLatestOperationOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagedClustersAbortLatestOperationResponse>,
      ManagedClustersAbortLatestOperationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagedClustersAbortLatestOperationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, options },
      spec: abortLatestOperationOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagedClustersAbortLatestOperationResponse,
      OperationState<ManagedClustersAbortLatestOperationResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Aborts the currently running operation on the managed cluster. The Managed Cluster will be moved to
   * a Canceling state and eventually to a Canceled state when cancellation finishes. If the operation
   * completes before cancellation can take place, an error is returned.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  async beginAbortLatestOperationAndWait(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersAbortLatestOperationOptionalParams,
  ): Promise<ManagedClustersAbortLatestOperationResponse> {
    const poller = await this.beginAbortLatestOperation(
      resourceGroupName,
      resourceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * See [Certificate rotation](https://docs.microsoft.com/azure/aks/certificate-rotation) for more
   * details about rotating managed cluster certificates.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  async beginRotateClusterCertificates(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersRotateClusterCertificatesOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagedClustersRotateClusterCertificatesResponse>,
      ManagedClustersRotateClusterCertificatesResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagedClustersRotateClusterCertificatesResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, options },
      spec: rotateClusterCertificatesOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagedClustersRotateClusterCertificatesResponse,
      OperationState<ManagedClustersRotateClusterCertificatesResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * See [Certificate rotation](https://docs.microsoft.com/azure/aks/certificate-rotation) for more
   * details about rotating managed cluster certificates.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  async beginRotateClusterCertificatesAndWait(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersRotateClusterCertificatesOptionalParams,
  ): Promise<ManagedClustersRotateClusterCertificatesResponse> {
    const poller = await this.beginRotateClusterCertificates(
      resourceGroupName,
      resourceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Rotates the service account signing keys of a managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  async beginRotateServiceAccountSigningKeys(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersRotateServiceAccountSigningKeysOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagedClustersRotateServiceAccountSigningKeysResponse>,
      ManagedClustersRotateServiceAccountSigningKeysResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagedClustersRotateServiceAccountSigningKeysResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, options },
      spec: rotateServiceAccountSigningKeysOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagedClustersRotateServiceAccountSigningKeysResponse,
      OperationState<ManagedClustersRotateServiceAccountSigningKeysResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Rotates the service account signing keys of a managed cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  async beginRotateServiceAccountSigningKeysAndWait(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersRotateServiceAccountSigningKeysOptionalParams,
  ): Promise<ManagedClustersRotateServiceAccountSigningKeysResponse> {
    const poller = await this.beginRotateServiceAccountSigningKeys(
      resourceGroupName,
      resourceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * This can only be performed on Azure Virtual Machine Scale set backed clusters. Stopping a cluster
   * stops the control plane and agent nodes entirely, while maintaining all object and cluster state. A
   * cluster does not accrue charges while it is stopped. See [stopping a
   * cluster](https://docs.microsoft.com/azure/aks/start-stop-cluster) for more details about stopping a
   * cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  async beginStop(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersStopOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagedClustersStopResponse>,
      ManagedClustersStopResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagedClustersStopResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, options },
      spec: stopOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagedClustersStopResponse,
      OperationState<ManagedClustersStopResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * This can only be performed on Azure Virtual Machine Scale set backed clusters. Stopping a cluster
   * stops the control plane and agent nodes entirely, while maintaining all object and cluster state. A
   * cluster does not accrue charges while it is stopped. See [stopping a
   * cluster](https://docs.microsoft.com/azure/aks/start-stop-cluster) for more details about stopping a
   * cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  async beginStopAndWait(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersStopOptionalParams,
  ): Promise<ManagedClustersStopResponse> {
    const poller = await this.beginStop(
      resourceGroupName,
      resourceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * See [starting a cluster](https://docs.microsoft.com/azure/aks/start-stop-cluster) for more details
   * about starting a cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  async beginStart(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersStartOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagedClustersStartResponse>,
      ManagedClustersStartResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagedClustersStartResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, options },
      spec: startOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagedClustersStartResponse,
      OperationState<ManagedClustersStartResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * See [starting a cluster](https://docs.microsoft.com/azure/aks/start-stop-cluster) for more details
   * about starting a cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  async beginStartAndWait(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersStartOptionalParams,
  ): Promise<ManagedClustersStartResponse> {
    const poller = await this.beginStart(
      resourceGroupName,
      resourceName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * AKS will create a pod to run the command. This is primarily useful for private clusters. For more
   * information see [AKS Run
   * Command](https://docs.microsoft.com/azure/aks/private-clusters#aks-run-command-preview).
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param requestPayload The run command request
   * @param options The options parameters.
   */
  async beginRunCommand(
    resourceGroupName: string,
    resourceName: string,
    requestPayload: RunCommandRequest,
    options?: ManagedClustersRunCommandOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagedClustersRunCommandResponse>,
      ManagedClustersRunCommandResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagedClustersRunCommandResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, requestPayload, options },
      spec: runCommandOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagedClustersRunCommandResponse,
      OperationState<ManagedClustersRunCommandResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * AKS will create a pod to run the command. This is primarily useful for private clusters. For more
   * information see [AKS Run
   * Command](https://docs.microsoft.com/azure/aks/private-clusters#aks-run-command-preview).
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param requestPayload The run command request
   * @param options The options parameters.
   */
  async beginRunCommandAndWait(
    resourceGroupName: string,
    resourceName: string,
    requestPayload: RunCommandRequest,
    options?: ManagedClustersRunCommandOptionalParams,
  ): Promise<ManagedClustersRunCommandResponse> {
    const poller = await this.beginRunCommand(
      resourceGroupName,
      resourceName,
      requestPayload,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the results of a command which has been run on the Managed Cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param commandId Id of the command.
   * @param options The options parameters.
   */
  getCommandResult(
    resourceGroupName: string,
    resourceName: string,
    commandId: string,
    options?: ManagedClustersGetCommandResultOptionalParams,
  ): Promise<ManagedClustersGetCommandResultResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, commandId, options },
      getCommandResultOperationSpec,
    );
  }

  /**
   * Gets a list of egress endpoints (network endpoints of all outbound dependencies) in the specified
   * managed cluster. The operation returns properties of each egress endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  private _listOutboundNetworkDependenciesEndpoints(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersListOutboundNetworkDependenciesEndpointsOptionalParams,
  ): Promise<ManagedClustersListOutboundNetworkDependenciesEndpointsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listOutboundNetworkDependenciesEndpointsOperationSpec,
    );
  }

  /**
   * Contains Guardrails version along with its support info and whether it is a default version.
   * @param location The name of the Azure region.
   * @param version Safeguards version
   * @param options The options parameters.
   */
  getGuardrailsVersions(
    location: string,
    version: string,
    options?: ManagedClustersGetGuardrailsVersionsOptionalParams,
  ): Promise<ManagedClustersGetGuardrailsVersionsResponse> {
    return this.client.sendOperationRequest(
      { location, version, options },
      getGuardrailsVersionsOperationSpec,
    );
  }

  /**
   * Contains list of Guardrails version along with its support info and whether it is a default version.
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  private _listGuardrailsVersions(
    location: string,
    options?: ManagedClustersListGuardrailsVersionsOptionalParams,
  ): Promise<ManagedClustersListGuardrailsVersionsResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      listGuardrailsVersionsOperationSpec,
    );
  }

  /**
   * Contains Safeguards version along with its support info and whether it is a default version.
   * @param location The name of the Azure region.
   * @param version Safeguards version
   * @param options The options parameters.
   */
  getSafeguardsVersions(
    location: string,
    version: string,
    options?: ManagedClustersGetSafeguardsVersionsOptionalParams,
  ): Promise<ManagedClustersGetSafeguardsVersionsResponse> {
    return this.client.sendOperationRequest(
      { location, version, options },
      getSafeguardsVersionsOperationSpec,
    );
  }

  /**
   * Contains list of Safeguards version along with its support info and whether it is a default version.
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  private _listSafeguardsVersions(
    location: string,
    options?: ManagedClustersListSafeguardsVersionsOptionalParams,
  ): Promise<ManagedClustersListSafeguardsVersionsResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      listSafeguardsVersionsOperationSpec,
    );
  }

  /**
   * Contains extra metadata on each revision, including supported revisions, cluster compatibility and
   * available upgrades
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  private _listMeshRevisionProfiles(
    location: string,
    options?: ManagedClustersListMeshRevisionProfilesOptionalParams,
  ): Promise<ManagedClustersListMeshRevisionProfilesResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      listMeshRevisionProfilesOperationSpec,
    );
  }

  /**
   * Contains extra metadata on the revision, including supported revisions, cluster compatibility and
   * available upgrades
   * @param location The name of the Azure region.
   * @param mode The mode of the mesh.
   * @param options The options parameters.
   */
  getMeshRevisionProfile(
    location: string,
    mode: string,
    options?: ManagedClustersGetMeshRevisionProfileOptionalParams,
  ): Promise<ManagedClustersGetMeshRevisionProfileResponse> {
    return this.client.sendOperationRequest(
      { location, mode, options },
      getMeshRevisionProfileOperationSpec,
    );
  }

  /**
   * Lists available upgrades for all service meshes in a specific cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param options The options parameters.
   */
  private _listMeshUpgradeProfiles(
    resourceGroupName: string,
    resourceName: string,
    options?: ManagedClustersListMeshUpgradeProfilesOptionalParams,
  ): Promise<ManagedClustersListMeshUpgradeProfilesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listMeshUpgradeProfilesOperationSpec,
    );
  }

  /**
   * Gets available upgrades for a service mesh in a cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param mode The mode of the mesh.
   * @param options The options parameters.
   */
  getMeshUpgradeProfile(
    resourceGroupName: string,
    resourceName: string,
    mode: string,
    options?: ManagedClustersGetMeshUpgradeProfileOptionalParams,
  ): Promise<ManagedClustersGetMeshUpgradeProfileResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, mode, options },
      getMeshUpgradeProfileOperationSpec,
    );
  }

  /**
   * Rebalance nodes across specific load balancers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param parameters The names of the load balancers to be rebalanced. If set to empty, all load
   *                   balancers will be rebalanced.
   * @param options The options parameters.
   */
  async beginRebalanceLoadBalancers(
    resourceGroupName: string,
    resourceName: string,
    parameters: RebalanceLoadBalancersRequestBody,
    options?: ManagedClustersRebalanceLoadBalancersOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ManagedClustersRebalanceLoadBalancersResponse>,
      ManagedClustersRebalanceLoadBalancersResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ManagedClustersRebalanceLoadBalancersResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, resourceName, parameters, options },
      spec: rebalanceLoadBalancersOperationSpec,
    });
    const poller = await createHttpPoller<
      ManagedClustersRebalanceLoadBalancersResponse,
      OperationState<ManagedClustersRebalanceLoadBalancersResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Rebalance nodes across specific load balancers.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param parameters The names of the load balancers to be rebalanced. If set to empty, all load
   *                   balancers will be rebalanced.
   * @param options The options parameters.
   */
  async beginRebalanceLoadBalancersAndWait(
    resourceGroupName: string,
    resourceName: string,
    parameters: RebalanceLoadBalancersRequestBody,
    options?: ManagedClustersRebalanceLoadBalancersOptionalParams,
  ): Promise<ManagedClustersRebalanceLoadBalancersResponse> {
    const poller = await this.beginRebalanceLoadBalancers(
      resourceGroupName,
      resourceName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ManagedClustersListNextOptionalParams,
  ): Promise<ManagedClustersListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ManagedClustersListByResourceGroupNextOptionalParams,
  ): Promise<ManagedClustersListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }

  /**
   * ListOutboundNetworkDependenciesEndpointsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListOutboundNetworkDependenciesEndpoints method.
   * @param options The options parameters.
   */
  private _listOutboundNetworkDependenciesEndpointsNext(
    resourceGroupName: string,
    resourceName: string,
    nextLink: string,
    options?: ManagedClustersListOutboundNetworkDependenciesEndpointsNextOptionalParams,
  ): Promise<ManagedClustersListOutboundNetworkDependenciesEndpointsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, nextLink, options },
      listOutboundNetworkDependenciesEndpointsNextOperationSpec,
    );
  }

  /**
   * ListGuardrailsVersionsNext
   * @param location The name of the Azure region.
   * @param nextLink The nextLink from the previous successful call to the ListGuardrailsVersions method.
   * @param options The options parameters.
   */
  private _listGuardrailsVersionsNext(
    location: string,
    nextLink: string,
    options?: ManagedClustersListGuardrailsVersionsNextOptionalParams,
  ): Promise<ManagedClustersListGuardrailsVersionsNextResponse> {
    return this.client.sendOperationRequest(
      { location, nextLink, options },
      listGuardrailsVersionsNextOperationSpec,
    );
  }

  /**
   * ListSafeguardsVersionsNext
   * @param location The name of the Azure region.
   * @param nextLink The nextLink from the previous successful call to the ListSafeguardsVersions method.
   * @param options The options parameters.
   */
  private _listSafeguardsVersionsNext(
    location: string,
    nextLink: string,
    options?: ManagedClustersListSafeguardsVersionsNextOptionalParams,
  ): Promise<ManagedClustersListSafeguardsVersionsNextResponse> {
    return this.client.sendOperationRequest(
      { location, nextLink, options },
      listSafeguardsVersionsNextOperationSpec,
    );
  }

  /**
   * ListMeshRevisionProfilesNext
   * @param location The name of the Azure region.
   * @param nextLink The nextLink from the previous successful call to the ListMeshRevisionProfiles
   *                 method.
   * @param options The options parameters.
   */
  private _listMeshRevisionProfilesNext(
    location: string,
    nextLink: string,
    options?: ManagedClustersListMeshRevisionProfilesNextOptionalParams,
  ): Promise<ManagedClustersListMeshRevisionProfilesNextResponse> {
    return this.client.sendOperationRequest(
      { location, nextLink, options },
      listMeshRevisionProfilesNextOperationSpec,
    );
  }

  /**
   * ListMeshUpgradeProfilesNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the managed cluster resource.
   * @param nextLink The nextLink from the previous successful call to the ListMeshUpgradeProfiles
   *                 method.
   * @param options The options parameters.
   */
  private _listMeshUpgradeProfilesNext(
    resourceGroupName: string,
    resourceName: string,
    nextLink: string,
    options?: ManagedClustersListMeshUpgradeProfilesNextOptionalParams,
  ): Promise<ManagedClustersListMeshUpgradeProfilesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, nextLink, options },
      listMeshUpgradeProfilesNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listKubernetesVersionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/kubernetesVersions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KubernetesVersionListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/managedClusters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedClusterListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedClusterListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getUpgradeProfileOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/upgradeProfiles/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedClusterUpgradeProfile,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getAccessProfileOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/accessProfiles/{roleName}/listCredential",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedClusterAccessProfile,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.roleName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listClusterAdminCredentialsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/listClusterAdminCredential",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CredentialResults,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.serverFqdn],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listClusterUserCredentialsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/listClusterUserCredential",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CredentialResults,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.serverFqdn,
    Parameters.format,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listClusterMonitoringUserCredentialsOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/listClusterMonitoringUserCredential",
    httpMethod: "POST",
    responses: {
      200: {
        bodyMapper: Mappers.CredentialResults,
      },
      default: {
        bodyMapper: Mappers.CloudError,
      },
    },
    queryParameters: [Parameters.apiVersion, Parameters.serverFqdn],
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.resourceName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedCluster,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedCluster,
    },
    201: {
      bodyMapper: Mappers.ManagedCluster,
    },
    202: {
      bodyMapper: Mappers.ManagedCluster,
    },
    204: {
      bodyMapper: Mappers.ManagedCluster,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
  ],
  mediaType: "json",
  serializer,
};
const updateTagsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedCluster,
    },
    201: {
      bodyMapper: Mappers.ManagedCluster,
    },
    202: {
      bodyMapper: Mappers.ManagedCluster,
    },
    204: {
      bodyMapper: Mappers.ManagedCluster,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.ifMatch,
  ],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ManagedClustersDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ManagedClustersDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ManagedClustersDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ManagedClustersDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.ignorePodDisruptionBudget,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept, Parameters.ifMatch],
  serializer,
};
const resetServicePrincipalProfileOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/resetServicePrincipalProfile",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const resetAADProfileOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/resetAADProfile",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const abortLatestOperationOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedclusters/{resourceName}/abort",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.ManagedClustersAbortLatestOperationHeaders,
    },
    201: {
      headersMapper: Mappers.ManagedClustersAbortLatestOperationHeaders,
    },
    202: {
      headersMapper: Mappers.ManagedClustersAbortLatestOperationHeaders,
    },
    204: {
      headersMapper: Mappers.ManagedClustersAbortLatestOperationHeaders,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const rotateClusterCertificatesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/rotateClusterCertificates",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.ManagedClustersRotateClusterCertificatesHeaders,
    },
    201: {
      headersMapper: Mappers.ManagedClustersRotateClusterCertificatesHeaders,
    },
    202: {
      headersMapper: Mappers.ManagedClustersRotateClusterCertificatesHeaders,
    },
    204: {
      headersMapper: Mappers.ManagedClustersRotateClusterCertificatesHeaders,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const rotateServiceAccountSigningKeysOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/rotateServiceAccountSigningKeys",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper:
        Mappers.ManagedClustersRotateServiceAccountSigningKeysHeaders,
    },
    201: {
      headersMapper:
        Mappers.ManagedClustersRotateServiceAccountSigningKeysHeaders,
    },
    202: {
      headersMapper:
        Mappers.ManagedClustersRotateServiceAccountSigningKeysHeaders,
    },
    204: {
      headersMapper:
        Mappers.ManagedClustersRotateServiceAccountSigningKeysHeaders,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const stopOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/stop",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.ManagedClustersStopHeaders,
    },
    201: {
      headersMapper: Mappers.ManagedClustersStopHeaders,
    },
    202: {
      headersMapper: Mappers.ManagedClustersStopHeaders,
    },
    204: {
      headersMapper: Mappers.ManagedClustersStopHeaders,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const startOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/start",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.ManagedClustersStartHeaders,
    },
    201: {
      headersMapper: Mappers.ManagedClustersStartHeaders,
    },
    202: {
      headersMapper: Mappers.ManagedClustersStartHeaders,
    },
    204: {
      headersMapper: Mappers.ManagedClustersStartHeaders,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const runCommandOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/runCommand",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RunCommandResult,
    },
    201: {
      bodyMapper: Mappers.RunCommandResult,
    },
    202: {
      bodyMapper: Mappers.RunCommandResult,
    },
    204: {
      bodyMapper: Mappers.RunCommandResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.requestPayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getCommandResultOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/commandResults/{commandId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RunCommandResult,
    },
    202: {
      headersMapper: Mappers.ManagedClustersGetCommandResultHeaders,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.commandId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOutboundNetworkDependenciesEndpointsOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/outboundNetworkDependenciesEndpoints",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.OutboundEnvironmentEndpointCollection,
      },
      default: {
        bodyMapper: Mappers.CloudError,
      },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.resourceName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const getGuardrailsVersionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/guardrailsVersions/{version}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GuardrailsAvailableVersion,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.version,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listGuardrailsVersionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/guardrailsVersions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GuardrailsAvailableVersionsList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getSafeguardsVersionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/safeguardsVersions/{version}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SafeguardsAvailableVersion,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.version,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listSafeguardsVersionsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/safeguardsVersions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SafeguardsAvailableVersionsList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listMeshRevisionProfilesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/meshRevisionProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MeshRevisionProfileList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getMeshRevisionProfileOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/locations/{location}/meshRevisionProfiles/{mode}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MeshRevisionProfile,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.mode,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listMeshUpgradeProfilesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/meshUpgradeProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MeshUpgradeProfileList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getMeshUpgradeProfileOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/meshUpgradeProfiles/{mode}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MeshUpgradeProfile,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.mode,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const rebalanceLoadBalancersOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/rebalanceLoadBalancers",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.ManagedClustersRebalanceLoadBalancersHeaders,
    },
    201: {
      headersMapper: Mappers.ManagedClustersRebalanceLoadBalancersHeaders,
    },
    202: {
      headersMapper: Mappers.ManagedClustersRebalanceLoadBalancersHeaders,
    },
    204: {
      headersMapper: Mappers.ManagedClustersRebalanceLoadBalancersHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedClusterListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagedClusterListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOutboundNetworkDependenciesEndpointsNextOperationSpec: coreClient.OperationSpec =
  {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.OutboundEnvironmentEndpointCollection,
      },
      default: {
        bodyMapper: Mappers.CloudError,
      },
    },
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.resourceName,
      Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const listGuardrailsVersionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GuardrailsAvailableVersionsList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listSafeguardsVersionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SafeguardsAvailableVersionsList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listMeshRevisionProfilesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MeshRevisionProfileList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listMeshUpgradeProfilesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MeshUpgradeProfileList,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
