/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/maintenanceConfigurationsMappers";
import * as Parameters from "../models/parameters";
import { ContainerServiceClientContext } from "../containerServiceClientContext";

/** Class representing a MaintenanceConfigurations. */
export class MaintenanceConfigurations {
  private readonly client: ContainerServiceClientContext;

  /**
   * Create a MaintenanceConfigurations.
   * @param {ContainerServiceClientContext} client Reference to the service client.
   */
  constructor(client: ContainerServiceClientContext) {
    this.client = client;
  }

  /**
   * Gets a list of maintenance configurations in the specified managed cluster. The operation
   * returns properties of each maintenance configuration.
   * @summary Gets a list of maintenance configurations in the specified managed cluster.
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the managed cluster resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.MaintenanceConfigurationsListByManagedClusterResponse>
   */
  listByManagedCluster(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.MaintenanceConfigurationsListByManagedClusterResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the managed cluster resource.
   * @param callback The callback
   */
  listByManagedCluster(resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<Models.MaintenanceConfigurationListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the managed cluster resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByManagedCluster(resourceGroupName: string, resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MaintenanceConfigurationListResult>): void;
  listByManagedCluster(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MaintenanceConfigurationListResult>, callback?: msRest.ServiceCallback<Models.MaintenanceConfigurationListResult>): Promise<Models.MaintenanceConfigurationsListByManagedClusterResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      listByManagedClusterOperationSpec,
      callback) as Promise<Models.MaintenanceConfigurationsListByManagedClusterResponse>;
  }

  /**
   * Gets the details of maintenance configurations by managed cluster and resource group.
   * @summary Gets the maintenance configuration.
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the managed cluster resource.
   * @param configName The name of the maintenance configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.MaintenanceConfigurationsGetResponse>
   */
  get(resourceGroupName: string, resourceName: string, configName: string, options?: msRest.RequestOptionsBase): Promise<Models.MaintenanceConfigurationsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the managed cluster resource.
   * @param configName The name of the maintenance configuration.
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, configName: string, callback: msRest.ServiceCallback<Models.MaintenanceConfiguration>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the managed cluster resource.
   * @param configName The name of the maintenance configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, configName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MaintenanceConfiguration>): void;
  get(resourceGroupName: string, resourceName: string, configName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MaintenanceConfiguration>, callback?: msRest.ServiceCallback<Models.MaintenanceConfiguration>): Promise<Models.MaintenanceConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        configName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.MaintenanceConfigurationsGetResponse>;
  }

  /**
   * Creates or updates a maintenance configuration in the specified managed cluster.
   * @summary Creates or updates a maintenance configurations.
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the managed cluster resource.
   * @param configName The name of the maintenance configuration.
   * @param parameters Parameters supplied to the Create or Update a default maintenance
   * configuration.
   * @param [options] The optional parameters
   * @returns Promise<Models.MaintenanceConfigurationsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, resourceName: string, configName: string, parameters: Models.MaintenanceConfiguration, options?: msRest.RequestOptionsBase): Promise<Models.MaintenanceConfigurationsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the managed cluster resource.
   * @param configName The name of the maintenance configuration.
   * @param parameters Parameters supplied to the Create or Update a default maintenance
   * configuration.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, resourceName: string, configName: string, parameters: Models.MaintenanceConfiguration, callback: msRest.ServiceCallback<Models.MaintenanceConfiguration>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the managed cluster resource.
   * @param configName The name of the maintenance configuration.
   * @param parameters Parameters supplied to the Create or Update a default maintenance
   * configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, resourceName: string, configName: string, parameters: Models.MaintenanceConfiguration, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MaintenanceConfiguration>): void;
  createOrUpdate(resourceGroupName: string, resourceName: string, configName: string, parameters: Models.MaintenanceConfiguration, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MaintenanceConfiguration>, callback?: msRest.ServiceCallback<Models.MaintenanceConfiguration>): Promise<Models.MaintenanceConfigurationsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        configName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.MaintenanceConfigurationsCreateOrUpdateResponse>;
  }

  /**
   * Deletes the maintenance configuration in the specified managed cluster.
   * @summary Deletes a maintenance configuration.
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the managed cluster resource.
   * @param configName The name of the maintenance configuration.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, resourceName: string, configName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the managed cluster resource.
   * @param configName The name of the maintenance configuration.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, resourceName: string, configName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceName The name of the managed cluster resource.
   * @param configName The name of the maintenance configuration.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, resourceName: string, configName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, resourceName: string, configName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        configName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Gets a list of maintenance configurations in the specified managed cluster. The operation
   * returns properties of each maintenance configuration.
   * @summary Gets a list of maintenance configurations in the specified managed cluster.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MaintenanceConfigurationsListByManagedClusterNextResponse>
   */
  listByManagedClusterNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.MaintenanceConfigurationsListByManagedClusterNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByManagedClusterNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.MaintenanceConfigurationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByManagedClusterNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MaintenanceConfigurationListResult>): void;
  listByManagedClusterNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MaintenanceConfigurationListResult>, callback?: msRest.ServiceCallback<Models.MaintenanceConfigurationListResult>): Promise<Models.MaintenanceConfigurationsListByManagedClusterNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByManagedClusterNextOperationSpec,
      callback) as Promise<Models.MaintenanceConfigurationsListByManagedClusterNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByManagedClusterOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MaintenanceConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations/{configName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.configName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MaintenanceConfiguration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations/{configName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.configName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.MaintenanceConfiguration,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.MaintenanceConfiguration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{resourceName}/maintenanceConfigurations/{configName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.configName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByManagedClusterNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MaintenanceConfigurationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
