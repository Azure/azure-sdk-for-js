/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Describes the properties of a Compute Operation value.
 */
export interface OperationValue {
  /**
   * The origin of the compute operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly origin?: string;
  /**
   * The name of the compute operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The display name of the compute operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
  /**
   * The display name of the resource the operation applies to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resource?: string;
  /**
   * The description of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * The resource provider for the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: string;
}

/**
 * The Resource model definition.
 */
export interface Resource extends BaseResource {
  /**
   * Resource Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource location
   */
  location: string;
  /**
   * Resource tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Reference to another subresource.
 */
export interface SubResource extends BaseResource {
  /**
   * Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource that is unique within a resource group. This name can be used to
   * access the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * Tags object for patch operations.
 */
export interface TagsObject {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Information about a service principal identity for the cluster to use for manipulating Azure
 * APIs.
 */
export interface ManagedClusterServicePrincipalProfile {
  /**
   * The ID for the service principal.
   */
  clientId: string;
  /**
   * The secret password associated with the service principal in plain text.
   */
  secret?: string;
}

/**
 * Profile for the container service master.
 */
export interface ContainerServiceMasterProfile {
  /**
   * Number of masters (VMs) in the container service cluster. Allowed values are 1, 3, and 5. The
   * default value is 1. Default value: 1.
   */
  count?: number;
  /**
   * DNS prefix to be used to create the FQDN for the master pool.
   */
  dnsPrefix: string;
  /**
   * Size of agent VMs. Possible values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2', 'Standard_A3',
   * 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2', 'Standard_A5', 'Standard_A6',
   * 'Standard_A7', 'Standard_A8', 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9',
   * 'Standard_B2ms', 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
   * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12', 'Standard_D12_v2',
   * 'Standard_D12_v2_Promo', 'Standard_D13', 'Standard_D13_v2', 'Standard_D13_v2_Promo',
   * 'Standard_D14', 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
   * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2', 'Standard_D2_v2',
   * 'Standard_D2_v2_Promo', 'Standard_D2_v3', 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3',
   * 'Standard_D32s_v3', 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
   * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3', 'Standard_D5_v2',
   * 'Standard_D5_v2_Promo', 'Standard_D64_v3', 'Standard_D64s_v3', 'Standard_D8_v3',
   * 'Standard_D8s_v3', 'Standard_DS1', 'Standard_DS11', 'Standard_DS11_v2',
   * 'Standard_DS11_v2_Promo', 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
   * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2', 'Standard_DS13_v2',
   * 'Standard_DS13_v2_Promo', 'Standard_DS14', 'Standard_DS14-4_v2', 'Standard_DS14-8_v2',
   * 'Standard_DS14_v2', 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
   * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3', 'Standard_DS3_v2',
   * 'Standard_DS3_v2_Promo', 'Standard_DS4', 'Standard_DS4_v2', 'Standard_DS4_v2_Promo',
   * 'Standard_DS5_v2', 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
   * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3', 'Standard_E32-8s_v3',
   * 'Standard_E32_v3', 'Standard_E32s_v3', 'Standard_E4_v3', 'Standard_E4s_v3',
   * 'Standard_E64-16s_v3', 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
   * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16', 'Standard_F16s',
   * 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2', 'Standard_F2s', 'Standard_F2s_v2',
   * 'Standard_F32s_v2', 'Standard_F4', 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2',
   * 'Standard_F72s_v2', 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
   * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1', 'Standard_GS2',
   * 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4', 'Standard_GS4-8', 'Standard_GS5',
   * 'Standard_GS5-16', 'Standard_GS5-8', 'Standard_H16', 'Standard_H16m', 'Standard_H16mr',
   * 'Standard_H16r', 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
   * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms', 'Standard_M128ms',
   * 'Standard_M128s', 'Standard_M64-16ms', 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s',
   * 'Standard_NC12', 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
   * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2', 'Standard_NC24s_v3',
   * 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3', 'Standard_ND12s', 'Standard_ND24rs',
   * 'Standard_ND24s', 'Standard_ND6s', 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
   */
  vmSize: ContainerServiceVMSizeTypes;
  /**
   * OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent
   * pool. If you specify 0, it will apply the default osDisk size according to the vmSize
   * specified.
   */
  osDiskSizeGB?: number;
  /**
   * VNet SubnetID specifies the VNet's subnet identifier.
   */
  vnetSubnetID?: string;
  /**
   * FirstConsecutiveStaticIP used to specify the first static ip of masters. Default value:
   * '10.240.255.5'.
   */
  firstConsecutiveStaticIP?: string;
  /**
   * Storage profile specifies what kind of storage used. Choose from StorageAccount and
   * ManagedDisks. Leave it empty, we will choose for you based on the orchestrator choice.
   * Possible values include: 'StorageAccount', 'ManagedDisks'
   */
  storageProfile?: ContainerServiceStorageProfileTypes;
  /**
   * FQDN for the master pool.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fqdn?: string;
}

/**
 * Settings for upgrading an agentpool
 */
export interface AgentPoolUpgradeSettings {
  /**
   * Count or percentage of additional nodes to be added during upgrade. If empty uses AKS default
   */
  maxSurge?: string;
}

/**
 * Describes the Power State of the cluster
 */
export interface PowerState {
  /**
   * Tells whether the cluster is Running or Stopped. Possible values include: 'Running', 'Stopped'
   */
  code?: Code;
}

/**
 * Kubelet configurations of agent nodes.
 */
export interface KubeletConfig {
  /**
   * CPU Manager policy to use.
   */
  cpuManagerPolicy?: string;
  /**
   * Enable CPU CFS quota enforcement for containers that specify CPU limits.
   */
  cpuCfsQuota?: boolean;
  /**
   * Sets CPU CFS quota period value.
   */
  cpuCfsQuotaPeriod?: string;
  /**
   * The percent of disk usage after which image garbage collection is always run.
   */
  imageGcHighThreshold?: number;
  /**
   * The percent of disk usage before which image garbage collection is never run.
   */
  imageGcLowThreshold?: number;
  /**
   * Topology Manager policy to use.
   */
  topologyManagerPolicy?: string;
  /**
   * Allowlist of unsafe sysctls or unsafe sysctl patterns (ending in `*`).
   */
  allowedUnsafeSysctls?: string[];
  /**
   * If set to true it will make the Kubelet fail to start if swap is enabled on the node.
   */
  failSwapOn?: boolean;
  /**
   * The maximum size (e.g. 10Mi) of container log file before it is rotated.
   */
  containerLogMaxSizeMB?: number;
  /**
   * The maximum number of container log files that can be present for a container. The number must
   * be â‰¥ 2.
   */
  containerLogMaxFiles?: number;
  /**
   * The maximum number of processes per pod.
   */
  podMaxPids?: number;
}

/**
 * Sysctl settings for Linux agent nodes.
 */
export interface SysctlConfig {
  /**
   * Sysctl setting net.core.somaxconn.
   */
  netCoreSomaxconn?: number;
  /**
   * Sysctl setting net.core.netdev_max_backlog.
   */
  netCoreNetdevMaxBacklog?: number;
  /**
   * Sysctl setting net.core.rmem_default.
   */
  netCoreRmemDefault?: number;
  /**
   * Sysctl setting net.core.rmem_max.
   */
  netCoreRmemMax?: number;
  /**
   * Sysctl setting net.core.wmem_default.
   */
  netCoreWmemDefault?: number;
  /**
   * Sysctl setting net.core.wmem_max.
   */
  netCoreWmemMax?: number;
  /**
   * Sysctl setting net.core.optmem_max.
   */
  netCoreOptmemMax?: number;
  /**
   * Sysctl setting net.ipv4.tcp_max_syn_backlog.
   */
  netIpv4TcpMaxSynBacklog?: number;
  /**
   * Sysctl setting net.ipv4.tcp_max_tw_buckets.
   */
  netIpv4TcpMaxTwBuckets?: number;
  /**
   * Sysctl setting net.ipv4.tcp_fin_timeout.
   */
  netIpv4TcpFinTimeout?: number;
  /**
   * Sysctl setting net.ipv4.tcp_keepalive_time.
   */
  netIpv4TcpKeepaliveTime?: number;
  /**
   * Sysctl setting net.ipv4.tcp_keepalive_probes.
   */
  netIpv4TcpKeepaliveProbes?: number;
  /**
   * Sysctl setting net.ipv4.tcp_keepalive_intvl.
   */
  netIpv4TcpkeepaliveIntvl?: number;
  /**
   * Sysctl setting net.ipv4.tcp_tw_reuse.
   */
  netIpv4TcpTwReuse?: boolean;
  /**
   * Sysctl setting net.ipv4.ip_local_port_range.
   */
  netIpv4IpLocalPortRange?: string;
  /**
   * Sysctl setting net.ipv4.neigh.default.gc_thresh1.
   */
  netIpv4NeighDefaultGcThresh1?: number;
  /**
   * Sysctl setting net.ipv4.neigh.default.gc_thresh2.
   */
  netIpv4NeighDefaultGcThresh2?: number;
  /**
   * Sysctl setting net.ipv4.neigh.default.gc_thresh3.
   */
  netIpv4NeighDefaultGcThresh3?: number;
  /**
   * Sysctl setting net.netfilter.nf_conntrack_max.
   */
  netNetfilterNfConntrackMax?: number;
  /**
   * Sysctl setting net.netfilter.nf_conntrack_buckets.
   */
  netNetfilterNfConntrackBuckets?: number;
  /**
   * Sysctl setting fs.inotify.max_user_watches.
   */
  fsInotifyMaxUserWatches?: number;
  /**
   * Sysctl setting fs.file-max.
   */
  fsFileMax?: number;
  /**
   * Sysctl setting fs.aio-max-nr.
   */
  fsAioMaxNr?: number;
  /**
   * Sysctl setting fs.nr_open.
   */
  fsNrOpen?: number;
  /**
   * Sysctl setting kernel.threads-max.
   */
  kernelThreadsMax?: number;
  /**
   * Sysctl setting vm.max_map_count.
   */
  vmMaxMapCount?: number;
  /**
   * Sysctl setting vm.swappiness.
   */
  vmSwappiness?: number;
  /**
   * Sysctl setting vm.vfs_cache_pressure.
   */
  vmVfsCachePressure?: number;
}

/**
 * OS configurations of Linux agent nodes.
 */
export interface LinuxOSConfig {
  /**
   * Sysctl settings for Linux agent nodes.
   */
  sysctls?: SysctlConfig;
  /**
   * Transparent Huge Page enabled configuration.
   */
  transparentHugePageEnabled?: string;
  /**
   * Transparent Huge Page defrag configuration.
   */
  transparentHugePageDefrag?: string;
  /**
   * SwapFileSizeMB specifies size in MB of a swap file will be created on each node.
   */
  swapFileSizeMB?: number;
}

/**
 * Properties for the container service agent pool profile.
 */
export interface ManagedClusterAgentPoolProfileProperties {
  /**
   * Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to
   * 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system pools. The
   * default value is 1.
   */
  count?: number;
  /**
   * Size of agent VMs. Possible values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2', 'Standard_A3',
   * 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2', 'Standard_A5', 'Standard_A6',
   * 'Standard_A7', 'Standard_A8', 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9',
   * 'Standard_B2ms', 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
   * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12', 'Standard_D12_v2',
   * 'Standard_D12_v2_Promo', 'Standard_D13', 'Standard_D13_v2', 'Standard_D13_v2_Promo',
   * 'Standard_D14', 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
   * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2', 'Standard_D2_v2',
   * 'Standard_D2_v2_Promo', 'Standard_D2_v3', 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3',
   * 'Standard_D32s_v3', 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
   * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3', 'Standard_D5_v2',
   * 'Standard_D5_v2_Promo', 'Standard_D64_v3', 'Standard_D64s_v3', 'Standard_D8_v3',
   * 'Standard_D8s_v3', 'Standard_DS1', 'Standard_DS11', 'Standard_DS11_v2',
   * 'Standard_DS11_v2_Promo', 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
   * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2', 'Standard_DS13_v2',
   * 'Standard_DS13_v2_Promo', 'Standard_DS14', 'Standard_DS14-4_v2', 'Standard_DS14-8_v2',
   * 'Standard_DS14_v2', 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
   * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3', 'Standard_DS3_v2',
   * 'Standard_DS3_v2_Promo', 'Standard_DS4', 'Standard_DS4_v2', 'Standard_DS4_v2_Promo',
   * 'Standard_DS5_v2', 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
   * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3', 'Standard_E32-8s_v3',
   * 'Standard_E32_v3', 'Standard_E32s_v3', 'Standard_E4_v3', 'Standard_E4s_v3',
   * 'Standard_E64-16s_v3', 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
   * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16', 'Standard_F16s',
   * 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2', 'Standard_F2s', 'Standard_F2s_v2',
   * 'Standard_F32s_v2', 'Standard_F4', 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2',
   * 'Standard_F72s_v2', 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
   * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1', 'Standard_GS2',
   * 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4', 'Standard_GS4-8', 'Standard_GS5',
   * 'Standard_GS5-16', 'Standard_GS5-8', 'Standard_H16', 'Standard_H16m', 'Standard_H16mr',
   * 'Standard_H16r', 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
   * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms', 'Standard_M128ms',
   * 'Standard_M128s', 'Standard_M64-16ms', 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s',
   * 'Standard_NC12', 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
   * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2', 'Standard_NC24s_v3',
   * 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3', 'Standard_ND12s', 'Standard_ND24rs',
   * 'Standard_ND24s', 'Standard_ND6s', 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
   */
  vmSize?: ContainerServiceVMSizeTypes;
  /**
   * OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent
   * pool. If you specify 0, it will apply the default osDisk size according to the vmSize
   * specified.
   */
  osDiskSizeGB?: number;
  /**
   * OS disk type to be used for machines in a given agent pool. Allowed values are 'Ephemeral' and
   * 'Managed'. Defaults to 'Managed'. May not be changed after creation. Possible values include:
   * 'Managed', 'Ephemeral'
   */
  osDiskType?: OSDiskType;
  /**
   * KubeletDiskType determines the placement of emptyDir volumes, container runtime data root, and
   * Kubelet ephemeral storage. Currently allows one value, OS, resulting in Kubelet using the OS
   * disk for data. Possible values include: 'OS', 'Temporary'
   */
  kubeletDiskType?: KubeletDiskType;
  /**
   * VNet SubnetID specifies the VNet's subnet identifier for nodes and maybe pods
   */
  vnetSubnetID?: string;
  /**
   * Pod SubnetID specifies the VNet's subnet identifier for pods.
   */
  podSubnetID?: string;
  /**
   * Maximum number of pods that can run on a node.
   */
  maxPods?: number;
  /**
   * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
   * Possible values include: 'Linux', 'Windows'. Default value: 'Linux'.
   */
  osType?: OSType;
  /**
   * OsSKU to be used to specify os sku. Choose from Ubuntu(default) and CBLMariner for Linux
   * OSType. Not applicable to Windows OSType. Possible values include: 'Ubuntu', 'CBLMariner'
   */
  osSKU?: OSSKU;
  /**
   * Maximum number of nodes for auto-scaling
   */
  maxCount?: number;
  /**
   * Minimum number of nodes for auto-scaling
   */
  minCount?: number;
  /**
   * Whether to enable auto-scaler
   */
  enableAutoScaling?: boolean;
  /**
   * AgentPoolType represents types of an agent pool. Possible values include:
   * 'VirtualMachineScaleSets', 'AvailabilitySet'
   */
  type?: AgentPoolType;
  /**
   * AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'User'
   */
  mode?: AgentPoolMode;
  /**
   * Version of orchestrator specified when creating the managed cluster.
   */
  orchestratorVersion?: string;
  /**
   * Version of node image
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nodeImageVersion?: string;
  /**
   * Settings for upgrading the agentpool
   */
  upgradeSettings?: AgentPoolUpgradeSettings;
  /**
   * The current deployment or provisioning state, which only appears in the response.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Describes whether the Agent Pool is Running or Stopped
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly powerState?: PowerState;
  /**
   * Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.
   */
  availabilityZones?: string[];
  /**
   * Enable public IP for nodes
   */
  enableNodePublicIP?: boolean;
  /**
   * Public IP Prefix ID. VM nodes use IPs assigned from this Public IP Prefix.
   */
  nodePublicIPPrefixID?: string;
  /**
   * ScaleSetPriority to be used to specify virtual machine scale set priority. Default to regular.
   * Possible values include: 'Spot', 'Regular'. Default value: 'Regular'.
   */
  scaleSetPriority?: ScaleSetPriority;
  /**
   * ScaleSetEvictionPolicy to be used to specify eviction policy for Spot virtual machine scale
   * set. Default to Delete. Possible values include: 'Delete', 'Deallocate'. Default value:
   * 'Delete'.
   */
  scaleSetEvictionPolicy?: ScaleSetEvictionPolicy;
  /**
   * SpotMaxPrice to be used to specify the maximum price you are willing to pay in US Dollars.
   * Possible values are any decimal value greater than zero or -1 which indicates default price to
   * be up-to on-demand.
   */
  spotMaxPrice?: number;
  /**
   * Agent pool tags to be persisted on the agent pool virtual machine scale set.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Agent pool node labels to be persisted across all nodes in agent pool.
   */
  nodeLabels?: { [propertyName: string]: string };
  /**
   * Taints added to new nodes during node pool create and scale. For example,
   * key=value:NoSchedule.
   */
  nodeTaints?: string[];
  /**
   * The ID for Proximity Placement Group.
   */
  proximityPlacementGroupID?: string;
  /**
   * KubeletConfig specifies the configuration of kubelet on agent nodes.
   */
  kubeletConfig?: KubeletConfig;
  /**
   * LinuxOSConfig specifies the OS configuration of linux agent nodes.
   */
  linuxOSConfig?: LinuxOSConfig;
  /**
   * Whether to enable EncryptionAtHost
   */
  enableEncryptionAtHost?: boolean;
  /**
   * Whether to use FIPS enabled OS
   */
  enableFIPS?: boolean;
  /**
   * GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
   * Supported values are MIG1g, MIG2g, MIG3g, MIG4g and MIG7g. Possible values include: 'MIG1g',
   * 'MIG2g', 'MIG3g', 'MIG4g', 'MIG7g'
   */
  gpuInstanceProfile?: GPUInstanceProfile;
}

/**
 * Profile for the container service agent pool.
 */
export interface ManagedClusterAgentPoolProfile extends ManagedClusterAgentPoolProfileProperties {
  /**
   * Unique name of the agent pool profile in the context of the subscription and resource group.
   */
  name: string;
}

/**
 * Agent Pool.
 */
export interface AgentPool extends SubResource {
  /**
   * Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to
   * 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system pools. The
   * default value is 1.
   */
  count?: number;
  /**
   * Size of agent VMs. Possible values include: 'Standard_A1', 'Standard_A10', 'Standard_A11',
   * 'Standard_A1_v2', 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2', 'Standard_A3',
   * 'Standard_A4', 'Standard_A4_v2', 'Standard_A4m_v2', 'Standard_A5', 'Standard_A6',
   * 'Standard_A7', 'Standard_A8', 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9',
   * 'Standard_B2ms', 'Standard_B2s', 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1',
   * 'Standard_D11', 'Standard_D11_v2', 'Standard_D11_v2_Promo', 'Standard_D12', 'Standard_D12_v2',
   * 'Standard_D12_v2_Promo', 'Standard_D13', 'Standard_D13_v2', 'Standard_D13_v2_Promo',
   * 'Standard_D14', 'Standard_D14_v2', 'Standard_D14_v2_Promo', 'Standard_D15_v2',
   * 'Standard_D16_v3', 'Standard_D16s_v3', 'Standard_D1_v2', 'Standard_D2', 'Standard_D2_v2',
   * 'Standard_D2_v2_Promo', 'Standard_D2_v3', 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3',
   * 'Standard_D32s_v3', 'Standard_D3_v2', 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2',
   * 'Standard_D4_v2_Promo', 'Standard_D4_v3', 'Standard_D4s_v3', 'Standard_D5_v2',
   * 'Standard_D5_v2_Promo', 'Standard_D64_v3', 'Standard_D64s_v3', 'Standard_D8_v3',
   * 'Standard_D8s_v3', 'Standard_DS1', 'Standard_DS11', 'Standard_DS11_v2',
   * 'Standard_DS11_v2_Promo', 'Standard_DS12', 'Standard_DS12_v2', 'Standard_DS12_v2_Promo',
   * 'Standard_DS13', 'Standard_DS13-2_v2', 'Standard_DS13-4_v2', 'Standard_DS13_v2',
   * 'Standard_DS13_v2_Promo', 'Standard_DS14', 'Standard_DS14-4_v2', 'Standard_DS14-8_v2',
   * 'Standard_DS14_v2', 'Standard_DS14_v2_Promo', 'Standard_DS15_v2', 'Standard_DS1_v2',
   * 'Standard_DS2', 'Standard_DS2_v2', 'Standard_DS2_v2_Promo', 'Standard_DS3', 'Standard_DS3_v2',
   * 'Standard_DS3_v2_Promo', 'Standard_DS4', 'Standard_DS4_v2', 'Standard_DS4_v2_Promo',
   * 'Standard_DS5_v2', 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3',
   * 'Standard_E2_v3', 'Standard_E2s_v3', 'Standard_E32-16s_v3', 'Standard_E32-8s_v3',
   * 'Standard_E32_v3', 'Standard_E32s_v3', 'Standard_E4_v3', 'Standard_E4s_v3',
   * 'Standard_E64-16s_v3', 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3',
   * 'Standard_E8_v3', 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16', 'Standard_F16s',
   * 'Standard_F16s_v2', 'Standard_F1s', 'Standard_F2', 'Standard_F2s', 'Standard_F2s_v2',
   * 'Standard_F32s_v2', 'Standard_F4', 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2',
   * 'Standard_F72s_v2', 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1',
   * 'Standard_G2', 'Standard_G3', 'Standard_G4', 'Standard_G5', 'Standard_GS1', 'Standard_GS2',
   * 'Standard_GS3', 'Standard_GS4', 'Standard_GS4-4', 'Standard_GS4-8', 'Standard_GS5',
   * 'Standard_GS5-16', 'Standard_GS5-8', 'Standard_H16', 'Standard_H16m', 'Standard_H16mr',
   * 'Standard_H16r', 'Standard_H8', 'Standard_H8m', 'Standard_L16s', 'Standard_L32s',
   * 'Standard_L4s', 'Standard_L8s', 'Standard_M128-32ms', 'Standard_M128-64ms', 'Standard_M128ms',
   * 'Standard_M128s', 'Standard_M64-16ms', 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s',
   * 'Standard_NC12', 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
   * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2', 'Standard_NC24s_v3',
   * 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3', 'Standard_ND12s', 'Standard_ND24rs',
   * 'Standard_ND24s', 'Standard_ND6s', 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
   */
  vmSize?: ContainerServiceVMSizeTypes;
  /**
   * OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent
   * pool. If you specify 0, it will apply the default osDisk size according to the vmSize
   * specified.
   */
  osDiskSizeGB?: number;
  /**
   * OS disk type to be used for machines in a given agent pool. Allowed values are 'Ephemeral' and
   * 'Managed'. Defaults to 'Managed'. May not be changed after creation. Possible values include:
   * 'Managed', 'Ephemeral'
   */
  osDiskType?: OSDiskType;
  /**
   * KubeletDiskType determines the placement of emptyDir volumes, container runtime data root, and
   * Kubelet ephemeral storage. Currently allows one value, OS, resulting in Kubelet using the OS
   * disk for data. Possible values include: 'OS', 'Temporary'
   */
  kubeletDiskType?: KubeletDiskType;
  /**
   * VNet SubnetID specifies the VNet's subnet identifier for nodes and maybe pods
   */
  vnetSubnetID?: string;
  /**
   * Pod SubnetID specifies the VNet's subnet identifier for pods.
   */
  podSubnetID?: string;
  /**
   * Maximum number of pods that can run on a node.
   */
  maxPods?: number;
  /**
   * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
   * Possible values include: 'Linux', 'Windows'. Default value: 'Linux'.
   */
  osType?: OSType;
  /**
   * OsSKU to be used to specify os sku. Choose from Ubuntu(default) and CBLMariner for Linux
   * OSType. Not applicable to Windows OSType. Possible values include: 'Ubuntu', 'CBLMariner'
   */
  osSKU?: OSSKU;
  /**
   * Maximum number of nodes for auto-scaling
   */
  maxCount?: number;
  /**
   * Minimum number of nodes for auto-scaling
   */
  minCount?: number;
  /**
   * Whether to enable auto-scaler
   */
  enableAutoScaling?: boolean;
  /**
   * AgentPoolType represents types of an agent pool. Possible values include:
   * 'VirtualMachineScaleSets', 'AvailabilitySet'
   */
  agentPoolType?: AgentPoolType;
  /**
   * AgentPoolMode represents mode of an agent pool. Possible values include: 'System', 'User'
   */
  mode?: AgentPoolMode;
  /**
   * Version of orchestrator specified when creating the managed cluster.
   */
  orchestratorVersion?: string;
  /**
   * Version of node image
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nodeImageVersion?: string;
  /**
   * Settings for upgrading the agentpool
   */
  upgradeSettings?: AgentPoolUpgradeSettings;
  /**
   * The current deployment or provisioning state, which only appears in the response.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Describes whether the Agent Pool is Running or Stopped
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly powerState?: PowerState;
  /**
   * Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.
   */
  availabilityZones?: string[];
  /**
   * Enable public IP for nodes
   */
  enableNodePublicIP?: boolean;
  /**
   * Public IP Prefix ID. VM nodes use IPs assigned from this Public IP Prefix.
   */
  nodePublicIPPrefixID?: string;
  /**
   * ScaleSetPriority to be used to specify virtual machine scale set priority. Default to regular.
   * Possible values include: 'Spot', 'Regular'. Default value: 'Regular'.
   */
  scaleSetPriority?: ScaleSetPriority;
  /**
   * ScaleSetEvictionPolicy to be used to specify eviction policy for Spot virtual machine scale
   * set. Default to Delete. Possible values include: 'Delete', 'Deallocate'. Default value:
   * 'Delete'.
   */
  scaleSetEvictionPolicy?: ScaleSetEvictionPolicy;
  /**
   * SpotMaxPrice to be used to specify the maximum price you are willing to pay in US Dollars.
   * Possible values are any decimal value greater than zero or -1 which indicates default price to
   * be up-to on-demand.
   */
  spotMaxPrice?: number;
  /**
   * Agent pool tags to be persisted on the agent pool virtual machine scale set.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Agent pool node labels to be persisted across all nodes in agent pool.
   */
  nodeLabels?: { [propertyName: string]: string };
  /**
   * Taints added to new nodes during node pool create and scale. For example,
   * key=value:NoSchedule.
   */
  nodeTaints?: string[];
  /**
   * The ID for Proximity Placement Group.
   */
  proximityPlacementGroupID?: string;
  /**
   * KubeletConfig specifies the configuration of kubelet on agent nodes.
   */
  kubeletConfig?: KubeletConfig;
  /**
   * LinuxOSConfig specifies the OS configuration of linux agent nodes.
   */
  linuxOSConfig?: LinuxOSConfig;
  /**
   * Whether to enable EncryptionAtHost
   */
  enableEncryptionAtHost?: boolean;
  /**
   * Whether to use FIPS enabled OS
   */
  enableFIPS?: boolean;
  /**
   * GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU.
   * Supported values are MIG1g, MIG2g, MIG3g, MIG4g and MIG7g. Possible values include: 'MIG1g',
   * 'MIG2g', 'MIG3g', 'MIG4g', 'MIG7g'
   */
  gpuInstanceProfile?: GPUInstanceProfile;
}

/**
 * Profile for Windows VMs in the container service cluster.
 */
export interface ManagedClusterWindowsProfile {
  /**
   * Specifies the name of the administrator account. <br><br> **restriction:** Cannot end in "."
   * <br><br> **Disallowed values:** "administrator", "admin", "user", "user1", "test", "user2",
   * "test1", "user3", "admin1", "1", "123", "a", "actuser", "adm", "admin2", "aspnet", "backup",
   * "console", "david", "guest", "john", "owner", "root", "server", "sql", "support",
   * "support_388945a0", "sys", "test2", "test3", "user4", "user5". <br><br> **Minimum-length:** 1
   * character <br><br> **Max-length:** 20 characters
   */
  adminUsername: string;
  /**
   * Specifies the password of the administrator account. <br><br> **Minimum-length:** 8 characters
   * <br><br> **Max-length:** 123 characters <br><br> **Complexity requirements:** 3 out of 4
   * conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br>
   * Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:**
   * "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!",
   * "Password1", "Password22", "iloveyou!"
   */
  adminPassword?: string;
  /**
   * The licenseType to use for Windows VMs. Windows_Server is used to enable Azure Hybrid User
   * Benefits for Windows VMs. Possible values include: 'None', 'Windows_Server'
   */
  licenseType?: LicenseType;
  /**
   * Whether to enable CSI proxy.
   */
  enableCSIProxy?: boolean;
}

/**
 * Contains information about SSH certificate public key data.
 */
export interface ContainerServiceSshPublicKey {
  /**
   * Certificate public key used to authenticate with VMs through SSH. The certificate must be in
   * PEM format with or without headers.
   */
  keyData: string;
}

/**
 * SSH configuration for Linux-based VMs running on Azure.
 */
export interface ContainerServiceSshConfiguration {
  /**
   * The list of SSH public keys used to authenticate with Linux-based VMs. Only expect one key
   * specified.
   */
  publicKeys: ContainerServiceSshPublicKey[];
}

/**
 * Profile for Linux VMs in the container service cluster.
 */
export interface ContainerServiceLinuxProfile {
  /**
   * The administrator username to use for Linux VMs.
   */
  adminUsername: string;
  /**
   * SSH configuration for Linux-based VMs running on Azure.
   */
  ssh: ContainerServiceSshConfiguration;
}

/**
 * Desired managed outbound IPs for the cluster load balancer.
 */
export interface ManagedClusterLoadBalancerProfileManagedOutboundIPs {
  /**
   * Desired number of outbound IP created/managed by Azure for the cluster load balancer. Allowed
   * values must be in the range of 1 to 100 (inclusive). The default value is 1. Default value: 1.
   */
  count?: number;
}

/**
 * A reference to an Azure resource.
 */
export interface ResourceReference {
  /**
   * The fully qualified Azure resource id.
   */
  id?: string;
}

/**
 * Desired outbound IP Prefix resources for the cluster load balancer.
 */
export interface ManagedClusterLoadBalancerProfileOutboundIPPrefixes {
  /**
   * A list of public IP prefix resources.
   */
  publicIPPrefixes?: ResourceReference[];
}

/**
 * Desired outbound IP resources for the cluster load balancer.
 */
export interface ManagedClusterLoadBalancerProfileOutboundIPs {
  /**
   * A list of public IP resources.
   */
  publicIPs?: ResourceReference[];
}

/**
 * Profile of the managed cluster load balancer.
 */
export interface ManagedClusterLoadBalancerProfile {
  /**
   * Desired managed outbound IPs for the cluster load balancer.
   */
  managedOutboundIPs?: ManagedClusterLoadBalancerProfileManagedOutboundIPs;
  /**
   * Desired outbound IP Prefix resources for the cluster load balancer.
   */
  outboundIPPrefixes?: ManagedClusterLoadBalancerProfileOutboundIPPrefixes;
  /**
   * Desired outbound IP resources for the cluster load balancer.
   */
  outboundIPs?: ManagedClusterLoadBalancerProfileOutboundIPs;
  /**
   * The effective outbound IP resources of the cluster load balancer.
   */
  effectiveOutboundIPs?: ResourceReference[];
  /**
   * Desired number of allocated SNAT ports per VM. Allowed values must be in the range of 0 to
   * 64000 (inclusive). The default value is 0 which results in Azure dynamically allocating ports.
   * Default value: 0.
   */
  allocatedOutboundPorts?: number;
  /**
   * Desired outbound flow idle timeout in minutes. Allowed values must be in the range of 4 to 120
   * (inclusive). The default value is 30 minutes. Default value: 30.
   */
  idleTimeoutInMinutes?: number;
}

/**
 * Profile of network configuration.
 */
export interface ContainerServiceNetworkProfile {
  /**
   * Network plugin used for building Kubernetes network. Possible values include: 'azure',
   * 'kubenet'. Default value: 'kubenet'.
   */
  networkPlugin?: NetworkPlugin;
  /**
   * Network policy used for building Kubernetes network. Possible values include: 'calico',
   * 'azure'
   */
  networkPolicy?: NetworkPolicy;
  /**
   * Network mode used for building Kubernetes network. Possible values include: 'transparent',
   * 'bridge'
   */
  networkMode?: NetworkMode;
  /**
   * A CIDR notation IP range from which to assign pod IPs when kubenet is used. Default value:
   * '10.244.0.0/16'.
   */
  podCidr?: string;
  /**
   * A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with
   * any Subnet IP ranges. Default value: '10.0.0.0/16'.
   */
  serviceCidr?: string;
  /**
   * An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service
   * address range specified in serviceCidr. Default value: '10.0.0.10'.
   */
  dnsServiceIP?: string;
  /**
   * A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any
   * Subnet IP ranges or the Kubernetes service address range. Default value: '172.17.0.1/16'.
   */
  dockerBridgeCidr?: string;
  /**
   * The outbound (egress) routing method. Possible values include: 'loadBalancer',
   * 'userDefinedRouting'. Default value: 'loadBalancer'.
   */
  outboundType?: OutboundType;
  /**
   * The load balancer sku for the managed cluster. Possible values include: 'standard', 'basic'
   */
  loadBalancerSku?: LoadBalancerSku;
  /**
   * Profile of the cluster load balancer.
   */
  loadBalancerProfile?: ManagedClusterLoadBalancerProfile;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemData {
  /**
   * The identity that created the resource.
   */
  createdBy?: string;
  /**
   * The type of identity that created the resource. Possible values include: 'User',
   * 'Application', 'ManagedIdentity', 'Key'
   */
  createdByType?: CreatedByType;
  /**
   * The timestamp of resource creation (UTC).
   */
  createdAt?: Date;
  /**
   * The identity that last modified the resource.
   */
  lastModifiedBy?: string;
  /**
   * The type of identity that last modified the resource. Possible values include: 'User',
   * 'Application', 'ManagedIdentity', 'Key'
   */
  lastModifiedByType?: CreatedByType;
  /**
   * The type of identity that last modified the resource.
   */
  lastModifiedAt?: Date;
}

/**
 * Time in a week.
 */
export interface TimeInWeek {
  /**
   * A day in a week. Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday',
   * 'Thursday', 'Friday', 'Saturday'
   */
  day?: WeekDay;
  /**
   * hour slots in a day.
   */
  hourSlots?: number[];
}

/**
 * The time span with start and end properties.
 */
export interface TimeSpan {
  /**
   * The start of a time span
   */
  start?: Date;
  /**
   * The end of a time span
   */
  end?: Date;
}

/**
 * maintenance configuration.
 */
export interface MaintenanceConfiguration extends SubResource {
  /**
   * The system meta data relating to this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemData?: SystemData;
  /**
   * Weekday time slots allowed to upgrade.
   */
  timeInWeek?: TimeInWeek[];
  /**
   * Time slots on which upgrade is not allowed.
   */
  notAllowedTime?: TimeSpan[];
}

/**
 * run command request
 */
export interface RunCommandRequest {
  /**
   * command to run.
   */
  command: string;
  /**
   * base64 encoded zip file, contains files required by the command
   */
  context?: string;
  /**
   * AuthToken issued for AKS AAD Server App.
   */
  clusterToken?: string;
}

/**
 * run command result.
 */
export interface RunCommandResult {
  /**
   * command id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * provisioning State
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * exit code of the command
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly exitCode?: number;
  /**
   * time when the command started.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedAt?: Date;
  /**
   * time when the command finished.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly finishedAt?: Date;
  /**
   * command output.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly logs?: string;
  /**
   * explain why provisioningState is set to failed (if so).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reason?: string;
}

/**
 * Profile for diagnostics on the container service VMs.
 */
export interface ContainerServiceVMDiagnostics {
  /**
   * Whether the VM diagnostic agent is provisioned on the VM.
   */
  enabled: boolean;
  /**
   * The URI of the storage account where diagnostics are stored.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly storageUri?: string;
}

/**
 * Profile for diagnostics on the container service cluster.
 */
export interface ContainerServiceDiagnosticsProfile {
  /**
   * Profile for diagnostics on the container service VMs.
   */
  vmDiagnostics: ContainerServiceVMDiagnostics;
}

/**
 * An interface representing UserAssignedIdentity.
 */
export interface UserAssignedIdentity {
  /**
   * The resource id of the user assigned identity.
   */
  resourceId?: string;
  /**
   * The client id of the user assigned identity.
   */
  clientId?: string;
  /**
   * The object id of the user assigned identity.
   */
  objectId?: string;
}

/**
 * Information of user assigned identity used by this add-on.
 */
export interface ManagedClusterAddonProfileIdentity extends UserAssignedIdentity {
}

/**
 * A Kubernetes add-on profile for a managed cluster.
 */
export interface ManagedClusterAddonProfile {
  /**
   * Whether the add-on is enabled or not.
   */
  enabled: boolean;
  /**
   * Key-value pairs for configuring an add-on.
   */
  config?: { [propertyName: string]: string };
  /**
   * Information of user assigned identity used by this add-on.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly identity?: ManagedClusterAddonProfileIdentity;
}

/**
 * An interface representing ManagedClusterPodIdentityProvisioningInfo.
 */
export interface ManagedClusterPodIdentityProvisioningInfo {
  /**
   * Pod identity assignment error (if any).
   */
  error?: CloudError;
}

/**
 * An interface representing ManagedClusterPodIdentity.
 */
export interface ManagedClusterPodIdentity {
  /**
   * Name of the pod identity.
   */
  name: string;
  /**
   * Namespace of the pod identity.
   */
  namespace: string;
  /**
   * Binding selector to use for the AzureIdentityBinding resource.
   */
  bindingSelector?: string;
  /**
   * Information of the user assigned identity.
   */
  identity: UserAssignedIdentity;
  /**
   * The current provisioning state of the pod identity. Possible values include: 'Assigned',
   * 'Updating', 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ManagedClusterPodIdentityProvisioningState;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningInfo?: ManagedClusterPodIdentityProvisioningInfo;
}

/**
 * An interface representing ManagedClusterPodIdentityException.
 */
export interface ManagedClusterPodIdentityException {
  /**
   * Name of the pod identity exception.
   */
  name: string;
  /**
   * Namespace of the pod identity exception.
   */
  namespace: string;
  /**
   * Pod labels to match.
   */
  podLabels: { [propertyName: string]: string };
}

/**
 * An interface representing ManagedClusterPodIdentityProfile.
 */
export interface ManagedClusterPodIdentityProfile {
  /**
   * Whether the pod identity addon is enabled.
   */
  enabled?: boolean;
  /**
   * Customer consent for enabling AAD pod identity addon in cluster using Kubenet network plugin.
   */
  allowNetworkPluginKubenet?: boolean;
  /**
   * User assigned pod identity settings.
   */
  userAssignedIdentities?: ManagedClusterPodIdentity[];
  /**
   * User assigned pod identity exception settings.
   */
  userAssignedIdentityExceptions?: ManagedClusterPodIdentityException[];
}

/**
 * AADProfile specifies attributes for Azure Active Directory integration.
 */
export interface ManagedClusterAADProfile {
  /**
   * Whether to enable managed AAD.
   */
  managed?: boolean;
  /**
   * Whether to enable Azure RBAC for Kubernetes authorization.
   */
  enableAzureRBAC?: boolean;
  /**
   * AAD group object IDs that will have admin role of the cluster.
   */
  adminGroupObjectIDs?: string[];
  /**
   * The client AAD application ID.
   */
  clientAppID?: string;
  /**
   * The server AAD application ID.
   */
  serverAppID?: string;
  /**
   * The server AAD application secret.
   */
  serverAppSecret?: string;
  /**
   * The AAD tenant ID to use for authentication. If not specified, will use the tenant of the
   * deployment subscription.
   */
  tenantID?: string;
}

/**
 * Auto upgrade profile for a managed cluster.
 */
export interface ManagedClusterAutoUpgradeProfile {
  /**
   * upgrade channel for auto upgrade. Possible values include: 'rapid', 'stable', 'patch',
   * 'node-image', 'none'
   */
  upgradeChannel?: UpgradeChannel;
}

/**
 * Parameters to be applied to the cluster-autoscaler when enabled
 */
export interface ManagedClusterPropertiesAutoScalerProfile {
  balanceSimilarNodeGroups?: string;
  /**
   * Possible values include: 'least-waste', 'most-pods', 'priority', 'random'
   */
  expander?: Expander;
  maxEmptyBulkDelete?: string;
  maxGracefulTerminationSec?: string;
  maxNodeProvisionTime?: string;
  maxTotalUnreadyPercentage?: string;
  newPodScaleUpDelay?: string;
  okTotalUnreadyCount?: string;
  scanInterval?: string;
  scaleDownDelayAfterAdd?: string;
  scaleDownDelayAfterDelete?: string;
  scaleDownDelayAfterFailure?: string;
  scaleDownUnneededTime?: string;
  scaleDownUnreadyTime?: string;
  scaleDownUtilizationThreshold?: string;
  skipNodesWithLocalStorage?: string;
  skipNodesWithSystemPods?: string;
}

/**
 * Access profile for managed cluster API server.
 */
export interface ManagedClusterAPIServerAccessProfile {
  /**
   * Authorized IP Ranges to kubernetes API server.
   */
  authorizedIPRanges?: string[];
  /**
   * Whether to create the cluster as a private cluster or not.
   */
  enablePrivateCluster?: boolean;
  /**
   * Private dns zone mode for private cluster.
   */
  privateDNSZone?: string;
}

/**
 * An interface representing ManagedClusterPropertiesIdentityProfileValue.
 */
export interface ManagedClusterPropertiesIdentityProfileValue extends UserAssignedIdentity {
}

/**
 * A private link resource
 */
export interface PrivateLinkResource {
  /**
   * The ID of the private link resource.
   */
  id?: string;
  /**
   * The name of the private link resource.
   */
  name?: string;
  /**
   * The resource type.
   */
  type?: string;
  /**
   * The group ID of the resource.
   */
  groupId?: string;
  /**
   * RequiredMembers of the resource
   */
  requiredMembers?: string[];
  /**
   * The private link service ID of the resource, this field is exposed only to NRP internally.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly privateLinkServiceID?: string;
}

/**
 * Configurations for provisioning the cluster with HTTP proxy servers.
 */
export interface ManagedClusterHTTPProxyConfig {
  /**
   * HTTP proxy server endpoint to use.
   */
  httpProxy?: string;
  /**
   * HTTPS proxy server endpoint to use.
   */
  httpsProxy?: string;
  /**
   * Endpoints that should not go through proxy.
   */
  noProxy?: string[];
  /**
   * Alternative CA cert to use for connecting to proxy servers.
   */
  trustedCa?: string;
}

/**
 * An interface representing ManagedClusterIdentityUserAssignedIdentitiesValue.
 */
export interface ManagedClusterIdentityUserAssignedIdentitiesValue {
  /**
   * The principal id of user assigned identity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly clientId?: string;
}

/**
 * Identity for the managed cluster.
 */
export interface ManagedClusterIdentity {
  /**
   * The principal id of the system assigned identity which is used by master components.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The tenant id of the system assigned identity which is used by master components.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * The type of identity used for the managed cluster. Type 'SystemAssigned' will use an
   * implicitly created identity in master components and an auto-created user assigned identity in
   * MC_ resource group in agent nodes. Type 'None' will not use MSI for the managed cluster,
   * service principal will be used instead. Possible values include: 'SystemAssigned',
   * 'UserAssigned', 'None'
   */
  type?: ResourceIdentityType;
  /**
   * The user identity associated with the managed cluster. This identity will be used in control
   * plane and only one user assigned identity is allowed. The user identity dictionary key
   * references will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   */
  userAssignedIdentities?: { [propertyName: string]: ManagedClusterIdentityUserAssignedIdentitiesValue };
}

/**
 * An interface representing ManagedClusterSKU.
 */
export interface ManagedClusterSKU {
  /**
   * Name of a managed cluster SKU. Possible values include: 'Basic'
   */
  name?: ManagedClusterSKUName;
  /**
   * Tier of a managed cluster SKU. Possible values include: 'Paid', 'Free'
   */
  tier?: ManagedClusterSKUTier;
}

/**
 * The complex type of the extended location.
 */
export interface ExtendedLocation {
  /**
   * The name of the extended location.
   */
  name?: string;
  /**
   * The type of the extended location. Possible values include: 'EdgeZone'
   */
  type?: ExtendedLocationTypes;
}

/**
 * Managed cluster.
 */
export interface ManagedCluster extends Resource {
  /**
   * The current deployment or provisioning state, which only appears in the response.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * Represents the Power State of the cluster
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly powerState?: PowerState;
  /**
   * The max number of agent pools for the managed cluster.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxAgentPools?: number;
  /**
   * Version of Kubernetes specified when creating the managed cluster.
   */
  kubernetesVersion?: string;
  /**
   * DNS prefix specified when creating the managed cluster.
   */
  dnsPrefix?: string;
  /**
   * FQDN subdomain specified when creating private cluster with custom private dns zone.
   */
  fqdnSubdomain?: string;
  /**
   * FQDN for the master pool.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fqdn?: string;
  /**
   * FQDN of private cluster.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly privateFQDN?: string;
  /**
   * FQDN for the master pool which used by proxy config.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly azurePortalFQDN?: string;
  /**
   * Properties of the agent pool.
   */
  agentPoolProfiles?: ManagedClusterAgentPoolProfile[];
  /**
   * Profile for Linux VMs in the container service cluster.
   */
  linuxProfile?: ContainerServiceLinuxProfile;
  /**
   * Profile for Windows VMs in the container service cluster.
   */
  windowsProfile?: ManagedClusterWindowsProfile;
  /**
   * Information about a service principal identity for the cluster to use for manipulating Azure
   * APIs.
   */
  servicePrincipalProfile?: ManagedClusterServicePrincipalProfile;
  /**
   * Profile of managed cluster add-on.
   */
  addonProfiles?: { [propertyName: string]: ManagedClusterAddonProfile };
  /**
   * Profile of managed cluster pod identity.
   */
  podIdentityProfile?: ManagedClusterPodIdentityProfile;
  /**
   * Name of the resource group containing agent pool nodes.
   */
  nodeResourceGroup?: string;
  /**
   * Whether to enable Kubernetes Role-Based Access Control.
   */
  enableRBAC?: boolean;
  /**
   * (DEPRECATING) Whether to enable Kubernetes pod security policy (preview). This feature is set
   * for removal on October 15th, 2020. Learn more at aka.ms/aks/azpodpolicy.
   */
  enablePodSecurityPolicy?: boolean;
  /**
   * Profile of network configuration.
   */
  networkProfile?: ContainerServiceNetworkProfile;
  /**
   * Profile of Azure Active Directory configuration.
   */
  aadProfile?: ManagedClusterAADProfile;
  /**
   * Profile of auto upgrade configuration.
   */
  autoUpgradeProfile?: ManagedClusterAutoUpgradeProfile;
  /**
   * Parameters to be applied to the cluster-autoscaler when enabled
   */
  autoScalerProfile?: ManagedClusterPropertiesAutoScalerProfile;
  /**
   * Access profile for managed cluster API server.
   */
  apiServerAccessProfile?: ManagedClusterAPIServerAccessProfile;
  /**
   * ResourceId of the disk encryption set to use for enabling encryption at rest.
   */
  diskEncryptionSetID?: string;
  /**
   * Identities associated with the cluster.
   */
  identityProfile?: { [propertyName: string]: ManagedClusterPropertiesIdentityProfileValue };
  /**
   * Private link resources associated with the cluster.
   */
  privateLinkResources?: PrivateLinkResource[];
  /**
   * If set to true, getting static credential will be disabled for this cluster. Expected to only
   * be used for AAD clusters.
   */
  disableLocalAccounts?: boolean;
  /**
   * Configurations for provisioning the cluster with HTTP proxy servers.
   */
  httpProxyConfig?: ManagedClusterHTTPProxyConfig;
  /**
   * The identity of the managed cluster, if configured.
   */
  identity?: ManagedClusterIdentity;
  /**
   * The managed cluster SKU.
   */
  sku?: ManagedClusterSKU;
  /**
   * The extended location of the Virtual Machine.
   */
  extendedLocation?: ExtendedLocation;
}

/**
 * Managed cluster Access Profile.
 */
export interface ManagedClusterAccessProfile extends Resource {
  /**
   * Base64-encoded Kubernetes configuration file.
   */
  kubeConfig?: Uint8Array;
}

/**
 * An interface representing ManagedClusterPoolUpgradeProfileUpgradesItem.
 */
export interface ManagedClusterPoolUpgradeProfileUpgradesItem {
  /**
   * Kubernetes version (major, minor, patch).
   */
  kubernetesVersion?: string;
  /**
   * Whether Kubernetes version is currently in preview.
   */
  isPreview?: boolean;
}

/**
 * The list of available upgrade versions.
 */
export interface ManagedClusterPoolUpgradeProfile {
  /**
   * Kubernetes version (major, minor, patch).
   */
  kubernetesVersion: string;
  /**
   * Pool name.
   */
  name?: string;
  /**
   * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
   * Possible values include: 'Linux', 'Windows'. Default value: 'Linux'.
   */
  osType: OSType;
  /**
   * List of orchestrator types and versions available for upgrade.
   */
  upgrades?: ManagedClusterPoolUpgradeProfileUpgradesItem[];
}

/**
 * The list of available upgrades for compute pools.
 */
export interface ManagedClusterUpgradeProfile {
  /**
   * Id of upgrade profile.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of upgrade profile.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Type of upgrade profile.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The list of available upgrade versions for the control plane.
   */
  controlPlaneProfile: ManagedClusterPoolUpgradeProfile;
  /**
   * The list of available upgrade versions for agent pools.
   */
  agentPoolProfiles: ManagedClusterPoolUpgradeProfile[];
}

/**
 * An interface representing AgentPoolUpgradeProfilePropertiesUpgradesItem.
 */
export interface AgentPoolUpgradeProfilePropertiesUpgradesItem {
  /**
   * Kubernetes version (major, minor, patch).
   */
  kubernetesVersion?: string;
  /**
   * Whether Kubernetes version is currently in preview.
   */
  isPreview?: boolean;
}

/**
 * The list of available upgrades for an agent pool.
 */
export interface AgentPoolUpgradeProfile {
  /**
   * Id of the agent pool upgrade profile.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the agent pool upgrade profile.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Type of the agent pool upgrade profile.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Kubernetes version (major, minor, patch).
   */
  kubernetesVersion: string;
  /**
   * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
   * Possible values include: 'Linux', 'Windows'. Default value: 'Linux'.
   */
  osType: OSType;
  /**
   * List of orchestrator types and versions available for upgrade.
   */
  upgrades?: AgentPoolUpgradeProfilePropertiesUpgradesItem[];
  /**
   * LatestNodeImageVersion is the latest AKS supported node image version.
   */
  latestNodeImageVersion?: string;
}

/**
 * An interface representing AgentPoolAvailableVersionsPropertiesAgentPoolVersionsItem.
 */
export interface AgentPoolAvailableVersionsPropertiesAgentPoolVersionsItem {
  /**
   * Whether this version is the default agent pool version.
   */
  default?: boolean;
  /**
   * Kubernetes version (major, minor, patch).
   */
  kubernetesVersion?: string;
  /**
   * Whether Kubernetes version is currently in preview.
   */
  isPreview?: boolean;
}

/**
 * The list of available versions for an agent pool.
 */
export interface AgentPoolAvailableVersions {
  /**
   * Id of the agent pool available versions.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the agent pool available versions.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Type of the agent pool  available versions.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * List of versions available for agent pool.
   */
  agentPoolVersions?: AgentPoolAvailableVersionsPropertiesAgentPoolVersionsItem[];
}

/**
 * The credential result response.
 */
export interface CredentialResult {
  /**
   * The name of the credential.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Base64-encoded Kubernetes configuration file.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: Uint8Array;
}

/**
 * The list of credential result response.
 */
export interface CredentialResults {
  /**
   * Base64-encoded Kubernetes configuration file.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kubeconfigs?: CredentialResult[];
}

/**
 * Private endpoint which a connection belongs to.
 */
export interface PrivateEndpoint {
  /**
   * The resource Id for private endpoint
   */
  id?: string;
}

/**
 * The state of a private link service connection.
 */
export interface PrivateLinkServiceConnectionState {
  /**
   * The private link service connection status. Possible values include: 'Pending', 'Approved',
   * 'Rejected', 'Disconnected'
   */
  status?: ConnectionStatus;
  /**
   * The private link service connection description.
   */
  description?: string;
}

/**
 * A private endpoint connection
 */
export interface PrivateEndpointConnection extends BaseResource {
  /**
   * The ID of the private endpoint connection.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the private endpoint connection.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The current provisioning state. Possible values include: 'Succeeded', 'Creating', 'Deleting',
   * 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
  /**
   * The resource of private endpoint.
   */
  privateEndpoint?: PrivateEndpoint;
  /**
   * A collection of information about the state of the connection between service consumer and
   * provider.
   */
  privateLinkServiceConnectionState: PrivateLinkServiceConnectionState;
}

/**
 * A list of private endpoint connections
 */
export interface PrivateEndpointConnectionListResult {
  /**
   * The collection value.
   */
  value?: PrivateEndpointConnection[];
}

/**
 * A list of private link resources
 */
export interface PrivateLinkResourcesListResult {
  /**
   * The collection value.
   */
  value?: PrivateLinkResource[];
}

/**
 * OS option property.
 */
export interface OSOptionProperty {
  /**
   * OS type.
   */
  osType: string;
  /**
   * Whether FIPS image is enabled.
   */
  enableFipsImage: boolean;
}

/**
 * The OS option profile.
 */
export interface OSOptionProfile {
  /**
   * Id of the OS option profile.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the OS option profile.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Type of the OS option profile.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The list of OS option properties.
   */
  osOptionPropertyList: OSOptionProperty[];
}

/**
 * Optional Parameters.
 */
export interface ManagedClustersGetOSOptionsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * resource type for which the OS options needs to be returned
   */
  resourceType?: string;
}

/**
 * An interface representing ContainerServiceClientOptions.
 */
export interface ContainerServiceClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * The List Compute Operation operation response.
 * @extends Array<OperationValue>
 */
export interface OperationListResult extends Array<OperationValue> {
}

/**
 * @interface
 * The response from the List Managed Clusters operation.
 * @extends Array<ManagedCluster>
 */
export interface ManagedClusterListResult extends Array<ManagedCluster> {
  /**
   * The URL to get the next set of managed cluster results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * The response from the List maintenance configurations operation.
 * @extends Array<MaintenanceConfiguration>
 */
export interface MaintenanceConfigurationListResult extends Array<MaintenanceConfiguration> {
  /**
   * The URL to get the next set of maintenance configuration results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * The response from the List Agent Pools operation.
 * @extends Array<AgentPool>
 */
export interface AgentPoolListResult extends Array<AgentPool> {
  /**
   * The URL to get the next set of agent pool results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for ContainerServiceStorageProfileTypes.
 * Possible values include: 'StorageAccount', 'ManagedDisks'
 * @readonly
 * @enum {string}
 */
export type ContainerServiceStorageProfileTypes = 'StorageAccount' | 'ManagedDisks';

/**
 * Defines values for ContainerServiceVMSizeTypes.
 * Possible values include: 'Standard_A1', 'Standard_A10', 'Standard_A11', 'Standard_A1_v2',
 * 'Standard_A2', 'Standard_A2_v2', 'Standard_A2m_v2', 'Standard_A3', 'Standard_A4',
 * 'Standard_A4_v2', 'Standard_A4m_v2', 'Standard_A5', 'Standard_A6', 'Standard_A7', 'Standard_A8',
 * 'Standard_A8_v2', 'Standard_A8m_v2', 'Standard_A9', 'Standard_B2ms', 'Standard_B2s',
 * 'Standard_B4ms', 'Standard_B8ms', 'Standard_D1', 'Standard_D11', 'Standard_D11_v2',
 * 'Standard_D11_v2_Promo', 'Standard_D12', 'Standard_D12_v2', 'Standard_D12_v2_Promo',
 * 'Standard_D13', 'Standard_D13_v2', 'Standard_D13_v2_Promo', 'Standard_D14', 'Standard_D14_v2',
 * 'Standard_D14_v2_Promo', 'Standard_D15_v2', 'Standard_D16_v3', 'Standard_D16s_v3',
 * 'Standard_D1_v2', 'Standard_D2', 'Standard_D2_v2', 'Standard_D2_v2_Promo', 'Standard_D2_v3',
 * 'Standard_D2s_v3', 'Standard_D3', 'Standard_D32_v3', 'Standard_D32s_v3', 'Standard_D3_v2',
 * 'Standard_D3_v2_Promo', 'Standard_D4', 'Standard_D4_v2', 'Standard_D4_v2_Promo',
 * 'Standard_D4_v3', 'Standard_D4s_v3', 'Standard_D5_v2', 'Standard_D5_v2_Promo',
 * 'Standard_D64_v3', 'Standard_D64s_v3', 'Standard_D8_v3', 'Standard_D8s_v3', 'Standard_DS1',
 * 'Standard_DS11', 'Standard_DS11_v2', 'Standard_DS11_v2_Promo', 'Standard_DS12',
 * 'Standard_DS12_v2', 'Standard_DS12_v2_Promo', 'Standard_DS13', 'Standard_DS13-2_v2',
 * 'Standard_DS13-4_v2', 'Standard_DS13_v2', 'Standard_DS13_v2_Promo', 'Standard_DS14',
 * 'Standard_DS14-4_v2', 'Standard_DS14-8_v2', 'Standard_DS14_v2', 'Standard_DS14_v2_Promo',
 * 'Standard_DS15_v2', 'Standard_DS1_v2', 'Standard_DS2', 'Standard_DS2_v2',
 * 'Standard_DS2_v2_Promo', 'Standard_DS3', 'Standard_DS3_v2', 'Standard_DS3_v2_Promo',
 * 'Standard_DS4', 'Standard_DS4_v2', 'Standard_DS4_v2_Promo', 'Standard_DS5_v2',
 * 'Standard_DS5_v2_Promo', 'Standard_E16_v3', 'Standard_E16s_v3', 'Standard_E2_v3',
 * 'Standard_E2s_v3', 'Standard_E32-16s_v3', 'Standard_E32-8s_v3', 'Standard_E32_v3',
 * 'Standard_E32s_v3', 'Standard_E4_v3', 'Standard_E4s_v3', 'Standard_E64-16s_v3',
 * 'Standard_E64-32s_v3', 'Standard_E64_v3', 'Standard_E64s_v3', 'Standard_E8_v3',
 * 'Standard_E8s_v3', 'Standard_F1', 'Standard_F16', 'Standard_F16s', 'Standard_F16s_v2',
 * 'Standard_F1s', 'Standard_F2', 'Standard_F2s', 'Standard_F2s_v2', 'Standard_F32s_v2',
 * 'Standard_F4', 'Standard_F4s', 'Standard_F4s_v2', 'Standard_F64s_v2', 'Standard_F72s_v2',
 * 'Standard_F8', 'Standard_F8s', 'Standard_F8s_v2', 'Standard_G1', 'Standard_G2', 'Standard_G3',
 * 'Standard_G4', 'Standard_G5', 'Standard_GS1', 'Standard_GS2', 'Standard_GS3', 'Standard_GS4',
 * 'Standard_GS4-4', 'Standard_GS4-8', 'Standard_GS5', 'Standard_GS5-16', 'Standard_GS5-8',
 * 'Standard_H16', 'Standard_H16m', 'Standard_H16mr', 'Standard_H16r', 'Standard_H8',
 * 'Standard_H8m', 'Standard_L16s', 'Standard_L32s', 'Standard_L4s', 'Standard_L8s',
 * 'Standard_M128-32ms', 'Standard_M128-64ms', 'Standard_M128ms', 'Standard_M128s',
 * 'Standard_M64-16ms', 'Standard_M64-32ms', 'Standard_M64ms', 'Standard_M64s', 'Standard_NC12',
 * 'Standard_NC12s_v2', 'Standard_NC12s_v3', 'Standard_NC24', 'Standard_NC24r',
 * 'Standard_NC24rs_v2', 'Standard_NC24rs_v3', 'Standard_NC24s_v2', 'Standard_NC24s_v3',
 * 'Standard_NC6', 'Standard_NC6s_v2', 'Standard_NC6s_v3', 'Standard_ND12s', 'Standard_ND24rs',
 * 'Standard_ND24s', 'Standard_ND6s', 'Standard_NV12', 'Standard_NV24', 'Standard_NV6'
 * @readonly
 * @enum {string}
 */
export type ContainerServiceVMSizeTypes = 'Standard_A1' | 'Standard_A10' | 'Standard_A11' | 'Standard_A1_v2' | 'Standard_A2' | 'Standard_A2_v2' | 'Standard_A2m_v2' | 'Standard_A3' | 'Standard_A4' | 'Standard_A4_v2' | 'Standard_A4m_v2' | 'Standard_A5' | 'Standard_A6' | 'Standard_A7' | 'Standard_A8' | 'Standard_A8_v2' | 'Standard_A8m_v2' | 'Standard_A9' | 'Standard_B2ms' | 'Standard_B2s' | 'Standard_B4ms' | 'Standard_B8ms' | 'Standard_D1' | 'Standard_D11' | 'Standard_D11_v2' | 'Standard_D11_v2_Promo' | 'Standard_D12' | 'Standard_D12_v2' | 'Standard_D12_v2_Promo' | 'Standard_D13' | 'Standard_D13_v2' | 'Standard_D13_v2_Promo' | 'Standard_D14' | 'Standard_D14_v2' | 'Standard_D14_v2_Promo' | 'Standard_D15_v2' | 'Standard_D16_v3' | 'Standard_D16s_v3' | 'Standard_D1_v2' | 'Standard_D2' | 'Standard_D2_v2' | 'Standard_D2_v2_Promo' | 'Standard_D2_v3' | 'Standard_D2s_v3' | 'Standard_D3' | 'Standard_D32_v3' | 'Standard_D32s_v3' | 'Standard_D3_v2' | 'Standard_D3_v2_Promo' | 'Standard_D4' | 'Standard_D4_v2' | 'Standard_D4_v2_Promo' | 'Standard_D4_v3' | 'Standard_D4s_v3' | 'Standard_D5_v2' | 'Standard_D5_v2_Promo' | 'Standard_D64_v3' | 'Standard_D64s_v3' | 'Standard_D8_v3' | 'Standard_D8s_v3' | 'Standard_DS1' | 'Standard_DS11' | 'Standard_DS11_v2' | 'Standard_DS11_v2_Promo' | 'Standard_DS12' | 'Standard_DS12_v2' | 'Standard_DS12_v2_Promo' | 'Standard_DS13' | 'Standard_DS13-2_v2' | 'Standard_DS13-4_v2' | 'Standard_DS13_v2' | 'Standard_DS13_v2_Promo' | 'Standard_DS14' | 'Standard_DS14-4_v2' | 'Standard_DS14-8_v2' | 'Standard_DS14_v2' | 'Standard_DS14_v2_Promo' | 'Standard_DS15_v2' | 'Standard_DS1_v2' | 'Standard_DS2' | 'Standard_DS2_v2' | 'Standard_DS2_v2_Promo' | 'Standard_DS3' | 'Standard_DS3_v2' | 'Standard_DS3_v2_Promo' | 'Standard_DS4' | 'Standard_DS4_v2' | 'Standard_DS4_v2_Promo' | 'Standard_DS5_v2' | 'Standard_DS5_v2_Promo' | 'Standard_E16_v3' | 'Standard_E16s_v3' | 'Standard_E2_v3' | 'Standard_E2s_v3' | 'Standard_E32-16s_v3' | 'Standard_E32-8s_v3' | 'Standard_E32_v3' | 'Standard_E32s_v3' | 'Standard_E4_v3' | 'Standard_E4s_v3' | 'Standard_E64-16s_v3' | 'Standard_E64-32s_v3' | 'Standard_E64_v3' | 'Standard_E64s_v3' | 'Standard_E8_v3' | 'Standard_E8s_v3' | 'Standard_F1' | 'Standard_F16' | 'Standard_F16s' | 'Standard_F16s_v2' | 'Standard_F1s' | 'Standard_F2' | 'Standard_F2s' | 'Standard_F2s_v2' | 'Standard_F32s_v2' | 'Standard_F4' | 'Standard_F4s' | 'Standard_F4s_v2' | 'Standard_F64s_v2' | 'Standard_F72s_v2' | 'Standard_F8' | 'Standard_F8s' | 'Standard_F8s_v2' | 'Standard_G1' | 'Standard_G2' | 'Standard_G3' | 'Standard_G4' | 'Standard_G5' | 'Standard_GS1' | 'Standard_GS2' | 'Standard_GS3' | 'Standard_GS4' | 'Standard_GS4-4' | 'Standard_GS4-8' | 'Standard_GS5' | 'Standard_GS5-16' | 'Standard_GS5-8' | 'Standard_H16' | 'Standard_H16m' | 'Standard_H16mr' | 'Standard_H16r' | 'Standard_H8' | 'Standard_H8m' | 'Standard_L16s' | 'Standard_L32s' | 'Standard_L4s' | 'Standard_L8s' | 'Standard_M128-32ms' | 'Standard_M128-64ms' | 'Standard_M128ms' | 'Standard_M128s' | 'Standard_M64-16ms' | 'Standard_M64-32ms' | 'Standard_M64ms' | 'Standard_M64s' | 'Standard_NC12' | 'Standard_NC12s_v2' | 'Standard_NC12s_v3' | 'Standard_NC24' | 'Standard_NC24r' | 'Standard_NC24rs_v2' | 'Standard_NC24rs_v3' | 'Standard_NC24s_v2' | 'Standard_NC24s_v3' | 'Standard_NC6' | 'Standard_NC6s_v2' | 'Standard_NC6s_v3' | 'Standard_ND12s' | 'Standard_ND24rs' | 'Standard_ND24s' | 'Standard_ND6s' | 'Standard_NV12' | 'Standard_NV24' | 'Standard_NV6';

/**
 * Defines values for OSDiskType.
 * Possible values include: 'Managed', 'Ephemeral'
 * @readonly
 * @enum {string}
 */
export type OSDiskType = 'Managed' | 'Ephemeral';

/**
 * Defines values for KubeletDiskType.
 * Possible values include: 'OS', 'Temporary'
 * @readonly
 * @enum {string}
 */
export type KubeletDiskType = 'OS' | 'Temporary';

/**
 * Defines values for OSType.
 * Possible values include: 'Linux', 'Windows'
 * @readonly
 * @enum {string}
 */
export type OSType = 'Linux' | 'Windows';

/**
 * Defines values for OSSKU.
 * Possible values include: 'Ubuntu', 'CBLMariner'
 * @readonly
 * @enum {string}
 */
export type OSSKU = 'Ubuntu' | 'CBLMariner';

/**
 * Defines values for AgentPoolType.
 * Possible values include: 'VirtualMachineScaleSets', 'AvailabilitySet'
 * @readonly
 * @enum {string}
 */
export type AgentPoolType = 'VirtualMachineScaleSets' | 'AvailabilitySet';

/**
 * Defines values for AgentPoolMode.
 * Possible values include: 'System', 'User'
 * @readonly
 * @enum {string}
 */
export type AgentPoolMode = 'System' | 'User';

/**
 * Defines values for Code.
 * Possible values include: 'Running', 'Stopped'
 * @readonly
 * @enum {string}
 */
export type Code = 'Running' | 'Stopped';

/**
 * Defines values for ScaleSetPriority.
 * Possible values include: 'Spot', 'Regular'
 * @readonly
 * @enum {string}
 */
export type ScaleSetPriority = 'Spot' | 'Regular';

/**
 * Defines values for ScaleSetEvictionPolicy.
 * Possible values include: 'Delete', 'Deallocate'
 * @readonly
 * @enum {string}
 */
export type ScaleSetEvictionPolicy = 'Delete' | 'Deallocate';

/**
 * Defines values for GPUInstanceProfile.
 * Possible values include: 'MIG1g', 'MIG2g', 'MIG3g', 'MIG4g', 'MIG7g'
 * @readonly
 * @enum {string}
 */
export type GPUInstanceProfile = 'MIG1g' | 'MIG2g' | 'MIG3g' | 'MIG4g' | 'MIG7g';

/**
 * Defines values for LicenseType.
 * Possible values include: 'None', 'Windows_Server'
 * @readonly
 * @enum {string}
 */
export type LicenseType = 'None' | 'Windows_Server';

/**
 * Defines values for NetworkPlugin.
 * Possible values include: 'azure', 'kubenet'
 * @readonly
 * @enum {string}
 */
export type NetworkPlugin = 'azure' | 'kubenet';

/**
 * Defines values for NetworkPolicy.
 * Possible values include: 'calico', 'azure'
 * @readonly
 * @enum {string}
 */
export type NetworkPolicy = 'calico' | 'azure';

/**
 * Defines values for NetworkMode.
 * Possible values include: 'transparent', 'bridge'
 * @readonly
 * @enum {string}
 */
export type NetworkMode = 'transparent' | 'bridge';

/**
 * Defines values for OutboundType.
 * Possible values include: 'loadBalancer', 'userDefinedRouting'
 * @readonly
 * @enum {string}
 */
export type OutboundType = 'loadBalancer' | 'userDefinedRouting';

/**
 * Defines values for LoadBalancerSku.
 * Possible values include: 'standard', 'basic'
 * @readonly
 * @enum {string}
 */
export type LoadBalancerSku = 'standard' | 'basic';

/**
 * Defines values for CreatedByType.
 * Possible values include: 'User', 'Application', 'ManagedIdentity', 'Key'
 * @readonly
 * @enum {string}
 */
export type CreatedByType = 'User' | 'Application' | 'ManagedIdentity' | 'Key';

/**
 * Defines values for WeekDay.
 * Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',
 * 'Saturday'
 * @readonly
 * @enum {string}
 */
export type WeekDay = 'Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday';

/**
 * Defines values for ManagedClusterPodIdentityProvisioningState.
 * Possible values include: 'Assigned', 'Updating', 'Deleting', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ManagedClusterPodIdentityProvisioningState = 'Assigned' | 'Updating' | 'Deleting' | 'Failed';

/**
 * Defines values for UpgradeChannel.
 * Possible values include: 'rapid', 'stable', 'patch', 'node-image', 'none'
 * @readonly
 * @enum {string}
 */
export type UpgradeChannel = 'rapid' | 'stable' | 'patch' | 'node-image' | 'none';

/**
 * Defines values for Expander.
 * Possible values include: 'least-waste', 'most-pods', 'priority', 'random'
 * @readonly
 * @enum {string}
 */
export type Expander = 'least-waste' | 'most-pods' | 'priority' | 'random';

/**
 * Defines values for ResourceIdentityType.
 * Possible values include: 'SystemAssigned', 'UserAssigned', 'None'
 * @readonly
 * @enum {string}
 */
export type ResourceIdentityType = 'SystemAssigned' | 'UserAssigned' | 'None';

/**
 * Defines values for ManagedClusterSKUName.
 * Possible values include: 'Basic'
 * @readonly
 * @enum {string}
 */
export type ManagedClusterSKUName = 'Basic';

/**
 * Defines values for ManagedClusterSKUTier.
 * Possible values include: 'Paid', 'Free'
 * @readonly
 * @enum {string}
 */
export type ManagedClusterSKUTier = 'Paid' | 'Free';

/**
 * Defines values for ExtendedLocationTypes.
 * Possible values include: 'EdgeZone'
 * @readonly
 * @enum {string}
 */
export type ExtendedLocationTypes = 'EdgeZone';

/**
 * Defines values for PrivateEndpointConnectionProvisioningState.
 * Possible values include: 'Succeeded', 'Creating', 'Deleting', 'Failed'
 * @readonly
 * @enum {string}
 */
export type PrivateEndpointConnectionProvisioningState = 'Succeeded' | 'Creating' | 'Deleting' | 'Failed';

/**
 * Defines values for ConnectionStatus.
 * Possible values include: 'Pending', 'Approved', 'Rejected', 'Disconnected'
 * @readonly
 * @enum {string}
 */
export type ConnectionStatus = 'Pending' | 'Approved' | 'Rejected' | 'Disconnected';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the getOSOptions operation.
 */
export type ManagedClustersGetOSOptionsResponse = OSOptionProfile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OSOptionProfile;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ManagedClustersListResponse = ManagedClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedClusterListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ManagedClustersListByResourceGroupResponse = ManagedClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedClusterListResult;
    };
};

/**
 * Contains response data for the getUpgradeProfile operation.
 */
export type ManagedClustersGetUpgradeProfileResponse = ManagedClusterUpgradeProfile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedClusterUpgradeProfile;
    };
};

/**
 * Contains response data for the getAccessProfile operation.
 */
export type ManagedClustersGetAccessProfileResponse = ManagedClusterAccessProfile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedClusterAccessProfile;
    };
};

/**
 * Contains response data for the listClusterAdminCredentials operation.
 */
export type ManagedClustersListClusterAdminCredentialsResponse = CredentialResults & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CredentialResults;
    };
};

/**
 * Contains response data for the listClusterUserCredentials operation.
 */
export type ManagedClustersListClusterUserCredentialsResponse = CredentialResults & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CredentialResults;
    };
};

/**
 * Contains response data for the listClusterMonitoringUserCredentials operation.
 */
export type ManagedClustersListClusterMonitoringUserCredentialsResponse = CredentialResults & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CredentialResults;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ManagedClustersGetResponse = ManagedCluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedCluster;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ManagedClustersCreateOrUpdateResponse = ManagedCluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedCluster;
    };
};

/**
 * Contains response data for the updateTags operation.
 */
export type ManagedClustersUpdateTagsResponse = ManagedCluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedCluster;
    };
};

/**
 * Contains response data for the runCommand operation.
 */
export type ManagedClustersRunCommandResponse = RunCommandResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RunCommandResult;
    };
};

/**
 * Contains response data for the getCommandResult operation.
 */
export type ManagedClustersGetCommandResultResponse = RunCommandResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RunCommandResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ManagedClustersBeginCreateOrUpdateResponse = ManagedCluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedCluster;
    };
};

/**
 * Contains response data for the beginUpdateTags operation.
 */
export type ManagedClustersBeginUpdateTagsResponse = ManagedCluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedCluster;
    };
};

/**
 * Contains response data for the beginRunCommand operation.
 */
export type ManagedClustersBeginRunCommandResponse = RunCommandResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RunCommandResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ManagedClustersListNextResponse = ManagedClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedClusterListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ManagedClustersListByResourceGroupNextResponse = ManagedClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedClusterListResult;
    };
};

/**
 * Contains response data for the listByManagedCluster operation.
 */
export type MaintenanceConfigurationsListByManagedClusterResponse = MaintenanceConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MaintenanceConfigurationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type MaintenanceConfigurationsGetResponse = MaintenanceConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MaintenanceConfiguration;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type MaintenanceConfigurationsCreateOrUpdateResponse = MaintenanceConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MaintenanceConfiguration;
    };
};

/**
 * Contains response data for the listByManagedClusterNext operation.
 */
export type MaintenanceConfigurationsListByManagedClusterNextResponse = MaintenanceConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MaintenanceConfigurationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AgentPoolsListResponse = AgentPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPoolListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AgentPoolsGetResponse = AgentPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPool;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AgentPoolsCreateOrUpdateResponse = AgentPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPool;
    };
};

/**
 * Contains response data for the getUpgradeProfile operation.
 */
export type AgentPoolsGetUpgradeProfileResponse = AgentPoolUpgradeProfile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPoolUpgradeProfile;
    };
};

/**
 * Contains response data for the getAvailableAgentPoolVersions operation.
 */
export type AgentPoolsGetAvailableAgentPoolVersionsResponse = AgentPoolAvailableVersions & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPoolAvailableVersions;
    };
};

/**
 * Contains response data for the upgradeNodeImageVersion operation.
 */
export type AgentPoolsUpgradeNodeImageVersionResponse = AgentPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPool;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type AgentPoolsBeginCreateOrUpdateResponse = AgentPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPool;
    };
};

/**
 * Contains response data for the beginUpgradeNodeImageVersion operation.
 */
export type AgentPoolsBeginUpgradeNodeImageVersionResponse = AgentPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPool;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AgentPoolsListNextResponse = AgentPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPoolListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateEndpointConnectionListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateEndpointConnection;
    };
};

/**
 * Contains response data for the update operation.
 */
export type PrivateEndpointConnectionsUpdateResponse = PrivateEndpointConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateEndpointConnection;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PrivateLinkResourcesListResponse = PrivateLinkResourcesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateLinkResourcesListResult;
    };
};

/**
 * Contains response data for the pOST operation.
 */
export type ResolvePrivateLinkServiceIdPOSTResponse = PrivateLinkResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateLinkResource;
    };
};
