/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationValue"
            }
          }
        }
      }
    }
  }
};

export const OperationValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationValue",
    modelProperties: {
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "display.operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "display.resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "display.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "display.provider",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      }
    }
  }
};

export const OSOptionProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSOptionProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osOptionPropertyList: {
        serializedName: "properties.osOptionPropertyList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OSOptionProperty"
            }
          }
        }
      }
    }
  }
};

export const OSOptionProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSOptionProperty",
    modelProperties: {
      osType: {
        serializedName: "os-type",
        required: true,
        type: {
          name: "String"
        }
      },
      enableFipsImage: {
        serializedName: "enable-fips-image",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const KubernetesVersionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesVersionListResult",
    modelProperties: {
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KubernetesVersion"
            }
          }
        }
      }
    }
  }
};

export const KubernetesVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesVersion",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      capabilities: {
        serializedName: "capabilities",
        type: {
          name: "Composite",
          className: "KubernetesVersionCapabilities"
        }
      },
      isPreview: {
        serializedName: "isPreview",
        type: {
          name: "Boolean"
        }
      },
      patchVersions: {
        serializedName: "patchVersions",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "KubernetesPatchVersion" }
          }
        }
      }
    }
  }
};

export const KubernetesVersionCapabilities: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesVersionCapabilities",
    modelProperties: {
      supportPlan: {
        serializedName: "supportPlan",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const KubernetesPatchVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesPatchVersion",
    modelProperties: {
      upgrades: {
        serializedName: "upgrades",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedCluster"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterSKU: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterSKU",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: ["SystemAssigned", "UserAssigned", "None"]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ManagedServiceIdentityUserAssignedIdentitiesValue"
            }
          }
        }
      }
    }
  }
};

export const ManagedServiceIdentityUserAssignedIdentitiesValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentityUserAssignedIdentitiesValue",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PowerState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PowerState",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreationData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreationData",
    modelProperties: {
      sourceResourceId: {
        serializedName: "sourceResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterAgentPoolProfileProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterAgentPoolProfileProperties",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      osDiskSizeGB: {
        constraints: {
          InclusiveMaximum: 2048,
          InclusiveMinimum: 0
        },
        serializedName: "osDiskSizeGB",
        type: {
          name: "Number"
        }
      },
      osDiskType: {
        serializedName: "osDiskType",
        type: {
          name: "String"
        }
      },
      kubeletDiskType: {
        serializedName: "kubeletDiskType",
        type: {
          name: "String"
        }
      },
      workloadRuntime: {
        serializedName: "workloadRuntime",
        type: {
          name: "String"
        }
      },
      messageOfTheDay: {
        serializedName: "messageOfTheDay",
        type: {
          name: "String"
        }
      },
      vnetSubnetID: {
        serializedName: "vnetSubnetID",
        type: {
          name: "String"
        }
      },
      podSubnetID: {
        serializedName: "podSubnetID",
        type: {
          name: "String"
        }
      },
      maxPods: {
        serializedName: "maxPods",
        type: {
          name: "Number"
        }
      },
      osType: {
        defaultValue: "Linux",
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      osSKU: {
        serializedName: "osSKU",
        type: {
          name: "String"
        }
      },
      maxCount: {
        serializedName: "maxCount",
        type: {
          name: "Number"
        }
      },
      minCount: {
        serializedName: "minCount",
        type: {
          name: "Number"
        }
      },
      enableAutoScaling: {
        serializedName: "enableAutoScaling",
        type: {
          name: "Boolean"
        }
      },
      scaleDownMode: {
        serializedName: "scaleDownMode",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      orchestratorVersion: {
        serializedName: "orchestratorVersion",
        type: {
          name: "String"
        }
      },
      currentOrchestratorVersion: {
        serializedName: "currentOrchestratorVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nodeImageVersion: {
        serializedName: "nodeImageVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      upgradeSettings: {
        serializedName: "upgradeSettings",
        type: {
          name: "Composite",
          className: "AgentPoolUpgradeSettings"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      powerState: {
        serializedName: "powerState",
        type: {
          name: "Composite",
          className: "PowerState"
        }
      },
      availabilityZones: {
        serializedName: "availabilityZones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      enableNodePublicIP: {
        serializedName: "enableNodePublicIP",
        type: {
          name: "Boolean"
        }
      },
      enableCustomCATrust: {
        serializedName: "enableCustomCATrust",
        type: {
          name: "Boolean"
        }
      },
      nodePublicIPPrefixID: {
        serializedName: "nodePublicIPPrefixID",
        type: {
          name: "String"
        }
      },
      scaleSetPriority: {
        defaultValue: "Regular",
        serializedName: "scaleSetPriority",
        type: {
          name: "String"
        }
      },
      scaleSetEvictionPolicy: {
        defaultValue: "Delete",
        serializedName: "scaleSetEvictionPolicy",
        type: {
          name: "String"
        }
      },
      spotMaxPrice: {
        defaultValue: -1,
        serializedName: "spotMaxPrice",
        type: {
          name: "Number"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      nodeLabels: {
        serializedName: "nodeLabels",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      nodeTaints: {
        serializedName: "nodeTaints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      proximityPlacementGroupID: {
        serializedName: "proximityPlacementGroupID",
        type: {
          name: "String"
        }
      },
      kubeletConfig: {
        serializedName: "kubeletConfig",
        type: {
          name: "Composite",
          className: "KubeletConfig"
        }
      },
      linuxOSConfig: {
        serializedName: "linuxOSConfig",
        type: {
          name: "Composite",
          className: "LinuxOSConfig"
        }
      },
      enableEncryptionAtHost: {
        serializedName: "enableEncryptionAtHost",
        type: {
          name: "Boolean"
        }
      },
      enableUltraSSD: {
        serializedName: "enableUltraSSD",
        type: {
          name: "Boolean"
        }
      },
      enableFips: {
        serializedName: "enableFIPS",
        type: {
          name: "Boolean"
        }
      },
      gpuInstanceProfile: {
        serializedName: "gpuInstanceProfile",
        type: {
          name: "String"
        }
      },
      creationData: {
        serializedName: "creationData",
        type: {
          name: "Composite",
          className: "CreationData"
        }
      },
      capacityReservationGroupID: {
        serializedName: "capacityReservationGroupID",
        type: {
          name: "String"
        }
      },
      hostGroupID: {
        serializedName: "hostGroupID",
        type: {
          name: "String"
        }
      },
      windowsProfile: {
        serializedName: "windowsProfile",
        type: {
          name: "Composite",
          className: "AgentPoolWindowsProfile"
        }
      },
      networkProfile: {
        serializedName: "networkProfile",
        type: {
          name: "Composite",
          className: "AgentPoolNetworkProfile"
        }
      }
    }
  }
};

export const AgentPoolUpgradeSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolUpgradeSettings",
    modelProperties: {
      maxSurge: {
        serializedName: "maxSurge",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubeletConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubeletConfig",
    modelProperties: {
      cpuManagerPolicy: {
        serializedName: "cpuManagerPolicy",
        type: {
          name: "String"
        }
      },
      cpuCfsQuota: {
        serializedName: "cpuCfsQuota",
        type: {
          name: "Boolean"
        }
      },
      cpuCfsQuotaPeriod: {
        serializedName: "cpuCfsQuotaPeriod",
        type: {
          name: "String"
        }
      },
      imageGcHighThreshold: {
        serializedName: "imageGcHighThreshold",
        type: {
          name: "Number"
        }
      },
      imageGcLowThreshold: {
        serializedName: "imageGcLowThreshold",
        type: {
          name: "Number"
        }
      },
      topologyManagerPolicy: {
        serializedName: "topologyManagerPolicy",
        type: {
          name: "String"
        }
      },
      allowedUnsafeSysctls: {
        serializedName: "allowedUnsafeSysctls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      failSwapOn: {
        serializedName: "failSwapOn",
        type: {
          name: "Boolean"
        }
      },
      containerLogMaxSizeMB: {
        serializedName: "containerLogMaxSizeMB",
        type: {
          name: "Number"
        }
      },
      containerLogMaxFiles: {
        constraints: {
          InclusiveMinimum: 2
        },
        serializedName: "containerLogMaxFiles",
        type: {
          name: "Number"
        }
      },
      podMaxPids: {
        serializedName: "podMaxPids",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LinuxOSConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxOSConfig",
    modelProperties: {
      sysctls: {
        serializedName: "sysctls",
        type: {
          name: "Composite",
          className: "SysctlConfig"
        }
      },
      transparentHugePageEnabled: {
        serializedName: "transparentHugePageEnabled",
        type: {
          name: "String"
        }
      },
      transparentHugePageDefrag: {
        serializedName: "transparentHugePageDefrag",
        type: {
          name: "String"
        }
      },
      swapFileSizeMB: {
        serializedName: "swapFileSizeMB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SysctlConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SysctlConfig",
    modelProperties: {
      netCoreSomaxconn: {
        serializedName: "netCoreSomaxconn",
        type: {
          name: "Number"
        }
      },
      netCoreNetdevMaxBacklog: {
        serializedName: "netCoreNetdevMaxBacklog",
        type: {
          name: "Number"
        }
      },
      netCoreRmemDefault: {
        serializedName: "netCoreRmemDefault",
        type: {
          name: "Number"
        }
      },
      netCoreRmemMax: {
        serializedName: "netCoreRmemMax",
        type: {
          name: "Number"
        }
      },
      netCoreWmemDefault: {
        serializedName: "netCoreWmemDefault",
        type: {
          name: "Number"
        }
      },
      netCoreWmemMax: {
        serializedName: "netCoreWmemMax",
        type: {
          name: "Number"
        }
      },
      netCoreOptmemMax: {
        serializedName: "netCoreOptmemMax",
        type: {
          name: "Number"
        }
      },
      netIpv4TcpMaxSynBacklog: {
        serializedName: "netIpv4TcpMaxSynBacklog",
        type: {
          name: "Number"
        }
      },
      netIpv4TcpMaxTwBuckets: {
        serializedName: "netIpv4TcpMaxTwBuckets",
        type: {
          name: "Number"
        }
      },
      netIpv4TcpFinTimeout: {
        serializedName: "netIpv4TcpFinTimeout",
        type: {
          name: "Number"
        }
      },
      netIpv4TcpKeepaliveTime: {
        serializedName: "netIpv4TcpKeepaliveTime",
        type: {
          name: "Number"
        }
      },
      netIpv4TcpKeepaliveProbes: {
        serializedName: "netIpv4TcpKeepaliveProbes",
        type: {
          name: "Number"
        }
      },
      netIpv4TcpkeepaliveIntvl: {
        serializedName: "netIpv4TcpkeepaliveIntvl",
        type: {
          name: "Number"
        }
      },
      netIpv4TcpTwReuse: {
        serializedName: "netIpv4TcpTwReuse",
        type: {
          name: "Boolean"
        }
      },
      netIpv4IpLocalPortRange: {
        serializedName: "netIpv4IpLocalPortRange",
        type: {
          name: "String"
        }
      },
      netIpv4NeighDefaultGcThresh1: {
        serializedName: "netIpv4NeighDefaultGcThresh1",
        type: {
          name: "Number"
        }
      },
      netIpv4NeighDefaultGcThresh2: {
        serializedName: "netIpv4NeighDefaultGcThresh2",
        type: {
          name: "Number"
        }
      },
      netIpv4NeighDefaultGcThresh3: {
        serializedName: "netIpv4NeighDefaultGcThresh3",
        type: {
          name: "Number"
        }
      },
      netNetfilterNfConntrackMax: {
        serializedName: "netNetfilterNfConntrackMax",
        type: {
          name: "Number"
        }
      },
      netNetfilterNfConntrackBuckets: {
        serializedName: "netNetfilterNfConntrackBuckets",
        type: {
          name: "Number"
        }
      },
      fsInotifyMaxUserWatches: {
        serializedName: "fsInotifyMaxUserWatches",
        type: {
          name: "Number"
        }
      },
      fsFileMax: {
        serializedName: "fsFileMax",
        type: {
          name: "Number"
        }
      },
      fsAioMaxNr: {
        serializedName: "fsAioMaxNr",
        type: {
          name: "Number"
        }
      },
      fsNrOpen: {
        serializedName: "fsNrOpen",
        type: {
          name: "Number"
        }
      },
      kernelThreadsMax: {
        serializedName: "kernelThreadsMax",
        type: {
          name: "Number"
        }
      },
      vmMaxMapCount: {
        serializedName: "vmMaxMapCount",
        type: {
          name: "Number"
        }
      },
      vmSwappiness: {
        serializedName: "vmSwappiness",
        type: {
          name: "Number"
        }
      },
      vmVfsCachePressure: {
        serializedName: "vmVfsCachePressure",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AgentPoolWindowsProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolWindowsProfile",
    modelProperties: {
      disableOutboundNat: {
        serializedName: "disableOutboundNat",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AgentPoolNetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolNetworkProfile",
    modelProperties: {
      nodePublicIPTags: {
        serializedName: "nodePublicIPTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IPTag"
            }
          }
        }
      },
      allowedHostPorts: {
        serializedName: "allowedHostPorts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PortRange"
            }
          }
        }
      },
      applicationSecurityGroups: {
        serializedName: "applicationSecurityGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IPTag: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IPTag",
    modelProperties: {
      ipTagType: {
        serializedName: "ipTagType",
        type: {
          name: "String"
        }
      },
      tag: {
        serializedName: "tag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PortRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PortRange",
    modelProperties: {
      portStart: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "portStart",
        type: {
          name: "Number"
        }
      },
      portEnd: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "portEnd",
        type: {
          name: "Number"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerServiceLinuxProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceLinuxProfile",
    modelProperties: {
      adminUsername: {
        constraints: {
          Pattern: new RegExp("^[A-Za-z][-A-Za-z0-9_]*$")
        },
        serializedName: "adminUsername",
        required: true,
        type: {
          name: "String"
        }
      },
      ssh: {
        serializedName: "ssh",
        type: {
          name: "Composite",
          className: "ContainerServiceSshConfiguration"
        }
      }
    }
  }
};

export const ContainerServiceSshConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceSshConfiguration",
    modelProperties: {
      publicKeys: {
        serializedName: "publicKeys",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerServiceSshPublicKey"
            }
          }
        }
      }
    }
  }
};

export const ContainerServiceSshPublicKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceSshPublicKey",
    modelProperties: {
      keyData: {
        serializedName: "keyData",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterWindowsProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterWindowsProfile",
    modelProperties: {
      adminUsername: {
        serializedName: "adminUsername",
        required: true,
        type: {
          name: "String"
        }
      },
      adminPassword: {
        serializedName: "adminPassword",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      enableCSIProxy: {
        serializedName: "enableCSIProxy",
        type: {
          name: "Boolean"
        }
      },
      gmsaProfile: {
        serializedName: "gmsaProfile",
        type: {
          name: "Composite",
          className: "WindowsGmsaProfile"
        }
      }
    }
  }
};

export const WindowsGmsaProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WindowsGmsaProfile",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      dnsServer: {
        serializedName: "dnsServer",
        type: {
          name: "String"
        }
      },
      rootDomainName: {
        serializedName: "rootDomainName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterServicePrincipalProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterServicePrincipalProfile",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        required: true,
        type: {
          name: "String"
        }
      },
      secret: {
        serializedName: "secret",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterAddonProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterAddonProfile",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      config: {
        serializedName: "config",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedClusterAddonProfileIdentity"
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "objectId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterPodIdentityProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterPodIdentityProfile",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      allowNetworkPluginKubenet: {
        serializedName: "allowNetworkPluginKubenet",
        type: {
          name: "Boolean"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedClusterPodIdentity"
            }
          }
        }
      },
      userAssignedIdentityExceptions: {
        serializedName: "userAssignedIdentityExceptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedClusterPodIdentityException"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterPodIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterPodIdentity",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        required: true,
        type: {
          name: "String"
        }
      },
      bindingSelector: {
        serializedName: "bindingSelector",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedIdentity"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningInfo: {
        serializedName: "provisioningInfo",
        type: {
          name: "Composite",
          className: "ManagedClusterPodIdentityProvisioningInfo"
        }
      }
    }
  }
};

export const ManagedClusterPodIdentityProvisioningInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterPodIdentityProvisioningInfo",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ManagedClusterPodIdentityProvisioningError"
        }
      }
    }
  }
};

export const ManagedClusterPodIdentityProvisioningError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterPodIdentityProvisioningError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ManagedClusterPodIdentityProvisioningErrorBody"
        }
      }
    }
  }
};

export const ManagedClusterPodIdentityProvisioningErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterPodIdentityProvisioningErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedClusterPodIdentityProvisioningErrorBody"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterPodIdentityException: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterPodIdentityException",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        required: true,
        type: {
          name: "String"
        }
      },
      podLabels: {
        serializedName: "podLabels",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ManagedClusterOidcIssuerProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterOidcIssuerProfile",
    modelProperties: {
      issuerURL: {
        serializedName: "issuerURL",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ManagedClusterNodeResourceGroupProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterNodeResourceGroupProfile",
    modelProperties: {
      restrictionLevel: {
        serializedName: "restrictionLevel",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerServiceNetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceNetworkProfile",
    modelProperties: {
      networkPlugin: {
        defaultValue: "kubenet",
        serializedName: "networkPlugin",
        type: {
          name: "String"
        }
      },
      networkPluginMode: {
        serializedName: "networkPluginMode",
        type: {
          name: "String"
        }
      },
      networkPolicy: {
        serializedName: "networkPolicy",
        type: {
          name: "String"
        }
      },
      networkMode: {
        serializedName: "networkMode",
        type: {
          name: "String"
        }
      },
      networkDataplane: {
        serializedName: "networkDataplane",
        type: {
          name: "String"
        }
      },
      podCidr: {
        defaultValue: "10.244.0.0/16",
        constraints: {
          Pattern: new RegExp(
            "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
          )
        },
        serializedName: "podCidr",
        type: {
          name: "String"
        }
      },
      serviceCidr: {
        defaultValue: "10.0.0.0/16",
        constraints: {
          Pattern: new RegExp(
            "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
          )
        },
        serializedName: "serviceCidr",
        type: {
          name: "String"
        }
      },
      dnsServiceIP: {
        defaultValue: "10.0.0.10",
        constraints: {
          Pattern: new RegExp(
            "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
          )
        },
        serializedName: "dnsServiceIP",
        type: {
          name: "String"
        }
      },
      outboundType: {
        defaultValue: "loadBalancer",
        serializedName: "outboundType",
        type: {
          name: "String"
        }
      },
      loadBalancerSku: {
        serializedName: "loadBalancerSku",
        type: {
          name: "String"
        }
      },
      loadBalancerProfile: {
        serializedName: "loadBalancerProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterLoadBalancerProfile"
        }
      },
      natGatewayProfile: {
        serializedName: "natGatewayProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterNATGatewayProfile"
        }
      },
      podCidrs: {
        serializedName: "podCidrs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      serviceCidrs: {
        serializedName: "serviceCidrs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ipFamilies: {
        serializedName: "ipFamilies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      kubeProxyConfig: {
        serializedName: "kubeProxyConfig",
        type: {
          name: "Composite",
          className: "ContainerServiceNetworkProfileKubeProxyConfig"
        }
      }
    }
  }
};

export const ManagedClusterLoadBalancerProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterLoadBalancerProfile",
    modelProperties: {
      managedOutboundIPs: {
        serializedName: "managedOutboundIPs",
        type: {
          name: "Composite",
          className: "ManagedClusterLoadBalancerProfileManagedOutboundIPs"
        }
      },
      outboundIPPrefixes: {
        serializedName: "outboundIPPrefixes",
        type: {
          name: "Composite",
          className: "ManagedClusterLoadBalancerProfileOutboundIPPrefixes"
        }
      },
      outboundIPs: {
        serializedName: "outboundIPs",
        type: {
          name: "Composite",
          className: "ManagedClusterLoadBalancerProfileOutboundIPs"
        }
      },
      effectiveOutboundIPs: {
        serializedName: "effectiveOutboundIPs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      allocatedOutboundPorts: {
        defaultValue: 0,
        constraints: {
          InclusiveMaximum: 64000,
          InclusiveMinimum: 0
        },
        serializedName: "allocatedOutboundPorts",
        type: {
          name: "Number"
        }
      },
      idleTimeoutInMinutes: {
        defaultValue: 30,
        constraints: {
          InclusiveMaximum: 120,
          InclusiveMinimum: 4
        },
        serializedName: "idleTimeoutInMinutes",
        type: {
          name: "Number"
        }
      },
      enableMultipleStandardLoadBalancers: {
        serializedName: "enableMultipleStandardLoadBalancers",
        type: {
          name: "Boolean"
        }
      },
      backendPoolType: {
        defaultValue: "NodeIPConfiguration",
        serializedName: "backendPoolType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterLoadBalancerProfileManagedOutboundIPs: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterLoadBalancerProfileManagedOutboundIPs",
    modelProperties: {
      count: {
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 1
        },
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      countIPv6: {
        defaultValue: 0,
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "countIPv6",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedClusterLoadBalancerProfileOutboundIPPrefixes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterLoadBalancerProfileOutboundIPPrefixes",
    modelProperties: {
      publicIPPrefixes: {
        serializedName: "publicIPPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      }
    }
  }
};

export const ResourceReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceReference",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterLoadBalancerProfileOutboundIPs: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterLoadBalancerProfileOutboundIPs",
    modelProperties: {
      publicIPs: {
        serializedName: "publicIPs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterNATGatewayProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterNATGatewayProfile",
    modelProperties: {
      managedOutboundIPProfile: {
        serializedName: "managedOutboundIPProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterManagedOutboundIPProfile"
        }
      },
      effectiveOutboundIPs: {
        serializedName: "effectiveOutboundIPs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      idleTimeoutInMinutes: {
        defaultValue: 4,
        constraints: {
          InclusiveMaximum: 120,
          InclusiveMinimum: 4
        },
        serializedName: "idleTimeoutInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedClusterManagedOutboundIPProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterManagedOutboundIPProfile",
    modelProperties: {
      count: {
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 16,
          InclusiveMinimum: 1
        },
        serializedName: "count",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContainerServiceNetworkProfileKubeProxyConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceNetworkProfileKubeProxyConfig",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      ipvsConfig: {
        serializedName: "ipvsConfig",
        type: {
          name: "Composite",
          className: "ContainerServiceNetworkProfileKubeProxyConfigIpvsConfig"
        }
      }
    }
  }
};

export const ContainerServiceNetworkProfileKubeProxyConfigIpvsConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerServiceNetworkProfileKubeProxyConfigIpvsConfig",
    modelProperties: {
      scheduler: {
        serializedName: "scheduler",
        type: {
          name: "String"
        }
      },
      tcpTimeoutSeconds: {
        serializedName: "tcpTimeoutSeconds",
        type: {
          name: "Number"
        }
      },
      tcpFinTimeoutSeconds: {
        serializedName: "tcpFinTimeoutSeconds",
        type: {
          name: "Number"
        }
      },
      udpTimeoutSeconds: {
        serializedName: "udpTimeoutSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedClusterAADProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterAADProfile",
    modelProperties: {
      managed: {
        serializedName: "managed",
        type: {
          name: "Boolean"
        }
      },
      enableAzureRbac: {
        serializedName: "enableAzureRBAC",
        type: {
          name: "Boolean"
        }
      },
      adminGroupObjectIDs: {
        serializedName: "adminGroupObjectIDs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      clientAppID: {
        serializedName: "clientAppID",
        type: {
          name: "String"
        }
      },
      serverAppID: {
        serializedName: "serverAppID",
        type: {
          name: "String"
        }
      },
      serverAppSecret: {
        serializedName: "serverAppSecret",
        type: {
          name: "String"
        }
      },
      tenantID: {
        serializedName: "tenantID",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterAutoUpgradeProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterAutoUpgradeProfile",
    modelProperties: {
      upgradeChannel: {
        serializedName: "upgradeChannel",
        type: {
          name: "String"
        }
      },
      nodeOSUpgradeChannel: {
        serializedName: "nodeOSUpgradeChannel",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterUpgradeSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterUpgradeSettings",
    modelProperties: {
      overrideSettings: {
        serializedName: "overrideSettings",
        type: {
          name: "Composite",
          className: "UpgradeOverrideSettings"
        }
      }
    }
  }
};

export const UpgradeOverrideSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpgradeOverrideSettings",
    modelProperties: {
      controlPlaneOverrides: {
        serializedName: "controlPlaneOverrides",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      until: {
        serializedName: "until",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ManagedClusterPropertiesAutoScalerProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterPropertiesAutoScalerProfile",
    modelProperties: {
      balanceSimilarNodeGroups: {
        serializedName: "balance-similar-node-groups",
        type: {
          name: "String"
        }
      },
      expander: {
        serializedName: "expander",
        type: {
          name: "String"
        }
      },
      maxEmptyBulkDelete: {
        serializedName: "max-empty-bulk-delete",
        type: {
          name: "String"
        }
      },
      maxGracefulTerminationSec: {
        serializedName: "max-graceful-termination-sec",
        type: {
          name: "String"
        }
      },
      maxNodeProvisionTime: {
        serializedName: "max-node-provision-time",
        type: {
          name: "String"
        }
      },
      maxTotalUnreadyPercentage: {
        serializedName: "max-total-unready-percentage",
        type: {
          name: "String"
        }
      },
      newPodScaleUpDelay: {
        serializedName: "new-pod-scale-up-delay",
        type: {
          name: "String"
        }
      },
      okTotalUnreadyCount: {
        serializedName: "ok-total-unready-count",
        type: {
          name: "String"
        }
      },
      scanInterval: {
        serializedName: "scan-interval",
        type: {
          name: "String"
        }
      },
      scaleDownDelayAfterAdd: {
        serializedName: "scale-down-delay-after-add",
        type: {
          name: "String"
        }
      },
      scaleDownDelayAfterDelete: {
        serializedName: "scale-down-delay-after-delete",
        type: {
          name: "String"
        }
      },
      scaleDownDelayAfterFailure: {
        serializedName: "scale-down-delay-after-failure",
        type: {
          name: "String"
        }
      },
      scaleDownUnneededTime: {
        serializedName: "scale-down-unneeded-time",
        type: {
          name: "String"
        }
      },
      scaleDownUnreadyTime: {
        serializedName: "scale-down-unready-time",
        type: {
          name: "String"
        }
      },
      scaleDownUtilizationThreshold: {
        serializedName: "scale-down-utilization-threshold",
        type: {
          name: "String"
        }
      },
      skipNodesWithLocalStorage: {
        serializedName: "skip-nodes-with-local-storage",
        type: {
          name: "String"
        }
      },
      skipNodesWithSystemPods: {
        serializedName: "skip-nodes-with-system-pods",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterAPIServerAccessProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterAPIServerAccessProfile",
    modelProperties: {
      authorizedIPRanges: {
        serializedName: "authorizedIPRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      enablePrivateCluster: {
        serializedName: "enablePrivateCluster",
        type: {
          name: "Boolean"
        }
      },
      privateDNSZone: {
        serializedName: "privateDNSZone",
        type: {
          name: "String"
        }
      },
      enablePrivateClusterPublicFqdn: {
        serializedName: "enablePrivateClusterPublicFQDN",
        type: {
          name: "Boolean"
        }
      },
      disableRunCommand: {
        serializedName: "disableRunCommand",
        type: {
          name: "Boolean"
        }
      },
      enableVnetIntegration: {
        serializedName: "enableVnetIntegration",
        type: {
          name: "Boolean"
        }
      },
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      privateLinkServiceID: {
        serializedName: "privateLinkServiceID",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterHttpProxyConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterHttpProxyConfig",
    modelProperties: {
      httpProxy: {
        serializedName: "httpProxy",
        type: {
          name: "String"
        }
      },
      httpsProxy: {
        serializedName: "httpsProxy",
        type: {
          name: "String"
        }
      },
      noProxy: {
        serializedName: "noProxy",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      effectiveNoProxy: {
        serializedName: "effectiveNoProxy",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      trustedCa: {
        serializedName: "trustedCa",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterSecurityProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterSecurityProfile",
    modelProperties: {
      defender: {
        serializedName: "defender",
        type: {
          name: "Composite",
          className: "ManagedClusterSecurityProfileDefender"
        }
      },
      azureKeyVaultKms: {
        serializedName: "azureKeyVaultKms",
        type: {
          name: "Composite",
          className: "AzureKeyVaultKms"
        }
      },
      workloadIdentity: {
        serializedName: "workloadIdentity",
        type: {
          name: "Composite",
          className: "ManagedClusterSecurityProfileWorkloadIdentity"
        }
      },
      imageCleaner: {
        serializedName: "imageCleaner",
        type: {
          name: "Composite",
          className: "ManagedClusterSecurityProfileImageCleaner"
        }
      },
      nodeRestriction: {
        serializedName: "nodeRestriction",
        type: {
          name: "Composite",
          className: "ManagedClusterSecurityProfileNodeRestriction"
        }
      },
      customCATrustCertificates: {
        constraints: {
          MaxItems: 10
        },
        serializedName: "customCATrustCertificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "ByteArray"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterSecurityProfileDefender: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterSecurityProfileDefender",
    modelProperties: {
      logAnalyticsWorkspaceResourceId: {
        serializedName: "logAnalyticsWorkspaceResourceId",
        type: {
          name: "String"
        }
      },
      securityMonitoring: {
        serializedName: "securityMonitoring",
        type: {
          name: "Composite",
          className: "ManagedClusterSecurityProfileDefenderSecurityMonitoring"
        }
      }
    }
  }
};

export const ManagedClusterSecurityProfileDefenderSecurityMonitoring: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterSecurityProfileDefenderSecurityMonitoring",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AzureKeyVaultKms: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureKeyVaultKms",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      keyId: {
        serializedName: "keyId",
        type: {
          name: "String"
        }
      },
      keyVaultNetworkAccess: {
        defaultValue: "Public",
        serializedName: "keyVaultNetworkAccess",
        type: {
          name: "String"
        }
      },
      keyVaultResourceId: {
        serializedName: "keyVaultResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterSecurityProfileWorkloadIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterSecurityProfileWorkloadIdentity",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ManagedClusterSecurityProfileImageCleaner: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterSecurityProfileImageCleaner",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      intervalHours: {
        serializedName: "intervalHours",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedClusterSecurityProfileNodeRestriction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterSecurityProfileNodeRestriction",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ManagedClusterStorageProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterStorageProfile",
    modelProperties: {
      diskCSIDriver: {
        serializedName: "diskCSIDriver",
        type: {
          name: "Composite",
          className: "ManagedClusterStorageProfileDiskCSIDriver"
        }
      },
      fileCSIDriver: {
        serializedName: "fileCSIDriver",
        type: {
          name: "Composite",
          className: "ManagedClusterStorageProfileFileCSIDriver"
        }
      },
      snapshotController: {
        serializedName: "snapshotController",
        type: {
          name: "Composite",
          className: "ManagedClusterStorageProfileSnapshotController"
        }
      },
      blobCSIDriver: {
        serializedName: "blobCSIDriver",
        type: {
          name: "Composite",
          className: "ManagedClusterStorageProfileBlobCSIDriver"
        }
      }
    }
  }
};

export const ManagedClusterStorageProfileDiskCSIDriver: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterStorageProfileDiskCSIDriver",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterStorageProfileFileCSIDriver: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterStorageProfileFileCSIDriver",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ManagedClusterStorageProfileSnapshotController: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterStorageProfileSnapshotController",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ManagedClusterStorageProfileBlobCSIDriver: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterStorageProfileBlobCSIDriver",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ManagedClusterIngressProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterIngressProfile",
    modelProperties: {
      webAppRouting: {
        serializedName: "webAppRouting",
        type: {
          name: "Composite",
          className: "ManagedClusterIngressProfileWebAppRouting"
        }
      }
    }
  }
};

export const ManagedClusterIngressProfileWebAppRouting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterIngressProfileWebAppRouting",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      dnsZoneResourceId: {
        serializedName: "dnsZoneResourceId",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedIdentity"
        }
      }
    }
  }
};

export const ManagedClusterWorkloadAutoScalerProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterWorkloadAutoScalerProfile",
    modelProperties: {
      keda: {
        serializedName: "keda",
        type: {
          name: "Composite",
          className: "ManagedClusterWorkloadAutoScalerProfileKeda"
        }
      },
      verticalPodAutoscaler: {
        serializedName: "verticalPodAutoscaler",
        type: {
          name: "Composite",
          className:
            "ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler"
        }
      }
    }
  }
};

export const ManagedClusterWorkloadAutoScalerProfileKeda: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterWorkloadAutoScalerProfileKeda",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterWorkloadAutoScalerProfileVerticalPodAutoscaler",
    modelProperties: {
      enabled: {
        defaultValue: false,
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      controlledValues: {
        defaultValue: "RequestsAndLimits",
        serializedName: "controlledValues",
        required: true,
        type: {
          name: "String"
        }
      },
      updateMode: {
        defaultValue: "Off",
        serializedName: "updateMode",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterAzureMonitorProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterAzureMonitorProfile",
    modelProperties: {
      metrics: {
        serializedName: "metrics",
        type: {
          name: "Composite",
          className: "ManagedClusterAzureMonitorProfileMetrics"
        }
      }
    }
  }
};

export const ManagedClusterAzureMonitorProfileMetrics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterAzureMonitorProfileMetrics",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      kubeStateMetrics: {
        serializedName: "kubeStateMetrics",
        type: {
          name: "Composite",
          className: "ManagedClusterAzureMonitorProfileKubeStateMetrics"
        }
      }
    }
  }
};

export const ManagedClusterAzureMonitorProfileKubeStateMetrics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterAzureMonitorProfileKubeStateMetrics",
    modelProperties: {
      metricLabelsAllowlist: {
        serializedName: "metricLabelsAllowlist",
        type: {
          name: "String"
        }
      },
      metricAnnotationsAllowList: {
        serializedName: "metricAnnotationsAllowList",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GuardrailsProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GuardrailsProfile",
    modelProperties: {
      systemExcludedNamespaces: {
        serializedName: "systemExcludedNamespaces",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      version: {
        serializedName: "version",
        required: true,
        type: {
          name: "String"
        }
      },
      level: {
        serializedName: "level",
        required: true,
        type: {
          name: "String"
        }
      },
      excludedNamespaces: {
        serializedName: "excludedNamespaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ServiceMeshProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceMeshProfile",
    modelProperties: {
      mode: {
        serializedName: "mode",
        required: true,
        type: {
          name: "String"
        }
      },
      istio: {
        serializedName: "istio",
        type: {
          name: "Composite",
          className: "IstioServiceMesh"
        }
      }
    }
  }
};

export const IstioServiceMesh: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IstioServiceMesh",
    modelProperties: {
      components: {
        serializedName: "components",
        type: {
          name: "Composite",
          className: "IstioComponents"
        }
      }
    }
  }
};

export const IstioComponents: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IstioComponents",
    modelProperties: {
      ingressGateways: {
        serializedName: "ingressGateways",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IstioIngressGateway"
            }
          }
        }
      }
    }
  }
};

export const IstioIngressGateway: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IstioIngressGateway",
    modelProperties: {
      mode: {
        serializedName: "mode",
        required: true,
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ManagedClusterUpgradeProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterUpgradeProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      controlPlaneProfile: {
        serializedName: "properties.controlPlaneProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterPoolUpgradeProfile"
        }
      },
      agentPoolProfiles: {
        serializedName: "properties.agentPoolProfiles",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedClusterPoolUpgradeProfile"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterPoolUpgradeProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterPoolUpgradeProfile",
    modelProperties: {
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      osType: {
        defaultValue: "Linux",
        serializedName: "osType",
        required: true,
        type: {
          name: "String"
        }
      },
      upgrades: {
        serializedName: "upgrades",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedClusterPoolUpgradeProfileUpgradesItem"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterPoolUpgradeProfileUpgradesItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterPoolUpgradeProfileUpgradesItem",
    modelProperties: {
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        type: {
          name: "String"
        }
      },
      isPreview: {
        serializedName: "isPreview",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CredentialResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CredentialResults",
    modelProperties: {
      kubeconfigs: {
        serializedName: "kubeconfigs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CredentialResult"
            }
          }
        }
      }
    }
  }
};

export const CredentialResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CredentialResult",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const TagsObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const MaintenanceConfigurationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaintenanceConfiguration"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimeInWeek: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimeInWeek",
    modelProperties: {
      day: {
        serializedName: "day",
        type: {
          name: "String"
        }
      },
      hourSlots: {
        serializedName: "hourSlots",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              InclusiveMaximum: 23,
              InclusiveMinimum: 0
            },
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const TimeSpan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimeSpan",
    modelProperties: {
      start: {
        serializedName: "start",
        type: {
          name: "DateTime"
        }
      },
      end: {
        serializedName: "end",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MaintenanceWindow: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceWindow",
    modelProperties: {
      schedule: {
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "Schedule"
        }
      },
      durationHours: {
        defaultValue: 24,
        constraints: {
          InclusiveMaximum: 24,
          InclusiveMinimum: 4
        },
        serializedName: "durationHours",
        required: true,
        type: {
          name: "Number"
        }
      },
      utcOffset: {
        constraints: {
          Pattern: new RegExp("^(-|\\+)[0-9]{2}:[0-9]{2}$")
        },
        serializedName: "utcOffset",
        type: {
          name: "String"
        }
      },
      startDate: {
        serializedName: "startDate",
        type: {
          name: "Date"
        }
      },
      startTime: {
        constraints: {
          Pattern: new RegExp("^\\d{2}:\\d{2}$")
        },
        serializedName: "startTime",
        required: true,
        type: {
          name: "String"
        }
      },
      notAllowedDates: {
        serializedName: "notAllowedDates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DateSpan"
            }
          }
        }
      }
    }
  }
};

export const Schedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Schedule",
    modelProperties: {
      daily: {
        serializedName: "daily",
        type: {
          name: "Composite",
          className: "DailySchedule"
        }
      },
      weekly: {
        serializedName: "weekly",
        type: {
          name: "Composite",
          className: "WeeklySchedule"
        }
      },
      absoluteMonthly: {
        serializedName: "absoluteMonthly",
        type: {
          name: "Composite",
          className: "AbsoluteMonthlySchedule"
        }
      },
      relativeMonthly: {
        serializedName: "relativeMonthly",
        type: {
          name: "Composite",
          className: "RelativeMonthlySchedule"
        }
      }
    }
  }
};

export const DailySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DailySchedule",
    modelProperties: {
      intervalDays: {
        constraints: {
          InclusiveMaximum: 7,
          InclusiveMinimum: 1
        },
        serializedName: "intervalDays",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const WeeklySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WeeklySchedule",
    modelProperties: {
      intervalWeeks: {
        constraints: {
          InclusiveMaximum: 4,
          InclusiveMinimum: 1
        },
        serializedName: "intervalWeeks",
        required: true,
        type: {
          name: "Number"
        }
      },
      dayOfWeek: {
        serializedName: "dayOfWeek",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AbsoluteMonthlySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AbsoluteMonthlySchedule",
    modelProperties: {
      intervalMonths: {
        constraints: {
          InclusiveMaximum: 6,
          InclusiveMinimum: 1
        },
        serializedName: "intervalMonths",
        required: true,
        type: {
          name: "Number"
        }
      },
      dayOfMonth: {
        constraints: {
          InclusiveMaximum: 31,
          InclusiveMinimum: 1
        },
        serializedName: "dayOfMonth",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RelativeMonthlySchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RelativeMonthlySchedule",
    modelProperties: {
      intervalMonths: {
        constraints: {
          InclusiveMaximum: 6,
          InclusiveMinimum: 1
        },
        serializedName: "intervalMonths",
        required: true,
        type: {
          name: "Number"
        }
      },
      weekIndex: {
        serializedName: "weekIndex",
        required: true,
        type: {
          name: "String"
        }
      },
      dayOfWeek: {
        serializedName: "dayOfWeek",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DateSpan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DateSpan",
    modelProperties: {
      start: {
        serializedName: "start",
        required: true,
        type: {
          name: "Date"
        }
      },
      end: {
        serializedName: "end",
        required: true,
        type: {
          name: "Date"
        }
      }
    }
  }
};

export const SubResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AgentPool"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolUpgradeProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolUpgradeProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kubernetesVersion: {
        serializedName: "properties.kubernetesVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      osType: {
        defaultValue: "Linux",
        serializedName: "properties.osType",
        required: true,
        type: {
          name: "String"
        }
      },
      upgrades: {
        serializedName: "properties.upgrades",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AgentPoolUpgradeProfilePropertiesUpgradesItem"
            }
          }
        }
      },
      latestNodeImageVersion: {
        serializedName: "properties.latestNodeImageVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolUpgradeProfilePropertiesUpgradesItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolUpgradeProfilePropertiesUpgradesItem",
    modelProperties: {
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        type: {
          name: "String"
        }
      },
      isPreview: {
        serializedName: "isPreview",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AgentPoolAvailableVersions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolAvailableVersions",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentPoolVersions: {
        serializedName: "properties.agentPoolVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className:
                "AgentPoolAvailableVersionsPropertiesAgentPoolVersionsItem"
            }
          }
        }
      }
    }
  }
};

export const AgentPoolAvailableVersionsPropertiesAgentPoolVersionsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolAvailableVersionsPropertiesAgentPoolVersionsItem",
    modelProperties: {
      default: {
        serializedName: "default",
        type: {
          name: "Boolean"
        }
      },
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        type: {
          name: "String"
        }
      },
      isPreview: {
        serializedName: "isPreview",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourcesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourcesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const RunCommandRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunCommandRequest",
    modelProperties: {
      command: {
        serializedName: "command",
        required: true,
        type: {
          name: "String"
        }
      },
      context: {
        serializedName: "context",
        type: {
          name: "String"
        }
      },
      clusterToken: {
        serializedName: "clusterToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RunCommandResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunCommandResult",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      exitCode: {
        serializedName: "properties.exitCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      startedAt: {
        serializedName: "properties.startedAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      finishedAt: {
        serializedName: "properties.finishedAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      logs: {
        serializedName: "properties.logs",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "properties.reason",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutboundEnvironmentEndpointCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutboundEnvironmentEndpointCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OutboundEnvironmentEndpoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutboundEnvironmentEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutboundEnvironmentEndpoint",
    modelProperties: {
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EndpointDependency"
            }
          }
        }
      }
    }
  }
};

export const EndpointDependency: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointDependency",
    modelProperties: {
      domainName: {
        serializedName: "domainName",
        type: {
          name: "String"
        }
      },
      endpointDetails: {
        serializedName: "endpointDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EndpointDetail"
            }
          }
        }
      }
    }
  }
};

export const EndpointDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointDetail",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SnapshotListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Snapshot"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterSnapshotListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterSnapshotListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedClusterSnapshot"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterPropertiesForSnapshot: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterPropertiesForSnapshot",
    modelProperties: {
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ManagedClusterSKU"
        }
      },
      enableRbac: {
        serializedName: "enableRbac",
        type: {
          name: "Boolean"
        }
      },
      networkProfile: {
        serializedName: "networkProfile",
        type: {
          name: "Composite",
          className: "NetworkProfileForSnapshot"
        }
      }
    }
  }
};

export const NetworkProfileForSnapshot: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfileForSnapshot",
    modelProperties: {
      networkPlugin: {
        defaultValue: "kubenet",
        serializedName: "networkPlugin",
        type: {
          name: "String"
        }
      },
      networkPluginMode: {
        serializedName: "networkPluginMode",
        type: {
          name: "String"
        }
      },
      networkPolicy: {
        serializedName: "networkPolicy",
        type: {
          name: "String"
        }
      },
      networkMode: {
        serializedName: "networkMode",
        type: {
          name: "String"
        }
      },
      loadBalancerSku: {
        serializedName: "loadBalancerSku",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrustedAccessRoleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrustedAccessRoleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrustedAccessRole"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrustedAccessRole: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrustedAccessRole",
    modelProperties: {
      sourceResourceType: {
        serializedName: "sourceResourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rules: {
        serializedName: "rules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrustedAccessRoleRule"
            }
          }
        }
      }
    }
  }
};

export const TrustedAccessRoleRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrustedAccessRoleRule",
    modelProperties: {
      verbs: {
        serializedName: "verbs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      apiGroups: {
        serializedName: "apiGroups",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      resources: {
        serializedName: "resources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      resourceNames: {
        serializedName: "resourceNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      nonResourceURLs: {
        serializedName: "nonResourceURLs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TrustedAccessRoleBindingListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrustedAccessRoleBindingListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrustedAccessRoleBinding"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterAgentPoolProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterAgentPoolProfile",
    modelProperties: {
      ...ManagedClusterAgentPoolProfileProperties.type.modelProperties,
      name: {
        constraints: {
          Pattern: new RegExp("^[a-z][a-z0-9]{0,11}$")
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterAddonProfileIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterAddonProfileIdentity",
    modelProperties: {
      ...UserAssignedIdentity.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrustedAccessRoleBinding: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrustedAccessRoleBinding",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceResourceId: {
        serializedName: "properties.sourceResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const MaintenanceConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      timeInWeek: {
        serializedName: "properties.timeInWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeInWeek"
            }
          }
        }
      },
      notAllowedTime: {
        serializedName: "properties.notAllowedTime",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSpan"
            }
          }
        }
      },
      maintenanceWindow: {
        serializedName: "properties.maintenanceWindow",
        type: {
          name: "Composite",
          className: "MaintenanceWindow"
        }
      }
    }
  }
};

export const AgentPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPool",
    modelProperties: {
      ...SubResource.type.modelProperties,
      count: {
        serializedName: "properties.count",
        type: {
          name: "Number"
        }
      },
      vmSize: {
        serializedName: "properties.vmSize",
        type: {
          name: "String"
        }
      },
      osDiskSizeGB: {
        constraints: {
          InclusiveMaximum: 2048,
          InclusiveMinimum: 0
        },
        serializedName: "properties.osDiskSizeGB",
        type: {
          name: "Number"
        }
      },
      osDiskType: {
        serializedName: "properties.osDiskType",
        type: {
          name: "String"
        }
      },
      kubeletDiskType: {
        serializedName: "properties.kubeletDiskType",
        type: {
          name: "String"
        }
      },
      workloadRuntime: {
        serializedName: "properties.workloadRuntime",
        type: {
          name: "String"
        }
      },
      messageOfTheDay: {
        serializedName: "properties.messageOfTheDay",
        type: {
          name: "String"
        }
      },
      vnetSubnetID: {
        serializedName: "properties.vnetSubnetID",
        type: {
          name: "String"
        }
      },
      podSubnetID: {
        serializedName: "properties.podSubnetID",
        type: {
          name: "String"
        }
      },
      maxPods: {
        serializedName: "properties.maxPods",
        type: {
          name: "Number"
        }
      },
      osType: {
        defaultValue: "Linux",
        serializedName: "properties.osType",
        type: {
          name: "String"
        }
      },
      osSKU: {
        serializedName: "properties.osSKU",
        type: {
          name: "String"
        }
      },
      maxCount: {
        serializedName: "properties.maxCount",
        type: {
          name: "Number"
        }
      },
      minCount: {
        serializedName: "properties.minCount",
        type: {
          name: "Number"
        }
      },
      enableAutoScaling: {
        serializedName: "properties.enableAutoScaling",
        type: {
          name: "Boolean"
        }
      },
      scaleDownMode: {
        serializedName: "properties.scaleDownMode",
        type: {
          name: "String"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "properties.mode",
        type: {
          name: "String"
        }
      },
      orchestratorVersion: {
        serializedName: "properties.orchestratorVersion",
        type: {
          name: "String"
        }
      },
      currentOrchestratorVersion: {
        serializedName: "properties.currentOrchestratorVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nodeImageVersion: {
        serializedName: "properties.nodeImageVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      upgradeSettings: {
        serializedName: "properties.upgradeSettings",
        type: {
          name: "Composite",
          className: "AgentPoolUpgradeSettings"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      powerState: {
        serializedName: "properties.powerState",
        type: {
          name: "Composite",
          className: "PowerState"
        }
      },
      availabilityZones: {
        serializedName: "properties.availabilityZones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      enableNodePublicIP: {
        serializedName: "properties.enableNodePublicIP",
        type: {
          name: "Boolean"
        }
      },
      enableCustomCATrust: {
        serializedName: "properties.enableCustomCATrust",
        type: {
          name: "Boolean"
        }
      },
      nodePublicIPPrefixID: {
        serializedName: "properties.nodePublicIPPrefixID",
        type: {
          name: "String"
        }
      },
      scaleSetPriority: {
        defaultValue: "Regular",
        serializedName: "properties.scaleSetPriority",
        type: {
          name: "String"
        }
      },
      scaleSetEvictionPolicy: {
        defaultValue: "Delete",
        serializedName: "properties.scaleSetEvictionPolicy",
        type: {
          name: "String"
        }
      },
      spotMaxPrice: {
        defaultValue: -1,
        serializedName: "properties.spotMaxPrice",
        type: {
          name: "Number"
        }
      },
      tags: {
        serializedName: "properties.tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      nodeLabels: {
        serializedName: "properties.nodeLabels",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      nodeTaints: {
        serializedName: "properties.nodeTaints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      proximityPlacementGroupID: {
        serializedName: "properties.proximityPlacementGroupID",
        type: {
          name: "String"
        }
      },
      kubeletConfig: {
        serializedName: "properties.kubeletConfig",
        type: {
          name: "Composite",
          className: "KubeletConfig"
        }
      },
      linuxOSConfig: {
        serializedName: "properties.linuxOSConfig",
        type: {
          name: "Composite",
          className: "LinuxOSConfig"
        }
      },
      enableEncryptionAtHost: {
        serializedName: "properties.enableEncryptionAtHost",
        type: {
          name: "Boolean"
        }
      },
      enableUltraSSD: {
        serializedName: "properties.enableUltraSSD",
        type: {
          name: "Boolean"
        }
      },
      enableFips: {
        serializedName: "properties.enableFIPS",
        type: {
          name: "Boolean"
        }
      },
      gpuInstanceProfile: {
        serializedName: "properties.gpuInstanceProfile",
        type: {
          name: "String"
        }
      },
      creationData: {
        serializedName: "properties.creationData",
        type: {
          name: "Composite",
          className: "CreationData"
        }
      },
      capacityReservationGroupID: {
        serializedName: "properties.capacityReservationGroupID",
        type: {
          name: "String"
        }
      },
      hostGroupID: {
        serializedName: "properties.hostGroupID",
        type: {
          name: "String"
        }
      },
      windowsProfile: {
        serializedName: "properties.windowsProfile",
        type: {
          name: "Composite",
          className: "AgentPoolWindowsProfile"
        }
      },
      networkProfile: {
        serializedName: "properties.networkProfile",
        type: {
          name: "Composite",
          className: "AgentPoolNetworkProfile"
        }
      }
    }
  }
};

export const ManagedCluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedCluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ManagedClusterSKU"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedClusterIdentity"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      powerState: {
        serializedName: "properties.powerState",
        type: {
          name: "Composite",
          className: "PowerState"
        }
      },
      creationData: {
        serializedName: "properties.creationData",
        type: {
          name: "Composite",
          className: "CreationData"
        }
      },
      maxAgentPools: {
        serializedName: "properties.maxAgentPools",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      kubernetesVersion: {
        serializedName: "properties.kubernetesVersion",
        type: {
          name: "String"
        }
      },
      currentKubernetesVersion: {
        serializedName: "properties.currentKubernetesVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dnsPrefix: {
        serializedName: "properties.dnsPrefix",
        type: {
          name: "String"
        }
      },
      fqdnSubdomain: {
        serializedName: "properties.fqdnSubdomain",
        type: {
          name: "String"
        }
      },
      fqdn: {
        serializedName: "properties.fqdn",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateFqdn: {
        serializedName: "properties.privateFQDN",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azurePortalFqdn: {
        serializedName: "properties.azurePortalFQDN",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentPoolProfiles: {
        serializedName: "properties.agentPoolProfiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedClusterAgentPoolProfile"
            }
          }
        }
      },
      linuxProfile: {
        serializedName: "properties.linuxProfile",
        type: {
          name: "Composite",
          className: "ContainerServiceLinuxProfile"
        }
      },
      windowsProfile: {
        serializedName: "properties.windowsProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterWindowsProfile"
        }
      },
      servicePrincipalProfile: {
        serializedName: "properties.servicePrincipalProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterServicePrincipalProfile"
        }
      },
      addonProfiles: {
        serializedName: "properties.addonProfiles",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "ManagedClusterAddonProfile" }
          }
        }
      },
      podIdentityProfile: {
        serializedName: "properties.podIdentityProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterPodIdentityProfile"
        }
      },
      oidcIssuerProfile: {
        serializedName: "properties.oidcIssuerProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterOidcIssuerProfile"
        }
      },
      nodeResourceGroup: {
        serializedName: "properties.nodeResourceGroup",
        type: {
          name: "String"
        }
      },
      nodeResourceGroupProfile: {
        serializedName: "properties.nodeResourceGroupProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterNodeResourceGroupProfile"
        }
      },
      enableRbac: {
        serializedName: "properties.enableRBAC",
        type: {
          name: "Boolean"
        }
      },
      supportPlan: {
        serializedName: "properties.supportPlan",
        type: {
          name: "String"
        }
      },
      enablePodSecurityPolicy: {
        serializedName: "properties.enablePodSecurityPolicy",
        type: {
          name: "Boolean"
        }
      },
      enableNamespaceResources: {
        serializedName: "properties.enableNamespaceResources",
        type: {
          name: "Boolean"
        }
      },
      networkProfile: {
        serializedName: "properties.networkProfile",
        type: {
          name: "Composite",
          className: "ContainerServiceNetworkProfile"
        }
      },
      aadProfile: {
        serializedName: "properties.aadProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterAADProfile"
        }
      },
      autoUpgradeProfile: {
        serializedName: "properties.autoUpgradeProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterAutoUpgradeProfile"
        }
      },
      upgradeSettings: {
        serializedName: "properties.upgradeSettings",
        type: {
          name: "Composite",
          className: "ClusterUpgradeSettings"
        }
      },
      autoScalerProfile: {
        serializedName: "properties.autoScalerProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterPropertiesAutoScalerProfile"
        }
      },
      apiServerAccessProfile: {
        serializedName: "properties.apiServerAccessProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterAPIServerAccessProfile"
        }
      },
      diskEncryptionSetID: {
        serializedName: "properties.diskEncryptionSetID",
        type: {
          name: "String"
        }
      },
      identityProfile: {
        serializedName: "properties.identityProfile",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      },
      privateLinkResources: {
        serializedName: "properties.privateLinkResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      },
      disableLocalAccounts: {
        serializedName: "properties.disableLocalAccounts",
        type: {
          name: "Boolean"
        }
      },
      httpProxyConfig: {
        serializedName: "properties.httpProxyConfig",
        type: {
          name: "Composite",
          className: "ManagedClusterHttpProxyConfig"
        }
      },
      securityProfile: {
        serializedName: "properties.securityProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterSecurityProfile"
        }
      },
      storageProfile: {
        serializedName: "properties.storageProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterStorageProfile"
        }
      },
      ingressProfile: {
        serializedName: "properties.ingressProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterIngressProfile"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      workloadAutoScalerProfile: {
        serializedName: "properties.workloadAutoScalerProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterWorkloadAutoScalerProfile"
        }
      },
      azureMonitorProfile: {
        serializedName: "properties.azureMonitorProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterAzureMonitorProfile"
        }
      },
      guardrailsProfile: {
        serializedName: "properties.guardrailsProfile",
        type: {
          name: "Composite",
          className: "GuardrailsProfile"
        }
      },
      serviceMeshProfile: {
        serializedName: "properties.serviceMeshProfile",
        type: {
          name: "Composite",
          className: "ServiceMeshProfile"
        }
      }
    }
  }
};

export const ManagedClusterAccessProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterAccessProfile",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      kubeConfig: {
        serializedName: "properties.kubeConfig",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const Snapshot: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Snapshot",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      creationData: {
        serializedName: "properties.creationData",
        type: {
          name: "Composite",
          className: "CreationData"
        }
      },
      snapshotType: {
        defaultValue: "NodePool",
        serializedName: "properties.snapshotType",
        type: {
          name: "String"
        }
      },
      kubernetesVersion: {
        serializedName: "properties.kubernetesVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nodeImageVersion: {
        serializedName: "properties.nodeImageVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osType: {
        defaultValue: "Linux",
        serializedName: "properties.osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osSku: {
        serializedName: "properties.osSku",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vmSize: {
        serializedName: "properties.vmSize",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enableFips: {
        serializedName: "properties.enableFIPS",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ManagedClusterSnapshot: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClusterSnapshot",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      creationData: {
        serializedName: "properties.creationData",
        type: {
          name: "Composite",
          className: "CreationData"
        }
      },
      snapshotType: {
        defaultValue: "NodePool",
        serializedName: "properties.snapshotType",
        type: {
          name: "String"
        }
      },
      managedClusterPropertiesReadOnly: {
        serializedName: "properties.managedClusterPropertiesReadOnly",
        type: {
          name: "Composite",
          className: "ManagedClusterPropertiesForSnapshot"
        }
      }
    }
  }
};

export const ManagedClustersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClustersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClustersResetServicePrincipalProfileHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClustersResetServicePrincipalProfileHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClustersResetAADProfileHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClustersResetAADProfileHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClustersAbortLatestOperationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClustersAbortLatestOperationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClustersRotateClusterCertificatesHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClustersRotateClusterCertificatesHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClustersRotateServiceAccountSigningKeysHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClustersRotateServiceAccountSigningKeysHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClustersStopHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClustersStopHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClustersStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClustersStartHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClustersRunCommandHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClustersRunCommandHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClustersGetCommandResultHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedClustersGetCommandResultHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolsAbortLatestOperationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolsAbortLatestOperationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolsUpgradeNodeImageVersionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolsUpgradeNodeImageVersionHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};
