/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const OperationValue: msRest.CompositeMapper = {
  serializedName: "OperationValue",
  type: {
    name: "Composite",
    className: "OperationValue",
    modelProperties: {
      origin: {
        readOnly: true,
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "display.operation",
        type: {
          name: "String"
        }
      },
      resource: {
        readOnly: true,
        serializedName: "display.resource",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "display.description",
        type: {
          name: "String"
        }
      },
      provider: {
        readOnly: true,
        serializedName: "display.provider",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SubResource: msRest.CompositeMapper = {
  serializedName: "SubResource",
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TagsObject: msRest.CompositeMapper = {
  serializedName: "TagsObject",
  type: {
    name: "Composite",
    className: "TagsObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterServicePrincipalProfile: msRest.CompositeMapper = {
  serializedName: "ManagedClusterServicePrincipalProfile",
  type: {
    name: "Composite",
    className: "ManagedClusterServicePrincipalProfile",
    modelProperties: {
      clientId: {
        required: true,
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      secret: {
        serializedName: "secret",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerServiceMasterProfile: msRest.CompositeMapper = {
  serializedName: "ContainerServiceMasterProfile",
  type: {
    name: "Composite",
    className: "ContainerServiceMasterProfile",
    modelProperties: {
      count: {
        serializedName: "count",
        defaultValue: 1,
        type: {
          name: "Number"
        }
      },
      dnsPrefix: {
        required: true,
        serializedName: "dnsPrefix",
        type: {
          name: "String"
        }
      },
      vmSize: {
        required: true,
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      osDiskSizeGB: {
        serializedName: "osDiskSizeGB",
        type: {
          name: "Number"
        }
      },
      vnetSubnetID: {
        serializedName: "vnetSubnetID",
        type: {
          name: "String"
        }
      },
      firstConsecutiveStaticIP: {
        serializedName: "firstConsecutiveStaticIP",
        defaultValue: '10.240.255.5',
        type: {
          name: "String"
        }
      },
      storageProfile: {
        serializedName: "storageProfile",
        type: {
          name: "String"
        }
      },
      fqdn: {
        readOnly: true,
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolUpgradeSettings: msRest.CompositeMapper = {
  serializedName: "AgentPoolUpgradeSettings",
  type: {
    name: "Composite",
    className: "AgentPoolUpgradeSettings",
    modelProperties: {
      maxSurge: {
        serializedName: "maxSurge",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PowerState: msRest.CompositeMapper = {
  serializedName: "PowerState",
  type: {
    name: "Composite",
    className: "PowerState",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubeletConfig: msRest.CompositeMapper = {
  serializedName: "KubeletConfig",
  type: {
    name: "Composite",
    className: "KubeletConfig",
    modelProperties: {
      cpuManagerPolicy: {
        serializedName: "cpuManagerPolicy",
        type: {
          name: "String"
        }
      },
      cpuCfsQuota: {
        serializedName: "cpuCfsQuota",
        type: {
          name: "Boolean"
        }
      },
      cpuCfsQuotaPeriod: {
        serializedName: "cpuCfsQuotaPeriod",
        type: {
          name: "String"
        }
      },
      imageGcHighThreshold: {
        serializedName: "imageGcHighThreshold",
        type: {
          name: "Number"
        }
      },
      imageGcLowThreshold: {
        serializedName: "imageGcLowThreshold",
        type: {
          name: "Number"
        }
      },
      topologyManagerPolicy: {
        serializedName: "topologyManagerPolicy",
        type: {
          name: "String"
        }
      },
      allowedUnsafeSysctls: {
        serializedName: "allowedUnsafeSysctls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      failSwapOn: {
        serializedName: "failSwapOn",
        type: {
          name: "Boolean"
        }
      },
      containerLogMaxSizeMB: {
        serializedName: "containerLogMaxSizeMB",
        type: {
          name: "Number"
        }
      },
      containerLogMaxFiles: {
        serializedName: "containerLogMaxFiles",
        constraints: {
          InclusiveMinimum: 2
        },
        type: {
          name: "Number"
        }
      },
      podMaxPids: {
        serializedName: "podMaxPids",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SysctlConfig: msRest.CompositeMapper = {
  serializedName: "SysctlConfig",
  type: {
    name: "Composite",
    className: "SysctlConfig",
    modelProperties: {
      netCoreSomaxconn: {
        serializedName: "netCoreSomaxconn",
        type: {
          name: "Number"
        }
      },
      netCoreNetdevMaxBacklog: {
        serializedName: "netCoreNetdevMaxBacklog",
        type: {
          name: "Number"
        }
      },
      netCoreRmemDefault: {
        serializedName: "netCoreRmemDefault",
        type: {
          name: "Number"
        }
      },
      netCoreRmemMax: {
        serializedName: "netCoreRmemMax",
        type: {
          name: "Number"
        }
      },
      netCoreWmemDefault: {
        serializedName: "netCoreWmemDefault",
        type: {
          name: "Number"
        }
      },
      netCoreWmemMax: {
        serializedName: "netCoreWmemMax",
        type: {
          name: "Number"
        }
      },
      netCoreOptmemMax: {
        serializedName: "netCoreOptmemMax",
        type: {
          name: "Number"
        }
      },
      netIpv4TcpMaxSynBacklog: {
        serializedName: "netIpv4TcpMaxSynBacklog",
        type: {
          name: "Number"
        }
      },
      netIpv4TcpMaxTwBuckets: {
        serializedName: "netIpv4TcpMaxTwBuckets",
        type: {
          name: "Number"
        }
      },
      netIpv4TcpFinTimeout: {
        serializedName: "netIpv4TcpFinTimeout",
        type: {
          name: "Number"
        }
      },
      netIpv4TcpKeepaliveTime: {
        serializedName: "netIpv4TcpKeepaliveTime",
        type: {
          name: "Number"
        }
      },
      netIpv4TcpKeepaliveProbes: {
        serializedName: "netIpv4TcpKeepaliveProbes",
        type: {
          name: "Number"
        }
      },
      netIpv4TcpkeepaliveIntvl: {
        serializedName: "netIpv4TcpkeepaliveIntvl",
        type: {
          name: "Number"
        }
      },
      netIpv4TcpTwReuse: {
        serializedName: "netIpv4TcpTwReuse",
        type: {
          name: "Boolean"
        }
      },
      netIpv4IpLocalPortRange: {
        serializedName: "netIpv4IpLocalPortRange",
        type: {
          name: "String"
        }
      },
      netIpv4NeighDefaultGcThresh1: {
        serializedName: "netIpv4NeighDefaultGcThresh1",
        type: {
          name: "Number"
        }
      },
      netIpv4NeighDefaultGcThresh2: {
        serializedName: "netIpv4NeighDefaultGcThresh2",
        type: {
          name: "Number"
        }
      },
      netIpv4NeighDefaultGcThresh3: {
        serializedName: "netIpv4NeighDefaultGcThresh3",
        type: {
          name: "Number"
        }
      },
      netNetfilterNfConntrackMax: {
        serializedName: "netNetfilterNfConntrackMax",
        type: {
          name: "Number"
        }
      },
      netNetfilterNfConntrackBuckets: {
        serializedName: "netNetfilterNfConntrackBuckets",
        type: {
          name: "Number"
        }
      },
      fsInotifyMaxUserWatches: {
        serializedName: "fsInotifyMaxUserWatches",
        type: {
          name: "Number"
        }
      },
      fsFileMax: {
        serializedName: "fsFileMax",
        type: {
          name: "Number"
        }
      },
      fsAioMaxNr: {
        serializedName: "fsAioMaxNr",
        type: {
          name: "Number"
        }
      },
      fsNrOpen: {
        serializedName: "fsNrOpen",
        type: {
          name: "Number"
        }
      },
      kernelThreadsMax: {
        serializedName: "kernelThreadsMax",
        type: {
          name: "Number"
        }
      },
      vmMaxMapCount: {
        serializedName: "vmMaxMapCount",
        type: {
          name: "Number"
        }
      },
      vmSwappiness: {
        serializedName: "vmSwappiness",
        type: {
          name: "Number"
        }
      },
      vmVfsCachePressure: {
        serializedName: "vmVfsCachePressure",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LinuxOSConfig: msRest.CompositeMapper = {
  serializedName: "LinuxOSConfig",
  type: {
    name: "Composite",
    className: "LinuxOSConfig",
    modelProperties: {
      sysctls: {
        serializedName: "sysctls",
        type: {
          name: "Composite",
          className: "SysctlConfig"
        }
      },
      transparentHugePageEnabled: {
        serializedName: "transparentHugePageEnabled",
        type: {
          name: "String"
        }
      },
      transparentHugePageDefrag: {
        serializedName: "transparentHugePageDefrag",
        type: {
          name: "String"
        }
      },
      swapFileSizeMB: {
        serializedName: "swapFileSizeMB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedClusterAgentPoolProfileProperties: msRest.CompositeMapper = {
  serializedName: "ManagedClusterAgentPoolProfileProperties",
  type: {
    name: "Composite",
    className: "ManagedClusterAgentPoolProfileProperties",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      osDiskSizeGB: {
        serializedName: "osDiskSizeGB",
        type: {
          name: "Number"
        }
      },
      osDiskType: {
        serializedName: "osDiskType",
        type: {
          name: "String"
        }
      },
      kubeletDiskType: {
        serializedName: "kubeletDiskType",
        type: {
          name: "String"
        }
      },
      vnetSubnetID: {
        serializedName: "vnetSubnetID",
        type: {
          name: "String"
        }
      },
      podSubnetID: {
        serializedName: "podSubnetID",
        type: {
          name: "String"
        }
      },
      maxPods: {
        serializedName: "maxPods",
        type: {
          name: "Number"
        }
      },
      osType: {
        serializedName: "osType",
        defaultValue: 'Linux',
        type: {
          name: "String"
        }
      },
      osSKU: {
        serializedName: "osSKU",
        type: {
          name: "String"
        }
      },
      maxCount: {
        serializedName: "maxCount",
        type: {
          name: "Number"
        }
      },
      minCount: {
        serializedName: "minCount",
        type: {
          name: "Number"
        }
      },
      enableAutoScaling: {
        serializedName: "enableAutoScaling",
        type: {
          name: "Boolean"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      orchestratorVersion: {
        serializedName: "orchestratorVersion",
        type: {
          name: "String"
        }
      },
      nodeImageVersion: {
        readOnly: true,
        serializedName: "nodeImageVersion",
        type: {
          name: "String"
        }
      },
      upgradeSettings: {
        serializedName: "upgradeSettings",
        type: {
          name: "Composite",
          className: "AgentPoolUpgradeSettings"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      powerState: {
        readOnly: true,
        serializedName: "powerState",
        type: {
          name: "Composite",
          className: "PowerState"
        }
      },
      availabilityZones: {
        serializedName: "availabilityZones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      enableNodePublicIP: {
        serializedName: "enableNodePublicIP",
        type: {
          name: "Boolean"
        }
      },
      nodePublicIPPrefixID: {
        serializedName: "nodePublicIPPrefixID",
        type: {
          name: "String"
        }
      },
      scaleSetPriority: {
        serializedName: "scaleSetPriority",
        defaultValue: 'Regular',
        type: {
          name: "String"
        }
      },
      scaleSetEvictionPolicy: {
        serializedName: "scaleSetEvictionPolicy",
        defaultValue: 'Delete',
        type: {
          name: "String"
        }
      },
      spotMaxPrice: {
        serializedName: "spotMaxPrice",
        type: {
          name: "Number"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      nodeLabels: {
        serializedName: "nodeLabels",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      nodeTaints: {
        serializedName: "nodeTaints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      proximityPlacementGroupID: {
        serializedName: "proximityPlacementGroupID",
        type: {
          name: "String"
        }
      },
      kubeletConfig: {
        serializedName: "kubeletConfig",
        type: {
          name: "Composite",
          className: "KubeletConfig"
        }
      },
      linuxOSConfig: {
        serializedName: "linuxOSConfig",
        type: {
          name: "Composite",
          className: "LinuxOSConfig"
        }
      },
      enableEncryptionAtHost: {
        serializedName: "enableEncryptionAtHost",
        type: {
          name: "Boolean"
        }
      },
      enableFIPS: {
        serializedName: "enableFIPS",
        type: {
          name: "Boolean"
        }
      },
      gpuInstanceProfile: {
        serializedName: "gpuInstanceProfile",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterAgentPoolProfile: msRest.CompositeMapper = {
  serializedName: "ManagedClusterAgentPoolProfile",
  type: {
    name: "Composite",
    className: "ManagedClusterAgentPoolProfile",
    modelProperties: {
      ...ManagedClusterAgentPoolProfileProperties.type.modelProperties,
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          Pattern: /^[a-z][a-z0-9]{0,11}$/
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPool: msRest.CompositeMapper = {
  serializedName: "AgentPool",
  type: {
    name: "Composite",
    className: "AgentPool",
    modelProperties: {
      ...SubResource.type.modelProperties,
      count: {
        serializedName: "properties.count",
        type: {
          name: "Number"
        }
      },
      vmSize: {
        serializedName: "properties.vmSize",
        type: {
          name: "String"
        }
      },
      osDiskSizeGB: {
        serializedName: "properties.osDiskSizeGB",
        type: {
          name: "Number"
        }
      },
      osDiskType: {
        serializedName: "properties.osDiskType",
        type: {
          name: "String"
        }
      },
      kubeletDiskType: {
        serializedName: "properties.kubeletDiskType",
        type: {
          name: "String"
        }
      },
      vnetSubnetID: {
        serializedName: "properties.vnetSubnetID",
        type: {
          name: "String"
        }
      },
      podSubnetID: {
        serializedName: "properties.podSubnetID",
        type: {
          name: "String"
        }
      },
      maxPods: {
        serializedName: "properties.maxPods",
        type: {
          name: "Number"
        }
      },
      osType: {
        serializedName: "properties.osType",
        defaultValue: 'Linux',
        type: {
          name: "String"
        }
      },
      osSKU: {
        serializedName: "properties.osSKU",
        type: {
          name: "String"
        }
      },
      maxCount: {
        serializedName: "properties.maxCount",
        type: {
          name: "Number"
        }
      },
      minCount: {
        serializedName: "properties.minCount",
        type: {
          name: "Number"
        }
      },
      enableAutoScaling: {
        serializedName: "properties.enableAutoScaling",
        type: {
          name: "Boolean"
        }
      },
      agentPoolType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "properties.mode",
        type: {
          name: "String"
        }
      },
      orchestratorVersion: {
        serializedName: "properties.orchestratorVersion",
        type: {
          name: "String"
        }
      },
      nodeImageVersion: {
        readOnly: true,
        serializedName: "properties.nodeImageVersion",
        type: {
          name: "String"
        }
      },
      upgradeSettings: {
        serializedName: "properties.upgradeSettings",
        type: {
          name: "Composite",
          className: "AgentPoolUpgradeSettings"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      powerState: {
        readOnly: true,
        serializedName: "properties.powerState",
        type: {
          name: "Composite",
          className: "PowerState"
        }
      },
      availabilityZones: {
        serializedName: "properties.availabilityZones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      enableNodePublicIP: {
        serializedName: "properties.enableNodePublicIP",
        type: {
          name: "Boolean"
        }
      },
      nodePublicIPPrefixID: {
        serializedName: "properties.nodePublicIPPrefixID",
        type: {
          name: "String"
        }
      },
      scaleSetPriority: {
        serializedName: "properties.scaleSetPriority",
        defaultValue: 'Regular',
        type: {
          name: "String"
        }
      },
      scaleSetEvictionPolicy: {
        serializedName: "properties.scaleSetEvictionPolicy",
        defaultValue: 'Delete',
        type: {
          name: "String"
        }
      },
      spotMaxPrice: {
        serializedName: "properties.spotMaxPrice",
        type: {
          name: "Number"
        }
      },
      tags: {
        serializedName: "properties.tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      nodeLabels: {
        serializedName: "properties.nodeLabels",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      nodeTaints: {
        serializedName: "properties.nodeTaints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      proximityPlacementGroupID: {
        serializedName: "properties.proximityPlacementGroupID",
        type: {
          name: "String"
        }
      },
      kubeletConfig: {
        serializedName: "properties.kubeletConfig",
        type: {
          name: "Composite",
          className: "KubeletConfig"
        }
      },
      linuxOSConfig: {
        serializedName: "properties.linuxOSConfig",
        type: {
          name: "Composite",
          className: "LinuxOSConfig"
        }
      },
      enableEncryptionAtHost: {
        serializedName: "properties.enableEncryptionAtHost",
        type: {
          name: "Boolean"
        }
      },
      enableFIPS: {
        serializedName: "properties.enableFIPS",
        type: {
          name: "Boolean"
        }
      },
      gpuInstanceProfile: {
        serializedName: "properties.gpuInstanceProfile",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterWindowsProfile: msRest.CompositeMapper = {
  serializedName: "ManagedClusterWindowsProfile",
  type: {
    name: "Composite",
    className: "ManagedClusterWindowsProfile",
    modelProperties: {
      adminUsername: {
        required: true,
        serializedName: "adminUsername",
        type: {
          name: "String"
        }
      },
      adminPassword: {
        serializedName: "adminPassword",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      enableCSIProxy: {
        serializedName: "enableCSIProxy",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ContainerServiceSshPublicKey: msRest.CompositeMapper = {
  serializedName: "ContainerServiceSshPublicKey",
  type: {
    name: "Composite",
    className: "ContainerServiceSshPublicKey",
    modelProperties: {
      keyData: {
        required: true,
        serializedName: "keyData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerServiceSshConfiguration: msRest.CompositeMapper = {
  serializedName: "ContainerServiceSshConfiguration",
  type: {
    name: "Composite",
    className: "ContainerServiceSshConfiguration",
    modelProperties: {
      publicKeys: {
        required: true,
        serializedName: "publicKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerServiceSshPublicKey"
            }
          }
        }
      }
    }
  }
};

export const ContainerServiceLinuxProfile: msRest.CompositeMapper = {
  serializedName: "ContainerServiceLinuxProfile",
  type: {
    name: "Composite",
    className: "ContainerServiceLinuxProfile",
    modelProperties: {
      adminUsername: {
        required: true,
        serializedName: "adminUsername",
        constraints: {
          Pattern: /^[A-Za-z][-A-Za-z0-9_]*$/
        },
        type: {
          name: "String"
        }
      },
      ssh: {
        required: true,
        serializedName: "ssh",
        type: {
          name: "Composite",
          className: "ContainerServiceSshConfiguration"
        }
      }
    }
  }
};

export const ManagedClusterLoadBalancerProfileManagedOutboundIPs: msRest.CompositeMapper = {
  serializedName: "ManagedClusterLoadBalancerProfile_managedOutboundIPs",
  type: {
    name: "Composite",
    className: "ManagedClusterLoadBalancerProfileManagedOutboundIPs",
    modelProperties: {
      count: {
        serializedName: "count",
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ResourceReference: msRest.CompositeMapper = {
  serializedName: "ResourceReference",
  type: {
    name: "Composite",
    className: "ResourceReference",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterLoadBalancerProfileOutboundIPPrefixes: msRest.CompositeMapper = {
  serializedName: "ManagedClusterLoadBalancerProfile_outboundIPPrefixes",
  type: {
    name: "Composite",
    className: "ManagedClusterLoadBalancerProfileOutboundIPPrefixes",
    modelProperties: {
      publicIPPrefixes: {
        serializedName: "publicIPPrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterLoadBalancerProfileOutboundIPs: msRest.CompositeMapper = {
  serializedName: "ManagedClusterLoadBalancerProfile_outboundIPs",
  type: {
    name: "Composite",
    className: "ManagedClusterLoadBalancerProfileOutboundIPs",
    modelProperties: {
      publicIPs: {
        serializedName: "publicIPs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterLoadBalancerProfile: msRest.CompositeMapper = {
  serializedName: "ManagedClusterLoadBalancerProfile",
  type: {
    name: "Composite",
    className: "ManagedClusterLoadBalancerProfile",
    modelProperties: {
      managedOutboundIPs: {
        serializedName: "managedOutboundIPs",
        type: {
          name: "Composite",
          className: "ManagedClusterLoadBalancerProfileManagedOutboundIPs"
        }
      },
      outboundIPPrefixes: {
        serializedName: "outboundIPPrefixes",
        type: {
          name: "Composite",
          className: "ManagedClusterLoadBalancerProfileOutboundIPPrefixes"
        }
      },
      outboundIPs: {
        serializedName: "outboundIPs",
        type: {
          name: "Composite",
          className: "ManagedClusterLoadBalancerProfileOutboundIPs"
        }
      },
      effectiveOutboundIPs: {
        serializedName: "effectiveOutboundIPs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceReference"
            }
          }
        }
      },
      allocatedOutboundPorts: {
        serializedName: "allocatedOutboundPorts",
        defaultValue: 0,
        constraints: {
          InclusiveMaximum: 64000,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      idleTimeoutInMinutes: {
        serializedName: "idleTimeoutInMinutes",
        defaultValue: 30,
        constraints: {
          InclusiveMaximum: 120,
          InclusiveMinimum: 4
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContainerServiceNetworkProfile: msRest.CompositeMapper = {
  serializedName: "ContainerServiceNetworkProfile",
  type: {
    name: "Composite",
    className: "ContainerServiceNetworkProfile",
    modelProperties: {
      networkPlugin: {
        serializedName: "networkPlugin",
        defaultValue: 'kubenet',
        type: {
          name: "String"
        }
      },
      networkPolicy: {
        serializedName: "networkPolicy",
        type: {
          name: "String"
        }
      },
      networkMode: {
        serializedName: "networkMode",
        type: {
          name: "String"
        }
      },
      podCidr: {
        serializedName: "podCidr",
        defaultValue: '10.244.0.0/16',
        constraints: {
          Pattern: /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/
        },
        type: {
          name: "String"
        }
      },
      serviceCidr: {
        serializedName: "serviceCidr",
        defaultValue: '10.0.0.0/16',
        constraints: {
          Pattern: /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/
        },
        type: {
          name: "String"
        }
      },
      dnsServiceIP: {
        serializedName: "dnsServiceIP",
        defaultValue: '10.0.0.10',
        constraints: {
          Pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
        },
        type: {
          name: "String"
        }
      },
      dockerBridgeCidr: {
        serializedName: "dockerBridgeCidr",
        defaultValue: '172.17.0.1/16',
        constraints: {
          Pattern: /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/
        },
        type: {
          name: "String"
        }
      },
      outboundType: {
        serializedName: "outboundType",
        defaultValue: 'loadBalancer',
        type: {
          name: "String"
        }
      },
      loadBalancerSku: {
        serializedName: "loadBalancerSku",
        type: {
          name: "String"
        }
      },
      loadBalancerProfile: {
        serializedName: "loadBalancerProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterLoadBalancerProfile"
        }
      }
    }
  }
};

export const SystemData: msRest.CompositeMapper = {
  serializedName: "SystemData",
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const TimeInWeek: msRest.CompositeMapper = {
  serializedName: "TimeInWeek",
  type: {
    name: "Composite",
    className: "TimeInWeek",
    modelProperties: {
      day: {
        serializedName: "day",
        type: {
          name: "String"
        }
      },
      hourSlots: {
        serializedName: "hourSlots",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const TimeSpan: msRest.CompositeMapper = {
  serializedName: "TimeSpan",
  type: {
    name: "Composite",
    className: "TimeSpan",
    modelProperties: {
      start: {
        serializedName: "start",
        type: {
          name: "DateTime"
        }
      },
      end: {
        serializedName: "end",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MaintenanceConfiguration: msRest.CompositeMapper = {
  serializedName: "MaintenanceConfiguration",
  type: {
    name: "Composite",
    className: "MaintenanceConfiguration",
    modelProperties: {
      ...SubResource.type.modelProperties,
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      timeInWeek: {
        serializedName: "properties.timeInWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeInWeek"
            }
          }
        }
      },
      notAllowedTime: {
        serializedName: "properties.notAllowedTime",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeSpan"
            }
          }
        }
      }
    }
  }
};

export const RunCommandRequest: msRest.CompositeMapper = {
  serializedName: "RunCommandRequest",
  type: {
    name: "Composite",
    className: "RunCommandRequest",
    modelProperties: {
      command: {
        required: true,
        serializedName: "command",
        type: {
          name: "String"
        }
      },
      context: {
        serializedName: "context",
        type: {
          name: "String"
        }
      },
      clusterToken: {
        serializedName: "clusterToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RunCommandResult: msRest.CompositeMapper = {
  serializedName: "RunCommandResult",
  type: {
    name: "Composite",
    className: "RunCommandResult",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      exitCode: {
        readOnly: true,
        serializedName: "properties.exitCode",
        type: {
          name: "Number"
        }
      },
      startedAt: {
        readOnly: true,
        serializedName: "properties.startedAt",
        type: {
          name: "DateTime"
        }
      },
      finishedAt: {
        readOnly: true,
        serializedName: "properties.finishedAt",
        type: {
          name: "DateTime"
        }
      },
      logs: {
        readOnly: true,
        serializedName: "properties.logs",
        type: {
          name: "String"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "properties.reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerServiceVMDiagnostics: msRest.CompositeMapper = {
  serializedName: "ContainerServiceVMDiagnostics",
  type: {
    name: "Composite",
    className: "ContainerServiceVMDiagnostics",
    modelProperties: {
      enabled: {
        required: true,
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      storageUri: {
        readOnly: true,
        serializedName: "storageUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerServiceDiagnosticsProfile: msRest.CompositeMapper = {
  serializedName: "ContainerServiceDiagnosticsProfile",
  type: {
    name: "Composite",
    className: "ContainerServiceDiagnosticsProfile",
    modelProperties: {
      vmDiagnostics: {
        required: true,
        serializedName: "vmDiagnostics",
        type: {
          name: "Composite",
          className: "ContainerServiceVMDiagnostics"
        }
      }
    }
  }
};

export const UserAssignedIdentity: msRest.CompositeMapper = {
  serializedName: "UserAssignedIdentity",
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "objectId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterAddonProfileIdentity: msRest.CompositeMapper = {
  serializedName: "ManagedClusterAddonProfile_identity",
  type: {
    name: "Composite",
    className: "ManagedClusterAddonProfileIdentity",
    modelProperties: {
      ...UserAssignedIdentity.type.modelProperties
    }
  }
};

export const ManagedClusterAddonProfile: msRest.CompositeMapper = {
  serializedName: "ManagedClusterAddonProfile",
  type: {
    name: "Composite",
    className: "ManagedClusterAddonProfile",
    modelProperties: {
      enabled: {
        required: true,
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      config: {
        serializedName: "config",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      identity: {
        readOnly: true,
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedClusterAddonProfileIdentity"
        }
      }
    }
  }
};

export const ManagedClusterPodIdentityProvisioningInfo: msRest.CompositeMapper = {
  serializedName: "ManagedClusterPodIdentity_provisioningInfo",
  type: {
    name: "Composite",
    className: "ManagedClusterPodIdentityProvisioningInfo",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudError"
        }
      }
    }
  }
};

export const ManagedClusterPodIdentity: msRest.CompositeMapper = {
  serializedName: "ManagedClusterPodIdentity",
  type: {
    name: "Composite",
    className: "ManagedClusterPodIdentity",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      namespace: {
        required: true,
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      bindingSelector: {
        serializedName: "bindingSelector",
        type: {
          name: "String"
        }
      },
      identity: {
        required: true,
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "UserAssignedIdentity"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      provisioningInfo: {
        readOnly: true,
        serializedName: "provisioningInfo",
        type: {
          name: "Composite",
          className: "ManagedClusterPodIdentityProvisioningInfo"
        }
      }
    }
  }
};

export const ManagedClusterPodIdentityException: msRest.CompositeMapper = {
  serializedName: "ManagedClusterPodIdentityException",
  type: {
    name: "Composite",
    className: "ManagedClusterPodIdentityException",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      namespace: {
        required: true,
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      podLabels: {
        required: true,
        serializedName: "podLabels",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterPodIdentityProfile: msRest.CompositeMapper = {
  serializedName: "ManagedClusterPodIdentityProfile",
  type: {
    name: "Composite",
    className: "ManagedClusterPodIdentityProfile",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      allowNetworkPluginKubenet: {
        serializedName: "allowNetworkPluginKubenet",
        type: {
          name: "Boolean"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedClusterPodIdentity"
            }
          }
        }
      },
      userAssignedIdentityExceptions: {
        serializedName: "userAssignedIdentityExceptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedClusterPodIdentityException"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterAADProfile: msRest.CompositeMapper = {
  serializedName: "ManagedClusterAADProfile",
  type: {
    name: "Composite",
    className: "ManagedClusterAADProfile",
    modelProperties: {
      managed: {
        serializedName: "managed",
        type: {
          name: "Boolean"
        }
      },
      enableAzureRBAC: {
        serializedName: "enableAzureRBAC",
        type: {
          name: "Boolean"
        }
      },
      adminGroupObjectIDs: {
        serializedName: "adminGroupObjectIDs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      clientAppID: {
        serializedName: "clientAppID",
        type: {
          name: "String"
        }
      },
      serverAppID: {
        serializedName: "serverAppID",
        type: {
          name: "String"
        }
      },
      serverAppSecret: {
        serializedName: "serverAppSecret",
        type: {
          name: "String"
        }
      },
      tenantID: {
        serializedName: "tenantID",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterAutoUpgradeProfile: msRest.CompositeMapper = {
  serializedName: "ManagedClusterAutoUpgradeProfile",
  type: {
    name: "Composite",
    className: "ManagedClusterAutoUpgradeProfile",
    modelProperties: {
      upgradeChannel: {
        serializedName: "upgradeChannel",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterPropertiesAutoScalerProfile: msRest.CompositeMapper = {
  serializedName: "ManagedClusterProperties_autoScalerProfile",
  type: {
    name: "Composite",
    className: "ManagedClusterPropertiesAutoScalerProfile",
    modelProperties: {
      balanceSimilarNodeGroups: {
        serializedName: "balance-similar-node-groups",
        type: {
          name: "String"
        }
      },
      expander: {
        serializedName: "expander",
        type: {
          name: "String"
        }
      },
      maxEmptyBulkDelete: {
        serializedName: "max-empty-bulk-delete",
        type: {
          name: "String"
        }
      },
      maxGracefulTerminationSec: {
        serializedName: "max-graceful-termination-sec",
        type: {
          name: "String"
        }
      },
      maxNodeProvisionTime: {
        serializedName: "max-node-provision-time",
        type: {
          name: "String"
        }
      },
      maxTotalUnreadyPercentage: {
        serializedName: "max-total-unready-percentage",
        type: {
          name: "String"
        }
      },
      newPodScaleUpDelay: {
        serializedName: "new-pod-scale-up-delay",
        type: {
          name: "String"
        }
      },
      okTotalUnreadyCount: {
        serializedName: "ok-total-unready-count",
        type: {
          name: "String"
        }
      },
      scanInterval: {
        serializedName: "scan-interval",
        type: {
          name: "String"
        }
      },
      scaleDownDelayAfterAdd: {
        serializedName: "scale-down-delay-after-add",
        type: {
          name: "String"
        }
      },
      scaleDownDelayAfterDelete: {
        serializedName: "scale-down-delay-after-delete",
        type: {
          name: "String"
        }
      },
      scaleDownDelayAfterFailure: {
        serializedName: "scale-down-delay-after-failure",
        type: {
          name: "String"
        }
      },
      scaleDownUnneededTime: {
        serializedName: "scale-down-unneeded-time",
        type: {
          name: "String"
        }
      },
      scaleDownUnreadyTime: {
        serializedName: "scale-down-unready-time",
        type: {
          name: "String"
        }
      },
      scaleDownUtilizationThreshold: {
        serializedName: "scale-down-utilization-threshold",
        type: {
          name: "String"
        }
      },
      skipNodesWithLocalStorage: {
        serializedName: "skip-nodes-with-local-storage",
        type: {
          name: "String"
        }
      },
      skipNodesWithSystemPods: {
        serializedName: "skip-nodes-with-system-pods",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterAPIServerAccessProfile: msRest.CompositeMapper = {
  serializedName: "ManagedClusterAPIServerAccessProfile",
  type: {
    name: "Composite",
    className: "ManagedClusterAPIServerAccessProfile",
    modelProperties: {
      authorizedIPRanges: {
        serializedName: "authorizedIPRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      enablePrivateCluster: {
        serializedName: "enablePrivateCluster",
        type: {
          name: "Boolean"
        }
      },
      privateDNSZone: {
        serializedName: "privateDNSZone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterPropertiesIdentityProfileValue: msRest.CompositeMapper = {
  serializedName: "ManagedClusterProperties_identityProfileValue",
  type: {
    name: "Composite",
    className: "ManagedClusterPropertiesIdentityProfileValue",
    modelProperties: {
      ...UserAssignedIdentity.type.modelProperties
    }
  }
};

export const PrivateLinkResource: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResource",
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      privateLinkServiceID: {
        readOnly: true,
        serializedName: "privateLinkServiceID",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterHTTPProxyConfig: msRest.CompositeMapper = {
  serializedName: "ManagedClusterHTTPProxyConfig",
  type: {
    name: "Composite",
    className: "ManagedClusterHTTPProxyConfig",
    modelProperties: {
      httpProxy: {
        serializedName: "httpProxy",
        type: {
          name: "String"
        }
      },
      httpsProxy: {
        serializedName: "httpsProxy",
        type: {
          name: "String"
        }
      },
      noProxy: {
        serializedName: "noProxy",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      trustedCa: {
        serializedName: "trustedCa",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterIdentityUserAssignedIdentitiesValue: msRest.CompositeMapper = {
  serializedName: "ManagedClusterIdentity_userAssignedIdentitiesValue",
  type: {
    name: "Composite",
    className: "ManagedClusterIdentityUserAssignedIdentitiesValue",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      clientId: {
        readOnly: true,
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedClusterIdentity: msRest.CompositeMapper = {
  serializedName: "ManagedClusterIdentity",
  type: {
    name: "Composite",
    className: "ManagedClusterIdentity",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "SystemAssigned",
            "UserAssigned",
            "None"
          ]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ManagedClusterIdentityUserAssignedIdentitiesValue"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterSKU: msRest.CompositeMapper = {
  serializedName: "ManagedClusterSKU",
  type: {
    name: "Composite",
    className: "ManagedClusterSKU",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedLocation: msRest.CompositeMapper = {
  serializedName: "ExtendedLocation",
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedCluster: msRest.CompositeMapper = {
  serializedName: "ManagedCluster",
  type: {
    name: "Composite",
    className: "ManagedCluster",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      powerState: {
        readOnly: true,
        serializedName: "properties.powerState",
        type: {
          name: "Composite",
          className: "PowerState"
        }
      },
      maxAgentPools: {
        readOnly: true,
        serializedName: "properties.maxAgentPools",
        type: {
          name: "Number"
        }
      },
      kubernetesVersion: {
        serializedName: "properties.kubernetesVersion",
        type: {
          name: "String"
        }
      },
      dnsPrefix: {
        serializedName: "properties.dnsPrefix",
        type: {
          name: "String"
        }
      },
      fqdnSubdomain: {
        serializedName: "properties.fqdnSubdomain",
        type: {
          name: "String"
        }
      },
      fqdn: {
        readOnly: true,
        serializedName: "properties.fqdn",
        type: {
          name: "String"
        }
      },
      privateFQDN: {
        readOnly: true,
        serializedName: "properties.privateFQDN",
        type: {
          name: "String"
        }
      },
      azurePortalFQDN: {
        readOnly: true,
        serializedName: "properties.azurePortalFQDN",
        type: {
          name: "String"
        }
      },
      agentPoolProfiles: {
        serializedName: "properties.agentPoolProfiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedClusterAgentPoolProfile"
            }
          }
        }
      },
      linuxProfile: {
        serializedName: "properties.linuxProfile",
        type: {
          name: "Composite",
          className: "ContainerServiceLinuxProfile"
        }
      },
      windowsProfile: {
        serializedName: "properties.windowsProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterWindowsProfile"
        }
      },
      servicePrincipalProfile: {
        serializedName: "properties.servicePrincipalProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterServicePrincipalProfile"
        }
      },
      addonProfiles: {
        serializedName: "properties.addonProfiles",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ManagedClusterAddonProfile"
            }
          }
        }
      },
      podIdentityProfile: {
        serializedName: "properties.podIdentityProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterPodIdentityProfile"
        }
      },
      nodeResourceGroup: {
        serializedName: "properties.nodeResourceGroup",
        type: {
          name: "String"
        }
      },
      enableRBAC: {
        serializedName: "properties.enableRBAC",
        type: {
          name: "Boolean"
        }
      },
      enablePodSecurityPolicy: {
        serializedName: "properties.enablePodSecurityPolicy",
        type: {
          name: "Boolean"
        }
      },
      networkProfile: {
        serializedName: "properties.networkProfile",
        type: {
          name: "Composite",
          className: "ContainerServiceNetworkProfile"
        }
      },
      aadProfile: {
        serializedName: "properties.aadProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterAADProfile"
        }
      },
      autoUpgradeProfile: {
        serializedName: "properties.autoUpgradeProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterAutoUpgradeProfile"
        }
      },
      autoScalerProfile: {
        serializedName: "properties.autoScalerProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterPropertiesAutoScalerProfile"
        }
      },
      apiServerAccessProfile: {
        serializedName: "properties.apiServerAccessProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterAPIServerAccessProfile"
        }
      },
      diskEncryptionSetID: {
        serializedName: "properties.diskEncryptionSetID",
        type: {
          name: "String"
        }
      },
      identityProfile: {
        serializedName: "properties.identityProfile",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ManagedClusterPropertiesIdentityProfileValue"
            }
          }
        }
      },
      privateLinkResources: {
        serializedName: "properties.privateLinkResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      },
      disableLocalAccounts: {
        serializedName: "properties.disableLocalAccounts",
        type: {
          name: "Boolean"
        }
      },
      httpProxyConfig: {
        serializedName: "properties.httpProxyConfig",
        type: {
          name: "Composite",
          className: "ManagedClusterHTTPProxyConfig"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedClusterIdentity"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "ManagedClusterSKU"
        }
      },
      extendedLocation: {
        serializedName: "extendedLocation",
        type: {
          name: "Composite",
          className: "ExtendedLocation"
        }
      }
    }
  }
};

export const ManagedClusterAccessProfile: msRest.CompositeMapper = {
  serializedName: "ManagedClusterAccessProfile",
  type: {
    name: "Composite",
    className: "ManagedClusterAccessProfile",
    modelProperties: {
      ...Resource.type.modelProperties,
      kubeConfig: {
        serializedName: "properties.kubeConfig",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const ManagedClusterPoolUpgradeProfileUpgradesItem: msRest.CompositeMapper = {
  serializedName: "ManagedClusterPoolUpgradeProfile_upgradesItem",
  type: {
    name: "Composite",
    className: "ManagedClusterPoolUpgradeProfileUpgradesItem",
    modelProperties: {
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        type: {
          name: "String"
        }
      },
      isPreview: {
        serializedName: "isPreview",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ManagedClusterPoolUpgradeProfile: msRest.CompositeMapper = {
  serializedName: "ManagedClusterPoolUpgradeProfile",
  type: {
    name: "Composite",
    className: "ManagedClusterPoolUpgradeProfile",
    modelProperties: {
      kubernetesVersion: {
        required: true,
        serializedName: "kubernetesVersion",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      osType: {
        required: true,
        serializedName: "osType",
        defaultValue: 'Linux',
        type: {
          name: "String"
        }
      },
      upgrades: {
        serializedName: "upgrades",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedClusterPoolUpgradeProfileUpgradesItem"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterUpgradeProfile: msRest.CompositeMapper = {
  serializedName: "ManagedClusterUpgradeProfile",
  type: {
    name: "Composite",
    className: "ManagedClusterUpgradeProfile",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      controlPlaneProfile: {
        required: true,
        serializedName: "properties.controlPlaneProfile",
        type: {
          name: "Composite",
          className: "ManagedClusterPoolUpgradeProfile"
        }
      },
      agentPoolProfiles: {
        required: true,
        serializedName: "properties.agentPoolProfiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedClusterPoolUpgradeProfile"
            }
          }
        }
      }
    }
  }
};

export const AgentPoolUpgradeProfilePropertiesUpgradesItem: msRest.CompositeMapper = {
  serializedName: "AgentPoolUpgradeProfileProperties_upgradesItem",
  type: {
    name: "Composite",
    className: "AgentPoolUpgradeProfilePropertiesUpgradesItem",
    modelProperties: {
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        type: {
          name: "String"
        }
      },
      isPreview: {
        serializedName: "isPreview",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AgentPoolUpgradeProfile: msRest.CompositeMapper = {
  serializedName: "AgentPoolUpgradeProfile",
  type: {
    name: "Composite",
    className: "AgentPoolUpgradeProfile",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      kubernetesVersion: {
        required: true,
        serializedName: "properties.kubernetesVersion",
        type: {
          name: "String"
        }
      },
      osType: {
        required: true,
        serializedName: "properties.osType",
        defaultValue: 'Linux',
        type: {
          name: "String"
        }
      },
      upgrades: {
        serializedName: "properties.upgrades",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AgentPoolUpgradeProfilePropertiesUpgradesItem"
            }
          }
        }
      },
      latestNodeImageVersion: {
        serializedName: "properties.latestNodeImageVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolAvailableVersionsPropertiesAgentPoolVersionsItem: msRest.CompositeMapper = {
  serializedName: "AgentPoolAvailableVersionsProperties_agentPoolVersionsItem",
  type: {
    name: "Composite",
    className: "AgentPoolAvailableVersionsPropertiesAgentPoolVersionsItem",
    modelProperties: {
      default: {
        serializedName: "default",
        type: {
          name: "Boolean"
        }
      },
      kubernetesVersion: {
        serializedName: "kubernetesVersion",
        type: {
          name: "String"
        }
      },
      isPreview: {
        serializedName: "isPreview",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AgentPoolAvailableVersions: msRest.CompositeMapper = {
  serializedName: "AgentPoolAvailableVersions",
  type: {
    name: "Composite",
    className: "AgentPoolAvailableVersions",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      agentPoolVersions: {
        serializedName: "properties.agentPoolVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AgentPoolAvailableVersionsPropertiesAgentPoolVersionsItem"
            }
          }
        }
      }
    }
  }
};

export const CredentialResult: msRest.CompositeMapper = {
  serializedName: "CredentialResult",
  type: {
    name: "Composite",
    className: "CredentialResult",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const CredentialResults: msRest.CompositeMapper = {
  serializedName: "CredentialResults",
  type: {
    name: "Composite",
    className: "CredentialResults",
    modelProperties: {
      kubeconfigs: {
        readOnly: true,
        serializedName: "kubeconfigs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CredentialResult"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpoint: msRest.CompositeMapper = {
  serializedName: "PrivateEndpoint",
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: msRest.CompositeMapper = {
  serializedName: "PrivateLinkServiceConnectionState",
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnection",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        required: true,
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionListResult",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourcesListResult: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResourcesListResult",
  type: {
    name: "Composite",
    className: "PrivateLinkResourcesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const OSOptionProperty: msRest.CompositeMapper = {
  serializedName: "OSOptionProperty",
  type: {
    name: "Composite",
    className: "OSOptionProperty",
    modelProperties: {
      osType: {
        required: true,
        serializedName: "os-type",
        type: {
          name: "String"
        }
      },
      enableFipsImage: {
        required: true,
        serializedName: "enable-fips-image",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OSOptionProfile: msRest.CompositeMapper = {
  serializedName: "OSOptionProfile",
  type: {
    name: "Composite",
    className: "OSOptionProfile",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      osOptionPropertyList: {
        required: true,
        serializedName: "properties.osOptionPropertyList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OSOptionProperty"
            }
          }
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationValue"
            }
          }
        }
      }
    }
  }
};

export const ManagedClusterListResult: msRest.CompositeMapper = {
  serializedName: "ManagedClusterListResult",
  type: {
    name: "Composite",
    className: "ManagedClusterListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedCluster"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MaintenanceConfigurationListResult: msRest.CompositeMapper = {
  serializedName: "MaintenanceConfigurationListResult",
  type: {
    name: "Composite",
    className: "MaintenanceConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaintenanceConfiguration"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolListResult: msRest.CompositeMapper = {
  serializedName: "AgentPoolListResult",
  type: {
    name: "Composite",
    className: "AgentPoolListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AgentPool"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
