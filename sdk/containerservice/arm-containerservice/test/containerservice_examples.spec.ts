/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type { RecorderStartOptions } from "@azure-tools/test-recorder";
import { env, Recorder, isPlaybackMode } from "@azure-tools/test-recorder";
import { NoOpCredential } from "@azure-tools/test-credential";
import { ContainerServiceClient } from "../src/containerServiceClient.js";
import type { TokenCredential } from "@azure/identity";
import { DefaultAzureCredential } from "@azure/identity";
import { describe, it, assert, beforeEach, afterEach } from "vitest";

const replaceableVariables: Record<string, string> = {
  SUBSCRIPTION_ID: "88888888-8888-8888-8888-888888888888",
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables,
  removeCentralSanitizers: [
    "AZSDK3493", // .name in the body is not a secret and is listed below in the beforeEach section
    "AZSDK3430", // .id in the body is not a secret and is listed below in the beforeEach section
  ],
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

export function createTestCredential(): TokenCredential {
  return isPlaybackMode() ? new NoOpCredential() : new DefaultAzureCredential();
}

describe("ContainerService test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let clientId: string;
  let client: ContainerServiceClient;
  let location: string;
  let resourceGroupName: string;
  let resourceName: string;

  beforeEach(async (ctx) => {
    recorder = new Recorder(ctx);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || "";
    clientId = env.AZURE_CLIENT_ID || "";
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new ContainerServiceClient(
      credential,
      subscriptionId,
      recorder.configureClientOptions({}),
    );
    location = "eastus";
    resourceGroupName = "myjstest";
    resourceName = "myreourcexyz";
  });

  afterEach(async () => {
    await recorder.stop();
  });

  it("operation list test", async function () {
    const resArray = new Array();
    for await (const item of client.operations.list()) {
      resArray.push(item);
    }
    assert.notEqual(resArray.length, 0);
  });

  it.skip("managedClusters create test", async function () {
    const res = await client.managedClusters.beginCreateOrUpdateAndWait(
      resourceGroupName,
      resourceName,
      {
        dnsPrefix: "aksjssdk",
        agentPoolProfiles: [
          {
            name: "aksagent",
            count: 1,
            vmSize: "Standard_DS2_v2",
            maxPods: 110,
            minCount: 1,
            maxCount: 100,
            osType: "Linux",
            type: "VirtualMachineScaleSets",
            enableAutoScaling: true,
            mode: "System",
          },
        ],
        servicePrincipalProfile: {
          clientId: clientId,
          secret: "",
        },
        location: location,
      },
      testPollingOptions,
    );
    assert.equal(res.name, resourceName);
  });

  it.skip("agentPools create test", async function () {
    const res = await client.agentPools.beginCreateOrUpdateAndWait(
      resourceGroupName,
      resourceName,
      "aksagent1",
      {
        count: 3,
        mode: "User",
        orchestratorVersion: "",
        osDiskSizeGB: 64,
        osType: "Linux",
        vmSize: "Standard_DS2_v2",
        workloadRuntime: "OCIContainer",
      },
      testPollingOptions,
    );
    assert.equal(res.name, "aksagent1");
  });

  it.skip("managedClusters get test", async function () {
    const res = await client.managedClusters.get(resourceGroupName, resourceName);
    assert.equal(res.name, resourceName);
  });

  it.skip("managedClusters getUpgradeProfile test", async function () {
    const res = await client.managedClusters.getUpgradeProfile(resourceGroupName, resourceName);
    assert.equal(res.name, "default");
  });

  it.skip("managedClusters list test", async function () {
    const resArray = new Array();
    for await (const item of client.managedClusters.listByResourceGroup(resourceGroupName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it.skip("agentPools list test", async function () {
    const resArray = new Array();
    for await (const item of client.agentPools.list(resourceGroupName, resourceName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it.skip("managedClusters update test", async function () {
    const res = await client.managedClusters.beginUpdateTagsAndWait(
      resourceGroupName,
      resourceName,
      { tags: { tier: "testing", archv3: "" } },
      testPollingOptions,
    );
    assert.equal(res.type, "Microsoft.ContainerService/ManagedClusters");
  });

  it.skip("managedClusters delete test", async function () {
    const resArray = new Array();
    await client.managedClusters.beginDeleteAndWait(
      resourceGroupName,
      resourceName,
      testPollingOptions,
    );
    for await (const item of client.managedClusters.listByResourceGroup(resourceGroupName)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });
});
