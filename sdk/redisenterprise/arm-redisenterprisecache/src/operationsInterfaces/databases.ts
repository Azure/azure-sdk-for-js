/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Database,
  DatabasesListByClusterOptionalParams,
  DatabasesCreateOptionalParams,
  DatabasesCreateResponse,
  DatabaseUpdate,
  DatabasesUpdateOptionalParams,
  DatabasesUpdateResponse,
  DatabasesGetOptionalParams,
  DatabasesGetResponse,
  DatabasesDeleteOptionalParams,
  DatabasesListKeysOptionalParams,
  DatabasesListKeysResponse,
  RegenerateKeyParameters,
  DatabasesRegenerateKeyOptionalParams,
  DatabasesRegenerateKeyResponse,
  ImportClusterParameters,
  DatabasesImportOptionalParams,
  ExportClusterParameters,
  DatabasesExportOptionalParams,
  ForceUnlinkParameters,
  DatabasesForceUnlinkOptionalParams,
  FlushParameters,
  DatabasesFlushOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Databases. */
export interface Databases {
  /**
   * Gets all databases in the specified RedisEnterprise cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param options The options parameters.
   */
  listByCluster(
    resourceGroupName: string,
    clusterName: string,
    options?: DatabasesListByClusterOptionalParams
  ): PagedAsyncIterableIterator<Database>;
  /**
   * Creates a database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param parameters Parameters supplied to the create or update database operation.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    parameters: Database,
    options?: DatabasesCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DatabasesCreateResponse>,
      DatabasesCreateResponse
    >
  >;
  /**
   * Creates a database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param parameters Parameters supplied to the create or update database operation.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    parameters: Database,
    options?: DatabasesCreateOptionalParams
  ): Promise<DatabasesCreateResponse>;
  /**
   * Updates a database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param parameters Parameters supplied to the create or update database operation.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    parameters: DatabaseUpdate,
    options?: DatabasesUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DatabasesUpdateResponse>,
      DatabasesUpdateResponse
    >
  >;
  /**
   * Updates a database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param parameters Parameters supplied to the create or update database operation.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    parameters: DatabaseUpdate,
    options?: DatabasesUpdateOptionalParams
  ): Promise<DatabasesUpdateResponse>;
  /**
   * Gets information about a database in a RedisEnterprise cluster.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    options?: DatabasesGetOptionalParams
  ): Promise<DatabasesGetResponse>;
  /**
   * Deletes a single database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    options?: DatabasesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a single database
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    options?: DatabasesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Retrieves the access keys for the RedisEnterprise database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    options?: DatabasesListKeysOptionalParams
  ): Promise<DatabasesListKeysResponse>;
  /**
   * Regenerates the RedisEnterprise database's access keys.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param parameters Specifies which key to regenerate.
   * @param options The options parameters.
   */
  beginRegenerateKey(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    parameters: RegenerateKeyParameters,
    options?: DatabasesRegenerateKeyOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<DatabasesRegenerateKeyResponse>,
      DatabasesRegenerateKeyResponse
    >
  >;
  /**
   * Regenerates the RedisEnterprise database's access keys.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param parameters Specifies which key to regenerate.
   * @param options The options parameters.
   */
  beginRegenerateKeyAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    parameters: RegenerateKeyParameters,
    options?: DatabasesRegenerateKeyOptionalParams
  ): Promise<DatabasesRegenerateKeyResponse>;
  /**
   * Imports database files to target database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param parameters Storage information for importing into the cluster
   * @param options The options parameters.
   */
  beginImport(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    parameters: ImportClusterParameters,
    options?: DatabasesImportOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Imports database files to target database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param parameters Storage information for importing into the cluster
   * @param options The options parameters.
   */
  beginImportAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    parameters: ImportClusterParameters,
    options?: DatabasesImportOptionalParams
  ): Promise<void>;
  /**
   * Exports a database file from target database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param parameters Storage information for exporting into the cluster
   * @param options The options parameters.
   */
  beginExport(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    parameters: ExportClusterParameters,
    options?: DatabasesExportOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Exports a database file from target database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param parameters Storage information for exporting into the cluster
   * @param options The options parameters.
   */
  beginExportAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    parameters: ExportClusterParameters,
    options?: DatabasesExportOptionalParams
  ): Promise<void>;
  /**
   * Forcibly removes the link to the specified database resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param parameters Information identifying the database to be unlinked.
   * @param options The options parameters.
   */
  beginForceUnlink(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    parameters: ForceUnlinkParameters,
    options?: DatabasesForceUnlinkOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Forcibly removes the link to the specified database resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param parameters Information identifying the database to be unlinked.
   * @param options The options parameters.
   */
  beginForceUnlinkAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    parameters: ForceUnlinkParameters,
    options?: DatabasesForceUnlinkOptionalParams
  ): Promise<void>;
  /**
   * Flushes all the keys in this database and also from its linked databases.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param parameters Information identifying the databases to be flushed
   * @param options The options parameters.
   */
  beginFlush(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    parameters: FlushParameters,
    options?: DatabasesFlushOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Flushes all the keys in this database and also from its linked databases.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param clusterName The name of the RedisEnterprise cluster.
   * @param databaseName The name of the database.
   * @param parameters Information identifying the databases to be flushed
   * @param options The options parameters.
   */
  beginFlushAndWait(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    parameters: FlushParameters,
    options?: DatabasesFlushOptionalParams
  ): Promise<void>;
}
