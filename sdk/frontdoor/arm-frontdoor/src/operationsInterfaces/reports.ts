/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  LatencyScorecardAggregationInterval,
  ReportsGetLatencyScorecardsOptionalParams,
  ReportsGetLatencyScorecardsResponse,
  TimeseriesAggregationInterval,
  TimeseriesType,
  ReportsGetTimeseriesOptionalParams,
  ReportsGetTimeseriesResponse
} from "../models";

/** Interface representing a Reports. */
export interface Reports {
  /**
   * Gets a Latency Scorecard for a given Experiment
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName The Profile identifier associated with the Tenant and Partner
   * @param experimentName The Experiment identifier associated with the Experiment
   * @param aggregationInterval The aggregation interval of the Latency Scorecard
   * @param options The options parameters.
   */
  getLatencyScorecards(
    resourceGroupName: string,
    profileName: string,
    experimentName: string,
    aggregationInterval: LatencyScorecardAggregationInterval,
    options?: ReportsGetLatencyScorecardsOptionalParams
  ): Promise<ReportsGetLatencyScorecardsResponse>;
  /**
   * Gets a Timeseries for a given Experiment
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName The Profile identifier associated with the Tenant and Partner
   * @param experimentName The Experiment identifier associated with the Experiment
   * @param startDateTimeUTC The start DateTime of the Timeseries in UTC
   * @param endDateTimeUTC The end DateTime of the Timeseries in UTC
   * @param aggregationInterval The aggregation interval of the Timeseries
   * @param timeseriesType The type of Timeseries
   * @param options The options parameters.
   */
  getTimeseries(
    resourceGroupName: string,
    profileName: string,
    experimentName: string,
    startDateTimeUTC: Date,
    endDateTimeUTC: Date,
    aggregationInterval: TimeseriesAggregationInterval,
    timeseriesType: TimeseriesType,
    options?: ReportsGetTimeseriesOptionalParams
  ): Promise<ReportsGetTimeseriesResponse>;
}
