/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const ErrorDetails: msRest.CompositeMapper = {
  serializedName: "ErrorDetails",
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: msRest.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetails"
            }
          }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureAsyncOperationResult: msRest.CompositeMapper = {
  serializedName: "AzureAsyncOperationResult",
  type: {
    name: "Composite",
    className: "AzureAsyncOperationResult",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SubResource: msRest.CompositeMapper = {
  serializedName: "SubResource",
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TagsObject: msRest.CompositeMapper = {
  serializedName: "TagsObject",
  type: {
    name: "Composite",
    className: "TagsObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Profile: msRest.CompositeMapper = {
  serializedName: "Profile",
  type: {
    name: "Composite",
    className: "Profile",
    modelProperties: {
      ...Resource.type.modelProperties,
      resourceState: {
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Endpoint: msRest.CompositeMapper = {
  serializedName: "Endpoint",
  type: {
    name: "Composite",
    className: "Endpoint",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "endpoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProfileUpdateModel: msRest.CompositeMapper = {
  serializedName: "ProfileUpdateModel",
  type: {
    name: "Composite",
    className: "ProfileUpdateModel",
    modelProperties: {
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ExperimentUpdateModel: msRest.CompositeMapper = {
  serializedName: "ExperimentUpdateModel",
  type: {
    name: "Composite",
    className: "ExperimentUpdateModel",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Experiment: msRest.CompositeMapper = {
  serializedName: "Experiment",
  type: {
    name: "Composite",
    className: "Experiment",
    modelProperties: {
      ...Resource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      endpointA: {
        serializedName: "properties.endpointA",
        type: {
          name: "Composite",
          className: "Endpoint"
        }
      },
      endpointB: {
        serializedName: "properties.endpointB",
        type: {
          name: "Composite",
          className: "Endpoint"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      scriptFileUri: {
        readOnly: true,
        serializedName: "properties.scriptFileUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LatencyMetric: msRest.CompositeMapper = {
  serializedName: "LatencyMetric",
  type: {
    name: "Composite",
    className: "LatencyMetric",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      endDateTimeUTC: {
        readOnly: true,
        serializedName: "endDateTimeUTC",
        type: {
          name: "String"
        }
      },
      aValue: {
        readOnly: true,
        serializedName: "aValue",
        type: {
          name: "Number"
        }
      },
      bValue: {
        readOnly: true,
        serializedName: "bValue",
        type: {
          name: "Number"
        }
      },
      delta: {
        readOnly: true,
        serializedName: "delta",
        type: {
          name: "Number"
        }
      },
      deltaPercent: {
        readOnly: true,
        serializedName: "deltaPercent",
        type: {
          name: "Number"
        }
      },
      aCLower95CI: {
        readOnly: true,
        serializedName: "aCLower95CI",
        type: {
          name: "Number"
        }
      },
      aHUpper95CI: {
        readOnly: true,
        serializedName: "aHUpper95CI",
        type: {
          name: "Number"
        }
      },
      bCLower95CI: {
        readOnly: true,
        serializedName: "bCLower95CI",
        type: {
          name: "Number"
        }
      },
      bUpper95CI: {
        readOnly: true,
        serializedName: "bUpper95CI",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LatencyScorecard: msRest.CompositeMapper = {
  serializedName: "LatencyScorecard",
  type: {
    name: "Composite",
    className: "LatencyScorecard",
    modelProperties: {
      ...Resource.type.modelProperties,
      latencyScorecardId: {
        readOnly: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      latencyScorecardName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      endpointA: {
        readOnly: true,
        serializedName: "properties.endpointA",
        type: {
          name: "String"
        }
      },
      endpointB: {
        readOnly: true,
        serializedName: "properties.endpointB",
        type: {
          name: "String"
        }
      },
      startDateTimeUTC: {
        readOnly: true,
        serializedName: "properties.startDateTimeUTC",
        type: {
          name: "DateTime"
        }
      },
      endDateTimeUTC: {
        readOnly: true,
        serializedName: "properties.endDateTimeUTC",
        type: {
          name: "DateTime"
        }
      },
      country: {
        readOnly: true,
        serializedName: "properties.country",
        type: {
          name: "String"
        }
      },
      latencyMetrics: {
        serializedName: "properties.latencyMetrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LatencyMetric"
            }
          }
        }
      }
    }
  }
};

export const TimeseriesDataPoint: msRest.CompositeMapper = {
  serializedName: "TimeseriesDataPoint",
  type: {
    name: "Composite",
    className: "TimeseriesDataPoint",
    modelProperties: {
      dateTimeUTC: {
        serializedName: "dateTimeUTC",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Timeseries: msRest.CompositeMapper = {
  serializedName: "Timeseries",
  type: {
    name: "Composite",
    className: "Timeseries",
    modelProperties: {
      ...Resource.type.modelProperties,
      endpoint: {
        serializedName: "properties.endpoint",
        type: {
          name: "String"
        }
      },
      startDateTimeUTC: {
        serializedName: "properties.startDateTimeUTC",
        type: {
          name: "String"
        }
      },
      endDateTimeUTC: {
        serializedName: "properties.endDateTimeUTC",
        type: {
          name: "String"
        }
      },
      aggregationInterval: {
        serializedName: "properties.aggregationInterval",
        type: {
          name: "String"
        }
      },
      timeseriesType: {
        serializedName: "properties.timeseriesType",
        type: {
          name: "String"
        }
      },
      country: {
        serializedName: "properties.country",
        type: {
          name: "String"
        }
      },
      timeseriesData: {
        serializedName: "properties.timeseriesData",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimeseriesDataPoint"
            }
          }
        }
      }
    }
  }
};

export const PreconfiguredEndpoint: msRest.CompositeMapper = {
  serializedName: "PreconfiguredEndpoint",
  type: {
    name: "Composite",
    className: "PreconfiguredEndpoint",
    modelProperties: {
      ...Resource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "properties.endpoint",
        type: {
          name: "String"
        }
      },
      endpointType: {
        serializedName: "properties.endpointType",
        type: {
          name: "String"
        }
      },
      backend: {
        serializedName: "properties.backend",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RulesEngine: msRest.CompositeMapper = {
  serializedName: "RulesEngine",
  type: {
    name: "Composite",
    className: "RulesEngine",
    modelProperties: {
      rules: {
        serializedName: "properties.rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RulesEngineRule"
            }
          }
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FrontDoor: msRest.CompositeMapper = {
  serializedName: "FrontDoor",
  type: {
    name: "Composite",
    className: "FrontDoor",
    modelProperties: {
      ...Resource.type.modelProperties,
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      routingRules: {
        serializedName: "properties.routingRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutingRule"
            }
          }
        }
      },
      loadBalancingSettings: {
        serializedName: "properties.loadBalancingSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LoadBalancingSettingsModel"
            }
          }
        }
      },
      healthProbeSettings: {
        serializedName: "properties.healthProbeSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthProbeSettingsModel"
            }
          }
        }
      },
      backendPools: {
        serializedName: "properties.backendPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackendPool"
            }
          }
        }
      },
      frontendEndpoints: {
        serializedName: "properties.frontendEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FrontendEndpoint"
            }
          }
        }
      },
      backendPoolsSettings: {
        serializedName: "properties.backendPoolsSettings",
        type: {
          name: "Composite",
          className: "BackendPoolsSettings"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      cname: {
        readOnly: true,
        serializedName: "properties.cname",
        type: {
          name: "String"
        }
      },
      frontdoorId: {
        readOnly: true,
        serializedName: "properties.frontdoorId",
        type: {
          name: "String"
        }
      },
      rulesEngines: {
        readOnly: true,
        serializedName: "properties.rulesEngines",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RulesEngine"
            }
          }
        }
      }
    }
  }
};

export const RoutingRule: msRest.CompositeMapper = {
  serializedName: "RoutingRule",
  type: {
    name: "Composite",
    className: "RoutingRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      frontendEndpoints: {
        serializedName: "properties.frontendEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      acceptedProtocols: {
        serializedName: "properties.acceptedProtocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      patternsToMatch: {
        serializedName: "properties.patternsToMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      },
      routeConfiguration: {
        serializedName: "properties.routeConfiguration",
        type: {
          name: "Composite",
          className: "RouteConfiguration"
        }
      },
      rulesEngine: {
        serializedName: "properties.rulesEngine",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancingSettingsModel: msRest.CompositeMapper = {
  serializedName: "LoadBalancingSettingsModel",
  type: {
    name: "Composite",
    className: "LoadBalancingSettingsModel",
    modelProperties: {
      ...SubResource.type.modelProperties,
      sampleSize: {
        serializedName: "properties.sampleSize",
        type: {
          name: "Number"
        }
      },
      successfulSamplesRequired: {
        serializedName: "properties.successfulSamplesRequired",
        type: {
          name: "Number"
        }
      },
      additionalLatencyMilliseconds: {
        serializedName: "properties.additionalLatencyMilliseconds",
        type: {
          name: "Number"
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthProbeSettingsModel: msRest.CompositeMapper = {
  serializedName: "HealthProbeSettingsModel",
  type: {
    name: "Composite",
    className: "HealthProbeSettingsModel",
    modelProperties: {
      ...SubResource.type.modelProperties,
      path: {
        serializedName: "properties.path",
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "properties.protocol",
        type: {
          name: "String"
        }
      },
      intervalInSeconds: {
        serializedName: "properties.intervalInSeconds",
        type: {
          name: "Number"
        }
      },
      healthProbeMethod: {
        serializedName: "properties.healthProbeMethod",
        defaultValue: 'HEAD',
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "properties.enabledState",
        type: {
          name: "String"
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackendPool: msRest.CompositeMapper = {
  serializedName: "BackendPool",
  type: {
    name: "Composite",
    className: "BackendPool",
    modelProperties: {
      ...SubResource.type.modelProperties,
      backends: {
        serializedName: "properties.backends",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Backend"
            }
          }
        }
      },
      loadBalancingSettings: {
        serializedName: "properties.loadBalancingSettings",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      healthProbeSettings: {
        serializedName: "properties.healthProbeSettings",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultCertificateSourceParametersVault: msRest.CompositeMapper = {
  serializedName: "KeyVaultCertificateSourceParameters_vault",
  type: {
    name: "Composite",
    className: "KeyVaultCertificateSourceParametersVault",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomHttpsConfiguration: msRest.CompositeMapper = {
  serializedName: "CustomHttpsConfiguration",
  type: {
    name: "Composite",
    className: "CustomHttpsConfiguration",
    modelProperties: {
      certificateSource: {
        required: true,
        serializedName: "certificateSource",
        type: {
          name: "String"
        }
      },
      protocolType: {
        required: true,
        isConstant: true,
        serializedName: "protocolType",
        defaultValue: 'ServerNameIndication',
        type: {
          name: "String"
        }
      },
      minimumTlsVersion: {
        required: true,
        serializedName: "minimumTlsVersion",
        type: {
          name: "String"
        }
      },
      vault: {
        serializedName: "keyVaultCertificateSourceParameters.vault",
        type: {
          name: "Composite",
          className: "KeyVaultCertificateSourceParametersVault"
        }
      },
      secretName: {
        serializedName: "keyVaultCertificateSourceParameters.secretName",
        type: {
          name: "String"
        }
      },
      secretVersion: {
        serializedName: "keyVaultCertificateSourceParameters.secretVersion",
        type: {
          name: "String"
        }
      },
      certificateType: {
        serializedName: "frontDoorCertificateSourceParameters.certificateType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FrontendEndpoint: msRest.CompositeMapper = {
  serializedName: "FrontendEndpoint",
  type: {
    name: "Composite",
    className: "FrontendEndpoint",
    modelProperties: {
      ...SubResource.type.modelProperties,
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      sessionAffinityEnabledState: {
        serializedName: "properties.sessionAffinityEnabledState",
        type: {
          name: "String"
        }
      },
      sessionAffinityTtlSeconds: {
        serializedName: "properties.sessionAffinityTtlSeconds",
        type: {
          name: "Number"
        }
      },
      webApplicationFirewallPolicyLink: {
        serializedName: "properties.webApplicationFirewallPolicyLink",
        type: {
          name: "Composite",
          className: "FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink"
        }
      },
      resourceState: {
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      customHttpsProvisioningState: {
        readOnly: true,
        serializedName: "properties.customHttpsProvisioningState",
        type: {
          name: "String"
        }
      },
      customHttpsProvisioningSubstate: {
        readOnly: true,
        serializedName: "properties.customHttpsProvisioningSubstate",
        type: {
          name: "String"
        }
      },
      customHttpsConfiguration: {
        readOnly: true,
        serializedName: "properties.customHttpsConfiguration",
        type: {
          name: "Composite",
          className: "CustomHttpsConfiguration"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackendPoolsSettings: msRest.CompositeMapper = {
  serializedName: "BackendPoolsSettings",
  type: {
    name: "Composite",
    className: "BackendPoolsSettings",
    modelProperties: {
      enforceCertificateNameCheck: {
        serializedName: "enforceCertificateNameCheck",
        defaultValue: 'Enabled',
        type: {
          name: "String"
        }
      },
      sendRecvTimeoutSeconds: {
        serializedName: "sendRecvTimeoutSeconds",
        constraints: {
          InclusiveMinimum: 16
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FrontDoorUpdateParameters: msRest.CompositeMapper = {
  serializedName: "FrontDoorUpdateParameters",
  type: {
    name: "Composite",
    className: "FrontDoorUpdateParameters",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      routingRules: {
        serializedName: "routingRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutingRule"
            }
          }
        }
      },
      loadBalancingSettings: {
        serializedName: "loadBalancingSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LoadBalancingSettingsModel"
            }
          }
        }
      },
      healthProbeSettings: {
        serializedName: "healthProbeSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthProbeSettingsModel"
            }
          }
        }
      },
      backendPools: {
        serializedName: "backendPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackendPool"
            }
          }
        }
      },
      frontendEndpoints: {
        serializedName: "frontendEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FrontendEndpoint"
            }
          }
        }
      },
      backendPoolsSettings: {
        serializedName: "backendPoolsSettings",
        type: {
          name: "Composite",
          className: "BackendPoolsSettings"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PurgeParameters: msRest.CompositeMapper = {
  serializedName: "PurgeParameters",
  type: {
    name: "Composite",
    className: "PurgeParameters",
    modelProperties: {
      contentPaths: {
        required: true,
        serializedName: "contentPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RoutingRuleListResult: msRest.CompositeMapper = {
  serializedName: "RoutingRuleListResult",
  type: {
    name: "Composite",
    className: "RoutingRuleListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutingRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouteConfiguration: msRest.CompositeMapper = {
  serializedName: "RouteConfiguration",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@odata.type",
      clientName: "odatatype"
    },
    uberParent: "RouteConfiguration",
    className: "RouteConfiguration",
    modelProperties: {
      odatatype: {
        required: true,
        serializedName: "@odata\\.type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutingRuleUpdateParameters: msRest.CompositeMapper = {
  serializedName: "RoutingRuleUpdateParameters",
  type: {
    name: "Composite",
    className: "RoutingRuleUpdateParameters",
    modelProperties: {
      frontendEndpoints: {
        serializedName: "frontendEndpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      acceptedProtocols: {
        serializedName: "acceptedProtocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      patternsToMatch: {
        serializedName: "patternsToMatch",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      routeConfiguration: {
        serializedName: "routeConfiguration",
        type: {
          name: "Composite",
          className: "RouteConfiguration"
        }
      },
      rulesEngine: {
        serializedName: "rulesEngine",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const CacheConfiguration: msRest.CompositeMapper = {
  serializedName: "CacheConfiguration",
  type: {
    name: "Composite",
    className: "CacheConfiguration",
    modelProperties: {
      queryParameterStripDirective: {
        serializedName: "queryParameterStripDirective",
        type: {
          name: "String"
        }
      },
      queryParameters: {
        serializedName: "queryParameters",
        type: {
          name: "String"
        }
      },
      dynamicCompression: {
        serializedName: "dynamicCompression",
        type: {
          name: "String"
        }
      },
      cacheDuration: {
        serializedName: "cacheDuration",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const ForwardingConfiguration: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
  type: {
    name: "Composite",
    polymorphicDiscriminator: RouteConfiguration.type.polymorphicDiscriminator,
    uberParent: "RouteConfiguration",
    className: "ForwardingConfiguration",
    modelProperties: {
      ...RouteConfiguration.type.modelProperties,
      customForwardingPath: {
        serializedName: "customForwardingPath",
        type: {
          name: "String"
        }
      },
      forwardingProtocol: {
        serializedName: "forwardingProtocol",
        type: {
          name: "String"
        }
      },
      cacheConfiguration: {
        serializedName: "cacheConfiguration",
        type: {
          name: "Composite",
          className: "CacheConfiguration"
        }
      },
      backendPool: {
        serializedName: "backendPool",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const RedirectConfiguration: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration",
  type: {
    name: "Composite",
    polymorphicDiscriminator: RouteConfiguration.type.polymorphicDiscriminator,
    uberParent: "RouteConfiguration",
    className: "RedirectConfiguration",
    modelProperties: {
      ...RouteConfiguration.type.modelProperties,
      redirectType: {
        serializedName: "redirectType",
        type: {
          name: "String"
        }
      },
      redirectProtocol: {
        serializedName: "redirectProtocol",
        type: {
          name: "String"
        }
      },
      customHost: {
        serializedName: "customHost",
        type: {
          name: "String"
        }
      },
      customPath: {
        serializedName: "customPath",
        type: {
          name: "String"
        }
      },
      customFragment: {
        serializedName: "customFragment",
        type: {
          name: "String"
        }
      },
      customQueryString: {
        serializedName: "customQueryString",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Backend: msRest.CompositeMapper = {
  serializedName: "Backend",
  type: {
    name: "Composite",
    className: "Backend",
    modelProperties: {
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      privateLinkAlias: {
        serializedName: "privateLinkAlias",
        type: {
          name: "String"
        }
      },
      privateEndpointStatus: {
        readOnly: true,
        serializedName: "privateEndpointStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "Pending",
            "Approved",
            "Rejected",
            "Disconnected",
            "Timeout"
          ]
        }
      },
      privateLinkApprovalMessage: {
        serializedName: "privateLinkApprovalMessage",
        type: {
          name: "String"
        }
      },
      httpPort: {
        serializedName: "httpPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      httpsPort: {
        serializedName: "httpsPort",
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      weight: {
        serializedName: "weight",
        constraints: {
          InclusiveMaximum: 1000,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      backendHostHeader: {
        serializedName: "backendHostHeader",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancingSettingsListResult: msRest.CompositeMapper = {
  serializedName: "LoadBalancingSettingsListResult",
  type: {
    name: "Composite",
    className: "LoadBalancingSettingsListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LoadBalancingSettingsModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoadBalancingSettingsUpdateParameters: msRest.CompositeMapper = {
  serializedName: "LoadBalancingSettingsUpdateParameters",
  type: {
    name: "Composite",
    className: "LoadBalancingSettingsUpdateParameters",
    modelProperties: {
      sampleSize: {
        serializedName: "sampleSize",
        type: {
          name: "Number"
        }
      },
      successfulSamplesRequired: {
        serializedName: "successfulSamplesRequired",
        type: {
          name: "Number"
        }
      },
      additionalLatencyMilliseconds: {
        serializedName: "additionalLatencyMilliseconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HealthProbeSettingsListResult: msRest.CompositeMapper = {
  serializedName: "HealthProbeSettingsListResult",
  type: {
    name: "Composite",
    className: "HealthProbeSettingsListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthProbeSettingsModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthProbeSettingsUpdateParameters: msRest.CompositeMapper = {
  serializedName: "HealthProbeSettingsUpdateParameters",
  type: {
    name: "Composite",
    className: "HealthProbeSettingsUpdateParameters",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      intervalInSeconds: {
        serializedName: "intervalInSeconds",
        type: {
          name: "Number"
        }
      },
      healthProbeMethod: {
        serializedName: "healthProbeMethod",
        defaultValue: 'HEAD',
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackendPoolUpdateParameters: msRest.CompositeMapper = {
  serializedName: "BackendPoolUpdateParameters",
  type: {
    name: "Composite",
    className: "BackendPoolUpdateParameters",
    modelProperties: {
      backends: {
        serializedName: "backends",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Backend"
            }
          }
        }
      },
      loadBalancingSettings: {
        serializedName: "loadBalancingSettings",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      },
      healthProbeSettings: {
        serializedName: "healthProbeSettings",
        type: {
          name: "Composite",
          className: "SubResource"
        }
      }
    }
  }
};

export const BackendPoolListResult: msRest.CompositeMapper = {
  serializedName: "BackendPoolListResult",
  type: {
    name: "Composite",
    className: "BackendPoolListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackendPool"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink: msRest.CompositeMapper = {
  serializedName: "FrontendEndpointUpdateParameters_webApplicationFirewallPolicyLink",
  type: {
    name: "Composite",
    className: "FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FrontendEndpointUpdateParameters: msRest.CompositeMapper = {
  serializedName: "FrontendEndpointUpdateParameters",
  type: {
    name: "Composite",
    className: "FrontendEndpointUpdateParameters",
    modelProperties: {
      hostName: {
        serializedName: "hostName",
        type: {
          name: "String"
        }
      },
      sessionAffinityEnabledState: {
        serializedName: "sessionAffinityEnabledState",
        type: {
          name: "String"
        }
      },
      sessionAffinityTtlSeconds: {
        serializedName: "sessionAffinityTtlSeconds",
        type: {
          name: "Number"
        }
      },
      webApplicationFirewallPolicyLink: {
        serializedName: "webApplicationFirewallPolicyLink",
        type: {
          name: "Composite",
          className: "FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink"
        }
      }
    }
  }
};

export const HeaderAction: msRest.CompositeMapper = {
  serializedName: "HeaderAction",
  type: {
    name: "Composite",
    className: "HeaderAction",
    modelProperties: {
      headerActionType: {
        required: true,
        serializedName: "headerActionType",
        type: {
          name: "String"
        }
      },
      headerName: {
        required: true,
        serializedName: "headerName",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RulesEngineMatchCondition: msRest.CompositeMapper = {
  serializedName: "RulesEngineMatchCondition",
  type: {
    name: "Composite",
    className: "RulesEngineMatchCondition",
    modelProperties: {
      rulesEngineMatchVariable: {
        required: true,
        serializedName: "rulesEngineMatchVariable",
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        type: {
          name: "String"
        }
      },
      rulesEngineOperator: {
        required: true,
        serializedName: "rulesEngineOperator",
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      rulesEngineMatchValue: {
        required: true,
        serializedName: "rulesEngineMatchValue",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RulesEngineAction: msRest.CompositeMapper = {
  serializedName: "RulesEngineAction",
  type: {
    name: "Composite",
    className: "RulesEngineAction",
    modelProperties: {
      requestHeaderActions: {
        serializedName: "requestHeaderActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HeaderAction"
            }
          }
        }
      },
      responseHeaderActions: {
        serializedName: "responseHeaderActions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HeaderAction"
            }
          }
        }
      },
      routeConfigurationOverride: {
        serializedName: "routeConfigurationOverride",
        type: {
          name: "Composite",
          className: "RouteConfiguration"
        }
      }
    }
  }
};

export const RulesEngineRule: msRest.CompositeMapper = {
  serializedName: "RulesEngineRule",
  type: {
    name: "Composite",
    className: "RulesEngineRule",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      priority: {
        required: true,
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      action: {
        required: true,
        serializedName: "action",
        type: {
          name: "Composite",
          className: "RulesEngineAction"
        }
      },
      matchConditions: {
        serializedName: "matchConditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RulesEngineMatchCondition"
            }
          }
        }
      },
      matchProcessingBehavior: {
        serializedName: "matchProcessingBehavior",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RulesEngineUpdateParameters: msRest.CompositeMapper = {
  serializedName: "RulesEngineUpdateParameters",
  type: {
    name: "Composite",
    className: "RulesEngineUpdateParameters",
    modelProperties: {
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RulesEngineRule"
            }
          }
        }
      }
    }
  }
};

export const ValidateCustomDomainInput: msRest.CompositeMapper = {
  serializedName: "ValidateCustomDomainInput",
  type: {
    name: "Composite",
    className: "ValidateCustomDomainInput",
    modelProperties: {
      hostName: {
        required: true,
        serializedName: "hostName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateCustomDomainOutput: msRest.CompositeMapper = {
  serializedName: "ValidateCustomDomainOutput",
  type: {
    name: "Composite",
    className: "ValidateCustomDomainOutput",
    modelProperties: {
      customDomainValidated: {
        readOnly: true,
        serializedName: "customDomainValidated",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityInput: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityInput",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityInput",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "Microsoft.Network/frontDoors",
            "Microsoft.Network/frontDoors/frontendEndpoints"
          ]
        }
      }
    }
  }
};

export const CheckNameAvailabilityOutput: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityOutput",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityOutput",
    modelProperties: {
      nameAvailability: {
        readOnly: true,
        serializedName: "nameAvailability",
        type: {
          name: "String"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicySettings: msRest.CompositeMapper = {
  serializedName: "PolicySettings",
  type: {
    name: "Composite",
    className: "PolicySettings",
    modelProperties: {
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      },
      redirectUrl: {
        serializedName: "redirectUrl",
        type: {
          name: "String"
        }
      },
      customBlockResponseStatusCode: {
        serializedName: "customBlockResponseStatusCode",
        type: {
          name: "Number"
        }
      },
      customBlockResponseBody: {
        serializedName: "customBlockResponseBody",
        constraints: {
          Pattern: /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{4})$/
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MatchCondition: msRest.CompositeMapper = {
  serializedName: "MatchCondition",
  type: {
    name: "Composite",
    className: "MatchCondition",
    modelProperties: {
      matchVariable: {
        required: true,
        serializedName: "matchVariable",
        type: {
          name: "String"
        }
      },
      selector: {
        serializedName: "selector",
        type: {
          name: "String"
        }
      },
      operator: {
        required: true,
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      negateCondition: {
        serializedName: "negateCondition",
        type: {
          name: "Boolean"
        }
      },
      matchValue: {
        required: true,
        serializedName: "matchValue",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transforms: {
        serializedName: "transforms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CustomRule: msRest.CompositeMapper = {
  serializedName: "CustomRule",
  type: {
    name: "Composite",
    className: "CustomRule",
    modelProperties: {
      name: {
        serializedName: "name",
        constraints: {
          MaxLength: 128
        },
        type: {
          name: "String"
        }
      },
      priority: {
        required: true,
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      ruleType: {
        required: true,
        serializedName: "ruleType",
        type: {
          name: "String"
        }
      },
      rateLimitDurationInMinutes: {
        serializedName: "rateLimitDurationInMinutes",
        constraints: {
          InclusiveMaximum: 5,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      rateLimitThreshold: {
        serializedName: "rateLimitThreshold",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      matchConditions: {
        required: true,
        serializedName: "matchConditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MatchCondition"
            }
          }
        }
      },
      action: {
        required: true,
        serializedName: "action",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomRuleList: msRest.CompositeMapper = {
  serializedName: "CustomRuleList",
  type: {
    name: "Composite",
    className: "CustomRuleList",
    modelProperties: {
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomRule"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleExclusion: msRest.CompositeMapper = {
  serializedName: "ManagedRuleExclusion",
  type: {
    name: "Composite",
    className: "ManagedRuleExclusion",
    modelProperties: {
      matchVariable: {
        required: true,
        serializedName: "matchVariable",
        type: {
          name: "String"
        }
      },
      selectorMatchOperator: {
        required: true,
        serializedName: "selectorMatchOperator",
        type: {
          name: "String"
        }
      },
      selector: {
        required: true,
        serializedName: "selector",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRuleOverride: msRest.CompositeMapper = {
  serializedName: "ManagedRuleOverride",
  type: {
    name: "Composite",
    className: "ManagedRuleOverride",
    modelProperties: {
      ruleId: {
        required: true,
        serializedName: "ruleId",
        type: {
          name: "String"
        }
      },
      enabledState: {
        serializedName: "enabledState",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      },
      exclusions: {
        serializedName: "exclusions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleExclusion"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleGroupOverride: msRest.CompositeMapper = {
  serializedName: "ManagedRuleGroupOverride",
  type: {
    name: "Composite",
    className: "ManagedRuleGroupOverride",
    modelProperties: {
      ruleGroupName: {
        required: true,
        serializedName: "ruleGroupName",
        type: {
          name: "String"
        }
      },
      exclusions: {
        serializedName: "exclusions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleExclusion"
            }
          }
        }
      },
      rules: {
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleOverride"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleSet: msRest.CompositeMapper = {
  serializedName: "ManagedRuleSet",
  type: {
    name: "Composite",
    className: "ManagedRuleSet",
    modelProperties: {
      ruleSetType: {
        required: true,
        serializedName: "ruleSetType",
        type: {
          name: "String"
        }
      },
      ruleSetVersion: {
        required: true,
        serializedName: "ruleSetVersion",
        type: {
          name: "String"
        }
      },
      exclusions: {
        serializedName: "exclusions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleExclusion"
            }
          }
        }
      },
      ruleGroupOverrides: {
        serializedName: "ruleGroupOverrides",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleGroupOverride"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleSetList: msRest.CompositeMapper = {
  serializedName: "ManagedRuleSetList",
  type: {
    name: "Composite",
    className: "ManagedRuleSetList",
    modelProperties: {
      managedRuleSets: {
        serializedName: "managedRuleSets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleSet"
            }
          }
        }
      }
    }
  }
};

export const FrontendEndpointLink: msRest.CompositeMapper = {
  serializedName: "FrontendEndpointLink",
  type: {
    name: "Composite",
    className: "FrontendEndpointLink",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebApplicationFirewallPolicy: msRest.CompositeMapper = {
  serializedName: "WebApplicationFirewallPolicy",
  type: {
    name: "Composite",
    className: "WebApplicationFirewallPolicy",
    modelProperties: {
      ...Resource.type.modelProperties,
      policySettings: {
        serializedName: "properties.policySettings",
        type: {
          name: "Composite",
          className: "PolicySettings"
        }
      },
      customRules: {
        serializedName: "properties.customRules",
        type: {
          name: "Composite",
          className: "CustomRuleList"
        }
      },
      managedRules: {
        serializedName: "properties.managedRules",
        type: {
          name: "Composite",
          className: "ManagedRuleSetList"
        }
      },
      frontendEndpointLinks: {
        readOnly: true,
        serializedName: "properties.frontendEndpointLinks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FrontendEndpointLink"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      resourceState: {
        readOnly: true,
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRuleDefinition: msRest.CompositeMapper = {
  serializedName: "ManagedRuleDefinition",
  type: {
    name: "Composite",
    className: "ManagedRuleDefinition",
    modelProperties: {
      ruleId: {
        readOnly: true,
        serializedName: "ruleId",
        type: {
          name: "String"
        }
      },
      defaultState: {
        readOnly: true,
        serializedName: "defaultState",
        type: {
          name: "String"
        }
      },
      defaultAction: {
        readOnly: true,
        serializedName: "defaultAction",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRuleGroupDefinition: msRest.CompositeMapper = {
  serializedName: "ManagedRuleGroupDefinition",
  type: {
    name: "Composite",
    className: "ManagedRuleGroupDefinition",
    modelProperties: {
      ruleGroupName: {
        readOnly: true,
        serializedName: "ruleGroupName",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      rules: {
        readOnly: true,
        serializedName: "rules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleDefinition"
            }
          }
        }
      }
    }
  }
};

export const ManagedRuleSetDefinition: msRest.CompositeMapper = {
  serializedName: "ManagedRuleSetDefinition",
  type: {
    name: "Composite",
    className: "ManagedRuleSetDefinition",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      ruleSetId: {
        readOnly: true,
        serializedName: "properties.ruleSetId",
        type: {
          name: "String"
        }
      },
      ruleSetType: {
        readOnly: true,
        serializedName: "properties.ruleSetType",
        type: {
          name: "String"
        }
      },
      ruleSetVersion: {
        readOnly: true,
        serializedName: "properties.ruleSetVersion",
        type: {
          name: "String"
        }
      },
      ruleGroups: {
        readOnly: true,
        serializedName: "properties.ruleGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleGroupDefinition"
            }
          }
        }
      }
    }
  }
};

export const ProfileList: msRest.CompositeMapper = {
  serializedName: "ProfileList",
  type: {
    name: "Composite",
    className: "ProfileList",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Profile"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PreconfiguredEndpointList: msRest.CompositeMapper = {
  serializedName: "PreconfiguredEndpointList",
  type: {
    name: "Composite",
    className: "PreconfiguredEndpointList",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PreconfiguredEndpoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExperimentList: msRest.CompositeMapper = {
  serializedName: "ExperimentList",
  type: {
    name: "Composite",
    className: "ExperimentList",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Experiment"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FrontDoorListResult: msRest.CompositeMapper = {
  serializedName: "FrontDoorListResult",
  type: {
    name: "Composite",
    className: "FrontDoorListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FrontDoor"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FrontendEndpointsListResult: msRest.CompositeMapper = {
  serializedName: "FrontendEndpointsListResult",
  type: {
    name: "Composite",
    className: "FrontendEndpointsListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FrontendEndpoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RulesEngineListResult: msRest.CompositeMapper = {
  serializedName: "RulesEngineListResult",
  type: {
    name: "Composite",
    className: "RulesEngineListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RulesEngine"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebApplicationFirewallPolicyList: msRest.CompositeMapper = {
  serializedName: "WebApplicationFirewallPolicyList",
  type: {
    name: "Composite",
    className: "WebApplicationFirewallPolicyList",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebApplicationFirewallPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedRuleSetDefinitionList: msRest.CompositeMapper = {
  serializedName: "ManagedRuleSetDefinitionList",
  type: {
    name: "Composite",
    className: "ManagedRuleSetDefinitionList",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedRuleSetDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const discriminators = {
  'RouteConfiguration' : RouteConfiguration,
  'RouteConfiguration.#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration' : ForwardingConfiguration,
  'RouteConfiguration.#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration' : RedirectConfiguration

};
