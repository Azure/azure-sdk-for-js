/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/healthProbeSettingsMappers";
import * as Parameters from "../models/parameters";
import { FrontDoorManagementClientContext } from "../frontDoorManagementClientContext";

/** Class representing a HealthProbeSettings. */
export class HealthProbeSettings {
  private readonly client: FrontDoorManagementClientContext;

  /**
   * Create a HealthProbeSettings.
   * @param {FrontDoorManagementClientContext} client Reference to the service client.
   */
  constructor(client: FrontDoorManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all of the HealthProbeSettings within a Front Door.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param [options] The optional parameters
   * @returns Promise<Models.HealthProbeSettingsListByFrontDoorResponse>
   */
  listByFrontDoor(resourceGroupName: string, frontDoorName: string, options?: msRest.RequestOptionsBase): Promise<Models.HealthProbeSettingsListByFrontDoorResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param callback The callback
   */
  listByFrontDoor(resourceGroupName: string, frontDoorName: string, callback: msRest.ServiceCallback<Models.HealthProbeSettingsListResult>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByFrontDoor(resourceGroupName: string, frontDoorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HealthProbeSettingsListResult>): void;
  listByFrontDoor(resourceGroupName: string, frontDoorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HealthProbeSettingsListResult>, callback?: msRest.ServiceCallback<Models.HealthProbeSettingsListResult>): Promise<Models.HealthProbeSettingsListByFrontDoorResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        frontDoorName,
        options
      },
      listByFrontDoorOperationSpec,
      callback) as Promise<Models.HealthProbeSettingsListByFrontDoorResponse>;
  }

  /**
   * Gets a HealthProbeSettings with the specified Rule name within the specified Front Door.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param healthProbeSettingsName Name of the health probe settings which is unique within the
   * Front Door.
   * @param [options] The optional parameters
   * @returns Promise<Models.HealthProbeSettingsGetResponse>
   */
  get(resourceGroupName: string, frontDoorName: string, healthProbeSettingsName: string, options?: msRest.RequestOptionsBase): Promise<Models.HealthProbeSettingsGetResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param healthProbeSettingsName Name of the health probe settings which is unique within the
   * Front Door.
   * @param callback The callback
   */
  get(resourceGroupName: string, frontDoorName: string, healthProbeSettingsName: string, callback: msRest.ServiceCallback<Models.HealthProbeSettingsModel>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param healthProbeSettingsName Name of the health probe settings which is unique within the
   * Front Door.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, frontDoorName: string, healthProbeSettingsName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HealthProbeSettingsModel>): void;
  get(resourceGroupName: string, frontDoorName: string, healthProbeSettingsName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HealthProbeSettingsModel>, callback?: msRest.ServiceCallback<Models.HealthProbeSettingsModel>): Promise<Models.HealthProbeSettingsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        frontDoorName,
        healthProbeSettingsName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.HealthProbeSettingsGetResponse>;
  }

  /**
   * Creates a new HealthProbeSettings with the specified Rule name within the specified Front Door.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param healthProbeSettingsName Name of the health probe settings which is unique within the
   * Front Door.
   * @param healthProbeSettingsParameters HealthProbeSettings properties needed to create a new Front
   * Door.
   * @param [options] The optional parameters
   * @returns Promise<Models.HealthProbeSettingsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, frontDoorName: string, healthProbeSettingsName: string, healthProbeSettingsParameters: Models.HealthProbeSettingsModel, options?: msRest.RequestOptionsBase): Promise<Models.HealthProbeSettingsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,frontDoorName,healthProbeSettingsName,healthProbeSettingsParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.HealthProbeSettingsCreateOrUpdateResponse>;
  }

  /**
   * Deletes an existing HealthProbeSettings with the specified parameters.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param healthProbeSettingsName Name of the health probe settings which is unique within the
   * Front Door.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, frontDoorName: string, healthProbeSettingsName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,frontDoorName,healthProbeSettingsName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates a new HealthProbeSettings with the specified Rule name within the specified Front Door.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param healthProbeSettingsName Name of the health probe settings which is unique within the
   * Front Door.
   * @param healthProbeSettingsParameters HealthProbeSettings properties needed to create a new Front
   * Door.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, frontDoorName: string, healthProbeSettingsName: string, healthProbeSettingsParameters: Models.HealthProbeSettingsModel, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        frontDoorName,
        healthProbeSettingsName,
        healthProbeSettingsParameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes an existing HealthProbeSettings with the specified parameters.
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param frontDoorName Name of the Front Door which is globally unique.
   * @param healthProbeSettingsName Name of the health probe settings which is unique within the
   * Front Door.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, frontDoorName: string, healthProbeSettingsName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        frontDoorName,
        healthProbeSettingsName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists all of the HealthProbeSettings within a Front Door.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.HealthProbeSettingsListByFrontDoorNextResponse>
   */
  listByFrontDoorNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.HealthProbeSettingsListByFrontDoorNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByFrontDoorNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.HealthProbeSettingsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByFrontDoorNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HealthProbeSettingsListResult>): void;
  listByFrontDoorNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HealthProbeSettingsListResult>, callback?: msRest.ServiceCallback<Models.HealthProbeSettingsListResult>): Promise<Models.HealthProbeSettingsListByFrontDoorNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByFrontDoorNextOperationSpec,
      callback) as Promise<Models.HealthProbeSettingsListByFrontDoorNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByFrontDoorOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/healthProbeSettings",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName0,
    Parameters.frontDoorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HealthProbeSettingsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/healthProbeSettings/{healthProbeSettingsName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName0,
    Parameters.frontDoorName,
    Parameters.healthProbeSettingsName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HealthProbeSettingsModel
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/healthProbeSettings/{healthProbeSettingsName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName0,
    Parameters.frontDoorName,
    Parameters.healthProbeSettingsName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "healthProbeSettingsParameters",
    mapper: {
      ...Mappers.HealthProbeSettingsModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HealthProbeSettingsModel
    },
    201: {
      bodyMapper: Mappers.HealthProbeSettingsModel
    },
    202: {
      bodyMapper: Mappers.HealthProbeSettingsModel
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/healthProbeSettings/{healthProbeSettingsName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName0,
    Parameters.frontDoorName,
    Parameters.healthProbeSettingsName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByFrontDoorNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HealthProbeSettingsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
