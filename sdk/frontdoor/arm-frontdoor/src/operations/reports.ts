/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Reports } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { FrontDoorManagementClient } from "../frontDoorManagementClient";
import {
  LatencyScorecardAggregationInterval,
  ReportsGetLatencyScorecardsOptionalParams,
  ReportsGetLatencyScorecardsResponse,
  TimeseriesAggregationInterval,
  TimeseriesType,
  ReportsGetTimeseriesOptionalParams,
  ReportsGetTimeseriesResponse
} from "../models";

/** Class containing Reports operations. */
export class ReportsImpl implements Reports {
  private readonly client: FrontDoorManagementClient;

  /**
   * Initialize a new instance of the class Reports class.
   * @param client Reference to the service client
   */
  constructor(client: FrontDoorManagementClient) {
    this.client = client;
  }

  /**
   * Gets a Latency Scorecard for a given Experiment
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName The Profile identifier associated with the Tenant and Partner
   * @param experimentName The Experiment identifier associated with the Experiment
   * @param aggregationInterval The aggregation interval of the Latency Scorecard
   * @param options The options parameters.
   */
  getLatencyScorecards(
    resourceGroupName: string,
    profileName: string,
    experimentName: string,
    aggregationInterval: LatencyScorecardAggregationInterval,
    options?: ReportsGetLatencyScorecardsOptionalParams
  ): Promise<ReportsGetLatencyScorecardsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        experimentName,
        aggregationInterval,
        options
      },
      getLatencyScorecardsOperationSpec
    );
  }

  /**
   * Gets a Timeseries for a given Experiment
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName The Profile identifier associated with the Tenant and Partner
   * @param experimentName The Experiment identifier associated with the Experiment
   * @param startDateTimeUTC The start DateTime of the Timeseries in UTC
   * @param endDateTimeUTC The end DateTime of the Timeseries in UTC
   * @param aggregationInterval The aggregation interval of the Timeseries
   * @param timeseriesType The type of Timeseries
   * @param options The options parameters.
   */
  getTimeseries(
    resourceGroupName: string,
    profileName: string,
    experimentName: string,
    startDateTimeUTC: Date,
    endDateTimeUTC: Date,
    aggregationInterval: TimeseriesAggregationInterval,
    timeseriesType: TimeseriesType,
    options?: ReportsGetTimeseriesOptionalParams
  ): Promise<ReportsGetTimeseriesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        experimentName,
        startDateTimeUTC,
        endDateTimeUTC,
        aggregationInterval,
        timeseriesType,
        options
      },
      getTimeseriesOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getLatencyScorecardsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/LatencyScorecard",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LatencyScorecard
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.endDateTimeUTC,
    Parameters.country,
    Parameters.aggregationInterval
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.experimentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getTimeseriesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/Timeseries",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Timeseries
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.country,
    Parameters.startDateTimeUTC,
    Parameters.endDateTimeUTC1,
    Parameters.aggregationInterval1,
    Parameters.timeseriesType,
    Parameters.endpoint
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.experimentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
