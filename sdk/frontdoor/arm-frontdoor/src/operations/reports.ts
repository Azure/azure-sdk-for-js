/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/reportsMappers";
import * as Parameters from "../models/parameters";
import { FrontDoorManagementClientContext } from "../frontDoorManagementClientContext";

/** Class representing a Reports. */
export class Reports {
  private readonly client: FrontDoorManagementClientContext;

  /**
   * Create a Reports.
   * @param {FrontDoorManagementClientContext} client Reference to the service client.
   */
  constructor(client: FrontDoorManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Gets a Latency Scorecard for a given Experiment
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName The Profile identifier associated with the Tenant and Partner
   * @param experimentName The Experiment identifier associated with the Experiment
   * @param aggregationInterval The aggregation interval of the Latency Scorecard. Possible values
   * include: 'Daily', 'Weekly', 'Monthly'
   * @param [options] The optional parameters
   * @returns Promise<Models.ReportsGetLatencyScorecardsResponse>
   */
  getLatencyScorecards(resourceGroupName: string, profileName: string, experimentName: string, aggregationInterval: Models.LatencyScorecardAggregationInterval, options?: Models.ReportsGetLatencyScorecardsOptionalParams): Promise<Models.ReportsGetLatencyScorecardsResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName The Profile identifier associated with the Tenant and Partner
   * @param experimentName The Experiment identifier associated with the Experiment
   * @param aggregationInterval The aggregation interval of the Latency Scorecard. Possible values
   * include: 'Daily', 'Weekly', 'Monthly'
   * @param callback The callback
   */
  getLatencyScorecards(resourceGroupName: string, profileName: string, experimentName: string, aggregationInterval: Models.LatencyScorecardAggregationInterval, callback: msRest.ServiceCallback<Models.LatencyScorecard>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName The Profile identifier associated with the Tenant and Partner
   * @param experimentName The Experiment identifier associated with the Experiment
   * @param aggregationInterval The aggregation interval of the Latency Scorecard. Possible values
   * include: 'Daily', 'Weekly', 'Monthly'
   * @param options The optional parameters
   * @param callback The callback
   */
  getLatencyScorecards(resourceGroupName: string, profileName: string, experimentName: string, aggregationInterval: Models.LatencyScorecardAggregationInterval, options: Models.ReportsGetLatencyScorecardsOptionalParams, callback: msRest.ServiceCallback<Models.LatencyScorecard>): void;
  getLatencyScorecards(resourceGroupName: string, profileName: string, experimentName: string, aggregationInterval: Models.LatencyScorecardAggregationInterval, options?: Models.ReportsGetLatencyScorecardsOptionalParams | msRest.ServiceCallback<Models.LatencyScorecard>, callback?: msRest.ServiceCallback<Models.LatencyScorecard>): Promise<Models.ReportsGetLatencyScorecardsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        experimentName,
        aggregationInterval,
        options
      },
      getLatencyScorecardsOperationSpec,
      callback) as Promise<Models.ReportsGetLatencyScorecardsResponse>;
  }

  /**
   * @summary Gets a Timeseries for a given Experiment
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName The Profile identifier associated with the Tenant and Partner
   * @param experimentName The Experiment identifier associated with the Experiment
   * @param startDateTimeUTC The start DateTime of the Timeseries in UTC
   * @param endDateTimeUTC The end DateTime of the Timeseries in UTC
   * @param aggregationInterval The aggregation interval of the Timeseries. Possible values include:
   * 'Hourly', 'Daily'
   * @param timeseriesType The type of Timeseries. Possible values include: 'MeasurementCounts',
   * 'LatencyP50', 'LatencyP75', 'LatencyP95'
   * @param [options] The optional parameters
   * @returns Promise<Models.ReportsGetTimeseriesResponse>
   */
  getTimeseries(resourceGroupName: string, profileName: string, experimentName: string, startDateTimeUTC: Date | string, endDateTimeUTC: Date | string, aggregationInterval: Models.TimeseriesAggregationInterval, timeseriesType: Models.TimeseriesType, options?: Models.ReportsGetTimeseriesOptionalParams): Promise<Models.ReportsGetTimeseriesResponse>;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName The Profile identifier associated with the Tenant and Partner
   * @param experimentName The Experiment identifier associated with the Experiment
   * @param startDateTimeUTC The start DateTime of the Timeseries in UTC
   * @param endDateTimeUTC The end DateTime of the Timeseries in UTC
   * @param aggregationInterval The aggregation interval of the Timeseries. Possible values include:
   * 'Hourly', 'Daily'
   * @param timeseriesType The type of Timeseries. Possible values include: 'MeasurementCounts',
   * 'LatencyP50', 'LatencyP75', 'LatencyP95'
   * @param callback The callback
   */
  getTimeseries(resourceGroupName: string, profileName: string, experimentName: string, startDateTimeUTC: Date | string, endDateTimeUTC: Date | string, aggregationInterval: Models.TimeseriesAggregationInterval, timeseriesType: Models.TimeseriesType, callback: msRest.ServiceCallback<Models.Timeseries>): void;
  /**
   * @param resourceGroupName Name of the Resource group within the Azure subscription.
   * @param profileName The Profile identifier associated with the Tenant and Partner
   * @param experimentName The Experiment identifier associated with the Experiment
   * @param startDateTimeUTC The start DateTime of the Timeseries in UTC
   * @param endDateTimeUTC The end DateTime of the Timeseries in UTC
   * @param aggregationInterval The aggregation interval of the Timeseries. Possible values include:
   * 'Hourly', 'Daily'
   * @param timeseriesType The type of Timeseries. Possible values include: 'MeasurementCounts',
   * 'LatencyP50', 'LatencyP75', 'LatencyP95'
   * @param options The optional parameters
   * @param callback The callback
   */
  getTimeseries(resourceGroupName: string, profileName: string, experimentName: string, startDateTimeUTC: Date | string, endDateTimeUTC: Date | string, aggregationInterval: Models.TimeseriesAggregationInterval, timeseriesType: Models.TimeseriesType, options: Models.ReportsGetTimeseriesOptionalParams, callback: msRest.ServiceCallback<Models.Timeseries>): void;
  getTimeseries(resourceGroupName: string, profileName: string, experimentName: string, startDateTimeUTC: Date | string, endDateTimeUTC: Date | string, aggregationInterval: Models.TimeseriesAggregationInterval, timeseriesType: Models.TimeseriesType, options?: Models.ReportsGetTimeseriesOptionalParams | msRest.ServiceCallback<Models.Timeseries>, callback?: msRest.ServiceCallback<Models.Timeseries>): Promise<Models.ReportsGetTimeseriesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        experimentName,
        startDateTimeUTC,
        endDateTimeUTC,
        aggregationInterval,
        timeseriesType,
        options
      },
      getTimeseriesOperationSpec,
      callback) as Promise<Models.ReportsGetTimeseriesResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getLatencyScorecardsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/LatencyScorecard",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.experimentName
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.endDateTimeUTC0,
    Parameters.country,
    Parameters.aggregationInterval
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LatencyScorecard
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getTimeseriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/NetworkExperimentProfiles/{profileName}/Experiments/{experimentName}/Timeseries",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.experimentName
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.startDateTimeUTC,
    Parameters.endDateTimeUTC1,
    Parameters.aggregationInterval,
    Parameters.timeseriesType,
    Parameters.endpoint,
    Parameters.country
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Timeseries
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
