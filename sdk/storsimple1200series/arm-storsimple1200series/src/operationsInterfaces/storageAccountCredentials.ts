/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  StorageAccountCredential,
  StorageAccountCredentialsListByManagerOptionalParams,
  StorageAccountCredentialsGetOptionalParams,
  StorageAccountCredentialsGetResponse,
  StorageAccountCredentialsCreateOrUpdateOptionalParams,
  StorageAccountCredentialsCreateOrUpdateResponse,
  StorageAccountCredentialsDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a StorageAccountCredentials. */
export interface StorageAccountCredentials {
  /**
   * Retrieves all the storage account credentials in a manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  listByManager(
    resourceGroupName: string,
    managerName: string,
    options?: StorageAccountCredentialsListByManagerOptionalParams
  ): PagedAsyncIterableIterator<StorageAccountCredential>;
  /**
   * Returns the properties of the specified storage account credential name.
   * @param credentialName The name of storage account credential to be fetched.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  get(
    credentialName: string,
    resourceGroupName: string,
    managerName: string,
    options?: StorageAccountCredentialsGetOptionalParams
  ): Promise<StorageAccountCredentialsGetResponse>;
  /**
   * Creates or updates the storage account credential
   * @param credentialName The credential name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param storageAccount The storage account credential to be added or updated.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    credentialName: string,
    resourceGroupName: string,
    managerName: string,
    storageAccount: StorageAccountCredential,
    options?: StorageAccountCredentialsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<StorageAccountCredentialsCreateOrUpdateResponse>,
      StorageAccountCredentialsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates the storage account credential
   * @param credentialName The credential name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param storageAccount The storage account credential to be added or updated.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    credentialName: string,
    resourceGroupName: string,
    managerName: string,
    storageAccount: StorageAccountCredential,
    options?: StorageAccountCredentialsCreateOrUpdateOptionalParams
  ): Promise<StorageAccountCredentialsCreateOrUpdateResponse>;
  /**
   * Deletes the storage account credential
   * @param credentialName The name of the storage account credential.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginDelete(
    credentialName: string,
    resourceGroupName: string,
    managerName: string,
    options?: StorageAccountCredentialsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes the storage account credential
   * @param credentialName The name of the storage account credential.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    credentialName: string,
    resourceGroupName: string,
    managerName: string,
    options?: StorageAccountCredentialsDeleteOptionalParams
  ): Promise<void>;
}
