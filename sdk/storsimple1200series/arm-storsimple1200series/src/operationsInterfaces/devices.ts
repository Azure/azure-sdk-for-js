/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Device,
  DevicesListByManagerOptionalParams,
  DevicesListFailoverTargetOptionalParams,
  Metrics,
  DevicesListMetricsOptionalParams,
  MetricDefinition,
  DevicesListMetricDefinitionOptionalParams,
  DevicesGetOptionalParams,
  DevicesGetResponse,
  DevicesDeleteOptionalParams,
  DevicePatch,
  DevicesPatchOptionalParams,
  DevicesPatchResponse,
  DevicesGetAlertSettingsOptionalParams,
  DevicesGetAlertSettingsResponse,
  AlertSettings,
  DevicesCreateOrUpdateAlertSettingsOptionalParams,
  DevicesCreateOrUpdateAlertSettingsResponse,
  DevicesDeactivateOptionalParams,
  DevicesDownloadUpdatesOptionalParams,
  FailoverRequest,
  DevicesFailoverOptionalParams,
  DevicesInstallUpdatesOptionalParams,
  DevicesGetNetworkSettingsOptionalParams,
  DevicesGetNetworkSettingsResponse,
  DevicesScanForUpdatesOptionalParams,
  SecuritySettings,
  DevicesCreateOrUpdateSecuritySettingsOptionalParams,
  DevicesGetTimeSettingsOptionalParams,
  DevicesGetTimeSettingsResponse,
  DevicesGetUpdateSummaryOptionalParams,
  DevicesGetUpdateSummaryResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Devices. */
export interface Devices {
  /**
   * Retrieves all the devices in a manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  listByManager(
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListByManagerOptionalParams
  ): PagedAsyncIterableIterator<Device>;
  /**
   * Retrieves all the devices which can be used as failover targets for the given device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  listFailoverTarget(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListFailoverTargetOptionalParams
  ): PagedAsyncIterableIterator<Device>;
  /**
   * Retrieves the device metrics.
   * @param deviceName The name of the appliance.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  listMetrics(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListMetricsOptionalParams
  ): PagedAsyncIterableIterator<Metrics>;
  /**
   * Retrieves metric definition of all metrics aggregated at device.
   * @param deviceName The name of the appliance.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  listMetricDefinition(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListMetricDefinitionOptionalParams
  ): PagedAsyncIterableIterator<MetricDefinition>;
  /**
   * Returns the properties of the specified device name.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  get(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesGetOptionalParams
  ): Promise<DevicesGetResponse>;
  /**
   * Deletes the device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginDelete(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes the device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Patches the device.
   * @param deviceName The device Name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param devicePatch Patch representation of the device.
   * @param options The options parameters.
   */
  beginPatch(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    devicePatch: DevicePatch,
    options?: DevicesPatchOptionalParams
  ): Promise<
    PollerLike<PollOperationState<DevicesPatchResponse>, DevicesPatchResponse>
  >;
  /**
   * Patches the device.
   * @param deviceName The device Name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param devicePatch Patch representation of the device.
   * @param options The options parameters.
   */
  beginPatchAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    devicePatch: DevicePatch,
    options?: DevicesPatchOptionalParams
  ): Promise<DevicesPatchResponse>;
  /**
   * Returns the alert settings of the specified device name.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getAlertSettings(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesGetAlertSettingsOptionalParams
  ): Promise<DevicesGetAlertSettingsResponse>;
  /**
   * Creates or updates the alert settings
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param alertSettings The alert settings.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAlertSettings(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    alertSettings: AlertSettings,
    options?: DevicesCreateOrUpdateAlertSettingsOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DevicesCreateOrUpdateAlertSettingsResponse>,
      DevicesCreateOrUpdateAlertSettingsResponse
    >
  >;
  /**
   * Creates or updates the alert settings
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param alertSettings The alert settings.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAlertSettingsAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    alertSettings: AlertSettings,
    options?: DevicesCreateOrUpdateAlertSettingsOptionalParams
  ): Promise<DevicesCreateOrUpdateAlertSettingsResponse>;
  /**
   * Deactivates the device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginDeactivate(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesDeactivateOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deactivates the device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginDeactivateAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesDeactivateOptionalParams
  ): Promise<void>;
  /**
   * Downloads updates on the device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginDownloadUpdates(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesDownloadUpdatesOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Downloads updates on the device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginDownloadUpdatesAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesDownloadUpdatesOptionalParams
  ): Promise<void>;
  /**
   * Fails over the device to another device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param failoverRequest The failover request.
   * @param options The options parameters.
   */
  beginFailover(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    failoverRequest: FailoverRequest,
    options?: DevicesFailoverOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Fails over the device to another device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param failoverRequest The failover request.
   * @param options The options parameters.
   */
  beginFailoverAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    failoverRequest: FailoverRequest,
    options?: DevicesFailoverOptionalParams
  ): Promise<void>;
  /**
   * Installs the updates on the device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginInstallUpdates(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesInstallUpdatesOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Installs the updates on the device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginInstallUpdatesAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesInstallUpdatesOptionalParams
  ): Promise<void>;
  /**
   * Returns the network settings of the specified device name.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getNetworkSettings(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesGetNetworkSettingsOptionalParams
  ): Promise<DevicesGetNetworkSettingsResponse>;
  /**
   * Scans for updates on the device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginScanForUpdates(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesScanForUpdatesOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Scans for updates on the device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginScanForUpdatesAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesScanForUpdatesOptionalParams
  ): Promise<void>;
  /**
   * Creates or updates the security settings.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param securitySettings The security settings.
   * @param options The options parameters.
   */
  beginCreateOrUpdateSecuritySettings(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    securitySettings: SecuritySettings,
    options?: DevicesCreateOrUpdateSecuritySettingsOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Creates or updates the security settings.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param securitySettings The security settings.
   * @param options The options parameters.
   */
  beginCreateOrUpdateSecuritySettingsAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    securitySettings: SecuritySettings,
    options?: DevicesCreateOrUpdateSecuritySettingsOptionalParams
  ): Promise<void>;
  /**
   * Returns the time settings of the specified device name.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getTimeSettings(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesGetTimeSettingsOptionalParams
  ): Promise<DevicesGetTimeSettingsResponse>;
  /**
   * Returns the update summary of the specified device name.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getUpdateSummary(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesGetUpdateSummaryOptionalParams
  ): Promise<DevicesGetUpdateSummaryResponse>;
}
