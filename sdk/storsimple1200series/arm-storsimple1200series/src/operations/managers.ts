/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { Managers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorSimpleManagementClient } from "../storSimpleManagementClient";
import {
  Manager,
  ManagersListOptionalParams,
  ManagersListResponse,
  ManagersListByResourceGroupOptionalParams,
  ManagersListByResourceGroupResponse,
  Metrics,
  ManagersListMetricsOptionalParams,
  ManagersListMetricsResponse,
  MetricDefinition,
  ManagersListMetricDefinitionOptionalParams,
  ManagersListMetricDefinitionResponse,
  ManagersGetOptionalParams,
  ManagersGetResponse,
  ManagersCreateOrUpdateOptionalParams,
  ManagersCreateOrUpdateResponse,
  ManagersDeleteOptionalParams,
  ManagerPatch,
  ManagersUpdateOptionalParams,
  ManagersUpdateResponse,
  UploadCertificateRequest,
  ManagersUploadRegistrationCertificateOptionalParams,
  ManagersUploadRegistrationCertificateResponse,
  ManagersGetEncryptionSettingsOptionalParams,
  ManagersGetEncryptionSettingsResponse,
  ManagersGetExtendedInfoOptionalParams,
  ManagersGetExtendedInfoResponse,
  ManagerExtendedInfo,
  ManagersCreateExtendedInfoOptionalParams,
  ManagersCreateExtendedInfoResponse,
  ManagersDeleteExtendedInfoOptionalParams,
  ManagersUpdateExtendedInfoOptionalParams,
  ManagersUpdateExtendedInfoResponse,
  ManagersGetEncryptionKeyOptionalParams,
  ManagersGetEncryptionKeyResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Managers operations. */
export class ManagersImpl implements Managers {
  private readonly client: StorSimpleManagementClient;

  /**
   * Initialize a new instance of the class Managers class.
   * @param client Reference to the service client
   */
  constructor(client: StorSimpleManagementClient) {
    this.client = client;
  }

  /**
   * Retrieves all the managers in a subscription.
   * @param options The options parameters.
   */
  public list(
    options?: ManagersListOptionalParams
  ): PagedAsyncIterableIterator<Manager> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: ManagersListOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<Manager[]> {
    let result: ManagersListResponse;
    result = await this._list(options);
    yield result.value || [];
  }

  private async *listPagingAll(
    options?: ManagersListOptionalParams
  ): AsyncIterableIterator<Manager> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Retrieves all the managers in a resource group.
   * @param resourceGroupName The resource group name
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: ManagersListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Manager> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: ManagersListByResourceGroupOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<Manager[]> {
    let result: ManagersListByResourceGroupResponse;
    result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: ManagersListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Manager> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the  manager metrics
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  public listMetrics(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersListMetricsOptionalParams
  ): PagedAsyncIterableIterator<Metrics> {
    const iter = this.listMetricsPagingAll(
      resourceGroupName,
      managerName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listMetricsPagingPage(
          resourceGroupName,
          managerName,
          options,
          settings
        );
      }
    };
  }

  private async *listMetricsPagingPage(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersListMetricsOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<Metrics[]> {
    let result: ManagersListMetricsResponse;
    result = await this._listMetrics(resourceGroupName, managerName, options);
    yield result.value || [];
  }

  private async *listMetricsPagingAll(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersListMetricsOptionalParams
  ): AsyncIterableIterator<Metrics> {
    for await (const page of this.listMetricsPagingPage(
      resourceGroupName,
      managerName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Retrieves metric definition of all metrics aggregated at manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  public listMetricDefinition(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersListMetricDefinitionOptionalParams
  ): PagedAsyncIterableIterator<MetricDefinition> {
    const iter = this.listMetricDefinitionPagingAll(
      resourceGroupName,
      managerName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listMetricDefinitionPagingPage(
          resourceGroupName,
          managerName,
          options,
          settings
        );
      }
    };
  }

  private async *listMetricDefinitionPagingPage(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersListMetricDefinitionOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<MetricDefinition[]> {
    let result: ManagersListMetricDefinitionResponse;
    result = await this._listMetricDefinition(
      resourceGroupName,
      managerName,
      options
    );
    yield result.value || [];
  }

  private async *listMetricDefinitionPagingAll(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersListMetricDefinitionOptionalParams
  ): AsyncIterableIterator<MetricDefinition> {
    for await (const page of this.listMetricDefinitionPagingPage(
      resourceGroupName,
      managerName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Retrieves all the managers in a subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: ManagersListOptionalParams
  ): Promise<ManagersListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Retrieves all the managers in a resource group.
   * @param resourceGroupName The resource group name
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: ManagersListByResourceGroupOptionalParams
  ): Promise<ManagersListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Returns the properties of the specified manager name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersGetOptionalParams
  ): Promise<ManagersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param manager The manager.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    managerName: string,
    manager: Manager,
    options?: ManagersCreateOrUpdateOptionalParams
  ): Promise<ManagersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, manager, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, options },
      deleteOperationSpec
    );
  }

  /**
   * Updates the StorSimple Manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The manager update parameters.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    managerName: string,
    parameters: ManagerPatch,
    options?: ManagersUpdateOptionalParams
  ): Promise<ManagersUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, parameters, options },
      updateOperationSpec
    );
  }

  /**
   * Upload Vault Cred Certificate.
   * Returns UploadCertificateResponse
   * @param certificateName Certificate Name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param uploadCertificateRequestrequest UploadCertificateRequest Request
   * @param options The options parameters.
   */
  uploadRegistrationCertificate(
    certificateName: string,
    resourceGroupName: string,
    managerName: string,
    uploadCertificateRequestrequest: UploadCertificateRequest,
    options?: ManagersUploadRegistrationCertificateOptionalParams
  ): Promise<ManagersUploadRegistrationCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        certificateName,
        resourceGroupName,
        managerName,
        uploadCertificateRequestrequest,
        options
      },
      uploadRegistrationCertificateOperationSpec
    );
  }

  /**
   * Returns the encryption settings of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getEncryptionSettings(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersGetEncryptionSettingsOptionalParams
  ): Promise<ManagersGetEncryptionSettingsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, options },
      getEncryptionSettingsOperationSpec
    );
  }

  /**
   * Returns the extended information of the specified manager name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getExtendedInfo(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersGetExtendedInfoOptionalParams
  ): Promise<ManagersGetExtendedInfoResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, options },
      getExtendedInfoOperationSpec
    );
  }

  /**
   * Creates the extended info of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param managerExtendedInfo The manager extended information.
   * @param options The options parameters.
   */
  createExtendedInfo(
    resourceGroupName: string,
    managerName: string,
    managerExtendedInfo: ManagerExtendedInfo,
    options?: ManagersCreateExtendedInfoOptionalParams
  ): Promise<ManagersCreateExtendedInfoResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, managerExtendedInfo, options },
      createExtendedInfoOperationSpec
    );
  }

  /**
   * Deletes the extended info of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  deleteExtendedInfo(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersDeleteExtendedInfoOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, options },
      deleteExtendedInfoOperationSpec
    );
  }

  /**
   * Updates the extended info of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param ifMatch Pass the ETag of ExtendedInfo fetched from GET call
   * @param managerExtendedInfo The manager extended information.
   * @param options The options parameters.
   */
  updateExtendedInfo(
    resourceGroupName: string,
    managerName: string,
    ifMatch: string,
    managerExtendedInfo: ManagerExtendedInfo,
    options?: ManagersUpdateExtendedInfoOptionalParams
  ): Promise<ManagersUpdateExtendedInfoResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, ifMatch, managerExtendedInfo, options },
      updateExtendedInfoOperationSpec
    );
  }

  /**
   * Returns the symmetric encryption key of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getEncryptionKey(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersGetEncryptionKeyOptionalParams
  ): Promise<ManagersGetEncryptionKeyResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, options },
      getEncryptionKeyOperationSpec
    );
  }

  /**
   * Gets the  manager metrics
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  private _listMetrics(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersListMetricsOptionalParams
  ): Promise<ManagersListMetricsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, options },
      listMetricsOperationSpec
    );
  }

  /**
   * Retrieves metric definition of all metrics aggregated at manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  private _listMetricDefinition(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersListMetricDefinitionOptionalParams
  ): Promise<ManagersListMetricDefinitionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, options },
      listMetricDefinitionOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.StorSimple/managers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagerList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagerList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Manager
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Manager
    },
    201: {
      bodyMapper: Mappers.Manager
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.manager,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Manager
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const uploadRegistrationCertificateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/certificates/{certificateName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.UploadCertificateResponse
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.uploadCertificateRequestrequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.certificateName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getEncryptionSettingsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/encryptionSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EncryptionSettings
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getExtendedInfoOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ManagerExtendedInfo
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createExtendedInfoOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ManagerExtendedInfo
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.managerExtendedInfo,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteExtendedInfoOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateExtendedInfoOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/extendedInformation/vaultExtendedInfo",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ManagerExtendedInfo
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.managerExtendedInfo,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.ifMatch
  ],
  mediaType: "json",
  serializer
};
const getEncryptionKeyOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/getEncryptionKey",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SymmetricEncryptedSecret
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMetricsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/metrics",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMetricDefinitionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/metricsDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
