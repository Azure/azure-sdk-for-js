/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/backupScheduleGroupsMappers";
import * as Parameters from "../models/parameters";
import { StorSimpleManagementClientContext } from "../storSimpleManagementClientContext";

/** Class representing a BackupScheduleGroups. */
export class BackupScheduleGroups {
  private readonly client: StorSimpleManagementClientContext;

  /**
   * Create a BackupScheduleGroups.
   * @param {StorSimpleManagementClientContext} client Reference to the service client.
   */
  constructor(client: StorSimpleManagementClientContext) {
    this.client = client;
  }

  /**
   * Retrieves all the backup schedule groups in a device.
   * @param deviceName The name of the device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupScheduleGroupsListByDeviceResponse>
   */
  listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.BackupScheduleGroupsListByDeviceResponse>;
  /**
   * @param deviceName The name of the device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  listByDevice(deviceName: string, resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.BackupScheduleGroupList>): void;
  /**
   * @param deviceName The name of the device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupScheduleGroupList>): void;
  listByDevice(deviceName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupScheduleGroupList>, callback?: msRest.ServiceCallback<Models.BackupScheduleGroupList>): Promise<Models.BackupScheduleGroupsListByDeviceResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        resourceGroupName,
        managerName,
        options
      },
      listByDeviceOperationSpec,
      callback) as Promise<Models.BackupScheduleGroupsListByDeviceResponse>;
  }

  /**
   * Returns the properties of the specified backup schedule group name.
   * @param deviceName The name of the device.
   * @param scheduleGroupName The name of the schedule group.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupScheduleGroupsGetResponse>
   */
  get(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.BackupScheduleGroupsGetResponse>;
  /**
   * @param deviceName The name of the device.
   * @param scheduleGroupName The name of the schedule group.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param callback The callback
   */
  get(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, callback: msRest.ServiceCallback<Models.BackupScheduleGroup>): void;
  /**
   * @param deviceName The name of the device.
   * @param scheduleGroupName The name of the schedule group.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BackupScheduleGroup>): void;
  get(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BackupScheduleGroup>, callback?: msRest.ServiceCallback<Models.BackupScheduleGroup>): Promise<Models.BackupScheduleGroupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        scheduleGroupName,
        resourceGroupName,
        managerName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.BackupScheduleGroupsGetResponse>;
  }

  /**
   * Creates or Updates the backup schedule Group.
   * @param deviceName The name of the device.
   * @param scheduleGroupName The name of the schedule group.
   * @param scheduleGroup The schedule group to be created
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<Models.BackupScheduleGroupsCreateOrUpdateResponse>
   */
  createOrUpdate(deviceName: string, scheduleGroupName: string, scheduleGroup: Models.BackupScheduleGroup, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<Models.BackupScheduleGroupsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(deviceName,scheduleGroupName,scheduleGroup,resourceGroupName,managerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.BackupScheduleGroupsCreateOrUpdateResponse>;
  }

  /**
   * Deletes the backup schedule group.
   * @param deviceName The name of the device.
   * @param scheduleGroupName The name of the schedule group.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(deviceName,scheduleGroupName,resourceGroupName,managerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates or Updates the backup schedule Group.
   * @param deviceName The name of the device.
   * @param scheduleGroupName The name of the schedule group.
   * @param scheduleGroup The schedule group to be created
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(deviceName: string, scheduleGroupName: string, scheduleGroup: Models.BackupScheduleGroup, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deviceName,
        scheduleGroupName,
        scheduleGroup,
        resourceGroupName,
        managerName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes the backup schedule group.
   * @param deviceName The name of the device.
   * @param scheduleGroupName The name of the schedule group.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(deviceName: string, scheduleGroupName: string, resourceGroupName: string, managerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deviceName,
        scheduleGroupName,
        resourceGroupName,
        managerName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByDeviceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupScheduleGroups",
  urlParameters: [
    Parameters.deviceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupScheduleGroupList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupScheduleGroups/{scheduleGroupName}",
  urlParameters: [
    Parameters.deviceName,
    Parameters.scheduleGroupName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BackupScheduleGroup
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupScheduleGroups/{scheduleGroupName}",
  urlParameters: [
    Parameters.deviceName,
    Parameters.scheduleGroupName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "scheduleGroup",
    mapper: {
      ...Mappers.BackupScheduleGroup,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BackupScheduleGroup
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/backupScheduleGroups/{scheduleGroupName}",
  urlParameters: [
    Parameters.deviceName,
    Parameters.scheduleGroupName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
