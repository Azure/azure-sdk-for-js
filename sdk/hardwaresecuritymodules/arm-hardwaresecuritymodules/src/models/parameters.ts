/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  CloudHsmCluster as CloudHsmClusterMapper,
  CloudHsmClusterPatchParameters as CloudHsmClusterPatchParametersMapper,
  PrivateEndpointConnection as PrivateEndpointConnectionMapper,
  DedicatedHsm as DedicatedHsmMapper,
  DedicatedHsmPatchParameters as DedicatedHsmPatchParametersMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const tags: OperationParameter = {
  parameterPath: ["options", "tags"],
  mapper: CloudHsmClusterMapper
};

export const location: OperationParameter = {
  parameterPath: "location",
  mapper: CloudHsmClusterMapper
};

export const sku: OperationParameter = {
  parameterPath: ["options", "sku"],
  mapper: CloudHsmClusterMapper
};

export const identity: OperationParameter = {
  parameterPath: ["options", "identity"],
  mapper: CloudHsmClusterMapper
};

export const provisioningState: OperationParameter = {
  parameterPath: ["options", "provisioningState"],
  mapper: CloudHsmClusterMapper
};

export const autoGeneratedDomainNameLabelScope: OperationParameter = {
  parameterPath: ["options", "autoGeneratedDomainNameLabelScope"],
  mapper: CloudHsmClusterMapper
};

export const securityDomain: OperationParameter = {
  parameterPath: ["options", "securityDomain"],
  mapper: CloudHsmClusterMapper
};

export const hsms: OperationParameter = {
  parameterPath: ["options", "hsms"],
  mapper: CloudHsmClusterMapper
};

export const publicNetworkAccess: OperationParameter = {
  parameterPath: ["options", "publicNetworkAccess"],
  mapper: CloudHsmClusterMapper
};

export const privateEndpointConnections: OperationParameter = {
  parameterPath: ["options", "privateEndpointConnections"],
  mapper: CloudHsmClusterMapper
};

export const restoreProperties: OperationParameter = {
  parameterPath: ["options", "restoreProperties"],
  mapper: CloudHsmClusterMapper
};

export const backupProperties: OperationParameter = {
  parameterPath: ["options", "backupProperties"],
  mapper: CloudHsmClusterMapper
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const cloudHsmClusterName: OperationURLParameter = {
  parameterPath: "cloudHsmClusterName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$"),
      MaxLength: 24,
      MinLength: 3
    },
    serializedName: "cloudHsmClusterName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-12-10-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const tags1: OperationParameter = {
  parameterPath: ["options", "tags"],
  mapper: CloudHsmClusterPatchParametersMapper
};

export const sku1: OperationParameter = {
  parameterPath: ["options", "sku"],
  mapper: CloudHsmClusterPatchParametersMapper
};

export const identity1: OperationParameter = {
  parameterPath: ["options", "identity"],
  mapper: CloudHsmClusterPatchParametersMapper
};

export const backupProperties1: OperationParameter = {
  parameterPath: ["options", "backupProperties"],
  mapper: CloudHsmClusterPatchParametersMapper
};

export const skiptoken: OperationQueryParameter = {
  parameterPath: ["options", "skiptoken"],
  mapper: {
    serializedName: "$skiptoken",
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: PrivateEndpointConnectionMapper
};

export const peConnectionName: OperationURLParameter = {
  parameterPath: "peConnectionName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$"),
      MaxLength: 24,
      MinLength: 3
    },
    serializedName: "peConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion1: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2021-11-30",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: DedicatedHsmMapper
};

export const resourceGroupName1: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const name: OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{3,24}$")
    },
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const tags2: OperationParameter = {
  parameterPath: ["options", "tags"],
  mapper: DedicatedHsmPatchParametersMapper
};

export const name1: OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};
