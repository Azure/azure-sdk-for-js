/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  CloudHsmClustersImpl,
  CloudHsmClusterPrivateLinkResourcesImpl,
  CloudHsmClusterPrivateEndpointConnectionsImpl,
  PrivateEndpointConnectionsImpl,
  OperationsImpl,
  DedicatedHsmOperationsImpl
} from "./operations";
import {
  CloudHsmClusters,
  CloudHsmClusterPrivateLinkResources,
  CloudHsmClusterPrivateEndpointConnections,
  PrivateEndpointConnections,
  Operations,
  DedicatedHsmOperations
} from "./operationsInterfaces";
import { AzureHSMResourceProviderOptionalParams } from "./models";

export class AzureHSMResourceProvider extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the AzureHSMResourceProvider class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription. The value must be an UUID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: AzureHSMResourceProviderOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: AzureHSMResourceProviderOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-hardwaresecuritymodules/2.0.0-beta.2`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.cloudHsmClusters = new CloudHsmClustersImpl(this);
    this.cloudHsmClusterPrivateLinkResources = new CloudHsmClusterPrivateLinkResourcesImpl(
      this
    );
    this.cloudHsmClusterPrivateEndpointConnections = new CloudHsmClusterPrivateEndpointConnectionsImpl(
      this
    );
    this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
    this.operations = new OperationsImpl(this);
    this.dedicatedHsmOperations = new DedicatedHsmOperationsImpl(this);
  }

  cloudHsmClusters: CloudHsmClusters;
  cloudHsmClusterPrivateLinkResources: CloudHsmClusterPrivateLinkResources;
  cloudHsmClusterPrivateEndpointConnections: CloudHsmClusterPrivateEndpointConnections;
  privateEndpointConnections: PrivateEndpointConnections;
  operations: Operations;
  dedicatedHsmOperations: DedicatedHsmOperations;
}
