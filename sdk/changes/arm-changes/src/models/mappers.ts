/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ChangeResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChangeResourceListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ChangeResourceResult"
            }
          }
        }
      }
    }
  }
};

export const ChangeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChangeProperties",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetResourceType: {
        serializedName: "targetResourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      changeType: {
        serializedName: "changeType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Update", "Delete", "Create"]
        }
      },
      changeAttributes: {
        serializedName: "changeAttributes",
        type: {
          name: "Composite",
          className: "ChangeAttributes"
        }
      },
      changes: {
        serializedName: "changes",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "ChangeBase" } }
        }
      }
    }
  }
};

export const ChangeAttributes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChangeAttributes",
    modelProperties: {
      correlationId: {
        serializedName: "correlationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      changesCount: {
        serializedName: "changesCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      previousResourceSnapshotId: {
        serializedName: "previousResourceSnapshotId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      newResourceSnapshotId: {
        serializedName: "newResourceSnapshotId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ChangeBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChangeBase",
    modelProperties: {
      propertyChangeType: {
        serializedName: "propertyChangeType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Update", "Insert", "Remove"]
        }
      },
      changeCategory: {
        serializedName: "changeCategory",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["User", "System"]
        }
      },
      previousValue: {
        serializedName: "previousValue",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      newValue: {
        serializedName: "newValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ChangeResourceResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChangeResourceResult",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ChangeProperties"
        }
      }
    }
  }
};
