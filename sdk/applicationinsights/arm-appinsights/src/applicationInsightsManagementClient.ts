/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { ApplicationInsightsManagementClientContext } from "./applicationInsightsManagementClientContext";


class ApplicationInsightsManagementClient extends ApplicationInsightsManagementClientContext {
  // Operation groups
  operations: operations.Operations;

  /**
   * Initializes a new instance of the ApplicationInsightsManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId The ID of the target subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.ApplicationInsightsManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.operations = new operations.Operations(this);
  }

  /**
   * Returns a file test result for the matching test
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param webTestName The name of the Application Insights webtest resource.
   * @param geoLocationId The location ID where the webtest was physically run.
   * @param timeStamp The posix (epoch) time stamp for the webtest result.
   * @param downloadAs The format to use when returning the webtest result. Possible values include:
   * 'WebTestResult', 'Json'
   * @param [options] The optional parameters
   * @returns Promise<Models.GetTestResultFileResponse>
   */
  getTestResultFile(resourceGroupName: string, webTestName: string, geoLocationId: string, timeStamp: number, downloadAs: Models.DownloadAs, options?: Models.ApplicationInsightsManagementClientGetTestResultFileOptionalParams): Promise<Models.GetTestResultFileResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param webTestName The name of the Application Insights webtest resource.
   * @param geoLocationId The location ID where the webtest was physically run.
   * @param timeStamp The posix (epoch) time stamp for the webtest result.
   * @param downloadAs The format to use when returning the webtest result. Possible values include:
   * 'WebTestResult', 'Json'
   * @param callback The callback
   */
  getTestResultFile(resourceGroupName: string, webTestName: string, geoLocationId: string, timeStamp: number, downloadAs: Models.DownloadAs, callback: msRest.ServiceCallback<Models.TestResultFileResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param webTestName The name of the Application Insights webtest resource.
   * @param geoLocationId The location ID where the webtest was physically run.
   * @param timeStamp The posix (epoch) time stamp for the webtest result.
   * @param downloadAs The format to use when returning the webtest result. Possible values include:
   * 'WebTestResult', 'Json'
   * @param options The optional parameters
   * @param callback The callback
   */
  getTestResultFile(resourceGroupName: string, webTestName: string, geoLocationId: string, timeStamp: number, downloadAs: Models.DownloadAs, options: Models.ApplicationInsightsManagementClientGetTestResultFileOptionalParams, callback: msRest.ServiceCallback<Models.TestResultFileResponse>): void;
  getTestResultFile(resourceGroupName: string, webTestName: string, geoLocationId: string, timeStamp: number, downloadAs: Models.DownloadAs, options?: Models.ApplicationInsightsManagementClientGetTestResultFileOptionalParams | msRest.ServiceCallback<Models.TestResultFileResponse>, callback?: msRest.ServiceCallback<Models.TestResultFileResponse>): Promise<Models.GetTestResultFileResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        webTestName,
        geoLocationId,
        timeStamp,
        downloadAs,
        options
      },
      getTestResultFileOperationSpec,
      callback) as Promise<Models.GetTestResultFileResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getTestResultFileOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/webtests/{webTestName}/getTestResultFile",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.webTestName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.geoLocationId,
    Parameters.timeStamp,
    Parameters.downloadAs,
    Parameters.testSuccessfulCriteria,
    Parameters.continuationToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TestResultFileResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

export {
  ApplicationInsightsManagementClient,
  ApplicationInsightsManagementClientContext,
  Models as ApplicationInsightsManagementModels,
  Mappers as ApplicationInsightsManagementMappers
};
export * from "./operations";
