/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { WorkItemConfigurations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApplicationInsightsManagementClient } from "../applicationInsightsManagementClient";
import {
  WorkItemConfiguration,
  WorkItemConfigurationsListOptionalParams,
  WorkItemConfigurationsListResponse,
  WorkItemCreateConfiguration,
  WorkItemConfigurationsCreateOptionalParams,
  WorkItemConfigurationsCreateResponse,
  WorkItemConfigurationsGetDefaultOptionalParams,
  WorkItemConfigurationsGetDefaultResponse,
  WorkItemConfigurationsDeleteOptionalParams,
  WorkItemConfigurationsGetItemOptionalParams,
  WorkItemConfigurationsGetItemResponse,
  WorkItemConfigurationsUpdateItemOptionalParams,
  WorkItemConfigurationsUpdateItemResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing WorkItemConfigurations operations. */
export class WorkItemConfigurationsImpl implements WorkItemConfigurations {
  private readonly client: ApplicationInsightsManagementClient;

  /**
   * Initialize a new instance of the class WorkItemConfigurations class.
   * @param client Reference to the service client
   */
  constructor(client: ApplicationInsightsManagementClient) {
    this.client = client;
  }

  /**
   * Gets the list work item configurations that exist for the application
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    resourceName: string,
    options?: WorkItemConfigurationsListOptionalParams
  ): PagedAsyncIterableIterator<WorkItemConfiguration> {
    const iter = this.listPagingAll(resourceGroupName, resourceName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(resourceGroupName, resourceName, options);
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    resourceName: string,
    options?: WorkItemConfigurationsListOptionalParams
  ): AsyncIterableIterator<WorkItemConfiguration[]> {
    let result = await this._list(resourceGroupName, resourceName, options);
    yield result.value || [];
  }

  private async *listPagingAll(
    resourceGroupName: string,
    resourceName: string,
    options?: WorkItemConfigurationsListOptionalParams
  ): AsyncIterableIterator<WorkItemConfiguration> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      resourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the list work item configurations that exist for the application
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    resourceName: string,
    options?: WorkItemConfigurationsListOptionalParams
  ): Promise<WorkItemConfigurationsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listOperationSpec
    );
  }

  /**
   * Create a work item configuration for an Application Insights component.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param workItemConfigurationProperties Properties that need to be specified to create a work item
   *                                        configuration of a Application Insights component.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    resourceName: string,
    workItemConfigurationProperties: WorkItemCreateConfiguration,
    options?: WorkItemConfigurationsCreateOptionalParams
  ): Promise<WorkItemConfigurationsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        workItemConfigurationProperties,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Gets default work item configurations that exist for the application
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param options The options parameters.
   */
  getDefault(
    resourceGroupName: string,
    resourceName: string,
    options?: WorkItemConfigurationsGetDefaultOptionalParams
  ): Promise<WorkItemConfigurationsGetDefaultResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      getDefaultOperationSpec
    );
  }

  /**
   * Delete a work item configuration of an Application Insights component.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param workItemConfigId The unique work item configuration Id. This can be either friendly name of
   *                         connector as defined in connector configuration
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    resourceName: string,
    workItemConfigId: string,
    options?: WorkItemConfigurationsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, workItemConfigId, options },
      deleteOperationSpec
    );
  }

  /**
   * Gets specified work item configuration for an Application Insights component.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param workItemConfigId The unique work item configuration Id. This can be either friendly name of
   *                         connector as defined in connector configuration
   * @param options The options parameters.
   */
  getItem(
    resourceGroupName: string,
    resourceName: string,
    workItemConfigId: string,
    options?: WorkItemConfigurationsGetItemOptionalParams
  ): Promise<WorkItemConfigurationsGetItemResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, workItemConfigId, options },
      getItemOperationSpec
    );
  }

  /**
   * Update a work item configuration for an Application Insights component.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param workItemConfigId The unique work item configuration Id. This can be either friendly name of
   *                         connector as defined in connector configuration
   * @param workItemConfigurationProperties Properties that need to be specified to update a work item
   *                                        configuration for this Application Insights component.
   * @param options The options parameters.
   */
  updateItem(
    resourceGroupName: string,
    resourceName: string,
    workItemConfigId: string,
    workItemConfigurationProperties: WorkItemCreateConfiguration,
    options?: WorkItemConfigurationsUpdateItemOptionalParams
  ): Promise<WorkItemConfigurationsUpdateItemResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        workItemConfigId,
        workItemConfigurationProperties,
        options
      },
      updateItemOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/WorkItemConfigs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkItemConfigurationsListResult
    },
    default: {
      bodyMapper: Mappers.WorkItemConfigurationError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/WorkItemConfigs",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WorkItemConfiguration
    }
  },
  requestBody: Parameters.workItemConfigurationProperties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDefaultOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/DefaultWorkItemConfig",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkItemConfiguration
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/WorkItemConfigs/{workItemConfigId}",
  httpMethod: "DELETE",
  responses: { 200: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.workItemConfigId
  ],
  serializer
};
const getItemOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/WorkItemConfigs/{workItemConfigId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkItemConfiguration
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.workItemConfigId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateItemOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/WorkItemConfigs/{workItemConfigId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.WorkItemConfiguration
    }
  },
  requestBody: Parameters.workItemConfigurationProperties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.workItemConfigId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
