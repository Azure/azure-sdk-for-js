/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { LiveToken } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApplicationInsightsManagementClient } from "../applicationInsightsManagementClient";
import { LiveTokenGetOptionalParams, LiveTokenGetResponse } from "../models";

/** Class containing LiveToken operations. */
export class LiveTokenImpl implements LiveToken {
  private readonly client: ApplicationInsightsManagementClient;

  /**
   * Initialize a new instance of the class LiveToken class.
   * @param client Reference to the service client
   */
  constructor(client: ApplicationInsightsManagementClient) {
    this.client = client;
  }

  /**
   * **Gets an access token for live metrics stream data.**
   * @param resourceUri The identifier of the resource.
   * @param options The options parameters.
   */
  get(
    resourceUri: string,
    options?: LiveTokenGetOptionalParams
  ): Promise<LiveTokenGetResponse> {
    return this.client.sendOperationRequest(
      { resourceUri, options },
      getOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceUri}/providers/Microsoft.Insights/generatelivetoken",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.LiveTokenResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponseLinkedStorage
    }
  },
  queryParameters: [Parameters.apiVersion6],
  urlParameters: [Parameters.$host, Parameters.resourceUri],
  headerParameters: [Parameters.accept],
  serializer
};
