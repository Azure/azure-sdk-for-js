/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { WebTests } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApplicationInsightsManagementClient } from "../applicationInsightsManagementClient";
import {
  WebTest,
  WebTestsListByResourceGroupNextOptionalParams,
  WebTestsListByResourceGroupOptionalParams,
  WebTestsListNextOptionalParams,
  WebTestsListOptionalParams,
  WebTestsListByComponentNextOptionalParams,
  WebTestsListByComponentOptionalParams,
  WebTestsListByResourceGroupResponse,
  WebTestsGetOptionalParams,
  WebTestsGetResponse,
  WebTestsCreateOrUpdateOptionalParams,
  WebTestsCreateOrUpdateResponse,
  TagsResource,
  WebTestsUpdateTagsOptionalParams,
  WebTestsUpdateTagsResponse,
  WebTestsDeleteOptionalParams,
  WebTestsListResponse,
  WebTestsListByComponentResponse,
  WebTestsListByResourceGroupNextResponse,
  WebTestsListNextResponse,
  WebTestsListByComponentNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing WebTests operations. */
export class WebTestsImpl implements WebTests {
  private readonly client: ApplicationInsightsManagementClient;

  /**
   * Initialize a new instance of the class WebTests class.
   * @param client Reference to the service client
   */
  constructor(client: ApplicationInsightsManagementClient) {
    this.client = client;
  }

  /**
   * Get all Application Insights web tests defined within a specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: WebTestsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<WebTest> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: WebTestsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<WebTest[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: WebTestsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<WebTest> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get all Application Insights web test alerts definitions within a subscription.
   * @param options The options parameters.
   */
  public list(
    options?: WebTestsListOptionalParams
  ): PagedAsyncIterableIterator<WebTest> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: WebTestsListOptionalParams
  ): AsyncIterableIterator<WebTest[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: WebTestsListOptionalParams
  ): AsyncIterableIterator<WebTest> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get all Application Insights web tests defined for the specified component.
   * @param componentName The name of the Application Insights component resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByComponent(
    componentName: string,
    resourceGroupName: string,
    options?: WebTestsListByComponentOptionalParams
  ): PagedAsyncIterableIterator<WebTest> {
    const iter = this.listByComponentPagingAll(
      componentName,
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByComponentPagingPage(
          componentName,
          resourceGroupName,
          options
        );
      }
    };
  }

  private async *listByComponentPagingPage(
    componentName: string,
    resourceGroupName: string,
    options?: WebTestsListByComponentOptionalParams
  ): AsyncIterableIterator<WebTest[]> {
    let result = await this._listByComponent(
      componentName,
      resourceGroupName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByComponentNext(
        componentName,
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByComponentPagingAll(
    componentName: string,
    resourceGroupName: string,
    options?: WebTestsListByComponentOptionalParams
  ): AsyncIterableIterator<WebTest> {
    for await (const page of this.listByComponentPagingPage(
      componentName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get all Application Insights web tests defined within a specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: WebTestsListByResourceGroupOptionalParams
  ): Promise<WebTestsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Get a specific Application Insights web test definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param webTestName The name of the Application Insights webtest resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    webTestName: string,
    options?: WebTestsGetOptionalParams
  ): Promise<WebTestsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, webTestName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates an Application Insights web test definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param webTestName The name of the Application Insights webtest resource.
   * @param webTestDefinition Properties that need to be specified to create or update an Application
   *                          Insights web test definition.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    webTestName: string,
    webTestDefinition: WebTest,
    options?: WebTestsCreateOrUpdateOptionalParams
  ): Promise<WebTestsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, webTestName, webTestDefinition, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Creates or updates an Application Insights web test definition.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param webTestName The name of the Application Insights webtest resource.
   * @param webTestTags Updated tag information to set into the web test instance.
   * @param options The options parameters.
   */
  updateTags(
    resourceGroupName: string,
    webTestName: string,
    webTestTags: TagsResource,
    options?: WebTestsUpdateTagsOptionalParams
  ): Promise<WebTestsUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, webTestName, webTestTags, options },
      updateTagsOperationSpec
    );
  }

  /**
   * Deletes an Application Insights web test.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param webTestName The name of the Application Insights webtest resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    webTestName: string,
    options?: WebTestsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, webTestName, options },
      deleteOperationSpec
    );
  }

  /**
   * Get all Application Insights web test alerts definitions within a subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: WebTestsListOptionalParams
  ): Promise<WebTestsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Get all Application Insights web tests defined for the specified component.
   * @param componentName The name of the Application Insights component resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByComponent(
    componentName: string,
    resourceGroupName: string,
    options?: WebTestsListByComponentOptionalParams
  ): Promise<WebTestsListByComponentResponse> {
    return this.client.sendOperationRequest(
      { componentName, resourceGroupName, options },
      listByComponentOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: WebTestsListByResourceGroupNextOptionalParams
  ): Promise<WebTestsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: WebTestsListNextOptionalParams
  ): Promise<WebTestsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListByComponentNext
   * @param componentName The name of the Application Insights component resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByComponent method.
   * @param options The options parameters.
   */
  private _listByComponentNext(
    componentName: string,
    resourceGroupName: string,
    nextLink: string,
    options?: WebTestsListByComponentNextOptionalParams
  ): Promise<WebTestsListByComponentNextResponse> {
    return this.client.sendOperationRequest(
      { componentName, resourceGroupName, nextLink, options },
      listByComponentNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebTestListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebTest
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.webTestName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.WebTest
    }
  },
  requestBody: Parameters.webTestDefinition,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.webTestName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateTagsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.WebTest
    }
  },
  requestBody: Parameters.webTestTags,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.webTestName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/webtests/{webTestName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.webTestName
  ],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/webtests",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebTestListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByComponentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{componentName}/webtests",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebTestListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.componentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebTestListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebTestListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByComponentNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WebTestListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.componentName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
