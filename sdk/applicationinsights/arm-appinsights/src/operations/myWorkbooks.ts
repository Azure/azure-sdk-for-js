/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/myWorkbooksMappers";
import * as Parameters from "../models/parameters";
import { ApplicationInsightsManagementClientContext } from "../applicationInsightsManagementClientContext";

/** Class representing a MyWorkbooks. */
export class MyWorkbooks {
  private readonly client: ApplicationInsightsManagementClientContext;

  /**
   * Create a MyWorkbooks.
   * @param {ApplicationInsightsManagementClientContext} client Reference to the service client.
   */
  constructor(client: ApplicationInsightsManagementClientContext) {
    this.client = client;
  }

  /**
   * Get all private workbooks defined within a specified resource group and category.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param category Category of workbook to return. Possible values include: 'workbook', 'TSG',
   * 'performance', 'retention'
   * @param [options] The optional parameters
   * @returns Promise<Models.MyWorkbooksListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, category: Models.CategoryType, options?: Models.MyWorkbooksListByResourceGroupOptionalParams): Promise<Models.MyWorkbooksListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param category Category of workbook to return. Possible values include: 'workbook', 'TSG',
   * 'performance', 'retention'
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, category: Models.CategoryType, callback: msRest.ServiceCallback<Models.MyWorkbooksListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param category Category of workbook to return. Possible values include: 'workbook', 'TSG',
   * 'performance', 'retention'
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, category: Models.CategoryType, options: Models.MyWorkbooksListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.MyWorkbooksListResult>): void;
  listByResourceGroup(resourceGroupName: string, category: Models.CategoryType, options?: Models.MyWorkbooksListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.MyWorkbooksListResult>, callback?: msRest.ServiceCallback<Models.MyWorkbooksListResult>): Promise<Models.MyWorkbooksListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        category,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.MyWorkbooksListByResourceGroupResponse>;
  }

  /**
   * Get all private workbooks defined within a specified subscription and category.
   * @param category Category of workbook to return. Possible values include: 'workbook', 'TSG',
   * 'performance', 'retention'
   * @param [options] The optional parameters
   * @returns Promise<Models.MyWorkbooksListBySubscriptionResponse>
   */
  listBySubscription(category: Models.CategoryType, options?: Models.MyWorkbooksListBySubscriptionOptionalParams): Promise<Models.MyWorkbooksListBySubscriptionResponse>;
  /**
   * @param category Category of workbook to return. Possible values include: 'workbook', 'TSG',
   * 'performance', 'retention'
   * @param callback The callback
   */
  listBySubscription(category: Models.CategoryType, callback: msRest.ServiceCallback<Models.MyWorkbooksListResult>): void;
  /**
   * @param category Category of workbook to return. Possible values include: 'workbook', 'TSG',
   * 'performance', 'retention'
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(category: Models.CategoryType, options: Models.MyWorkbooksListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.MyWorkbooksListResult>): void;
  listBySubscription(category: Models.CategoryType, options?: Models.MyWorkbooksListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.MyWorkbooksListResult>, callback?: msRest.ServiceCallback<Models.MyWorkbooksListResult>): Promise<Models.MyWorkbooksListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        category,
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.MyWorkbooksListBySubscriptionResponse>;
  }

  /**
   * Get a single private workbook by its resourceName.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.MyWorkbooksGetResponse>
   */
  get(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.MyWorkbooksGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<Models.MyWorkbook>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MyWorkbook>): void;
  get(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MyWorkbook>, callback?: msRest.ServiceCallback<Models.MyWorkbook>): Promise<Models.MyWorkbooksGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.MyWorkbooksGetResponse>;
  }

  /**
   * Delete a private workbook.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Create a new private workbook.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param workbookProperties Properties that need to be specified to create a new private workbook.
   * @param [options] The optional parameters
   * @returns Promise<Models.MyWorkbooksCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, resourceName: string, workbookProperties: Models.MyWorkbook, options?: Models.MyWorkbooksCreateOrUpdateOptionalParams): Promise<Models.MyWorkbooksCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param workbookProperties Properties that need to be specified to create a new private workbook.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, resourceName: string, workbookProperties: Models.MyWorkbook, callback: msRest.ServiceCallback<Models.MyWorkbook>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param workbookProperties Properties that need to be specified to create a new private workbook.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, resourceName: string, workbookProperties: Models.MyWorkbook, options: Models.MyWorkbooksCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.MyWorkbook>): void;
  createOrUpdate(resourceGroupName: string, resourceName: string, workbookProperties: Models.MyWorkbook, options?: Models.MyWorkbooksCreateOrUpdateOptionalParams | msRest.ServiceCallback<Models.MyWorkbook>, callback?: msRest.ServiceCallback<Models.MyWorkbook>): Promise<Models.MyWorkbooksCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        workbookProperties,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.MyWorkbooksCreateOrUpdateResponse>;
  }

  /**
   * Updates a private workbook that has already been added.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param workbookProperties Properties that need to be specified to create a new private workbook.
   * @param [options] The optional parameters
   * @returns Promise<Models.MyWorkbooksUpdateResponse>
   */
  update(resourceGroupName: string, resourceName: string, workbookProperties: Models.MyWorkbook, options?: Models.MyWorkbooksUpdateOptionalParams): Promise<Models.MyWorkbooksUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param workbookProperties Properties that need to be specified to create a new private workbook.
   * @param callback The callback
   */
  update(resourceGroupName: string, resourceName: string, workbookProperties: Models.MyWorkbook, callback: msRest.ServiceCallback<Models.MyWorkbook>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param workbookProperties Properties that need to be specified to create a new private workbook.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, resourceName: string, workbookProperties: Models.MyWorkbook, options: Models.MyWorkbooksUpdateOptionalParams, callback: msRest.ServiceCallback<Models.MyWorkbook>): void;
  update(resourceGroupName: string, resourceName: string, workbookProperties: Models.MyWorkbook, options?: Models.MyWorkbooksUpdateOptionalParams | msRest.ServiceCallback<Models.MyWorkbook>, callback?: msRest.ServiceCallback<Models.MyWorkbook>): Promise<Models.MyWorkbooksUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        workbookProperties,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.MyWorkbooksUpdateResponse>;
  }

  /**
   * Get all private workbooks defined within a specified resource group and category.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param category Category of workbook to return. Possible values include: 'workbook', 'TSG',
   * 'performance', 'retention'
   * @param [options] The optional parameters
   * @returns Promise<Models.MyWorkbooksListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, category: Models.CategoryType, options?: Models.MyWorkbooksListByResourceGroupNextOptionalParams): Promise<Models.MyWorkbooksListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param category Category of workbook to return. Possible values include: 'workbook', 'TSG',
   * 'performance', 'retention'
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, category: Models.CategoryType, callback: msRest.ServiceCallback<Models.MyWorkbooksListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param category Category of workbook to return. Possible values include: 'workbook', 'TSG',
   * 'performance', 'retention'
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, category: Models.CategoryType, options: Models.MyWorkbooksListByResourceGroupNextOptionalParams, callback: msRest.ServiceCallback<Models.MyWorkbooksListResult>): void;
  listByResourceGroupNext(nextPageLink: string, category: Models.CategoryType, options?: Models.MyWorkbooksListByResourceGroupNextOptionalParams | msRest.ServiceCallback<Models.MyWorkbooksListResult>, callback?: msRest.ServiceCallback<Models.MyWorkbooksListResult>): Promise<Models.MyWorkbooksListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        category,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.MyWorkbooksListByResourceGroupNextResponse>;
  }

  /**
   * Get all private workbooks defined within a specified subscription and category.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param category Category of workbook to return. Possible values include: 'workbook', 'TSG',
   * 'performance', 'retention'
   * @param [options] The optional parameters
   * @returns Promise<Models.MyWorkbooksListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, category: Models.CategoryType, options?: Models.MyWorkbooksListBySubscriptionNextOptionalParams): Promise<Models.MyWorkbooksListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param category Category of workbook to return. Possible values include: 'workbook', 'TSG',
   * 'performance', 'retention'
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, category: Models.CategoryType, callback: msRest.ServiceCallback<Models.MyWorkbooksListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param category Category of workbook to return. Possible values include: 'workbook', 'TSG',
   * 'performance', 'retention'
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, category: Models.CategoryType, options: Models.MyWorkbooksListBySubscriptionNextOptionalParams, callback: msRest.ServiceCallback<Models.MyWorkbooksListResult>): void;
  listBySubscriptionNext(nextPageLink: string, category: Models.CategoryType, options?: Models.MyWorkbooksListBySubscriptionNextOptionalParams | msRest.ServiceCallback<Models.MyWorkbooksListResult>, callback?: msRest.ServiceCallback<Models.MyWorkbooksListResult>): Promise<Models.MyWorkbooksListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        category,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.MyWorkbooksListBySubscriptionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.category,
    Parameters.tags,
    Parameters.sourceId,
    Parameters.canFetchContent,
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MyWorkbooksListResult
    },
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Insights/myWorkbooks",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.category,
    Parameters.tags,
    Parameters.canFetchContent,
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MyWorkbooksListResult
    },
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MyWorkbook
    },
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.sourceId,
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "workbookProperties",
    mapper: {
      ...Mappers.MyWorkbook,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.MyWorkbook
    },
    201: {
      bodyMapper: Mappers.MyWorkbook
    },
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.sourceId,
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "workbookProperties",
    mapper: {
      ...Mappers.MyWorkbook,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.MyWorkbook
    },
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.category,
    Parameters.tags,
    Parameters.sourceId,
    Parameters.canFetchContent,
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MyWorkbooksListResult
    },
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.category,
    Parameters.tags,
    Parameters.canFetchContent,
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MyWorkbooksListResult
    },
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  serializer
};
