/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { MyWorkbooks } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApplicationInsightsManagementClient } from "../applicationInsightsManagementClient";
import {
  MyWorkbook,
  CategoryType,
  MyWorkbooksListByResourceGroupNextOptionalParams,
  MyWorkbooksListByResourceGroupOptionalParams,
  MyWorkbooksListBySubscriptionNextOptionalParams,
  MyWorkbooksListBySubscriptionOptionalParams,
  MyWorkbooksListByResourceGroupResponse,
  MyWorkbooksListBySubscriptionResponse,
  MyWorkbooksGetOptionalParams,
  MyWorkbooksGetResponse,
  MyWorkbooksDeleteOptionalParams,
  MyWorkbooksCreateOrUpdateOptionalParams,
  MyWorkbooksCreateOrUpdateResponse,
  MyWorkbooksUpdateOptionalParams,
  MyWorkbooksUpdateResponse,
  MyWorkbooksListByResourceGroupNextResponse,
  MyWorkbooksListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing MyWorkbooks operations. */
export class MyWorkbooksImpl implements MyWorkbooks {
  private readonly client: ApplicationInsightsManagementClient;

  /**
   * Initialize a new instance of the class MyWorkbooks class.
   * @param client Reference to the service client
   */
  constructor(client: ApplicationInsightsManagementClient) {
    this.client = client;
  }

  /**
   * Get all private workbooks defined within a specified resource group and category.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param category Category of workbook to return.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    category: CategoryType,
    options?: MyWorkbooksListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<MyWorkbook> {
    const iter = this.listByResourceGroupPagingAll(
      resourceGroupName,
      category,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          category,
          options
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    category: CategoryType,
    options?: MyWorkbooksListByResourceGroupOptionalParams
  ): AsyncIterableIterator<MyWorkbook[]> {
    let result = await this._listByResourceGroup(
      resourceGroupName,
      category,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        category,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    category: CategoryType,
    options?: MyWorkbooksListByResourceGroupOptionalParams
  ): AsyncIterableIterator<MyWorkbook> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      category,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get all private workbooks defined within a specified subscription and category.
   * @param category Category of workbook to return.
   * @param options The options parameters.
   */
  public listBySubscription(
    category: CategoryType,
    options?: MyWorkbooksListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<MyWorkbook> {
    const iter = this.listBySubscriptionPagingAll(category, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(category, options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    category: CategoryType,
    options?: MyWorkbooksListBySubscriptionOptionalParams
  ): AsyncIterableIterator<MyWorkbook[]> {
    let result = await this._listBySubscription(category, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext(
        category,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(
    category: CategoryType,
    options?: MyWorkbooksListBySubscriptionOptionalParams
  ): AsyncIterableIterator<MyWorkbook> {
    for await (const page of this.listBySubscriptionPagingPage(
      category,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get all private workbooks defined within a specified resource group and category.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param category Category of workbook to return.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    category: CategoryType,
    options?: MyWorkbooksListByResourceGroupOptionalParams
  ): Promise<MyWorkbooksListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, category, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Get all private workbooks defined within a specified subscription and category.
   * @param category Category of workbook to return.
   * @param options The options parameters.
   */
  private _listBySubscription(
    category: CategoryType,
    options?: MyWorkbooksListBySubscriptionOptionalParams
  ): Promise<MyWorkbooksListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { category, options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Get a single private workbook by its resourceName.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    options?: MyWorkbooksGetOptionalParams
  ): Promise<MyWorkbooksGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      getOperationSpec
    );
  }

  /**
   * Delete a private workbook.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    resourceName: string,
    options?: MyWorkbooksDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      deleteOperationSpec
    );
  }

  /**
   * Create a new private workbook.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param workbookProperties Properties that need to be specified to create a new private workbook.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    resourceName: string,
    workbookProperties: MyWorkbook,
    options?: MyWorkbooksCreateOrUpdateOptionalParams
  ): Promise<MyWorkbooksCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, workbookProperties, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Updates a private workbook that has already been added.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param workbookProperties Properties that need to be specified to create a new private workbook.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    resourceName: string,
    workbookProperties: MyWorkbook,
    options?: MyWorkbooksUpdateOptionalParams
  ): Promise<MyWorkbooksUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, workbookProperties, options },
      updateOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param category Category of workbook to return.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    category: CategoryType,
    nextLink: string,
    options?: MyWorkbooksListByResourceGroupNextOptionalParams
  ): Promise<MyWorkbooksListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, category, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param category Category of workbook to return.
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    category: CategoryType,
    nextLink: string,
    options?: MyWorkbooksListBySubscriptionNextOptionalParams
  ): Promise<MyWorkbooksListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { category, nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MyWorkbooksListResult
    },
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  queryParameters: [
    Parameters.canFetchContent,
    Parameters.tags,
    Parameters.category,
    Parameters.sourceId,
    Parameters.apiVersion2
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/myWorkbooks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MyWorkbooksListResult
    },
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  queryParameters: [
    Parameters.canFetchContent,
    Parameters.tags,
    Parameters.category,
    Parameters.apiVersion2
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks/{resourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MyWorkbook
    },
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks/{resourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks/{resourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MyWorkbook
    },
    201: {
      bodyMapper: Mappers.MyWorkbook
    },
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  requestBody: Parameters.workbookProperties,
  queryParameters: [Parameters.sourceId, Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/myWorkbooks/{resourceName}",
  httpMethod: "PATCH",
  responses: {
    201: {
      bodyMapper: Mappers.MyWorkbook
    },
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  requestBody: Parameters.workbookProperties,
  queryParameters: [Parameters.sourceId, Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MyWorkbooksListResult
    },
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  queryParameters: [
    Parameters.canFetchContent,
    Parameters.tags,
    Parameters.category,
    Parameters.sourceId,
    Parameters.apiVersion2
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MyWorkbooksListResult
    },
    default: {
      bodyMapper: Mappers.MyWorkbookError
    }
  },
  queryParameters: [
    Parameters.canFetchContent,
    Parameters.tags,
    Parameters.category,
    Parameters.apiVersion2
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
