/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ProactiveDetectionConfigurations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApplicationInsightsManagementClient } from "../applicationInsightsManagementClient";
import {
  ProactiveDetectionConfigurationsListOptionalParams,
  ProactiveDetectionConfigurationsListResponse,
  ProactiveDetectionConfigurationsGetOptionalParams,
  ProactiveDetectionConfigurationsGetResponse,
  ApplicationInsightsComponentProactiveDetectionConfiguration,
  ProactiveDetectionConfigurationsUpdateOptionalParams,
  ProactiveDetectionConfigurationsUpdateResponse
} from "../models";

/** Class containing ProactiveDetectionConfigurations operations. */
export class ProactiveDetectionConfigurationsImpl
  implements ProactiveDetectionConfigurations {
  private readonly client: ApplicationInsightsManagementClient;

  /**
   * Initialize a new instance of the class ProactiveDetectionConfigurations class.
   * @param client Reference to the service client
   */
  constructor(client: ApplicationInsightsManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of ProactiveDetection configurations of an Application Insights component.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    resourceName: string,
    options?: ProactiveDetectionConfigurationsListOptionalParams
  ): Promise<ProactiveDetectionConfigurationsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listOperationSpec
    );
  }

  /**
   * Get the ProactiveDetection configuration for this configuration id.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param configurationId The ProactiveDetection configuration ID. This is unique within a Application
   *                        Insights component.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    configurationId: string,
    options?: ProactiveDetectionConfigurationsGetOptionalParams
  ): Promise<ProactiveDetectionConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, configurationId, options },
      getOperationSpec
    );
  }

  /**
   * Update the ProactiveDetection configuration for this configuration id.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param configurationId The ProactiveDetection configuration ID. This is unique within a Application
   *                        Insights component.
   * @param proactiveDetectionProperties Properties that need to be specified to update the
   *                                     ProactiveDetection configuration.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    resourceName: string,
    configurationId: string,
    proactiveDetectionProperties: ApplicationInsightsComponentProactiveDetectionConfiguration,
    options?: ProactiveDetectionConfigurationsUpdateOptionalParams
  ): Promise<ProactiveDetectionConfigurationsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        configurationId,
        proactiveDetectionProperties,
        options
      },
      updateOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className:
                "ApplicationInsightsComponentProactiveDetectionConfiguration"
            }
          }
        }
      }
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs/{ConfigurationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper:
        Mappers.ApplicationInsightsComponentProactiveDetectionConfiguration
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.configurationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/ProactiveDetectionConfigs/{ConfigurationId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper:
        Mappers.ApplicationInsightsComponentProactiveDetectionConfiguration
    }
  },
  requestBody: Parameters.proactiveDetectionProperties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.configurationId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
