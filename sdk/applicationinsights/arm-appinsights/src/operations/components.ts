/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Components } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApplicationInsightsManagementClient } from "../applicationInsightsManagementClient";
import {
  ApplicationInsightsComponent,
  ComponentsListNextOptionalParams,
  ComponentsListOptionalParams,
  ComponentsListByResourceGroupNextOptionalParams,
  ComponentsListByResourceGroupOptionalParams,
  ComponentsListResponse,
  ComponentsListByResourceGroupResponse,
  ComponentsDeleteOptionalParams,
  ComponentsGetOptionalParams,
  ComponentsGetResponse,
  ComponentsCreateOrUpdateOptionalParams,
  ComponentsCreateOrUpdateResponse,
  TagsResource,
  ComponentsUpdateTagsOptionalParams,
  ComponentsUpdateTagsResponse,
  ComponentPurgeBody,
  ComponentsPurgeOptionalParams,
  ComponentsPurgeResponse,
  ComponentsGetPurgeStatusOptionalParams,
  ComponentsGetPurgeStatusResponse,
  ComponentsListNextResponse,
  ComponentsListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Components operations. */
export class ComponentsImpl implements Components {
  private readonly client: ApplicationInsightsManagementClient;

  /**
   * Initialize a new instance of the class Components class.
   * @param client Reference to the service client
   */
  constructor(client: ApplicationInsightsManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of all Application Insights components within a subscription.
   * @param options The options parameters.
   */
  public list(
    options?: ComponentsListOptionalParams
  ): PagedAsyncIterableIterator<ApplicationInsightsComponent> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: ComponentsListOptionalParams
  ): AsyncIterableIterator<ApplicationInsightsComponent[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: ComponentsListOptionalParams
  ): AsyncIterableIterator<ApplicationInsightsComponent> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of Application Insights components within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: ComponentsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<ApplicationInsightsComponent> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: ComponentsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<ApplicationInsightsComponent[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: ComponentsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<ApplicationInsightsComponent> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of all Application Insights components within a subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: ComponentsListOptionalParams
  ): Promise<ComponentsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Gets a list of Application Insights components within a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: ComponentsListByResourceGroupOptionalParams
  ): Promise<ComponentsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Deletes an Application Insights component.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    resourceName: string,
    options?: ComponentsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      deleteOperationSpec
    );
  }

  /**
   * Returns an Application Insights component.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    options?: ComponentsGetOptionalParams
  ): Promise<ComponentsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      getOperationSpec
    );
  }

  /**
   * Creates (or updates) an Application Insights component. Note: You cannot specify a different value
   * for InstrumentationKey nor AppId in the Put operation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param insightProperties Properties that need to be specified to create an Application Insights
   *                          component.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    resourceName: string,
    insightProperties: ApplicationInsightsComponent,
    options?: ComponentsCreateOrUpdateOptionalParams
  ): Promise<ComponentsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, insightProperties, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Updates an existing component's tags. To update other fields use the CreateOrUpdate method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param componentTags Updated tag information to set into the component instance.
   * @param options The options parameters.
   */
  updateTags(
    resourceGroupName: string,
    resourceName: string,
    componentTags: TagsResource,
    options?: ComponentsUpdateTagsOptionalParams
  ): Promise<ComponentsUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, componentTags, options },
      updateTagsOperationSpec
    );
  }

  /**
   * Purges data in an Application Insights component by a set of user-defined filters.
   *
   * In order to manage system resources, purge requests are throttled at 50 requests per hour. You
   * should batch the execution of purge requests by sending a single command whose predicate includes
   * all user identities that require purging. Use the in operator to specify multiple identities. You
   * should run the query prior to using for a purge request to verify that the results are expected.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param body Describes the body of a request to purge data in a single table of an Application
   *             Insights component
   * @param options The options parameters.
   */
  purge(
    resourceGroupName: string,
    resourceName: string,
    body: ComponentPurgeBody,
    options?: ComponentsPurgeOptionalParams
  ): Promise<ComponentsPurgeResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, body, options },
      purgeOperationSpec
    );
  }

  /**
   * Get status for an ongoing purge operation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param purgeId In a purge status request, this is the Id of the operation the status of which is
   *                returned.
   * @param options The options parameters.
   */
  getPurgeStatus(
    resourceGroupName: string,
    resourceName: string,
    purgeId: string,
    options?: ComponentsGetPurgeStatusOptionalParams
  ): Promise<ComponentsGetPurgeStatusResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, purgeId, options },
      getPurgeStatusOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ComponentsListNextOptionalParams
  ): Promise<ComponentsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ComponentsListByResourceGroupNextOptionalParams
  ): Promise<ComponentsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/components",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInsightsComponentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseComponents
    }
  },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInsightsComponentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseComponents
    }
  },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponseComponents
    }
  },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInsightsComponent
    },
    default: {
      bodyMapper: Mappers.ErrorResponseComponents
    }
  },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInsightsComponent
    },
    default: {
      bodyMapper: Mappers.ErrorResponseComponents
    }
  },
  requestBody: Parameters.insightProperties,
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateTagsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInsightsComponent
    },
    default: {
      bodyMapper: Mappers.ErrorResponseComponents
    }
  },
  requestBody: Parameters.componentTags,
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const purgeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/purge",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.ComponentPurgeResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponseComponents
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getPurgeStatusOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/operations/{purgeId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComponentPurgeStatusResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponseComponents
    }
  },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.purgeId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInsightsComponentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseComponents
    }
  },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInsightsComponentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseComponents
    }
  },
  queryParameters: [Parameters.apiVersion4],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
