/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ExportConfigurations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ApplicationInsightsManagementClient } from "../applicationInsightsManagementClient";
import {
  ExportConfigurationsListOptionalParams,
  ExportConfigurationsListResponse,
  ApplicationInsightsComponentExportRequest,
  ExportConfigurationsCreateOptionalParams,
  ExportConfigurationsCreateResponse,
  ExportConfigurationsDeleteOptionalParams,
  ExportConfigurationsDeleteResponse,
  ExportConfigurationsGetOptionalParams,
  ExportConfigurationsGetResponse,
  ExportConfigurationsUpdateOptionalParams,
  ExportConfigurationsUpdateResponse
} from "../models";

/** Class containing ExportConfigurations operations. */
export class ExportConfigurationsImpl implements ExportConfigurations {
  private readonly client: ApplicationInsightsManagementClient;

  /**
   * Initialize a new instance of the class ExportConfigurations class.
   * @param client Reference to the service client
   */
  constructor(client: ApplicationInsightsManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of Continuous Export configuration of an Application Insights component.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    resourceName: string,
    options?: ExportConfigurationsListOptionalParams
  ): Promise<ExportConfigurationsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, options },
      listOperationSpec
    );
  }

  /**
   * Create a Continuous Export configuration of an Application Insights component.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param exportProperties Properties that need to be specified to create a Continuous Export
   *                         configuration of a Application Insights component.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    resourceName: string,
    exportProperties: ApplicationInsightsComponentExportRequest,
    options?: ExportConfigurationsCreateOptionalParams
  ): Promise<ExportConfigurationsCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, exportProperties, options },
      createOperationSpec
    );
  }

  /**
   * Delete a Continuous Export configuration of an Application Insights component.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param exportId The Continuous Export configuration ID. This is unique within a Application Insights
   *                 component.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    resourceName: string,
    exportId: string,
    options?: ExportConfigurationsDeleteOptionalParams
  ): Promise<ExportConfigurationsDeleteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, exportId, options },
      deleteOperationSpec
    );
  }

  /**
   * Get the Continuous Export configuration for this export id.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param exportId The Continuous Export configuration ID. This is unique within a Application Insights
   *                 component.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    exportId: string,
    options?: ExportConfigurationsGetOptionalParams
  ): Promise<ExportConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, exportId, options },
      getOperationSpec
    );
  }

  /**
   * Update the Continuous Export configuration for this export id.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Application Insights component resource.
   * @param exportId The Continuous Export configuration ID. This is unique within a Application Insights
   *                 component.
   * @param exportProperties Properties that need to be specified to update the Continuous Export
   *                         configuration.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    resourceName: string,
    exportId: string,
    exportProperties: ApplicationInsightsComponentExportRequest,
    options?: ExportConfigurationsUpdateOptionalParams
  ): Promise<ExportConfigurationsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, resourceName, exportId, exportProperties, options },
      updateOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationInsightsComponentExportConfiguration"
            }
          }
        }
      }
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationInsightsComponentExportConfiguration"
            }
          }
        }
      }
    }
  },
  requestBody: Parameters.exportProperties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration/{exportId}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInsightsComponentExportConfiguration
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.exportId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration/{exportId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInsightsComponentExportConfiguration
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.exportId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/exportconfiguration/{exportId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInsightsComponentExportConfiguration
    }
  },
  requestBody: Parameters.exportProperties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.exportId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
