/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const WebtestsResource: msRest.CompositeMapper = {
  serializedName: "WebtestsResource",
  type: {
    name: "Composite",
    className: "WebtestsResource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TagsResource: msRest.CompositeMapper = {
  serializedName: "TagsResource",
  type: {
    name: "Composite",
    className: "TagsResource",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const WebTestGeolocation: msRest.CompositeMapper = {
  serializedName: "WebTestGeolocation",
  type: {
    name: "Composite",
    className: "WebTestGeolocation",
    modelProperties: {
      location: {
        serializedName: "Id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebTestPropertiesConfiguration: msRest.CompositeMapper = {
  serializedName: "WebTestProperties_Configuration",
  type: {
    name: "Composite",
    className: "WebTestPropertiesConfiguration",
    modelProperties: {
      webTest: {
        serializedName: "WebTest",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HeaderField: msRest.CompositeMapper = {
  serializedName: "HeaderField",
  type: {
    name: "Composite",
    className: "HeaderField",
    modelProperties: {
      headerFieldName: {
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      headerFieldValue: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebTestPropertiesRequest: msRest.CompositeMapper = {
  serializedName: "WebTestProperties_Request",
  type: {
    name: "Composite",
    className: "WebTestPropertiesRequest",
    modelProperties: {
      requestUrl: {
        serializedName: "RequestUrl",
        type: {
          name: "String"
        }
      },
      headers: {
        serializedName: "Headers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HeaderField"
            }
          }
        }
      },
      httpVerb: {
        serializedName: "HttpVerb",
        type: {
          name: "String"
        }
      },
      requestBody: {
        serializedName: "RequestBody",
        type: {
          name: "String"
        }
      },
      parseDependentRequests: {
        serializedName: "ParseDependentRequests",
        type: {
          name: "Boolean"
        }
      },
      followRedirects: {
        serializedName: "FollowRedirects",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const WebTestPropertiesContentValidation: msRest.CompositeMapper = {
  serializedName: "WebTestProperties_ContentValidation",
  type: {
    name: "Composite",
    className: "WebTestPropertiesContentValidation",
    modelProperties: {
      contentMatch: {
        serializedName: "ContentMatch",
        type: {
          name: "String"
        }
      },
      ignoreCase: {
        serializedName: "IgnoreCase",
        type: {
          name: "Boolean"
        }
      },
      passIfTextFound: {
        serializedName: "PassIfTextFound",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const WebTest: msRest.CompositeMapper = {
  serializedName: "WebTest",
  type: {
    name: "Composite",
    className: "WebTest",
    modelProperties: {
      ...WebtestsResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        defaultValue: 'ping',
        type: {
          name: "Enum",
          allowedValues: [
            "ping",
            "multistep"
          ]
        }
      },
      syntheticMonitorId: {
        required: true,
        serializedName: "properties.SyntheticMonitorId",
        type: {
          name: "String"
        }
      },
      webTestName: {
        required: true,
        serializedName: "properties.Name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.Description",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.Enabled",
        type: {
          name: "Boolean"
        }
      },
      frequency: {
        serializedName: "properties.Frequency",
        defaultValue: 300,
        type: {
          name: "Number"
        }
      },
      timeout: {
        serializedName: "properties.Timeout",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      webTestKind: {
        required: true,
        serializedName: "properties.Kind",
        defaultValue: 'ping',
        type: {
          name: "Enum",
          allowedValues: [
            "ping",
            "multistep",
            "basic",
            "standard"
          ]
        }
      },
      retryEnabled: {
        serializedName: "properties.RetryEnabled",
        type: {
          name: "Boolean"
        }
      },
      locations: {
        required: true,
        serializedName: "properties.Locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebTestGeolocation"
            }
          }
        }
      },
      configuration: {
        serializedName: "properties.Configuration",
        type: {
          name: "Composite",
          className: "WebTestPropertiesConfiguration"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      request: {
        serializedName: "properties.Request",
        type: {
          name: "Composite",
          className: "WebTestPropertiesRequest"
        }
      },
      contentValidation: {
        serializedName: "properties.ContentValidation",
        type: {
          name: "Composite",
          className: "WebTestPropertiesContentValidation"
        }
      },
      sSLCheck: {
        serializedName: "properties.SSLCheck",
        type: {
          name: "Boolean"
        }
      },
      sSLCertRemainingLifetimeCheck: {
        serializedName: "properties.SSLCertRemainingLifetimeCheck",
        type: {
          name: "Number"
        }
      },
      expectedHttpStatusCode: {
        serializedName: "properties.ExpectedHttpStatusCode",
        type: {
          name: "Number"
        }
      },
      ignoreHttpsStatusCode: {
        serializedName: "properties.IgnoreHttpsStatusCode",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationInfo: msRest.CompositeMapper = {
  serializedName: "OperationInfo",
  type: {
    name: "Composite",
    className: "OperationInfo",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationInfo"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const OperationsListResult: msRest.CompositeMapper = {
  serializedName: "OperationsListResult",
  type: {
    name: "Composite",
    className: "OperationsListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebTestListResult: msRest.CompositeMapper = {
  serializedName: "webTestListResult",
  type: {
    name: "Composite",
    className: "WebTestListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebTest"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
