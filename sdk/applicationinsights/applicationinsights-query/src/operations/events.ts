/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/eventsMappers";
import * as Parameters from "../models/parameters";
import { ApplicationInsightsDataClientContext } from "../applicationInsightsDataClientContext";

/** Class representing a Events. */
export class Events {
  private readonly client: ApplicationInsightsDataClientContext;

  /**
   * Create a Events.
   * @param {ApplicationInsightsDataClientContext} client Reference to the service client.
   */
  constructor(client: ApplicationInsightsDataClientContext) {
    this.client = client;
  }

  /**
   * Executes an OData query for events
   * @summary Execute OData query
   * @param appId ID of the application. This is Application ID from the API Access settings blade in
   * the Azure portal.
   * @param eventType The type of events to query; either a standard event type (`traces`,
   * `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or
   * `$all` to query across all event types. Possible values include: '$all', 'traces',
   * 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions',
   * 'availabilityResults', 'performanceCounters', 'customMetrics'
   * @param [options] The optional parameters
   * @returns Promise<Models.EventsGetByTypeResponse>
   */
  getByType(appId: string, eventType: Models.EventType, options?: Models.EventsGetByTypeOptionalParams): Promise<Models.EventsGetByTypeResponse>;
  /**
   * @param appId ID of the application. This is Application ID from the API Access settings blade in
   * the Azure portal.
   * @param eventType The type of events to query; either a standard event type (`traces`,
   * `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or
   * `$all` to query across all event types. Possible values include: '$all', 'traces',
   * 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions',
   * 'availabilityResults', 'performanceCounters', 'customMetrics'
   * @param callback The callback
   */
  getByType(appId: string, eventType: Models.EventType, callback: msRest.ServiceCallback<Models.EventsResults>): void;
  /**
   * @param appId ID of the application. This is Application ID from the API Access settings blade in
   * the Azure portal.
   * @param eventType The type of events to query; either a standard event type (`traces`,
   * `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or
   * `$all` to query across all event types. Possible values include: '$all', 'traces',
   * 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions',
   * 'availabilityResults', 'performanceCounters', 'customMetrics'
   * @param options The optional parameters
   * @param callback The callback
   */
  getByType(appId: string, eventType: Models.EventType, options: Models.EventsGetByTypeOptionalParams, callback: msRest.ServiceCallback<Models.EventsResults>): void;
  getByType(appId: string, eventType: Models.EventType, options?: Models.EventsGetByTypeOptionalParams | msRest.ServiceCallback<Models.EventsResults>, callback?: msRest.ServiceCallback<Models.EventsResults>): Promise<Models.EventsGetByTypeResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        eventType,
        options
      },
      getByTypeOperationSpec,
      callback) as Promise<Models.EventsGetByTypeResponse>;
  }

  /**
   * Gets the data for a single event
   * @summary Get an event
   * @param appId ID of the application. This is Application ID from the API Access settings blade in
   * the Azure portal.
   * @param eventType The type of events to query; either a standard event type (`traces`,
   * `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or
   * `$all` to query across all event types. Possible values include: '$all', 'traces',
   * 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions',
   * 'availabilityResults', 'performanceCounters', 'customMetrics'
   * @param eventId ID of event.
   * @param [options] The optional parameters
   * @returns Promise<Models.EventsGetResponse>
   */
  get(appId: string, eventType: Models.EventType, eventId: string, options?: Models.EventsGetOptionalParams): Promise<Models.EventsGetResponse>;
  /**
   * @param appId ID of the application. This is Application ID from the API Access settings blade in
   * the Azure portal.
   * @param eventType The type of events to query; either a standard event type (`traces`,
   * `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or
   * `$all` to query across all event types. Possible values include: '$all', 'traces',
   * 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions',
   * 'availabilityResults', 'performanceCounters', 'customMetrics'
   * @param eventId ID of event.
   * @param callback The callback
   */
  get(appId: string, eventType: Models.EventType, eventId: string, callback: msRest.ServiceCallback<Models.EventsResults>): void;
  /**
   * @param appId ID of the application. This is Application ID from the API Access settings blade in
   * the Azure portal.
   * @param eventType The type of events to query; either a standard event type (`traces`,
   * `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or
   * `$all` to query across all event types. Possible values include: '$all', 'traces',
   * 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions',
   * 'availabilityResults', 'performanceCounters', 'customMetrics'
   * @param eventId ID of event.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(appId: string, eventType: Models.EventType, eventId: string, options: Models.EventsGetOptionalParams, callback: msRest.ServiceCallback<Models.EventsResults>): void;
  get(appId: string, eventType: Models.EventType, eventId: string, options?: Models.EventsGetOptionalParams | msRest.ServiceCallback<Models.EventsResults>, callback?: msRest.ServiceCallback<Models.EventsResults>): Promise<Models.EventsGetResponse> {
    return this.client.sendOperationRequest(
      {
        appId,
        eventType,
        eventId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.EventsGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getByTypeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/apps/{appId}/events/{eventType}",
  urlParameters: [
    Parameters.appId,
    Parameters.eventType
  ],
  queryParameters: [
    Parameters.timespan,
    Parameters.filter1,
    Parameters.search,
    Parameters.orderby1,
    Parameters.select,
    Parameters.skip,
    Parameters.top1,
    Parameters.format,
    Parameters.count,
    Parameters.apply
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventsResults
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/apps/{appId}/events/{eventType}/{eventId}",
  urlParameters: [
    Parameters.appId,
    Parameters.eventType,
    Parameters.eventId
  ],
  queryParameters: [
    Parameters.timespan
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EventsResults
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
