/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const acceptLanguage: coreHttp.OperationParameter = {
  parameterPath: "acceptLanguage",
  mapper: {
    serializedName: "accept-language",
    defaultValue: 'en-US',
    type: {
      name: "String"
    }
  }
};
export const annotationId: coreHttp.OperationURLParameter = {
  parameterPath: "annotationId",
  mapper: {
    required: true,
    serializedName: "annotationId",
    type: {
      name: "String"
    }
  }
};
export const apiVersion: coreHttp.OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    required: true,
    serializedName: "api-version",
    constraints: {
      MinLength: 1
    },
    type: {
      name: "String"
    }
  }
};
export const canFetchContent: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "canFetchContent"
  ],
  mapper: {
    serializedName: "canFetchContent",
    type: {
      name: "Boolean"
    }
  }
};
export const category: coreHttp.OperationQueryParameter = {
  parameterPath: "category",
  mapper: {
    required: true,
    serializedName: "category",
    type: {
      name: "String"
    }
  }
};
export const componentName: coreHttp.OperationURLParameter = {
  parameterPath: "componentName",
  mapper: {
    required: true,
    serializedName: "componentName",
    type: {
      name: "String"
    }
  }
};
export const configurationId: coreHttp.OperationURLParameter = {
  parameterPath: "configurationId",
  mapper: {
    required: true,
    serializedName: "ConfigurationId",
    type: {
      name: "String"
    }
  }
};
export const end: coreHttp.OperationQueryParameter = {
  parameterPath: "end",
  mapper: {
    required: true,
    serializedName: "end",
    type: {
      name: "String"
    }
  }
};
export const exportId: coreHttp.OperationURLParameter = {
  parameterPath: "exportId",
  mapper: {
    required: true,
    serializedName: "exportId",
    type: {
      name: "String"
    }
  }
};
export const favoriteId: coreHttp.OperationURLParameter = {
  parameterPath: "favoriteId",
  mapper: {
    required: true,
    serializedName: "favoriteId",
    type: {
      name: "String"
    }
  }
};
export const favoriteType: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "favoriteType"
  ],
  mapper: {
    serializedName: "favoriteType",
    defaultValue: 'shared',
    type: {
      name: "Enum",
      allowedValues: [
        "shared",
        "user"
      ]
    }
  }
};
export const id: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "id"
  ],
  mapper: {
    serializedName: "id",
    type: {
      name: "String"
    }
  }
};
export const includeContent: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "includeContent"
  ],
  mapper: {
    serializedName: "includeContent",
    type: {
      name: "Boolean"
    }
  }
};
export const keyId: coreHttp.OperationURLParameter = {
  parameterPath: "keyId",
  mapper: {
    required: true,
    serializedName: "keyId",
    type: {
      name: "String"
    }
  }
};
export const name: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "name"
  ],
  mapper: {
    serializedName: "name",
    type: {
      name: "String"
    }
  }
};
export const nextPageLink: coreHttp.OperationURLParameter = {
  parameterPath: "nextPageLink",
  mapper: {
    required: true,
    serializedName: "nextLink",
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
export const overrideItem: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "overrideItem"
  ],
  mapper: {
    serializedName: "overrideItem",
    type: {
      name: "Boolean"
    }
  }
};
export const purgeId: coreHttp.OperationURLParameter = {
  parameterPath: "purgeId",
  mapper: {
    required: true,
    serializedName: "purgeId",
    type: {
      name: "String"
    }
  }
};
export const resourceGroupName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    required: true,
    serializedName: "resourceGroupName",
    constraints: {
      MaxLength: 90,
      MinLength: 1,
      Pattern: /^[-\w\._\(\)]+$/
    },
    type: {
      name: "String"
    }
  }
};
export const resourceName: coreHttp.OperationURLParameter = {
  parameterPath: "resourceName",
  mapper: {
    required: true,
    serializedName: "resourceName",
    type: {
      name: "String"
    }
  }
};
export const scope: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "scope"
  ],
  mapper: {
    serializedName: "scope",
    defaultValue: 'shared',
    type: {
      name: "String"
    }
  }
};
export const scopePath: coreHttp.OperationURLParameter = {
  parameterPath: "scopePath",
  mapper: {
    required: true,
    serializedName: "scopePath",
    type: {
      name: "String"
    }
  }
};
export const sourceType: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "sourceType"
  ],
  mapper: {
    serializedName: "sourceType",
    type: {
      name: "String"
    }
  }
};
export const start: coreHttp.OperationQueryParameter = {
  parameterPath: "start",
  mapper: {
    required: true,
    serializedName: "start",
    type: {
      name: "String"
    }
  }
};
export const subscriptionId: coreHttp.OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    required: true,
    serializedName: "subscriptionId",
    constraints: {
      MinLength: 1
    },
    type: {
      name: "String"
    }
  }
};
export const tags: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "tags"
  ],
  mapper: {
    serializedName: "tags",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: coreHttp.QueryCollectionFormat.Csv
};
export const type: coreHttp.OperationQueryParameter = {
  parameterPath: [
    "options",
    "type"
  ],
  mapper: {
    serializedName: "type",
    defaultValue: 'none',
    type: {
      name: "String"
    }
  }
};
export const webTestName: coreHttp.OperationURLParameter = {
  parameterPath: "webTestName",
  mapper: {
    required: true,
    serializedName: "webTestName",
    type: {
      name: "String"
    }
  }
};
export const workItemConfigId: coreHttp.OperationURLParameter = {
  parameterPath: "workItemConfigId",
  mapper: {
    required: true,
    serializedName: "workItemConfigId",
    type: {
      name: "String"
    }
  }
};
