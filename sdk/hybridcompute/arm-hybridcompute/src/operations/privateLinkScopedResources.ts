/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/privateLinkScopedResourcesMappers";
import * as Parameters from "../models/parameters";
import { HybridComputeManagementClientContext } from "../hybridComputeManagementClientContext";

/** Class representing a PrivateLinkScopedResources. */
export class PrivateLinkScopedResources {
  private readonly client: HybridComputeManagementClientContext;

  /**
   * Create a PrivateLinkScopedResources.
   * @param {HybridComputeManagementClientContext} client Reference to the service client.
   */
  constructor(client: HybridComputeManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a scoped resource in a private link scope.
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Arc PrivateLinkScope resource.
   * @param name The name of the scoped resource object.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkScopedResourcesGetResponse>
   */
  get(resourceGroupName: string, scopeName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkScopedResourcesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Arc PrivateLinkScope resource.
   * @param name The name of the scoped resource object.
   * @param callback The callback
   */
  get(resourceGroupName: string, scopeName: string, name: string, callback: msRest.ServiceCallback<Models.ScopedResource>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Arc PrivateLinkScope resource.
   * @param name The name of the scoped resource object.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, scopeName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ScopedResource>): void;
  get(resourceGroupName: string, scopeName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ScopedResource>, callback?: msRest.ServiceCallback<Models.ScopedResource>): Promise<Models.PrivateLinkScopedResourcesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        scopeName,
        name,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PrivateLinkScopedResourcesGetResponse>;
  }

  /**
   * Approve or reject a private endpoint connection with a given name.
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Arc PrivateLinkScope resource.
   * @param name The name of the scoped resource object.
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkScopedResourcesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, scopeName: string, name: string, parameters: Models.ScopedResource, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkScopedResourcesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,scopeName,name,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PrivateLinkScopedResourcesCreateOrUpdateResponse>;
  }

  /**
   * Deletes a private endpoint connection with a given name.
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Arc PrivateLinkScope resource.
   * @param name The name of the scoped resource object.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, scopeName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,scopeName,name,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Gets all private endpoint connections on a private link scope.
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Arc PrivateLinkScope resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkScopedResourcesListByPrivateLinkScopeResponse>
   */
  listByPrivateLinkScope(resourceGroupName: string, scopeName: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkScopedResourcesListByPrivateLinkScopeResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Arc PrivateLinkScope resource.
   * @param callback The callback
   */
  listByPrivateLinkScope(resourceGroupName: string, scopeName: string, callback: msRest.ServiceCallback<Models.ScopedResourceListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Arc PrivateLinkScope resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByPrivateLinkScope(resourceGroupName: string, scopeName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ScopedResourceListResult>): void;
  listByPrivateLinkScope(resourceGroupName: string, scopeName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ScopedResourceListResult>, callback?: msRest.ServiceCallback<Models.ScopedResourceListResult>): Promise<Models.PrivateLinkScopedResourcesListByPrivateLinkScopeResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        scopeName,
        options
      },
      listByPrivateLinkScopeOperationSpec,
      callback) as Promise<Models.PrivateLinkScopedResourcesListByPrivateLinkScopeResponse>;
  }

  /**
   * Approve or reject a private endpoint connection with a given name.
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Arc PrivateLinkScope resource.
   * @param name The name of the scoped resource object.
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, scopeName: string, name: string, parameters: Models.ScopedResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        scopeName,
        name,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a private endpoint connection with a given name.
   * @param resourceGroupName The name of the resource group.
   * @param scopeName The name of the Azure Arc PrivateLinkScope resource.
   * @param name The name of the scoped resource object.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, scopeName: string, name: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        scopeName,
        name,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Gets all private endpoint connections on a private link scope.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateLinkScopedResourcesListByPrivateLinkScopeNextResponse>
   */
  listByPrivateLinkScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateLinkScopedResourcesListByPrivateLinkScopeNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByPrivateLinkScopeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ScopedResourceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByPrivateLinkScopeNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ScopedResourceListResult>): void;
  listByPrivateLinkScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ScopedResourceListResult>, callback?: msRest.ServiceCallback<Models.ScopedResourceListResult>): Promise<Models.PrivateLinkScopedResourcesListByPrivateLinkScopeNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByPrivateLinkScopeNextOperationSpec,
      callback) as Promise<Models.PrivateLinkScopedResourcesListByPrivateLinkScopeNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/privateLinkScopes/{scopeName}/scopedResources/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scopeName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ScopedResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponseV2
    }
  },
  serializer
};

const listByPrivateLinkScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/privateLinkScopes/{scopeName}/scopedResources",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scopeName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ScopedResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseV2
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/privateLinkScopes/{scopeName}/scopedResources/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scopeName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ScopedResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ScopedResource
    },
    201: {
      bodyMapper: Mappers.ScopedResource
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponseV2
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/privateLinkScopes/{scopeName}/scopedResources/{name}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.scopeName,
    Parameters.name
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponseV2
    }
  },
  serializer
};

const listByPrivateLinkScopeNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ScopedResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseV2
    }
  },
  serializer
};
