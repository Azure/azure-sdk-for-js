/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { HybridIdentityMetadataOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridComputeManagementClient } from "../hybridComputeManagementClient";
import {
  HybridIdentityMetadata,
  HybridIdentityMetadataListByMachinesNextOptionalParams,
  HybridIdentityMetadataListByMachinesOptionalParams,
  HybridIdentityMetadataListByMachinesResponse,
  HybridIdentityMetadataGetOptionalParams,
  HybridIdentityMetadataGetResponse,
  HybridIdentityMetadataListByMachinesNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing HybridIdentityMetadataOperations operations. */
export class HybridIdentityMetadataOperationsImpl
  implements HybridIdentityMetadataOperations {
  private readonly client: HybridComputeManagementClient;

  /**
   * Initialize a new instance of the class HybridIdentityMetadataOperations class.
   * @param client Reference to the service client
   */
  constructor(client: HybridComputeManagementClient) {
    this.client = client;
  }

  /**
   * Returns the list of HybridIdentityMetadata of the given machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the hybrid machine.
   * @param options The options parameters.
   */
  public listByMachines(
    resourceGroupName: string,
    machineName: string,
    options?: HybridIdentityMetadataListByMachinesOptionalParams
  ): PagedAsyncIterableIterator<HybridIdentityMetadata> {
    const iter = this.listByMachinesPagingAll(
      resourceGroupName,
      machineName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByMachinesPagingPage(
          resourceGroupName,
          machineName,
          options,
          settings
        );
      }
    };
  }

  private async *listByMachinesPagingPage(
    resourceGroupName: string,
    machineName: string,
    options?: HybridIdentityMetadataListByMachinesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<HybridIdentityMetadata[]> {
    let result: HybridIdentityMetadataListByMachinesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByMachines(
        resourceGroupName,
        machineName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByMachinesNext(
        resourceGroupName,
        machineName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByMachinesPagingAll(
    resourceGroupName: string,
    machineName: string,
    options?: HybridIdentityMetadataListByMachinesOptionalParams
  ): AsyncIterableIterator<HybridIdentityMetadata> {
    for await (const page of this.listByMachinesPagingPage(
      resourceGroupName,
      machineName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Implements HybridIdentityMetadata GET method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the hybrid machine.
   * @param metadataName Name of the HybridIdentityMetadata.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    machineName: string,
    metadataName: string,
    options?: HybridIdentityMetadataGetOptionalParams
  ): Promise<HybridIdentityMetadataGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, machineName, metadataName, options },
      getOperationSpec
    );
  }

  /**
   * Returns the list of HybridIdentityMetadata of the given machine.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the hybrid machine.
   * @param options The options parameters.
   */
  private _listByMachines(
    resourceGroupName: string,
    machineName: string,
    options?: HybridIdentityMetadataListByMachinesOptionalParams
  ): Promise<HybridIdentityMetadataListByMachinesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, machineName, options },
      listByMachinesOperationSpec
    );
  }

  /**
   * ListByMachinesNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the hybrid machine.
   * @param nextLink The nextLink from the previous successful call to the ListByMachines method.
   * @param options The options parameters.
   */
  private _listByMachinesNext(
    resourceGroupName: string,
    machineName: string,
    nextLink: string,
    options?: HybridIdentityMetadataListByMachinesNextOptionalParams
  ): Promise<HybridIdentityMetadataListByMachinesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, machineName, nextLink, options },
      listByMachinesNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/hybridIdentityMetadata/{metadataName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadata
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.machineName,
    Parameters.metadataName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByMachinesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/hybridIdentityMetadata",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadataList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.machineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByMachinesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HybridIdentityMetadataList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.machineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
