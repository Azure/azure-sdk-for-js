/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SettingsOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridComputeManagementClient } from "../hybridComputeManagementClient";
import {
  SettingsGetOptionalParams,
  SettingsGetResponse,
  Settings,
  SettingsUpdateOptionalParams,
  SettingsUpdateResponse,
  SettingsPatchOptionalParams,
  SettingsPatchResponse,
} from "../models";

/** Class containing SettingsOperations operations. */
export class SettingsOperationsImpl implements SettingsOperations {
  private readonly client: HybridComputeManagementClient;

  /**
   * Initialize a new instance of the class SettingsOperations class.
   * @param client Reference to the service client
   */
  constructor(client: HybridComputeManagementClient) {
    this.client = client;
  }

  /**
   * Returns the base Settings for the target resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param baseProvider The name of the base Resource Provider.
   * @param baseResourceType The name of the base Resource Type.
   * @param baseResourceName The name of the base resource.
   * @param settingsResourceName The name of the settings resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    baseProvider: string,
    baseResourceType: string,
    baseResourceName: string,
    settingsResourceName: string,
    options?: SettingsGetOptionalParams,
  ): Promise<SettingsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        baseProvider,
        baseResourceType,
        baseResourceName,
        settingsResourceName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * Updates the base Settings of the target resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param baseProvider The name of the base Resource Provider.
   * @param baseResourceType The name of the base Resource Type.
   * @param baseResourceName The name of the base resource.
   * @param settingsResourceName The name of the settings resource.
   * @param parameters Settings details
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    baseProvider: string,
    baseResourceType: string,
    baseResourceName: string,
    settingsResourceName: string,
    parameters: Settings,
    options?: SettingsUpdateOptionalParams,
  ): Promise<SettingsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        baseProvider,
        baseResourceType,
        baseResourceName,
        settingsResourceName,
        parameters,
        options,
      },
      updateOperationSpec,
    );
  }

  /**
   * Update the base Settings of the target resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param baseProvider The name of the base Resource Provider.
   * @param baseResourceType The name of the base Resource Type.
   * @param baseResourceName The name of the base resource.
   * @param settingsResourceName The name of the settings resource.
   * @param parameters Settings details
   * @param options The options parameters.
   */
  patch(
    resourceGroupName: string,
    baseProvider: string,
    baseResourceType: string,
    baseResourceName: string,
    settingsResourceName: string,
    parameters: Settings,
    options?: SettingsPatchOptionalParams,
  ): Promise<SettingsPatchResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        baseProvider,
        baseResourceType,
        baseResourceName,
        settingsResourceName,
        parameters,
        options,
      },
      patchOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{baseProvider}/{baseResourceType}/{baseResourceName}/providers/Microsoft.HybridCompute/settings/{settingsResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Settings,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.baseProvider,
    Parameters.baseResourceType,
    Parameters.baseResourceName,
    Parameters.settingsResourceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{baseProvider}/{baseResourceType}/{baseResourceName}/providers/Microsoft.HybridCompute/settings/{settingsResourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Settings,
    },
    201: {
      bodyMapper: Mappers.Settings,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.baseProvider,
    Parameters.baseResourceType,
    Parameters.baseResourceName,
    Parameters.settingsResourceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const patchOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{baseProvider}/{baseResourceType}/{baseResourceName}/providers/Microsoft.HybridCompute/settings/{settingsResourceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Settings,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.baseProvider,
    Parameters.baseResourceType,
    Parameters.baseResourceName,
    Parameters.settingsResourceName,
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
