/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { ExtensionMetadata } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridComputeManagementClient } from "../hybridComputeManagementClient";
import {
  ExtensionValue,
  ExtensionMetadataListOptionalParams,
  ExtensionMetadataListResponse,
  ExtensionMetadataGetOptionalParams,
  ExtensionMetadataGetResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ExtensionMetadata operations. */
export class ExtensionMetadataImpl implements ExtensionMetadata {
  private readonly client: HybridComputeManagementClient;

  /**
   * Initialize a new instance of the class ExtensionMetadata class.
   * @param client Reference to the service client
   */
  constructor(client: HybridComputeManagementClient) {
    this.client = client;
  }

  /**
   * Gets all Extension versions based on location, publisher, extensionType
   * @param location The location of the Extension being received.
   * @param publisher The publisher of the Extension being received.
   * @param extensionType The extensionType of the Extension being received.
   * @param options The options parameters.
   */
  public list(
    location: string,
    publisher: string,
    extensionType: string,
    options?: ExtensionMetadataListOptionalParams,
  ): PagedAsyncIterableIterator<ExtensionValue> {
    const iter = this.listPagingAll(
      location,
      publisher,
      extensionType,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          location,
          publisher,
          extensionType,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    location: string,
    publisher: string,
    extensionType: string,
    options?: ExtensionMetadataListOptionalParams,
    _settings?: PageSettings,
  ): AsyncIterableIterator<ExtensionValue[]> {
    let result: ExtensionMetadataListResponse;
    result = await this._list(location, publisher, extensionType, options);
    yield result.value || [];
  }

  private async *listPagingAll(
    location: string,
    publisher: string,
    extensionType: string,
    options?: ExtensionMetadataListOptionalParams,
  ): AsyncIterableIterator<ExtensionValue> {
    for await (const page of this.listPagingPage(
      location,
      publisher,
      extensionType,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets an Extension Metadata based on location, publisher, extensionType and version
   * @param location The location of the Extension being received.
   * @param publisher The publisher of the Extension being received.
   * @param extensionType The extensionType of the Extension being received.
   * @param version The version of the Extension being received.
   * @param options The options parameters.
   */
  get(
    location: string,
    publisher: string,
    extensionType: string,
    version: string,
    options?: ExtensionMetadataGetOptionalParams,
  ): Promise<ExtensionMetadataGetResponse> {
    return this.client.sendOperationRequest(
      { location, publisher, extensionType, version, options },
      getOperationSpec,
    );
  }

  /**
   * Gets all Extension versions based on location, publisher, extensionType
   * @param location The location of the Extension being received.
   * @param publisher The publisher of the Extension being received.
   * @param extensionType The extensionType of the Extension being received.
   * @param options The options parameters.
   */
  private _list(
    location: string,
    publisher: string,
    extensionType: string,
    options?: ExtensionMetadataListOptionalParams,
  ): Promise<ExtensionMetadataListResponse> {
    return this.client.sendOperationRequest(
      { location, publisher, extensionType, options },
      listOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.HybridCompute/locations/{location}/publishers/{publisher}/extensionTypes/{extensionType}/versions/{version}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionValue,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.publisher,
    Parameters.extensionType,
    Parameters.version,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.HybridCompute/locations/{location}/publishers/{publisher}/extensionTypes/{extensionType}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionValueListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.publisher,
    Parameters.extensionType,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
