/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { AgentVersionOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { HybridComputeManagementClient } from "../hybridComputeManagementClient";
import {
  AgentVersionListOptionalParams,
  AgentVersionListResponse,
  AgentVersionGetOptionalParams,
  AgentVersionGetResponse
} from "../models";

/** Class containing AgentVersionOperations operations. */
export class AgentVersionOperationsImpl implements AgentVersionOperations {
  private readonly client: HybridComputeManagementClient;

  /**
   * Initialize a new instance of the class AgentVersionOperations class.
   * @param client Reference to the service client
   */
  constructor(client: HybridComputeManagementClient) {
    this.client = client;
  }

  /**
   * Gets all Agent Versions along with the download link currently present.
   * @param osType Defines the os type.
   * @param options The options parameters.
   */
  list(
    osType: string,
    options?: AgentVersionListOptionalParams
  ): Promise<AgentVersionListResponse> {
    return this.client.sendOperationRequest(
      { osType, options },
      listOperationSpec
    );
  }

  /**
   * Gets an Agent Version along with the download link currently present.
   * @param osType Defines the os type
   * @param version Defines the agent version. To get latest, use latest or else a specific agent
   *                version.
   * @param options The options parameters.
   */
  get(
    osType: string,
    version: string,
    options?: AgentVersionGetOptionalParams
  ): Promise<AgentVersionGetResponse> {
    return this.client.sendOperationRequest(
      { osType, version, options },
      getOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.HybridCompute/osType/{osType}/agentVersions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AgentVersionsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.osType],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.HybridCompute/osType/{osType}/agentVersions/{version}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AgentVersion
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.version, Parameters.osType],
  headerParameters: [Parameters.accept],
  serializer
};
