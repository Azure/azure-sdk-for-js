/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import { TokenCredential } from "@azure/core-auth";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { HybridComputeManagementClientContext } from "./hybridComputeManagementClientContext";


class HybridComputeManagementClient extends HybridComputeManagementClientContext {
  // Operation groups
  machines: operations.Machines;
  machineExtensions: operations.MachineExtensions;
  operations: operations.Operations;
  privateLinkScopes: operations.PrivateLinkScopes;
  privateLinkResources: operations.PrivateLinkResources;
  privateEndpointConnections: operations.PrivateEndpointConnections;

  /**
   * Initializes a new instance of the HybridComputeManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure. Credentials
   * implementing the TokenCredential interface from the @azure/identity package are recommended. For
   * more information about these credentials, see
   * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
   * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
   * @azure/ms-rest-browserauth are also supported.
   * @param subscriptionId The ID of the target subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials | TokenCredential, subscriptionId: string, options?: Models.HybridComputeManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.machines = new operations.Machines(this);
    this.machineExtensions = new operations.MachineExtensions(this);
    this.operations = new operations.Operations(this);
    this.privateLinkScopes = new operations.PrivateLinkScopes(this);
    this.privateLinkResources = new operations.PrivateLinkResources(this);
    this.privateEndpointConnections = new operations.PrivateEndpointConnections(this);
  }

  /**
   * The operation to Upgrade Machine Extensions.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the hybrid machine.
   * @param extensionUpgradeParameters Parameters supplied to the Upgrade Extensions operation.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  upgradeExtensions(resourceGroupName: string, machineName: string, extensionUpgradeParameters: Models.MachineExtensionUpgrade, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginUpgradeExtensions(resourceGroupName,machineName,extensionUpgradeParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The operation to Upgrade Machine Extensions.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the hybrid machine.
   * @param extensionUpgradeParameters Parameters supplied to the Upgrade Extensions operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpgradeExtensions(resourceGroupName: string, machineName: string, extensionUpgradeParameters: Models.MachineExtensionUpgrade, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.sendLRORequest(
      {
        resourceGroupName,
        machineName,
        extensionUpgradeParameters,
        options
      },
      beginUpgradeExtensionsOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const beginUpgradeExtensionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/upgradeExtensions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.machineName0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "extensionUpgradeParameters",
    mapper: {
      ...Mappers.MachineExtensionUpgrade,
      required: true
    }
  },
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

export {
  HybridComputeManagementClient,
  HybridComputeManagementClientContext,
  Models as HybridComputeManagementModels,
  Mappers as HybridComputeManagementMappers
};
export * from "./operations";
