/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Gateway,
  GatewaysListByResourceGroupOptionalParams,
  GatewaysListBySubscriptionOptionalParams,
  GatewaysCreateOrUpdateOptionalParams,
  GatewaysCreateOrUpdateResponse,
  GatewayUpdate,
  GatewaysUpdateOptionalParams,
  GatewaysUpdateResponse,
  GatewaysGetOptionalParams,
  GatewaysGetResponse,
  GatewaysDeleteOptionalParams,
  GatewaysDeleteResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Gateways. */
export interface Gateways {
  /**
   * The operation to get all gateways of a non-Azure machine
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: GatewaysListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<Gateway>;
  /**
   * The operation to get all gateways of a non-Azure machine
   * @param options The options parameters.
   */
  listBySubscription(
    options?: GatewaysListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<Gateway>;
  /**
   * The operation to create or update a gateway.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the Gateway.
   * @param parameters Parameters supplied to the Create gateway operation.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    gatewayName: string,
    parameters: Gateway,
    options?: GatewaysCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GatewaysCreateOrUpdateResponse>,
      GatewaysCreateOrUpdateResponse
    >
  >;
  /**
   * The operation to create or update a gateway.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the Gateway.
   * @param parameters Parameters supplied to the Create gateway operation.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    gatewayName: string,
    parameters: Gateway,
    options?: GatewaysCreateOrUpdateOptionalParams,
  ): Promise<GatewaysCreateOrUpdateResponse>;
  /**
   * The operation to update a gateway.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the Gateway.
   * @param parameters Parameters supplied to the Update gateway operation.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    gatewayName: string,
    parameters: GatewayUpdate,
    options?: GatewaysUpdateOptionalParams,
  ): Promise<GatewaysUpdateResponse>;
  /**
   * Retrieves information about the view of a gateway.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the Gateway.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    gatewayName: string,
    options?: GatewaysGetOptionalParams,
  ): Promise<GatewaysGetResponse>;
  /**
   * The operation to delete a gateway.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the Gateway.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    gatewayName: string,
    options?: GatewaysDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<GatewaysDeleteResponse>,
      GatewaysDeleteResponse
    >
  >;
  /**
   * The operation to delete a gateway.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param gatewayName The name of the Gateway.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    gatewayName: string,
    options?: GatewaysDeleteOptionalParams,
  ): Promise<GatewaysDeleteResponse>;
}
