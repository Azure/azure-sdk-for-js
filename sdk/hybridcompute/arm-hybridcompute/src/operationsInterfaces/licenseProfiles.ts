/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  LicenseProfile,
  LicenseProfilesListOptionalParams,
  LicenseProfilesCreateOrUpdateOptionalParams,
  LicenseProfilesCreateOrUpdateResponse,
  LicenseProfileUpdate,
  LicenseProfilesUpdateOptionalParams,
  LicenseProfilesUpdateResponse,
  LicenseProfilesGetOptionalParams,
  LicenseProfilesGetResponse,
  LicenseProfilesDeleteOptionalParams,
  LicenseProfilesDeleteResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a LicenseProfiles. */
export interface LicenseProfiles {
  /**
   * The operation to get all license profiles of a non-Azure machine
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the machine.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    machineName: string,
    options?: LicenseProfilesListOptionalParams,
  ): PagedAsyncIterableIterator<LicenseProfile>;
  /**
   * The operation to create or update a license profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the hybrid machine.
   * @param parameters Parameters supplied to the Create or Update license profile operation.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    machineName: string,
    parameters: LicenseProfile,
    options?: LicenseProfilesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LicenseProfilesCreateOrUpdateResponse>,
      LicenseProfilesCreateOrUpdateResponse
    >
  >;
  /**
   * The operation to create or update a license profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the hybrid machine.
   * @param parameters Parameters supplied to the Create or Update license profile operation.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    machineName: string,
    parameters: LicenseProfile,
    options?: LicenseProfilesCreateOrUpdateOptionalParams,
  ): Promise<LicenseProfilesCreateOrUpdateResponse>;
  /**
   * The operation to update a license profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the hybrid machine.
   * @param parameters Parameters supplied to the Update license profile operation.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    machineName: string,
    parameters: LicenseProfileUpdate,
    options?: LicenseProfilesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LicenseProfilesUpdateResponse>,
      LicenseProfilesUpdateResponse
    >
  >;
  /**
   * The operation to update a license profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the hybrid machine.
   * @param parameters Parameters supplied to the Update license profile operation.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    machineName: string,
    parameters: LicenseProfileUpdate,
    options?: LicenseProfilesUpdateOptionalParams,
  ): Promise<LicenseProfilesUpdateResponse>;
  /**
   * Retrieves information about the view of a license profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the hybrid machine.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    machineName: string,
    options?: LicenseProfilesGetOptionalParams,
  ): Promise<LicenseProfilesGetResponse>;
  /**
   * The operation to delete a license profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the hybrid machine.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    machineName: string,
    options?: LicenseProfilesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<LicenseProfilesDeleteResponse>,
      LicenseProfilesDeleteResponse
    >
  >;
  /**
   * The operation to delete a license profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param machineName The name of the hybrid machine.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    machineName: string,
    options?: LicenseProfilesDeleteOptionalParams,
  ): Promise<LicenseProfilesDeleteResponse>;
}
