/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Describes the properties of a License. */
export interface LicenseDetails {
  /** Describes the state of the license. */
  state?: LicenseState;
  /** Describes the license target server. */
  target?: LicenseTarget;
  /** Describes the edition of the license. The values are either Standard or Datacenter. */
  edition?: LicenseEdition;
  /** Describes the license core type (pCore or vCore). */
  type?: LicenseCoreType;
  /** Describes the number of processors. */
  processors?: number;
  /**
   * Describes the number of assigned licenses.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assignedLicenses?: number;
  /**
   * Describes the immutable id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly immutableId?: string;
  /** A list of volume license details. */
  volumeLicenseDetails?: VolumeLicenseDetails[];
}

export interface VolumeLicenseDetails {
  /** Describes the program year the volume license is for. */
  programYear?: ProgramYear;
  /** The invoice id for the volume license. */
  invoiceId?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The Update Resource model definition. */
export interface ResourceUpdate {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** The List license operation response. */
export interface LicensesListResult {
  /** The list of licenses. */
  value: License[];
  /** The URI to fetch the next page of Machines. Call ListNext() with this URI to fetch the next page of license profile. */
  nextLink?: string;
}

/** Metadata pertaining to the geographic location of the resource. */
export interface LocationData {
  /** A canonical name for the geographic or physical location. */
  name: string;
  /** The city or locality where the resource is located. */
  city?: string;
  /** The district, state, or province where the resource is located. */
  district?: string;
  /** The country or region where the resource is located */
  countryOrRegion?: string;
}

/** Configurable properties that the user can set locally via the azcmagent config command, or remotely via ARM. */
export interface AgentConfiguration {
  /**
   * Specifies the URL of the proxy to be used.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly proxyUrl?: string;
  /**
   * Specifies the list of ports that the agent will be able to listen on.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly incomingConnectionsPorts?: string[];
  /**
   * Array of extensions that are allowed to be installed or updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly extensionsAllowList?: ConfigurationExtension[];
  /**
   * Array of extensions that are blocked (cannot be installed or updated)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly extensionsBlockList?: ConfigurationExtension[];
  /**
   * List of service names which should not use the specified proxy server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly proxyBypass?: string[];
  /**
   * Specifies whether the extension service is enabled or disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly extensionsEnabled?: string;
  /**
   * Specified whether the guest configuration service is enabled or disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly guestConfigurationEnabled?: string;
  /**
   * Name of configuration mode to use. Modes are pre-defined configurations of security controls, extension allowlists and guest configuration, maintained by Microsoft.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configMode?: AgentConfigurationMode;
}

/** Describes properties that can identify extensions. */
export interface ConfigurationExtension {
  /**
   * Publisher of the extension.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publisher?: string;
  /**
   * Type of the extension.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Reports the state and behavior of dependent services. */
export interface ServiceStatuses {
  /** The state of the extension service on the Arc-enabled machine. */
  extensionService?: ServiceStatus;
  /** The state of the guest configuration service on the Arc-enabled machine. */
  guestConfigurationService?: ServiceStatus;
}

/** Describes the status and behavior of a service. */
export interface ServiceStatus {
  /** The current status of the service. */
  status?: string;
  /** The behavior of the service when the Arc-enabled machine starts up. */
  startupType?: string;
}

/** Describes the hardware of the machine */
export interface HardwareProfile {
  /**
   * The total physical memory on the machine
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalPhysicalMemoryInBytes?: number;
  /**
   * The total number of CPU sockets available on the machine
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfCpuSockets?: number;
  /**
   * The physical processors of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly processors?: Processor[];
}

/** Describes the firmware of the machine */
export interface Processor {
  /**
   * The name of the processor.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The total number of physical cores on the processor.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfCores?: number;
}

/** Describes the storage configuration of the machine */
export interface StorageProfile {
  /** The disks on the machine. */
  disks?: Disk[];
}

/** Describes a disk on the machine */
export interface Disk {
  /** The path of the disk. */
  path?: string;
  /** The type of the disk. */
  diskType?: string;
  /** The generated ID of the disk. */
  generatedId?: string;
  /** The ID of the disk. */
  id?: string;
  /** The name of the disk. */
  name?: string;
  /** The size of the disk, in bytes */
  maxSizeInBytes?: number;
  /** The amount of space used on the disk, in bytes */
  usedSpaceInBytes?: number;
}

/** Describes the firmware of the machine */
export interface FirmwareProfile {
  /**
   * The serial number of the firmware
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serialNumber?: string;
  /**
   * The type of the firmware
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** The metadata of the cloud environment (Azure/GCP/AWS/OCI...). */
export interface CloudMetadata {
  /**
   * Specifies the cloud provider (Azure/AWS/GCP...).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
}

/** The info w.r.t Agent Upgrade. */
export interface AgentUpgrade {
  /** Specifies the version info w.r.t AgentUpgrade for the machine. */
  desiredVersion?: string;
  /** The correlation ID associated with an agent upgrade operation. */
  correlationId?: string;
  /** Specifies if the machine's agent should be upgraded */
  enableAutomaticUpgrade?: boolean;
  /**
   * Specifies the version of the last attempt
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastAttemptDesiredVersion?: string;
  /**
   * Timestamp of last upgrade attempt
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastAttemptTimestamp?: Date;
  /**
   * Specifies the status of Agent Upgrade.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastAttemptStatus?: LastAttemptStatusEnum;
  /**
   * Failure message of last upgrade attempt if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastAttemptMessage?: string;
}

/** Specifies the operating system settings for the hybrid machine. */
export interface OSProfile {
  /**
   * Specifies the host OS name of the hybrid machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly computerName?: string;
  /** Specifies the windows configuration for update management. */
  windowsConfiguration?: OSProfileWindowsConfiguration;
  /** Specifies the linux configuration for update management. */
  linuxConfiguration?: OSProfileLinuxConfiguration;
}

/** Specifies the windows configuration for update management. */
export interface OSProfileWindowsConfiguration {
  /** Specifies the assessment mode. */
  assessmentMode?: AssessmentModeTypes;
  /** Specifies the patch mode. */
  patchMode?: PatchModeTypes;
  /** Captures the hotpatch capability enrollment intent of the customers, which enables customers to patch their Windows machines without requiring a reboot. */
  enableHotpatching?: boolean;
  /**
   * Status of the hotpatch capability enrollment or disenrollment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: PatchSettingsStatus;
}

/** Status of the hotpatch capability enrollment or disenrollment. */
export interface PatchSettingsStatus {
  /** Indicates the current status of the hotpatch being enabled or disabled. */
  hotpatchEnablementStatus?: HotpatchEnablementStatus;
  /**
   * The errors that were encountered during the hotpatch capability enrollment or disenrollment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ErrorDetail;
}

/** Specifies the linux configuration for update management. */
export interface OSProfileLinuxConfiguration {
  /** Specifies the assessment mode. */
  assessmentMode?: AssessmentModeTypes;
  /** Specifies the patch mode. */
  patchMode?: PatchModeTypes;
  /** Captures the hotpatch capability enrollment intent of the customers, which enables customers to patch their Windows machines without requiring a reboot. */
  enableHotpatching?: boolean;
  /**
   * Status of the hotpatch capability enrollment or disenrollment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: PatchSettingsStatus;
}

/** License Profile Instance View in Machine Properties. */
export interface LicenseProfileMachineInstanceView {
  /**
   * Indicates the license status of the OS.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly licenseStatus?: LicenseStatus;
  /**
   * Indicates the license channel.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly licenseChannel?: string;
  /** Properties for the Machine ESU profile. */
  esuProfile?: LicenseProfileMachineInstanceViewEsuProperties;
  /** Indicates the subscription status of the product. */
  subscriptionStatus?: LicenseProfileSubscriptionStatus;
  /** Indicates the product type of the license. */
  productType?: LicenseProfileProductType;
  /**
   * The timestamp in UTC when the user enrolls the feature.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enrollmentDate?: Date;
  /**
   * The timestamp in UTC when the billing starts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly billingStartDate?: Date;
  /**
   * The timestamp in UTC when the user disenrolled the feature.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disenrollmentDate?: Date;
  /**
   * The timestamp in UTC when the billing ends.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly billingEndDate?: Date;
  /**
   * The errors that were encountered during the feature enrollment or disenrollment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ErrorDetail;
  /** The list of product features. */
  productFeatures?: ProductFeature[];
  /** Specifies if this machine is licensed as part of a Software Assurance agreement. */
  softwareAssuranceCustomer?: boolean;
}

/** License profile storage model for ESU properties. */
export interface LicenseProfileStorageModelEsuProperties {
  /**
   * The guid id of the license.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assignedLicenseImmutableId?: string;
  /**
   * The list of ESU keys.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly esuKeys?: EsuKey[];
}

/** ESU key */
export interface EsuKey {
  /** SKU number. */
  sku?: string;
  /** The current status of the license profile key. Represented by the same integer value that is presented on the machine itself when querying the license key status. */
  licenseStatus?: number;
}

/** Product Feature */
export interface ProductFeature {
  /** Product feature name. */
  name?: string;
  /** Indicates the current status of the product features. */
  subscriptionStatus?: LicenseProfileSubscriptionStatus;
  /**
   * The timestamp in UTC when the user enrolls the feature.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enrollmentDate?: Date;
  /**
   * The timestamp in UTC when the billing starts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly billingStartDate?: Date;
  /**
   * The timestamp in UTC when the user disenrolled the feature.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disenrollmentDate?: Date;
  /**
   * The timestamp in UTC when the billing ends.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly billingEndDate?: Date;
  /**
   * The errors that were encountered during the feature enrollment or disenrollment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ErrorDetail;
}

/** Describes the Machine Extension Instance View. */
export interface MachineExtensionInstanceView {
  /** The machine extension name. */
  name?: string;
  /** Specifies the type of the extension; an example is "CustomScriptExtension". */
  type?: string;
  /** Specifies the version of the script handler. */
  typeHandlerVersion?: string;
  /** Instance view status. */
  status?: MachineExtensionInstanceViewStatus;
}

/** Instance view status. */
export interface MachineExtensionInstanceViewStatus {
  /** The status code. */
  code?: string;
  /** The level code. */
  level?: StatusLevelTypes;
  /** The short localizable label for the status. */
  displayStatus?: string;
  /** The detailed status message, including for alerts and error messages. */
  message?: string;
  /** The time of the status. */
  time?: Date;
}

/** Describes the network information on this machine. */
export interface NetworkProfile {
  /** The list of network interfaces. */
  networkInterfaces?: NetworkInterface[];
}

/** Describes a network interface. */
export interface NetworkInterface {
  /** Represents MAC address of the network interface. */
  macAddress?: string;
  /** Represents the ID of the network interface. */
  id?: string;
  /** Represents the name of the network interface. */
  name?: string;
  /** The list of IP addresses in this interface. */
  ipAddresses?: IpAddress[];
}

/** Describes properties of the IP address. */
export interface IpAddress {
  /** Represents the IP Address. */
  address?: string;
  /** Represents the Ip Address Version. */
  ipAddressVersion?: string;
  /**
   * The subnet to which this IP address belongs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subnet?: Subnet;
}

/** Describes the subnet. */
export interface Subnet {
  /** Represents address prefix. */
  addressPrefix?: string;
}

/** Describes the properties of a Machine Extension. */
export interface MachineExtensionProperties {
  /** How the extension handler should be forced to update even if the extension configuration has not changed. */
  forceUpdateTag?: string;
  /** The name of the extension handler publisher. */
  publisher?: string;
  /** Specifies the type of the extension; an example is "CustomScriptExtension". */
  type?: string;
  /** Specifies the version of the script handler. */
  typeHandlerVersion?: string;
  /** Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. */
  enableAutomaticUpgrade?: boolean;
  /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
  autoUpgradeMinorVersion?: boolean;
  /** Json formatted public settings for the extension. */
  settings?: { [propertyName: string]: any };
  /** The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. */
  protectedSettings?: { [propertyName: string]: any };
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The machine extension instance view. */
  instanceView?: MachineExtensionInstanceView;
}

/** Identity for the resource. */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The identity type. */
  type?: "SystemAssigned";
}

/** Product Feature */
export interface ProductFeatureUpdate {
  /** Product feature name. */
  name?: string;
  /** Indicates the new status of the product feature. */
  subscriptionStatus?: LicenseProfileSubscriptionStatusUpdate;
}

/** The List hybrid machine license profile operation response. */
export interface LicenseProfilesListResult {
  /** The list of license profiles. */
  value: LicenseProfile[];
  /** The URI to fetch the next page of Machines. Call ListNext() with this URI to fetch the next page of license profile. */
  nextLink?: string;
}

/** Describes the properties of an AssessPatches result. */
export interface MachineAssessPatchesResult {
  /**
   * The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded", or "CompletedWithWarnings."
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: PatchOperationStatus;
  /**
   * The activity ID of the operation that produced this result.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assessmentActivityId?: string;
  /**
   * The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rebootPending?: boolean;
  /** Summarization of patches available for installation on the machine by classification. */
  availablePatchCountByClassification?: AvailablePatchCountByClassification;
  /**
   * The UTC timestamp when the operation began.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startDateTime?: Date;
  /**
   * The UTC timestamp when the operation finished.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedDateTime?: Date;
  /**
   * Indicates if operation was triggered by user or by platform.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedBy?: PatchOperationStartedBy;
  /**
   * Specifies the patch service used for the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly patchServiceUsed?: PatchServiceUsed;
  /**
   * The operating system type of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OsType;
  /**
   * The errors that were encountered during execution of the operation. The details array contains the list of them.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorDetails?: ErrorDetail;
}

/** Summarization of patches available for installation on the machine by classification. */
export interface AvailablePatchCountByClassification {
  /**
   * Number of security patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly security?: number;
  /**
   * Number of critical patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly critical?: number;
  /**
   * Number of definition patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly definition?: number;
  /**
   * Number of update Rollup patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updateRollup?: number;
  /**
   * Number of feature pack patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly featurePack?: number;
  /**
   * Number of service pack patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly servicePack?: number;
  /**
   * Number of tools patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tools?: number;
  /**
   * Number of updates category patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updates?: number;
  /**
   * Number of other patches available for installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly other?: number;
}

/** Input for InstallPatches as directly received by the API */
export interface MachineInstallPatchesParameters {
  /** Specifies the maximum amount of time that the operation will run. It must be an ISO 8601-compliant duration string such as PT4H (4 hours) */
  maximumDuration: string;
  /** Defines when it is acceptable to reboot a VM during a software update operation. */
  rebootSetting: VMGuestPatchRebootSetting;
  /** Input for InstallPatches on a Windows VM, as directly received by the API */
  windowsParameters?: WindowsParameters;
  /** Input for InstallPatches on a Linux VM, as directly received by the API */
  linuxParameters?: LinuxParameters;
}

/** Input for InstallPatches on a Windows VM, as directly received by the API */
export interface WindowsParameters {
  /** The update classifications to select when installing patches for Windows. */
  classificationsToInclude?: VMGuestPatchClassificationWindows[];
  /** Kbs to include in the patch operation */
  kbNumbersToInclude?: string[];
  /** Kbs to exclude in the patch operation */
  kbNumbersToExclude?: string[];
  /** Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true. */
  excludeKbsRequiringReboot?: boolean;
  /** This is used to install patches that were published on or before this given max published date. */
  maxPatchPublishDate?: Date;
}

/** Input for InstallPatches on a Linux VM, as directly received by the API */
export interface LinuxParameters {
  /** The update classifications to select when installing patches for Linux. */
  classificationsToInclude?: VMGuestPatchClassificationLinux[];
  /** packages to include in the patch operation. Format: packageName_packageVersion */
  packageNameMasksToInclude?: string[];
  /** packages to exclude in the patch operation. Format: packageName_packageVersion */
  packageNameMasksToExclude?: string[];
}

/** The result summary of an installation operation. */
export interface MachineInstallPatchesResult {
  /**
   * The overall success or failure status of the operation. It remains "InProgress" until the operation completes. At that point it will become "Failed", "Succeeded", "Unknown" or "CompletedWithWarnings."
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: PatchOperationStatus;
  /**
   * The activity ID of the operation that produced this result.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly installationActivityId?: string;
  /**
   * The reboot state of the VM following completion of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rebootStatus?: VMGuestPatchRebootStatus;
  /**
   * Whether the operation ran out of time before it completed all its intended actions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maintenanceWindowExceeded?: boolean;
  /**
   * The number of patches that were not installed due to the user blocking their installation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly excludedPatchCount?: number;
  /**
   * The number of patches that were detected as available for install, but did not meet the operation's criteria.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly notSelectedPatchCount?: number;
  /**
   * The number of patches that were identified as meeting the installation criteria, but were not able to be installed. Typically this happens when maintenanceWindowExceeded == true.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly pendingPatchCount?: number;
  /**
   * The number of patches successfully installed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly installedPatchCount?: number;
  /**
   * The number of patches that could not be installed due to some issue. See errors for details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly failedPatchCount?: number;
  /**
   * The UTC timestamp when the operation began.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startDateTime?: Date;
  /**
   * The UTC timestamp when the operation finished.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedDateTime?: Date;
  /**
   * Indicates if operation was triggered by user or by platform.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedBy?: PatchOperationStartedBy;
  /**
   * Specifies the patch service used for the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly patchServiceUsed?: PatchServiceUsed;
  /**
   * The operating system type of the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OsType;
  /**
   * The errors that were encountered during execution of the operation. The details array contains the list of them.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorDetails?: ErrorDetail;
}

/** The List hybrid machine operation response. */
export interface MachineListResult {
  /** The list of hybrid machines. */
  value: Machine[];
  /** The URI to fetch the next page of Machines. Call ListNext() with this URI to fetch the next page of hybrid machines. */
  nextLink?: string;
}

/** Describes the Machine Extensions List Result. */
export interface MachineExtensionsListResult {
  /** The list of extensions */
  value?: MachineExtension[];
  /** The uri to fetch the next page of machine extensions. Call ListNext() with this to fetch the next page of extensions. */
  nextLink?: string;
}

/** Describes the Machine Extension Upgrade Properties. */
export interface MachineExtensionUpgrade {
  /** Describes the Extension Target Properties. */
  extensionTargets?: { [propertyName: string]: ExtensionTargetProperties };
}

/** Describes the Machine Extension Target Version Properties */
export interface ExtensionTargetProperties {
  /** Properties for the specified Extension to Upgrade. */
  targetVersion?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface ResourceAutoGenerated {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** The List Extension Metadata response. */
export interface ExtensionValueListResult {
  /**
   * The list of extension metadata
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ExtensionValue[];
}

/** The List Compute Operation operation response. */
export interface OperationListResult {
  /**
   * The list of compute operations
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: OperationValue[];
}

/** Describes the properties of a Compute Operation value. */
export interface OperationValue {
  /**
   * The origin of the compute operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: string;
  /**
   * The name of the compute operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /** Display properties */
  display?: OperationValueDisplay;
  /**
   * This property indicates if the operation is an action or a data action
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
}

/** Describes the properties of a Hybrid Compute Operation Value Display. */
export interface OperationValueDisplay {
  /**
   * The display name of the compute operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The display name of the resource the operation applies to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The description of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * The resource provider for the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
}

/** Describes the script sources for run command. Use only one of script, scriptUri, commandId. */
export interface MachineRunCommandScriptSource {
  /** Specifies the script content to be executed on the machine. */
  script?: string;
  /** Specifies the script download location. It can be either SAS URI of an Azure storage blob with read access or public URI. */
  scriptUri?: string;
  /** Specifies the commandId of predefined built-in script. */
  commandId?: string;
  /** User-assigned managed identity that has access to scriptUri in case of Azure storage blob. Use an empty object in case of system-assigned identity. Make sure the Azure storage blob exists, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged. */
  scriptUriManagedIdentity?: RunCommandManagedIdentity;
}

/**  Contains clientId or objectId (use only one, not both) of a user-assigned managed identity that has access to storage blob used in Run Command. Use an empty RunCommandManagedIdentity object in case of system-assigned identity. Make sure the Azure storage blob exists in case of scriptUri, and managed identity has been given access to blob's container with 'Storage Blob Data Reader' role assignment with scriptUri blob and 'Storage Blob Data Contributor' for Append blobs(outputBlobUri, errorBlobUri). In case of user assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged. */
export interface RunCommandManagedIdentity {
  /** Client Id (GUID value) of the user-assigned managed identity. ObjectId should not be used if this is provided. */
  clientId?: string;
  /** Object Id (GUID value) of the user-assigned managed identity. ClientId should not be used if this is provided. */
  objectId?: string;
}

/** Describes the properties of a run command parameter. */
export interface RunCommandInputParameter {
  /** The run command parameter name. */
  name: string;
  /** The run command parameter value. */
  value: string;
}

/** The instance view of a machine run command. */
export interface MachineRunCommandInstanceView {
  /** Script execution status. */
  executionState?: ExecutionState;
  /** Communicate script configuration errors or execution messages. */
  executionMessage?: string;
  /** Exit code returned from script execution. */
  exitCode?: number;
  /** Script output stream. */
  output?: string;
  /** Script error stream. */
  error?: string;
  /** Script start time. */
  startTime?: Date;
  /** Script end time. */
  endTime?: Date;
  /** The  status information. */
  statuses?: ExtensionsResourceStatus[];
}

/** Instance view status. */
export interface ExtensionsResourceStatus {
  /** The status code. */
  code?: string;
  /** The level code. */
  level?: ExtensionsStatusLevelTypes;
  /** The short localizable label for the status. */
  displayStatus?: string;
  /** The detailed status message, including for alerts and error messages. */
  message?: string;
  /** The time of the status. */
  time?: Date;
}

/** Describes the Run Commands List Result. */
export interface MachineRunCommandsListResult {
  /** The list of run commands */
  value?: MachineRunCommand[];
  /** The uri to fetch the next page of run commands. Call ListNext() with this to fetch the next page of run commands. */
  nextLink?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponseAutoGenerated {
  /** The error object. */
  error?: ErrorDetailAutoGenerated;
}

/** The error detail. */
export interface ErrorDetailAutoGenerated {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetailAutoGenerated[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The List license operation response. */
export interface GatewaysListResult {
  /** The list of Gateways. */
  value: Gateway[];
  /** The URI to fetch the next page of Gateways. Call ListNext() with this URI to fetch the next page of Gateways. */
  nextLink?: string;
}

/** Describes the list of Azure Arc PrivateLinkScope resources. */
export interface HybridComputePrivateLinkScopeListResult {
  /** List of Azure Arc PrivateLinkScope definitions. */
  value: HybridComputePrivateLinkScope[];
  /** The URI to get the next set of Azure Arc PrivateLinkScope definitions if too many PrivateLinkScopes where returned in the result set. */
  nextLink?: string;
}

/** Properties that define a Azure Arc PrivateLinkScope resource. */
export interface HybridComputePrivateLinkScopeProperties {
  /** Indicates whether machines associated with the private link scope can also use public Azure Arc service endpoints. */
  publicNetworkAccess?: PublicNetworkAccessType;
  /**
   * Current state of this PrivateLinkScope: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Provisioning ,Succeeded, Canceled and Failed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The Guid id of the private link scope.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateLinkScopeId?: string;
  /**
   * The collection of associated Private Endpoint Connections.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnectionDataModel[];
}

/** The Data Model for a Private Endpoint Connection associated with a Private Link Scope */
export interface PrivateEndpointConnectionDataModel {
  /**
   * The ARM Resource Id of the Private Endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The Name of the Private Endpoint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Azure resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The Private Endpoint Connection properties. */
  properties?: PrivateEndpointConnectionProperties;
}

/** Properties of a private endpoint connection. */
export interface PrivateEndpointConnectionProperties {
  /** Private endpoint which the connection belongs to. */
  privateEndpoint?: PrivateEndpointProperty;
  /** Connection state of the private endpoint connection. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionStateProperty;
  /**
   * State of the private endpoint connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * List of group IDs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupIds?: string[];
}

/** Private endpoint which the connection belongs to. */
export interface PrivateEndpointProperty {
  /** Resource id of the private endpoint. */
  id?: string;
}

/** State of the private endpoint connection. */
export interface PrivateLinkServiceConnectionStateProperty {
  /** The private link service connection status. */
  status: string;
  /** The private link service connection description. */
  description: string;
  /**
   * The actions required for private link service connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionsRequired?: string;
}

/** An azure resource object */
export interface PrivateLinkScopesResource {
  /**
   * Azure resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Azure resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Azure resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource location */
  location: string;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** A container holding only the Tags for a resource, allowing the user to update the tags on a PrivateLinkScope instance. */
export interface TagsResource {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** A list of private link resources */
export interface PrivateLinkResourceListResult {
  /**
   * Array of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: PrivateLinkResource[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Properties of a private link resource. */
export interface PrivateLinkResourceProperties {
  /**
   * The private link resource group id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * The private link resource required member names.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredMembers?: string[];
  /**
   * Required DNS zone names of the the private link resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredZoneNames?: string[];
}

/** A list of private endpoint connections. */
export interface PrivateEndpointConnectionListResult {
  /**
   * Array of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: PrivateEndpointConnection[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

export interface PrivateLinkScopeValidationDetails {
  /**
   * Azure resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Indicates whether machines associated with the private link scope can also use public Azure Arc service endpoints. */
  publicNetworkAccess?: PublicNetworkAccessType;
  /** List of Private Endpoint Connection details. */
  connectionDetails?: ConnectionDetail[];
}

export interface ConnectionDetail {
  /**
   * Azure resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The private endpoint connection private ip address
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateIpAddress?: string;
  /**
   * The private endpoint connection link identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly linkIdentifier?: string;
  /**
   * The private endpoint connection group id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * The private endpoint connection member name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly memberName?: string;
}

/** Properties that define a Network Security Perimeter resource. */
export interface NetworkSecurityPerimeterConfiguration {
  /**
   * Azure resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Azure resource name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Azure resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Current state of this NetworkSecurityPerimeter: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Provisioning ,Succeeded, Canceled and Failed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * Provisioning issues.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningIssues?: ProvisioningIssue[];
  /** The Network Security Perimeter associated with this configuration. */
  networkSecurityPerimeter?: NetworkSecurityPerimeter;
  /** The Resource Association. */
  resourceAssociation?: ResourceAssociation;
  /** Network Security Perimeter profile */
  profile?: NetworkSecurityPerimeterProfile;
}

/** Details on issues that occurred during provisioning. */
export interface ProvisioningIssue {
  /**
   * Name of the provisioning issue.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Issue type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly issueType?: ProvisioningIssueType;
  /**
   * Severity of the provisioning issue.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly severity?: ProvisioningIssueSeverity;
  /**
   * Description of the provisioning issue.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * ARM Ids of the resources that can be associated to the same perimeter to remediate the issue
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly suggestedResourceIds?: string[];
  /**
   * Access rules that can be added to the perimeter to remediate the issue
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly suggestedAccessRules?: AccessRule[];
}

/** Access rule. */
export interface AccessRule {
  /**
   * Name of the access rule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Direction of the access rule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly direction?: AccessRuleDirection;
  /**
   * Address prefixes that are allowed access.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly addressPrefixes?: string[];
}

/** Properties that define a Network Security Perimeter resource. */
export interface NetworkSecurityPerimeter {
  /**
   * Azure resource Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Guid of the Network Security Perimeter
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly perimeterGuid?: string;
  /**
   * Regional location of the perimeter
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
}

/** Properties that define a Resource Association. */
export interface ResourceAssociation {
  /**
   * Name of the Resource Association
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The access mode
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessMode?: AccessMode;
}

/** Network Security Perimeter profile */
export interface NetworkSecurityPerimeterProfile {
  /**
   * Name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Access rules version number
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessRulesVersion?: number;
  /**
   * Collection of access rules for the profile
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessRules?: AccessRule[];
  /**
   * Diagnostic settings version number
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly diagnosticSettingsVersion?: number;
  /**
   * Collection of enabled log categories for the profile
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enabledLogCategories?: string[];
}

/** A list of network security perimeter configurations. */
export interface NetworkSecurityPerimeterConfigurationListResult {
  /**
   * Array of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: NetworkSecurityPerimeterConfiguration[];
  /**
   * Link to retrieve next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Result of network security perimeter configurations. */
export interface NetworkSecurityPerimeterConfigurationReconcileResult {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
}

/** List of HybridIdentityMetadata. */
export interface HybridIdentityMetadataList {
  /** Url to follow for getting next page of HybridIdentityMetadata. */
  nextLink?: string;
  /** Array of HybridIdentityMetadata */
  value: HybridIdentityMetadata[];
}

/** Describes AgentVersions List. */
export interface AgentVersionsList {
  /** The list of available Agent Versions. */
  value?: AgentVersion[];
  /** The URI to fetch the next 10 available Agent Versions. */
  nextLink?: string;
}

/** Describes properties of Agent Version. */
export interface AgentVersion {
  /** Represents the agent version. */
  agentVersion?: string;
  /** Represents the download link of specific agent version. */
  downloadLink?: string;
  /** Defines the os type. */
  osType?: string;
}

/** Public key information for client authentication */
export interface KeyProperties {
  /**
   * Current public key details
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientPublicKey?: KeyDetails;
  /**
   * Candidate public key details
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly candidatePublicKey?: KeyDetails;
}

/** Public key details */
export interface KeyDetails {
  /**
   * Public key
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publicKey?: string;
  /**
   * Key expiration date
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly notAfter?: Date;
  /**
   * Recommended key renewal date
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly renewAfter?: Date;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResourceAutoGenerated extends Resource {}

/** Describes a License Update. */
export interface LicenseUpdate extends ResourceUpdate {
  /** The type of the license resource. */
  licenseType?: LicenseType;
  /** Describes the state of the license. */
  state?: LicenseState;
  /** Describes the license target server. */
  target?: LicenseTarget;
  /** Describes the edition of the license. The values are either Standard or Datacenter. */
  edition?: LicenseEdition;
  /** Describes the license core type (pCore or vCore). */
  type?: LicenseCoreType;
  /** Describes the number of processors. */
  processors?: number;
}

/** Describes a License Profile Update. */
export interface LicenseProfileUpdate extends ResourceUpdate {
  /** Indicates the subscription status of the product. */
  subscriptionStatus?: LicenseProfileSubscriptionStatusUpdate;
  /** Indicates the product type of the license. */
  productType?: LicenseProfileProductType;
  /** The list of product feature updates. */
  productFeatures?: ProductFeatureUpdate[];
  /** The resource id of the license. */
  assignedLicense?: string;
  /** Specifies if this machine is licensed as part of a Software Assurance agreement. */
  softwareAssuranceCustomer?: boolean;
}

/** Describes a Machine Extension Update. */
export interface MachineExtensionUpdate extends ResourceUpdate {
  /** How the extension handler should be forced to update even if the extension configuration has not changed. */
  forceUpdateTag?: string;
  /** The name of the extension handler publisher. */
  publisher?: string;
  /** Specifies the type of the extension; an example is "CustomScriptExtension". */
  type?: string;
  /** Specifies the version of the script handler. */
  typeHandlerVersion?: string;
  /** Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. */
  enableAutomaticUpgrade?: boolean;
  /** Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. */
  autoUpgradeMinorVersion?: boolean;
  /** Json formatted public settings for the extension. */
  settings?: { [propertyName: string]: any };
  /** The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. */
  protectedSettings?: { [propertyName: string]: any };
}

/** Describes a License Update. */
export interface GatewayUpdate extends ResourceUpdate {
  /** Specifies the list of features that are enabled for this Gateway. */
  allowedFeatures?: string[];
}

/** Describes a hybrid machine Update. */
export interface MachineUpdate extends ResourceUpdate {
  /** Identity for the resource. */
  identity?: Identity;
  /** Indicates which kind of Arc machine placement on-premises, such as HCI, SCVMM or VMware etc. */
  kind?: ArcKindEnum;
  /** Metadata pertaining to the geographic location of the resource. */
  locationData?: LocationData;
  /** Specifies the operating system settings for the hybrid machine. */
  osProfile?: OSProfile;
  /** The metadata of the cloud environment (Azure/GCP/AWS/OCI...). */
  cloudMetadata?: CloudMetadata;
  /** The info of the machine w.r.t Agent Upgrade */
  agentUpgrade?: AgentUpgrade;
  /** The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any. */
  parentClusterResourceId?: string;
  /** The resource id of the private link scope this machine is assigned to, if any. */
  privateLinkScopeResourceId?: string;
}

/** Describes a Machine Extension Update. */
export interface MachineRunCommandUpdate extends ResourceUpdate {}

/** Describes the properties of a License Profile ARM model. */
export interface LicenseProfileArmEsuPropertiesWithoutAssignedLicense
  extends LicenseProfileStorageModelEsuProperties {
  /**
   * The type of the Esu servers.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverType?: EsuServerType;
  /**
   * Indicates the eligibility state of Esu.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly esuEligibility?: EsuEligibility;
  /**
   * Indicates whether there is an ESU Key currently active for the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly esuKeyState?: EsuKeyState;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends ResourceAutoGenerated {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResourceAutoGenerated extends ResourceAutoGenerated {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** An Azure Arc PrivateLinkScope definition. */
export interface HybridComputePrivateLinkScope
  extends PrivateLinkScopesResource {
  /** Properties that define a Azure Arc PrivateLinkScope resource. */
  properties?: HybridComputePrivateLinkScopeProperties;
  /**
   * The system meta data relating to this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Describes a license in a hybrid machine. */
export interface License extends TrackedResource {
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Describes the tenant id. */
  tenantId?: string;
  /** The type of the license resource. */
  licenseType?: LicenseType;
  /** Describes the properties of a License. */
  licenseDetails?: LicenseDetails;
}

/** Describes a Machine Extension. */
export interface MachineExtension extends TrackedResource {
  /** Describes Machine Extension Properties. */
  properties?: MachineExtensionProperties;
}

/** Describes a hybrid machine. */
export interface Machine extends TrackedResource {
  /**
   * The list of extensions affiliated to the machine
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resources?: MachineExtension[];
  /** Identity for the resource. */
  identity?: Identity;
  /** Indicates which kind of Arc machine placement on-premises, such as HCI, SCVMM or VMware etc. */
  kind?: ArcKindEnum;
  /** Metadata pertaining to the geographic location of the resource. */
  locationData?: LocationData;
  /**
   * Configurable properties that the user can set locally via the azcmagent config command, or remotely via ARM.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly agentConfiguration?: AgentConfiguration;
  /** Statuses of dependent services that are reported back to ARM. */
  serviceStatuses?: ServiceStatuses;
  /**
   * Information about the machine's hardware
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hardwareProfile?: HardwareProfile;
  /**
   * Information about the machine's storage
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly storageProfile?: StorageProfile;
  /**
   * Information about the machine's firmware
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly firmwareProfile?: FirmwareProfile;
  /** The metadata of the cloud environment (Azure/GCP/AWS/OCI...). */
  cloudMetadata?: CloudMetadata;
  /** The info of the machine w.r.t Agent Upgrade */
  agentUpgrade?: AgentUpgrade;
  /** Specifies the operating system settings for the hybrid machine. */
  osProfile?: OSProfile;
  /** Specifies the License related properties for a machine. */
  licenseProfile?: LicenseProfileMachineInstanceView;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The status of the hybrid machine agent.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: StatusTypes;
  /**
   * The time of the last status change.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastStatusChange?: Date;
  /**
   * Details about the error state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorDetails?: ErrorDetail[];
  /**
   * The hybrid machine agent full version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly agentVersion?: string;
  /** Specifies the hybrid machine unique ID. */
  vmId?: string;
  /**
   * Specifies the hybrid machine display name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * Specifies the hybrid machine FQDN.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly machineFqdn?: string;
  /** Public Key that the client provides to be used during initial resource onboarding */
  clientPublicKey?: string;
  /**
   * The Operating System running on the hybrid machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osName?: string;
  /**
   * The version of Operating System running on the hybrid machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osVersion?: string;
  /** The type of Operating System (windows/linux). */
  osType?: string;
  /**
   * Specifies the Arc Machine's unique SMBIOS ID
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmUuid?: string;
  /** Machine Extensions information (deprecated field) */
  extensions?: MachineExtensionInstanceView[];
  /**
   * Specifies the Operating System product SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osSku?: string;
  /**
   * The edition of the Operating System.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osEdition?: string;
  /**
   * Specifies the Windows domain name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly domainName?: string;
  /**
   * Specifies the AD fully qualified display name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly adFqdn?: string;
  /**
   * Specifies the DNS fully qualified display name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dnsFqdn?: string;
  /** The resource id of the private link scope this machine is assigned to, if any. */
  privateLinkScopeResourceId?: string;
  /** The resource id of the parent cluster (Azure HCI) this machine is assigned to, if any. */
  parentClusterResourceId?: string;
  /** Specifies whether any MS SQL instance is discovered on the machine. */
  mssqlDiscovered?: string;
  /**
   * Detected properties from the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detectedProperties?: { [propertyName: string]: string };
  /**
   * Information about the network the machine is on.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkProfile?: NetworkProfile;
}

/** Describes a license profile in a hybrid machine. */
export interface LicenseProfile extends TrackedResource {
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Indicates the subscription status of the product. */
  subscriptionStatus?: LicenseProfileSubscriptionStatus;
  /** Indicates the product type of the license. */
  productType?: LicenseProfileProductType;
  /**
   * The timestamp in UTC when the user enrolls the feature.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enrollmentDate?: Date;
  /**
   * The timestamp in UTC when the billing starts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly billingStartDate?: Date;
  /**
   * The timestamp in UTC when the user disenrolled the feature.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disenrollmentDate?: Date;
  /**
   * The timestamp in UTC when the billing ends.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly billingEndDate?: Date;
  /**
   * The errors that were encountered during the feature enrollment or disenrollment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ErrorDetail;
  /** The list of product features. */
  productFeatures?: ProductFeature[];
  /**
   * The guid id of the license.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assignedLicenseImmutableId?: string;
  /**
   * The list of ESU keys.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly esuKeys?: EsuKey[];
  /**
   * The type of the Esu servers.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverType?: EsuServerType;
  /**
   * Indicates the eligibility state of Esu.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly esuEligibility?: EsuEligibility;
  /**
   * Indicates whether there is an ESU Key currently active for the machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly esuKeyState?: EsuKeyState;
  /** The resource id of the license. */
  assignedLicense?: string;
  /** Specifies if this machine is licensed as part of a Software Assurance agreement. */
  softwareAssuranceCustomer?: boolean;
}

/** Describes a Run Command */
export interface MachineRunCommand extends TrackedResource {
  /** The source of the run command script. */
  source?: MachineRunCommandScriptSource;
  /** The parameters used by the script. */
  parameters?: RunCommandInputParameter[];
  /** The parameters used by the script. */
  protectedParameters?: RunCommandInputParameter[];
  /** Optional. If set to true, provisioning will complete as soon as script starts and will not wait for script to complete. */
  asyncExecution?: boolean;
  /** Specifies the user account on the machine when executing the run command. */
  runAsUser?: string;
  /** Specifies the user account password on the machine when executing the run command. */
  runAsPassword?: string;
  /** The timeout in seconds to execute the run command. */
  timeoutInSeconds?: number;
  /** Specifies the Azure storage blob where script output stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer outputBlobManagedIdentity parameter. */
  outputBlobUri?: string;
  /** Specifies the Azure storage blob where script error stream will be uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to provide the VM access to the blob. Refer errorBlobManagedIdentity parameter. */
  errorBlobUri?: string;
  /** User-assigned managed identity that has access to outputBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged */
  outputBlobManagedIdentity?: RunCommandManagedIdentity;
  /** User-assigned managed identity that has access to errorBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure managed identity has been given access to blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned identity, make sure you add it under VM's identity. For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged */
  errorBlobManagedIdentity?: RunCommandManagedIdentity;
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The machine run command instance view.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceView?: MachineRunCommandInstanceView;
}

export interface Settings extends ProxyResourceAutoGenerated {
  /**
   * Azure resource tenant Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Associated Gateway Resource Id */
  gatewayResourceId?: string;
}

/** A private link resource */
export interface PrivateLinkResource extends ProxyResourceAutoGenerated {
  /** Resource properties. */
  properties?: PrivateLinkResourceProperties;
}

/** A private endpoint connection */
export interface PrivateEndpointConnection extends ProxyResourceAutoGenerated {
  /** Resource properties. */
  properties?: PrivateEndpointConnectionProperties;
}

/** Defines the HybridIdentityMetadata. */
export interface HybridIdentityMetadata extends ProxyResourceAutoGenerated {
  /** The unique identifier for the resource. */
  vmId?: string;
  /** The Public Key. */
  publicKey?: string;
  /**
   * Identity for the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly identity?: Identity;
}

export interface NetworkConfiguration extends ProxyResourceAutoGenerated {
  /** Resource location */
  location?: string;
  /**
   * Azure resource tenant Id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Associated Network Configuration Scope Id (GUID) */
  networkConfigurationScopeId?: string;
  /** Associated Network Configuration Scope Resource Id */
  networkConfigurationScopeResourceId?: string;
  /**
   * Public key information for client authentication
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keyProperties?: KeyProperties;
}

/** Properties for the Machine ESU profile. */
export interface LicenseProfileMachineInstanceViewEsuProperties
  extends LicenseProfileArmEsuPropertiesWithoutAssignedLicense {
  /** The assigned license resource. */
  assignedLicense?: License;
  /** Describes the license assignment state (Assigned or NotAssigned). */
  licenseAssignmentState?: LicenseAssignmentState;
}

/** Describes the properties of a License Profile ARM model. */
export interface LicenseProfileArmEsuProperties
  extends LicenseProfileArmEsuPropertiesWithoutAssignedLicense {
  /** The resource id of the license. */
  assignedLicense?: string;
}

/** Describes a Extension Metadata */
export interface ExtensionValue extends ProxyResource {
  /**
   * The version of the Extension being received.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * The type of the Extension being received.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly extensionType?: string;
  /**
   * The publisher of the Extension being received.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publisher?: string;
}

/** Describes an Arc Gateway. */
export interface Gateway extends TrackedResourceAutoGenerated {
  /**
   * The provisioning state, which only appears in the response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * A unique, immutable, identifier for the Gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly gatewayId?: string;
  /** The type of the Gateway resource. */
  gatewayType?: GatewayType;
  /**
   * The endpoint fqdn for the Gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly gatewayEndpoint?: string;
  /** Specifies the list of features that are enabled for this Gateway. */
  allowedFeatures?: string[];
}

/** Defines headers for Machines_assessPatches operation. */
export interface MachinesAssessPatchesHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for Machines_installPatches operation. */
export interface MachinesInstallPatchesHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for LicenseProfiles_createOrUpdate operation. */
export interface LicenseProfilesCreateOrUpdateHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
  /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
  retryAfter?: number;
  /** The URI to poll for completion status. */
  azureAsyncOperation?: string;
}

/** Defines headers for LicenseProfiles_update operation. */
export interface LicenseProfilesUpdateHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
  /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
  retryAfter?: number;
  /** The URI to poll for completion status. */
  azureAsyncOperation?: string;
}

/** Defines headers for LicenseProfiles_delete operation. */
export interface LicenseProfilesDeleteHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
  /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
  retryAfter?: number;
  /** The URI to poll for completion status. */
  azureAsyncOperation?: string;
}

/** Defines headers for MachineExtensions_update operation. */
export interface MachineExtensionsUpdateHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
  /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
  retryAfter?: number;
  /** The URI to poll for completion status. */
  azureAsyncOperation?: string;
}

/** Defines headers for MachineExtensions_delete operation. */
export interface MachineExtensionsDeleteHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
  /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
  retryAfter?: number;
  /** The URI to poll for completion status. */
  azureAsyncOperation?: string;
}

/** Defines headers for HybridComputeManagementClient_upgradeExtensions operation. */
export interface HybridComputeManagementClientUpgradeExtensionsHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
  /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
  retryAfter?: number;
  /** The URI to poll for completion status. */
  azureAsyncOperation?: string;
}

/** Defines headers for MachineRunCommands_createOrUpdate operation. */
export interface MachineRunCommandsCreateOrUpdateHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
  /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
  retryAfter?: number;
  /** The URI to poll for completion status. */
  azureAsyncOperation?: string;
}

/** Defines headers for MachineRunCommands_delete operation. */
export interface MachineRunCommandsDeleteHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
  /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
  retryAfter?: number;
  /** The URI to poll for completion status. */
  azureAsyncOperation?: string;
}

/** Defines headers for Gateways_createOrUpdate operation. */
export interface GatewaysCreateOrUpdateHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
  /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
  retryAfter?: number;
  /** The URI to poll for completion status. */
  azureAsyncOperation?: string;
}

/** Defines headers for Gateways_delete operation. */
export interface GatewaysDeleteHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
  /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
  retryAfter?: number;
  /** The URI to poll for completion status. */
  azureAsyncOperation?: string;
}

/** Defines headers for PrivateLinkScopes_delete operation. */
export interface PrivateLinkScopesDeleteHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
  /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
  retryAfter?: number;
  /** The URI to poll for completion status. */
  azureAsyncOperation?: string;
}

/** Defines headers for PrivateEndpointConnections_delete operation. */
export interface PrivateEndpointConnectionsDeleteHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
  /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
  retryAfter?: number;
  /** The URI to poll for completion status. */
  azureAsyncOperation?: string;
}

/** Defines headers for NetworkSecurityPerimeterConfigurations_reconcileForPrivateLinkScope operation. */
export interface NetworkSecurityPerimeterConfigurationsReconcileForPrivateLinkScopeHeaders {
  /** The URL of the resource used to check the status of the asynchronous operation. */
  location?: string;
  /** The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. */
  retryAfter?: number;
  /** The URI to poll for completion status. */
  azureAsyncOperation?: string;
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Accepted */
  Accepted = "Accepted",
  /** Canceled */
  Canceled = "Canceled",
  /** Deleted */
  Deleted = "Deleted",
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Accepted** \
 * **Canceled** \
 * **Deleted**
 */
export type ProvisioningState = string;

/** Known values of {@link LicenseType} that the service accepts. */
export enum KnownLicenseType {
  /** ESU */
  ESU = "ESU",
}

/**
 * Defines values for LicenseType. \
 * {@link KnownLicenseType} can be used interchangeably with LicenseType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ESU**
 */
export type LicenseType = string;

/** Known values of {@link LicenseState} that the service accepts. */
export enum KnownLicenseState {
  /** Activated */
  Activated = "Activated",
  /** Deactivated */
  Deactivated = "Deactivated",
}

/**
 * Defines values for LicenseState. \
 * {@link KnownLicenseState} can be used interchangeably with LicenseState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Activated** \
 * **Deactivated**
 */
export type LicenseState = string;

/** Known values of {@link LicenseTarget} that the service accepts. */
export enum KnownLicenseTarget {
  /** WindowsServer2012 */
  WindowsServer2012 = "Windows Server 2012",
  /** WindowsServer2012R2 */
  WindowsServer2012R2 = "Windows Server 2012 R2",
}

/**
 * Defines values for LicenseTarget. \
 * {@link KnownLicenseTarget} can be used interchangeably with LicenseTarget,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows Server 2012** \
 * **Windows Server 2012 R2**
 */
export type LicenseTarget = string;

/** Known values of {@link LicenseEdition} that the service accepts. */
export enum KnownLicenseEdition {
  /** Standard */
  Standard = "Standard",
  /** Datacenter */
  Datacenter = "Datacenter",
}

/**
 * Defines values for LicenseEdition. \
 * {@link KnownLicenseEdition} can be used interchangeably with LicenseEdition,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **Datacenter**
 */
export type LicenseEdition = string;

/** Known values of {@link LicenseCoreType} that the service accepts. */
export enum KnownLicenseCoreType {
  /** PCore */
  PCore = "pCore",
  /** VCore */
  VCore = "vCore",
}

/**
 * Defines values for LicenseCoreType. \
 * {@link KnownLicenseCoreType} can be used interchangeably with LicenseCoreType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **pCore** \
 * **vCore**
 */
export type LicenseCoreType = string;

/** Known values of {@link ProgramYear} that the service accepts. */
export enum KnownProgramYear {
  /** Year1 */
  Year1 = "Year 1",
  /** Year2 */
  Year2 = "Year 2",
  /** Year3 */
  Year3 = "Year 3",
}

/**
 * Defines values for ProgramYear. \
 * {@link KnownProgramYear} can be used interchangeably with ProgramYear,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Year 1** \
 * **Year 2** \
 * **Year 3**
 */
export type ProgramYear = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link InstanceViewTypes} that the service accepts. */
export enum KnownInstanceViewTypes {
  /** InstanceView */
  InstanceView = "instanceView",
}

/**
 * Defines values for InstanceViewTypes. \
 * {@link KnownInstanceViewTypes} can be used interchangeably with InstanceViewTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **instanceView**
 */
export type InstanceViewTypes = string;

/** Known values of {@link AgentConfigurationMode} that the service accepts. */
export enum KnownAgentConfigurationMode {
  /** Full */
  Full = "full",
  /** Monitor */
  Monitor = "monitor",
}

/**
 * Defines values for AgentConfigurationMode. \
 * {@link KnownAgentConfigurationMode} can be used interchangeably with AgentConfigurationMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **full** \
 * **monitor**
 */
export type AgentConfigurationMode = string;

/** Known values of {@link LastAttemptStatusEnum} that the service accepts. */
export enum KnownLastAttemptStatusEnum {
  /** Success */
  Success = "Success",
  /** Failed */
  Failed = "Failed",
}

/**
 * Defines values for LastAttemptStatusEnum. \
 * {@link KnownLastAttemptStatusEnum} can be used interchangeably with LastAttemptStatusEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Success** \
 * **Failed**
 */
export type LastAttemptStatusEnum = string;

/** Known values of {@link AssessmentModeTypes} that the service accepts. */
export enum KnownAssessmentModeTypes {
  /** ImageDefault */
  ImageDefault = "ImageDefault",
  /** AutomaticByPlatform */
  AutomaticByPlatform = "AutomaticByPlatform",
}

/**
 * Defines values for AssessmentModeTypes. \
 * {@link KnownAssessmentModeTypes} can be used interchangeably with AssessmentModeTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ImageDefault** \
 * **AutomaticByPlatform**
 */
export type AssessmentModeTypes = string;

/** Known values of {@link PatchModeTypes} that the service accepts. */
export enum KnownPatchModeTypes {
  /** ImageDefault */
  ImageDefault = "ImageDefault",
  /** AutomaticByPlatform */
  AutomaticByPlatform = "AutomaticByPlatform",
  /** AutomaticByOS */
  AutomaticByOS = "AutomaticByOS",
  /** Manual */
  Manual = "Manual",
}

/**
 * Defines values for PatchModeTypes. \
 * {@link KnownPatchModeTypes} can be used interchangeably with PatchModeTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ImageDefault** \
 * **AutomaticByPlatform** \
 * **AutomaticByOS** \
 * **Manual**
 */
export type PatchModeTypes = string;

/** Known values of {@link HotpatchEnablementStatus} that the service accepts. */
export enum KnownHotpatchEnablementStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** PendingEvaluation */
  PendingEvaluation = "PendingEvaluation",
  /** Disabled */
  Disabled = "Disabled",
  /** ActionRequired */
  ActionRequired = "ActionRequired",
  /** Enabled */
  Enabled = "Enabled",
}

/**
 * Defines values for HotpatchEnablementStatus. \
 * {@link KnownHotpatchEnablementStatus} can be used interchangeably with HotpatchEnablementStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **PendingEvaluation** \
 * **Disabled** \
 * **ActionRequired** \
 * **Enabled**
 */
export type HotpatchEnablementStatus = string;

/** Known values of {@link LicenseStatus} that the service accepts. */
export enum KnownLicenseStatus {
  /** Unlicensed */
  Unlicensed = "Unlicensed",
  /** Licensed */
  Licensed = "Licensed",
  /** OOBGrace */
  OOBGrace = "OOBGrace",
  /** OOTGrace */
  OOTGrace = "OOTGrace",
  /** NonGenuineGrace */
  NonGenuineGrace = "NonGenuineGrace",
  /** Notification */
  Notification = "Notification",
  /** ExtendedGrace */
  ExtendedGrace = "ExtendedGrace",
}

/**
 * Defines values for LicenseStatus. \
 * {@link KnownLicenseStatus} can be used interchangeably with LicenseStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unlicensed** \
 * **Licensed** \
 * **OOBGrace** \
 * **OOTGrace** \
 * **NonGenuineGrace** \
 * **Notification** \
 * **ExtendedGrace**
 */
export type LicenseStatus = string;

/** Known values of {@link LicenseAssignmentState} that the service accepts. */
export enum KnownLicenseAssignmentState {
  /** Assigned */
  Assigned = "Assigned",
  /** NotAssigned */
  NotAssigned = "NotAssigned",
}

/**
 * Defines values for LicenseAssignmentState. \
 * {@link KnownLicenseAssignmentState} can be used interchangeably with LicenseAssignmentState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Assigned** \
 * **NotAssigned**
 */
export type LicenseAssignmentState = string;

/** Known values of {@link EsuServerType} that the service accepts. */
export enum KnownEsuServerType {
  /** Standard */
  Standard = "Standard",
  /** Datacenter */
  Datacenter = "Datacenter",
}

/**
 * Defines values for EsuServerType. \
 * {@link KnownEsuServerType} can be used interchangeably with EsuServerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **Datacenter**
 */
export type EsuServerType = string;

/** Known values of {@link EsuEligibility} that the service accepts. */
export enum KnownEsuEligibility {
  /** Eligible */
  Eligible = "Eligible",
  /** Ineligible */
  Ineligible = "Ineligible",
  /** Unknown */
  Unknown = "Unknown",
}

/**
 * Defines values for EsuEligibility. \
 * {@link KnownEsuEligibility} can be used interchangeably with EsuEligibility,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Eligible** \
 * **Ineligible** \
 * **Unknown**
 */
export type EsuEligibility = string;

/** Known values of {@link EsuKeyState} that the service accepts. */
export enum KnownEsuKeyState {
  /** Inactive */
  Inactive = "Inactive",
  /** Active */
  Active = "Active",
}

/**
 * Defines values for EsuKeyState. \
 * {@link KnownEsuKeyState} can be used interchangeably with EsuKeyState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inactive** \
 * **Active**
 */
export type EsuKeyState = string;

/** Known values of {@link LicenseProfileSubscriptionStatus} that the service accepts. */
export enum KnownLicenseProfileSubscriptionStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** Enabling */
  Enabling = "Enabling",
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
  /** Disabling */
  Disabling = "Disabling",
  /** Failed */
  Failed = "Failed",
}

/**
 * Defines values for LicenseProfileSubscriptionStatus. \
 * {@link KnownLicenseProfileSubscriptionStatus} can be used interchangeably with LicenseProfileSubscriptionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Enabling** \
 * **Enabled** \
 * **Disabled** \
 * **Disabling** \
 * **Failed**
 */
export type LicenseProfileSubscriptionStatus = string;

/** Known values of {@link LicenseProfileProductType} that the service accepts. */
export enum KnownLicenseProfileProductType {
  /** WindowsServer */
  WindowsServer = "WindowsServer",
  /** WindowsIoTEnterprise */
  WindowsIoTEnterprise = "WindowsIoTEnterprise",
}

/**
 * Defines values for LicenseProfileProductType. \
 * {@link KnownLicenseProfileProductType} can be used interchangeably with LicenseProfileProductType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **WindowsServer** \
 * **WindowsIoTEnterprise**
 */
export type LicenseProfileProductType = string;

/** Known values of {@link StatusTypes} that the service accepts. */
export enum KnownStatusTypes {
  /** Connected */
  Connected = "Connected",
  /** Disconnected */
  Disconnected = "Disconnected",
  /** Error */
  Error = "Error",
}

/**
 * Defines values for StatusTypes. \
 * {@link KnownStatusTypes} can be used interchangeably with StatusTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Connected** \
 * **Disconnected** \
 * **Error**
 */
export type StatusTypes = string;

/** Known values of {@link StatusLevelTypes} that the service accepts. */
export enum KnownStatusLevelTypes {
  /** Info */
  Info = "Info",
  /** Warning */
  Warning = "Warning",
  /** Error */
  Error = "Error",
}

/**
 * Defines values for StatusLevelTypes. \
 * {@link KnownStatusLevelTypes} can be used interchangeably with StatusLevelTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Info** \
 * **Warning** \
 * **Error**
 */
export type StatusLevelTypes = string;

/** Known values of {@link ArcKindEnum} that the service accepts. */
export enum KnownArcKindEnum {
  /** AVS */
  AVS = "AVS",
  /** HCI */
  HCI = "HCI",
  /** Scvmm */
  Scvmm = "SCVMM",
  /** VMware */
  VMware = "VMware",
  /** EPS */
  EPS = "EPS",
  /** GCP */
  GCP = "GCP",
  /** AWS */
  AWS = "AWS",
}

/**
 * Defines values for ArcKindEnum. \
 * {@link KnownArcKindEnum} can be used interchangeably with ArcKindEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AVS** \
 * **HCI** \
 * **SCVMM** \
 * **VMware** \
 * **EPS** \
 * **GCP** \
 * **AWS**
 */
export type ArcKindEnum = string;

/** Known values of {@link LicenseProfileSubscriptionStatusUpdate} that the service accepts. */
export enum KnownLicenseProfileSubscriptionStatusUpdate {
  /** Enable */
  Enable = "Enable",
  /** Disable */
  Disable = "Disable",
}

/**
 * Defines values for LicenseProfileSubscriptionStatusUpdate. \
 * {@link KnownLicenseProfileSubscriptionStatusUpdate} can be used interchangeably with LicenseProfileSubscriptionStatusUpdate,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enable** \
 * **Disable**
 */
export type LicenseProfileSubscriptionStatusUpdate = string;

/** Known values of {@link PatchOperationStatus} that the service accepts. */
export enum KnownPatchOperationStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** InProgress */
  InProgress = "InProgress",
  /** Failed */
  Failed = "Failed",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** CompletedWithWarnings */
  CompletedWithWarnings = "CompletedWithWarnings",
}

/**
 * Defines values for PatchOperationStatus. \
 * {@link KnownPatchOperationStatus} can be used interchangeably with PatchOperationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **InProgress** \
 * **Failed** \
 * **Succeeded** \
 * **CompletedWithWarnings**
 */
export type PatchOperationStatus = string;

/** Known values of {@link PatchOperationStartedBy} that the service accepts. */
export enum KnownPatchOperationStartedBy {
  /** User */
  User = "User",
  /** Platform */
  Platform = "Platform",
}

/**
 * Defines values for PatchOperationStartedBy. \
 * {@link KnownPatchOperationStartedBy} can be used interchangeably with PatchOperationStartedBy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Platform**
 */
export type PatchOperationStartedBy = string;

/** Known values of {@link PatchServiceUsed} that the service accepts. */
export enum KnownPatchServiceUsed {
  /** Unknown */
  Unknown = "Unknown",
  /** WU */
  WU = "WU",
  /** WUWsus */
  WUWsus = "WU_WSUS",
  /** YUM */
  YUM = "YUM",
  /** APT */
  APT = "APT",
  /** Zypper */
  Zypper = "Zypper",
}

/**
 * Defines values for PatchServiceUsed. \
 * {@link KnownPatchServiceUsed} can be used interchangeably with PatchServiceUsed,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **WU** \
 * **WU_WSUS** \
 * **YUM** \
 * **APT** \
 * **Zypper**
 */
export type PatchServiceUsed = string;

/** Known values of {@link OsType} that the service accepts. */
export enum KnownOsType {
  /** Windows */
  Windows = "Windows",
  /** Linux */
  Linux = "Linux",
}

/**
 * Defines values for OsType. \
 * {@link KnownOsType} can be used interchangeably with OsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux**
 */
export type OsType = string;

/** Known values of {@link VMGuestPatchRebootSetting} that the service accepts. */
export enum KnownVMGuestPatchRebootSetting {
  /** IfRequired */
  IfRequired = "IfRequired",
  /** Never */
  Never = "Never",
  /** Always */
  Always = "Always",
}

/**
 * Defines values for VMGuestPatchRebootSetting. \
 * {@link KnownVMGuestPatchRebootSetting} can be used interchangeably with VMGuestPatchRebootSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IfRequired** \
 * **Never** \
 * **Always**
 */
export type VMGuestPatchRebootSetting = string;

/** Known values of {@link VMGuestPatchClassificationWindows} that the service accepts. */
export enum KnownVMGuestPatchClassificationWindows {
  /** Critical */
  Critical = "Critical",
  /** Security */
  Security = "Security",
  /** UpdateRollUp */
  UpdateRollUp = "UpdateRollUp",
  /** FeaturePack */
  FeaturePack = "FeaturePack",
  /** ServicePack */
  ServicePack = "ServicePack",
  /** Definition */
  Definition = "Definition",
  /** Tools */
  Tools = "Tools",
  /** Updates */
  Updates = "Updates",
}

/**
 * Defines values for VMGuestPatchClassificationWindows. \
 * {@link KnownVMGuestPatchClassificationWindows} can be used interchangeably with VMGuestPatchClassificationWindows,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Critical** \
 * **Security** \
 * **UpdateRollUp** \
 * **FeaturePack** \
 * **ServicePack** \
 * **Definition** \
 * **Tools** \
 * **Updates**
 */
export type VMGuestPatchClassificationWindows = string;

/** Known values of {@link VMGuestPatchClassificationLinux} that the service accepts. */
export enum KnownVMGuestPatchClassificationLinux {
  /** Critical */
  Critical = "Critical",
  /** Security */
  Security = "Security",
  /** Other */
  Other = "Other",
}

/**
 * Defines values for VMGuestPatchClassificationLinux. \
 * {@link KnownVMGuestPatchClassificationLinux} can be used interchangeably with VMGuestPatchClassificationLinux,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Critical** \
 * **Security** \
 * **Other**
 */
export type VMGuestPatchClassificationLinux = string;

/** Known values of {@link VMGuestPatchRebootStatus} that the service accepts. */
export enum KnownVMGuestPatchRebootStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** NotNeeded */
  NotNeeded = "NotNeeded",
  /** Required */
  Required = "Required",
  /** Started */
  Started = "Started",
  /** Failed */
  Failed = "Failed",
  /** Completed */
  Completed = "Completed",
}

/**
 * Defines values for VMGuestPatchRebootStatus. \
 * {@link KnownVMGuestPatchRebootStatus} can be used interchangeably with VMGuestPatchRebootStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **NotNeeded** \
 * **Required** \
 * **Started** \
 * **Failed** \
 * **Completed**
 */
export type VMGuestPatchRebootStatus = string;

/** Known values of {@link ExecutionState} that the service accepts. */
export enum KnownExecutionState {
  /** Unknown */
  Unknown = "Unknown",
  /** Pending */
  Pending = "Pending",
  /** Running */
  Running = "Running",
  /** Failed */
  Failed = "Failed",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** TimedOut */
  TimedOut = "TimedOut",
  /** Canceled */
  Canceled = "Canceled",
}

/**
 * Defines values for ExecutionState. \
 * {@link KnownExecutionState} can be used interchangeably with ExecutionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Pending** \
 * **Running** \
 * **Failed** \
 * **Succeeded** \
 * **TimedOut** \
 * **Canceled**
 */
export type ExecutionState = string;

/** Known values of {@link GatewayType} that the service accepts. */
export enum KnownGatewayType {
  /** Public */
  Public = "Public",
}

/**
 * Defines values for GatewayType. \
 * {@link KnownGatewayType} can be used interchangeably with GatewayType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Public**
 */
export type GatewayType = string;

/** Known values of {@link PublicNetworkAccessType} that the service accepts. */
export enum KnownPublicNetworkAccessType {
  /** Allows Azure Arc agents to communicate with Azure Arc services over both public (internet) and private endpoints. */
  Enabled = "Enabled",
  /** Does not allow Azure Arc agents to communicate with Azure Arc services over public (internet) endpoints. The agents must use the private link. */
  Disabled = "Disabled",
  /** Azure Arc agent communication with Azure Arc services over public (internet) is enforced by Network Security Perimeter (NSP) */
  SecuredByPerimeter = "SecuredByPerimeter",
}

/**
 * Defines values for PublicNetworkAccessType. \
 * {@link KnownPublicNetworkAccessType} can be used interchangeably with PublicNetworkAccessType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: Allows Azure Arc agents to communicate with Azure Arc services over both public (internet) and private endpoints. \
 * **Disabled**: Does not allow Azure Arc agents to communicate with Azure Arc services over public (internet) endpoints. The agents must use the private link. \
 * **SecuredByPerimeter**: Azure Arc agent communication with Azure Arc services over public (internet) is enforced by Network Security Perimeter (NSP)
 */
export type PublicNetworkAccessType = string;

/** Known values of {@link ProvisioningIssueType} that the service accepts. */
export enum KnownProvisioningIssueType {
  /** Perimeter configuration is missing. */
  MissingPerimeterConfiguration = "MissingPerimeterConfiguration",
  /** Identity configuration is missing. */
  MissingIdentityConfiguration = "MissingIdentityConfiguration",
  /** Configuration failed to propagate. */
  ConfigurationPropagationFailure = "ConfigurationPropagationFailure",
  /** Other failure. */
  Other = "Other",
}

/**
 * Defines values for ProvisioningIssueType. \
 * {@link KnownProvisioningIssueType} can be used interchangeably with ProvisioningIssueType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MissingPerimeterConfiguration**: Perimeter configuration is missing. \
 * **MissingIdentityConfiguration**: Identity configuration is missing. \
 * **ConfigurationPropagationFailure**: Configuration failed to propagate. \
 * **Other**: Other failure.
 */
export type ProvisioningIssueType = string;

/** Known values of {@link ProvisioningIssueSeverity} that the service accepts. */
export enum KnownProvisioningIssueSeverity {
  /** Warnings can cause connectivity issues after provisioning succeeds. */
  Warning = "Warning",
  /** Errors will cause association provisioning to fail. */
  Error = "Error",
}

/**
 * Defines values for ProvisioningIssueSeverity. \
 * {@link KnownProvisioningIssueSeverity} can be used interchangeably with ProvisioningIssueSeverity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Warning**: Warnings can cause connectivity issues after provisioning succeeds. \
 * **Error**: Errors will cause association provisioning to fail.
 */
export type ProvisioningIssueSeverity = string;

/** Known values of {@link AccessRuleDirection} that the service accepts. */
export enum KnownAccessRuleDirection {
  /** Traffic originates outside of network. */
  Inbound = "Inbound",
  /** Traffic originates inside the network */
  Outbound = "Outbound",
}

/**
 * Defines values for AccessRuleDirection. \
 * {@link KnownAccessRuleDirection} can be used interchangeably with AccessRuleDirection,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inbound**: Traffic originates outside of network. \
 * **Outbound**: Traffic originates inside the network
 */
export type AccessRuleDirection = string;

/** Known values of {@link AccessMode} that the service accepts. */
export enum KnownAccessMode {
  /** Indicates that resource access is controlled by the NSP definition. */
  Enforced = "enforced",
  /** Dry run mode, where traffic is evaluated against NSP Rules, logged but not enforced. */
  Audit = "audit",
  /** Enables traffic evaluation to fall back to resource-specific firewall configurations. */
  Learning = "learning",
}

/**
 * Defines values for AccessMode. \
 * {@link KnownAccessMode} can be used interchangeably with AccessMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enforced**: Indicates that resource access is controlled by the NSP definition. \
 * **audit**: Dry run mode, where traffic is evaluated against NSP Rules, logged but not enforced. \
 * **learning**: Enables traffic evaluation to fall back to resource-specific firewall configurations.
 */
export type AccessMode = string;
/** Defines values for ExtensionsStatusLevelTypes. */
export type ExtensionsStatusLevelTypes = "Info" | "Warning" | "Error";

/** Optional parameters. */
export interface LicensesValidateLicenseOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validateLicense operation. */
export type LicensesValidateLicenseResponse = License;

/** Optional parameters. */
export interface LicensesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type LicensesCreateOrUpdateResponse = License;

/** Optional parameters. */
export interface LicensesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type LicensesUpdateResponse = License;

/** Optional parameters. */
export interface LicensesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LicensesGetResponse = License;

/** Optional parameters. */
export interface LicensesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LicensesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type LicensesListByResourceGroupResponse = LicensesListResult;

/** Optional parameters. */
export interface LicensesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type LicensesListBySubscriptionResponse = LicensesListResult;

/** Optional parameters. */
export interface LicensesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type LicensesListByResourceGroupNextResponse = LicensesListResult;

/** Optional parameters. */
export interface LicensesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type LicensesListBySubscriptionNextResponse = LicensesListResult;

/** Optional parameters. */
export interface MachinesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface MachinesGetOptionalParams extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. */
  expand?: InstanceViewTypes;
}

/** Contains response data for the get operation. */
export type MachinesGetResponse = Machine;

/** Optional parameters. */
export interface MachinesAssessPatchesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the assessPatches operation. */
export type MachinesAssessPatchesResponse = MachineAssessPatchesResult;

/** Optional parameters. */
export interface MachinesInstallPatchesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the installPatches operation. */
export type MachinesInstallPatchesResponse = MachineInstallPatchesResult;

/** Optional parameters. */
export interface MachinesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** Expands referenced resources. */
  expand?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export type MachinesListByResourceGroupResponse = MachineListResult;

/** Optional parameters. */
export interface MachinesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type MachinesListBySubscriptionResponse = MachineListResult;

/** Optional parameters. */
export interface MachinesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type MachinesListByResourceGroupNextResponse = MachineListResult;

/** Optional parameters. */
export interface MachinesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type MachinesListBySubscriptionNextResponse = MachineListResult;

/** Optional parameters. */
export interface LicenseProfilesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type LicenseProfilesCreateOrUpdateResponse = LicenseProfile;

/** Optional parameters. */
export interface LicenseProfilesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type LicenseProfilesUpdateResponse = LicenseProfile;

/** Optional parameters. */
export interface LicenseProfilesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LicenseProfilesGetResponse = LicenseProfile;

/** Optional parameters. */
export interface LicenseProfilesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type LicenseProfilesDeleteResponse = LicenseProfilesDeleteHeaders;

/** Optional parameters. */
export interface LicenseProfilesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type LicenseProfilesListResponse = LicenseProfilesListResult;

/** Optional parameters. */
export interface LicenseProfilesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type LicenseProfilesListNextResponse = LicenseProfilesListResult;

/** Optional parameters. */
export interface MachineExtensionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type MachineExtensionsCreateOrUpdateResponse = MachineExtension;

/** Optional parameters. */
export interface MachineExtensionsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type MachineExtensionsUpdateResponse = MachineExtension;

/** Optional parameters. */
export interface MachineExtensionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface MachineExtensionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MachineExtensionsGetResponse = MachineExtension;

/** Optional parameters. */
export interface MachineExtensionsListOptionalParams
  extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. */
  expand?: string;
}

/** Contains response data for the list operation. */
export type MachineExtensionsListResponse = MachineExtensionsListResult;

/** Optional parameters. */
export interface MachineExtensionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type MachineExtensionsListNextResponse = MachineExtensionsListResult;

/** Optional parameters. */
export interface UpgradeExtensionsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ExtensionMetadataGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ExtensionMetadataGetResponse = ExtensionValue;

/** Optional parameters. */
export interface ExtensionMetadataListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ExtensionMetadataListResponse = ExtensionValueListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface NetworkProfileGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkProfileGetResponse = NetworkProfile;

/** Optional parameters. */
export interface MachineRunCommandsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type MachineRunCommandsCreateOrUpdateResponse = MachineRunCommand;

/** Optional parameters. */
export interface MachineRunCommandsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type MachineRunCommandsDeleteResponse = MachineRunCommandsDeleteHeaders;

/** Optional parameters. */
export interface MachineRunCommandsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MachineRunCommandsGetResponse = MachineRunCommand;

/** Optional parameters. */
export interface MachineRunCommandsListOptionalParams
  extends coreClient.OperationOptions {
  /** The expand expression to apply on the operation. */
  expand?: string;
}

/** Contains response data for the list operation. */
export type MachineRunCommandsListResponse = MachineRunCommandsListResult;

/** Optional parameters. */
export interface MachineRunCommandsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type MachineRunCommandsListNextResponse = MachineRunCommandsListResult;

/** Optional parameters. */
export interface GatewaysCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type GatewaysCreateOrUpdateResponse = Gateway;

/** Optional parameters. */
export interface GatewaysUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type GatewaysUpdateResponse = Gateway;

/** Optional parameters. */
export interface GatewaysGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GatewaysGetResponse = Gateway;

/** Optional parameters. */
export interface GatewaysDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type GatewaysDeleteResponse = GatewaysDeleteHeaders;

/** Optional parameters. */
export interface GatewaysListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type GatewaysListByResourceGroupResponse = GatewaysListResult;

/** Optional parameters. */
export interface GatewaysListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type GatewaysListBySubscriptionResponse = GatewaysListResult;

/** Optional parameters. */
export interface GatewaysListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type GatewaysListByResourceGroupNextResponse = GatewaysListResult;

/** Optional parameters. */
export interface GatewaysListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type GatewaysListBySubscriptionNextResponse = GatewaysListResult;

/** Optional parameters. */
export interface SettingsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SettingsGetResponse = Settings;

/** Optional parameters. */
export interface SettingsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type SettingsUpdateResponse = Settings;

/** Optional parameters. */
export interface SettingsPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the patch operation. */
export type SettingsPatchResponse = Settings;

/** Optional parameters. */
export interface PrivateLinkScopesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PrivateLinkScopesListResponse =
  HybridComputePrivateLinkScopeListResult;

/** Optional parameters. */
export interface PrivateLinkScopesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type PrivateLinkScopesListByResourceGroupResponse =
  HybridComputePrivateLinkScopeListResult;

/** Optional parameters. */
export interface PrivateLinkScopesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PrivateLinkScopesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateLinkScopesGetResponse = HybridComputePrivateLinkScope;

/** Optional parameters. */
export interface PrivateLinkScopesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type PrivateLinkScopesCreateOrUpdateResponse =
  HybridComputePrivateLinkScope;

/** Optional parameters. */
export interface PrivateLinkScopesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type PrivateLinkScopesUpdateTagsResponse = HybridComputePrivateLinkScope;

/** Optional parameters. */
export interface PrivateLinkScopesGetValidationDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getValidationDetails operation. */
export type PrivateLinkScopesGetValidationDetailsResponse =
  PrivateLinkScopeValidationDetails;

/** Optional parameters. */
export interface PrivateLinkScopesGetValidationDetailsForMachineOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getValidationDetailsForMachine operation. */
export type PrivateLinkScopesGetValidationDetailsForMachineResponse =
  PrivateLinkScopeValidationDetails;

/** Optional parameters. */
export interface PrivateLinkScopesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type PrivateLinkScopesListNextResponse =
  HybridComputePrivateLinkScopeListResult;

/** Optional parameters. */
export interface PrivateLinkScopesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type PrivateLinkScopesListByResourceGroupNextResponse =
  HybridComputePrivateLinkScopeListResult;

/** Optional parameters. */
export interface PrivateLinkResourcesListByPrivateLinkScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPrivateLinkScope operation. */
export type PrivateLinkResourcesListByPrivateLinkScopeResponse =
  PrivateLinkResourceListResult;

/** Optional parameters. */
export interface PrivateLinkResourcesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateLinkResourcesGetResponse = PrivateLinkResource;

/** Optional parameters. */
export interface PrivateLinkResourcesListByPrivateLinkScopeNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPrivateLinkScopeNext operation. */
export type PrivateLinkResourcesListByPrivateLinkScopeNextResponse =
  PrivateLinkResourceListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PrivateEndpointConnectionsCreateOrUpdateResponse =
  PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PrivateEndpointConnectionsListByPrivateLinkScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPrivateLinkScope operation. */
export type PrivateEndpointConnectionsListByPrivateLinkScopeResponse =
  PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListByPrivateLinkScopeNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPrivateLinkScopeNext operation. */
export type PrivateEndpointConnectionsListByPrivateLinkScopeNextResponse =
  PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface NetworkSecurityPerimeterConfigurationsGetByPrivateLinkScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByPrivateLinkScope operation. */
export type NetworkSecurityPerimeterConfigurationsGetByPrivateLinkScopeResponse =
  NetworkSecurityPerimeterConfiguration;

/** Optional parameters. */
export interface NetworkSecurityPerimeterConfigurationsListByPrivateLinkScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPrivateLinkScope operation. */
export type NetworkSecurityPerimeterConfigurationsListByPrivateLinkScopeResponse =
  NetworkSecurityPerimeterConfigurationListResult;

/** Optional parameters. */
export interface NetworkSecurityPerimeterConfigurationsReconcileForPrivateLinkScopeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the reconcileForPrivateLinkScope operation. */
export type NetworkSecurityPerimeterConfigurationsReconcileForPrivateLinkScopeResponse =
  NetworkSecurityPerimeterConfigurationReconcileResult;

/** Optional parameters. */
export interface NetworkSecurityPerimeterConfigurationsListByPrivateLinkScopeNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPrivateLinkScopeNext operation. */
export type NetworkSecurityPerimeterConfigurationsListByPrivateLinkScopeNextResponse =
  NetworkSecurityPerimeterConfigurationListResult;

/** Optional parameters. */
export interface HybridComputeManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
