/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const LicenseDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LicenseDetails",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        type: {
          name: "String",
        },
      },
      edition: {
        serializedName: "edition",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      processors: {
        serializedName: "processors",
        type: {
          name: "Number",
        },
      },
      assignedLicenses: {
        serializedName: "assignedLicenses",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      immutableId: {
        serializedName: "immutableId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      volumeLicenseDetails: {
        serializedName: "volumeLicenseDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VolumeLicenseDetails",
            },
          },
        },
      },
    },
  },
};

export const VolumeLicenseDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeLicenseDetails",
    modelProperties: {
      programYear: {
        serializedName: "programYear",
        type: {
          name: "String",
        },
      },
      invoiceId: {
        serializedName: "invoiceId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const ResourceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const LicensesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LicensesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "License",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LocationData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocationData",
    modelProperties: {
      name: {
        constraints: {
          MaxLength: 256,
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      city: {
        serializedName: "city",
        type: {
          name: "String",
        },
      },
      district: {
        serializedName: "district",
        type: {
          name: "String",
        },
      },
      countryOrRegion: {
        serializedName: "countryOrRegion",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AgentConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentConfiguration",
    modelProperties: {
      proxyUrl: {
        serializedName: "proxyUrl",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      incomingConnectionsPorts: {
        serializedName: "incomingConnectionsPorts",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      extensionsAllowList: {
        serializedName: "extensionsAllowList",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConfigurationExtension",
            },
          },
        },
      },
      extensionsBlockList: {
        serializedName: "extensionsBlockList",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConfigurationExtension",
            },
          },
        },
      },
      proxyBypass: {
        serializedName: "proxyBypass",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      extensionsEnabled: {
        serializedName: "extensionsEnabled",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      guestConfigurationEnabled: {
        serializedName: "guestConfigurationEnabled",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      configMode: {
        serializedName: "configMode",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ConfigurationExtension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationExtension",
    modelProperties: {
      publisher: {
        serializedName: "publisher",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ServiceStatuses: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceStatuses",
    modelProperties: {
      extensionService: {
        serializedName: "extensionService",
        type: {
          name: "Composite",
          className: "ServiceStatus",
        },
      },
      guestConfigurationService: {
        serializedName: "guestConfigurationService",
        type: {
          name: "Composite",
          className: "ServiceStatus",
        },
      },
    },
  },
};

export const ServiceStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      startupType: {
        serializedName: "startupType",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HardwareProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HardwareProfile",
    modelProperties: {
      totalPhysicalMemoryInBytes: {
        serializedName: "totalPhysicalMemoryInBytes",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      numberOfCpuSockets: {
        serializedName: "numberOfCpuSockets",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      processors: {
        serializedName: "processors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Processor",
            },
          },
        },
      },
    },
  },
};

export const Processor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Processor",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      numberOfCores: {
        serializedName: "numberOfCores",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const StorageProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageProfile",
    modelProperties: {
      disks: {
        serializedName: "disks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Disk",
            },
          },
        },
      },
    },
  },
};

export const Disk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Disk",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String",
        },
      },
      diskType: {
        serializedName: "diskType",
        type: {
          name: "String",
        },
      },
      generatedId: {
        serializedName: "generatedId",
        type: {
          name: "String",
        },
      },
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      maxSizeInBytes: {
        serializedName: "maxSizeInBytes",
        type: {
          name: "Number",
        },
      },
      usedSpaceInBytes: {
        serializedName: "usedSpaceInBytes",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const FirmwareProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirmwareProfile",
    modelProperties: {
      serialNumber: {
        serializedName: "serialNumber",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CloudMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudMetadata",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AgentUpgrade: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentUpgrade",
    modelProperties: {
      desiredVersion: {
        serializedName: "desiredVersion",
        type: {
          name: "String",
        },
      },
      correlationId: {
        serializedName: "correlationId",
        type: {
          name: "Uuid",
        },
      },
      enableAutomaticUpgrade: {
        serializedName: "enableAutomaticUpgrade",
        type: {
          name: "Boolean",
        },
      },
      lastAttemptDesiredVersion: {
        serializedName: "lastAttemptDesiredVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lastAttemptTimestamp: {
        serializedName: "lastAttemptTimestamp",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastAttemptStatus: {
        serializedName: "lastAttemptStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lastAttemptMessage: {
        serializedName: "lastAttemptMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OSProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSProfile",
    modelProperties: {
      computerName: {
        serializedName: "computerName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      windowsConfiguration: {
        serializedName: "windowsConfiguration",
        type: {
          name: "Composite",
          className: "OSProfileWindowsConfiguration",
        },
      },
      linuxConfiguration: {
        serializedName: "linuxConfiguration",
        type: {
          name: "Composite",
          className: "OSProfileLinuxConfiguration",
        },
      },
    },
  },
};

export const OSProfileWindowsConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSProfileWindowsConfiguration",
    modelProperties: {
      assessmentMode: {
        serializedName: "patchSettings.assessmentMode",
        type: {
          name: "String",
        },
      },
      patchMode: {
        serializedName: "patchSettings.patchMode",
        type: {
          name: "String",
        },
      },
      enableHotpatching: {
        serializedName: "patchSettings.enableHotpatching",
        type: {
          name: "Boolean",
        },
      },
      status: {
        serializedName: "patchSettings.status",
        type: {
          name: "Composite",
          className: "PatchSettingsStatus",
        },
      },
    },
  },
};

export const PatchSettingsStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchSettingsStatus",
    modelProperties: {
      hotpatchEnablementStatus: {
        serializedName: "hotpatchEnablementStatus",
        type: {
          name: "String",
        },
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const OSProfileLinuxConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSProfileLinuxConfiguration",
    modelProperties: {
      assessmentMode: {
        serializedName: "patchSettings.assessmentMode",
        type: {
          name: "String",
        },
      },
      patchMode: {
        serializedName: "patchSettings.patchMode",
        type: {
          name: "String",
        },
      },
      enableHotpatching: {
        serializedName: "patchSettings.enableHotpatching",
        type: {
          name: "Boolean",
        },
      },
      status: {
        serializedName: "patchSettings.status",
        type: {
          name: "Composite",
          className: "PatchSettingsStatus",
        },
      },
    },
  },
};

export const LicenseProfileMachineInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LicenseProfileMachineInstanceView",
    modelProperties: {
      licenseStatus: {
        serializedName: "licenseStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      licenseChannel: {
        serializedName: "licenseChannel",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      esuProfile: {
        serializedName: "esuProfile",
        type: {
          name: "Composite",
          className: "LicenseProfileMachineInstanceViewEsuProperties",
        },
      },
      subscriptionStatus: {
        serializedName: "productProfile.subscriptionStatus",
        type: {
          name: "String",
        },
      },
      productType: {
        serializedName: "productProfile.productType",
        type: {
          name: "String",
        },
      },
      enrollmentDate: {
        serializedName: "productProfile.enrollmentDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      billingStartDate: {
        serializedName: "productProfile.billingStartDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      disenrollmentDate: {
        serializedName: "productProfile.disenrollmentDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      billingEndDate: {
        serializedName: "productProfile.billingEndDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      error: {
        serializedName: "productProfile.error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
      productFeatures: {
        serializedName: "productProfile.productFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProductFeature",
            },
          },
        },
      },
      softwareAssuranceCustomer: {
        serializedName: "softwareAssurance.softwareAssuranceCustomer",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const LicenseProfileStorageModelEsuProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "LicenseProfileStorageModelEsuProperties",
      modelProperties: {
        assignedLicenseImmutableId: {
          serializedName: "assignedLicenseImmutableId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        esuKeys: {
          serializedName: "esuKeys",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "EsuKey",
              },
            },
          },
        },
      },
    },
  };

export const EsuKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EsuKey",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "String",
        },
      },
      licenseStatus: {
        serializedName: "licenseStatus",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ProductFeature: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProductFeature",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      subscriptionStatus: {
        serializedName: "subscriptionStatus",
        type: {
          name: "String",
        },
      },
      enrollmentDate: {
        serializedName: "enrollmentDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      billingStartDate: {
        serializedName: "billingStartDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      disenrollmentDate: {
        serializedName: "disenrollmentDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      billingEndDate: {
        serializedName: "billingEndDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const MachineExtensionInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtensionInstanceView",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      typeHandlerVersion: {
        serializedName: "typeHandlerVersion",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "MachineExtensionInstanceViewStatus",
        },
      },
    },
  },
};

export const MachineExtensionInstanceViewStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtensionInstanceViewStatus",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String",
        },
      },
      level: {
        serializedName: "level",
        type: {
          name: "String",
        },
      },
      displayStatus: {
        serializedName: "displayStatus",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
      time: {
        serializedName: "time",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const NetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProfile",
    modelProperties: {
      networkInterfaces: {
        serializedName: "networkInterfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterface",
            },
          },
        },
      },
    },
  },
};

export const NetworkInterface: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterface",
    modelProperties: {
      macAddress: {
        serializedName: "macAddress",
        type: {
          name: "String",
        },
      },
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      ipAddresses: {
        serializedName: "ipAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpAddress",
            },
          },
        },
      },
    },
  },
};

export const IpAddress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpAddress",
    modelProperties: {
      address: {
        serializedName: "address",
        type: {
          name: "String",
        },
      },
      ipAddressVersion: {
        serializedName: "ipAddressVersion",
        type: {
          name: "String",
        },
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "Subnet",
        },
      },
    },
  },
};

export const Subnet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Subnet",
    modelProperties: {
      addressPrefix: {
        serializedName: "addressPrefix",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MachineExtensionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtensionProperties",
    modelProperties: {
      forceUpdateTag: {
        serializedName: "forceUpdateTag",
        type: {
          name: "String",
        },
      },
      publisher: {
        serializedName: "publisher",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      typeHandlerVersion: {
        serializedName: "typeHandlerVersion",
        type: {
          name: "String",
        },
      },
      enableAutomaticUpgrade: {
        serializedName: "enableAutomaticUpgrade",
        type: {
          name: "Boolean",
        },
      },
      autoUpgradeMinorVersion: {
        serializedName: "autoUpgradeMinorVersion",
        type: {
          name: "Boolean",
        },
      },
      settings: {
        serializedName: "settings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      protectedSettings: {
        serializedName: "protectedSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      instanceView: {
        serializedName: "instanceView",
        type: {
          name: "Composite",
          className: "MachineExtensionInstanceView",
        },
      },
    },
  },
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        defaultValue: "SystemAssigned",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProductFeatureUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProductFeatureUpdate",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      subscriptionStatus: {
        serializedName: "subscriptionStatus",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LicenseProfilesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LicenseProfilesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LicenseProfile",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MachineAssessPatchesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineAssessPatchesResult",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      assessmentActivityId: {
        serializedName: "assessmentActivityId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      rebootPending: {
        serializedName: "rebootPending",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      availablePatchCountByClassification: {
        serializedName: "availablePatchCountByClassification",
        type: {
          name: "Composite",
          className: "AvailablePatchCountByClassification",
        },
      },
      startDateTime: {
        serializedName: "startDateTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastModifiedDateTime: {
        serializedName: "lastModifiedDateTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      startedBy: {
        serializedName: "startedBy",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      patchServiceUsed: {
        serializedName: "patchServiceUsed",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const AvailablePatchCountByClassification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailablePatchCountByClassification",
    modelProperties: {
      security: {
        serializedName: "security",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      critical: {
        serializedName: "critical",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      definition: {
        serializedName: "definition",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      updateRollup: {
        serializedName: "updateRollup",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      featurePack: {
        serializedName: "featurePack",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      servicePack: {
        serializedName: "servicePack",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      tools: {
        serializedName: "tools",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      updates: {
        serializedName: "updates",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      other: {
        serializedName: "other",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const MachineInstallPatchesParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineInstallPatchesParameters",
    modelProperties: {
      maximumDuration: {
        serializedName: "maximumDuration",
        required: true,
        type: {
          name: "TimeSpan",
        },
      },
      rebootSetting: {
        serializedName: "rebootSetting",
        required: true,
        type: {
          name: "String",
        },
      },
      windowsParameters: {
        serializedName: "windowsParameters",
        type: {
          name: "Composite",
          className: "WindowsParameters",
        },
      },
      linuxParameters: {
        serializedName: "linuxParameters",
        type: {
          name: "Composite",
          className: "LinuxParameters",
        },
      },
    },
  },
};

export const WindowsParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WindowsParameters",
    modelProperties: {
      classificationsToInclude: {
        serializedName: "classificationsToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      kbNumbersToInclude: {
        serializedName: "kbNumbersToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      kbNumbersToExclude: {
        serializedName: "kbNumbersToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      excludeKbsRequiringReboot: {
        serializedName: "excludeKbsRequiringReboot",
        type: {
          name: "Boolean",
        },
      },
      maxPatchPublishDate: {
        serializedName: "maxPatchPublishDate",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const LinuxParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinuxParameters",
    modelProperties: {
      classificationsToInclude: {
        serializedName: "classificationsToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      packageNameMasksToInclude: {
        serializedName: "packageNameMasksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      packageNameMasksToExclude: {
        serializedName: "packageNameMasksToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const MachineInstallPatchesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineInstallPatchesResult",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      installationActivityId: {
        serializedName: "installationActivityId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      rebootStatus: {
        serializedName: "rebootStatus",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      maintenanceWindowExceeded: {
        serializedName: "maintenanceWindowExceeded",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      excludedPatchCount: {
        serializedName: "excludedPatchCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      notSelectedPatchCount: {
        serializedName: "notSelectedPatchCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      pendingPatchCount: {
        serializedName: "pendingPatchCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      installedPatchCount: {
        serializedName: "installedPatchCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      failedPatchCount: {
        serializedName: "failedPatchCount",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      startDateTime: {
        serializedName: "startDateTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      lastModifiedDateTime: {
        serializedName: "lastModifiedDateTime",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      startedBy: {
        serializedName: "startedBy",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      patchServiceUsed: {
        serializedName: "patchServiceUsed",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const MachineListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Machine",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MachineExtensionsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtensionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MachineExtension",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MachineExtensionUpgrade: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtensionUpgrade",
    modelProperties: {
      extensionTargets: {
        serializedName: "extensionTargets",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "ExtensionTargetProperties" },
          },
        },
      },
    },
  },
};

export const ExtensionTargetProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionTargetProperties",
    modelProperties: {
      targetVersion: {
        serializedName: "targetVersion",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ResourceAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceAutoGenerated",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const ExtensionValueListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionValueListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExtensionValue",
            },
          },
        },
      },
    },
  },
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationValue",
            },
          },
        },
      },
    },
  },
};

export const OperationValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationValue",
    modelProperties: {
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationValueDisplay",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const OperationValueDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationValueDisplay",
    modelProperties: {
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MachineRunCommandScriptSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineRunCommandScriptSource",
    modelProperties: {
      script: {
        serializedName: "script",
        type: {
          name: "String",
        },
      },
      scriptUri: {
        serializedName: "scriptUri",
        type: {
          name: "String",
        },
      },
      commandId: {
        serializedName: "commandId",
        type: {
          name: "String",
        },
      },
      scriptUriManagedIdentity: {
        serializedName: "scriptUriManagedIdentity",
        type: {
          name: "Composite",
          className: "RunCommandManagedIdentity",
        },
      },
    },
  },
};

export const RunCommandManagedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunCommandManagedIdentity",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String",
        },
      },
      objectId: {
        serializedName: "objectId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RunCommandInputParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunCommandInputParameter",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MachineRunCommandInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineRunCommandInstanceView",
    modelProperties: {
      executionState: {
        serializedName: "executionState",
        type: {
          name: "String",
        },
      },
      executionMessage: {
        serializedName: "executionMessage",
        type: {
          name: "String",
        },
      },
      exitCode: {
        serializedName: "exitCode",
        type: {
          name: "Number",
        },
      },
      output: {
        serializedName: "output",
        type: {
          name: "String",
        },
      },
      error: {
        serializedName: "error",
        type: {
          name: "String",
        },
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime",
        },
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime",
        },
      },
      statuses: {
        serializedName: "statuses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExtensionsResourceStatus",
            },
          },
        },
      },
    },
  },
};

export const ExtensionsResourceStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionsResourceStatus",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String",
        },
      },
      level: {
        serializedName: "level",
        type: {
          name: "Enum",
          allowedValues: ["Info", "Warning", "Error"],
        },
      },
      displayStatus: {
        serializedName: "displayStatus",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
      time: {
        serializedName: "time",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const MachineRunCommandsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineRunCommandsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MachineRunCommand",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponseAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponseAutoGenerated",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetailAutoGenerated",
        },
      },
    },
  },
};

export const ErrorDetailAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetailAutoGenerated",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetailAutoGenerated",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const GatewaysListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewaysListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Gateway",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HybridComputePrivateLinkScopeListResult: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "HybridComputePrivateLinkScopeListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "HybridComputePrivateLinkScope",
              },
            },
          },
        },
        nextLink: {
          serializedName: "nextLink",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const HybridComputePrivateLinkScopeProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "HybridComputePrivateLinkScopeProperties",
      modelProperties: {
        publicNetworkAccess: {
          defaultValue: "Disabled",
          serializedName: "publicNetworkAccess",
          type: {
            name: "String",
          },
        },
        provisioningState: {
          serializedName: "provisioningState",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        privateLinkScopeId: {
          serializedName: "privateLinkScopeId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        privateEndpointConnections: {
          serializedName: "privateEndpointConnections",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "PrivateEndpointConnectionDataModel",
              },
            },
          },
        },
      },
    },
  };

export const PrivateEndpointConnectionDataModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionDataModel",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionProperties",
        },
      },
    },
  },
};

export const PrivateEndpointConnectionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionProperties",
    modelProperties: {
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpointProperty",
        },
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionStateProperty",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      groupIds: {
        serializedName: "groupIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const PrivateEndpointProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointProperty",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkServiceConnectionStateProperty: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "PrivateLinkServiceConnectionStateProperty",
      modelProperties: {
        status: {
          serializedName: "status",
          required: true,
          type: {
            name: "String",
          },
        },
        description: {
          serializedName: "description",
          required: true,
          type: {
            name: "String",
          },
        },
        actionsRequired: {
          serializedName: "actionsRequired",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const PrivateLinkScopesResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkScopesResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const TagsResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsResource",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
    },
  },
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceProperties",
    modelProperties: {
      groupId: {
        serializedName: "groupId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      requiredMembers: {
        serializedName: "requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      requiredZoneNames: {
        serializedName: "requiredZoneNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkScopeValidationDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkScopeValidationDetails",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      publicNetworkAccess: {
        defaultValue: "Disabled",
        serializedName: "publicNetworkAccess",
        type: {
          name: "String",
        },
      },
      connectionDetails: {
        serializedName: "connectionDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectionDetail",
            },
          },
        },
      },
    },
  },
};

export const ConnectionDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionDetail",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      privateIpAddress: {
        serializedName: "privateIpAddress",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      linkIdentifier: {
        serializedName: "linkIdentifier",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      groupId: {
        serializedName: "groupId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      memberName: {
        serializedName: "memberName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NetworkSecurityPerimeterConfiguration: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "NetworkSecurityPerimeterConfiguration",
      modelProperties: {
        id: {
          serializedName: "id",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        name: {
          serializedName: "name",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        type: {
          serializedName: "type",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        provisioningState: {
          serializedName: "properties.provisioningState",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        provisioningIssues: {
          serializedName: "properties.provisioningIssues",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "ProvisioningIssue",
              },
            },
          },
        },
        networkSecurityPerimeter: {
          serializedName: "properties.networkSecurityPerimeter",
          type: {
            name: "Composite",
            className: "NetworkSecurityPerimeter",
          },
        },
        resourceAssociation: {
          serializedName: "properties.resourceAssociation",
          type: {
            name: "Composite",
            className: "ResourceAssociation",
          },
        },
        profile: {
          serializedName: "properties.profile",
          type: {
            name: "Composite",
            className: "NetworkSecurityPerimeterProfile",
          },
        },
      },
    },
  };

export const ProvisioningIssue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisioningIssue",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      issueType: {
        serializedName: "properties.issueType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      severity: {
        serializedName: "properties.severity",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      suggestedResourceIds: {
        serializedName: "properties.suggestedResourceIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      suggestedAccessRules: {
        serializedName: "properties.suggestedAccessRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessRule",
            },
          },
        },
      },
    },
  },
};

export const AccessRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessRule",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      direction: {
        serializedName: "properties.direction",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      addressPrefixes: {
        serializedName: "properties.addressPrefixes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const NetworkSecurityPerimeter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkSecurityPerimeter",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      perimeterGuid: {
        serializedName: "perimeterGuid",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ResourceAssociation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceAssociation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      accessMode: {
        serializedName: "accessMode",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const NetworkSecurityPerimeterProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkSecurityPerimeterProfile",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      accessRulesVersion: {
        serializedName: "accessRulesVersion",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      accessRules: {
        serializedName: "accessRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessRule",
            },
          },
        },
      },
      diagnosticSettingsVersion: {
        serializedName: "diagnosticSettingsVersion",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      enabledLogCategories: {
        serializedName: "enabledLogCategories",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const NetworkSecurityPerimeterConfigurationListResult: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "NetworkSecurityPerimeterConfigurationListResult",
      modelProperties: {
        value: {
          serializedName: "value",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "NetworkSecurityPerimeterConfiguration",
              },
            },
          },
        },
        nextLink: {
          serializedName: "nextLink",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const NetworkSecurityPerimeterConfigurationReconcileResult: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "NetworkSecurityPerimeterConfigurationReconcileResult",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const HybridIdentityMetadataList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridIdentityMetadataList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HybridIdentityMetadata",
            },
          },
        },
      },
    },
  },
};

export const AgentVersionsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentVersionsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AgentVersion",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AgentVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentVersion",
    modelProperties: {
      agentVersion: {
        serializedName: "agentVersion",
        type: {
          name: "String",
        },
      },
      downloadLink: {
        serializedName: "downloadLink",
        type: {
          name: "String",
        },
      },
      osType: {
        serializedName: "osType",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const KeyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyProperties",
    modelProperties: {
      clientPublicKey: {
        serializedName: "clientPublicKey",
        type: {
          name: "Composite",
          className: "KeyDetails",
        },
      },
      candidatePublicKey: {
        serializedName: "candidatePublicKey",
        type: {
          name: "Composite",
          className: "KeyDetails",
        },
      },
    },
  },
};

export const KeyDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyDetails",
    modelProperties: {
      publicKey: {
        serializedName: "publicKey",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      notAfter: {
        serializedName: "notAfter",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      renewAfter: {
        serializedName: "renewAfter",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResourceAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResourceAutoGenerated",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const LicenseUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LicenseUpdate",
    modelProperties: {
      ...ResourceUpdate.type.modelProperties,
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String",
        },
      },
      state: {
        serializedName: "properties.licenseDetails.state",
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "properties.licenseDetails.target",
        type: {
          name: "String",
        },
      },
      edition: {
        serializedName: "properties.licenseDetails.edition",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "properties.licenseDetails.type",
        type: {
          name: "String",
        },
      },
      processors: {
        serializedName: "properties.licenseDetails.processors",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const LicenseProfileUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LicenseProfileUpdate",
    modelProperties: {
      ...ResourceUpdate.type.modelProperties,
      subscriptionStatus: {
        serializedName: "properties.productProfile.subscriptionStatus",
        type: {
          name: "String",
        },
      },
      productType: {
        serializedName: "properties.productProfile.productType",
        type: {
          name: "String",
        },
      },
      productFeatures: {
        serializedName: "properties.productProfile.productFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProductFeatureUpdate",
            },
          },
        },
      },
      assignedLicense: {
        serializedName: "properties.esuProfile.assignedLicense",
        type: {
          name: "String",
        },
      },
      softwareAssuranceCustomer: {
        serializedName:
          "properties.softwareAssurance.softwareAssuranceCustomer",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const MachineExtensionUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtensionUpdate",
    modelProperties: {
      ...ResourceUpdate.type.modelProperties,
      forceUpdateTag: {
        serializedName: "properties.forceUpdateTag",
        type: {
          name: "String",
        },
      },
      publisher: {
        serializedName: "properties.publisher",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "properties.type",
        type: {
          name: "String",
        },
      },
      typeHandlerVersion: {
        serializedName: "properties.typeHandlerVersion",
        type: {
          name: "String",
        },
      },
      enableAutomaticUpgrade: {
        serializedName: "properties.enableAutomaticUpgrade",
        type: {
          name: "Boolean",
        },
      },
      autoUpgradeMinorVersion: {
        serializedName: "properties.autoUpgradeMinorVersion",
        type: {
          name: "Boolean",
        },
      },
      settings: {
        serializedName: "properties.settings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
      protectedSettings: {
        serializedName: "properties.protectedSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const GatewayUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayUpdate",
    modelProperties: {
      ...ResourceUpdate.type.modelProperties,
      allowedFeatures: {
        serializedName: "properties.allowedFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const MachineUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineUpdate",
    modelProperties: {
      ...ResourceUpdate.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity",
        },
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String",
        },
      },
      locationData: {
        serializedName: "properties.locationData",
        type: {
          name: "Composite",
          className: "LocationData",
        },
      },
      osProfile: {
        serializedName: "properties.osProfile",
        type: {
          name: "Composite",
          className: "OSProfile",
        },
      },
      cloudMetadata: {
        serializedName: "properties.cloudMetadata",
        type: {
          name: "Composite",
          className: "CloudMetadata",
        },
      },
      agentUpgrade: {
        serializedName: "properties.agentUpgrade",
        type: {
          name: "Composite",
          className: "AgentUpgrade",
        },
      },
      parentClusterResourceId: {
        serializedName: "properties.parentClusterResourceId",
        type: {
          name: "String",
        },
      },
      privateLinkScopeResourceId: {
        serializedName: "properties.privateLinkScopeResourceId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MachineRunCommandUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineRunCommandUpdate",
    modelProperties: {
      ...ResourceUpdate.type.modelProperties,
    },
  },
};

export const LicenseProfileArmEsuPropertiesWithoutAssignedLicense: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "LicenseProfileArmEsuPropertiesWithoutAssignedLicense",
      modelProperties: {
        ...LicenseProfileStorageModelEsuProperties.type.modelProperties,
        serverType: {
          serializedName: "serverType",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        esuEligibility: {
          serializedName: "esuEligibility",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        esuKeyState: {
          serializedName: "esuKeyState",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...ResourceAutoGenerated.type.modelProperties,
    },
  },
};

export const TrackedResourceAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResourceAutoGenerated",
    modelProperties: {
      ...ResourceAutoGenerated.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HybridComputePrivateLinkScope: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridComputePrivateLinkScope",
    modelProperties: {
      ...PrivateLinkScopesResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "HybridComputePrivateLinkScopeProperties",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const License: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "License",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String",
        },
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String",
        },
      },
      licenseDetails: {
        serializedName: "properties.licenseDetails",
        type: {
          name: "Composite",
          className: "LicenseDetails",
        },
      },
    },
  },
};

export const MachineExtension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtension",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "MachineExtensionProperties",
        },
      },
    },
  },
};

export const Machine: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Machine",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      resources: {
        serializedName: "resources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MachineExtension",
            },
          },
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity",
        },
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String",
        },
      },
      locationData: {
        serializedName: "properties.locationData",
        type: {
          name: "Composite",
          className: "LocationData",
        },
      },
      agentConfiguration: {
        serializedName: "properties.agentConfiguration",
        type: {
          name: "Composite",
          className: "AgentConfiguration",
        },
      },
      serviceStatuses: {
        serializedName: "properties.serviceStatuses",
        type: {
          name: "Composite",
          className: "ServiceStatuses",
        },
      },
      hardwareProfile: {
        serializedName: "properties.hardwareProfile",
        type: {
          name: "Composite",
          className: "HardwareProfile",
        },
      },
      storageProfile: {
        serializedName: "properties.storageProfile",
        type: {
          name: "Composite",
          className: "StorageProfile",
        },
      },
      firmwareProfile: {
        serializedName: "properties.firmwareProfile",
        type: {
          name: "Composite",
          className: "FirmwareProfile",
        },
      },
      cloudMetadata: {
        serializedName: "properties.cloudMetadata",
        type: {
          name: "Composite",
          className: "CloudMetadata",
        },
      },
      agentUpgrade: {
        serializedName: "properties.agentUpgrade",
        type: {
          name: "Composite",
          className: "AgentUpgrade",
        },
      },
      osProfile: {
        serializedName: "properties.osProfile",
        type: {
          name: "Composite",
          className: "OSProfile",
        },
      },
      licenseProfile: {
        serializedName: "properties.licenseProfile",
        type: {
          name: "Composite",
          className: "LicenseProfileMachineInstanceView",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      lastStatusChange: {
        serializedName: "properties.lastStatusChange",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      errorDetails: {
        serializedName: "properties.errorDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      agentVersion: {
        serializedName: "properties.agentVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      vmId: {
        serializedName: "properties.vmId",
        type: {
          name: "Uuid",
        },
      },
      displayName: {
        serializedName: "properties.displayName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      machineFqdn: {
        serializedName: "properties.machineFqdn",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clientPublicKey: {
        serializedName: "properties.clientPublicKey",
        type: {
          name: "String",
        },
      },
      osName: {
        serializedName: "properties.osName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      osVersion: {
        serializedName: "properties.osVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      osType: {
        serializedName: "properties.osType",
        type: {
          name: "String",
        },
      },
      vmUuid: {
        serializedName: "properties.vmUuid",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      extensions: {
        serializedName: "properties.extensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MachineExtensionInstanceView",
            },
          },
        },
      },
      osSku: {
        serializedName: "properties.osSku",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      osEdition: {
        serializedName: "properties.osEdition",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      domainName: {
        serializedName: "properties.domainName",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      adFqdn: {
        serializedName: "properties.adFqdn",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      dnsFqdn: {
        serializedName: "properties.dnsFqdn",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      privateLinkScopeResourceId: {
        serializedName: "properties.privateLinkScopeResourceId",
        type: {
          name: "String",
        },
      },
      parentClusterResourceId: {
        serializedName: "properties.parentClusterResourceId",
        type: {
          name: "String",
        },
      },
      mssqlDiscovered: {
        serializedName: "properties.mssqlDiscovered",
        type: {
          name: "String",
        },
      },
      detectedProperties: {
        serializedName: "properties.detectedProperties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      networkProfile: {
        serializedName: "properties.networkProfile",
        type: {
          name: "Composite",
          className: "NetworkProfile",
        },
      },
    },
  },
};

export const LicenseProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LicenseProfile",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      subscriptionStatus: {
        serializedName: "properties.productProfile.subscriptionStatus",
        type: {
          name: "String",
        },
      },
      productType: {
        serializedName: "properties.productProfile.productType",
        type: {
          name: "String",
        },
      },
      enrollmentDate: {
        serializedName: "properties.productProfile.enrollmentDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      billingStartDate: {
        serializedName: "properties.productProfile.billingStartDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      disenrollmentDate: {
        serializedName: "properties.productProfile.disenrollmentDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      billingEndDate: {
        serializedName: "properties.productProfile.billingEndDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      error: {
        serializedName: "properties.productProfile.error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
      productFeatures: {
        serializedName: "properties.productProfile.productFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProductFeature",
            },
          },
        },
      },
      assignedLicenseImmutableId: {
        serializedName: "properties.esuProfile.assignedLicenseImmutableId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      esuKeys: {
        serializedName: "properties.esuProfile.esuKeys",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EsuKey",
            },
          },
        },
      },
      serverType: {
        serializedName: "properties.esuProfile.serverType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      esuEligibility: {
        serializedName: "properties.esuProfile.esuEligibility",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      esuKeyState: {
        serializedName: "properties.esuProfile.esuKeyState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      assignedLicense: {
        serializedName: "properties.esuProfile.assignedLicense",
        type: {
          name: "String",
        },
      },
      softwareAssuranceCustomer: {
        serializedName:
          "properties.softwareAssurance.softwareAssuranceCustomer",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const MachineRunCommand: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineRunCommand",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      source: {
        serializedName: "properties.source",
        type: {
          name: "Composite",
          className: "MachineRunCommandScriptSource",
        },
      },
      parameters: {
        serializedName: "properties.parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RunCommandInputParameter",
            },
          },
        },
      },
      protectedParameters: {
        serializedName: "properties.protectedParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RunCommandInputParameter",
            },
          },
        },
      },
      asyncExecution: {
        defaultValue: false,
        serializedName: "properties.asyncExecution",
        type: {
          name: "Boolean",
        },
      },
      runAsUser: {
        serializedName: "properties.runAsUser",
        type: {
          name: "String",
        },
      },
      runAsPassword: {
        serializedName: "properties.runAsPassword",
        type: {
          name: "String",
        },
      },
      timeoutInSeconds: {
        serializedName: "properties.timeoutInSeconds",
        type: {
          name: "Number",
        },
      },
      outputBlobUri: {
        serializedName: "properties.outputBlobUri",
        type: {
          name: "String",
        },
      },
      errorBlobUri: {
        serializedName: "properties.errorBlobUri",
        type: {
          name: "String",
        },
      },
      outputBlobManagedIdentity: {
        serializedName: "properties.outputBlobManagedIdentity",
        type: {
          name: "Composite",
          className: "RunCommandManagedIdentity",
        },
      },
      errorBlobManagedIdentity: {
        serializedName: "properties.errorBlobManagedIdentity",
        type: {
          name: "Composite",
          className: "RunCommandManagedIdentity",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      instanceView: {
        serializedName: "properties.instanceView",
        type: {
          name: "Composite",
          className: "MachineRunCommandInstanceView",
        },
      },
    },
  },
};

export const Settings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Settings",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      gatewayResourceId: {
        serializedName: "properties.gatewayProperties.gatewayResourceId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateLinkResourceProperties",
        },
      },
    },
  },
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionProperties",
        },
      },
    },
  },
};

export const HybridIdentityMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HybridIdentityMetadata",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      vmId: {
        serializedName: "properties.vmId",
        type: {
          name: "String",
        },
      },
      publicKey: {
        serializedName: "properties.publicKey",
        type: {
          name: "String",
        },
      },
      identity: {
        serializedName: "properties.identity",
        type: {
          name: "Composite",
          className: "Identity",
        },
      },
    },
  },
};

export const NetworkConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConfiguration",
    modelProperties: {
      ...ProxyResourceAutoGenerated.type.modelProperties,
      location: {
        serializedName: "properties.location",
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "properties.tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      networkConfigurationScopeId: {
        serializedName: "properties.networkConfigurationScopeId",
        type: {
          name: "String",
        },
      },
      networkConfigurationScopeResourceId: {
        serializedName: "properties.networkConfigurationScopeResourceId",
        type: {
          name: "String",
        },
      },
      keyProperties: {
        serializedName: "properties.keyProperties",
        type: {
          name: "Composite",
          className: "KeyProperties",
        },
      },
    },
  },
};

export const LicenseProfileMachineInstanceViewEsuProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "LicenseProfileMachineInstanceViewEsuProperties",
      modelProperties: {
        ...LicenseProfileArmEsuPropertiesWithoutAssignedLicense.type
          .modelProperties,
        assignedLicense: {
          serializedName: "assignedLicense",
          type: {
            name: "Composite",
            className: "License",
          },
        },
        licenseAssignmentState: {
          serializedName: "licenseAssignmentState",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const LicenseProfileArmEsuProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LicenseProfileArmEsuProperties",
    modelProperties: {
      ...LicenseProfileArmEsuPropertiesWithoutAssignedLicense.type
        .modelProperties,
      assignedLicense: {
        serializedName: "assignedLicense",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ExtensionValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionValue",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      version: {
        serializedName: "properties.version",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      extensionType: {
        serializedName: "properties.extensionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      publisher: {
        serializedName: "properties.publisher",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Gateway: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Gateway",
    modelProperties: {
      ...TrackedResourceAutoGenerated.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      gatewayId: {
        serializedName: "properties.gatewayId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      gatewayType: {
        serializedName: "properties.gatewayType",
        type: {
          name: "String",
        },
      },
      gatewayEndpoint: {
        serializedName: "properties.gatewayEndpoint",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      allowedFeatures: {
        serializedName: "properties.allowedFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const MachinesAssessPatchesHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachinesAssessPatchesHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MachinesInstallPatchesHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachinesInstallPatchesHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LicenseProfilesCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "LicenseProfilesCreateOrUpdateHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const LicenseProfilesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LicenseProfilesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const LicenseProfilesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LicenseProfilesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MachineExtensionsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtensionsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const MachineExtensionsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineExtensionsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const HybridComputeManagementClientUpgradeExtensionsHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "HybridComputeManagementClientUpgradeExtensionsHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const MachineRunCommandsCreateOrUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "MachineRunCommandsCreateOrUpdateHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const MachineRunCommandsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MachineRunCommandsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GatewaysCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewaysCreateOrUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const GatewaysDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewaysDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkScopesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkScopesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateEndpointConnectionsDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "PrivateEndpointConnectionsDeleteHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const NetworkSecurityPerimeterConfigurationsReconcileForPrivateLinkScopeHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className:
        "NetworkSecurityPerimeterConfigurationsReconcileForPrivateLinkScopeHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        retryAfter: {
          serializedName: "retry-after",
          type: {
            name: "Number",
          },
        },
        azureAsyncOperation: {
          serializedName: "azure-asyncoperation",
          type: {
            name: "String",
          },
        },
      },
    },
  };
