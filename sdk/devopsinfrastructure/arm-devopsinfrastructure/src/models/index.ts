/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type OrganizationProfileUnion =
  | OrganizationProfile
  | AzureDevOpsOrganizationProfile
  | GitHubOrganizationProfile;
export type AgentProfileUnion = AgentProfile | Stateful | StatelessAgentProfile;
export type ResourcePredictionsProfileUnion =
  | ResourcePredictionsProfile
  | AutomaticResourcePredictionsProfile
  | ManualResourcePredictionsProfile;
export type FabricProfileUnion = FabricProfile | VmssFabricProfile;
export type AgentProfileUpdateUnion =
  | AgentProfileUpdate
  | StatefulUpdate
  | StatelessAgentProfileUpdate;
export type ResourcePredictionsProfileUpdateUnion =
  | ResourcePredictionsProfileUpdate
  | AutomaticResourcePredictionsProfileUpdate
  | ManualResourcePredictionsProfileUpdate;

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The response of a ResourceSku list operation. */
export interface ResourceSkuListResult {
  /** The ResourceSku items on this page */
  value: ResourceSku[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Properties of a ResourceSku */
export interface ResourceSkuProperties {
  /** The type of resource the SKU applies to. */
  resourceType: string;
  /** The tier of virtual machines in a scale set */
  tier: string;
  /** The size of the SKU. */
  size: string;
  /** The family of the SKU. */
  family: string;
  /** The set of locations that the SKU is available. */
  locations: string[];
  /** A list of locations and availability zones in those locations where the SKU is available */
  locationInfo: ResourceSkuLocationInfo[];
  /** Name value pairs to describe the capability. */
  capabilities: ResourceSkuCapabilities[];
  /** The restrictions of the SKU. */
  restrictions: ResourceSkuRestrictions[];
}

/** Describes an available Compute SKU Location Information. */
export interface ResourceSkuLocationInfo {
  /** Location of the SKU */
  location: string;
  /** List of availability zones where the SKU is supported. */
  zones: string[];
  /** Gets details of capabilities available to a SKU in specific zones. */
  zoneDetails: ResourceSkuZoneDetails[];
}

/** Describes The zonal capabilities of a SKU. */
export interface ResourceSkuZoneDetails {
  /** Gets the set of zones that the SKU is available in with the specified capabilities. */
  name: string[];
  /** A list of capabilities that are available for the SKU in the specified list of zones. */
  capabilities: ResourceSkuCapabilities[];
}

/** Describes The SKU capabilities object. */
export interface ResourceSkuCapabilities {
  /** The name of the SKU capability. */
  name: string;
  /** The value of the SKU capability. */
  value: string;
}

/** The restrictions of the SKU. */
export interface ResourceSkuRestrictions {
  /** the type of restrictions. */
  type?: ResourceSkuRestrictionsType;
  /** The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted. */
  values: string[];
  /** The information about the restriction where the SKU cannot be used. */
  restrictionInfo: ResourceSkuRestrictionInfo;
  /** the reason for restriction. */
  reasonCode?: ResourceSkuRestrictionsReasonCode;
}

/** Describes an available Compute SKU Restriction Information. */
export interface ResourceSkuRestrictionInfo {
  /** Locations where the SKU is restricted */
  locations?: string[];
  /** List of availability zones where the SKU is restricted. */
  zones?: string[];
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The response of a Quota list operation. */
export interface QuotaListResult {
  /** The Quota items on this page */
  value: Quota[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Describes Resource Quota properties */
export interface QuotaProperties {
  /** The unit of usage measurement. */
  unit: string;
  /** The current usage of the resource. */
  currentValue: number;
  /** The maximum permitted usage of the resource. */
  limit: number;
  /** The details of the quota. */
  name: QuotaName;
}

/** The Quota Names */
export interface QuotaName {
  /** The name of the resource. */
  value?: string;
  /** The localized name of the resource. */
  localizedValue?: string;
}

/** The response of a Pool list operation. */
export interface PoolListResult {
  /** The Pool items on this page */
  value: Pool[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Pool properties */
export interface PoolProperties {
  /** The status of the current operation. */
  provisioningState?: ProvisioningState;
  /** Defines how many resources can there be created at any given time. */
  maximumConcurrency: number;
  /** Defines the organization in which the pool will be used. */
  organizationProfile: OrganizationProfileUnion;
  /** Defines how the machine will be handled once it executed a job. */
  agentProfile: AgentProfileUnion;
  /** Defines the type of fabric the agent will run on. */
  fabricProfile: FabricProfileUnion;
  /** The resource id of the DevCenter Project the pool belongs to. */
  devCenterProjectResourceId: string;
}

/** Defines the organization in which the pool will be used. */
export interface OrganizationProfile {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AzureDevOps" | "GitHub";
}

/** The agent profile of the machines in the pool. */
export interface AgentProfile {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Stateful" | "Stateless";
  /** Defines pool buffer/stand-by agents. */
  resourcePredictions?: Record<string, unknown>;
  /** Defines how the pool buffer/stand-by agents is provided. */
  resourcePredictionsProfile?: ResourcePredictionsProfileUnion;
}

/** Determines how the stand-by scheme should be provided. */
export interface ResourcePredictionsProfile {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Automatic" | "Manual";
}

/** Defines the type of fabric the agent will run on. */
export interface FabricProfile {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Vmss";
}

/** Managed service identity (system assigned and/or user assigned identities) */
export interface ManagedServiceIdentity {
  /**
   * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
  type: ManagedServiceIdentityType;
  /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
  userAssignedIdentities?: {
    [propertyName: string]: UserAssignedIdentity | null;
  };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** The response of a ImageVersion list operation. */
export interface ImageVersionListResult {
  /** The ImageVersion items on this page */
  value: ImageVersion[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Details of the ImageVersionProperties. */
export interface ImageVersionProperties {
  /** Version of the image. */
  version: string;
}

/** The type used for update operations of the Pool. */
export interface PoolUpdate {
  /** The managed service identities assigned to this resource. */
  identity?: ManagedServiceIdentity;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The updatable properties of the Pool. */
  properties?: PoolUpdateProperties;
}

/** The updatable properties of the Pool. */
export interface PoolUpdateProperties {
  /** The status of the current operation. */
  provisioningState?: ProvisioningState;
  /** Defines how many resources can there be created at any given time. */
  maximumConcurrency?: number;
  /** Defines the organization in which the pool will be used. */
  organizationProfile?: OrganizationProfileUnion;
  /** Defines how the machine will be handled once it executed a job. */
  agentProfile?: AgentProfileUpdateUnion;
  /** Defines the type of fabric the agent will run on. */
  fabricProfile?: FabricProfileUnion;
  /** The resource id of the DevCenter Project the pool belongs to. */
  devCenterProjectResourceId?: string;
}

/** The agent profile of the machines in the pool. */
export interface AgentProfileUpdate {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Stateful" | "Stateless";
  /** Defines pool buffer/stand-by agents. */
  resourcePredictions?: Record<string, unknown>;
  /** Defines how the pool buffer/stand-by agents is provided. */
  resourcePredictionsProfile?: ResourcePredictionsProfileUpdateUnion;
}

/** Determines how the stand-by scheme should be provided. */
export interface ResourcePredictionsProfileUpdate {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Automatic" | "Manual";
}

/** The response of a ResourceDetailsObject list operation. */
export interface ResourceDetailsObjectListResult {
  /** The ResourceDetailsObject items on this page */
  value: ResourceDetailsObject[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Details of the ResourceDetailsObject. */
export interface ResourceDetailsObjectProperties {
  /** The status of the resource. */
  status: ResourceStatus;
  /** The image name of the resource. */
  image: string;
  /** The version of the image running on the resource. */
  imageVersion: string;
}

/** Defines an Azure DevOps organization. */
export interface Organization {
  /** The Azure DevOps organization URL in which the pool should be created. */
  url: string;
  /** Optional list of projects in which the pool should be created. */
  projects?: string[];
  /** How many machines can be created at maximum in this organization out of the maximumConcurrency of the pool. */
  parallelism?: number;
}

/** Defines the type of Azure DevOps pool permission. */
export interface AzureDevOpsPermissionProfile {
  /** Determines who has admin permissions to the Azure DevOps pool. */
  kind: AzureDevOpsPermissionType;
  /** User email addresses */
  users?: string[];
  /** Group email addresses */
  groups?: string[];
}

/** The data disk of the VMSS. */
export interface DataDisk {
  /** The type of caching to be enabled for the data disks. The default value for caching is readwrite. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/. */
  caching?: CachingType;
  /** The initial disk size in gigabytes. */
  diskSizeGiB?: number;
  /** The storage Account type to be used for the data disk. If omitted, the default is "standard_lrs". */
  storageAccountType?: StorageAccountType;
  /** The drive letter for the empty data disk. If not specified, it will be the first available letter. */
  driveLetter?: string;
}

/** The Azure SKU of the machines in the pool. */
export interface DevOpsAzureSku {
  /** The Azure SKU name of the machines in the pool. */
  name: string;
}

/** Defines a GitHub organization */
export interface GitHubOrganization {
  /** The GitHub organization URL in which the pool should be created. */
  url: string;
  /** Optional list of repositories in which the pool should be created. */
  repositories?: string[];
}

/** The network profile of the machines in the pool. */
export interface NetworkProfile {
  /** The subnet id on which to put all machines created in the pool. */
  subnetId: string;
}

/** The OS profile of the machines in the pool. */
export interface OsProfile {
  /** The secret management settings of the machines in the pool. */
  secretsManagementSettings?: SecretsManagementSettings;
  /** Determines how the service should be run. By default, this will be set to Service. */
  logonType?: LogonType;
}

/** The secret management settings of the machines in the pool. */
export interface SecretsManagementSettings {
  /** Where to store certificates on the machine. */
  certificateStoreLocation?: string;
  /** The list of certificates to install on all machines in the pool. */
  observedCertificates: string[];
  /** Defines if the key of the certificates should be exportable. */
  keyExportable: boolean;
}

/** The VM image of the machines in the pool. */
export interface PoolImage {
  /** The resource id of the image. */
  resourceId?: string;
  /** The image to use from a well-known set of images made available to customers. */
  wellKnownImageName?: string;
  /** List of aliases to reference the image by. */
  aliases?: string[];
  /** The percentage of the buffer to be allocated to this image. */
  buffer?: string;
}

/** The storage profile of the VMSS. */
export interface StorageProfile {
  /** The Azure SKU name of the machines in the pool. */
  osDiskStorageAccountType?: OsDiskStorageAccountType;
  /** A list of empty data disks to attach. */
  dataDisks?: DataDisk[];
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** Azure DevOps organization profile */
export interface AzureDevOpsOrganizationProfile extends OrganizationProfile {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AzureDevOps";
  /** The list of Azure DevOps organizations the pool should be present in. */
  organizations: Organization[];
  /** The type of permission which determines which accounts are admins on the Azure DevOps pool. */
  permissionProfile?: AzureDevOpsPermissionProfile;
}

/** GitHub organization profile */
export interface GitHubOrganizationProfile extends OrganizationProfile {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "GitHub";
  /** The list of GitHub organizations/repositories the pool should be present in. */
  organizations: GitHubOrganization[];
}

/** Stateful profile meaning that the machines will be returned to the pool after running a job. */
export interface Stateful extends AgentProfile {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Stateful";
  /** How long should stateful machines be kept around. The maximum is one week. */
  maxAgentLifetime?: string;
  /** How long should the machine be kept around after it ran a workload when there are no stand-by agents. The maximum is one week. */
  gracePeriodTimeSpan?: string;
}

/** Stateless profile meaning that the machines will be cleaned up after running a job. */
export interface StatelessAgentProfile extends AgentProfile {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Stateless";
}

/** The stand-by agent scheme is determined based on historical demand. */
export interface AutomaticResourcePredictionsProfile
  extends ResourcePredictionsProfile {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Automatic";
  /** Determines the balance between cost and performance. */
  predictionPreference?: PredictionPreference;
}

/** Customer provides the stand-by agent scheme. */
export interface ManualResourcePredictionsProfile
  extends ResourcePredictionsProfile {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Manual";
}

/** The agents will run on Virtual Machine Scale Sets. */
export interface VmssFabricProfile extends FabricProfile {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Vmss";
  /** The Azure SKU of the machines in the pool. */
  sku: DevOpsAzureSku;
  /** The VM images of the machines in the pool. */
  images: PoolImage[];
  /** The OS profile of the machines in the pool. */
  osProfile?: OsProfile;
  /** The storage profile of the machines in the pool. */
  storageProfile?: StorageProfile;
  /** The network profile of the machines in the pool. */
  networkProfile?: NetworkProfile;
}

/** Stateful profile meaning that the machines will be returned to the pool after running a job. */
export interface StatefulUpdate extends AgentProfileUpdate {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Stateful";
  /** How long should stateful machines be kept around. The maximum is one week. */
  maxAgentLifetime?: string;
  /** How long should the machine be kept around after it ran a workload when there are no stand-by agents. The maximum is one week. */
  gracePeriodTimeSpan?: string;
}

/** Stateless profile meaning that the machines will be cleaned up after running a job. */
export interface StatelessAgentProfileUpdate extends AgentProfileUpdate {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Stateless";
}

/** The stand-by agent scheme is determined based on historical demand. */
export interface AutomaticResourcePredictionsProfileUpdate
  extends ResourcePredictionsProfileUpdate {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Automatic";
  /** Determines the balance between cost and performance. */
  predictionPreference?: PredictionPreference;
}

/** Customer provides the stand-by agent scheme. */
export interface ManualResourcePredictionsProfileUpdate
  extends ResourcePredictionsProfileUpdate {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Manual";
}

/** A ResourceSku */
export interface ResourceSku extends ProxyResource {
  /** The resource-specific properties for this resource. */
  properties?: ResourceSkuProperties;
}

/** Describes Resource Quota */
export interface Quota extends ProxyResource {
  /** The resource-specific properties for this resource. */
  properties?: QuotaProperties;
}

/** An image version object */
export interface ImageVersion extends ProxyResource {
  /** The resource-specific properties for this resource. */
  properties?: ImageVersionProperties;
}

/** A ResourceDetailsObject */
export interface ResourceDetailsObject extends ProxyResource {
  /** The resource-specific properties for this resource. */
  properties?: ResourceDetailsObjectProperties;
}

/** Concrete tracked resource types can be created by aliasing this type using a specific property type. */
export interface Pool extends TrackedResource {
  /** The resource-specific properties for this resource. */
  properties?: PoolProperties;
  /** The managed service identities assigned to this resource. */
  identity?: ManagedServiceIdentity;
}

/** Defines headers for Pools_createOrUpdate operation. */
export interface PoolsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Pools_update operation. */
export interface PoolsUpdateHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Pools_delete operation. */
export interface PoolsDeleteHeaders {
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system",
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal",
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link ResourceSkuRestrictionsType} that the service accepts. */
export enum KnownResourceSkuRestrictionsType {
  /** Location */
  Location = "Location",
  /** Zone */
  Zone = "Zone",
}

/**
 * Defines values for ResourceSkuRestrictionsType. \
 * {@link KnownResourceSkuRestrictionsType} can be used interchangeably with ResourceSkuRestrictionsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Location** \
 * **Zone**
 */
export type ResourceSkuRestrictionsType = string;

/** Known values of {@link ResourceSkuRestrictionsReasonCode} that the service accepts. */
export enum KnownResourceSkuRestrictionsReasonCode {
  /** QuotaId */
  QuotaId = "QuotaId",
  /** NotAvailableForSubscription */
  NotAvailableForSubscription = "NotAvailableForSubscription",
}

/**
 * Defines values for ResourceSkuRestrictionsReasonCode. \
 * {@link KnownResourceSkuRestrictionsReasonCode} can be used interchangeably with ResourceSkuRestrictionsReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **QuotaId** \
 * **NotAvailableForSubscription**
 */
export type ResourceSkuRestrictionsReasonCode = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Represents a succeeded operation. */
  Succeeded = "Succeeded",
  /** Represents a failed operation. */
  Failed = "Failed",
  /** Represents a canceled operation. */
  Canceled = "Canceled",
  /** Represents a pending operation. */
  Provisioning = "Provisioning",
  /** Represents a pending operation. */
  Updating = "Updating",
  /** Represents an operation under deletion. */
  Deleting = "Deleting",
  /** Represents an accepted operation. */
  Accepted = "Accepted",
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: Represents a succeeded operation. \
 * **Failed**: Represents a failed operation. \
 * **Canceled**: Represents a canceled operation. \
 * **Provisioning**: Represents a pending operation. \
 * **Updating**: Represents a pending operation. \
 * **Deleting**: Represents an operation under deletion. \
 * **Accepted**: Represents an accepted operation.
 */
export type ProvisioningState = string;

/** Known values of {@link ResourcePredictionsProfileType} that the service accepts. */
export enum KnownResourcePredictionsProfileType {
  /** Customer provides the stand-by agent scheme. */
  Manual = "Manual",
  /** The stand-by agent scheme is determined based on historical demand. */
  Automatic = "Automatic",
}

/**
 * Defines values for ResourcePredictionsProfileType. \
 * {@link KnownResourcePredictionsProfileType} can be used interchangeably with ResourcePredictionsProfileType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Manual**: Customer provides the stand-by agent scheme. \
 * **Automatic**: The stand-by agent scheme is determined based on historical demand.
 */
export type ResourcePredictionsProfileType = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned",
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link ResourceStatus} that the service accepts. */
export enum KnownResourceStatus {
  /** Represents a machine resource that is ready. */
  Ready = "Ready",
  /** Represents a machine resource that is not ready. */
  NotReady = "NotReady",
  /** Represents a machine resource that is allocated. */
  Allocated = "Allocated",
  /** Represents a machine resource that is pending return. */
  PendingReturn = "PendingReturn",
  /** Represents a machine resource that is returned. */
  Returned = "Returned",
  /** Represents a machine resource that is leased. */
  Leased = "Leased",
  /** Represents a machine resource that is provisioning. */
  Provisioning = "Provisioning",
  /** Represents a machine resource that is updating. */
  Updating = "Updating",
  /** Represents a machine resource that is starting. */
  Starting = "Starting",
  /** Represents a machine resource that is pending reimage. */
  PendingReimage = "PendingReimage",
  /** Represents a machine resource that is reimaging. */
  Reimaging = "Reimaging",
}

/**
 * Defines values for ResourceStatus. \
 * {@link KnownResourceStatus} can be used interchangeably with ResourceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ready**: Represents a machine resource that is ready. \
 * **NotReady**: Represents a machine resource that is not ready. \
 * **Allocated**: Represents a machine resource that is allocated. \
 * **PendingReturn**: Represents a machine resource that is pending return. \
 * **Returned**: Represents a machine resource that is returned. \
 * **Leased**: Represents a machine resource that is leased. \
 * **Provisioning**: Represents a machine resource that is provisioning. \
 * **Updating**: Represents a machine resource that is updating. \
 * **Starting**: Represents a machine resource that is starting. \
 * **PendingReimage**: Represents a machine resource that is pending reimage. \
 * **Reimaging**: Represents a machine resource that is reimaging.
 */
export type ResourceStatus = string;

/** Known values of {@link PredictionPreference} that the service accepts. */
export enum KnownPredictionPreference {
  /** Balance between cost and performance. */
  Balanced = "Balanced",
  /** Optimizes for cost over performance. */
  MostCostEffective = "MostCostEffective",
  /** Halfway through cost and balanced. */
  MoreCostEffective = "MoreCostEffective",
  /** Halfway through balanced and performance. */
  MorePerformance = "MorePerformance",
  /** Optimizes for performance over cost. */
  BestPerformance = "BestPerformance",
}

/**
 * Defines values for PredictionPreference. \
 * {@link KnownPredictionPreference} can be used interchangeably with PredictionPreference,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Balanced**: Balance between cost and performance. \
 * **MostCostEffective**: Optimizes for cost over performance. \
 * **MoreCostEffective**: Halfway through cost and balanced. \
 * **MorePerformance**: Halfway through balanced and performance. \
 * **BestPerformance**: Optimizes for performance over cost.
 */
export type PredictionPreference = string;

/** Known values of {@link AzureDevOpsPermissionType} that the service accepts. */
export enum KnownAzureDevOpsPermissionType {
  /** Pool will inherit permissions from the project or organization. */
  Inherit = "Inherit",
  /** Only the pool creator will be an admin of the pool. */
  CreatorOnly = "CreatorOnly",
  /** Only the specified accounts will be admins of the pool. */
  SpecificAccounts = "SpecificAccounts",
}

/**
 * Defines values for AzureDevOpsPermissionType. \
 * {@link KnownAzureDevOpsPermissionType} can be used interchangeably with AzureDevOpsPermissionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inherit**: Pool will inherit permissions from the project or organization. \
 * **CreatorOnly**: Only the pool creator will be an admin of the pool. \
 * **SpecificAccounts**: Only the specified accounts will be admins of the pool.
 */
export type AzureDevOpsPermissionType = string;

/** Known values of {@link CachingType} that the service accepts. */
export enum KnownCachingType {
  /** Don't use host caching. */
  None = "None",
  /** For workloads that only do read operations. */
  ReadOnly = "ReadOnly",
  /** For workloads that do a balance of read and write operations. */
  ReadWrite = "ReadWrite",
}

/**
 * Defines values for CachingType. \
 * {@link KnownCachingType} can be used interchangeably with CachingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: Don't use host caching. \
 * **ReadOnly**: For workloads that only do read operations. \
 * **ReadWrite**: For workloads that do a balance of read and write operations.
 */
export type CachingType = string;

/** Known values of {@link StorageAccountType} that the service accepts. */
export enum KnownStorageAccountType {
  /** The data disk should use standard locally redundant storage. */
  StandardLRS = "Standard_LRS",
  /** The data disk should use premium locally redundant storage. */
  PremiumLRS = "Premium_LRS",
  /** The data disk should use standard SSD locally redundant storage. */
  StandardSsdlrs = "StandardSSD_LRS",
  /** The data disk should use premium SSD zonal redundant storage. */
  PremiumZRS = "Premium_ZRS",
  /** The data disk should use standard SSD zonal redundant storage. */
  StandardSsdzrs = "StandardSSD_ZRS",
}

/**
 * Defines values for StorageAccountType. \
 * {@link KnownStorageAccountType} can be used interchangeably with StorageAccountType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard_LRS**: The data disk should use standard locally redundant storage. \
 * **Premium_LRS**: The data disk should use premium locally redundant storage. \
 * **StandardSSD_LRS**: The data disk should use standard SSD locally redundant storage. \
 * **Premium_ZRS**: The data disk should use premium SSD zonal redundant storage. \
 * **StandardSSD_ZRS**: The data disk should use standard SSD zonal redundant storage.
 */
export type StorageAccountType = string;

/** Known values of {@link LogonType} that the service accepts. */
export enum KnownLogonType {
  /** Run as a service. */
  Service = "Service",
  /** Run in interactive mode. */
  Interactive = "Interactive",
}

/**
 * Defines values for LogonType. \
 * {@link KnownLogonType} can be used interchangeably with LogonType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Service**: Run as a service. \
 * **Interactive**: Run in interactive mode.
 */
export type LogonType = string;

/** Known values of {@link OsDiskStorageAccountType} that the service accepts. */
export enum KnownOsDiskStorageAccountType {
  /** Standard OS disk type. */
  Standard = "Standard",
  /** Premium OS disk type. */
  Premium = "Premium",
  /** Standard SSD OS disk type. */
  StandardSSD = "StandardSSD",
}

/**
 * Defines values for OsDiskStorageAccountType. \
 * {@link KnownOsDiskStorageAccountType} can be used interchangeably with OsDiskStorageAccountType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard**: Standard OS disk type. \
 * **Premium**: Premium OS disk type. \
 * **StandardSSD**: Standard SSD OS disk type.
 */
export type OsDiskStorageAccountType = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface SkuListByLocationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocation operation. */
export type SkuListByLocationResponse = ResourceSkuListResult;

/** Optional parameters. */
export interface SkuListByLocationNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocationNext operation. */
export type SkuListByLocationNextResponse = ResourceSkuListResult;

/** Optional parameters. */
export interface SubscriptionUsagesListByLocationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocation operation. */
export type SubscriptionUsagesListByLocationResponse = QuotaListResult;

/** Optional parameters. */
export interface SubscriptionUsagesListByLocationNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocationNext operation. */
export type SubscriptionUsagesListByLocationNextResponse = QuotaListResult;

/** Optional parameters. */
export interface PoolsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type PoolsListBySubscriptionResponse = PoolListResult;

/** Optional parameters. */
export interface PoolsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type PoolsListByResourceGroupResponse = PoolListResult;

/** Optional parameters. */
export interface PoolsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PoolsGetResponse = Pool;

/** Optional parameters. */
export interface PoolsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PoolsCreateOrUpdateResponse = Pool;

/** Optional parameters. */
export interface PoolsUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type PoolsUpdateResponse = Pool;

/** Optional parameters. */
export interface PoolsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type PoolsDeleteResponse = PoolsDeleteHeaders;

/** Optional parameters. */
export interface PoolsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type PoolsListBySubscriptionNextResponse = PoolListResult;

/** Optional parameters. */
export interface PoolsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type PoolsListByResourceGroupNextResponse = PoolListResult;

/** Optional parameters. */
export interface ImageVersionsListByImageOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByImage operation. */
export type ImageVersionsListByImageResponse = ImageVersionListResult;

/** Optional parameters. */
export interface ImageVersionsListByImageNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByImageNext operation. */
export type ImageVersionsListByImageNextResponse = ImageVersionListResult;

/** Optional parameters. */
export interface ResourceDetailsListByPoolOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPool operation. */
export type ResourceDetailsListByPoolResponse = ResourceDetailsObjectListResult;

/** Optional parameters. */
export interface ResourceDetailsListByPoolNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPoolNext operation. */
export type ResourceDetailsListByPoolNextResponse =
  ResourceDetailsObjectListResult;

/** Optional parameters. */
export interface ManagedDevOpsInfrastructureOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
