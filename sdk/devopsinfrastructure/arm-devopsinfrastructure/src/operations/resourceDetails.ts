/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ResourceDetails } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ManagedDevOpsInfrastructure } from "../managedDevOpsInfrastructure";
import {
  ResourceDetailsObject,
  ResourceDetailsListByPoolNextOptionalParams,
  ResourceDetailsListByPoolOptionalParams,
  ResourceDetailsListByPoolResponse,
  ResourceDetailsListByPoolNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ResourceDetails operations. */
export class ResourceDetailsImpl implements ResourceDetails {
  private readonly client: ManagedDevOpsInfrastructure;

  /**
   * Initialize a new instance of the class ResourceDetails class.
   * @param client Reference to the service client
   */
  constructor(client: ManagedDevOpsInfrastructure) {
    this.client = client;
  }

  /**
   * List ResourceDetailsObject resources by Pool
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param poolName Name of the pool. It needs to be globally unique.
   * @param options The options parameters.
   */
  public listByPool(
    resourceGroupName: string,
    poolName: string,
    options?: ResourceDetailsListByPoolOptionalParams,
  ): PagedAsyncIterableIterator<ResourceDetailsObject> {
    const iter = this.listByPoolPagingAll(resourceGroupName, poolName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByPoolPagingPage(
          resourceGroupName,
          poolName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByPoolPagingPage(
    resourceGroupName: string,
    poolName: string,
    options?: ResourceDetailsListByPoolOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ResourceDetailsObject[]> {
    let result: ResourceDetailsListByPoolResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByPool(resourceGroupName, poolName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByPoolNext(
        resourceGroupName,
        poolName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByPoolPagingAll(
    resourceGroupName: string,
    poolName: string,
    options?: ResourceDetailsListByPoolOptionalParams,
  ): AsyncIterableIterator<ResourceDetailsObject> {
    for await (const page of this.listByPoolPagingPage(
      resourceGroupName,
      poolName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List ResourceDetailsObject resources by Pool
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param poolName Name of the pool. It needs to be globally unique.
   * @param options The options parameters.
   */
  private _listByPool(
    resourceGroupName: string,
    poolName: string,
    options?: ResourceDetailsListByPoolOptionalParams,
  ): Promise<ResourceDetailsListByPoolResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, poolName, options },
      listByPoolOperationSpec,
    );
  }

  /**
   * ListByPoolNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param poolName Name of the pool. It needs to be globally unique.
   * @param nextLink The nextLink from the previous successful call to the ListByPool method.
   * @param options The options parameters.
   */
  private _listByPoolNext(
    resourceGroupName: string,
    poolName: string,
    nextLink: string,
    options?: ResourceDetailsListByPoolNextOptionalParams,
  ): Promise<ResourceDetailsListByPoolNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, poolName, nextLink, options },
      listByPoolNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByPoolOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOpsInfrastructure/pools/{poolName}/resources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceDetailsObjectListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.poolName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByPoolNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ResourceDetailsObjectListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.poolName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
