/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type RoleUnion = Role | IoTRole;
export type TriggerUnion =
  | Trigger
  | FileEventTrigger
  | PeriodicTimerEventTrigger;

/** The list of operations used for the discovery of available provider operations. */
export interface OperationsList {
  /** The value. */
  value: Operation[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** Operations. */
export interface Operation {
  /** Name of the operation. */
  name?: string;
  /** Properties displayed for the operation. */
  display?: OperationDisplay;
  /** Origin of the operation. */
  origin?: string;
  /** Service specification. */
  serviceSpecification?: ServiceSpecification;
}

/** Operation display properties. */
export interface OperationDisplay {
  /** Provider name. */
  provider?: string;
  /** The type of resource in which the operation is performed. */
  resource?: string;
  /** Operation to be performed on the resource. */
  operation?: string;
  /** Description of the operation to be performed. */
  description?: string;
}

/** Service specification. */
export interface ServiceSpecification {
  /** Metric specification as defined by shoebox. */
  metricSpecifications?: MetricSpecificationV1[];
}

/** Metric specification version 1. */
export interface MetricSpecificationV1 {
  /** Name of the metric. */
  name?: string;
  /** Display name of the metric. */
  displayName?: string;
  /** Description of the metric to be displayed. */
  displayDescription?: string;
  /** Metric units. */
  unit?: MetricUnit;
  /** Metric aggregation type. */
  aggregationType?: MetricAggregationType;
  /** Metric dimensions, other than default dimension which is resource. */
  dimensions?: MetricDimensionV1[];
  /** Set true to fill the gaps with zero. */
  fillGapWithZero?: boolean;
  /** Metric category. */
  category?: MetricCategory;
  /** Resource name override. */
  resourceIdDimensionNameOverride?: string;
  /** Support granularity of metrics. */
  supportedTimeGrainTypes?: TimeGrain[];
  /** Support metric aggregation type. */
  supportedAggregationTypes?: MetricAggregationType[];
}

/** Metric Dimension v1. */
export interface MetricDimensionV1 {
  /** Name of the metrics dimension. */
  name?: string;
  /** Display name of the metrics dimension. */
  displayName?: string;
  /** To be exported to shoe box. */
  toBeExportedForShoebox?: boolean;
}

/** An error response from the service. */
export interface CloudError {
  /** The error details. */
  error?: CloudErrorBody;
}

/** An error response from the service. */
export interface CloudErrorBody {
  /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
  code?: string;
  /** A message describing the error, intended to be suitable for display in a user interface. */
  message?: string;
  /** A list of additional details about the error. */
  details?: CloudErrorBody[];
}

/** The collection of Data Box Edge/Gateway devices. */
export interface DataBoxEdgeDeviceList {
  /**
   * The list of Data Box Edge/Gateway devices.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: DataBoxEdgeDevice[];
  /**
   * Link to the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The SKU type. */
export interface Sku {
  /** SKU name. */
  name?: SkuName;
  /** The SKU tier. This is based on the SKU name. */
  tier?: SkuTier;
}

/** Represents the base class for all object models. */
export interface ARMBaseModel {
  /**
   * The path ID that uniquely identifies the object.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The object name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The hierarchical type of the object.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** The Data Box Edge/Gateway device patch. */
export interface DataBoxEdgeDevicePatch {
  /** The tags attached to the Data Box Edge/Gateway resource. */
  tags?: { [propertyName: string]: string };
}

/** Collection of alerts. */
export interface AlertList {
  /**
   * The value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Alert[];
  /**
   * Link to the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Error details for the alert. */
export interface AlertErrorDetails {
  /**
   * Error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorCode?: string;
  /**
   * Error Message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorMessage?: string;
  /**
   * Number of occurrences.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly occurrences?: number;
}

/** The collection of bandwidth schedules. */
export interface BandwidthSchedulesList {
  /**
   * The list of bandwidth schedules.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: BandwidthSchedule[];
  /**
   * Link to the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A device job. */
export interface Job {
  /**
   * The path ID that uniquely identifies the object.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the object.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The hierarchical type of the object.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The current status of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: JobStatus;
  /**
   * The UTC date and time at which the job started.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * The UTC date and time at which the job completed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: Date;
  /**
   * The percentage of the job that is complete.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly percentComplete?: number;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: JobErrorDetails;
  /**
   * The type of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly jobType?: JobType;
  /**
   * Current stage of the update operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentStage?: UpdateOperationStage;
  /**
   * The download progress.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly downloadProgress?: UpdateDownloadProgress;
  /**
   * The install progress.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly installProgress?: UpdateInstallProgress;
  /**
   * Total number of errors encountered during the refresh process.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalRefreshErrors?: number;
  /**
   * Local share/remote container relative path to the error manifest file of the refresh.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorManifestFile?: string;
  /**
   * ARM ID of the entity that was refreshed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly refreshedEntityId?: string;
  /** If only subfolders need to be refreshed, then the subfolder path inside the share or container. (The path is empty if there are no subfolders.) */
  folder?: string;
}

/** The job error information containing the list of job errors. */
export interface JobErrorDetails {
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorDetails?: JobErrorItem[];
  /**
   * The code intended for programmatic access.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The message that describes the error in detail.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** The job error items. */
export interface JobErrorItem {
  /**
   * The recommended actions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly recommendations?: string[];
  /**
   * The code intended for programmatic access.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The message that describes the error in detail.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** Details about the download progress of update. */
export interface UpdateDownloadProgress {
  /**
   * The download phase.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly downloadPhase?: DownloadPhase;
  /**
   * Percentage of completion.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly percentComplete?: number;
  /**
   * Total bytes to download.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalBytesToDownload?: number;
  /**
   * Total bytes downloaded.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalBytesDownloaded?: number;
  /**
   * Number of updates to download.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfUpdatesToDownload?: number;
  /**
   * Number of updates downloaded.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfUpdatesDownloaded?: number;
}

/** Progress details during installation of updates. */
export interface UpdateInstallProgress {
  /**
   * Percentage completed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly percentComplete?: number;
  /**
   * Number of updates to install.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfUpdatesToInstall?: number;
  /**
   * Number of updates installed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfUpdatesInstalled?: number;
}

/** Represents the networkAdapter on a device. */
export interface NetworkAdapter {
  /**
   * Instance ID of network adapter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly adapterId?: string;
  /**
   * Hardware position of network adapter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly adapterPosition?: NetworkAdapterPosition;
  /**
   * Logical index of the adapter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly index?: number;
  /**
   * Node ID of the network adapter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodeId?: string;
  /**
   * Network adapter name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkAdapterName?: string;
  /**
   * Hardware label for the adapter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly label?: string;
  /**
   * MAC address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly macAddress?: string;
  /**
   * Link speed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly linkSpeed?: number;
  /**
   * Value indicating whether this adapter is valid.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: NetworkAdapterStatus;
  /** Value indicating whether this adapter is RDMA capable. */
  rdmaStatus?: NetworkAdapterRdmaStatus;
  /** Value indicating whether this adapter has DHCP enabled. */
  dhcpStatus?: NetworkAdapterDhcpStatus;
  /**
   * The IPv4 configuration of the network adapter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv4Configuration?: Ipv4Config;
  /**
   * The IPv6 configuration of the network adapter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv6Configuration?: Ipv6Config;
  /**
   * The IPv6 local address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv6LinkLocalAddress?: string;
  /**
   * The list of DNS Servers of the device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dnsServers?: string[];
}

/** The network adapter position. */
export interface NetworkAdapterPosition {
  /**
   * The network group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkGroup?: NetworkGroup;
  /**
   * The port.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly port?: number;
}

/** Details related to the IPv4 address configuration. */
export interface Ipv4Config {
  /**
   * The IPv4 address of the network adapter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddress?: string;
  /**
   * The IPv4 subnet of the network adapter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subnet?: string;
  /**
   * The IPv4 gateway of the network adapter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly gateway?: string;
}

/** Details related to the IPv6 address configuration. */
export interface Ipv6Config {
  /**
   * The IPv6 address of the network adapter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddress?: string;
  /**
   * The IPv6 prefix of the network adapter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly prefixLength?: number;
  /**
   * The IPv6 gateway of the network adapter.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly gateway?: string;
}

/** Collection of Nodes. */
export interface NodeList {
  /**
   * The list of Nodes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Node[];
}

/** List of order entities. */
export interface OrderList {
  /**
   * The list of orders.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Order[];
  /**
   * Link to the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Contains all the contact details of the customer. */
export interface ContactDetails {
  /** The contact person name. */
  contactPerson: string;
  /** The name of the company. */
  companyName: string;
  /** The phone number. */
  phone: string;
  /** The email list. */
  emailList: string[];
}

/** The shipping address of the customer. */
export interface Address {
  /** The address line1. */
  addressLine1: string;
  /** The address line2. */
  addressLine2?: string;
  /** The address line3. */
  addressLine3?: string;
  /** The postal code. */
  postalCode: string;
  /** The city name. */
  city: string;
  /** The state name. */
  state: string;
  /** The country name. */
  country: string;
}

/** Represents a single status change. */
export interface OrderStatus {
  /** Status of the order as per the allowed status types. */
  status: OrderState;
  /**
   * Time of status update.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updateDateTime?: Date;
  /** Comments related to this status change. */
  comments?: string;
  /**
   * Dictionary to hold generic information which is not stored
   * by the already existing properties
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalOrderDetails?: { [propertyName: string]: string };
}

/** Tracking courier information. */
export interface TrackingInfo {
  /** Serial number of the device being tracked. */
  serialNumber?: string;
  /** Name of the carrier used in the delivery. */
  carrierName?: string;
  /** Tracking ID of the shipment. */
  trackingId?: string;
  /** Tracking URL of the shipment. */
  trackingUrl?: string;
}

/** Collection of all the roles on the Data Box Edge device. */
export interface RoleList {
  /**
   * The Value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: RoleUnion[];
  /**
   * Link to the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Represent the secrets intended for encryption with asymmetric key pair. */
export interface AsymmetricEncryptedSecret {
  /** The value of the secret. */
  value: string;
  /** Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, it will be null. */
  encryptionCertThumbprint?: string;
  /** The algorithm used to encrypt "Value". */
  encryptionAlgorithm: EncryptionAlgorithm;
}

/** Collection of all the shares on the Data Box Edge/Gateway device. */
export interface ShareList {
  /**
   * The list of shares.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Share[];
  /**
   * Link to the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Azure container mapping of the endpoint. */
export interface AzureContainerInfo {
  /** ID of the storage account credential used to access storage. */
  storageAccountCredentialId: string;
  /** Container name (Based on the data format specified, this represents the name of Azure Files/Page blob/Block blob). */
  containerName: string;
  /** Storage format used for the file represented by the share. */
  dataFormat: AzureContainerDataFormat;
}

/** The mapping between a particular user and the access type on the SMB share. */
export interface UserAccessRight {
  /** User ID (already existing in the device). */
  userId: string;
  /** Type of access to be allowed for the user. */
  accessType: ShareAccessType;
}

/** The mapping between a particular client IP and the type of access client has on the NFS share. */
export interface ClientAccessRight {
  /** IP of the client. */
  client: string;
  /** Type of access to be allowed for the client. */
  accessPermission: ClientPermissionType;
}

/** Fields for tracking refresh job on the share or container. */
export interface RefreshDetails {
  /** If a refresh job is currently in progress on this share or container, this field indicates the ARM resource ID of that job. The field is empty if no job is in progress. */
  inProgressRefreshJobId?: string;
  /** Indicates the completed time for the last refresh job on this particular share or container, if any.This could be a failed job or a successful job. */
  lastCompletedRefreshJobTimeInUTC?: Date;
  /** Indicates the relative path of the error xml for the last refresh job on this particular share or container, if any. This could be a failed job or a successful job. */
  errorManifestFile?: string;
  /** Indicates the id of the last refresh job on this particular share or container,if any. This could be a failed job or a successful job. */
  lastJob?: string;
}

/** The share mount point. */
export interface MountPointMap {
  /** ID of the share mounted to the role VM. */
  shareId: string;
  /**
   * ID of the role to which share is mounted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly roleId?: string;
  /**
   * Mount point for the share.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly mountPoint?: string;
  /**
   * Role type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly roleType?: RoleTypes;
}

/** The collection of storage account credentials. */
export interface StorageAccountCredentialList {
  /**
   * The value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: StorageAccountCredential[];
  /**
   * Link to the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Collection of all the Storage Accounts on the Data Box Edge/Gateway device. */
export interface StorageAccountList {
  /**
   * The list of storageAccounts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: StorageAccount[];
  /**
   * Link to the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Collection of all the containers on the Data Box Edge/Gateway device. */
export interface ContainerList {
  /**
   * The list of containers.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Container[];
  /**
   * Link to the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Collection of all trigger on the data box edge device. */
export interface TriggerList {
  /**
   * The list of triggers.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: TriggerUnion[];
  /**
   * Link to the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The upload certificate request. */
export interface UploadCertificateRequest {
  /** The authentication type. */
  authenticationType?: AuthenticationType;
  /** The base64 encoded certificate raw data. */
  certificate: string;
}

/** The upload registration certificate response. */
export interface UploadCertificateResponse {
  /** Specifies authentication type. */
  authType?: AuthenticationType;
  /**
   * The resource ID of the Data Box Edge/Gateway device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceId?: string;
  /**
   * Azure Active Directory tenant authority.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aadAuthority?: string;
  /**
   * Azure Active Directory tenant ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aadTenantId?: string;
  /**
   * Azure Active Directory service principal client ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly servicePrincipalClientId?: string;
  /**
   * Azure Active Directory service principal object ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly servicePrincipalObjectId?: string;
  /**
   * The azure management endpoint audience.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly azureManagementEndpointAudience?: string;
  /**
   * Identifier of the target resource that is the recipient of the requested token.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly aadAudience?: string;
}

/** Collection of users. */
export interface UserList {
  /**
   * The list of users.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: User[];
  /**
   * Link to the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Specifies the mapping between this particular user and the type of access he has on shares on this device. */
export interface ShareAccessRight {
  /** The share ID. */
  shareId: string;
  /** Type of access to be allowed on the share for this user. */
  accessType: ShareAccessType;
}

/** List of SKU Information objects */
export interface SkuInformationList {
  /**
   * List of ResourceType Sku
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ResourceTypeSku[];
  /**
   * Links to the next set of results
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** SkuInformation object */
export interface ResourceTypeSku {
  /**
   * The type of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**
   * The Sku name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: SkuName;
  /**
   * The Sku kind
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kind?: string;
  /**
   * The Sku tier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: SkuTier;
  /**
   * The Sku family
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly family?: string;
  /**
   * Availability of the SKU for the region
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locations?: string[];
  /**
   * The API versions in which SKU is available
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiVersions?: string[];
  /**
   * Availability of the SKU for the location/zone
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locationInfo?: SkuLocationInfo[];
  /**
   * The pricing info of the Sku.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly costs?: SkuCost[];
  /**
   * Restrictions of the SKU availability.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly restrictions?: SkuRestriction[];
}

/** The location info. */
export interface SkuLocationInfo {
  /**
   * The location.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /**
   * The zones.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly zones?: string[];
  /**
   * The sites.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sites?: string[];
}

/** The metadata for retrieving price info. */
export interface SkuCost {
  /**
   * Used for querying price from commerce.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly meterId?: string;
  /**
   * The cost quantity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly quantity?: number;
  /**
   * Restriction of the SKU for the location/zone
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly extendedUnit?: string;
}

/** The restrictions because of which SKU cannot be used. */
export interface SkuRestriction {
  /**
   * The type of the restriction.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The locations where sku is restricted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly values?: string[];
  /**
   * The SKU restriction reason.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reasonCode?: SkuRestrictionReasonCode;
  /**
   * Restriction of the SKU for the location/zone
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly restrictionInfo?: SkuRestrictionInfo;
}

/** The restriction info with locations and zones. */
export interface SkuRestrictionInfo {
  /**
   * The locations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locations?: string[];
  /**
   * The zones.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly zones?: string[];
}

/** Authentication mechanism for IoT devices. */
export interface Authentication {
  /** Symmetric key for authentication. */
  symmetricKey?: SymmetricKey;
}

/** Symmetric key for authentication. */
export interface SymmetricKey {
  /** Connection string based on the symmetric key. */
  connectionString?: AsymmetricEncryptedSecret;
}

/** File source details. */
export interface FileSourceInfo {
  /** File share ID. */
  shareId: string;
}

/** Compute role against which events will be raised. */
export interface RoleSinkInfo {
  /** Compute role ID. */
  roleId: string;
}

/** Metadata of IoT device/IoT Edge device to be configured. */
export interface IoTDeviceInfo {
  /** ID of the IoT device/edge device. */
  deviceId: string;
  /** Host name for the IoT hub associated to the device. */
  ioTHostHub: string;
  /** Id for the IoT hub associated to the device. */
  ioTHostHubId?: string;
  /** IoT device authentication info. */
  authentication?: Authentication;
}

/** Periodic timer event source. */
export interface PeriodicTimerSourceInfo {
  /** The time of the day that results in a valid trigger. Schedule is computed with reference to the time specified upto seconds. If timezone is not specified the time will considered to be in device timezone. The value will always be returned as UTC time. */
  startTime: Date;
  /** Periodic frequency at which timer event needs to be raised. Supports daily, hourly, minutes, and seconds. */
  schedule: string;
  /** Topic where periodic events are published to IoT device. */
  topic?: string;
}

/** The Data Box Edge/Gateway device. */
export interface DataBoxEdgeDevice extends ARMBaseModel {
  /** The location of the device. This is a supported and registered Azure geographical region (for example, West US, East US, or Southeast Asia). The geographical region of a device cannot be changed once it is created, but if an identical geographical region is specified on update, the request will succeed. */
  location: string;
  /** The list of tags that describe the device. These tags can be used to view and group this device (across resource groups). */
  tags?: { [propertyName: string]: string };
  /** The SKU type. */
  sku?: Sku;
  /** The etag for the devices. */
  etag?: string;
  /** The status of the Data Box Edge/Gateway device. */
  dataBoxEdgeDeviceStatus?: DataBoxEdgeDeviceStatus;
  /**
   * The Serial Number of Data Box Edge/Gateway device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serialNumber?: string;
  /** The Description of the Data Box Edge/Gateway device. */
  description?: string;
  /** The description of the Data Box Edge/Gateway device model. */
  modelDescription?: string;
  /**
   * The type of the Data Box Edge/Gateway device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deviceType?: DeviceType;
  /** The Data Box Edge/Gateway device name. */
  friendlyName?: string;
  /**
   * The Data Box Edge/Gateway device culture.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly culture?: string;
  /**
   * The Data Box Edge/Gateway device model.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deviceModel?: string;
  /**
   * The Data Box Edge/Gateway device software version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deviceSoftwareVersion?: string;
  /**
   * The Data Box Edge/Gateway device local capacity in MB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deviceLocalCapacity?: number;
  /**
   * The Data Box Edge/Gateway device timezone.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeZone?: string;
  /**
   * The device software version number of the device (eg: 1.2.18105.6).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deviceHcsVersion?: string;
  /**
   * Type of compute roles configured.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configuredRoleTypes?: RoleTypes[];
  /**
   * The number of nodes in the cluster.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodeCount?: number;
}

/** Alert on the data box edge/gateway device. */
export interface Alert extends ARMBaseModel {
  /**
   * Alert title.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly title?: string;
  /**
   * Alert type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly alertType?: string;
  /**
   * UTC time when the alert appeared.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly appearedAtDateTime?: Date;
  /**
   * Alert recommendation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly recommendation?: string;
  /**
   * Severity of the alert.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly severity?: AlertSeverity;
  /**
   * Error details of the alert.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorDetails?: AlertErrorDetails;
  /**
   * Alert details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailedInformation?: { [propertyName: string]: string };
}

/** The bandwidth schedule details. */
export interface BandwidthSchedule extends ARMBaseModel {
  /** The start time of the schedule in UTC. */
  start: string;
  /** The stop time of the schedule in UTC. */
  stop: string;
  /** The bandwidth rate in Mbps. */
  rateInMbps: number;
  /** The days of the week when this schedule is applicable. */
  days: DayOfWeek[];
}

/** The extended Info of the Data Box Edge/Gateway device. */
export interface DataBoxEdgeDeviceExtendedInfo extends ARMBaseModel {
  /** The digital signature of encrypted certificate. */
  encryptionKeyThumbprint?: string;
  /** The public part of the encryption certificate. Client uses this to encrypt any secret. */
  encryptionKey?: string;
  /**
   * The Resource ID of the Resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceKey?: string;
}

/** The network settings of a device. */
export interface NetworkSettings extends ARMBaseModel {
  /**
   * The network adapter list on the device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkAdapters?: NetworkAdapter[];
}

/**
 * Represents a single node in a Data box Edge/Gateway device
 * Gateway devices, standalone Edge devices and a single node cluster Edge device will all have 1 node
 * Multi-node Edge devices will have more than 1 nodes
 */
export interface Node extends ARMBaseModel {
  /**
   * The current status of the individual node
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodeStatus?: NodeStatus;
  /**
   * Serial number of the Chassis
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodeChassisSerialNumber?: string;
  /**
   * Serial number of the individual node
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodeSerialNumber?: string;
  /**
   * Display Name of the individual node
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodeDisplayName?: string;
  /**
   * Friendly software version name that is currently installed on the node
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodeFriendlySoftwareVersion?: string;
  /**
   * HCS version that is currently installed on the node
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodeHcsVersion?: string;
  /**
   * Guid instance id of the node
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodeInstanceId?: string;
}

/** The order details. */
export interface Order extends ARMBaseModel {
  /** The contact details. */
  contactInformation?: ContactDetails;
  /** The shipping address. */
  shippingAddress?: Address;
  /** Current status of the order. */
  currentStatus?: OrderStatus;
  /**
   * List of status changes in the order.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly orderHistory?: OrderStatus[];
  /**
   * Serial number of the device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serialNumber?: string;
  /**
   * Tracking information for the package delivered to the customer whether it has an original or a replacement device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deliveryTrackingInfo?: TrackingInfo[];
  /**
   * Tracking information for the package returned from the customer whether it has an original or a replacement device.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly returnTrackingInfo?: TrackingInfo[];
}

/** Compute role. */
export interface Role extends ARMBaseModel {
  /** Role type. */
  kind: RoleTypes;
}

/** The security settings of a device. */
export interface SecuritySettings extends ARMBaseModel {
  /** Device administrator password as an encrypted string (encrypted using RSA PKCS #1) is used to sign into the  local web UI of the device. The Actual password should have at least 8 characters that are a combination of  uppercase, lowercase, numeric, and special characters. */
  deviceAdminPassword: AsymmetricEncryptedSecret;
}

/** Represents a share on the  Data Box Edge/Gateway device. */
export interface Share extends ARMBaseModel {
  /** Description for the share. */
  description?: string;
  /** Current status of the share. */
  shareStatus: ShareStatus;
  /** Current monitoring status of the share. */
  monitoringStatus: MonitoringStatus;
  /** Azure container mapping for the share. */
  azureContainerInfo?: AzureContainerInfo;
  /** Access protocol to be used by the share. */
  accessProtocol: ShareAccessProtocol;
  /** Mapping of users and corresponding access rights on the share (required for SMB protocol). */
  userAccessRights?: UserAccessRight[];
  /** List of IP addresses and corresponding access rights on the share(required for NFS protocol). */
  clientAccessRights?: ClientAccessRight[];
  /** Details of the refresh job on this share. */
  refreshDetails?: RefreshDetails;
  /**
   * Share mount point to the role.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly shareMappings?: MountPointMap[];
  /** Data policy of the share. */
  dataPolicy?: DataPolicy;
}

/** The storage account credential. */
export interface StorageAccountCredential extends ARMBaseModel {
  /** Alias for the storage account. */
  alias: string;
  /** Username for the storage account. */
  userName?: string;
  /** Encrypted storage key. */
  accountKey?: AsymmetricEncryptedSecret;
  /** Connection string for the storage account. Use this string if username and account key are not specified. */
  connectionString?: string;
  /** Signifies whether SSL needs to be enabled or not. */
  sslStatus: SSLStatus;
  /** Blob end point for private clouds. */
  blobDomainName?: string;
  /** Type of storage accessed on the storage account. */
  accountType: AccountType;
  /** Id of the storage account. */
  storageAccountId?: string;
}

/** Represents a Storage Account on the  Data Box Edge/Gateway device. */
export interface StorageAccount extends ARMBaseModel {
  /** Description for the storage Account. */
  description?: string;
  /** Current status of the storage account */
  storageAccountStatus?: StorageAccountStatus;
  /** Data policy of the storage Account. */
  dataPolicy?: DataPolicy;
  /** Storage Account Credential Id */
  storageAccountCredentialId?: string;
  /**
   * BlobEndpoint of Storage Account
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blobEndpoint?: string;
  /**
   * The Container Count. Present only for Storage Accounts with DataPolicy set to Cloud.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly containerCount?: number;
}

/** Represents a container on the  Data Box Edge/Gateway device. */
export interface Container extends ARMBaseModel {
  /**
   * Current status of the container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly containerStatus?: ContainerStatus;
  /** DataFormat for Container */
  dataFormat: AzureContainerDataFormat;
  /**
   * Details of the refresh job on this container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly refreshDetails?: RefreshDetails;
  /**
   * The UTC time when container got created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDateTime?: Date;
}

/** Trigger details. */
export interface Trigger extends ARMBaseModel {
  /** Trigger Kind. */
  kind: TriggerEventType;
}

/** Details about ongoing updates and availability of updates on the device. */
export interface UpdateSummary extends ARMBaseModel {
  /** The current version of the device in format: 1.2.17312.13.", */
  deviceVersionNumber?: string;
  /** The current version of the device in text format. */
  friendlyDeviceVersionName?: string;
  /** The last time when a scan was done on the device. */
  deviceLastScannedDateTime?: Date;
  /** The time when the last scan job was completed (success/cancelled/failed) on the appliance. */
  lastCompletedScanJobDateTime?: Date;
  /**
   * The time when the last Download job was completed (success/cancelled/failed) on the appliance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastCompletedDownloadJobDateTime?: Date;
  /**
   * The time when the last Install job was completed (success/cancelled/failed) on the appliance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastCompletedInstallJobDateTime?: Date;
  /**
   * The number of updates available for the current device version as per the last device scan.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalNumberOfUpdatesAvailable?: number;
  /**
   * The total number of items pending download.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalNumberOfUpdatesPendingDownload?: number;
  /**
   * The total number of items pending install.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalNumberOfUpdatesPendingInstall?: number;
  /**
   * Indicates if updates are available and at least one of the updates needs a reboot.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rebootBehavior?: InstallRebootBehavior;
  /**
   * The current update operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ongoingUpdateOperation?: UpdateOperation;
  /**
   * The job ID of the download job in progress.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inProgressDownloadJobId?: string;
  /**
   * The job ID of the install job in progress.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inProgressInstallJobId?: string;
  /**
   * The time when the currently running download (if any) started.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inProgressDownloadJobStartedDateTime?: Date;
  /**
   * The time when the currently running install (if any) started.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly inProgressInstallJobStartedDateTime?: Date;
  /**
   * The list of updates available for install.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updateTitles?: string[];
  /**
   * The total size of updates available for download in bytes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalUpdateSizeInBytes?: number;
}

/** Represents a user who has access to one or more shares on the Data Box Edge/Gateway device. */
export interface User extends ARMBaseModel {
  /** The password details. */
  encryptedPassword?: AsymmetricEncryptedSecret;
  /** List of shares that the user has rights on. This field should not be specified during user creation. */
  shareAccessRights?: ShareAccessRight[];
  /** Type of the user. */
  userType: UserType;
}

/** Compute role. */
export interface IoTRole extends Role {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "IOT";
  /** Host OS supported by the IoT role. */
  hostPlatform?: PlatformType;
  /** IoT device metadata to which data box edge device needs to be connected. */
  ioTDeviceDetails?: IoTDeviceInfo;
  /** IoT edge device to which the IoT role needs to be configured. */
  ioTEdgeDeviceDetails?: IoTDeviceInfo;
  /** Mount points of shares in role(s). */
  shareMappings?: MountPointMap[];
  /** Role status. */
  roleStatus?: RoleStatus;
}

/** Trigger details. */
export interface FileEventTrigger extends Trigger {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "FileEvent";
  /** File event source details. */
  sourceInfo: FileSourceInfo;
  /** Role sink info. */
  sinkInfo: RoleSinkInfo;
  /** A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module. */
  customContextTag?: string;
}

/** Trigger details. */
export interface PeriodicTimerEventTrigger extends Trigger {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "PeriodicTimerEvent";
  /** Periodic timer details. */
  sourceInfo: PeriodicTimerSourceInfo;
  /** Role Sink information. */
  sinkInfo: RoleSinkInfo;
  /** A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module. */
  customContextTag?: string;
}

/** Known values of {@link MetricUnit} that the service accepts. */
export enum KnownMetricUnit {
  /** NotSpecified */
  NotSpecified = "NotSpecified",
  /** Percent */
  Percent = "Percent",
  /** Count */
  Count = "Count",
  /** Seconds */
  Seconds = "Seconds",
  /** Milliseconds */
  Milliseconds = "Milliseconds",
  /** Bytes */
  Bytes = "Bytes",
  /** BytesPerSecond */
  BytesPerSecond = "BytesPerSecond",
  /** CountPerSecond */
  CountPerSecond = "CountPerSecond"
}

/**
 * Defines values for MetricUnit. \
 * {@link KnownMetricUnit} can be used interchangeably with MetricUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Percent** \
 * **Count** \
 * **Seconds** \
 * **Milliseconds** \
 * **Bytes** \
 * **BytesPerSecond** \
 * **CountPerSecond**
 */
export type MetricUnit = string;

/** Known values of {@link MetricAggregationType} that the service accepts. */
export enum KnownMetricAggregationType {
  /** NotSpecified */
  NotSpecified = "NotSpecified",
  /** None */
  None = "None",
  /** Average */
  Average = "Average",
  /** Minimum */
  Minimum = "Minimum",
  /** Maximum */
  Maximum = "Maximum",
  /** Total */
  Total = "Total",
  /** Count */
  Count = "Count"
}

/**
 * Defines values for MetricAggregationType. \
 * {@link KnownMetricAggregationType} can be used interchangeably with MetricAggregationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **None** \
 * **Average** \
 * **Minimum** \
 * **Maximum** \
 * **Total** \
 * **Count**
 */
export type MetricAggregationType = string;

/** Known values of {@link MetricCategory} that the service accepts. */
export enum KnownMetricCategory {
  /** Capacity */
  Capacity = "Capacity",
  /** Transaction */
  Transaction = "Transaction"
}

/**
 * Defines values for MetricCategory. \
 * {@link KnownMetricCategory} can be used interchangeably with MetricCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Capacity** \
 * **Transaction**
 */
export type MetricCategory = string;

/** Known values of {@link TimeGrain} that the service accepts. */
export enum KnownTimeGrain {
  /** PT1M */
  PT1M = "PT1M",
  /** PT5M */
  PT5M = "PT5M",
  /** PT15M */
  PT15M = "PT15M",
  /** PT30M */
  PT30M = "PT30M",
  /** PT1H */
  PT1H = "PT1H",
  /** PT6H */
  PT6H = "PT6H",
  /** PT12H */
  PT12H = "PT12H",
  /** PT1D */
  PT1D = "PT1D"
}

/**
 * Defines values for TimeGrain. \
 * {@link KnownTimeGrain} can be used interchangeably with TimeGrain,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PT1M** \
 * **PT5M** \
 * **PT15M** \
 * **PT30M** \
 * **PT1H** \
 * **PT6H** \
 * **PT12H** \
 * **PT1D**
 */
export type TimeGrain = string;

/** Known values of {@link SkuName} that the service accepts. */
export enum KnownSkuName {
  /** Gateway */
  Gateway = "Gateway",
  /** Edge */
  Edge = "Edge",
  /** TEA1Node */
  TEA1Node = "TEA_1Node",
  /** TEA1NodeUPS */
  TEA1NodeUPS = "TEA_1Node_UPS",
  /** TEA1NodeHeater */
  TEA1NodeHeater = "TEA_1Node_Heater",
  /** TEA1NodeUPSHeater */
  TEA1NodeUPSHeater = "TEA_1Node_UPS_Heater",
  /** TEA4NodeHeater */
  TEA4NodeHeater = "TEA_4Node_Heater",
  /** TEA4NodeUPSHeater */
  TEA4NodeUPSHeater = "TEA_4Node_UPS_Heater",
  /** TMA */
  TMA = "TMA"
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Gateway** \
 * **Edge** \
 * **TEA_1Node** \
 * **TEA_1Node_UPS** \
 * **TEA_1Node_Heater** \
 * **TEA_1Node_UPS_Heater** \
 * **TEA_4Node_Heater** \
 * **TEA_4Node_UPS_Heater** \
 * **TMA**
 */
export type SkuName = string;

/** Known values of {@link SkuTier} that the service accepts. */
export enum KnownSkuTier {
  /** Standard */
  Standard = "Standard"
}

/**
 * Defines values for SkuTier. \
 * {@link KnownSkuTier} can be used interchangeably with SkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard**
 */
export type SkuTier = string;

/** Known values of {@link DataBoxEdgeDeviceStatus} that the service accepts. */
export enum KnownDataBoxEdgeDeviceStatus {
  /** ReadyToSetup */
  ReadyToSetup = "ReadyToSetup",
  /** Online */
  Online = "Online",
  /** Offline */
  Offline = "Offline",
  /** NeedsAttention */
  NeedsAttention = "NeedsAttention",
  /** Disconnected */
  Disconnected = "Disconnected",
  /** PartiallyDisconnected */
  PartiallyDisconnected = "PartiallyDisconnected",
  /** Maintenance */
  Maintenance = "Maintenance"
}

/**
 * Defines values for DataBoxEdgeDeviceStatus. \
 * {@link KnownDataBoxEdgeDeviceStatus} can be used interchangeably with DataBoxEdgeDeviceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ReadyToSetup** \
 * **Online** \
 * **Offline** \
 * **NeedsAttention** \
 * **Disconnected** \
 * **PartiallyDisconnected** \
 * **Maintenance**
 */
export type DataBoxEdgeDeviceStatus = string;

/** Known values of {@link DeviceType} that the service accepts. */
export enum KnownDeviceType {
  /** DataBoxEdgeDevice */
  DataBoxEdgeDevice = "DataBoxEdgeDevice"
}

/**
 * Defines values for DeviceType. \
 * {@link KnownDeviceType} can be used interchangeably with DeviceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DataBoxEdgeDevice**
 */
export type DeviceType = string;

/** Known values of {@link RoleTypes} that the service accepts. */
export enum KnownRoleTypes {
  /** IOT */
  IOT = "IOT",
  /** ASA */
  ASA = "ASA",
  /** Functions */
  Functions = "Functions",
  /** Cognitive */
  Cognitive = "Cognitive"
}

/**
 * Defines values for RoleTypes. \
 * {@link KnownRoleTypes} can be used interchangeably with RoleTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IOT** \
 * **ASA** \
 * **Functions** \
 * **Cognitive**
 */
export type RoleTypes = string;

/** Known values of {@link AlertSeverity} that the service accepts. */
export enum KnownAlertSeverity {
  /** Informational */
  Informational = "Informational",
  /** Warning */
  Warning = "Warning",
  /** Critical */
  Critical = "Critical"
}

/**
 * Defines values for AlertSeverity. \
 * {@link KnownAlertSeverity} can be used interchangeably with AlertSeverity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Informational** \
 * **Warning** \
 * **Critical**
 */
export type AlertSeverity = string;

/** Known values of {@link DayOfWeek} that the service accepts. */
export enum KnownDayOfWeek {
  /** Sunday */
  Sunday = "Sunday",
  /** Monday */
  Monday = "Monday",
  /** Tuesday */
  Tuesday = "Tuesday",
  /** Wednesday */
  Wednesday = "Wednesday",
  /** Thursday */
  Thursday = "Thursday",
  /** Friday */
  Friday = "Friday",
  /** Saturday */
  Saturday = "Saturday"
}

/**
 * Defines values for DayOfWeek. \
 * {@link KnownDayOfWeek} can be used interchangeably with DayOfWeek,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Sunday** \
 * **Monday** \
 * **Tuesday** \
 * **Wednesday** \
 * **Thursday** \
 * **Friday** \
 * **Saturday**
 */
export type DayOfWeek = string;

/** Known values of {@link JobStatus} that the service accepts. */
export enum KnownJobStatus {
  /** Invalid */
  Invalid = "Invalid",
  /** Running */
  Running = "Running",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Paused */
  Paused = "Paused",
  /** Scheduled */
  Scheduled = "Scheduled"
}

/**
 * Defines values for JobStatus. \
 * {@link KnownJobStatus} can be used interchangeably with JobStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **Running** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Paused** \
 * **Scheduled**
 */
export type JobStatus = string;

/** Known values of {@link JobType} that the service accepts. */
export enum KnownJobType {
  /** Invalid */
  Invalid = "Invalid",
  /** ScanForUpdates */
  ScanForUpdates = "ScanForUpdates",
  /** DownloadUpdates */
  DownloadUpdates = "DownloadUpdates",
  /** InstallUpdates */
  InstallUpdates = "InstallUpdates",
  /** RefreshShare */
  RefreshShare = "RefreshShare",
  /** RefreshContainer */
  RefreshContainer = "RefreshContainer"
}

/**
 * Defines values for JobType. \
 * {@link KnownJobType} can be used interchangeably with JobType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **ScanForUpdates** \
 * **DownloadUpdates** \
 * **InstallUpdates** \
 * **RefreshShare** \
 * **RefreshContainer**
 */
export type JobType = string;

/** Known values of {@link UpdateOperationStage} that the service accepts. */
export enum KnownUpdateOperationStage {
  /** Unknown */
  Unknown = "Unknown",
  /** Initial */
  Initial = "Initial",
  /** ScanStarted */
  ScanStarted = "ScanStarted",
  /** ScanComplete */
  ScanComplete = "ScanComplete",
  /** ScanFailed */
  ScanFailed = "ScanFailed",
  /** DownloadStarted */
  DownloadStarted = "DownloadStarted",
  /** DownloadComplete */
  DownloadComplete = "DownloadComplete",
  /** DownloadFailed */
  DownloadFailed = "DownloadFailed",
  /** InstallStarted */
  InstallStarted = "InstallStarted",
  /** InstallComplete */
  InstallComplete = "InstallComplete",
  /** InstallFailed */
  InstallFailed = "InstallFailed",
  /** RebootInitiated */
  RebootInitiated = "RebootInitiated",
  /** Success */
  Success = "Success",
  /** Failure */
  Failure = "Failure",
  /** RescanStarted */
  RescanStarted = "RescanStarted",
  /** RescanComplete */
  RescanComplete = "RescanComplete",
  /** RescanFailed */
  RescanFailed = "RescanFailed"
}

/**
 * Defines values for UpdateOperationStage. \
 * {@link KnownUpdateOperationStage} can be used interchangeably with UpdateOperationStage,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Initial** \
 * **ScanStarted** \
 * **ScanComplete** \
 * **ScanFailed** \
 * **DownloadStarted** \
 * **DownloadComplete** \
 * **DownloadFailed** \
 * **InstallStarted** \
 * **InstallComplete** \
 * **InstallFailed** \
 * **RebootInitiated** \
 * **Success** \
 * **Failure** \
 * **RescanStarted** \
 * **RescanComplete** \
 * **RescanFailed**
 */
export type UpdateOperationStage = string;

/** Known values of {@link DownloadPhase} that the service accepts. */
export enum KnownDownloadPhase {
  /** Unknown */
  Unknown = "Unknown",
  /** Initializing */
  Initializing = "Initializing",
  /** Downloading */
  Downloading = "Downloading",
  /** Verifying */
  Verifying = "Verifying"
}

/**
 * Defines values for DownloadPhase. \
 * {@link KnownDownloadPhase} can be used interchangeably with DownloadPhase,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Initializing** \
 * **Downloading** \
 * **Verifying**
 */
export type DownloadPhase = string;

/** Known values of {@link NetworkGroup} that the service accepts. */
export enum KnownNetworkGroup {
  /** None */
  None = "None",
  /** NonRdma */
  NonRdma = "NonRDMA",
  /** Rdma */
  Rdma = "RDMA"
}

/**
 * Defines values for NetworkGroup. \
 * {@link KnownNetworkGroup} can be used interchangeably with NetworkGroup,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **NonRDMA** \
 * **RDMA**
 */
export type NetworkGroup = string;

/** Known values of {@link NetworkAdapterStatus} that the service accepts. */
export enum KnownNetworkAdapterStatus {
  /** Inactive */
  Inactive = "Inactive",
  /** Active */
  Active = "Active"
}

/**
 * Defines values for NetworkAdapterStatus. \
 * {@link KnownNetworkAdapterStatus} can be used interchangeably with NetworkAdapterStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inactive** \
 * **Active**
 */
export type NetworkAdapterStatus = string;

/** Known values of {@link NetworkAdapterRdmaStatus} that the service accepts. */
export enum KnownNetworkAdapterRdmaStatus {
  /** Incapable */
  Incapable = "Incapable",
  /** Capable */
  Capable = "Capable"
}

/**
 * Defines values for NetworkAdapterRdmaStatus. \
 * {@link KnownNetworkAdapterRdmaStatus} can be used interchangeably with NetworkAdapterRdmaStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Incapable** \
 * **Capable**
 */
export type NetworkAdapterRdmaStatus = string;

/** Known values of {@link NetworkAdapterDhcpStatus} that the service accepts. */
export enum KnownNetworkAdapterDhcpStatus {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled"
}

/**
 * Defines values for NetworkAdapterDhcpStatus. \
 * {@link KnownNetworkAdapterDhcpStatus} can be used interchangeably with NetworkAdapterDhcpStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type NetworkAdapterDhcpStatus = string;

/** Known values of {@link NodeStatus} that the service accepts. */
export enum KnownNodeStatus {
  /** Unknown */
  Unknown = "Unknown",
  /** Up */
  Up = "Up",
  /** Down */
  Down = "Down",
  /** Rebooting */
  Rebooting = "Rebooting",
  /** ShuttingDown */
  ShuttingDown = "ShuttingDown"
}

/**
 * Defines values for NodeStatus. \
 * {@link KnownNodeStatus} can be used interchangeably with NodeStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Up** \
 * **Down** \
 * **Rebooting** \
 * **ShuttingDown**
 */
export type NodeStatus = string;

/** Known values of {@link OrderState} that the service accepts. */
export enum KnownOrderState {
  /** Untracked */
  Untracked = "Untracked",
  /** AwaitingFulfilment */
  AwaitingFulfilment = "AwaitingFulfilment",
  /** AwaitingPreparation */
  AwaitingPreparation = "AwaitingPreparation",
  /** AwaitingShipment */
  AwaitingShipment = "AwaitingShipment",
  /** Shipped */
  Shipped = "Shipped",
  /** Arriving */
  Arriving = "Arriving",
  /** Delivered */
  Delivered = "Delivered",
  /** ReplacementRequested */
  ReplacementRequested = "ReplacementRequested",
  /** LostDevice */
  LostDevice = "LostDevice",
  /** Declined */
  Declined = "Declined",
  /** ReturnInitiated */
  ReturnInitiated = "ReturnInitiated",
  /** AwaitingReturnShipment */
  AwaitingReturnShipment = "AwaitingReturnShipment",
  /** ShippedBack */
  ShippedBack = "ShippedBack",
  /** CollectedAtMicrosoft */
  CollectedAtMicrosoft = "CollectedAtMicrosoft"
}

/**
 * Defines values for OrderState. \
 * {@link KnownOrderState} can be used interchangeably with OrderState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Untracked** \
 * **AwaitingFulfilment** \
 * **AwaitingPreparation** \
 * **AwaitingShipment** \
 * **Shipped** \
 * **Arriving** \
 * **Delivered** \
 * **ReplacementRequested** \
 * **LostDevice** \
 * **Declined** \
 * **ReturnInitiated** \
 * **AwaitingReturnShipment** \
 * **ShippedBack** \
 * **CollectedAtMicrosoft**
 */
export type OrderState = string;

/** Known values of {@link EncryptionAlgorithm} that the service accepts. */
export enum KnownEncryptionAlgorithm {
  /** None */
  None = "None",
  /** AES256 */
  AES256 = "AES256",
  /** RsaesPkcs1V15 */
  RsaesPkcs1V15 = "RSAES_PKCS1_v_1_5"
}

/**
 * Defines values for EncryptionAlgorithm. \
 * {@link KnownEncryptionAlgorithm} can be used interchangeably with EncryptionAlgorithm,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **AES256** \
 * **RSAES_PKCS1_v_1_5**
 */
export type EncryptionAlgorithm = string;

/** Known values of {@link ShareStatus} that the service accepts. */
export enum KnownShareStatus {
  /** Offline */
  Offline = "Offline",
  /** Unknown */
  Unknown = "Unknown",
  /** OK */
  OK = "OK",
  /** Updating */
  Updating = "Updating",
  /** NeedsAttention */
  NeedsAttention = "NeedsAttention"
}

/**
 * Defines values for ShareStatus. \
 * {@link KnownShareStatus} can be used interchangeably with ShareStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Offline** \
 * **Unknown** \
 * **OK** \
 * **Updating** \
 * **NeedsAttention**
 */
export type ShareStatus = string;

/** Known values of {@link MonitoringStatus} that the service accepts. */
export enum KnownMonitoringStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for MonitoringStatus. \
 * {@link KnownMonitoringStatus} can be used interchangeably with MonitoringStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type MonitoringStatus = string;

/** Known values of {@link AzureContainerDataFormat} that the service accepts. */
export enum KnownAzureContainerDataFormat {
  /** BlockBlob */
  BlockBlob = "BlockBlob",
  /** PageBlob */
  PageBlob = "PageBlob",
  /** AzureFile */
  AzureFile = "AzureFile"
}

/**
 * Defines values for AzureContainerDataFormat. \
 * {@link KnownAzureContainerDataFormat} can be used interchangeably with AzureContainerDataFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BlockBlob** \
 * **PageBlob** \
 * **AzureFile**
 */
export type AzureContainerDataFormat = string;

/** Known values of {@link ShareAccessProtocol} that the service accepts. */
export enum KnownShareAccessProtocol {
  /** SMB */
  SMB = "SMB",
  /** NFS */
  NFS = "NFS"
}

/**
 * Defines values for ShareAccessProtocol. \
 * {@link KnownShareAccessProtocol} can be used interchangeably with ShareAccessProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SMB** \
 * **NFS**
 */
export type ShareAccessProtocol = string;

/** Known values of {@link ShareAccessType} that the service accepts. */
export enum KnownShareAccessType {
  /** Change */
  Change = "Change",
  /** Read */
  Read = "Read",
  /** Custom */
  Custom = "Custom"
}

/**
 * Defines values for ShareAccessType. \
 * {@link KnownShareAccessType} can be used interchangeably with ShareAccessType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Change** \
 * **Read** \
 * **Custom**
 */
export type ShareAccessType = string;

/** Known values of {@link ClientPermissionType} that the service accepts. */
export enum KnownClientPermissionType {
  /** NoAccess */
  NoAccess = "NoAccess",
  /** ReadOnly */
  ReadOnly = "ReadOnly",
  /** ReadWrite */
  ReadWrite = "ReadWrite"
}

/**
 * Defines values for ClientPermissionType. \
 * {@link KnownClientPermissionType} can be used interchangeably with ClientPermissionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NoAccess** \
 * **ReadOnly** \
 * **ReadWrite**
 */
export type ClientPermissionType = string;

/** Known values of {@link DataPolicy} that the service accepts. */
export enum KnownDataPolicy {
  /** Cloud */
  Cloud = "Cloud",
  /** Local */
  Local = "Local"
}

/**
 * Defines values for DataPolicy. \
 * {@link KnownDataPolicy} can be used interchangeably with DataPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cloud** \
 * **Local**
 */
export type DataPolicy = string;

/** Known values of {@link SSLStatus} that the service accepts. */
export enum KnownSSLStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for SSLStatus. \
 * {@link KnownSSLStatus} can be used interchangeably with SSLStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type SSLStatus = string;

/** Known values of {@link AccountType} that the service accepts. */
export enum KnownAccountType {
  /** GeneralPurposeStorage */
  GeneralPurposeStorage = "GeneralPurposeStorage",
  /** BlobStorage */
  BlobStorage = "BlobStorage"
}

/**
 * Defines values for AccountType. \
 * {@link KnownAccountType} can be used interchangeably with AccountType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **GeneralPurposeStorage** \
 * **BlobStorage**
 */
export type AccountType = string;

/** Known values of {@link StorageAccountStatus} that the service accepts. */
export enum KnownStorageAccountStatus {
  /** OK */
  OK = "OK",
  /** Offline */
  Offline = "Offline",
  /** Unknown */
  Unknown = "Unknown",
  /** Updating */
  Updating = "Updating",
  /** NeedsAttention */
  NeedsAttention = "NeedsAttention"
}

/**
 * Defines values for StorageAccountStatus. \
 * {@link KnownStorageAccountStatus} can be used interchangeably with StorageAccountStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OK** \
 * **Offline** \
 * **Unknown** \
 * **Updating** \
 * **NeedsAttention**
 */
export type StorageAccountStatus = string;

/** Known values of {@link ContainerStatus} that the service accepts. */
export enum KnownContainerStatus {
  /** OK */
  OK = "OK",
  /** Offline */
  Offline = "Offline",
  /** Unknown */
  Unknown = "Unknown",
  /** Updating */
  Updating = "Updating",
  /** NeedsAttention */
  NeedsAttention = "NeedsAttention"
}

/**
 * Defines values for ContainerStatus. \
 * {@link KnownContainerStatus} can be used interchangeably with ContainerStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OK** \
 * **Offline** \
 * **Unknown** \
 * **Updating** \
 * **NeedsAttention**
 */
export type ContainerStatus = string;

/** Known values of {@link TriggerEventType} that the service accepts. */
export enum KnownTriggerEventType {
  /** FileEvent */
  FileEvent = "FileEvent",
  /** PeriodicTimerEvent */
  PeriodicTimerEvent = "PeriodicTimerEvent"
}

/**
 * Defines values for TriggerEventType. \
 * {@link KnownTriggerEventType} can be used interchangeably with TriggerEventType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **FileEvent** \
 * **PeriodicTimerEvent**
 */
export type TriggerEventType = string;

/** Known values of {@link InstallRebootBehavior} that the service accepts. */
export enum KnownInstallRebootBehavior {
  /** NeverReboots */
  NeverReboots = "NeverReboots",
  /** RequiresReboot */
  RequiresReboot = "RequiresReboot",
  /** RequestReboot */
  RequestReboot = "RequestReboot"
}

/**
 * Defines values for InstallRebootBehavior. \
 * {@link KnownInstallRebootBehavior} can be used interchangeably with InstallRebootBehavior,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NeverReboots** \
 * **RequiresReboot** \
 * **RequestReboot**
 */
export type InstallRebootBehavior = string;

/** Known values of {@link UpdateOperation} that the service accepts. */
export enum KnownUpdateOperation {
  /** None */
  None = "None",
  /** Scan */
  Scan = "Scan",
  /** Download */
  Download = "Download",
  /** Install */
  Install = "Install"
}

/**
 * Defines values for UpdateOperation. \
 * {@link KnownUpdateOperation} can be used interchangeably with UpdateOperation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Scan** \
 * **Download** \
 * **Install**
 */
export type UpdateOperation = string;

/** Known values of {@link AuthenticationType} that the service accepts. */
export enum KnownAuthenticationType {
  /** Invalid */
  Invalid = "Invalid",
  /** AzureActiveDirectory */
  AzureActiveDirectory = "AzureActiveDirectory"
}

/**
 * Defines values for AuthenticationType. \
 * {@link KnownAuthenticationType} can be used interchangeably with AuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AzureActiveDirectory**
 */
export type AuthenticationType = string;

/** Known values of {@link UserType} that the service accepts. */
export enum KnownUserType {
  /** Share */
  Share = "Share",
  /** LocalManagement */
  LocalManagement = "LocalManagement",
  /** ARM */
  ARM = "ARM"
}

/**
 * Defines values for UserType. \
 * {@link KnownUserType} can be used interchangeably with UserType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Share** \
 * **LocalManagement** \
 * **ARM**
 */
export type UserType = string;

/** Known values of {@link SkuRestrictionReasonCode} that the service accepts. */
export enum KnownSkuRestrictionReasonCode {
  /** NotAvailableForSubscription */
  NotAvailableForSubscription = "NotAvailableForSubscription",
  /** QuotaId */
  QuotaId = "QuotaId"
}

/**
 * Defines values for SkuRestrictionReasonCode. \
 * {@link KnownSkuRestrictionReasonCode} can be used interchangeably with SkuRestrictionReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotAvailableForSubscription** \
 * **QuotaId**
 */
export type SkuRestrictionReasonCode = string;

/** Known values of {@link PlatformType} that the service accepts. */
export enum KnownPlatformType {
  /** Windows */
  Windows = "Windows",
  /** Linux */
  Linux = "Linux"
}

/**
 * Defines values for PlatformType. \
 * {@link KnownPlatformType} can be used interchangeably with PlatformType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux**
 */
export type PlatformType = string;

/** Known values of {@link RoleStatus} that the service accepts. */
export enum KnownRoleStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for RoleStatus. \
 * {@link KnownRoleStatus} can be used interchangeably with RoleStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type RoleStatus = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationsList;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationsList;

/** Optional parameters. */
export interface DevicesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=<token> to populate the next page in the list. */
  expand?: string;
}

/** Contains response data for the listBySubscription operation. */
export type DevicesListBySubscriptionResponse = DataBoxEdgeDeviceList;

/** Optional parameters. */
export interface DevicesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=<token> to populate the next page in the list. */
  expand?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export type DevicesListByResourceGroupResponse = DataBoxEdgeDeviceList;

/** Optional parameters. */
export interface DevicesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DevicesGetResponse = DataBoxEdgeDevice;

/** Optional parameters. */
export interface DevicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DevicesCreateOrUpdateResponse = DataBoxEdgeDevice;

/** Optional parameters. */
export interface DevicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevicesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type DevicesUpdateResponse = DataBoxEdgeDevice;

/** Optional parameters. */
export interface DevicesDownloadUpdatesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevicesGetExtendedInformationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getExtendedInformation operation. */
export type DevicesGetExtendedInformationResponse = DataBoxEdgeDeviceExtendedInfo;

/** Optional parameters. */
export interface DevicesInstallUpdatesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevicesGetNetworkSettingsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getNetworkSettings operation. */
export type DevicesGetNetworkSettingsResponse = NetworkSettings;

/** Optional parameters. */
export interface DevicesScanForUpdatesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevicesCreateOrUpdateSecuritySettingsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevicesGetUpdateSummaryOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getUpdateSummary operation. */
export type DevicesGetUpdateSummaryResponse = UpdateSummary;

/** Optional parameters. */
export interface DevicesUploadCertificateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the uploadCertificate operation. */
export type DevicesUploadCertificateResponse = UploadCertificateResponse;

/** Optional parameters. */
export interface DevicesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type DevicesListBySubscriptionNextResponse = DataBoxEdgeDeviceList;

/** Optional parameters. */
export interface DevicesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type DevicesListByResourceGroupNextResponse = DataBoxEdgeDeviceList;

/** Optional parameters. */
export interface AlertsListByDataBoxEdgeDeviceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export type AlertsListByDataBoxEdgeDeviceResponse = AlertList;

/** Optional parameters. */
export interface AlertsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AlertsGetResponse = Alert;

/** Optional parameters. */
export interface AlertsListByDataBoxEdgeDeviceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export type AlertsListByDataBoxEdgeDeviceNextResponse = AlertList;

/** Optional parameters. */
export interface BandwidthSchedulesListByDataBoxEdgeDeviceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export type BandwidthSchedulesListByDataBoxEdgeDeviceResponse = BandwidthSchedulesList;

/** Optional parameters. */
export interface BandwidthSchedulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BandwidthSchedulesGetResponse = BandwidthSchedule;

/** Optional parameters. */
export interface BandwidthSchedulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BandwidthSchedulesCreateOrUpdateResponse = BandwidthSchedule;

/** Optional parameters. */
export interface BandwidthSchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BandwidthSchedulesListByDataBoxEdgeDeviceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export type BandwidthSchedulesListByDataBoxEdgeDeviceNextResponse = BandwidthSchedulesList;

/** Optional parameters. */
export interface JobsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type JobsGetResponse = Job;

/** Optional parameters. */
export interface NodesListByDataBoxEdgeDeviceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export type NodesListByDataBoxEdgeDeviceResponse = NodeList;

/** Optional parameters. */
export interface OperationsStatusGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type OperationsStatusGetResponse = Job;

/** Optional parameters. */
export interface OrdersListByDataBoxEdgeDeviceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export type OrdersListByDataBoxEdgeDeviceResponse = OrderList;

/** Optional parameters. */
export interface OrdersGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type OrdersGetResponse = Order;

/** Optional parameters. */
export interface OrdersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type OrdersCreateOrUpdateResponse = Order;

/** Optional parameters. */
export interface OrdersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface OrdersListByDataBoxEdgeDeviceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export type OrdersListByDataBoxEdgeDeviceNextResponse = OrderList;

/** Optional parameters. */
export interface RolesListByDataBoxEdgeDeviceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export type RolesListByDataBoxEdgeDeviceResponse = RoleList;

/** Optional parameters. */
export interface RolesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RolesGetResponse = RoleUnion;

/** Optional parameters. */
export interface RolesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type RolesCreateOrUpdateResponse = RoleUnion;

/** Optional parameters. */
export interface RolesDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RolesListByDataBoxEdgeDeviceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export type RolesListByDataBoxEdgeDeviceNextResponse = RoleList;

/** Optional parameters. */
export interface SharesListByDataBoxEdgeDeviceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export type SharesListByDataBoxEdgeDeviceResponse = ShareList;

/** Optional parameters. */
export interface SharesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SharesGetResponse = Share;

/** Optional parameters. */
export interface SharesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SharesCreateOrUpdateResponse = Share;

/** Optional parameters. */
export interface SharesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SharesRefreshOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SharesListByDataBoxEdgeDeviceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export type SharesListByDataBoxEdgeDeviceNextResponse = ShareList;

/** Optional parameters. */
export interface StorageAccountCredentialsListByDataBoxEdgeDeviceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export type StorageAccountCredentialsListByDataBoxEdgeDeviceResponse = StorageAccountCredentialList;

/** Optional parameters. */
export interface StorageAccountCredentialsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type StorageAccountCredentialsGetResponse = StorageAccountCredential;

/** Optional parameters. */
export interface StorageAccountCredentialsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type StorageAccountCredentialsCreateOrUpdateResponse = StorageAccountCredential;

/** Optional parameters. */
export interface StorageAccountCredentialsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface StorageAccountCredentialsListByDataBoxEdgeDeviceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export type StorageAccountCredentialsListByDataBoxEdgeDeviceNextResponse = StorageAccountCredentialList;

/** Optional parameters. */
export interface StorageAccountsListByDataBoxEdgeDeviceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export type StorageAccountsListByDataBoxEdgeDeviceResponse = StorageAccountList;

/** Optional parameters. */
export interface StorageAccountsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type StorageAccountsGetResponse = StorageAccount;

/** Optional parameters. */
export interface StorageAccountsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type StorageAccountsCreateOrUpdateResponse = StorageAccount;

/** Optional parameters. */
export interface StorageAccountsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface StorageAccountsListByDataBoxEdgeDeviceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export type StorageAccountsListByDataBoxEdgeDeviceNextResponse = StorageAccountList;

/** Optional parameters. */
export interface ContainersListByStorageAccountOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByStorageAccount operation. */
export type ContainersListByStorageAccountResponse = ContainerList;

/** Optional parameters. */
export interface ContainersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ContainersGetResponse = Container;

/** Optional parameters. */
export interface ContainersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ContainersCreateOrUpdateResponse = Container;

/** Optional parameters. */
export interface ContainersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ContainersRefreshOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ContainersListByStorageAccountNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByStorageAccountNext operation. */
export type ContainersListByStorageAccountNextResponse = ContainerList;

/** Optional parameters. */
export interface TriggersListByDataBoxEdgeDeviceOptionalParams
  extends coreClient.OperationOptions {
  /** Specify $filter='CustomContextTag eq <tag>' to filter on custom context tag property */
  filter?: string;
}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export type TriggersListByDataBoxEdgeDeviceResponse = TriggerList;

/** Optional parameters. */
export interface TriggersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TriggersGetResponse = TriggerUnion;

/** Optional parameters. */
export interface TriggersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type TriggersCreateOrUpdateResponse = TriggerUnion;

/** Optional parameters. */
export interface TriggersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TriggersListByDataBoxEdgeDeviceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export type TriggersListByDataBoxEdgeDeviceNextResponse = TriggerList;

/** Optional parameters. */
export interface UsersListByDataBoxEdgeDeviceOptionalParams
  extends coreClient.OperationOptions {
  /** Specify $filter='UserType eq <type>' to filter on user type property */
  filter?: string;
}

/** Contains response data for the listByDataBoxEdgeDevice operation. */
export type UsersListByDataBoxEdgeDeviceResponse = UserList;

/** Optional parameters. */
export interface UsersGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type UsersGetResponse = User;

/** Optional parameters. */
export interface UsersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type UsersCreateOrUpdateResponse = User;

/** Optional parameters. */
export interface UsersDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface UsersListByDataBoxEdgeDeviceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDataBoxEdgeDeviceNext operation. */
export type UsersListByDataBoxEdgeDeviceNextResponse = UserList;

/** Optional parameters. */
export interface SkusListOptionalParams extends coreClient.OperationOptions {
  /** Specify $filter='location eq <location>' to filter on location. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type SkusListResponse = SkuInformationList;

/** Optional parameters. */
export interface DataBoxEdgeManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
