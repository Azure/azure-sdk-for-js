/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import {
  OperationsImpl,
  DevicesImpl,
  AlertsImpl,
  BandwidthSchedulesImpl,
  JobsImpl,
  NodesImpl,
  OperationsStatusImpl,
  OrdersImpl,
  RolesImpl,
  SharesImpl,
  StorageAccountCredentialsImpl,
  StorageAccountsImpl,
  ContainersImpl,
  TriggersImpl,
  UsersImpl,
  SkusImpl
} from "./operations";
import {
  Operations,
  Devices,
  Alerts,
  BandwidthSchedules,
  Jobs,
  Nodes,
  OperationsStatus,
  Orders,
  Roles,
  Shares,
  StorageAccountCredentials,
  StorageAccounts,
  Containers,
  Triggers,
  Users,
  Skus
} from "./operationsInterfaces";
import { DataBoxEdgeManagementClientOptionalParams } from "./models";

export class DataBoxEdgeManagementClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the DataBoxEdgeManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The subscription ID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: DataBoxEdgeManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: DataBoxEdgeManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-databoxedge-profile-2020-09-01-hybrid/2.0.0`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri: options.endpoint || "https://management.azure.com"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2019-08-01";
    this.operations = new OperationsImpl(this);
    this.devices = new DevicesImpl(this);
    this.alerts = new AlertsImpl(this);
    this.bandwidthSchedules = new BandwidthSchedulesImpl(this);
    this.jobs = new JobsImpl(this);
    this.nodes = new NodesImpl(this);
    this.operationsStatus = new OperationsStatusImpl(this);
    this.orders = new OrdersImpl(this);
    this.roles = new RolesImpl(this);
    this.shares = new SharesImpl(this);
    this.storageAccountCredentials = new StorageAccountCredentialsImpl(this);
    this.storageAccounts = new StorageAccountsImpl(this);
    this.containers = new ContainersImpl(this);
    this.triggers = new TriggersImpl(this);
    this.users = new UsersImpl(this);
    this.skus = new SkusImpl(this);
  }

  operations: Operations;
  devices: Devices;
  alerts: Alerts;
  bandwidthSchedules: BandwidthSchedules;
  jobs: Jobs;
  nodes: Nodes;
  operationsStatus: OperationsStatus;
  orders: Orders;
  roles: Roles;
  shares: Shares;
  storageAccountCredentials: StorageAccountCredentials;
  storageAccounts: StorageAccounts;
  containers: Containers;
  triggers: Triggers;
  users: Users;
  skus: Skus;
}
