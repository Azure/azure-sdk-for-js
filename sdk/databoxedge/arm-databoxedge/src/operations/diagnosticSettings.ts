/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/diagnosticSettingsMappers";
import * as Parameters from "../models/parameters";
import { DataBoxEdgeManagementClientContext } from "../dataBoxEdgeManagementClientContext";

/** Class representing a DiagnosticSettings. */
export class DiagnosticSettings {
  private readonly client: DataBoxEdgeManagementClientContext;

  /**
   * Create a DiagnosticSettings.
   * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataBoxEdgeManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the proactive log collection settings of the specified Data Box Edge/Data Box Gateway
   * device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticSettingsGetDiagnosticProactiveLogCollectionSettingsResponse>
   */
  getDiagnosticProactiveLogCollectionSettings(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticSettingsGetDiagnosticProactiveLogCollectionSettingsResponse>;
  /**
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name.
   * @param callback The callback
   */
  getDiagnosticProactiveLogCollectionSettings(deviceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.DiagnosticProactiveLogCollectionSettings>): void;
  /**
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDiagnosticProactiveLogCollectionSettings(deviceName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticProactiveLogCollectionSettings>): void;
  getDiagnosticProactiveLogCollectionSettings(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticProactiveLogCollectionSettings>, callback?: msRest.ServiceCallback<Models.DiagnosticProactiveLogCollectionSettings>): Promise<Models.DiagnosticSettingsGetDiagnosticProactiveLogCollectionSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        resourceGroupName,
        options
      },
      getDiagnosticProactiveLogCollectionSettingsOperationSpec,
      callback) as Promise<Models.DiagnosticSettingsGetDiagnosticProactiveLogCollectionSettingsResponse>;
  }

  /**
   * Updates the proactive log collection settings on a Data Box Edge/Data Box Gateway device.
   * @param deviceName The device name.
   * @param proactiveLogCollectionSettings The proactive log collection settings.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateDiagnosticProactiveLogCollectionSettings(deviceName: string, proactiveLogCollectionSettings: Models.DiagnosticProactiveLogCollectionSettings, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginUpdateDiagnosticProactiveLogCollectionSettings(deviceName,proactiveLogCollectionSettings,resourceGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Gets the diagnostic remote support settings of the specified Data Box Edge/Data Box Gateway
   * device.
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticSettingsGetDiagnosticRemoteSupportSettingsResponse>
   */
  getDiagnosticRemoteSupportSettings(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticSettingsGetDiagnosticRemoteSupportSettingsResponse>;
  /**
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name.
   * @param callback The callback
   */
  getDiagnosticRemoteSupportSettings(deviceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.DiagnosticRemoteSupportSettings>): void;
  /**
   * @param deviceName The device name.
   * @param resourceGroupName The resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDiagnosticRemoteSupportSettings(deviceName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticRemoteSupportSettings>): void;
  getDiagnosticRemoteSupportSettings(deviceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticRemoteSupportSettings>, callback?: msRest.ServiceCallback<Models.DiagnosticRemoteSupportSettings>): Promise<Models.DiagnosticSettingsGetDiagnosticRemoteSupportSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        resourceGroupName,
        options
      },
      getDiagnosticRemoteSupportSettingsOperationSpec,
      callback) as Promise<Models.DiagnosticSettingsGetDiagnosticRemoteSupportSettingsResponse>;
  }

  /**
   * Updates the diagnostic remote support settings on a Data Box Edge/Data Box Gateway device.
   * @param deviceName The device name.
   * @param diagnosticRemoteSupportSettings The diagnostic remote support settings.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateDiagnosticRemoteSupportSettings(deviceName: string, diagnosticRemoteSupportSettings: Models.DiagnosticRemoteSupportSettings, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginUpdateDiagnosticRemoteSupportSettings(deviceName,diagnosticRemoteSupportSettings,resourceGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Updates the proactive log collection settings on a Data Box Edge/Data Box Gateway device.
   * @param deviceName The device name.
   * @param proactiveLogCollectionSettings The proactive log collection settings.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdateDiagnosticProactiveLogCollectionSettings(deviceName: string, proactiveLogCollectionSettings: Models.DiagnosticProactiveLogCollectionSettings, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deviceName,
        proactiveLogCollectionSettings,
        resourceGroupName,
        options
      },
      beginUpdateDiagnosticProactiveLogCollectionSettingsOperationSpec,
      options);
  }

  /**
   * Updates the diagnostic remote support settings on a Data Box Edge/Data Box Gateway device.
   * @param deviceName The device name.
   * @param diagnosticRemoteSupportSettings The diagnostic remote support settings.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdateDiagnosticRemoteSupportSettings(deviceName: string, diagnosticRemoteSupportSettings: Models.DiagnosticRemoteSupportSettings, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deviceName,
        diagnosticRemoteSupportSettings,
        resourceGroupName,
        options
      },
      beginUpdateDiagnosticRemoteSupportSettingsOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getDiagnosticProactiveLogCollectionSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/diagnosticProactiveLogCollectionSettings/default",
  urlParameters: [
    Parameters.deviceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticProactiveLogCollectionSettings
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getDiagnosticRemoteSupportSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/diagnosticRemoteSupportSettings/default",
  urlParameters: [
    Parameters.deviceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticRemoteSupportSettings
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateDiagnosticProactiveLogCollectionSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/diagnosticProactiveLogCollectionSettings/default",
  urlParameters: [
    Parameters.deviceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "proactiveLogCollectionSettings",
    mapper: {
      ...Mappers.DiagnosticProactiveLogCollectionSettings,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateDiagnosticRemoteSupportSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/diagnosticRemoteSupportSettings/default",
  urlParameters: [
    Parameters.deviceName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "diagnosticRemoteSupportSettings",
    mapper: {
      ...Mappers.DiagnosticRemoteSupportSettings,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
