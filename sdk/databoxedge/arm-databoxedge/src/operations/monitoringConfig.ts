/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/monitoringConfigMappers";
import * as Parameters from "../models/parameters";
import { DataBoxEdgeManagementClientContext } from "../dataBoxEdgeManagementClientContext";

/** Class representing a MonitoringConfig. */
export class MonitoringConfig {
  private readonly client: DataBoxEdgeManagementClientContext;

  /**
   * Create a MonitoringConfig.
   * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataBoxEdgeManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Lists metric configurations in a role.
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitoringConfigListResponse>
   */
  list(deviceName: string, roleName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitoringConfigListResponse>;
  /**
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param resourceGroupName The resource group name.
   * @param callback The callback
   */
  list(deviceName: string, roleName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.MonitoringMetricConfigurationList>): void;
  /**
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param resourceGroupName The resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(deviceName: string, roleName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MonitoringMetricConfigurationList>): void;
  list(deviceName: string, roleName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MonitoringMetricConfigurationList>, callback?: msRest.ServiceCallback<Models.MonitoringMetricConfigurationList>): Promise<Models.MonitoringConfigListResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        roleName,
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.MonitoringConfigListResponse>;
  }

  /**
   * @summary Gets a  metric configuration of a role.
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitoringConfigGetResponse>
   */
  get(deviceName: string, roleName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitoringConfigGetResponse>;
  /**
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param resourceGroupName The resource group name.
   * @param callback The callback
   */
  get(deviceName: string, roleName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.MonitoringMetricConfiguration>): void;
  /**
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param resourceGroupName The resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(deviceName: string, roleName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MonitoringMetricConfiguration>): void;
  get(deviceName: string, roleName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MonitoringMetricConfiguration>, callback?: msRest.ServiceCallback<Models.MonitoringMetricConfiguration>): Promise<Models.MonitoringConfigGetResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        roleName,
        resourceGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.MonitoringConfigGetResponse>;
  }

  /**
   * @summary Creates a new metric configuration or updates an existing one for a role.
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param monitoringMetricConfiguration The metric configuration.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitoringConfigCreateOrUpdateResponse>
   */
  createOrUpdate(deviceName: string, roleName: string, monitoringMetricConfiguration: Models.MonitoringMetricConfiguration, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitoringConfigCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(deviceName,roleName,monitoringMetricConfiguration,resourceGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.MonitoringConfigCreateOrUpdateResponse>;
  }

  /**
   * @summary deletes a new metric configuration for a role.
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(deviceName: string, roleName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(deviceName,roleName,resourceGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * @summary Creates a new metric configuration or updates an existing one for a role.
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param monitoringMetricConfiguration The metric configuration.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(deviceName: string, roleName: string, monitoringMetricConfiguration: Models.MonitoringMetricConfiguration, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deviceName,
        roleName,
        monitoringMetricConfiguration,
        resourceGroupName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * @summary deletes a new metric configuration for a role.
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(deviceName: string, roleName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deviceName,
        roleName,
        resourceGroupName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * @summary Lists metric configurations in a role.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitoringConfigListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitoringConfigListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.MonitoringMetricConfigurationList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MonitoringMetricConfigurationList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MonitoringMetricConfigurationList>, callback?: msRest.ServiceCallback<Models.MonitoringMetricConfigurationList>): Promise<Models.MonitoringConfigListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.MonitoringConfigListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{roleName}/monitoringConfig",
  urlParameters: [
    Parameters.deviceName,
    Parameters.roleName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringMetricConfigurationList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{roleName}/monitoringConfig/default",
  urlParameters: [
    Parameters.deviceName,
    Parameters.roleName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringMetricConfiguration
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{roleName}/monitoringConfig/default",
  urlParameters: [
    Parameters.deviceName,
    Parameters.roleName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "monitoringMetricConfiguration",
    mapper: {
      ...Mappers.MonitoringMetricConfiguration,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringMetricConfiguration
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{roleName}/monitoringConfig/default",
  urlParameters: [
    Parameters.deviceName,
    Parameters.roleName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MonitoringMetricConfigurationList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
