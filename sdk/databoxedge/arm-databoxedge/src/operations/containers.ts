/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/containersMappers";
import * as Parameters from "../models/parameters";
import { DataBoxEdgeManagementClientContext } from "../dataBoxEdgeManagementClientContext";

/** Class representing a Containers. */
export class Containers {
  private readonly client: DataBoxEdgeManagementClientContext;

  /**
   * Create a Containers.
   * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataBoxEdgeManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Lists all the containers of a storage Account in a Data Box Edge/Data Box Gateway
   * device.
   * @param deviceName The device name.
   * @param storageAccountName The storage Account name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ContainersListByStorageAccountResponse>
   */
  listByStorageAccount(deviceName: string, storageAccountName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ContainersListByStorageAccountResponse>;
  /**
   * @param deviceName The device name.
   * @param storageAccountName The storage Account name.
   * @param resourceGroupName The resource group name.
   * @param callback The callback
   */
  listByStorageAccount(deviceName: string, storageAccountName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.ContainerList>): void;
  /**
   * @param deviceName The device name.
   * @param storageAccountName The storage Account name.
   * @param resourceGroupName The resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByStorageAccount(deviceName: string, storageAccountName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContainerList>): void;
  listByStorageAccount(deviceName: string, storageAccountName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ContainerList>, callback?: msRest.ServiceCallback<Models.ContainerList>): Promise<Models.ContainersListByStorageAccountResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        storageAccountName,
        resourceGroupName,
        options
      },
      listByStorageAccountOperationSpec,
      callback) as Promise<Models.ContainersListByStorageAccountResponse>;
  }

  /**
   * @summary Gets a container by name.
   * @param deviceName The device name.
   * @param storageAccountName The Storage Account Name
   * @param containerName The container Name
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ContainersGetResponse>
   */
  get(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ContainersGetResponse>;
  /**
   * @param deviceName The device name.
   * @param storageAccountName The Storage Account Name
   * @param containerName The container Name
   * @param resourceGroupName The resource group name.
   * @param callback The callback
   */
  get(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.Container>): void;
  /**
   * @param deviceName The device name.
   * @param storageAccountName The Storage Account Name
   * @param containerName The container Name
   * @param resourceGroupName The resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Container>): void;
  get(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Container>, callback?: msRest.ServiceCallback<Models.Container>): Promise<Models.ContainersGetResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        storageAccountName,
        containerName,
        resourceGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ContainersGetResponse>;
  }

  /**
   * @summary Creates a new container or updates an existing container on the device.
   * @param deviceName The device name.
   * @param storageAccountName The Storage Account Name
   * @param containerName The container name.
   * @param container The container properties.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ContainersCreateOrUpdateResponse>
   */
  createOrUpdate(deviceName: string, storageAccountName: string, containerName: string, container: Models.Container, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ContainersCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(deviceName,storageAccountName,containerName,container,resourceGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ContainersCreateOrUpdateResponse>;
  }

  /**
   * Deletes the container on the Data Box Edge/Data Box Gateway device.
   * @param deviceName The device name.
   * @param storageAccountName The Storage Account Name
   * @param containerName The container name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(deviceName,storageAccountName,containerName,resourceGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * @summary Refreshes the container metadata with the data from the cloud.
   * @param deviceName The device name.
   * @param storageAccountName The Storage Account Name
   * @param containerName The container name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  refresh(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRefresh(deviceName,storageAccountName,containerName,resourceGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * @summary Creates a new container or updates an existing container on the device.
   * @param deviceName The device name.
   * @param storageAccountName The Storage Account Name
   * @param containerName The container name.
   * @param container The container properties.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(deviceName: string, storageAccountName: string, containerName: string, container: Models.Container, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deviceName,
        storageAccountName,
        containerName,
        container,
        resourceGroupName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes the container on the Data Box Edge/Data Box Gateway device.
   * @param deviceName The device name.
   * @param storageAccountName The Storage Account Name
   * @param containerName The container name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deviceName,
        storageAccountName,
        containerName,
        resourceGroupName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * @summary Refreshes the container metadata with the data from the cloud.
   * @param deviceName The device name.
   * @param storageAccountName The Storage Account Name
   * @param containerName The container name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRefresh(deviceName: string, storageAccountName: string, containerName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deviceName,
        storageAccountName,
        containerName,
        resourceGroupName,
        options
      },
      beginRefreshOperationSpec,
      options);
  }

  /**
   * @summary Lists all the containers of a storage Account in a Data Box Edge/Data Box Gateway
   * device.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ContainersListByStorageAccountNextResponse>
   */
  listByStorageAccountNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ContainersListByStorageAccountNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByStorageAccountNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ContainerList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByStorageAccountNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContainerList>): void;
  listByStorageAccountNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ContainerList>, callback?: msRest.ServiceCallback<Models.ContainerList>): Promise<Models.ContainersListByStorageAccountNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByStorageAccountNextOperationSpec,
      callback) as Promise<Models.ContainersListByStorageAccountNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByStorageAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers",
  urlParameters: [
    Parameters.deviceName,
    Parameters.storageAccountName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContainerList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}",
  urlParameters: [
    Parameters.deviceName,
    Parameters.storageAccountName,
    Parameters.containerName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Container
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}",
  urlParameters: [
    Parameters.deviceName,
    Parameters.storageAccountName,
    Parameters.containerName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "container",
    mapper: {
      ...Mappers.Container,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Container
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}",
  urlParameters: [
    Parameters.deviceName,
    Parameters.storageAccountName,
    Parameters.containerName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRefreshOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}/refresh",
  urlParameters: [
    Parameters.deviceName,
    Parameters.storageAccountName,
    Parameters.containerName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByStorageAccountNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContainerList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
