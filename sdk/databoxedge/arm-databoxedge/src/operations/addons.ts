/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/addonsMappers";
import * as Parameters from "../models/parameters";
import { DataBoxEdgeManagementClientContext } from "../dataBoxEdgeManagementClientContext";

/** Class representing a Addons. */
export class Addons {
  private readonly client: DataBoxEdgeManagementClientContext;

  /**
   * Create a Addons.
   * @param {DataBoxEdgeManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataBoxEdgeManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all the addons configured in the role.
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.AddonsListByRoleResponse>
   */
  listByRole(deviceName: string, roleName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.AddonsListByRoleResponse>;
  /**
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param resourceGroupName The resource group name.
   * @param callback The callback
   */
  listByRole(deviceName: string, roleName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.AddonList>): void;
  /**
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param resourceGroupName The resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByRole(deviceName: string, roleName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AddonList>): void;
  listByRole(deviceName: string, roleName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AddonList>, callback?: msRest.ServiceCallback<Models.AddonList>): Promise<Models.AddonsListByRoleResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        roleName,
        resourceGroupName,
        options
      },
      listByRoleOperationSpec,
      callback) as Promise<Models.AddonsListByRoleResponse>;
  }

  /**
   * Gets a specific addon by name.
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param addonName The addon name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.AddonsGetResponse>
   */
  get(deviceName: string, roleName: string, addonName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.AddonsGetResponse>;
  /**
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param addonName The addon name.
   * @param resourceGroupName The resource group name.
   * @param callback The callback
   */
  get(deviceName: string, roleName: string, addonName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.AddonUnion>): void;
  /**
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param addonName The addon name.
   * @param resourceGroupName The resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(deviceName: string, roleName: string, addonName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AddonUnion>): void;
  get(deviceName: string, roleName: string, addonName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AddonUnion>, callback?: msRest.ServiceCallback<Models.AddonUnion>): Promise<Models.AddonsGetResponse> {
    return this.client.sendOperationRequest(
      {
        deviceName,
        roleName,
        addonName,
        resourceGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.AddonsGetResponse>;
  }

  /**
   * Create or update a addon.
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param addonName The addon name.
   * @param addon The addon properties.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.AddonsCreateOrUpdateResponse>
   */
  createOrUpdate(deviceName: string, roleName: string, addonName: string, addon: Models.AddonUnion, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.AddonsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(deviceName,roleName,addonName,addon,resourceGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.AddonsCreateOrUpdateResponse>;
  }

  /**
   * Deletes the addon on the device.
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param addonName The addon name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(deviceName: string, roleName: string, addonName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(deviceName,roleName,addonName,resourceGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Create or update a addon.
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param addonName The addon name.
   * @param addon The addon properties.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(deviceName: string, roleName: string, addonName: string, addon: Models.AddonUnion, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deviceName,
        roleName,
        addonName,
        addon,
        resourceGroupName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes the addon on the device.
   * @param deviceName The device name.
   * @param roleName The role name.
   * @param addonName The addon name.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(deviceName: string, roleName: string, addonName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        deviceName,
        roleName,
        addonName,
        resourceGroupName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Lists all the addons configured in the role.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AddonsListByRoleNextResponse>
   */
  listByRoleNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AddonsListByRoleNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByRoleNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AddonList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByRoleNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AddonList>): void;
  listByRoleNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AddonList>, callback?: msRest.ServiceCallback<Models.AddonList>): Promise<Models.AddonsListByRoleNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByRoleNextOperationSpec,
      callback) as Promise<Models.AddonsListByRoleNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByRoleOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{roleName}/addons",
  urlParameters: [
    Parameters.deviceName,
    Parameters.roleName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AddonList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{roleName}/addons/{addonName}",
  urlParameters: [
    Parameters.deviceName,
    Parameters.roleName,
    Parameters.addonName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Addon
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{roleName}/addons/{addonName}",
  urlParameters: [
    Parameters.deviceName,
    Parameters.roleName,
    Parameters.addonName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "addon",
    mapper: {
      ...Mappers.Addon,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Addon
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{roleName}/addons/{addonName}",
  urlParameters: [
    Parameters.deviceName,
    Parameters.roleName,
    Parameters.addonName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByRoleNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AddonList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
