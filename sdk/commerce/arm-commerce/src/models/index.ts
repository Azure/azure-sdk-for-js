/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Key-value pairs of instance details in the legacy format.
 */
export interface InfoField {
  /**
   * Identifies the name of the instance provisioned by the user.
   */
  project?: string;
}

/**
 * Describes the usageAggregation.
 */
export interface UsageAggregation {
  /**
   * Unique Id for the usage aggregate.
   */
  id?: string;
  /**
   * Name of the usage aggregate.
   */
  name?: string;
  /**
   * Type of the resource being returned.
   */
  type?: string;
  /**
   * The subscription identifier for the Azure user.
   */
  subscriptionId?: string;
  /**
   * Unique ID for the resource that was consumed (aka ResourceID).
   */
  meterId?: string;
  /**
   * UTC start time for the usage bucket to which this usage aggregate belongs.
   */
  usageStartTime?: Date;
  /**
   * UTC end time for the usage bucket to which this usage aggregate belongs.
   */
  usageEndTime?: Date;
  /**
   * The amount of the resource consumption that occurred in this time frame.
   */
  quantity?: number;
  /**
   * The unit in which the usage for this resource is being counted, e.g. Hours, GB.
   */
  unit?: string;
  /**
   * Friendly name of the resource being consumed.
   */
  meterName?: string;
  /**
   * Category of the consumed resource.
   */
  meterCategory?: string;
  /**
   * Sub-category of the consumed resource.
   */
  meterSubCategory?: string;
  /**
   * Region of the meterId used for billing purposes
   */
  meterRegion?: string;
  /**
   * Key-value pairs of instance details (legacy format).
   */
  infoFields?: InfoField;
  /**
   * Key-value pairs of instance details represented as a string.
   */
  instanceData?: string;
}

/**
 * Parameters that are used in the odata $filter query parameter for providing RateCard
 * information.
 */
export interface RateCardQueryParameters {
  /**
   * The Offer ID parameter consists of the 'MS-AZR-' prefix, plus the Offer ID number (e.g.,
   * MS-AZR-0026P). See https://azure.microsoft.com/en-us/support/legal/offer-details/ for more
   * information on the list of available Offer IDs, country/region availability, and billing
   * currency.
   */
  offerDurableId: string;
  /**
   * The currency in which the rates need to be provided.
   */
  currency: string;
  /**
   * The culture in which the resource metadata needs to be localized.
   */
  locale: string;
  /**
   * 2 letter ISO code where the offer was purchased.
   */
  regionInfo: string;
}

/**
 * Contains the possible cases for OfferTermInfo.
 */
export type OfferTermInfoUnion = OfferTermInfo | MonetaryCredit | MonetaryCommitment | RecurringCharge;

/**
 * Describes the offer term.
 */
export interface OfferTermInfo {
  /**
   * Polymorphic Discriminator
   */
  name: "OfferTermInfo";
  /**
   * Indicates the date from which the offer term is effective.
   */
  effectiveDate?: Date;
}

/**
 * Detailed information about the meter.
 */
export interface MeterInfo {
  /**
   * The unique identifier of the resource.
   */
  meterId?: string;
  /**
   * The name of the meter, within the given meter category
   */
  meterName?: string;
  /**
   * The category of the meter, e.g., 'Cloud services', 'Networking', etc..
   */
  meterCategory?: string;
  /**
   * The subcategory of the meter, e.g., 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
   */
  meterSubCategory?: string;
  /**
   * The unit in which the meter consumption is charged, e.g., 'Hours', 'GB', etc.
   */
  unit?: string;
  /**
   * Provides additional meter data. 'Third Party' indicates a meter with no discount. Blanks
   * indicate First Party.
   */
  meterTags?: string[];
  /**
   * The region in which the Azure service is available.
   */
  meterRegion?: string;
  /**
   * The list of key/value pairs for the meter rates, in the format 'key':'value' where key = the
   * meter quantity, and value = the corresponding price
   */
  meterRates?: { [propertyName: string]: number };
  /**
   * Indicates the date from which the meter rate is effective.
   */
  effectiveDate?: Date;
  /**
   * The resource quantity that is included in the offer at no cost. Consumption beyond this
   * quantity will be charged.
   */
  includedQuantity?: number;
}

/**
 * Price and Metadata information for resources
 */
export interface ResourceRateCardInfo {
  /**
   * The currency in which the rates are provided.
   */
  currency?: string;
  /**
   * The culture in which the resource information is localized.
   */
  locale?: string;
  /**
   * All rates are pretax, so this will always be returned as 'false'.
   */
  isTaxIncluded?: boolean;
  /**
   * A list of offer terms.
   */
  offerTerms?: OfferTermInfoUnion[];
  /**
   * A list of meters.
   */
  meters?: MeterInfo[];
}

/**
 * Indicates that this is a monetary credit offer.
 */
export interface MonetaryCredit {
  /**
   * Polymorphic Discriminator
   */
  name: "Monetary Credit";
  /**
   * Indicates the date from which the offer term is effective.
   */
  effectiveDate?: Date;
  /**
   * The amount of credit provided under the terms of the given offer level.
   */
  credit?: number;
  /**
   * An array of meter ids that are excluded from the given offer terms.
   */
  excludedMeterIds?: string[];
}

/**
 * Indicates that a monetary commitment is required for this offer
 */
export interface MonetaryCommitment {
  /**
   * Polymorphic Discriminator
   */
  name: "Monetary Commitment";
  /**
   * Indicates the date from which the offer term is effective.
   */
  effectiveDate?: Date;
  /**
   * The list of key/value pairs for the tiered meter rates, in the format 'key':'value' where key
   * = price, and value = the corresponding discount percentage. This field is used only by offer
   * terms of type 'Monetary Commitment'.
   */
  tieredDiscount?: { [propertyName: string]: number };
  /**
   * An array of meter ids that are excluded from the given offer terms.
   */
  excludedMeterIds?: string[];
}

/**
 * Indicates a recurring charge is present for this offer.
 */
export interface RecurringCharge {
  /**
   * Polymorphic Discriminator
   */
  name: "Recurring Charge";
  /**
   * Indicates the date from which the offer term is effective.
   */
  effectiveDate?: Date;
  /**
   * The amount of recurring charge as per the offer term.
   */
  recurringCharge?: number;
}

/**
 * Describes the format of Error response.
 */
export interface ErrorResponse {
  /**
   * Error code
   */
  code?: string;
  /**
   * Error message indicating why the operation failed.
   */
  message?: string;
}

/**
 * Optional Parameters.
 */
export interface UsageAggregatesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * `True` returns usage data in instance-level detail, `false` causes server-side aggregation
   * with fewer details. For example, if you have 3 website instances, by default you will get 3
   * line items for website consumption. If you specify showDetails = false, the data will be
   * aggregated as a single line item for website consumption within the time period (for the given
   * subscriptionId, meterId, usageStartTime and usageEndTime).
   */
  showDetails?: boolean;
  /**
   * `Daily` (default) returns the data in daily granularity, `Hourly` returns the data in hourly
   * granularity. Possible values include: 'Daily', 'Hourly'. Default value: 'Daily'.
   */
  aggregationGranularity?: AggregationGranularity;
  /**
   * Used when a continuation token string is provided in the response body of the previous call,
   * enabling paging through a large result set. If not present, the data is retrieved from the
   * beginning of the day/hour (based on the granularity) passed in.
   */
  continuationToken?: string;
}

/**
 * An interface representing UsageManagementClientOptions.
 */
export interface UsageManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * The Get UsageAggregates operation response.
 * @extends Array<UsageAggregation>
 */
export interface UsageAggregationListResult extends Array<UsageAggregation> {
  /**
   * Gets or sets the link to the next set of results.
   */
  nextLink?: string;
}

/**
 * Defines values for AggregationGranularity.
 * Possible values include: 'Daily', 'Hourly'
 * @readonly
 * @enum {string}
 */
export type AggregationGranularity = 'Daily' | 'Hourly';

/**
 * Contains response data for the list operation.
 */
export type UsageAggregatesListResponse = UsageAggregationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsageAggregationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type UsageAggregatesListNextResponse = UsageAggregationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsageAggregationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RateCardGetResponse = ResourceRateCardInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceRateCardInfo;
    };
};
