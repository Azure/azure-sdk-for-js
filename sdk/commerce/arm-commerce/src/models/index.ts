/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type OfferTermInfoAutoGeneratedUnion =
  | OfferTermInfoAutoGenerated
  | MonetaryCredit
  | MonetaryCommitment
  | RecurringCharge;

/** The Get UsageAggregates operation response. */
export interface UsageAggregationListResult {
  /** Gets or sets details for the requested aggregation. */
  value?: UsageAggregation[];
  /** Gets or sets the link to the next set of results. */
  nextLink?: string;
}

/** Describes the usageAggregation. */
export interface UsageAggregation {
  /** Unique Id for the usage aggregate. */
  id?: string;
  /** Name of the usage aggregate. */
  name?: string;
  /** Type of the resource being returned. */
  type?: string;
  /** The subscription identifier for the Azure user. */
  subscriptionId?: string;
  /** Unique ID for the resource that was consumed (aka ResourceID). */
  meterId?: string;
  /** UTC start time for the usage bucket to which this usage aggregate belongs. */
  usageStartTime?: Date;
  /** UTC end time for the usage bucket to which this usage aggregate belongs. */
  usageEndTime?: Date;
  /** The amount of the resource consumption that occurred in this time frame. */
  quantity?: number;
  /** The unit in which the usage for this resource is being counted, e.g. Hours, GB. */
  unit?: string;
  /** Friendly name of the resource being consumed. */
  meterName?: string;
  /** Category of the consumed resource. */
  meterCategory?: string;
  /** Sub-category of the consumed resource. */
  meterSubCategory?: string;
  /** Region of the meterId used for billing purposes */
  meterRegion?: string;
  /** Key-value pairs of instance details (legacy format). */
  infoFields?: InfoField;
  /** Key-value pairs of instance details represented as a string. */
  instanceData?: string;
}

/** Key-value pairs of instance details in the legacy format. */
export interface InfoField {
  /** Identifies the name of the instance provisioned by the user. */
  project?: string;
}

/** Describes the format of Error response. */
export interface ErrorResponse {
  /** Error code */
  code?: string;
  /** Error message indicating why the operation failed. */
  message?: string;
}

/** Price and Metadata information for resources */
export interface ResourceRateCardInfo {
  /** The currency in which the rates are provided. */
  currency?: string;
  /** The culture in which the resource information is localized. */
  locale?: string;
  /** All rates are pretax, so this will always be returned as 'false'. */
  isTaxIncluded?: boolean;
  /** A list of offer terms. */
  offerTerms?: OfferTermInfoAutoGeneratedUnion[];
  /** A list of meters. */
  meters?: MeterInfo[];
}

/** Describes the offer term. */
export interface OfferTermInfoAutoGenerated {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  name: "Monetary Credit" | "Monetary Commitment" | "Recurring Charge";
  /** Indicates the date from which the offer term is effective. */
  effectiveDate?: Date;
}

/** Detailed information about the meter. */
export interface MeterInfo {
  /** The unique identifier of the resource. */
  meterId?: string;
  /** The name of the meter, within the given meter category */
  meterName?: string;
  /** The category of the meter, e.g., 'Cloud services', 'Networking', etc.. */
  meterCategory?: string;
  /** The subcategory of the meter, e.g., 'A6 Cloud services', 'ExpressRoute (IXP)', etc.. */
  meterSubCategory?: string;
  /** The unit in which the meter consumption is charged, e.g., 'Hours', 'GB', etc. */
  unit?: string;
  /** Provides additional meter data. 'Third Party' indicates a meter with no discount. Blanks indicate First Party. */
  meterTags?: string[];
  /** The region in which the Azure service is available. */
  meterRegion?: string;
  /** The list of key/value pairs for the meter rates, in the format 'key':'value' where key = the meter quantity, and value = the corresponding price */
  meterRates?: { [propertyName: string]: number };
  /** Indicates the date from which the meter rate is effective. */
  effectiveDate?: Date;
  /** The resource quantity that is included in the offer at no cost. Consumption beyond this quantity will be charged. */
  includedQuantity?: number;
}

/** Parameters that are used in the odata $filter query parameter for providing RateCard information. */
export interface RateCardQueryParameters {
  /** The Offer ID parameter consists of the 'MS-AZR-' prefix, plus the Offer ID number (e.g., MS-AZR-0026P). See https://azure.microsoft.com/en-us/support/legal/offer-details/ for more information on the list of available Offer IDs, country/region availability, and billing currency. */
  offerDurableId: string;
  /** The currency in which the rates need to be provided. */
  currency: string;
  /** The culture in which the resource metadata needs to be localized. */
  locale: string;
  /** 2 letter ISO code where the offer was purchased. */
  regionInfo: string;
}

/** Indicates that this is a monetary credit offer. */
export interface MonetaryCredit extends OfferTermInfoAutoGenerated {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  name: "Monetary Credit";
  /** The amount of credit provided under the terms of the given offer level. */
  credit?: number;
  /** An array of meter ids that are excluded from the given offer terms. */
  excludedMeterIds?: string[];
}

/** Indicates that a monetary commitment is required for this offer */
export interface MonetaryCommitment extends OfferTermInfoAutoGenerated {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  name: "Monetary Commitment";
  /** The list of key/value pairs for the tiered meter rates, in the format 'key':'value' where key = price, and value = the corresponding discount percentage. This field is used only by offer terms of type 'Monetary Commitment'. */
  tieredDiscount?: { [propertyName: string]: number };
  /** An array of meter ids that are excluded from the given offer terms. */
  excludedMeterIds?: string[];
}

/** Indicates a recurring charge is present for this offer. */
export interface RecurringCharge extends OfferTermInfoAutoGenerated {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  name: "Recurring Charge";
  /** The amount of recurring charge as per the offer term. */
  recurringCharge?: number;
}

/** Defines values for AggregationGranularity. */
export type AggregationGranularity = "Daily" | "Hourly";
/** Defines values for OfferTermInfo. */
export type OfferTermInfo =
  | "Recurring Charge"
  | "Monetary Commitment"
  | "Monetary Credit";

/** Optional parameters. */
export interface UsageAggregatesListOptionalParams
  extends coreClient.OperationOptions {
  /** `True` returns usage data in instance-level detail, `false` causes server-side aggregation with fewer details. For example, if you have 3 website instances, by default you will get 3 line items for website consumption. If you specify showDetails = false, the data will be aggregated as a single line item for website consumption within the time period (for the given subscriptionId, meterId, usageStartTime and usageEndTime). */
  showDetails?: boolean;
  /** `Daily` (default) returns the data in daily granularity, `Hourly` returns the data in hourly granularity. */
  aggregationGranularity?: AggregationGranularity;
  /** Used when a continuation token string is provided in the response body of the previous call, enabling paging through a large result set. If not present, the data is retrieved from the beginning of the day/hour (based on the granularity) passed in. */
  continuationToken?: string;
}

/** Contains response data for the list operation. */
export type UsageAggregatesListResponse = UsageAggregationListResult;

/** Optional parameters. */
export interface UsageAggregatesListNextOptionalParams
  extends coreClient.OperationOptions {
  /** `True` returns usage data in instance-level detail, `false` causes server-side aggregation with fewer details. For example, if you have 3 website instances, by default you will get 3 line items for website consumption. If you specify showDetails = false, the data will be aggregated as a single line item for website consumption within the time period (for the given subscriptionId, meterId, usageStartTime and usageEndTime). */
  showDetails?: boolean;
  /** `Daily` (default) returns the data in daily granularity, `Hourly` returns the data in hourly granularity. */
  aggregationGranularity?: AggregationGranularity;
  /** Used when a continuation token string is provided in the response body of the previous call, enabling paging through a large result set. If not present, the data is retrieved from the beginning of the day/hour (based on the granularity) passed in. */
  continuationToken?: string;
}

/** Contains response data for the listNext operation. */
export type UsageAggregatesListNextResponse = UsageAggregationListResult;

/** Optional parameters. */
export interface RateCardGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RateCardGetResponse = ResourceRateCardInfo;

/** Optional parameters. */
export interface UsageManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
