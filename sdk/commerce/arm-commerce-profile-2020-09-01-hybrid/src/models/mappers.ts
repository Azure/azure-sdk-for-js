/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const UsageAggregationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageAggregationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UsageAggregation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageAggregation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageAggregation",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "properties.subscriptionId",
        type: {
          name: "Uuid"
        }
      },
      meterId: {
        serializedName: "properties.meterId",
        type: {
          name: "String"
        }
      },
      usageStartTime: {
        serializedName: "properties.usageStartTime",
        type: {
          name: "DateTime"
        }
      },
      usageEndTime: {
        serializedName: "properties.usageEndTime",
        type: {
          name: "DateTime"
        }
      },
      quantity: {
        serializedName: "properties.quantity",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "properties.unit",
        type: {
          name: "String"
        }
      },
      meterName: {
        serializedName: "properties.meterName",
        type: {
          name: "String"
        }
      },
      meterCategory: {
        serializedName: "properties.meterCategory",
        type: {
          name: "String"
        }
      },
      meterSubCategory: {
        serializedName: "properties.meterSubCategory",
        type: {
          name: "String"
        }
      },
      meterRegion: {
        serializedName: "properties.meterRegion",
        type: {
          name: "String"
        }
      },
      infoFields: {
        serializedName: "properties.infoFields",
        type: {
          name: "Composite",
          className: "InfoField"
        }
      },
      instanceData: {
        serializedName: "properties.instanceData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InfoField: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InfoField",
    modelProperties: {
      project: {
        serializedName: "project",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceRateCardInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceRateCardInfo",
    modelProperties: {
      currency: {
        serializedName: "Currency",
        type: {
          name: "String"
        }
      },
      locale: {
        serializedName: "Locale",
        type: {
          name: "String"
        }
      },
      isTaxIncluded: {
        serializedName: "IsTaxIncluded",
        type: {
          name: "Boolean"
        }
      },
      offerTerms: {
        serializedName: "OfferTerms",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OfferTermInfoAutoGenerated"
            }
          }
        }
      },
      meters: {
        serializedName: "Meters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MeterInfo"
            }
          }
        }
      }
    }
  }
};

export const OfferTermInfoAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OfferTermInfoAutoGenerated",
    uberParent: "OfferTermInfoAutoGenerated",
    polymorphicDiscriminator: {
      serializedName: "Name",
      clientName: "name"
    },
    modelProperties: {
      name: {
        serializedName: "Name",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Recurring Charge",
            "Monetary Commitment",
            "Monetary Credit"
          ]
        }
      },
      effectiveDate: {
        serializedName: "EffectiveDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MeterInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MeterInfo",
    modelProperties: {
      meterId: {
        serializedName: "MeterId",
        type: {
          name: "Uuid"
        }
      },
      meterName: {
        serializedName: "MeterName",
        type: {
          name: "String"
        }
      },
      meterCategory: {
        serializedName: "MeterCategory",
        type: {
          name: "String"
        }
      },
      meterSubCategory: {
        serializedName: "MeterSubCategory",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "Unit",
        type: {
          name: "String"
        }
      },
      meterTags: {
        serializedName: "MeterTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      meterRegion: {
        serializedName: "MeterRegion",
        type: {
          name: "String"
        }
      },
      meterRates: {
        serializedName: "MeterRates",
        type: {
          name: "Dictionary",
          value: { type: { name: "Number" } }
        }
      },
      effectiveDate: {
        serializedName: "EffectiveDate",
        type: {
          name: "DateTime"
        }
      },
      includedQuantity: {
        serializedName: "IncludedQuantity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RateCardQueryParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RateCardQueryParameters",
    modelProperties: {
      offerDurableId: {
        constraints: {
          Pattern: new RegExp("^MS-AZR-\\d{4}P(-\\d{4}P)*$")
        },
        serializedName: "OfferDurableId",
        required: true,
        type: {
          name: "String"
        }
      },
      currency: {
        serializedName: "Currency",
        required: true,
        type: {
          name: "String"
        }
      },
      locale: {
        serializedName: "Locale",
        required: true,
        type: {
          name: "String"
        }
      },
      regionInfo: {
        serializedName: "RegionInfo",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MonetaryCredit: coreClient.CompositeMapper = {
  serializedName: "Monetary Credit",
  type: {
    name: "Composite",
    className: "MonetaryCredit",
    uberParent: "OfferTermInfoAutoGenerated",
    polymorphicDiscriminator:
      OfferTermInfoAutoGenerated.type.polymorphicDiscriminator,
    modelProperties: {
      ...OfferTermInfoAutoGenerated.type.modelProperties,
      credit: {
        serializedName: "Credit",
        type: {
          name: "Number"
        }
      },
      excludedMeterIds: {
        serializedName: "ExcludedMeterIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Uuid"
            }
          }
        }
      }
    }
  }
};

export const MonetaryCommitment: coreClient.CompositeMapper = {
  serializedName: "Monetary Commitment",
  type: {
    name: "Composite",
    className: "MonetaryCommitment",
    uberParent: "OfferTermInfoAutoGenerated",
    polymorphicDiscriminator:
      OfferTermInfoAutoGenerated.type.polymorphicDiscriminator,
    modelProperties: {
      ...OfferTermInfoAutoGenerated.type.modelProperties,
      tieredDiscount: {
        serializedName: "TieredDiscount",
        type: {
          name: "Dictionary",
          value: { type: { name: "Number" } }
        }
      },
      excludedMeterIds: {
        serializedName: "ExcludedMeterIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Uuid"
            }
          }
        }
      }
    }
  }
};

export const RecurringCharge: coreClient.CompositeMapper = {
  serializedName: "Recurring Charge",
  type: {
    name: "Composite",
    className: "RecurringCharge",
    uberParent: "OfferTermInfoAutoGenerated",
    polymorphicDiscriminator:
      OfferTermInfoAutoGenerated.type.polymorphicDiscriminator,
    modelProperties: {
      ...OfferTermInfoAutoGenerated.type.modelProperties,
      recurringCharge: {
        serializedName: "RecurringCharge",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export let discriminators = {
  OfferTermInfoAutoGenerated: OfferTermInfoAutoGenerated,
  "OfferTermInfoAutoGenerated.Monetary Credit": MonetaryCredit,
  "OfferTermInfoAutoGenerated.Monetary Commitment": MonetaryCommitment,
  "OfferTermInfoAutoGenerated.Recurring Charge": RecurringCharge
};
