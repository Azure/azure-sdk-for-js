/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/farmBeatsExtensionsMappers";
import * as Parameters from "../models/parameters";
import { AzureAgriFoodRPServiceContext } from "../azureAgriFoodRPServiceContext";

/** Class representing a FarmBeatsExtensions. */
export class FarmBeatsExtensions {
  private readonly client: AzureAgriFoodRPServiceContext;

  /**
   * Create a FarmBeatsExtensions.
   * @param {AzureAgriFoodRPServiceContext} client Reference to the service client.
   */
  constructor(client: AzureAgriFoodRPServiceContext) {
    this.client = client;
  }

  /**
   * Get list of farmBeats extension.
   * @param [options] The optional parameters
   * @returns Promise<Models.FarmBeatsExtensionsListResponse>
   */
  list(options?: Models.FarmBeatsExtensionsListOptionalParams): Promise<Models.FarmBeatsExtensionsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.FarmBeatsExtensionListResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.FarmBeatsExtensionsListOptionalParams, callback: msRest.ServiceCallback<Models.FarmBeatsExtensionListResponse>): void;
  list(options?: Models.FarmBeatsExtensionsListOptionalParams | msRest.ServiceCallback<Models.FarmBeatsExtensionListResponse>, callback?: msRest.ServiceCallback<Models.FarmBeatsExtensionListResponse>): Promise<Models.FarmBeatsExtensionsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.FarmBeatsExtensionsListResponse>;
  }

  /**
   * Get farmBeats extension.
   * @param farmBeatsExtensionId farmBeatsExtensionId to be queried.
   * @param [options] The optional parameters
   * @returns Promise<Models.FarmBeatsExtensionsGetResponse>
   */
  get(farmBeatsExtensionId: string, options?: msRest.RequestOptionsBase): Promise<Models.FarmBeatsExtensionsGetResponse>;
  /**
   * @param farmBeatsExtensionId farmBeatsExtensionId to be queried.
   * @param callback The callback
   */
  get(farmBeatsExtensionId: string, callback: msRest.ServiceCallback<Models.FarmBeatsExtension>): void;
  /**
   * @param farmBeatsExtensionId farmBeatsExtensionId to be queried.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(farmBeatsExtensionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FarmBeatsExtension>): void;
  get(farmBeatsExtensionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FarmBeatsExtension>, callback?: msRest.ServiceCallback<Models.FarmBeatsExtension>): Promise<Models.FarmBeatsExtensionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        farmBeatsExtensionId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.FarmBeatsExtensionsGetResponse>;
  }

  /**
   * Get list of farmBeats extension.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.FarmBeatsExtensionsListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.FarmBeatsExtensionsListNextOptionalParams): Promise<Models.FarmBeatsExtensionsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.FarmBeatsExtensionListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.FarmBeatsExtensionsListNextOptionalParams, callback: msRest.ServiceCallback<Models.FarmBeatsExtensionListResponse>): void;
  listNext(nextPageLink: string, options?: Models.FarmBeatsExtensionsListNextOptionalParams | msRest.ServiceCallback<Models.FarmBeatsExtensionListResponse>, callback?: msRest.ServiceCallback<Models.FarmBeatsExtensionListResponse>): Promise<Models.FarmBeatsExtensionsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.FarmBeatsExtensionsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions",
  queryParameters: [
    Parameters.farmBeatsExtensionIds,
    Parameters.farmBeatsExtensionNames,
    Parameters.extensionCategories,
    Parameters.publisherIds,
    Parameters.maxPageSize,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FarmBeatsExtensionListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions/{farmBeatsExtensionId}",
  urlParameters: [
    Parameters.farmBeatsExtensionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FarmBeatsExtension
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.farmBeatsExtensionIds,
    Parameters.farmBeatsExtensionNames,
    Parameters.extensionCategories,
    Parameters.publisherIds,
    Parameters.maxPageSize,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FarmBeatsExtensionListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
