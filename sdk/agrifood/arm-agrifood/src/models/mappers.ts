/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const CheckNameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CheckNameAvailabilityResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponse",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean",
        },
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const DataConnectorProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectorProperties",
    modelProperties: {
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "AuthCredentials",
        },
      },
    },
  },
};

export const AuthCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthCredentials",
    uberParent: "AuthCredentials",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind",
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const DataConnectorListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectorListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataConnector",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DataManagerForAgricultureExtensionListResponse: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DataManagerForAgricultureExtensionListResponse",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "DataManagerForAgricultureExtension",
              },
            },
          },
        },
        skipToken: {
          serializedName: "$skipToken",
          type: {
            name: "String",
          },
        },
        nextLink: {
          serializedName: "nextLink",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const DataManagerForAgricultureExtensionProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DataManagerForAgricultureExtensionProperties",
      modelProperties: {
        targetResourceType: {
          serializedName: "targetResourceType",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        farmBeatsExtensionId: {
          constraints: {
            Pattern: new RegExp("^[a-zA-Z]{3,50}[.][a-zA-Z]{3,100}$"),
            MaxLength: 100,
            MinLength: 2,
          },
          serializedName: "farmBeatsExtensionId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        farmBeatsExtensionName: {
          constraints: {
            MaxLength: 100,
            MinLength: 2,
          },
          serializedName: "farmBeatsExtensionName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        farmBeatsExtensionVersion: {
          constraints: {
            Pattern: new RegExp("^([1-9]|10).\\d$"),
            MaxLength: 100,
            MinLength: 2,
          },
          serializedName: "farmBeatsExtensionVersion",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        publisherId: {
          constraints: {
            MaxLength: 100,
            MinLength: 2,
          },
          serializedName: "publisherId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        description: {
          constraints: {
            MaxLength: 500,
            MinLength: 2,
          },
          serializedName: "description",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        extensionCategory: {
          constraints: {
            MaxLength: 100,
            MinLength: 2,
          },
          serializedName: "extensionCategory",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        extensionAuthLink: {
          serializedName: "extensionAuthLink",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        extensionApiDocsLink: {
          serializedName: "extensionApiDocsLink",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        detailedInformation: {
          serializedName: "detailedInformation",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "DetailedInformation",
              },
            },
          },
        },
      },
    },
  };

export const DetailedInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetailedInformation",
    modelProperties: {
      apiName: {
        serializedName: "apiName",
        type: {
          name: "String",
        },
      },
      apiDocsLink: {
        serializedName: "apiDocsLink",
        type: {
          name: "String",
        },
      },
      apiType: {
        serializedName: "apiType",
        type: {
          name: "String",
        },
      },
      customParameters: {
        serializedName: "customParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      platformParameters: {
        serializedName: "platformParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      apiDefaultInputParameters: {
        serializedName: "apiDefaultInputParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      unitsSupported: {
        serializedName: "unitsSupported",
        type: {
          name: "Composite",
          className: "UnitSystemsInfo",
        },
      },
      apiInputParameters: {
        serializedName: "apiInputParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const UnitSystemsInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnitSystemsInfo",
    modelProperties: {
      key: {
        constraints: {
          MaxLength: 100,
          MinLength: 1,
        },
        serializedName: "key",
        required: true,
        type: {
          name: "String",
        },
      },
      values: {
        serializedName: "values",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      type: {
        defaultValue: "SystemAssigned",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SensorIntegration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SensorIntegration",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningInfo: {
        serializedName: "provisioningInfo",
        type: {
          name: "Composite",
          className: "ErrorResponse",
        },
      },
    },
  },
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        type: {
          name: "String",
        },
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DataManagerForAgricultureUpdateRequestModel: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DataManagerForAgricultureUpdateRequestModel",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
        identity: {
          serializedName: "identity",
          type: {
            name: "Composite",
            className: "Identity",
          },
        },
        properties: {
          serializedName: "properties",
          type: {
            name: "Composite",
            className: "DataManagerForAgricultureUpdateProperties",
          },
        },
        tags: {
          serializedName: "tags",
          type: {
            name: "Dictionary",
            value: { type: { name: "String" } },
          },
        },
      },
    },
  };

export const DataManagerForAgricultureUpdateProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DataManagerForAgricultureUpdateProperties",
      modelProperties: {
        sensorIntegration: {
          serializedName: "sensorIntegration",
          type: {
            name: "Composite",
            className: "SensorIntegration",
          },
        },
        publicNetworkAccess: {
          serializedName: "publicNetworkAccess",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const DataManagerForAgricultureListResponse: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DataManagerForAgricultureListResponse",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "DataManagerForAgriculture",
              },
            },
          },
        },
        skipToken: {
          serializedName: "$skipToken",
          type: {
            name: "String",
          },
        },
        nextLink: {
          serializedName: "nextLink",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const ArmAsyncOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArmAsyncOperation",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ArmAsyncOperationError",
        },
      },
    },
  },
};

export const ArmAsyncOperationError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArmAsyncOperationError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ExtensionInstallationRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionInstallationRequest",
    modelProperties: {
      extensionVersion: {
        constraints: {
          MaxLength: 10,
          MinLength: 3,
        },
        serializedName: "extensionVersion",
        type: {
          name: "String",
        },
      },
      additionalApiProperties: {
        serializedName: "additionalApiProperties",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "ApiProperties" } },
        },
      },
    },
  },
};

export const ApiProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiProperties",
    modelProperties: {
      apiFreshnessTimeInMinutes: {
        constraints: {
          InclusiveMaximum: 10080,
          InclusiveMinimum: 0,
        },
        serializedName: "apiFreshnessTimeInMinutes",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ExtensionListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Extension",
            },
          },
        },
      },
      skipToken: {
        serializedName: "$skipToken",
        type: {
          name: "String",
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection",
            },
          },
        },
      },
    },
  },
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource",
            },
          },
        },
      },
    },
  },
};

export const SolutionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SolutionProperties",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      partnerId: {
        serializedName: "partnerId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      saasSubscriptionId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "saasSubscriptionId",
        required: true,
        type: {
          name: "String",
        },
      },
      saasSubscriptionName: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "saasSubscriptionName",
        required: true,
        type: {
          name: "String",
        },
      },
      marketplacePublisherId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "marketplacePublisherId",
        required: true,
        type: {
          name: "String",
        },
      },
      planId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "planId",
        required: true,
        type: {
          name: "String",
        },
      },
      roleAssignmentId: {
        serializedName: "roleAssignmentId",
        type: {
          name: "String",
        },
      },
      offerId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "offerId",
        required: true,
        type: {
          name: "String",
        },
      },
      termId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "termId",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SolutionListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SolutionListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Solution",
            },
          },
        },
      },
      skipToken: {
        serializedName: "$skipToken",
        type: {
          name: "String",
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DataManagerForAgricultureSolutionListResponse: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DataManagerForAgricultureSolutionListResponse",
      modelProperties: {
        value: {
          serializedName: "value",
          required: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "DataManagerForAgricultureSolution",
              },
            },
          },
        },
        skipToken: {
          serializedName: "$skipToken",
          type: {
            name: "String",
          },
        },
        nextLink: {
          serializedName: "nextLink",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const DataManagerForAgricultureSolutionProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DataManagerForAgricultureSolutionProperties",
      modelProperties: {
        partnerId: {
          serializedName: "partnerId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        partnerTenantId: {
          serializedName: "partnerTenantId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        dataAccessScopes: {
          serializedName: "dataAccessScopes",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String",
              },
            },
          },
        },
        marketplaceOfferDetails: {
          serializedName: "marketplaceOfferDetails",
          type: {
            name: "Composite",
            className: "MarketplaceOfferDetails",
          },
        },
        openApiSpecsDictionary: {
          serializedName: "openApiSpecsDictionary",
          readOnly: true,
          type: {
            name: "Dictionary",
            value: { type: { name: "any" } },
          },
        },
        accessFBApplicationId: {
          serializedName: "accessFBApplicationId",
          readOnly: true,
          type: {
            name: "Uuid",
          },
        },
        saaSApplicationId: {
          serializedName: "saaSApplicationId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        actionIds: {
          serializedName: "actionIds",
          readOnly: true,
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "String",
              },
            },
          },
        },
        roleId: {
          serializedName: "roleId",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        roleName: {
          serializedName: "roleName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
        accessFBApplicationName: {
          serializedName: "accessFBApplicationName",
          readOnly: true,
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const MarketplaceOfferDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplaceOfferDetails",
    modelProperties: {
      saasOfferId: {
        serializedName: "saasOfferId",
        type: {
          name: "String",
        },
      },
      publisherId: {
        serializedName: "publisherId",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const KeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyVaultUri: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "keyVaultUri",
        required: true,
        type: {
          name: "String",
        },
      },
      keyName: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "keyName",
        required: true,
        type: {
          name: "String",
        },
      },
      keyVersion: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "keyVersion",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ApiKeyAuthCredentials: coreClient.CompositeMapper = {
  serializedName: "ApiKeyAuthCredentials",
  type: {
    name: "Composite",
    className: "ApiKeyAuthCredentials",
    uberParent: "AuthCredentials",
    polymorphicDiscriminator: AuthCredentials.type.polymorphicDiscriminator,
    modelProperties: {
      ...AuthCredentials.type.modelProperties,
      apiKey: {
        serializedName: "apiKey",
        type: {
          name: "Composite",
          className: "KeyVaultProperties",
        },
      },
    },
  },
};

export const OAuthClientCredentials: coreClient.CompositeMapper = {
  serializedName: "OAuthClientCredentials",
  type: {
    name: "Composite",
    className: "OAuthClientCredentials",
    uberParent: "AuthCredentials",
    polymorphicDiscriminator: AuthCredentials.type.polymorphicDiscriminator,
    modelProperties: {
      ...AuthCredentials.type.modelProperties,
      clientId: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "clientId",
        required: true,
        type: {
          name: "String",
        },
      },
      clientSecret: {
        serializedName: "clientSecret",
        type: {
          name: "Composite",
          className: "KeyVaultProperties",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupIds: {
        serializedName: "properties.groupIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint",
        },
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
    },
  },
};

export const DataConnector: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnector",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataConnectorProperties",
        },
      },
      eTag: {
        serializedName: "eTag",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DataManagerForAgricultureExtension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataManagerForAgricultureExtension",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataManagerForAgricultureExtensionProperties",
        },
      },
    },
  },
};

export const Extension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Extension",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      eTag: {
        serializedName: "eTag",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      extensionId: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z]{3,50}[.][a-zA-Z]{3,100}$"),
        },
        serializedName: "properties.extensionId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      extensionCategory: {
        serializedName: "properties.extensionCategory",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      installedExtensionVersion: {
        constraints: {
          Pattern: new RegExp("^([1-9]|10).\\d$"),
        },
        serializedName: "properties.installedExtensionVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      extensionAuthLink: {
        serializedName: "properties.extensionAuthLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      extensionApiDocsLink: {
        serializedName: "properties.extensionApiDocsLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      additionalApiProperties: {
        serializedName: "properties.additionalApiProperties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "ApiProperties" } },
        },
      },
    },
  },
};

export const Solution: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Solution",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SolutionProperties",
        },
      },
      eTag: {
        serializedName: "eTag",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DataManagerForAgricultureSolution: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataManagerForAgricultureSolution",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataManagerForAgricultureSolutionProperties",
        },
      },
    },
  },
};

export const DataManagerForAgriculture: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataManagerForAgriculture",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity",
        },
      },
      instanceUri: {
        serializedName: "properties.instanceUri",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      sensorIntegration: {
        serializedName: "properties.sensorIntegration",
        type: {
          name: "Composite",
          className: "SensorIntegration",
        },
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String",
        },
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection",
            },
          },
        },
      },
    },
  },
};

export const DataManagerForAgricultureResourcesUpdateHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "DataManagerForAgricultureResourcesUpdateHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const PrivateEndpointConnectionsDeleteHeaders: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "PrivateEndpointConnectionsDeleteHeaders",
      modelProperties: {
        location: {
          serializedName: "location",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export let discriminators = {
  AuthCredentials: AuthCredentials,
  "AuthCredentials.ApiKeyAuthCredentials": ApiKeyAuthCredentials,
  "AuthCredentials.OAuthClientCredentials": OAuthClientCredentials,
};
