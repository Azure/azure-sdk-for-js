/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  BackupVaultResource as BackupVaultResourceMapper,
  PatchResourceRequestInput as PatchResourceRequestInputMapper,
  CheckNameAvailabilityRequest as CheckNameAvailabilityRequestMapper,
  FeatureValidationRequestBase as FeatureValidationRequestBaseMapper,
  BaseBackupPolicyResource as BaseBackupPolicyResourceMapper,
  BackupInstanceResource as BackupInstanceResourceMapper,
  TriggerBackupRequest as TriggerBackupRequestMapper,
  ValidateForBackupRequest as ValidateForBackupRequestMapper,
  AzureBackupRehydrationRequest as AzureBackupRehydrationRequestMapper,
  AzureBackupRestoreRequest as AzureBackupRestoreRequestMapper,
  SyncBackupInstanceRequest as SyncBackupInstanceRequestMapper,
  ValidateRestoreRequestObject as ValidateRestoreRequestObjectMapper,
  AzureBackupFindRestorableTimeRangesRequest as AzureBackupFindRestorableTimeRangesRequestMapper,
  ResourceGuardResource as ResourceGuardResourceMapper,
  PatchResourceGuardInput as PatchResourceGuardInputMapper,
  ResourceGuardProxyBaseResource as ResourceGuardProxyBaseResourceMapper,
  UnlockDeleteRequest as UnlockDeleteRequestMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-01-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vaultName: OperationURLParameter = {
  parameterPath: "vaultName",
  mapper: {
    serializedName: "vaultName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: BackupVaultResourceMapper
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: PatchResourceRequestInputMapper
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: CheckNameAvailabilityRequestMapper
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const operationId: OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: FeatureValidationRequestBaseMapper
};

export const backupPolicyName: OperationURLParameter = {
  parameterPath: "backupPolicyName",
  mapper: {
    serializedName: "backupPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: BaseBackupPolicyResourceMapper
};

export const backupInstanceName: OperationURLParameter = {
  parameterPath: "backupInstanceName",
  mapper: {
    serializedName: "backupInstanceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: BackupInstanceResourceMapper
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: TriggerBackupRequestMapper
};

export const parameters7: OperationParameter = {
  parameterPath: "parameters",
  mapper: ValidateForBackupRequestMapper
};

export const parameters8: OperationParameter = {
  parameterPath: "parameters",
  mapper: AzureBackupRehydrationRequestMapper
};

export const parameters9: OperationParameter = {
  parameterPath: "parameters",
  mapper: AzureBackupRestoreRequestMapper
};

export const parameters10: OperationParameter = {
  parameterPath: "parameters",
  mapper: SyncBackupInstanceRequestMapper
};

export const parameters11: OperationParameter = {
  parameterPath: "parameters",
  mapper: ValidateRestoreRequestObjectMapper
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const skipToken: OperationQueryParameter = {
  parameterPath: ["options", "skipToken"],
  mapper: {
    serializedName: "$skipToken",
    type: {
      name: "String"
    }
  }
};

export const recoveryPointId: OperationURLParameter = {
  parameterPath: "recoveryPointId",
  mapper: {
    serializedName: "recoveryPointId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobId: OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters12: OperationParameter = {
  parameterPath: "parameters",
  mapper: AzureBackupFindRestorableTimeRangesRequestMapper
};

export const parameters13: OperationParameter = {
  parameterPath: "parameters",
  mapper: ResourceGuardResourceMapper
};

export const resourceGuardsName: OperationURLParameter = {
  parameterPath: "resourceGuardsName",
  mapper: {
    serializedName: "resourceGuardsName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters14: OperationParameter = {
  parameterPath: "parameters",
  mapper: PatchResourceGuardInputMapper
};

export const requestName: OperationURLParameter = {
  parameterPath: "requestName",
  mapper: {
    serializedName: "requestName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGuardProxyName: OperationURLParameter = {
  parameterPath: "resourceGuardProxyName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9]*$")
    },
    serializedName: "resourceGuardProxyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters15: OperationParameter = {
  parameterPath: "parameters",
  mapper: ResourceGuardProxyBaseResourceMapper
};

export const parameters16: OperationParameter = {
  parameterPath: "parameters",
  mapper: UnlockDeleteRequestMapper
};
