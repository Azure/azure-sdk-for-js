/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const BackupVault: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupVault",
    modelProperties: {
      monitoringSettings: {
        serializedName: "monitoringSettings",
        type: {
          name: "Composite",
          className: "MonitoringSettings"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceMoveState: {
        serializedName: "resourceMoveState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceMoveDetails: {
        serializedName: "resourceMoveDetails",
        type: {
          name: "Composite",
          className: "ResourceMoveDetails"
        }
      },
      securitySettings: {
        serializedName: "securitySettings",
        type: {
          name: "Composite",
          className: "SecuritySettings"
        }
      },
      storageSettings: {
        serializedName: "storageSettings",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageSetting"
            }
          }
        }
      },
      isVaultProtectedByResourceGuard: {
        serializedName: "isVaultProtectedByResourceGuard",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      featureSettings: {
        serializedName: "featureSettings",
        type: {
          name: "Composite",
          className: "FeatureSettings"
        }
      },
      secureScore: {
        serializedName: "secureScore",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MonitoringSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MonitoringSettings",
    modelProperties: {
      azureMonitorAlertSettings: {
        serializedName: "azureMonitorAlertSettings",
        type: {
          name: "Composite",
          className: "AzureMonitorAlertSettings"
        }
      }
    }
  }
};

export const AzureMonitorAlertSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureMonitorAlertSettings",
    modelProperties: {
      alertsForAllJobFailures: {
        serializedName: "alertsForAllJobFailures",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMoveDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceMoveDetails",
    modelProperties: {
      operationId: {
        serializedName: "operationId",
        type: {
          name: "String"
        }
      },
      startTimeUtc: {
        serializedName: "startTimeUtc",
        type: {
          name: "String"
        }
      },
      completionTimeUtc: {
        serializedName: "completionTimeUtc",
        type: {
          name: "String"
        }
      },
      sourceResourcePath: {
        serializedName: "sourceResourcePath",
        type: {
          name: "String"
        }
      },
      targetResourcePath: {
        serializedName: "targetResourcePath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecuritySettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecuritySettings",
    modelProperties: {
      softDeleteSettings: {
        serializedName: "softDeleteSettings",
        type: {
          name: "Composite",
          className: "SoftDeleteSettings"
        }
      },
      immutabilitySettings: {
        serializedName: "immutabilitySettings",
        type: {
          name: "Composite",
          className: "ImmutabilitySettings"
        }
      }
    }
  }
};

export const SoftDeleteSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SoftDeleteSettings",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      retentionDurationInDays: {
        serializedName: "retentionDurationInDays",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ImmutabilitySettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImmutabilitySettings",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageSetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageSetting",
    modelProperties: {
      datastoreType: {
        serializedName: "datastoreType",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FeatureSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FeatureSettings",
    modelProperties: {
      crossSubscriptionRestoreSettings: {
        serializedName: "crossSubscriptionRestoreSettings",
        type: {
          name: "Composite",
          className: "CrossSubscriptionRestoreSettings"
        }
      },
      crossRegionRestoreSettings: {
        serializedName: "crossRegionRestoreSettings",
        type: {
          name: "Composite",
          className: "CrossRegionRestoreSettings"
        }
      }
    }
  }
};

export const CrossSubscriptionRestoreSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CrossSubscriptionRestoreSettings",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CrossRegionRestoreSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CrossRegionRestoreSettings",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DppIdentityDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DppIdentityDetails",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const DppBaseTrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DppBaseTrackedResource",
    modelProperties: {
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DppResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DppResourceList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      },
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationExtendedInfo",
    uberParent: "OperationExtendedInfo",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResource",
    modelProperties: {
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OperationExtendedInfo"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PatchResourceRequestInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchResourceRequestInput",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "DppIdentityDetails"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PatchBackupVaultInput"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const PatchBackupVaultInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchBackupVaultInput",
    modelProperties: {
      monitoringSettings: {
        serializedName: "monitoringSettings",
        type: {
          name: "Composite",
          className: "MonitoringSettings"
        }
      },
      securitySettings: {
        serializedName: "securitySettings",
        type: {
          name: "Composite",
          className: "SecuritySettings"
        }
      },
      featureSettings: {
        serializedName: "featureSettings",
        type: {
          name: "Composite",
          className: "FeatureSettings"
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FeatureValidationRequestBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FeatureValidationRequestBase",
    uberParent: "FeatureValidationRequestBase",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FeatureValidationResponseBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FeatureValidationResponseBase",
    uberParent: "FeatureValidationResponseBase",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientDiscoveryResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientDiscoveryResponse",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClientDiscoveryValueForSingleApi"
            }
          }
        }
      }
    }
  }
};

export const ClientDiscoveryValueForSingleApi: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientDiscoveryValueForSingleApi",
    modelProperties: {
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "ClientDiscoveryDisplay"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ClientDiscoveryForProperties"
        }
      }
    }
  }
};

export const ClientDiscoveryDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientDiscoveryDisplay",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClientDiscoveryForProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientDiscoveryForProperties",
    modelProperties: {
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "ClientDiscoveryForServiceSpecification"
        }
      }
    }
  }
};

export const ClientDiscoveryForServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientDiscoveryForServiceSpecification",
    modelProperties: {
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClientDiscoveryForLogSpecification"
            }
          }
        }
      }
    }
  }
};

export const ClientDiscoveryForLogSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClientDiscoveryForLogSpecification",
    modelProperties: {
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BaseBackupPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BaseBackupPolicy",
    uberParent: "BaseBackupPolicy",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      datasourceTypes: {
        serializedName: "datasourceTypes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DppResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DppResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const BackupInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstance",
    modelProperties: {
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      dataSourceInfo: {
        serializedName: "dataSourceInfo",
        type: {
          name: "Composite",
          className: "Datasource"
        }
      },
      dataSourceSetInfo: {
        serializedName: "dataSourceSetInfo",
        type: {
          name: "Composite",
          className: "DatasourceSet"
        }
      },
      policyInfo: {
        serializedName: "policyInfo",
        type: {
          name: "Composite",
          className: "PolicyInfo"
        }
      },
      protectionStatus: {
        serializedName: "protectionStatus",
        type: {
          name: "Composite",
          className: "ProtectionStatusDetails"
        }
      },
      currentProtectionState: {
        serializedName: "currentProtectionState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      protectionErrorDetails: {
        serializedName: "protectionErrorDetails",
        type: {
          name: "Composite",
          className: "UserFacingError"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      datasourceAuthCredentials: {
        serializedName: "datasourceAuthCredentials",
        type: {
          name: "Composite",
          className: "AuthCredentials"
        }
      },
      validationType: {
        serializedName: "validationType",
        type: {
          name: "String"
        }
      },
      identityDetails: {
        serializedName: "identityDetails",
        type: {
          name: "Composite",
          className: "IdentityDetails"
        }
      },
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Datasource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Datasource",
    modelProperties: {
      datasourceType: {
        serializedName: "datasourceType",
        type: {
          name: "String"
        }
      },
      objectType: {
        serializedName: "objectType",
        type: {
          name: "String"
        }
      },
      resourceID: {
        serializedName: "resourceID",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "resourceLocation",
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      resourceUri: {
        serializedName: "resourceUri",
        type: {
          name: "String"
        }
      },
      resourceProperties: {
        serializedName: "resourceProperties",
        type: {
          name: "Composite",
          className: "BaseResourceProperties"
        }
      }
    }
  }
};

export const BaseResourceProperties: coreClient.CompositeMapper = {
  serializedName: "BaseResourceProperties",
  type: {
    name: "Composite",
    className: "BaseResourceProperties",
    uberParent: "BaseResourceProperties",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatasourceSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatasourceSet",
    modelProperties: {
      datasourceType: {
        serializedName: "datasourceType",
        type: {
          name: "String"
        }
      },
      objectType: {
        serializedName: "objectType",
        type: {
          name: "String"
        }
      },
      resourceID: {
        serializedName: "resourceID",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "resourceLocation",
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      resourceUri: {
        serializedName: "resourceUri",
        type: {
          name: "String"
        }
      },
      resourceProperties: {
        serializedName: "resourceProperties",
        type: {
          name: "Composite",
          className: "BaseResourceProperties"
        }
      }
    }
  }
};

export const PolicyInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyInfo",
    modelProperties: {
      policyId: {
        serializedName: "policyId",
        required: true,
        type: {
          name: "String"
        }
      },
      policyVersion: {
        serializedName: "policyVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      policyParameters: {
        serializedName: "policyParameters",
        type: {
          name: "Composite",
          className: "PolicyParameters"
        }
      }
    }
  }
};

export const PolicyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyParameters",
    modelProperties: {
      dataStoreParametersList: {
        serializedName: "dataStoreParametersList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataStoreParameters"
            }
          }
        }
      },
      backupDatasourceParametersList: {
        serializedName: "backupDatasourceParametersList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupDatasourceParameters"
            }
          }
        }
      }
    }
  }
};

export const DataStoreParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataStoreParameters",
    uberParent: "DataStoreParameters",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      },
      dataStoreType: {
        serializedName: "dataStoreType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupDatasourceParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupDatasourceParameters",
    uberParent: "BackupDatasourceParameters",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectionStatusDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectionStatusDetails",
    modelProperties: {
      errorDetails: {
        serializedName: "errorDetails",
        type: {
          name: "Composite",
          className: "UserFacingError"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserFacingError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserFacingError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserFacingError"
            }
          }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      },
      isRetryable: {
        serializedName: "isRetryable",
        type: {
          name: "Boolean"
        }
      },
      isUserError: {
        serializedName: "isUserError",
        type: {
          name: "Boolean"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InnerError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InnerError",
    modelProperties: {
      additionalInfo: {
        serializedName: "additionalInfo",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      embeddedInnerError: {
        serializedName: "embeddedInnerError",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      }
    }
  }
};

export const AuthCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthCredentials",
    uberParent: "AuthCredentials",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityDetails",
    modelProperties: {
      useSystemAssignedIdentity: {
        serializedName: "useSystemAssignedIdentity",
        type: {
          name: "Boolean"
        }
      },
      userAssignedIdentityArmUrl: {
        serializedName: "userAssignedIdentityArmUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DppProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DppProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const TriggerBackupRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerBackupRequest",
    modelProperties: {
      backupRuleOptions: {
        serializedName: "backupRuleOptions",
        type: {
          name: "Composite",
          className: "AdHocBackupRuleOptions"
        }
      }
    }
  }
};

export const AdHocBackupRuleOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdHocBackupRuleOptions",
    modelProperties: {
      ruleName: {
        serializedName: "ruleName",
        required: true,
        type: {
          name: "String"
        }
      },
      triggerOption: {
        serializedName: "triggerOption",
        type: {
          name: "Composite",
          className: "AdhocBackupTriggerOption"
        }
      }
    }
  }
};

export const AdhocBackupTriggerOption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdhocBackupTriggerOption",
    modelProperties: {
      retentionTagOverride: {
        serializedName: "retentionTagOverride",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateForBackupRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateForBackupRequest",
    modelProperties: {
      backupInstance: {
        serializedName: "backupInstance",
        type: {
          name: "Composite",
          className: "BackupInstance"
        }
      }
    }
  }
};

export const AzureBackupRecoveryPoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBackupRecoveryPoint",
    uberParent: "AzureBackupRecoveryPoint",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupRehydrationRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBackupRehydrationRequest",
    modelProperties: {
      recoveryPointId: {
        serializedName: "recoveryPointId",
        required: true,
        type: {
          name: "String"
        }
      },
      rehydrationPriority: {
        serializedName: "rehydrationPriority",
        type: {
          name: "String"
        }
      },
      rehydrationRetentionDuration: {
        serializedName: "rehydrationRetentionDuration",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupRestoreRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBackupRestoreRequest",
    uberParent: "AzureBackupRestoreRequest",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      },
      restoreTargetInfo: {
        serializedName: "restoreTargetInfo",
        type: {
          name: "Composite",
          className: "RestoreTargetInfoBase"
        }
      },
      sourceDataStoreType: {
        serializedName: "sourceDataStoreType",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceResourceId: {
        serializedName: "sourceResourceId",
        type: {
          name: "String"
        }
      },
      identityDetails: {
        serializedName: "identityDetails",
        type: {
          name: "Composite",
          className: "IdentityDetails"
        }
      }
    }
  }
};

export const RestoreTargetInfoBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestoreTargetInfoBase",
    uberParent: "RestoreTargetInfoBase",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      },
      recoveryOption: {
        serializedName: "recoveryOption",
        required: true,
        type: {
          name: "String"
        }
      },
      restoreLocation: {
        serializedName: "restoreLocation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncBackupInstanceRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncBackupInstanceRequest",
    modelProperties: {
      syncType: {
        serializedName: "syncType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateRestoreRequestObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateRestoreRequestObject",
    modelProperties: {
      restoreRequestObject: {
        serializedName: "restoreRequestObject",
        type: {
          name: "Composite",
          className: "AzureBackupRestoreRequest"
        }
      }
    }
  }
};

export const AzureBackupJob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBackupJob",
    modelProperties: {
      activityID: {
        serializedName: "activityID",
        required: true,
        type: {
          name: "String"
        }
      },
      backupInstanceFriendlyName: {
        serializedName: "backupInstanceFriendlyName",
        required: true,
        type: {
          name: "String"
        }
      },
      backupInstanceId: {
        serializedName: "backupInstanceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataSourceId: {
        serializedName: "dataSourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      dataSourceLocation: {
        serializedName: "dataSourceLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      dataSourceName: {
        serializedName: "dataSourceName",
        required: true,
        type: {
          name: "String"
        }
      },
      dataSourceSetName: {
        serializedName: "dataSourceSetName",
        type: {
          name: "String"
        }
      },
      dataSourceType: {
        serializedName: "dataSourceType",
        required: true,
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      errorDetails: {
        serializedName: "errorDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UserFacingError"
            }
          }
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Composite",
          className: "JobExtendedInfo"
        }
      },
      isUserTriggered: {
        serializedName: "isUserTriggered",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      operation: {
        serializedName: "operation",
        required: true,
        type: {
          name: "String"
        }
      },
      operationCategory: {
        serializedName: "operationCategory",
        required: true,
        type: {
          name: "String"
        }
      },
      policyId: {
        serializedName: "policyId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      policyName: {
        serializedName: "policyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      progressEnabled: {
        serializedName: "progressEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      progressUrl: {
        serializedName: "progressUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rehydrationPriority: {
        serializedName: "rehydrationPriority",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      restoreType: {
        serializedName: "restoreType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceResourceGroup: {
        serializedName: "sourceResourceGroup",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceSubscriptionID: {
        serializedName: "sourceSubscriptionID",
        required: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        required: true,
        type: {
          name: "String"
        }
      },
      supportedActions: {
        serializedName: "supportedActions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      vaultName: {
        serializedName: "vaultName",
        required: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      },
      sourceDataStoreName: {
        serializedName: "sourceDataStoreName",
        type: {
          name: "String"
        }
      },
      destinationDataStoreName: {
        serializedName: "destinationDataStoreName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobExtendedInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobExtendedInfo",
    modelProperties: {
      additionalDetails: {
        serializedName: "additionalDetails",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      backupInstanceState: {
        serializedName: "backupInstanceState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataTransferredInBytes: {
        serializedName: "dataTransferredInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      recoveryDestination: {
        serializedName: "recoveryDestination",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceRecoverPoint: {
        serializedName: "sourceRecoverPoint",
        type: {
          name: "Composite",
          className: "RestoreJobRecoveryPointDetails"
        }
      },
      subTasks: {
        serializedName: "subTasks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobSubTask"
            }
          }
        }
      },
      targetRecoverPoint: {
        serializedName: "targetRecoverPoint",
        type: {
          name: "Composite",
          className: "RestoreJobRecoveryPointDetails"
        }
      }
    }
  }
};

export const RestoreJobRecoveryPointDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestoreJobRecoveryPointDetails",
    modelProperties: {
      recoveryPointID: {
        serializedName: "recoveryPointID",
        type: {
          name: "String"
        }
      },
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const JobSubTask: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobSubTask",
    modelProperties: {
      additionalDetails: {
        serializedName: "additionalDetails",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      taskId: {
        serializedName: "taskId",
        required: true,
        type: {
          name: "Number"
        }
      },
      taskName: {
        serializedName: "taskName",
        required: true,
        type: {
          name: "String"
        }
      },
      taskProgress: {
        serializedName: "taskProgress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      taskStatus: {
        serializedName: "taskStatus",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupFindRestorableTimeRangesRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBackupFindRestorableTimeRangesRequest",
    modelProperties: {
      sourceDataStoreType: {
        serializedName: "sourceDataStoreType",
        required: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupFindRestorableTimeRangesResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBackupFindRestorableTimeRangesResponse",
    modelProperties: {
      restorableTimeRanges: {
        serializedName: "restorableTimeRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableTimeRange"
            }
          }
        }
      },
      objectType: {
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableTimeRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableTimeRange",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "String"
        }
      },
      objectType: {
        serializedName: "objectType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExportJobsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportJobsResult",
    modelProperties: {
      blobUrl: {
        serializedName: "blobUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      blobSasKey: {
        serializedName: "blobSasKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      excelFileBlobUrl: {
        serializedName: "excelFileBlobUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      excelFileBlobSasKey: {
        serializedName: "excelFileBlobSasKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletionInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeletionInfo",
    modelProperties: {
      deletionTime: {
        serializedName: "deletionTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingEndDate: {
        serializedName: "billingEndDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      scheduledPurgeTime: {
        serializedName: "scheduledPurgeTime",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deleteActivityID: {
        serializedName: "deleteActivityID",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceGuard: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceGuard",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowAutoApprovals: {
        serializedName: "allowAutoApprovals",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      resourceGuardOperations: {
        serializedName: "resourceGuardOperations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceGuardOperation"
            }
          }
        }
      },
      vaultCriticalOperationExclusionList: {
        serializedName: "vaultCriticalOperationExclusionList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceGuardOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceGuardOperation",
    modelProperties: {
      vaultCriticalOperation: {
        serializedName: "vaultCriticalOperation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requestResourceType: {
        serializedName: "requestResourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DppTrackedResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DppTrackedResourceList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PatchResourceGuardInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PatchResourceGuardInput",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const DppBaseResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DppBaseResourceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DppBaseResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DppBaseResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DppBaseResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceGuardProxyBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceGuardProxyBase",
    modelProperties: {
      resourceGuardResourceId: {
        serializedName: "resourceGuardResourceId",
        type: {
          name: "String"
        }
      },
      resourceGuardOperationDetails: {
        serializedName: "resourceGuardOperationDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceGuardOperationDetail"
            }
          }
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceGuardOperationDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceGuardOperationDetail",
    modelProperties: {
      vaultCriticalOperation: {
        serializedName: "vaultCriticalOperation",
        type: {
          name: "String"
        }
      },
      defaultResourceRequest: {
        serializedName: "defaultResourceRequest",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnlockDeleteRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnlockDeleteRequest",
    modelProperties: {
      resourceGuardOperationRequests: {
        serializedName: "resourceGuardOperationRequests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      resourceToBeDeleted: {
        serializedName: "resourceToBeDeleted",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnlockDeleteResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnlockDeleteResponse",
    modelProperties: {
      unlockDeleteExpiryTime: {
        serializedName: "unlockDeleteExpiryTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeleteOption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeleteOption",
    uberParent: "DeleteOption",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      duration: {
        serializedName: "duration",
        required: true,
        type: {
          name: "String"
        }
      },
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPointsFilters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointsFilters",
    modelProperties: {
      restorePointDataStoreId: {
        serializedName: "restorePointDataStoreId",
        type: {
          name: "String"
        }
      },
      isVisible: {
        serializedName: "isVisible",
        type: {
          name: "Boolean"
        }
      },
      startDate: {
        serializedName: "startDate",
        type: {
          name: "String"
        }
      },
      endDate: {
        serializedName: "endDate",
        type: {
          name: "String"
        }
      },
      extendedInfo: {
        serializedName: "extendedInfo",
        type: {
          name: "Boolean"
        }
      },
      restorePointState: {
        serializedName: "restorePointState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AdhocBasedTaggingCriteria: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdhocBasedTaggingCriteria",
    modelProperties: {
      tagInfo: {
        serializedName: "tagInfo",
        type: {
          name: "Composite",
          className: "RetentionTag"
        }
      }
    }
  }
};

export const RetentionTag: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetentionTag",
    modelProperties: {
      eTag: {
        serializedName: "eTag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tagName: {
        serializedName: "tagName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggerContext: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerContext",
    uberParent: "TriggerContext",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPointDataStoreDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointDataStoreDetails",
    modelProperties: {
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      expiryTime: {
        serializedName: "expiryTime",
        type: {
          name: "DateTime"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      metaData: {
        serializedName: "metaData",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      visible: {
        serializedName: "visible",
        type: {
          name: "Boolean"
        }
      },
      rehydrationExpiryTime: {
        serializedName: "rehydrationExpiryTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      rehydrationStatus: {
        serializedName: "rehydrationStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DppWorkerRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DppWorkerRequest",
    modelProperties: {
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      },
      supportedGroupVersions: {
        serializedName: "supportedGroupVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      cultureInfo: {
        serializedName: "cultureInfo",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      httpMethod: {
        serializedName: "httpMethod",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupParameters",
    uberParent: "BackupParameters",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataStoreInfoBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataStoreInfoBase",
    modelProperties: {
      dataStoreType: {
        serializedName: "dataStoreType",
        required: true,
        type: {
          name: "String"
        }
      },
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BasePolicyRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BasePolicyRule",
    uberParent: "BasePolicyRule",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NamespacedNameResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NamespacedNameResource",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SourceLifeCycle: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceLifeCycle",
    modelProperties: {
      deleteAfter: {
        serializedName: "deleteAfter",
        type: {
          name: "Composite",
          className: "DeleteOption"
        }
      },
      sourceDataStore: {
        serializedName: "sourceDataStore",
        type: {
          name: "Composite",
          className: "DataStoreInfoBase"
        }
      },
      targetDataStoreCopySettings: {
        serializedName: "targetDataStoreCopySettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TargetCopySetting"
            }
          }
        }
      }
    }
  }
};

export const TargetCopySetting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetCopySetting",
    modelProperties: {
      copyAfter: {
        serializedName: "copyAfter",
        type: {
          name: "Composite",
          className: "CopyOption"
        }
      },
      dataStore: {
        serializedName: "dataStore",
        type: {
          name: "Composite",
          className: "DataStoreInfoBase"
        }
      }
    }
  }
};

export const CopyOption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CopyOption",
    uberParent: "CopyOption",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupCriteria: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupCriteria",
    uberParent: "BackupCriteria",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupSchedule",
    modelProperties: {
      repeatingTimeIntervals: {
        serializedName: "repeatingTimeIntervals",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Day: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Day",
    modelProperties: {
      date: {
        serializedName: "date",
        type: {
          name: "Number"
        }
      },
      isLast: {
        serializedName: "isLast",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SupportedFeature: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedFeature",
    modelProperties: {
      featureName: {
        serializedName: "featureName",
        type: {
          name: "String"
        }
      },
      supportStatus: {
        serializedName: "supportStatus",
        type: {
          name: "String"
        }
      },
      exposureControlledFeatures: {
        serializedName: "exposureControlledFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ItemLevelRestoreCriteria: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ItemLevelRestoreCriteria",
    uberParent: "ItemLevelRestoreCriteria",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      objectType: {
        serializedName: "objectType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetDetails",
    modelProperties: {
      filePrefix: {
        serializedName: "filePrefix",
        required: true,
        type: {
          name: "String"
        }
      },
      restoreTargetLocationType: {
        serializedName: "restoreTargetLocationType",
        required: true,
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        required: true,
        type: {
          name: "String"
        }
      },
      targetResourceArmId: {
        serializedName: "targetResourceArmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaggingCriteria: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaggingCriteria",
    modelProperties: {
      criteria: {
        serializedName: "criteria",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupCriteria"
            }
          }
        }
      },
      isDefault: {
        serializedName: "isDefault",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      taggingPriority: {
        serializedName: "taggingPriority",
        required: true,
        type: {
          name: "Number"
        }
      },
      tagInfo: {
        serializedName: "tagInfo",
        type: {
          name: "Composite",
          className: "RetentionTag"
        }
      }
    }
  }
};

export const SecretStoreResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretStoreResource",
    modelProperties: {
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      },
      secretStoreType: {
        serializedName: "secretStoreType",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DppTrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DppTrackedResource",
    modelProperties: {
      ...DppBaseTrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "DppIdentityDetails"
        }
      }
    }
  }
};

export const ResourceGuardResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceGuardResource",
    modelProperties: {
      ...DppBaseTrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ResourceGuard"
        }
      }
    }
  }
};

export const BackupVaultResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupVaultResourceList",
    modelProperties: {
      ...DppResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupVaultResource"
            }
          }
        }
      }
    }
  }
};

export const BaseBackupPolicyResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BaseBackupPolicyResourceList",
    modelProperties: {
      ...DppResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BaseBackupPolicyResource"
            }
          }
        }
      }
    }
  }
};

export const BackupInstanceResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstanceResourceList",
    modelProperties: {
      ...DppResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupInstanceResource"
            }
          }
        }
      }
    }
  }
};

export const AzureBackupRecoveryPointResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBackupRecoveryPointResourceList",
    modelProperties: {
      ...DppResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureBackupRecoveryPointResource"
            }
          }
        }
      }
    }
  }
};

export const AzureBackupJobResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBackupJobResourceList",
    modelProperties: {
      ...DppResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureBackupJobResource"
            }
          }
        }
      }
    }
  }
};

export const DeletedBackupInstanceResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeletedBackupInstanceResourceList",
    modelProperties: {
      ...DppResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeletedBackupInstanceResource"
            }
          }
        }
      }
    }
  }
};

export const ResourceGuardProxyBaseResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceGuardProxyBaseResourceList",
    modelProperties: {
      ...DppResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceGuardProxyBaseResource"
            }
          }
        }
      }
    }
  }
};

export const OperationJobExtendedInfo: coreClient.CompositeMapper = {
  serializedName: "OperationJobExtendedInfo",
  type: {
    name: "Composite",
    className: "OperationJobExtendedInfo",
    uberParent: "OperationExtendedInfo",
    polymorphicDiscriminator:
      OperationExtendedInfo.type.polymorphicDiscriminator,
    modelProperties: {
      ...OperationExtendedInfo.type.modelProperties,
      jobId: {
        serializedName: "jobId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FeatureValidationRequest: coreClient.CompositeMapper = {
  serializedName: "FeatureValidationRequest",
  type: {
    name: "Composite",
    className: "FeatureValidationRequest",
    uberParent: "FeatureValidationRequestBase",
    modelProperties: {
      ...FeatureValidationRequestBase.type.modelProperties,
      featureType: {
        serializedName: "featureType",
        type: {
          name: "String"
        }
      },
      featureName: {
        serializedName: "featureName",
        type: {
          name: "String"
        }
      }
    }
  }
};
FeatureValidationRequestBase.type.polymorphicDiscriminator =
  FeatureValidationRequestBase.type.polymorphicDiscriminator;

export const FeatureValidationResponse: coreClient.CompositeMapper = {
  serializedName: "FeatureValidationResponse",
  type: {
    name: "Composite",
    className: "FeatureValidationResponse",
    uberParent: "FeatureValidationResponseBase",
    modelProperties: {
      ...FeatureValidationResponseBase.type.modelProperties,
      featureType: {
        serializedName: "featureType",
        type: {
          name: "String"
        }
      },
      features: {
        serializedName: "features",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SupportedFeature"
            }
          }
        }
      }
    }
  }
};
FeatureValidationResponseBase.type.polymorphicDiscriminator =
  FeatureValidationResponseBase.type.polymorphicDiscriminator;

export const BackupPolicy: coreClient.CompositeMapper = {
  serializedName: "BackupPolicy",
  type: {
    name: "Composite",
    className: "BackupPolicy",
    uberParent: "BaseBackupPolicy",
    polymorphicDiscriminator: BaseBackupPolicy.type.polymorphicDiscriminator,
    modelProperties: {
      ...BaseBackupPolicy.type.modelProperties,
      policyRules: {
        serializedName: "policyRules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BasePolicyRule"
            }
          }
        }
      }
    }
  }
};

export const BaseBackupPolicyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BaseBackupPolicyResource",
    modelProperties: {
      ...DppResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BaseBackupPolicy"
        }
      }
    }
  }
};

export const AzureBackupRecoveryPointResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBackupRecoveryPointResource",
    modelProperties: {
      ...DppResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AzureBackupRecoveryPoint"
        }
      }
    }
  }
};

export const AzureBackupJobResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBackupJobResource",
    modelProperties: {
      ...DppResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AzureBackupJob"
        }
      }
    }
  }
};

export const AzureBackupFindRestorableTimeRangesResponseResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBackupFindRestorableTimeRangesResponseResource",
    modelProperties: {
      ...DppResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AzureBackupFindRestorableTimeRangesResponse"
        }
      }
    }
  }
};

export const DeletedBackupInstanceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeletedBackupInstanceResource",
    modelProperties: {
      ...DppResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DeletedBackupInstance"
        }
      }
    }
  }
};

export const ResourceGuardProxyBaseResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceGuardProxyBaseResource",
    modelProperties: {
      ...DppResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ResourceGuardProxyBase"
        }
      }
    }
  }
};

export const DeletedBackupInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeletedBackupInstance",
    modelProperties: {
      ...BackupInstance.type.modelProperties,
      deletionInfo: {
        serializedName: "deletionInfo",
        type: {
          name: "Composite",
          className: "DeletionInfo"
        }
      }
    }
  }
};

export const AzureOperationalStoreParameters: coreClient.CompositeMapper = {
  serializedName: "AzureOperationalStoreParameters",
  type: {
    name: "Composite",
    className: "AzureOperationalStoreParameters",
    uberParent: "DataStoreParameters",
    polymorphicDiscriminator: DataStoreParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataStoreParameters.type.modelProperties,
      resourceGroupId: {
        serializedName: "resourceGroupId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubernetesClusterBackupDatasourceParameters: coreClient.CompositeMapper = {
  serializedName: "KubernetesClusterBackupDatasourceParameters",
  type: {
    name: "Composite",
    className: "KubernetesClusterBackupDatasourceParameters",
    uberParent: "BackupDatasourceParameters",
    polymorphicDiscriminator:
      BackupDatasourceParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupDatasourceParameters.type.modelProperties,
      snapshotVolumes: {
        serializedName: "snapshotVolumes",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      includeClusterScopeResources: {
        serializedName: "includeClusterScopeResources",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      includedNamespaces: {
        serializedName: "includedNamespaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      excludedNamespaces: {
        serializedName: "excludedNamespaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      includedResourceTypes: {
        serializedName: "includedResourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      excludedResourceTypes: {
        serializedName: "excludedResourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      labelSelectors: {
        serializedName: "labelSelectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      backupHookReferences: {
        serializedName: "backupHookReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NamespacedNameResource"
            }
          }
        }
      }
    }
  }
};

export const BlobBackupDatasourceParameters: coreClient.CompositeMapper = {
  serializedName: "BlobBackupDatasourceParameters",
  type: {
    name: "Composite",
    className: "BlobBackupDatasourceParameters",
    uberParent: "BackupDatasourceParameters",
    polymorphicDiscriminator:
      BackupDatasourceParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupDatasourceParameters.type.modelProperties,
      containersList: {
        serializedName: "containersList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SecretStoreBasedAuthCredentials: coreClient.CompositeMapper = {
  serializedName: "SecretStoreBasedAuthCredentials",
  type: {
    name: "Composite",
    className: "SecretStoreBasedAuthCredentials",
    uberParent: "AuthCredentials",
    polymorphicDiscriminator: AuthCredentials.type.polymorphicDiscriminator,
    modelProperties: {
      ...AuthCredentials.type.modelProperties,
      secretStoreResource: {
        serializedName: "secretStoreResource",
        type: {
          name: "Composite",
          className: "SecretStoreResource"
        }
      }
    }
  }
};

export const BackupInstanceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstanceResource",
    modelProperties: {
      ...DppProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BackupInstance"
        }
      }
    }
  }
};

export const AzureBackupDiscreteRecoveryPoint: coreClient.CompositeMapper = {
  serializedName: "AzureBackupDiscreteRecoveryPoint",
  type: {
    name: "Composite",
    className: "AzureBackupDiscreteRecoveryPoint",
    uberParent: "AzureBackupRecoveryPoint",
    polymorphicDiscriminator:
      AzureBackupRecoveryPoint.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureBackupRecoveryPoint.type.modelProperties,
      friendlyName: {
        serializedName: "friendlyName",
        type: {
          name: "String"
        }
      },
      recoveryPointDataStoresDetails: {
        serializedName: "recoveryPointDataStoresDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPointDataStoreDetails"
            }
          }
        }
      },
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      policyName: {
        serializedName: "policyName",
        type: {
          name: "String"
        }
      },
      policyVersion: {
        serializedName: "policyVersion",
        type: {
          name: "String"
        }
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        type: {
          name: "String"
        }
      },
      recoveryPointType: {
        serializedName: "recoveryPointType",
        type: {
          name: "String"
        }
      },
      retentionTagName: {
        serializedName: "retentionTagName",
        type: {
          name: "String"
        }
      },
      retentionTagVersion: {
        serializedName: "retentionTagVersion",
        type: {
          name: "String"
        }
      },
      expiryTime: {
        serializedName: "expiryTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AzureBackupRecoveryPointBasedRestoreRequest: coreClient.CompositeMapper = {
  serializedName: "AzureBackupRecoveryPointBasedRestoreRequest",
  type: {
    name: "Composite",
    className: "AzureBackupRecoveryPointBasedRestoreRequest",
    uberParent: "AzureBackupRestoreRequest",
    polymorphicDiscriminator: {
      serializedName: "objectType",
      clientName: "objectType"
    },
    modelProperties: {
      ...AzureBackupRestoreRequest.type.modelProperties,
      recoveryPointId: {
        serializedName: "recoveryPointId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupRecoveryTimeBasedRestoreRequest: coreClient.CompositeMapper = {
  serializedName: "AzureBackupRecoveryTimeBasedRestoreRequest",
  type: {
    name: "Composite",
    className: "AzureBackupRecoveryTimeBasedRestoreRequest",
    uberParent: "AzureBackupRestoreRequest",
    polymorphicDiscriminator:
      AzureBackupRestoreRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureBackupRestoreRequest.type.modelProperties,
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ItemLevelRestoreTargetInfo: coreClient.CompositeMapper = {
  serializedName: "ItemLevelRestoreTargetInfo",
  type: {
    name: "Composite",
    className: "ItemLevelRestoreTargetInfo",
    uberParent: "RestoreTargetInfoBase",
    polymorphicDiscriminator:
      RestoreTargetInfoBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...RestoreTargetInfoBase.type.modelProperties,
      restoreCriteria: {
        serializedName: "restoreCriteria",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ItemLevelRestoreCriteria"
            }
          }
        }
      },
      datasourceInfo: {
        serializedName: "datasourceInfo",
        type: {
          name: "Composite",
          className: "Datasource"
        }
      },
      datasourceSetInfo: {
        serializedName: "datasourceSetInfo",
        type: {
          name: "Composite",
          className: "DatasourceSet"
        }
      },
      datasourceAuthCredentials: {
        serializedName: "datasourceAuthCredentials",
        type: {
          name: "Composite",
          className: "AuthCredentials"
        }
      }
    }
  }
};

export const RestoreFilesTargetInfo: coreClient.CompositeMapper = {
  serializedName: "RestoreFilesTargetInfo",
  type: {
    name: "Composite",
    className: "RestoreFilesTargetInfo",
    uberParent: "RestoreTargetInfoBase",
    polymorphicDiscriminator:
      RestoreTargetInfoBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...RestoreTargetInfoBase.type.modelProperties,
      targetDetails: {
        serializedName: "targetDetails",
        type: {
          name: "Composite",
          className: "TargetDetails"
        }
      }
    }
  }
};

export const RestoreTargetInfo: coreClient.CompositeMapper = {
  serializedName: "RestoreTargetInfo",
  type: {
    name: "Composite",
    className: "RestoreTargetInfo",
    uberParent: "RestoreTargetInfoBase",
    modelProperties: {
      ...RestoreTargetInfoBase.type.modelProperties,
      datasourceInfo: {
        serializedName: "datasourceInfo",
        type: {
          name: "Composite",
          className: "Datasource"
        }
      },
      datasourceSetInfo: {
        serializedName: "datasourceSetInfo",
        type: {
          name: "Composite",
          className: "DatasourceSet"
        }
      },
      datasourceAuthCredentials: {
        serializedName: "datasourceAuthCredentials",
        type: {
          name: "Composite",
          className: "AuthCredentials"
        }
      }
    }
  }
};
RestoreTargetInfoBase.type.polymorphicDiscriminator =
  RestoreTargetInfoBase.type.polymorphicDiscriminator;

export const ResourceGuardResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceGuardResourceList",
    modelProperties: {
      ...DppTrackedResourceList.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceGuardResource"
            }
          }
        }
      }
    }
  }
};

export const AbsoluteDeleteOption: coreClient.CompositeMapper = {
  serializedName: "AbsoluteDeleteOption",
  type: {
    name: "Composite",
    className: "AbsoluteDeleteOption",
    uberParent: "DeleteOption",
    polymorphicDiscriminator: DeleteOption.type.polymorphicDiscriminator,
    modelProperties: {
      ...DeleteOption.type.modelProperties
    }
  }
};

export const AdhocBasedTriggerContext: coreClient.CompositeMapper = {
  serializedName: "AdhocBasedTriggerContext",
  type: {
    name: "Composite",
    className: "AdhocBasedTriggerContext",
    uberParent: "TriggerContext",
    polymorphicDiscriminator: TriggerContext.type.polymorphicDiscriminator,
    modelProperties: {
      ...TriggerContext.type.modelProperties,
      taggingCriteria: {
        serializedName: "taggingCriteria",
        type: {
          name: "Composite",
          className: "AdhocBasedTaggingCriteria"
        }
      }
    }
  }
};

export const ScheduleBasedTriggerContext: coreClient.CompositeMapper = {
  serializedName: "ScheduleBasedTriggerContext",
  type: {
    name: "Composite",
    className: "ScheduleBasedTriggerContext",
    uberParent: "TriggerContext",
    polymorphicDiscriminator: TriggerContext.type.polymorphicDiscriminator,
    modelProperties: {
      ...TriggerContext.type.modelProperties,
      schedule: {
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "BackupSchedule"
        }
      },
      taggingCriteria: {
        serializedName: "taggingCriteria",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TaggingCriteria"
            }
          }
        }
      }
    }
  }
};

export const AzureBackupFindRestorableTimeRangesRequestResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBackupFindRestorableTimeRangesRequestResource",
    modelProperties: {
      ...DppWorkerRequest.type.modelProperties,
      content: {
        serializedName: "content",
        type: {
          name: "Composite",
          className: "AzureBackupFindRestorableTimeRangesRequest"
        }
      }
    }
  }
};

export const AzureBackupParams: coreClient.CompositeMapper = {
  serializedName: "AzureBackupParams",
  type: {
    name: "Composite",
    className: "AzureBackupParams",
    uberParent: "BackupParameters",
    polymorphicDiscriminator: BackupParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupParameters.type.modelProperties,
      backupType: {
        serializedName: "backupType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBackupRule: coreClient.CompositeMapper = {
  serializedName: "AzureBackupRule",
  type: {
    name: "Composite",
    className: "AzureBackupRule",
    uberParent: "BasePolicyRule",
    polymorphicDiscriminator: BasePolicyRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...BasePolicyRule.type.modelProperties,
      backupParameters: {
        serializedName: "backupParameters",
        type: {
          name: "Composite",
          className: "BackupParameters"
        }
      },
      dataStore: {
        serializedName: "dataStore",
        type: {
          name: "Composite",
          className: "DataStoreInfoBase"
        }
      },
      trigger: {
        serializedName: "trigger",
        type: {
          name: "Composite",
          className: "TriggerContext"
        }
      }
    }
  }
};

export const AzureRetentionRule: coreClient.CompositeMapper = {
  serializedName: "AzureRetentionRule",
  type: {
    name: "Composite",
    className: "AzureRetentionRule",
    uberParent: "BasePolicyRule",
    polymorphicDiscriminator: BasePolicyRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...BasePolicyRule.type.modelProperties,
      isDefault: {
        serializedName: "isDefault",
        type: {
          name: "Boolean"
        }
      },
      lifecycles: {
        serializedName: "lifecycles",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SourceLifeCycle"
            }
          }
        }
      }
    }
  }
};

export const CopyOnExpiryOption: coreClient.CompositeMapper = {
  serializedName: "CopyOnExpiryOption",
  type: {
    name: "Composite",
    className: "CopyOnExpiryOption",
    uberParent: "CopyOption",
    polymorphicDiscriminator: CopyOption.type.polymorphicDiscriminator,
    modelProperties: {
      ...CopyOption.type.modelProperties
    }
  }
};

export const CustomCopyOption: coreClient.CompositeMapper = {
  serializedName: "CustomCopyOption",
  type: {
    name: "Composite",
    className: "CustomCopyOption",
    uberParent: "CopyOption",
    polymorphicDiscriminator: CopyOption.type.polymorphicDiscriminator,
    modelProperties: {
      ...CopyOption.type.modelProperties,
      duration: {
        serializedName: "duration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImmediateCopyOption: coreClient.CompositeMapper = {
  serializedName: "ImmediateCopyOption",
  type: {
    name: "Composite",
    className: "ImmediateCopyOption",
    uberParent: "CopyOption",
    polymorphicDiscriminator: CopyOption.type.polymorphicDiscriminator,
    modelProperties: {
      ...CopyOption.type.modelProperties
    }
  }
};

export const ScheduleBasedBackupCriteria: coreClient.CompositeMapper = {
  serializedName: "ScheduleBasedBackupCriteria",
  type: {
    name: "Composite",
    className: "ScheduleBasedBackupCriteria",
    uberParent: "BackupCriteria",
    polymorphicDiscriminator: BackupCriteria.type.polymorphicDiscriminator,
    modelProperties: {
      ...BackupCriteria.type.modelProperties,
      absoluteCriteria: {
        serializedName: "absoluteCriteria",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      daysOfMonth: {
        serializedName: "daysOfMonth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Day"
            }
          }
        }
      },
      daysOfTheWeek: {
        serializedName: "daysOfTheWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      monthsOfYear: {
        serializedName: "monthsOfYear",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      scheduleTimes: {
        serializedName: "scheduleTimes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      weeksOfTheMonth: {
        serializedName: "weeksOfTheMonth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ItemPathBasedRestoreCriteria: coreClient.CompositeMapper = {
  serializedName: "ItemPathBasedRestoreCriteria",
  type: {
    name: "Composite",
    className: "ItemPathBasedRestoreCriteria",
    uberParent: "ItemLevelRestoreCriteria",
    polymorphicDiscriminator:
      ItemLevelRestoreCriteria.type.polymorphicDiscriminator,
    modelProperties: {
      ...ItemLevelRestoreCriteria.type.modelProperties,
      itemPath: {
        serializedName: "itemPath",
        required: true,
        type: {
          name: "String"
        }
      },
      isPathRelativeToBackupItem: {
        serializedName: "isPathRelativeToBackupItem",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      subItemPathPrefix: {
        serializedName: "subItemPathPrefix",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RangeBasedItemLevelRestoreCriteria: coreClient.CompositeMapper = {
  serializedName: "RangeBasedItemLevelRestoreCriteria",
  type: {
    name: "Composite",
    className: "RangeBasedItemLevelRestoreCriteria",
    uberParent: "ItemLevelRestoreCriteria",
    polymorphicDiscriminator:
      ItemLevelRestoreCriteria.type.polymorphicDiscriminator,
    modelProperties: {
      ...ItemLevelRestoreCriteria.type.modelProperties,
      minMatchingValue: {
        serializedName: "minMatchingValue",
        type: {
          name: "String"
        }
      },
      maxMatchingValue: {
        serializedName: "maxMatchingValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubernetesStorageClassRestoreCriteria: coreClient.CompositeMapper = {
  serializedName: "KubernetesStorageClassRestoreCriteria",
  type: {
    name: "Composite",
    className: "KubernetesStorageClassRestoreCriteria",
    uberParent: "ItemLevelRestoreCriteria",
    polymorphicDiscriminator:
      ItemLevelRestoreCriteria.type.polymorphicDiscriminator,
    modelProperties: {
      ...ItemLevelRestoreCriteria.type.modelProperties,
      selectedStorageClassName: {
        serializedName: "selectedStorageClassName",
        type: {
          name: "String"
        }
      },
      provisioner: {
        serializedName: "provisioner",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubernetesPVRestoreCriteria: coreClient.CompositeMapper = {
  serializedName: "KubernetesPVRestoreCriteria",
  type: {
    name: "Composite",
    className: "KubernetesPVRestoreCriteria",
    uberParent: "ItemLevelRestoreCriteria",
    polymorphicDiscriminator:
      ItemLevelRestoreCriteria.type.polymorphicDiscriminator,
    modelProperties: {
      ...ItemLevelRestoreCriteria.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      storageClassName: {
        serializedName: "storageClassName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubernetesClusterRestoreCriteria: coreClient.CompositeMapper = {
  serializedName: "KubernetesClusterRestoreCriteria",
  type: {
    name: "Composite",
    className: "KubernetesClusterRestoreCriteria",
    uberParent: "ItemLevelRestoreCriteria",
    polymorphicDiscriminator:
      ItemLevelRestoreCriteria.type.polymorphicDiscriminator,
    modelProperties: {
      ...ItemLevelRestoreCriteria.type.modelProperties,
      includeClusterScopeResources: {
        serializedName: "includeClusterScopeResources",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      includedNamespaces: {
        serializedName: "includedNamespaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      excludedNamespaces: {
        serializedName: "excludedNamespaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      includedResourceTypes: {
        serializedName: "includedResourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      excludedResourceTypes: {
        serializedName: "excludedResourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      labelSelectors: {
        serializedName: "labelSelectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      persistentVolumeRestoreMode: {
        serializedName: "persistentVolumeRestoreMode",
        type: {
          name: "String"
        }
      },
      conflictPolicy: {
        serializedName: "conflictPolicy",
        type: {
          name: "String"
        }
      },
      namespaceMappings: {
        serializedName: "namespaceMappings",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      restoreHookReferences: {
        serializedName: "restoreHookReferences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NamespacedNameResource"
            }
          }
        }
      }
    }
  }
};

export const BackupVaultResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupVaultResource",
    modelProperties: {
      ...DppTrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BackupVault"
        }
      }
    }
  }
};

export const AzureBackupRestoreWithRehydrationRequest: coreClient.CompositeMapper = {
  serializedName: "AzureBackupRestoreWithRehydrationRequest",
  type: {
    name: "Composite",
    className: "AzureBackupRestoreWithRehydrationRequest",
    uberParent: "AzureBackupRecoveryPointBasedRestoreRequest",
    polymorphicDiscriminator:
      AzureBackupRecoveryPointBasedRestoreRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...AzureBackupRecoveryPointBasedRestoreRequest.type.modelProperties,
      rehydrationPriority: {
        serializedName: "rehydrationPriority",
        required: true,
        type: {
          name: "String"
        }
      },
      rehydrationRetentionDuration: {
        serializedName: "rehydrationRetentionDuration",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResultGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResultGetHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupVaultOperationResultsGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupVaultOperationResultsGetHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstancesCreateOrUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupInstancesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstancesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesAdhocBackupHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstancesAdhocBackupHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesValidateForBackupHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstancesValidateForBackupHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesTriggerRehydrateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstancesTriggerRehydrateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesTriggerRestoreHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstancesTriggerRestoreHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesResumeBackupsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstancesResumeBackupsHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesResumeProtectionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstancesResumeProtectionHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesStopProtectionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstancesStopProtectionHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesSuspendBackupsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstancesSuspendBackupsHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesSyncBackupInstanceHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstancesSyncBackupInstanceHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupInstancesValidateForRestoreHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BackupInstancesValidateForRestoreHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExportJobsTriggerHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportJobsTriggerHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export let discriminators = {
  OperationExtendedInfo: OperationExtendedInfo,
  FeatureValidationRequestBase: FeatureValidationRequestBase,
  FeatureValidationResponseBase: FeatureValidationResponseBase,
  BaseBackupPolicy: BaseBackupPolicy,
  "BaseResourceProperties.BaseResourceProperties": BaseResourceProperties,
  DataStoreParameters: DataStoreParameters,
  BackupDatasourceParameters: BackupDatasourceParameters,
  AuthCredentials: AuthCredentials,
  AzureBackupRecoveryPoint: AzureBackupRecoveryPoint,
  AzureBackupRestoreRequest: AzureBackupRestoreRequest,
  RestoreTargetInfoBase: RestoreTargetInfoBase,
  DeleteOption: DeleteOption,
  TriggerContext: TriggerContext,
  BackupParameters: BackupParameters,
  BasePolicyRule: BasePolicyRule,
  CopyOption: CopyOption,
  BackupCriteria: BackupCriteria,
  ItemLevelRestoreCriteria: ItemLevelRestoreCriteria,
  "OperationExtendedInfo.OperationJobExtendedInfo": OperationJobExtendedInfo,
  "FeatureValidationRequestBase.FeatureValidationRequest": FeatureValidationRequest,
  "FeatureValidationResponseBase.FeatureValidationResponse": FeatureValidationResponse,
  "BaseBackupPolicy.BackupPolicy": BackupPolicy,
  "DataStoreParameters.AzureOperationalStoreParameters": AzureOperationalStoreParameters,
  "BackupDatasourceParameters.KubernetesClusterBackupDatasourceParameters": KubernetesClusterBackupDatasourceParameters,
  "BackupDatasourceParameters.BlobBackupDatasourceParameters": BlobBackupDatasourceParameters,
  "AuthCredentials.SecretStoreBasedAuthCredentials": SecretStoreBasedAuthCredentials,
  "AzureBackupRecoveryPoint.AzureBackupDiscreteRecoveryPoint": AzureBackupDiscreteRecoveryPoint,
  "AzureBackupRestoreRequest.AzureBackupRecoveryPointBasedRestoreRequest": AzureBackupRecoveryPointBasedRestoreRequest,
  "AzureBackupRestoreRequest.AzureBackupRecoveryTimeBasedRestoreRequest": AzureBackupRecoveryTimeBasedRestoreRequest,
  "RestoreTargetInfoBase.ItemLevelRestoreTargetInfo": ItemLevelRestoreTargetInfo,
  "RestoreTargetInfoBase.RestoreFilesTargetInfo": RestoreFilesTargetInfo,
  "RestoreTargetInfoBase.RestoreTargetInfo": RestoreTargetInfo,
  "DeleteOption.AbsoluteDeleteOption": AbsoluteDeleteOption,
  "TriggerContext.AdhocBasedTriggerContext": AdhocBasedTriggerContext,
  "TriggerContext.ScheduleBasedTriggerContext": ScheduleBasedTriggerContext,
  "BackupParameters.AzureBackupParams": AzureBackupParams,
  "BasePolicyRule.AzureBackupRule": AzureBackupRule,
  "BasePolicyRule.AzureRetentionRule": AzureRetentionRule,
  "CopyOption.CopyOnExpiryOption": CopyOnExpiryOption,
  "CopyOption.CustomCopyOption": CustomCopyOption,
  "CopyOption.ImmediateCopyOption": ImmediateCopyOption,
  "BackupCriteria.ScheduleBasedBackupCriteria": ScheduleBasedBackupCriteria,
  "ItemLevelRestoreCriteria.ItemPathBasedRestoreCriteria": ItemPathBasedRestoreCriteria,
  "ItemLevelRestoreCriteria.RangeBasedItemLevelRestoreCriteria": RangeBasedItemLevelRestoreCriteria,
  "ItemLevelRestoreCriteria.KubernetesStorageClassRestoreCriteria": KubernetesStorageClassRestoreCriteria,
  "ItemLevelRestoreCriteria.KubernetesPVRestoreCriteria": KubernetesPVRestoreCriteria,
  "ItemLevelRestoreCriteria.KubernetesClusterRestoreCriteria": KubernetesClusterRestoreCriteria,
  "AzureBackupRecoveryPointBasedRestoreRequest.AzureBackupRestoreWithRehydrationRequest": AzureBackupRestoreWithRehydrationRequest
};
