/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { OperationStatusResourceGroupContext } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataProtectionClient } from "../dataProtectionClient";
import {
  OperationStatusResourceGroupContextGetOptionalParams,
  OperationStatusResourceGroupContextGetResponse
} from "../models";

/** Class containing OperationStatusResourceGroupContext operations. */
export class OperationStatusResourceGroupContextImpl
  implements OperationStatusResourceGroupContext {
  private readonly client: DataProtectionClient;

  /**
   * Initialize a new instance of the class OperationStatusResourceGroupContext class.
   * @param client Reference to the service client
   */
  constructor(client: DataProtectionClient) {
    this.client = client;
  }

  /**
   * Gets the operation status for an operation over a ResourceGroup's context.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param operationId
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    operationId: string,
    options?: OperationStatusResourceGroupContextGetOptionalParams
  ): Promise<OperationStatusResourceGroupContextGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, operationId, options },
      getOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/operationStatus/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.operationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
