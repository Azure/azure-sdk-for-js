{"version":3,"file":"workflows.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/workflows.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { PollerLike, PollOperationState } from \"@azure/core-lro\";\nimport {\n  Workflow,\n  WorkflowsListBySubscriptionOptionalParams,\n  WorkflowsListByResourceGroupOptionalParams,\n  WorkflowsGetOptionalParams,\n  WorkflowsGetResponse,\n  WorkflowsCreateOrUpdateOptionalParams,\n  WorkflowsCreateOrUpdateResponse,\n  WorkflowsUpdateOptionalParams,\n  WorkflowsUpdateResponse,\n  WorkflowsDeleteOptionalParams,\n  WorkflowsDisableOptionalParams,\n  WorkflowsEnableOptionalParams,\n  GenerateUpgradedDefinitionParameters,\n  WorkflowsGenerateUpgradedDefinitionOptionalParams,\n  WorkflowsGenerateUpgradedDefinitionResponse,\n  GetCallbackUrlParameters,\n  WorkflowsListCallbackUrlOptionalParams,\n  WorkflowsListCallbackUrlResponse,\n  WorkflowsListSwaggerOptionalParams,\n  WorkflowsListSwaggerResponse,\n  WorkflowReference,\n  WorkflowsMoveOptionalParams,\n  RegenerateActionParameter,\n  WorkflowsRegenerateAccessKeyOptionalParams,\n  WorkflowsValidateByResourceGroupOptionalParams,\n  WorkflowsValidateByLocationOptionalParams\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a Workflows. */\nexport interface Workflows {\n  /**\n   * Gets a list of workflows by subscription.\n   * @param options The options parameters.\n   */\n  listBySubscription(\n    options?: WorkflowsListBySubscriptionOptionalParams\n  ): PagedAsyncIterableIterator<Workflow>;\n  /**\n   * Gets a list of workflows by resource group.\n   * @param resourceGroupName The resource group name.\n   * @param options The options parameters.\n   */\n  listByResourceGroup(\n    resourceGroupName: string,\n    options?: WorkflowsListByResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<Workflow>;\n  /**\n   * Gets a workflow.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    workflowName: string,\n    options?: WorkflowsGetOptionalParams\n  ): Promise<WorkflowsGetResponse>;\n  /**\n   * Creates or updates a workflow.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param workflow The workflow.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    resourceGroupName: string,\n    workflowName: string,\n    workflow: Workflow,\n    options?: WorkflowsCreateOrUpdateOptionalParams\n  ): Promise<WorkflowsCreateOrUpdateResponse>;\n  /**\n   * Updates a workflow.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param options The options parameters.\n   */\n  update(\n    resourceGroupName: string,\n    workflowName: string,\n    options?: WorkflowsUpdateOptionalParams\n  ): Promise<WorkflowsUpdateResponse>;\n  /**\n   * Deletes a workflow.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param options The options parameters.\n   */\n  delete(\n    resourceGroupName: string,\n    workflowName: string,\n    options?: WorkflowsDeleteOptionalParams\n  ): Promise<void>;\n  /**\n   * Disables a workflow.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param options The options parameters.\n   */\n  disable(\n    resourceGroupName: string,\n    workflowName: string,\n    options?: WorkflowsDisableOptionalParams\n  ): Promise<void>;\n  /**\n   * Enables a workflow.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param options The options parameters.\n   */\n  enable(\n    resourceGroupName: string,\n    workflowName: string,\n    options?: WorkflowsEnableOptionalParams\n  ): Promise<void>;\n  /**\n   * Generates the upgraded definition for a workflow.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param parameters Parameters for generating an upgraded definition.\n   * @param options The options parameters.\n   */\n  generateUpgradedDefinition(\n    resourceGroupName: string,\n    workflowName: string,\n    parameters: GenerateUpgradedDefinitionParameters,\n    options?: WorkflowsGenerateUpgradedDefinitionOptionalParams\n  ): Promise<WorkflowsGenerateUpgradedDefinitionResponse>;\n  /**\n   * Get the workflow callback Url.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param listCallbackUrl Which callback url to list.\n   * @param options The options parameters.\n   */\n  listCallbackUrl(\n    resourceGroupName: string,\n    workflowName: string,\n    listCallbackUrl: GetCallbackUrlParameters,\n    options?: WorkflowsListCallbackUrlOptionalParams\n  ): Promise<WorkflowsListCallbackUrlResponse>;\n  /**\n   * Gets an OpenAPI definition for the workflow.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param options The options parameters.\n   */\n  listSwagger(\n    resourceGroupName: string,\n    workflowName: string,\n    options?: WorkflowsListSwaggerOptionalParams\n  ): Promise<WorkflowsListSwaggerResponse>;\n  /**\n   * Moves an existing workflow.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param move The workflow to move.\n   * @param options The options parameters.\n   */\n  beginMove(\n    resourceGroupName: string,\n    workflowName: string,\n    move: WorkflowReference,\n    options?: WorkflowsMoveOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>>;\n  /**\n   * Moves an existing workflow.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param move The workflow to move.\n   * @param options The options parameters.\n   */\n  beginMoveAndWait(\n    resourceGroupName: string,\n    workflowName: string,\n    move: WorkflowReference,\n    options?: WorkflowsMoveOptionalParams\n  ): Promise<void>;\n  /**\n   * Regenerates the callback URL access key for request triggers.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param keyType The access key type.\n   * @param options The options parameters.\n   */\n  regenerateAccessKey(\n    resourceGroupName: string,\n    workflowName: string,\n    keyType: RegenerateActionParameter,\n    options?: WorkflowsRegenerateAccessKeyOptionalParams\n  ): Promise<void>;\n  /**\n   * Validates the workflow.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param validate The workflow.\n   * @param options The options parameters.\n   */\n  validateByResourceGroup(\n    resourceGroupName: string,\n    workflowName: string,\n    validate: Workflow,\n    options?: WorkflowsValidateByResourceGroupOptionalParams\n  ): Promise<void>;\n  /**\n   * Validates the workflow definition.\n   * @param resourceGroupName The resource group name.\n   * @param location The workflow location.\n   * @param workflowName The workflow name.\n   * @param validate The workflow.\n   * @param options The options parameters.\n   */\n  validateByLocation(\n    resourceGroupName: string,\n    location: string,\n    workflowName: string,\n    validate: Workflow,\n    options?: WorkflowsValidateByLocationOptionalParams\n  ): Promise<void>;\n}\n"]}