{"version":3,"file":"integrationServiceEnvironmentNetworkHealth.js","sourceRoot":"","sources":["../../../src/operations/integrationServiceEnvironmentNetworkHealth.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;AAGH,uEAAiD;AACjD,sEAAgD;AAChD,4EAAsD;AAOtD,8EAA8E;AAC9E,MAAa,8CAA8C;IAIzD;;;OAGG;IACH,YAAY,MAA6B;QACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACH,GAAG,CACD,aAAqB,EACrB,iCAAyC,EACzC,OAAqE;QAErE,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,aAAa,EAAE,iCAAiC,EAAE,OAAO,EAAE,EAC7D,gBAAgB,CACjB,CAAC;IACJ,CAAC;CACF;AA5BD,wGA4BC;AACD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,gBAAgB,GAA6B;IACjD,IAAI,EACF,4KAA4K;IAC9K,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE;gBACV,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE;wBACL,IAAI,EAAE;4BACJ,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,kDAAkD;yBAC9D;qBACF;iBACF;aACF;SACF;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,aAAa;SAClC;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE;QACb,UAAU,CAAC,KAAK;QAChB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,aAAa;QACxB,UAAU,CAAC,iCAAiC;KAC7C;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { IntegrationServiceEnvironmentNetworkHealth } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { LogicManagementClient } from \"../logicManagementClient.js\";\nimport {\n  IntegrationServiceEnvironmentNetworkHealthGetOptionalParams,\n  IntegrationServiceEnvironmentNetworkHealthGetResponse\n} from \"../models/index.js\";\n\n/** Class containing IntegrationServiceEnvironmentNetworkHealth operations. */\nexport class IntegrationServiceEnvironmentNetworkHealthImpl\n  implements IntegrationServiceEnvironmentNetworkHealth {\n  private readonly client: LogicManagementClient;\n\n  /**\n   * Initialize a new instance of the class IntegrationServiceEnvironmentNetworkHealth class.\n   * @param client Reference to the service client\n   */\n  constructor(client: LogicManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets the integration service environment network health.\n   * @param resourceGroup The resource group.\n   * @param integrationServiceEnvironmentName The integration service environment name.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroup: string,\n    integrationServiceEnvironmentName: string,\n    options?: IntegrationServiceEnvironmentNetworkHealthGetOptionalParams\n  ): Promise<IntegrationServiceEnvironmentNetworkHealthGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroup, integrationServiceEnvironmentName, options },\n      getOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/health/network\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"Composite\",\n              className: \"IntegrationServiceEnvironmentSubnetNetworkHealth\"\n            }\n          }\n        }\n      }\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroup,\n    Parameters.integrationServiceEnvironmentName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}