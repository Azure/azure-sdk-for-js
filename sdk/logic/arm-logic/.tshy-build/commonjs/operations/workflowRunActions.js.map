{"version":3,"file":"workflowRunActions.js","sourceRoot":"","sources":["../../../src/operations/workflowRunActions.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { WorkflowRunActions } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { LogicManagementClient } from \"../logicManagementClient.js\";\nimport {\n  WorkflowRunAction,\n  WorkflowRunActionsListNextOptionalParams,\n  WorkflowRunActionsListOptionalParams,\n  WorkflowRunActionsListResponse,\n  ExpressionRoot,\n  WorkflowRunActionsListExpressionTracesOptionalParams,\n  WorkflowRunActionsListExpressionTracesResponse,\n  WorkflowRunActionsGetOptionalParams,\n  WorkflowRunActionsGetResponse,\n  WorkflowRunActionsListNextResponse\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing WorkflowRunActions operations. */\nexport class WorkflowRunActionsImpl implements WorkflowRunActions {\n  private readonly client: LogicManagementClient;\n\n  /**\n   * Initialize a new instance of the class WorkflowRunActions class.\n   * @param client Reference to the service client\n   */\n  constructor(client: LogicManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets a list of workflow run actions.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param runName The workflow run name.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    workflowName: string,\n    runName: string,\n    options?: WorkflowRunActionsListOptionalParams\n  ): PagedAsyncIterableIterator<WorkflowRunAction> {\n    const iter = this.listPagingAll(\n      resourceGroupName,\n      workflowName,\n      runName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          workflowName,\n          runName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    workflowName: string,\n    runName: string,\n    options?: WorkflowRunActionsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<WorkflowRunAction[]> {\n    let result: WorkflowRunActionsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(\n        resourceGroupName,\n        workflowName,\n        runName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        workflowName,\n        runName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    workflowName: string,\n    runName: string,\n    options?: WorkflowRunActionsListOptionalParams\n  ): AsyncIterableIterator<WorkflowRunAction> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      workflowName,\n      runName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists a workflow run expression trace.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param runName The workflow run name.\n   * @param actionName The workflow action name.\n   * @param options The options parameters.\n   */\n  public listExpressionTraces(\n    resourceGroupName: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    options?: WorkflowRunActionsListExpressionTracesOptionalParams\n  ): PagedAsyncIterableIterator<ExpressionRoot> {\n    const iter = this.listExpressionTracesPagingAll(\n      resourceGroupName,\n      workflowName,\n      runName,\n      actionName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listExpressionTracesPagingPage(\n          resourceGroupName,\n          workflowName,\n          runName,\n          actionName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listExpressionTracesPagingPage(\n    resourceGroupName: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    options?: WorkflowRunActionsListExpressionTracesOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<ExpressionRoot[]> {\n    let result: WorkflowRunActionsListExpressionTracesResponse;\n    result = await this._listExpressionTraces(\n      resourceGroupName,\n      workflowName,\n      runName,\n      actionName,\n      options\n    );\n    yield result.inputs || [];\n  }\n\n  private async *listExpressionTracesPagingAll(\n    resourceGroupName: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    options?: WorkflowRunActionsListExpressionTracesOptionalParams\n  ): AsyncIterableIterator<ExpressionRoot> {\n    for await (const page of this.listExpressionTracesPagingPage(\n      resourceGroupName,\n      workflowName,\n      runName,\n      actionName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets a list of workflow run actions.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param runName The workflow run name.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    workflowName: string,\n    runName: string,\n    options?: WorkflowRunActionsListOptionalParams\n  ): Promise<WorkflowRunActionsListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, workflowName, runName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * Gets a workflow run action.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param runName The workflow run name.\n   * @param actionName The workflow action name.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    options?: WorkflowRunActionsGetOptionalParams\n  ): Promise<WorkflowRunActionsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, workflowName, runName, actionName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Lists a workflow run expression trace.\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param runName The workflow run name.\n   * @param actionName The workflow action name.\n   * @param options The options parameters.\n   */\n  private _listExpressionTraces(\n    resourceGroupName: string,\n    workflowName: string,\n    runName: string,\n    actionName: string,\n    options?: WorkflowRunActionsListExpressionTracesOptionalParams\n  ): Promise<WorkflowRunActionsListExpressionTracesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, workflowName, runName, actionName, options },\n      listExpressionTracesOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The resource group name.\n   * @param workflowName The workflow name.\n   * @param runName The workflow run name.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    workflowName: string,\n    runName: string,\n    nextLink: string,\n    options?: WorkflowRunActionsListNextOptionalParams\n  ): Promise<WorkflowRunActionsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, workflowName, runName, nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.WorkflowRunActionListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.workflowName,\n    Parameters.runName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.WorkflowRunAction\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.workflowName,\n    Parameters.runName,\n    Parameters.actionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listExpressionTracesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/listExpressionTraces\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ExpressionTraces\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.workflowName,\n    Parameters.runName,\n    Parameters.actionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.WorkflowRunActionListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.workflowName,\n    Parameters.nextLink,\n    Parameters.runName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}