"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationServiceEnvironmentNetworkHealthImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing IntegrationServiceEnvironmentNetworkHealth operations. */
class IntegrationServiceEnvironmentNetworkHealthImpl {
    /**
     * Initialize a new instance of the class IntegrationServiceEnvironmentNetworkHealth class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the integration service environment network health.
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param options The options parameters.
     */
    get(resourceGroup, integrationServiceEnvironmentName, options) {
        return this.client.sendOperationRequest({ resourceGroup, integrationServiceEnvironmentName, options }, getOperationSpec);
    }
}
exports.IntegrationServiceEnvironmentNetworkHealthImpl = IntegrationServiceEnvironmentNetworkHealthImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/health/network",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "IntegrationServiceEnvironmentSubnetNetworkHealth"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroup,
        Parameters.integrationServiceEnvironmentName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=integrationServiceEnvironmentNetworkHealth.js.map