"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogicManagementClient = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const coreRestPipeline = tslib_1.__importStar(require("@azure/core-rest-pipeline"));
const index_js_1 = require("./operations/index.js");
class LogicManagementClient extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the LogicManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription id.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-logic/8.2.1`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2019-05-01";
        this.workflows = new index_js_1.WorkflowsImpl(this);
        this.workflowVersions = new index_js_1.WorkflowVersionsImpl(this);
        this.workflowTriggers = new index_js_1.WorkflowTriggersImpl(this);
        this.workflowVersionTriggers = new index_js_1.WorkflowVersionTriggersImpl(this);
        this.workflowTriggerHistories = new index_js_1.WorkflowTriggerHistoriesImpl(this);
        this.workflowRuns = new index_js_1.WorkflowRunsImpl(this);
        this.workflowRunActions = new index_js_1.WorkflowRunActionsImpl(this);
        this.workflowRunActionRepetitions = new index_js_1.WorkflowRunActionRepetitionsImpl(this);
        this.workflowRunActionRepetitionsRequestHistories = new index_js_1.WorkflowRunActionRepetitionsRequestHistoriesImpl(this);
        this.workflowRunActionRequestHistories = new index_js_1.WorkflowRunActionRequestHistoriesImpl(this);
        this.workflowRunActionScopeRepetitions = new index_js_1.WorkflowRunActionScopeRepetitionsImpl(this);
        this.workflowRunOperations = new index_js_1.WorkflowRunOperationsImpl(this);
        this.integrationAccounts = new index_js_1.IntegrationAccountsImpl(this);
        this.integrationAccountAssemblies = new index_js_1.IntegrationAccountAssembliesImpl(this);
        this.integrationAccountBatchConfigurations = new index_js_1.IntegrationAccountBatchConfigurationsImpl(this);
        this.integrationAccountSchemas = new index_js_1.IntegrationAccountSchemasImpl(this);
        this.integrationAccountMaps = new index_js_1.IntegrationAccountMapsImpl(this);
        this.integrationAccountPartners = new index_js_1.IntegrationAccountPartnersImpl(this);
        this.integrationAccountAgreements = new index_js_1.IntegrationAccountAgreementsImpl(this);
        this.integrationAccountCertificates = new index_js_1.IntegrationAccountCertificatesImpl(this);
        this.integrationAccountSessions = new index_js_1.IntegrationAccountSessionsImpl(this);
        this.integrationServiceEnvironments = new index_js_1.IntegrationServiceEnvironmentsImpl(this);
        this.integrationServiceEnvironmentSkus = new index_js_1.IntegrationServiceEnvironmentSkusImpl(this);
        this.integrationServiceEnvironmentNetworkHealth = new index_js_1.IntegrationServiceEnvironmentNetworkHealthImpl(this);
        this.integrationServiceEnvironmentManagedApis = new index_js_1.IntegrationServiceEnvironmentManagedApisImpl(this);
        this.integrationServiceEnvironmentManagedApiOperations = new index_js_1.IntegrationServiceEnvironmentManagedApiOperationsImpl(this);
        this.operations = new index_js_1.OperationsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            async sendRequest(request, next) {
                const param = request.url.split("?");
                if (param.length > 1) {
                    const newParams = param[1].split("&").map((item) => {
                        if (item.indexOf("api-version") > -1) {
                            return "api-version=" + apiVersion;
                        }
                        else {
                            return item;
                        }
                    });
                    request.url = param[0] + "?" + newParams.join("&");
                }
                return next(request);
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}
exports.LogicManagementClient = LogicManagementClient;
//# sourceMappingURL=logicManagementClient.js.map