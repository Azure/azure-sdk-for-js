"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.session = exports.sessionName = exports.certificate = exports.certificateName = exports.agreement = exports.agreementName = exports.partner = exports.partnerName = exports.map = exports.mapName = exports.listContentCallbackUrl = exports.schema = exports.schemaName = exports.batchConfiguration = exports.batchConfigurationName = exports.assemblyArtifact = exports.assemblyArtifactName = exports.regenerateAccessKey = exports.logTrackingEvents = exports.listKeyVaultKeys = exports.parameters2 = exports.integrationAccount = exports.integrationAccountName = exports.operationId = exports.requestHistoryName = exports.repetitionName = exports.actionName = exports.runName = exports.historyName = exports.parameters1 = exports.setState = exports.triggerName = exports.versionId = exports.nextLink = exports.location = exports.validate = exports.keyType = exports.move = exports.listCallbackUrl = exports.parameters = exports.workflow = exports.contentType = exports.workflowName = exports.resourceGroupName = exports.filter = exports.top = exports.apiVersion = exports.subscriptionId = exports.$host = exports.accept = void 0;
exports.integrationServiceEnvironmentManagedApi = exports.apiName = exports.integrationServiceEnvironment = exports.integrationServiceEnvironmentName = exports.resourceGroup = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
exports.$host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2019-05-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
exports.top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
exports.filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
exports.resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.workflowName = {
    parameterPath: "workflowName",
    mapper: {
        serializedName: "workflowName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
exports.workflow = {
    parameterPath: "workflow",
    mapper: mappers_js_1.Workflow
};
exports.parameters = {
    parameterPath: "parameters",
    mapper: mappers_js_1.GenerateUpgradedDefinitionParameters
};
exports.listCallbackUrl = {
    parameterPath: "listCallbackUrl",
    mapper: mappers_js_1.GetCallbackUrlParameters
};
exports.move = {
    parameterPath: "move",
    mapper: mappers_js_1.WorkflowReference
};
exports.keyType = {
    parameterPath: "keyType",
    mapper: mappers_js_1.RegenerateActionParameter
};
exports.validate = {
    parameterPath: "validate",
    mapper: mappers_js_1.Workflow
};
exports.location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.versionId = {
    parameterPath: "versionId",
    mapper: {
        serializedName: "versionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.triggerName = {
    parameterPath: "triggerName",
    mapper: {
        serializedName: "triggerName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.setState = {
    parameterPath: "setState",
    mapper: mappers_js_1.SetTriggerStateActionDefinition
};
exports.parameters1 = {
    parameterPath: ["options", "parameters"],
    mapper: mappers_js_1.GetCallbackUrlParameters
};
exports.historyName = {
    parameterPath: "historyName",
    mapper: {
        serializedName: "historyName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.runName = {
    parameterPath: "runName",
    mapper: {
        serializedName: "runName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.actionName = {
    parameterPath: "actionName",
    mapper: {
        serializedName: "actionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.repetitionName = {
    parameterPath: "repetitionName",
    mapper: {
        serializedName: "repetitionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.requestHistoryName = {
    parameterPath: "requestHistoryName",
    mapper: {
        serializedName: "requestHistoryName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.integrationAccountName = {
    parameterPath: "integrationAccountName",
    mapper: {
        serializedName: "integrationAccountName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.integrationAccount = {
    parameterPath: "integrationAccount",
    mapper: mappers_js_1.IntegrationAccount
};
exports.parameters2 = {
    parameterPath: "parameters",
    mapper: mappers_js_1.GetCallbackUrlParameters
};
exports.listKeyVaultKeys = {
    parameterPath: "listKeyVaultKeys",
    mapper: mappers_js_1.ListKeyVaultKeysDefinition
};
exports.logTrackingEvents = {
    parameterPath: "logTrackingEvents",
    mapper: mappers_js_1.TrackingEventsDefinition
};
exports.regenerateAccessKey = {
    parameterPath: "regenerateAccessKey",
    mapper: mappers_js_1.RegenerateActionParameter
};
exports.assemblyArtifactName = {
    parameterPath: "assemblyArtifactName",
    mapper: {
        serializedName: "assemblyArtifactName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.assemblyArtifact = {
    parameterPath: "assemblyArtifact",
    mapper: mappers_js_1.AssemblyDefinition
};
exports.batchConfigurationName = {
    parameterPath: "batchConfigurationName",
    mapper: {
        serializedName: "batchConfigurationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.batchConfiguration = {
    parameterPath: "batchConfiguration",
    mapper: mappers_js_1.BatchConfiguration
};
exports.schemaName = {
    parameterPath: "schemaName",
    mapper: {
        serializedName: "schemaName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.schema = {
    parameterPath: "schema",
    mapper: mappers_js_1.IntegrationAccountSchema
};
exports.listContentCallbackUrl = {
    parameterPath: "listContentCallbackUrl",
    mapper: mappers_js_1.GetCallbackUrlParameters
};
exports.mapName = {
    parameterPath: "mapName",
    mapper: {
        serializedName: "mapName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.map = {
    parameterPath: "map",
    mapper: mappers_js_1.IntegrationAccountMap
};
exports.partnerName = {
    parameterPath: "partnerName",
    mapper: {
        serializedName: "partnerName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.partner = {
    parameterPath: "partner",
    mapper: mappers_js_1.IntegrationAccountPartner
};
exports.agreementName = {
    parameterPath: "agreementName",
    mapper: {
        serializedName: "agreementName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.agreement = {
    parameterPath: "agreement",
    mapper: mappers_js_1.IntegrationAccountAgreement
};
exports.certificateName = {
    parameterPath: "certificateName",
    mapper: {
        serializedName: "certificateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.certificate = {
    parameterPath: "certificate",
    mapper: mappers_js_1.IntegrationAccountCertificate
};
exports.sessionName = {
    parameterPath: "sessionName",
    mapper: {
        serializedName: "sessionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.session = {
    parameterPath: "session",
    mapper: mappers_js_1.IntegrationAccountSession
};
exports.resourceGroup = {
    parameterPath: "resourceGroup",
    mapper: {
        serializedName: "resourceGroup",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.integrationServiceEnvironmentName = {
    parameterPath: "integrationServiceEnvironmentName",
    mapper: {
        serializedName: "integrationServiceEnvironmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.integrationServiceEnvironment = {
    parameterPath: "integrationServiceEnvironment",
    mapper: mappers_js_1.IntegrationServiceEnvironment
};
exports.apiName = {
    parameterPath: "apiName",
    mapper: {
        serializedName: "apiName",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.integrationServiceEnvironmentManagedApi = {
    parameterPath: "integrationServiceEnvironmentManagedApi",
    mapper: mappers_js_1.IntegrationServiceEnvironmentManagedApi
};
//# sourceMappingURL=parameters.js.map