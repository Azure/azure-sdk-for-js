/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Workflow,
  WorkflowsListBySubscriptionOptionalParams,
  WorkflowsListByResourceGroupOptionalParams,
  WorkflowsGetOptionalParams,
  WorkflowsGetResponse,
  WorkflowsCreateOrUpdateOptionalParams,
  WorkflowsCreateOrUpdateResponse,
  WorkflowsUpdateOptionalParams,
  WorkflowsUpdateResponse,
  WorkflowsDeleteOptionalParams,
  WorkflowsDisableOptionalParams,
  WorkflowsEnableOptionalParams,
  GenerateUpgradedDefinitionParameters,
  WorkflowsGenerateUpgradedDefinitionOptionalParams,
  WorkflowsGenerateUpgradedDefinitionResponse,
  GetCallbackUrlParameters,
  WorkflowsListCallbackUrlOptionalParams,
  WorkflowsListCallbackUrlResponse,
  WorkflowsListSwaggerOptionalParams,
  WorkflowsListSwaggerResponse,
  WorkflowReference,
  WorkflowsMoveOptionalParams,
  RegenerateActionParameter,
  WorkflowsRegenerateAccessKeyOptionalParams,
  WorkflowsValidateByResourceGroupOptionalParams,
  WorkflowsValidateByLocationOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Workflows. */
export interface Workflows {
  /**
   * Gets a list of workflows by subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: WorkflowsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Workflow>;
  /**
   * Gets a list of workflows by resource group.
   * @param resourceGroupName The resource group name.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: WorkflowsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Workflow>;
  /**
   * Gets a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsGetOptionalParams
  ): Promise<WorkflowsGetResponse>;
  /**
   * Creates or updates a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param workflow The workflow.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    workflowName: string,
    workflow: Workflow,
    options?: WorkflowsCreateOrUpdateOptionalParams
  ): Promise<WorkflowsCreateOrUpdateResponse>;
  /**
   * Updates a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsUpdateOptionalParams
  ): Promise<WorkflowsUpdateResponse>;
  /**
   * Deletes a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Disables a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  disable(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsDisableOptionalParams
  ): Promise<void>;
  /**
   * Enables a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  enable(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsEnableOptionalParams
  ): Promise<void>;
  /**
   * Generates the upgraded definition for a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param parameters Parameters for generating an upgraded definition.
   * @param options The options parameters.
   */
  generateUpgradedDefinition(
    resourceGroupName: string,
    workflowName: string,
    parameters: GenerateUpgradedDefinitionParameters,
    options?: WorkflowsGenerateUpgradedDefinitionOptionalParams
  ): Promise<WorkflowsGenerateUpgradedDefinitionResponse>;
  /**
   * Get the workflow callback Url.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param listCallbackUrl Which callback url to list.
   * @param options The options parameters.
   */
  listCallbackUrl(
    resourceGroupName: string,
    workflowName: string,
    listCallbackUrl: GetCallbackUrlParameters,
    options?: WorkflowsListCallbackUrlOptionalParams
  ): Promise<WorkflowsListCallbackUrlResponse>;
  /**
   * Gets an OpenAPI definition for the workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  listSwagger(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsListSwaggerOptionalParams
  ): Promise<WorkflowsListSwaggerResponse>;
  /**
   * Moves an existing workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param move The workflow to move.
   * @param options The options parameters.
   */
  beginMove(
    resourceGroupName: string,
    workflowName: string,
    move: WorkflowReference,
    options?: WorkflowsMoveOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Moves an existing workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param move The workflow to move.
   * @param options The options parameters.
   */
  beginMoveAndWait(
    resourceGroupName: string,
    workflowName: string,
    move: WorkflowReference,
    options?: WorkflowsMoveOptionalParams
  ): Promise<void>;
  /**
   * Regenerates the callback URL access key for request triggers.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param keyType The access key type.
   * @param options The options parameters.
   */
  regenerateAccessKey(
    resourceGroupName: string,
    workflowName: string,
    keyType: RegenerateActionParameter,
    options?: WorkflowsRegenerateAccessKeyOptionalParams
  ): Promise<void>;
  /**
   * Validates the workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param validate The workflow.
   * @param options The options parameters.
   */
  validateByResourceGroup(
    resourceGroupName: string,
    workflowName: string,
    validate: Workflow,
    options?: WorkflowsValidateByResourceGroupOptionalParams
  ): Promise<void>;
  /**
   * Validates the workflow definition.
   * @param resourceGroupName The resource group name.
   * @param location The workflow location.
   * @param workflowName The workflow name.
   * @param validate The workflow.
   * @param options The options parameters.
   */
  validateByLocation(
    resourceGroupName: string,
    location: string,
    workflowName: string,
    validate: Workflow,
    options?: WorkflowsValidateByLocationOptionalParams
  ): Promise<void>;
}
