/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  Workflow as WorkflowMapper,
  GenerateUpgradedDefinitionParameters as GenerateUpgradedDefinitionParametersMapper,
  GetCallbackUrlParameters as GetCallbackUrlParametersMapper,
  WorkflowReference as WorkflowReferenceMapper,
  RegenerateActionParameter as RegenerateActionParameterMapper,
  SetTriggerStateActionDefinition as SetTriggerStateActionDefinitionMapper,
  IntegrationAccount as IntegrationAccountMapper,
  ListKeyVaultKeysDefinition as ListKeyVaultKeysDefinitionMapper,
  TrackingEventsDefinition as TrackingEventsDefinitionMapper,
  AssemblyDefinition as AssemblyDefinitionMapper,
  BatchConfiguration as BatchConfigurationMapper,
  IntegrationAccountSchema as IntegrationAccountSchemaMapper,
  IntegrationAccountMap as IntegrationAccountMapMapper,
  IntegrationAccountPartner as IntegrationAccountPartnerMapper,
  IntegrationAccountAgreement as IntegrationAccountAgreementMapper,
  IntegrationAccountCertificate as IntegrationAccountCertificateMapper,
  IntegrationAccountSession as IntegrationAccountSessionMapper,
  IntegrationServiceEnvironment as IntegrationServiceEnvironmentMapper,
  IntegrationServiceEnvironmentManagedApi as IntegrationServiceEnvironmentManagedApiMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-05-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const workflowName: OperationURLParameter = {
  parameterPath: "workflowName",
  mapper: {
    serializedName: "workflowName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const workflow: OperationParameter = {
  parameterPath: "workflow",
  mapper: WorkflowMapper
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: GenerateUpgradedDefinitionParametersMapper
};

export const listCallbackUrl: OperationParameter = {
  parameterPath: "listCallbackUrl",
  mapper: GetCallbackUrlParametersMapper
};

export const move: OperationParameter = {
  parameterPath: "move",
  mapper: WorkflowReferenceMapper
};

export const keyType: OperationParameter = {
  parameterPath: "keyType",
  mapper: RegenerateActionParameterMapper
};

export const validate: OperationParameter = {
  parameterPath: "validate",
  mapper: WorkflowMapper
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const versionId: OperationURLParameter = {
  parameterPath: "versionId",
  mapper: {
    serializedName: "versionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const triggerName: OperationURLParameter = {
  parameterPath: "triggerName",
  mapper: {
    serializedName: "triggerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const setState: OperationParameter = {
  parameterPath: "setState",
  mapper: SetTriggerStateActionDefinitionMapper
};

export const parameters1: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: GetCallbackUrlParametersMapper
};

export const historyName: OperationURLParameter = {
  parameterPath: "historyName",
  mapper: {
    serializedName: "historyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const runName: OperationURLParameter = {
  parameterPath: "runName",
  mapper: {
    serializedName: "runName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const actionName: OperationURLParameter = {
  parameterPath: "actionName",
  mapper: {
    serializedName: "actionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const repetitionName: OperationURLParameter = {
  parameterPath: "repetitionName",
  mapper: {
    serializedName: "repetitionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const requestHistoryName: OperationURLParameter = {
  parameterPath: "requestHistoryName",
  mapper: {
    serializedName: "requestHistoryName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const operationId: OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const integrationAccountName: OperationURLParameter = {
  parameterPath: "integrationAccountName",
  mapper: {
    serializedName: "integrationAccountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const integrationAccount: OperationParameter = {
  parameterPath: "integrationAccount",
  mapper: IntegrationAccountMapper
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: GetCallbackUrlParametersMapper
};

export const listKeyVaultKeys: OperationParameter = {
  parameterPath: "listKeyVaultKeys",
  mapper: ListKeyVaultKeysDefinitionMapper
};

export const logTrackingEvents: OperationParameter = {
  parameterPath: "logTrackingEvents",
  mapper: TrackingEventsDefinitionMapper
};

export const regenerateAccessKey: OperationParameter = {
  parameterPath: "regenerateAccessKey",
  mapper: RegenerateActionParameterMapper
};

export const assemblyArtifactName: OperationURLParameter = {
  parameterPath: "assemblyArtifactName",
  mapper: {
    serializedName: "assemblyArtifactName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const assemblyArtifact: OperationParameter = {
  parameterPath: "assemblyArtifact",
  mapper: AssemblyDefinitionMapper
};

export const batchConfigurationName: OperationURLParameter = {
  parameterPath: "batchConfigurationName",
  mapper: {
    serializedName: "batchConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const batchConfiguration: OperationParameter = {
  parameterPath: "batchConfiguration",
  mapper: BatchConfigurationMapper
};

export const schemaName: OperationURLParameter = {
  parameterPath: "schemaName",
  mapper: {
    serializedName: "schemaName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const schema: OperationParameter = {
  parameterPath: "schema",
  mapper: IntegrationAccountSchemaMapper
};

export const listContentCallbackUrl: OperationParameter = {
  parameterPath: "listContentCallbackUrl",
  mapper: GetCallbackUrlParametersMapper
};

export const mapName: OperationURLParameter = {
  parameterPath: "mapName",
  mapper: {
    serializedName: "mapName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const map: OperationParameter = {
  parameterPath: "map",
  mapper: IntegrationAccountMapMapper
};

export const partnerName: OperationURLParameter = {
  parameterPath: "partnerName",
  mapper: {
    serializedName: "partnerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const partner: OperationParameter = {
  parameterPath: "partner",
  mapper: IntegrationAccountPartnerMapper
};

export const agreementName: OperationURLParameter = {
  parameterPath: "agreementName",
  mapper: {
    serializedName: "agreementName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const agreement: OperationParameter = {
  parameterPath: "agreement",
  mapper: IntegrationAccountAgreementMapper
};

export const certificateName: OperationURLParameter = {
  parameterPath: "certificateName",
  mapper: {
    serializedName: "certificateName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const certificate: OperationParameter = {
  parameterPath: "certificate",
  mapper: IntegrationAccountCertificateMapper
};

export const sessionName: OperationURLParameter = {
  parameterPath: "sessionName",
  mapper: {
    serializedName: "sessionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const session: OperationParameter = {
  parameterPath: "session",
  mapper: IntegrationAccountSessionMapper
};

export const resourceGroup: OperationURLParameter = {
  parameterPath: "resourceGroup",
  mapper: {
    serializedName: "resourceGroup",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const integrationServiceEnvironmentName: OperationURLParameter = {
  parameterPath: "integrationServiceEnvironmentName",
  mapper: {
    serializedName: "integrationServiceEnvironmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const integrationServiceEnvironment: OperationParameter = {
  parameterPath: "integrationServiceEnvironment",
  mapper: IntegrationServiceEnvironmentMapper
};

export const apiName: OperationURLParameter = {
  parameterPath: "apiName",
  mapper: {
    serializedName: "apiName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const integrationServiceEnvironmentManagedApi: OperationParameter = {
  parameterPath: "integrationServiceEnvironmentManagedApi",
  mapper: IntegrationServiceEnvironmentManagedApiMapper
};
