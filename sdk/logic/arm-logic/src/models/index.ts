/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * The base resource type.
 */
export interface Resource extends BaseResource {
  /**
   * The resource id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Gets the resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Gets the resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The resource location.
   */
  location?: string;
  /**
   * The resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The sub resource type.
 */
export interface SubResource extends BaseResource {
  /**
   * The resource id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
}

/**
 * The resource reference.
 */
export interface ResourceReference {
  /**
   * The resource id.
   */
  id?: string;
  /**
   * Gets the resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Gets the resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The ip address.
 */
export interface IpAddress {
  /**
   * The address.
   */
  address?: string;
}

/**
 * The flow endpoints configuration.
 */
export interface FlowEndpoints {
  /**
   * The outgoing ip address.
   */
  outgoingIpAddresses?: IpAddress[];
  /**
   * The access endpoint ip address.
   */
  accessEndpointIpAddresses?: IpAddress[];
}

/**
 * The endpoints configuration.
 */
export interface FlowEndpointsConfiguration {
  /**
   * The workflow endpoints.
   */
  workflow?: FlowEndpoints;
  /**
   * The connector endpoints.
   */
  connector?: FlowEndpoints;
}

/**
 * The ip address range.
 */
export interface IpAddressRange {
  /**
   * The IP address range.
   */
  addressRange?: string;
}

/**
 * Open authentication policy claim.
 */
export interface OpenAuthenticationPolicyClaim {
  /**
   * The name of the claim.
   */
  name?: string;
  /**
   * The value of the claim.
   */
  value?: string;
}

/**
 * Open authentication access policy defined by user.
 */
export interface OpenAuthenticationAccessPolicy {
  /**
   * Type of provider for OAuth. Possible values include: 'AAD'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: OpenAuthenticationProviderType;
  /**
   * The access policy claims.
   */
  claims?: OpenAuthenticationPolicyClaim[];
}

/**
 * AuthenticationPolicy of type Open.
 */
export interface OpenAuthenticationAccessPolicies {
  /**
   * Open authentication policies.
   */
  policies?: { [propertyName: string]: OpenAuthenticationAccessPolicy };
}

/**
 * The access control configuration policy.
 */
export interface FlowAccessControlConfigurationPolicy {
  /**
   * The allowed caller IP address ranges.
   */
  allowedCallerIpAddresses?: IpAddressRange[];
  /**
   * The authentication policies for workflow.
   */
  openAuthenticationPolicies?: OpenAuthenticationAccessPolicies;
}

/**
 * The access control configuration.
 */
export interface FlowAccessControlConfiguration {
  /**
   * The access control configuration for invoking workflow triggers.
   */
  triggers?: FlowAccessControlConfigurationPolicy;
  /**
   * The access control configuration for accessing workflow run contents.
   */
  contents?: FlowAccessControlConfigurationPolicy;
  /**
   * The access control configuration for workflow actions.
   */
  actions?: FlowAccessControlConfigurationPolicy;
  /**
   * The access control configuration for workflow management.
   */
  workflowManagement?: FlowAccessControlConfigurationPolicy;
}

/**
 * The sku type.
 */
export interface Sku {
  /**
   * The name. Possible values include: 'NotSpecified', 'Free', 'Shared', 'Basic', 'Standard',
   * 'Premium'
   */
  name: SkuName;
  /**
   * The reference to plan.
   */
  plan?: ResourceReference;
}

/**
 * The workflow parameters.
 */
export interface WorkflowParameter {
  /**
   * The type. Possible values include: 'NotSpecified', 'String', 'SecureString', 'Int', 'Float',
   * 'Bool', 'Array', 'Object', 'SecureObject'
   */
  type?: ParameterType;
  /**
   * The value.
   */
  value?: any;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The description.
   */
  description?: string;
}

/**
 * The workflow type.
 */
export interface Workflow extends Resource {
  /**
   * Gets the provisioning state. Possible values include: 'NotSpecified', 'Accepted', 'Running',
   * 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded',
   * 'Moving', 'Updating', 'Registering', 'Registered', 'Unregistering', 'Unregistered',
   * 'Completed', 'Renewing', 'Pending', 'Waiting', 'InProgress'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: WorkflowProvisioningState;
  /**
   * Gets the created time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTime?: Date;
  /**
   * Gets the changed time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changedTime?: Date;
  /**
   * The state. Possible values include: 'NotSpecified', 'Completed', 'Enabled', 'Disabled',
   * 'Deleted', 'Suspended'
   */
  state?: WorkflowState;
  /**
   * Gets the version.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly version?: string;
  /**
   * Gets the access endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly accessEndpoint?: string;
  /**
   * The endpoints configuration.
   */
  endpointsConfiguration?: FlowEndpointsConfiguration;
  /**
   * The access control configuration.
   */
  accessControl?: FlowAccessControlConfiguration;
  /**
   * The sku.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sku?: Sku;
  /**
   * The integration account.
   */
  integrationAccount?: ResourceReference;
  /**
   * The integration service environment.
   */
  integrationServiceEnvironment?: ResourceReference;
  /**
   * The definition.
   */
  definition?: any;
  /**
   * The parameters.
   */
  parameters?: { [propertyName: string]: WorkflowParameter };
}

/**
 * The workflow filter.
 */
export interface WorkflowFilter {
  /**
   * The state of workflows. Possible values include: 'NotSpecified', 'Completed', 'Enabled',
   * 'Disabled', 'Deleted', 'Suspended'
   */
  state?: WorkflowState;
}

/**
 * The workflow version.
 */
export interface WorkflowVersion extends Resource {
  /**
   * The provisioning state. Possible values include: 'NotSpecified', 'Accepted', 'Running',
   * 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded',
   * 'Moving', 'Updating', 'Registering', 'Registered', 'Unregistering', 'Unregistered',
   * 'Completed', 'Renewing', 'Pending', 'Waiting', 'InProgress'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: WorkflowProvisioningState;
  /**
   * Gets the created time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTime?: Date;
  /**
   * Gets the changed time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changedTime?: Date;
  /**
   * The state. Possible values include: 'NotSpecified', 'Completed', 'Enabled', 'Disabled',
   * 'Deleted', 'Suspended'
   */
  state?: WorkflowState;
  /**
   * Gets the version.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly version?: string;
  /**
   * Gets the access endpoint.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly accessEndpoint?: string;
  /**
   * The endpoints configuration.
   */
  endpointsConfiguration?: FlowEndpointsConfiguration;
  /**
   * The access control configuration.
   */
  accessControl?: FlowAccessControlConfiguration;
  /**
   * The sku.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sku?: Sku;
  /**
   * The integration account.
   */
  integrationAccount?: ResourceReference;
  /**
   * The definition.
   */
  definition?: any;
  /**
   * The parameters.
   */
  parameters?: { [propertyName: string]: WorkflowParameter };
}

/**
 * The recurrence schedule occurrence.
 */
export interface RecurrenceScheduleOccurrence {
  /**
   * The day of the week. Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday',
   * 'Thursday', 'Friday', 'Saturday'
   */
  day?: DayOfWeek;
  /**
   * The occurrence.
   */
  occurrence?: number;
}

/**
 * The recurrence schedule.
 */
export interface RecurrenceSchedule {
  /**
   * The minutes.
   */
  minutes?: number[];
  /**
   * The hours.
   */
  hours?: number[];
  /**
   * The days of the week.
   */
  weekDays?: DaysOfWeek[];
  /**
   * The month days.
   */
  monthDays?: number[];
  /**
   * The monthly occurrences.
   */
  monthlyOccurrences?: RecurrenceScheduleOccurrence[];
}

/**
 * The workflow trigger recurrence.
 */
export interface WorkflowTriggerRecurrence {
  /**
   * The frequency. Possible values include: 'NotSpecified', 'Second', 'Minute', 'Hour', 'Day',
   * 'Week', 'Month', 'Year'
   */
  frequency?: RecurrenceFrequency;
  /**
   * The interval.
   */
  interval?: number;
  /**
   * The start time.
   */
  startTime?: string;
  /**
   * The end time.
   */
  endTime?: string;
  /**
   * The time zone.
   */
  timeZone?: string;
  /**
   * The recurrence schedule.
   */
  schedule?: RecurrenceSchedule;
}

/**
 * The workflow trigger.
 */
export interface WorkflowTrigger extends SubResource {
  /**
   * Gets the provisioning state. Possible values include: 'NotSpecified', 'Accepted', 'Running',
   * 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded',
   * 'Moving', 'Updating', 'Registering', 'Registered', 'Unregistering', 'Unregistered',
   * 'Completed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: WorkflowTriggerProvisioningState;
  /**
   * Gets the created time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTime?: Date;
  /**
   * Gets the changed time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changedTime?: Date;
  /**
   * Gets the state. Possible values include: 'NotSpecified', 'Completed', 'Enabled', 'Disabled',
   * 'Deleted', 'Suspended'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: WorkflowState;
  /**
   * Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting',
   * 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
   * 'Ignored'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the last execution time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastExecutionTime?: Date;
  /**
   * Gets the next execution time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextExecutionTime?: Date;
  /**
   * Gets the workflow trigger recurrence.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recurrence?: WorkflowTriggerRecurrence;
  /**
   * Gets the reference to workflow.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly workflow?: ResourceReference;
  /**
   * Gets the workflow trigger name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Gets the workflow trigger type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The workflow trigger filter.
 */
export interface WorkflowTriggerFilter {
  /**
   * The state of workflow trigger. Possible values include: 'NotSpecified', 'Completed',
   * 'Enabled', 'Disabled', 'Deleted', 'Suspended'
   */
  state?: WorkflowState;
}

/**
 * Gets the workflow trigger callback URL query parameters.
 */
export interface WorkflowTriggerListCallbackUrlQueries {
  /**
   * The api version.
   */
  apiVersion?: string;
  /**
   * The SAS permissions.
   */
  sp?: string;
  /**
   * The SAS version.
   */
  sv?: string;
  /**
   * The SAS signature.
   */
  sig?: string;
  /**
   * The SAS timestamp.
   */
  se?: string;
}

/**
 * The workflow trigger callback URL.
 */
export interface WorkflowTriggerCallbackUrl {
  /**
   * Gets the workflow trigger callback URL.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: string;
  /**
   * Gets the workflow trigger callback URL HTTP method.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly method?: string;
  /**
   * Gets the workflow trigger callback URL base path.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly basePath?: string;
  /**
   * Gets the workflow trigger callback URL relative path.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly relativePath?: string;
  /**
   * Gets the workflow trigger callback URL relative path parameters.
   */
  relativePathParameters?: string[];
  /**
   * Gets the workflow trigger callback URL query parameters.
   */
  queries?: WorkflowTriggerListCallbackUrlQueries;
}

/**
 * The correlation property.
 */
export interface Correlation {
  /**
   * The client tracking id.
   */
  clientTrackingId?: string;
}

/**
 * The content hash.
 */
export interface ContentHash {
  /**
   * The algorithm of the content hash.
   */
  algorithm?: string;
  /**
   * The value of the content hash.
   */
  value?: string;
}

/**
 * The content link.
 */
export interface ContentLink {
  /**
   * The content link URI.
   */
  uri?: string;
  /**
   * The content version.
   */
  contentVersion?: string;
  /**
   * The content size.
   */
  contentSize?: number;
  /**
   * The content hash.
   */
  contentHash?: ContentHash;
  /**
   * The metadata.
   */
  metadata?: any;
}

/**
 * The workflow trigger history.
 */
export interface WorkflowTriggerHistory extends SubResource {
  /**
   * Gets the start time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: Date;
  /**
   * The scheduled time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledTime?: Date;
  /**
   * Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting',
   * 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
   * 'Ignored'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * Gets the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: any;
  /**
   * Gets the tracking id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackingId?: string;
  /**
   * The run correlation.
   */
  correlation?: Correlation;
  /**
   * Gets the link to input parameters.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the link to output parameters.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outputsLink?: ContentLink;
  /**
   * The value indicating whether trigger was fired.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fired?: boolean;
  /**
   * Gets the reference to workflow run.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly run?: ResourceReference;
  /**
   * Gets the workflow trigger history name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Gets the workflow trigger history type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The workflow trigger history filter.
 */
export interface WorkflowTriggerHistoryFilter {
  /**
   * The status of workflow trigger history. Possible values include: 'NotSpecified', 'Paused',
   * 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted',
   * 'TimedOut', 'Aborted', 'Ignored'
   */
  status?: WorkflowStatus;
}

/**
 * The workflow run trigger.
 */
export interface WorkflowRunTrigger {
  /**
   * Gets the name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Gets the inputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly inputs?: any;
  /**
   * Gets the link to inputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the outputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outputs?: any;
  /**
   * Gets the link to outputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the scheduled time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scheduledTime?: Date;
  /**
   * Gets the start time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: Date;
  /**
   * Gets the tracking id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackingId?: string;
  /**
   * The run correlation.
   */
  correlation?: Correlation;
  /**
   * Gets the code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting',
   * 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
   * 'Ignored'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: any;
  /**
   * Gets the tracked properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackedProperties?: any;
}

/**
 * The workflow output parameter.
 */
export interface WorkflowOutputParameter extends WorkflowParameter {
  /**
   * Gets the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: any;
}

/**
 * The workflow run.
 */
export interface WorkflowRun extends SubResource {
  /**
   * Gets the wait end time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly waitEndTime?: Date;
  /**
   * Gets the start time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: Date;
  /**
   * Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting',
   * 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
   * 'Ignored'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * Gets the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: any;
  /**
   * Gets the correlation id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly correlationId?: string;
  /**
   * The run correlation.
   */
  correlation?: Correlation;
  /**
   * Gets the reference to workflow version.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly workflow?: ResourceReference;
  /**
   * Gets the fired trigger.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trigger?: WorkflowRunTrigger;
  /**
   * Gets the outputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outputs?: { [propertyName: string]: WorkflowOutputParameter };
  /**
   * Gets the response of the flow run.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly response?: WorkflowRunTrigger;
  /**
   * Gets the workflow run name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Gets the workflow run type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The workflow run filter.
 */
export interface WorkflowRunFilter {
  /**
   * The status of workflow run. Possible values include: 'NotSpecified', 'Paused', 'Running',
   * 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut',
   * 'Aborted', 'Ignored'
   */
  status?: WorkflowStatus;
}

/**
 * The correlation properties.
 */
export interface RunCorrelation {
  /**
   * The client tracking identifier.
   */
  clientTrackingId?: string;
  /**
   * The client keywords.
   */
  clientKeywords?: string[];
}

/**
 * The workflow run action correlation properties.
 */
export interface RunActionCorrelation extends RunCorrelation {
  /**
   * The action tracking identifier.
   */
  actionTrackingId?: string;
}

/**
 * Error properties indicate why the Logic service was not able to process the incoming request.
 * The reason is provided in the error message.
 */
export interface ErrorProperties {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message indicating why the operation failed.
   */
  message?: string;
}

/**
 * Error response indicates Logic service is not able to process the incoming request. The error
 * property contains the error details.
 */
export interface ErrorResponse {
  /**
   * The error properties.
   */
  error?: ErrorProperties;
}

/**
 * The retry history.
 */
export interface RetryHistory {
  /**
   * Gets the start time.
   */
  startTime?: Date;
  /**
   * Gets the end time.
   */
  endTime?: Date;
  /**
   * Gets the status code.
   */
  code?: string;
  /**
   * Gets the client request Id.
   */
  clientRequestId?: string;
  /**
   * Gets the service request Id.
   */
  serviceRequestId?: string;
  /**
   * Gets the error response.
   */
  error?: ErrorResponse;
}

/**
 * The workflow run action.
 */
export interface WorkflowRunAction extends SubResource {
  /**
   * Gets the start time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: Date;
  /**
   * Gets the end time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: Date;
  /**
   * Gets the status. Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting',
   * 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted',
   * 'Ignored'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: WorkflowStatus;
  /**
   * Gets the code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * Gets the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: any;
  /**
   * Gets the tracking id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackingId?: string;
  /**
   * The correlation properties.
   */
  correlation?: RunActionCorrelation;
  /**
   * Gets the link to inputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the link to outputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the tracked properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackedProperties?: any;
  /**
   * Gets the retry histories.
   */
  retryHistory?: RetryHistory[];
  /**
   * Gets the workflow run action name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Gets the workflow run action type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The workflow run action filter.
 */
export interface WorkflowRunActionFilter {
  /**
   * The status of workflow run action. Possible values include: 'NotSpecified', 'Paused',
   * 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed', 'Faulted',
   * 'TimedOut', 'Aborted', 'Ignored'
   */
  status?: WorkflowStatus;
}

/**
 * The access key regenerate action content.
 */
export interface RegenerateActionParameter {
  /**
   * The key type. Possible values include: 'NotSpecified', 'Primary', 'Secondary'
   */
  keyType?: KeyType;
}

/**
 * The parameters to generate upgraded definition.
 */
export interface GenerateUpgradedDefinitionParameters {
  /**
   * The target schema version.
   */
  targetSchemaVersion?: string;
}

/**
 * The Api Operation Annotation.
 */
export interface ApiOperationAnnotation {
  /**
   * Possible values include: 'NotSpecified', 'Preview', 'Production'
   */
  status?: StatusAnnotation;
  /**
   * The family.
   */
  family?: string;
  /**
   * The revision.
   */
  revision?: number;
}

/**
 * The Swagger XML.
 */
export interface SwaggerXml {
  /**
   * The xml element or attribute name.
   */
  name?: string;
  /**
   * The xml namespace.
   */
  namespace?: string;
  /**
   * The name prefix.
   */
  prefix?: string;
  /**
   * Indicates whether the property should be an attribute instead of an element.
   */
  attribute?: boolean;
  /**
   * Indicates whether the array elements are wrapped in a container element.
   */
  wrapped?: boolean;
  /**
   * The vendor extensions.
   */
  extensions?: { [propertyName: string]: any };
}

/**
 * The swagger external documentation
 */
export interface SwaggerExternalDocumentation {
  /**
   * The document description.
   */
  description?: string;
  /**
   * The documentation Uri.
   */
  uri?: string;
  /**
   * The vendor extensions.
   */
  extensions?: { [propertyName: string]: any };
}

/**
 * The swagger custom dynamic schema.
 */
export interface SwaggerCustomDynamicSchema {
  /**
   * The operation id to fetch dynamic schema.
   */
  operationId?: string;
  /**
   * Json pointer to the dynamic schema on the response body.
   */
  valuePath?: string;
  /**
   * The operation parameters.
   */
  parameters?: { [propertyName: string]: any };
}

/**
 * The swagger custom dynamic properties.
 */
export interface SwaggerCustomDynamicProperties {
  /**
   * The operation id to fetch dynamic schema.
   */
  operationId?: string;
  /**
   * Json pointer to the dynamic schema on the response body.
   */
  valuePath?: string;
  /**
   * The operation parameters.
   */
  parameters?: { [propertyName: string]: SwaggerCustomDynamicProperties };
}

/**
 * The swagger custom dynamic list.
 */
export interface SwaggerCustomDynamicList {
  /**
   * The operation id to fetch dynamic schema.
   */
  operationId?: string;
  /**
   * The built in operation.
   */
  builtInOperation?: string;
  /**
   * The path to a response property (relative to the response object, not the response body) which
   * contains an array of dynamic value items.
   */
  itemsPath?: string;
  /**
   * The path to a property which defines the value which should be used.
   */
  itemValuePath?: string;
  /**
   * The path to an item property which defines the display name of the item.
   */
  itemTitlePath?: string;
  /**
   * The parameters.
   */
  parameters?: { [propertyName: string]: SwaggerCustomDynamicProperties };
}

/**
 * The swagger custom dynamic tree settings.
 */
export interface SwaggerCustomDynamicTreeSettings {
  /**
   * Indicates whether parent nodes can be selected.
   */
  canSelectParentNodes?: boolean;
  /**
   * Indicates whether leaf nodes can be selected.
   */
  canSelectLeafNodes?: boolean;
}

/**
 * The swagger custom dynamic tree parameter.
 */
export interface SwaggerCustomDynamicTreeParameter {
  /**
   * Gets or sets a path to a property in the currently selected item to pass as a value to a
   * parameter for the given operation.
   */
  selectedItemValuePath?: string;
  /**
   * The parameter value.
   */
  value?: any;
  /**
   * The parameter reference.
   */
  parameterReference?: string;
  /**
   * Indicates whether the parameter is required.
   */
  required?: boolean;
}

/**
 * The swagger tree command.
 */
export interface SwaggerCustomDynamicTreeCommand {
  /**
   * The path to an item property which defines the display name of the item.
   */
  operationId?: string;
  /**
   * The path to an item property which defines the display name of the item.
   */
  itemsPath?: string;
  /**
   * The path to an item property which defines the display name of the item.
   */
  itemValuePath?: string;
  /**
   * The path to an item property which defines the display name of the item.
   */
  itemTitlePath?: string;
  /**
   * The path to an item property which defines the display name of the item.
   */
  itemFullTitlePath?: string;
  /**
   * The path to an item property which defines the display name of the item.
   */
  itemIsParent?: string;
  /**
   * The path to an item property which defines the display name of the item.
   */
  selectableFilter?: string;
  parameters?: { [propertyName: string]: SwaggerCustomDynamicTreeParameter };
}

/**
 * The swagger custom dynamic tree.
 */
export interface SwaggerCustomDynamicTree {
  /**
   * The tree settings
   */
  settings?: SwaggerCustomDynamicTreeSettings;
  /**
   * The tree on-open configuration
   */
  open?: SwaggerCustomDynamicTreeCommand;
  /**
   * The tree on-browse configuration
   */
  browse?: SwaggerCustomDynamicTreeCommand;
}

/**
 * The swagger schema.
 */
export interface SwaggerSchema {
  /**
   * The reference.
   */
  ref?: string;
  /**
   * The type. Possible values include: 'String', 'Number', 'Integer', 'Boolean', 'Array', 'File',
   * 'Object', 'Null'
   */
  type?: SwaggerSchemaType;
  /**
   * The title.
   */
  title?: string;
  /**
   * The items schema.
   */
  items?: SwaggerSchema;
  /**
   * The object properties
   */
  properties?: { [propertyName: string]: SwaggerSchema };
  /**
   * The additional properties.
   */
  additionalProperties?: any;
  /**
   * The object required properties.
   */
  required?: string[];
  /**
   * The maximum number of allowed properties.
   */
  maxProperties?: number;
  /**
   * The minimum number of allowed properties.
   */
  minProperties?: number;
  /**
   * The schemas which must pass validation when this schema is used.
   */
  allOf?: SwaggerSchema[];
  /**
   * The discriminator.
   */
  discriminator?: string;
  /**
   * Indicates whether this property must be present in the a request.
   */
  readOnly?: boolean;
  /**
   * The xml representation format for a property.
   */
  xml?: SwaggerXml;
  /**
   * The external documentation.
   */
  externalDocs?: SwaggerExternalDocumentation;
  /**
   * The example value.
   */
  example?: any;
  /**
   * Indicates the notification url extension. If this is set, the property's value should be a
   * callback url for a webhook.
   */
  notificationUrlExtension?: boolean;
  /**
   * The dynamic schema configuration.
   */
  dynamicSchemaOld?: SwaggerCustomDynamicSchema;
  /**
   * The dynamic schema configuration.
   */
  dynamicSchemaNew?: SwaggerCustomDynamicProperties;
  /**
   * The dynamic list.
   */
  dynamicListNew?: SwaggerCustomDynamicList;
  /**
   * The dynamic values tree configuration.
   */
  dynamicTree?: SwaggerCustomDynamicTree;
}

/**
 * The Api reference.
 */
export interface ApiReference extends ResourceReference {
  /**
   * The display name of the api.
   */
  displayName?: string;
  /**
   * The description of the api.
   */
  description?: string;
  /**
   * The icon uri of the api.
   */
  iconUri?: string;
  /**
   * The swagger of the api.
   */
  swagger?: any;
  /**
   * The brand color of the api.
   */
  brandColor?: string;
  /**
   * The tier. Possible values include: 'NotSpecified', 'Enterprise', 'Standard', 'Premium'
   */
  category?: ApiTier;
  /**
   * The integration service environment reference.
   */
  integrationServiceEnvironment?: ResourceReference;
}

/**
 * The api operations properties
 */
export interface ApiOperationPropertiesDefinition {
  /**
   * The summary of the api operation.
   */
  summary?: string;
  /**
   * The description of the api operation.
   */
  description?: string;
  /**
   * The visibility of the api operation.
   */
  visibility?: string;
  /**
   * The trigger type of api operation.
   */
  trigger?: string;
  /**
   * The trigger hint for the api operation.
   */
  triggerHint?: string;
  /**
   * Indicates whether the api operation is pageable.
   */
  pageable?: boolean;
  /**
   * The annotation of api operation.
   */
  annotation?: ApiOperationAnnotation;
  /**
   * The api reference.
   */
  api?: ApiReference;
  /**
   * The operation inputs definition schema.
   */
  inputsDefinition?: SwaggerSchema;
  /**
   * The operation responses definition schemas.
   */
  responsesDefinition?: { [propertyName: string]: SwaggerSchema };
  /**
   * Indicates whether the API operation is webhook or not.
   */
  isWebhook?: boolean;
  /**
   * Indicates whether the API operation is notification or not.
   */
  isNotification?: boolean;
}

/**
 * The api operation.
 */
export interface ApiOperation extends Resource {
  properties?: ApiOperationPropertiesDefinition;
}

/**
 * The workflow trigger reference.
 */
export interface WorkflowTriggerReference extends ResourceReference {
  /**
   * The workflow name.
   */
  flowName?: string;
  /**
   * The workflow trigger name.
   */
  triggerName?: string;
}

/**
 * The workflow reference.
 */
export interface WorkflowReference extends ResourceReference {
}

/**
 * The WSDL service.
 */
export interface WsdlService {
  /**
   * The qualified name.
   */
  qualifiedName?: string;
  /**
   * The list of endpoints' qualified names.
   */
  endpointQualifiedNames?: string[];
}

/**
 * The API deployment parameter metadata.
 */
export interface ApiDeploymentParameterMetadata {
  /**
   * The type.
   */
  type?: string;
  /**
   * Indicates whether its required.
   */
  isRequired?: boolean;
  /**
   * The display name.
   */
  displayName?: string;
  /**
   * The description.
   */
  description?: string;
  /**
   * The visibility. Possible values include: 'NotSpecified', 'Default', 'Internal'
   */
  visibility?: ApiDeploymentParameterVisibility;
}

/**
 * The API deployment parameters metadata.
 */
export interface ApiDeploymentParameterMetadataSet {
  /**
   * The package content link parameter.
   */
  packageContentLink?: ApiDeploymentParameterMetadata;
  /**
   * The package content link parameter.
   */
  redisCacheConnectionString?: ApiDeploymentParameterMetadata;
}

/**
 * The api resource metadata.
 */
export interface ApiResourceMetadata {
  /**
   * The source.
   */
  source?: string;
  /**
   * The brand color.
   */
  brandColor?: string;
  /**
   * The hide key.
   */
  hideKey?: string;
  /**
   * The tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The api type. Possible values include: 'NotSpecified', 'Rest', 'Soap'
   */
  apiType?: ApiType;
  /**
   * The WSDL service.
   */
  wsdlService?: WsdlService;
  /**
   * The WSDL import method. Possible values include: 'NotSpecified', 'SoapToRest',
   * 'SoapPassThrough'
   */
  wsdlImportMethod?: WsdlImportMethod;
  /**
   * The connection type.
   */
  connectionType?: string;
  /**
   * The provisioning state. Possible values include: 'NotSpecified', 'Accepted', 'Running',
   * 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded',
   * 'Moving', 'Updating', 'Registering', 'Registered', 'Unregistering', 'Unregistered',
   * 'Completed', 'Renewing', 'Pending', 'Waiting', 'InProgress'
   */
  provisioningState?: WorkflowProvisioningState;
  /**
   * The connector deployment parameters metadata.
   */
  deploymentParameters?: ApiDeploymentParameterMetadataSet;
}

/**
 * The API general information.
 */
export interface ApiResourceGeneralInformation {
  /**
   * The icon url.
   */
  iconUrl?: string;
  /**
   * The display name.
   */
  displayName?: string;
  /**
   * The description.
   */
  description?: string;
  /**
   * The terms of use url.
   */
  termsOfUseUrl?: string;
  /**
   * The release tag.
   */
  releaseTag?: string;
  /**
   * The tier. Possible values include: 'NotSpecified', 'Enterprise', 'Standard', 'Premium'
   */
  tier?: ApiTier;
}

/**
 * The API backend service.
 */
export interface ApiResourceBackendService {
  /**
   * The service URL.
   */
  serviceUrl?: string;
}

/**
 * The API resource policies.
 */
export interface ApiResourcePolicies {
  /**
   * The API level only policies XML as embedded content.
   */
  content?: string;
  /**
   * The content link to the policies.
   */
  contentLink?: string;
}

/**
 * The Api resource definition.
 */
export interface ApiResourceDefinitions {
  /**
   * The original swagger url.
   */
  originalSwaggerUrl?: string;
  /**
   * The modified swagger url.
   */
  modifiedSwaggerUrl?: string;
}

/**
 * The API resource properties.
 */
export interface ApiResourceProperties {
  /**
   * The name
   */
  name?: string;
  /**
   * The connection parameters.
   */
  connectionParameters?: { [propertyName: string]: any };
  /**
   * The metadata.
   */
  metadata?: ApiResourceMetadata;
  /**
   * The runtime urls.
   */
  runtimeUrls?: string[];
  /**
   * The api general information.
   */
  generalInformation?: ApiResourceGeneralInformation;
  /**
   * The capabilities.
   */
  capabilities?: string[];
  /**
   * The backend service.
   */
  backendService?: ApiResourceBackendService;
  /**
   * The policies for the API.
   */
  policies?: ApiResourcePolicies;
  /**
   * The API definition.
   */
  apiDefinitionUrl?: string;
  /**
   * The api definitions.
   */
  apiDefinitions?: ApiResourceDefinitions;
  /**
   * The integration service environment reference.
   */
  integrationServiceEnvironment?: ResourceReference;
  /**
   * The provisioning state. Possible values include: 'NotSpecified', 'Accepted', 'Running',
   * 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded',
   * 'Moving', 'Updating', 'Registering', 'Registered', 'Unregistering', 'Unregistered',
   * 'Completed', 'Renewing', 'Pending', 'Waiting', 'InProgress'
   */
  provisioningState?: WorkflowProvisioningState;
  /**
   * The category. Possible values include: 'NotSpecified', 'Enterprise', 'Standard', 'Premium'
   */
  category?: ApiTier;
}

/**
 * The managed api definition.
 */
export interface ManagedApi extends Resource {
  /**
   * The api resource properties.
   */
  properties?: ApiResourceProperties;
}

/**
 * The network endpoint.
 */
export interface IntegrationServiceEnvironmentNetworkEndpoint {
  /**
   * The accessibility state. Possible values include: 'NotSpecified', 'Unknown', 'Available',
   * 'NotAvailable'
   */
  accessibility?: IntegrationServiceEnvironmentNetworkEndPointAccessibilityState;
  /**
   * The domain name.
   */
  domainName?: string;
  /**
   * The ports.
   */
  ports?: string[];
}

/**
 * The azure async operation resource.
 */
export interface IntegrationServiceEnvironmentNetworkDependency {
  /**
   * The network dependency category type. Possible values include: 'NotSpecified', 'AzureStorage',
   * 'AzureManagement', 'AzureActiveDirectory', 'SSLCertificateVerification',
   * 'DiagnosticLogsAndMetrics', 'IntegrationServiceEnvironmentConnectors', 'RedisCache',
   * 'AccessEndpoints', 'RecoveryService', 'SQL', 'RegionalService'
   */
  category?: IntegrationServiceEnvironmentNetworkDependencyCategoryType;
  /**
   * The display name.
   */
  displayName?: string;
  /**
   * The endpoints.
   */
  endpoints?: IntegrationServiceEnvironmentNetworkEndpoint[];
}

/**
 * The extended error info.
 */
export interface ExtendedErrorInfo {
  /**
   * The error code. Possible values include: 'NotSpecified',
   * 'IntegrationServiceEnvironmentNotFound', 'InternalServerError', 'InvalidOperationId'
   */
  code: ErrorResponseCode;
  /**
   * The error message.
   */
  message: string;
  /**
   * The error message details.
   */
  details?: ExtendedErrorInfo[];
  /**
   * The inner error.
   */
  innerError?: any;
}

/**
 * The integration service environment subnet network health.
 */
export interface IntegrationServiceEnvironmentNetworkDependencyHealth {
  /**
   * The error if any occurred during the operation.
   */
  error?: ExtendedErrorInfo;
  /**
   * The network dependency health state. Possible values include: 'NotSpecified', 'Healthy',
   * 'Unhealthy', 'Unknown'
   */
  state?: IntegrationServiceEnvironmentNetworkDependencyHealthState;
}

/**
 * The integration service environment subnet network health.
 */
export interface IntegrationServiceEnvironmentSubnetNetworkHealth {
  /**
   * The outbound network dependencies.
   */
  outboundNetworkDependencies?: IntegrationServiceEnvironmentNetworkDependency[];
  /**
   * The integration service environment network health.
   */
  outboundNetworkHealth?: IntegrationServiceEnvironmentNetworkDependencyHealth;
  /**
   * The integration service environment network health state. Possible values include:
   * 'NotSpecified', 'Unknown', 'Available', 'NotAvailable'
   */
  networkDependencyHealthState: IntegrationServiceEnvironmentNetworkEndPointAccessibilityState;
}

/**
 * The integration service environment access endpoint.
 */
export interface IntegrationServiceEnvironmentAccessEndpoint {
  /**
   * The access endpoint type. Possible values include: 'NotSpecified', 'External', 'Internal'
   */
  type?: IntegrationServiceEnvironmentAccessEndpointType;
}

/**
 * The network configuration.
 */
export interface NetworkConfiguration {
  /**
   * Gets the virtual network address space.
   */
  virtualNetworkAddressSpace?: string;
  /**
   * The access endpoint.
   */
  accessEndpoint?: IntegrationServiceEnvironmentAccessEndpoint;
  /**
   * The subnets.
   */
  subnets?: ResourceReference[];
}

/**
 * The integration service environment properties.
 */
export interface IntegrationServiceEnvironmentProperties {
  /**
   * The provisioning state. Possible values include: 'NotSpecified', 'Accepted', 'Running',
   * 'Ready', 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded',
   * 'Moving', 'Updating', 'Registering', 'Registered', 'Unregistering', 'Unregistered',
   * 'Completed', 'Renewing', 'Pending', 'Waiting', 'InProgress'
   */
  provisioningState?: WorkflowProvisioningState;
  /**
   * The integration service environment state. Possible values include: 'NotSpecified',
   * 'Completed', 'Enabled', 'Disabled', 'Deleted', 'Suspended'
   */
  state?: WorkflowState;
  /**
   * Gets the tracking id.
   */
  integrationServiceEnvironmentId?: string;
  /**
   * The endpoints configuration.
   */
  endpointsConfiguration?: FlowEndpointsConfiguration;
  /**
   * The network configuration.
   */
  networkConfiguration?: NetworkConfiguration;
}

/**
 * The integration service environment sku.
 */
export interface IntegrationServiceEnvironmentSku {
  /**
   * The sku name. Possible values include: 'NotSpecified', 'Premium', 'Developer'
   */
  name?: IntegrationServiceEnvironmentSkuName;
  /**
   * The sku capacity.
   */
  capacity?: number;
}

/**
 * The integration service environment.
 */
export interface IntegrationServiceEnvironment extends Resource {
  /**
   * The integration service environment properties.
   */
  properties?: IntegrationServiceEnvironmentProperties;
  /**
   * The sku.
   */
  sku?: IntegrationServiceEnvironmentSku;
}

/**
 * The sku.
 */
export interface IntegrationServiceEnvironmentSkuDefinitionSku {
  /**
   * The sku name. Possible values include: 'NotSpecified', 'Premium', 'Developer'
   */
  name?: IntegrationServiceEnvironmentSkuName;
  /**
   * The sku tier.
   */
  tier?: string;
}

/**
 * The integration service environment sku capacity.
 */
export interface IntegrationServiceEnvironmentSkuCapacity {
  /**
   * The minimum capacity.
   */
  minimum?: number;
  /**
   * The maximum capacity.
   */
  maximum?: number;
  /**
   * The default capacity.
   */
  default?: number;
  /**
   * The sku scale type. Possible values include: 'Manual', 'Automatic', 'None'
   */
  scaleType?: IntegrationServiceEnvironmentSkuScaleType;
}

/**
 * The integration service environment sku definition.
 */
export interface IntegrationServiceEnvironmentSkuDefinition {
  /**
   * The resource type.
   */
  resourceType?: string;
  /**
   * The sku.
   */
  sku?: IntegrationServiceEnvironmentSkuDefinitionSku;
  /**
   * The sku capacity.
   */
  capacity?: IntegrationServiceEnvironmentSkuCapacity;
}

/**
 * The integration account sku.
 */
export interface IntegrationAccountSku {
  /**
   * The sku name. Possible values include: 'NotSpecified', 'Free', 'Basic', 'Standard'
   */
  name: IntegrationAccountSkuName;
}

/**
 * The integration account.
 */
export interface IntegrationAccount extends Resource {
  /**
   * The integration service environment.
   */
  integrationServiceEnvironment?: IntegrationServiceEnvironment;
  /**
   * The workflow state. Possible values include: 'NotSpecified', 'Completed', 'Enabled',
   * 'Disabled', 'Deleted', 'Suspended'
   */
  state?: WorkflowState;
  /**
   * The sku.
   */
  sku?: IntegrationAccountSku;
}

/**
 * The callback url parameters.
 */
export interface GetCallbackUrlParameters {
  /**
   * The expiry time.
   */
  notAfter?: Date;
  /**
   * The key type. Possible values include: 'NotSpecified', 'Primary', 'Secondary'
   */
  keyType?: KeyType;
}

/**
 * The callback url.
 */
export interface CallbackUrl {
  /**
   * The URL value.
   */
  value?: string;
}

/**
 * The integration account schema.
 */
export interface IntegrationAccountSchema extends Resource {
  /**
   * The schema type. Possible values include: 'NotSpecified', 'Xml'
   */
  schemaType: SchemaType;
  /**
   * The target namespace of the schema.
   */
  targetNamespace?: string;
  /**
   * The document name.
   */
  documentName?: string;
  /**
   * The file name.
   */
  fileName?: string;
  /**
   * The created time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changedTime?: Date;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The content.
   */
  content?: string;
  /**
   * The content type.
   */
  contentType?: string;
  /**
   * The content link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly contentLink?: ContentLink;
}

/**
 * The integration account schema filter for odata query.
 */
export interface IntegrationAccountSchemaFilter {
  /**
   * The schema type of integration account schema. Possible values include: 'NotSpecified', 'Xml'
   */
  schemaType: SchemaType;
}

/**
 * The parameters schema of integration account map.
 */
export interface IntegrationAccountMapPropertiesParametersSchema {
  /**
   * The reference name.
   */
  ref?: string;
}

/**
 * The integration account map.
 */
export interface IntegrationAccountMap extends Resource {
  /**
   * The map type. Possible values include: 'NotSpecified', 'Xslt', 'Xslt20', 'Xslt30', 'Liquid'
   */
  mapType: MapType;
  /**
   * The parameters schema of integration account map.
   */
  parametersSchema?: IntegrationAccountMapPropertiesParametersSchema;
  /**
   * The created time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changedTime?: Date;
  /**
   * The content.
   */
  content?: string;
  /**
   * The content type.
   */
  contentType?: string;
  /**
   * The content link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly contentLink?: ContentLink;
  /**
   * The metadata.
   */
  metadata?: any;
}

/**
 * The integration account map filter for odata query.
 */
export interface IntegrationAccountMapFilter {
  /**
   * The map type of integration account map. Possible values include: 'NotSpecified', 'Xslt',
   * 'Xslt20', 'Xslt30', 'Liquid'
   */
  mapType: MapType;
}

/**
 * The integration account partner's business identity.
 */
export interface BusinessIdentity {
  /**
   * The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32
   */
  qualifier: string;
  /**
   * The user defined business identity value.
   */
  value: string;
}

/**
 * The B2B partner content.
 */
export interface B2BPartnerContent {
  /**
   * The list of partner business identities.
   */
  businessIdentities?: BusinessIdentity[];
}

/**
 * The integration account partner content.
 */
export interface PartnerContent {
  /**
   * The B2B partner content.
   */
  b2b?: B2BPartnerContent;
}

/**
 * The integration account partner.
 */
export interface IntegrationAccountPartner extends Resource {
  /**
   * The partner type. Possible values include: 'NotSpecified', 'B2B'
   */
  partnerType: PartnerType;
  /**
   * The created time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changedTime?: Date;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The partner content.
   */
  content: PartnerContent;
}

/**
 * The integration account partner filter for odata query.
 */
export interface IntegrationAccountPartnerFilter {
  /**
   * The partner type of integration account partner. Possible values include: 'NotSpecified',
   * 'B2B'
   */
  partnerType: PartnerType;
}

/**
 * The AS2 agreement message connection settings.
 */
export interface AS2MessageConnectionSettings {
  /**
   * The value indicating whether to ignore mismatch in certificate name.
   */
  ignoreCertificateNameMismatch: boolean;
  /**
   * The value indicating whether to support HTTP status code 'CONTINUE'.
   */
  supportHttpStatusCodeContinue: boolean;
  /**
   * The value indicating whether to keep the connection alive.
   */
  keepHttpConnectionAlive: boolean;
  /**
   * The value indicating whether to unfold the HTTP headers.
   */
  unfoldHttpHeaders: boolean;
}

/**
 * The AS2 agreement acknowledgement connection settings.
 */
export interface AS2AcknowledgementConnectionSettings {
  /**
   * Indicates whether to ignore mismatch in certificate name.
   */
  ignoreCertificateNameMismatch: boolean;
  /**
   * Indicates whether to support HTTP status code 'CONTINUE'.
   */
  supportHttpStatusCodeContinue: boolean;
  /**
   * Indicates whether to keep the connection alive.
   */
  keepHttpConnectionAlive: boolean;
  /**
   * Indicates whether to unfold the HTTP headers.
   */
  unfoldHttpHeaders: boolean;
}

/**
 * The AS2 agreement mdn settings.
 */
export interface AS2MdnSettings {
  /**
   * The value indicating whether to send or request a MDN.
   */
  needMDN: boolean;
  /**
   * The value indicating whether the MDN needs to be signed or not.
   */
  signMDN: boolean;
  /**
   * The value indicating whether to send the asynchronous MDN.
   */
  sendMDNAsynchronously: boolean;
  /**
   * The receipt delivery URL.
   */
  receiptDeliveryUrl?: string;
  /**
   * The disposition notification to header value.
   */
  dispositionNotificationTo?: string;
  /**
   * The value indicating whether to sign the outbound MDN if optional.
   */
  signOutboundMDNIfOptional: boolean;
  /**
   * The MDN text.
   */
  mdnText?: string;
  /**
   * The value indicating whether to send inbound MDN to message box.
   */
  sendInboundMDNToMessageBox: boolean;
  /**
   * The signing or hashing algorithm. Possible values include: 'NotSpecified', 'None', 'MD5',
   * 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
   */
  micHashingAlgorithm: HashingAlgorithm;
}

/**
 * The AS2 agreement security settings.
 */
export interface AS2SecuritySettings {
  /**
   * The value indicating whether to send or request a MDN.
   */
  overrideGroupSigningCertificate: boolean;
  /**
   * The name of the signing certificate.
   */
  signingCertificateName?: string;
  /**
   * The name of the encryption certificate.
   */
  encryptionCertificateName?: string;
  /**
   * The value indicating whether to enable NRR for inbound encoded messages.
   */
  enableNRRForInboundEncodedMessages: boolean;
  /**
   * The value indicating whether to enable NRR for inbound decoded messages.
   */
  enableNRRForInboundDecodedMessages: boolean;
  /**
   * The value indicating whether to enable NRR for outbound MDN.
   */
  enableNRRForOutboundMDN: boolean;
  /**
   * The value indicating whether to enable NRR for outbound encoded messages.
   */
  enableNRRForOutboundEncodedMessages: boolean;
  /**
   * The value indicating whether to enable NRR for outbound decoded messages.
   */
  enableNRRForOutboundDecodedMessages: boolean;
  /**
   * The value indicating whether to enable NRR for inbound MDN.
   */
  enableNRRForInboundMDN: boolean;
  /**
   * The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize,
   * Sha2UnderscoreHashSize.
   */
  sha2AlgorithmFormat?: string;
}

/**
 * The AS2 agreement validation settings.
 */
export interface AS2ValidationSettings {
  /**
   * The value indicating whether to override incoming message properties with those in agreement.
   */
  overrideMessageProperties: boolean;
  /**
   * The value indicating whether the message has to be encrypted.
   */
  encryptMessage: boolean;
  /**
   * The value indicating whether the message has to be signed.
   */
  signMessage: boolean;
  /**
   * The value indicating whether the message has to be compressed.
   */
  compressMessage: boolean;
  /**
   * The value indicating whether to check for duplicate message.
   */
  checkDuplicateMessage: boolean;
  /**
   * The number of days to look back for duplicate interchange.
   */
  interchangeDuplicatesValidityDays: number;
  /**
   * The value indicating whether to check for certificate revocation list on send.
   */
  checkCertificateRevocationListOnSend: boolean;
  /**
   * The value indicating whether to check for certificate revocation list on receive.
   */
  checkCertificateRevocationListOnReceive: boolean;
  /**
   * The encryption algorithm. Possible values include: 'NotSpecified', 'None', 'DES3', 'RC2',
   * 'AES128', 'AES192', 'AES256'
   */
  encryptionAlgorithm: EncryptionAlgorithm;
  /**
   * The signing algorithm. Possible values include: 'NotSpecified', 'Default', 'SHA1', 'SHA2256',
   * 'SHA2384', 'SHA2512'
   */
  signingAlgorithm?: SigningAlgorithm;
}

/**
 * The AS2 agreement envelope settings.
 */
export interface AS2EnvelopeSettings {
  /**
   * The message content type.
   */
  messageContentType: string;
  /**
   * The value indicating whether to transmit file name in mime header.
   */
  transmitFileNameInMimeHeader: boolean;
  /**
   * The template for file name.
   */
  fileNameTemplate: string;
  /**
   * The value indicating whether to suspend message on file name generation error.
   */
  suspendMessageOnFileNameGenerationError: boolean;
  /**
   * The value indicating whether to auto generate file name.
   */
  autogenerateFileName: boolean;
}

/**
 * The AS2 agreement error settings.
 */
export interface AS2ErrorSettings {
  /**
   * The value indicating whether to suspend duplicate message.
   */
  suspendDuplicateMessage: boolean;
  /**
   * The value indicating whether to resend message If MDN is not received.
   */
  resendIfMDNNotReceived: boolean;
}

/**
 * The AS2 agreement protocol settings.
 */
export interface AS2ProtocolSettings {
  /**
   * The message connection settings.
   */
  messageConnectionSettings: AS2MessageConnectionSettings;
  /**
   * The acknowledgement connection settings.
   */
  acknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings;
  /**
   * The MDN settings.
   */
  mdnSettings: AS2MdnSettings;
  /**
   * The security settings.
   */
  securitySettings: AS2SecuritySettings;
  /**
   * The validation settings.
   */
  validationSettings: AS2ValidationSettings;
  /**
   * The envelope settings.
   */
  envelopeSettings: AS2EnvelopeSettings;
  /**
   * The error settings.
   */
  errorSettings: AS2ErrorSettings;
}

/**
 * The integration account AS2 one-way agreement.
 */
export interface AS2OneWayAgreement {
  /**
   * The sender business identity
   */
  senderBusinessIdentity: BusinessIdentity;
  /**
   * The receiver business identity
   */
  receiverBusinessIdentity: BusinessIdentity;
  /**
   * The AS2 protocol settings.
   */
  protocolSettings: AS2ProtocolSettings;
}

/**
 * The integration account AS2 agreement content.
 */
export interface AS2AgreementContent {
  /**
   * The AS2 one-way receive agreement.
   */
  receiveAgreement: AS2OneWayAgreement;
  /**
   * The AS2 one-way send agreement.
   */
  sendAgreement: AS2OneWayAgreement;
}

/**
 * The X12 agreement validation settings.
 */
export interface X12ValidationSettings {
  /**
   * The value indicating whether to validate character set in the message.
   */
  validateCharacterSet: boolean;
  /**
   * The value indicating whether to check for duplicate interchange control number.
   */
  checkDuplicateInterchangeControlNumber: boolean;
  /**
   * The validity period of interchange control number.
   */
  interchangeControlNumberValidityDays: number;
  /**
   * The value indicating whether to check for duplicate group control number.
   */
  checkDuplicateGroupControlNumber: boolean;
  /**
   * The value indicating whether to check for duplicate transaction set control number.
   */
  checkDuplicateTransactionSetControlNumber: boolean;
  /**
   * The value indicating whether to Whether to validate EDI types.
   */
  validateEDITypes: boolean;
  /**
   * The value indicating whether to Whether to validate XSD types.
   */
  validateXSDTypes: boolean;
  /**
   * The value indicating whether to allow leading and trailing spaces and zeroes.
   */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The value indicating whether to trim leading and trailing spaces and zeroes.
   */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The trailing separator policy. Possible values include: 'NotSpecified', 'NotAllowed',
   * 'Optional', 'Mandatory'
   */
  trailingSeparatorPolicy: TrailingSeparatorPolicy;
}

/**
 * The X12 agreement framing settings.
 */
export interface X12FramingSettings {
  /**
   * The data element separator.
   */
  dataElementSeparator: number;
  /**
   * The component separator.
   */
  componentSeparator: number;
  /**
   * The value indicating whether to replace separators in payload.
   */
  replaceSeparatorsInPayload: boolean;
  /**
   * The replacement character.
   */
  replaceCharacter: number;
  /**
   * The segment terminator.
   */
  segmentTerminator: number;
  /**
   * The X12 character set. Possible values include: 'NotSpecified', 'Basic', 'Extended', 'UTF8'
   */
  characterSet: X12CharacterSet;
  /**
   * The segment terminator suffix. Possible values include: 'NotSpecified', 'None', 'CR', 'LF',
   * 'CRLF'
   */
  segmentTerminatorSuffix: SegmentTerminatorSuffix;
}

/**
 * The X12 agreement envelope settings.
 */
export interface X12EnvelopeSettings {
  /**
   * The controls standards id.
   */
  controlStandardsId: number;
  /**
   * The value indicating whether to use control standards id as repetition character.
   */
  useControlStandardsIdAsRepetitionCharacter: boolean;
  /**
   * The sender application id.
   */
  senderApplicationId: string;
  /**
   * The receiver application id.
   */
  receiverApplicationId: string;
  /**
   * The control version number.
   */
  controlVersionNumber: string;
  /**
   * The interchange  control number lower bound.
   */
  interchangeControlNumberLowerBound: number;
  /**
   * The interchange  control number upper bound.
   */
  interchangeControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover interchange control number.
   */
  rolloverInterchangeControlNumber: boolean;
  /**
   * The value indicating whether to enable default group headers.
   */
  enableDefaultGroupHeaders: boolean;
  /**
   * The functional group id.
   */
  functionalGroupId?: string;
  /**
   * The group control number lower bound.
   */
  groupControlNumberLowerBound: number;
  /**
   * The group control number upper bound.
   */
  groupControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover group control number.
   */
  rolloverGroupControlNumber: boolean;
  /**
   * The group header agency code.
   */
  groupHeaderAgencyCode: string;
  /**
   * The group header version.
   */
  groupHeaderVersion: string;
  /**
   * The transaction set control number lower bound.
   */
  transactionSetControlNumberLowerBound: number;
  /**
   * The transaction set control number upper bound.
   */
  transactionSetControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover transaction set control number.
   */
  rolloverTransactionSetControlNumber: boolean;
  /**
   * The transaction set control number prefix.
   */
  transactionSetControlNumberPrefix?: string;
  /**
   * The transaction set control number suffix.
   */
  transactionSetControlNumberSuffix?: string;
  /**
   * The value indicating whether to overwrite existing transaction set control number.
   */
  overwriteExistingTransactionSetControlNumber: boolean;
  /**
   * The group header date format. Possible values include: 'NotSpecified', 'CCYYMMDD', 'YYMMDD'
   */
  groupHeaderDateFormat: X12DateFormat;
  /**
   * The group header time format. Possible values include: 'NotSpecified', 'HHMM', 'HHMMSS',
   * 'HHMMSSdd', 'HHMMSSd'
   */
  groupHeaderTimeFormat: X12TimeFormat;
  /**
   * The usage indicator. Possible values include: 'NotSpecified', 'Test', 'Information',
   * 'Production'
   */
  usageIndicator: UsageIndicator;
}

/**
 * The X12 agreement acknowledgement settings.
 */
export interface X12AcknowledgementSettings {
  /**
   * The value indicating whether technical acknowledgement is needed.
   */
  needTechnicalAcknowledgement: boolean;
  /**
   * The value indicating whether to batch the technical acknowledgements.
   */
  batchTechnicalAcknowledgements: boolean;
  /**
   * The value indicating whether functional acknowledgement is needed.
   */
  needFunctionalAcknowledgement: boolean;
  /**
   * The functional acknowledgement version.
   */
  functionalAcknowledgementVersion?: string;
  /**
   * The value indicating whether to batch functional acknowledgements.
   */
  batchFunctionalAcknowledgements: boolean;
  /**
   * The value indicating whether implementation acknowledgement is needed.
   */
  needImplementationAcknowledgement: boolean;
  /**
   * The implementation acknowledgement version.
   */
  implementationAcknowledgementVersion?: string;
  /**
   * The value indicating whether to batch implementation acknowledgements.
   */
  batchImplementationAcknowledgements: boolean;
  /**
   * The value indicating whether a loop is needed for valid messages.
   */
  needLoopForValidMessages: boolean;
  /**
   * The value indicating whether to send synchronous acknowledgement.
   */
  sendSynchronousAcknowledgement: boolean;
  /**
   * The acknowledgement control number prefix.
   */
  acknowledgementControlNumberPrefix?: string;
  /**
   * The acknowledgement control number suffix.
   */
  acknowledgementControlNumberSuffix?: string;
  /**
   * The acknowledgement control number lower bound.
   */
  acknowledgementControlNumberLowerBound: number;
  /**
   * The acknowledgement control number upper bound.
   */
  acknowledgementControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover acknowledgement control number.
   */
  rolloverAcknowledgementControlNumber: boolean;
}

/**
 * The X12 message filter for odata query.
 */
export interface X12MessageFilter {
  /**
   * The message filter type. Possible values include: 'NotSpecified', 'Include', 'Exclude'
   */
  messageFilterType: MessageFilterType;
}

/**
 * The X12 agreement security settings.
 */
export interface X12SecuritySettings {
  /**
   * The authorization qualifier.
   */
  authorizationQualifier: string;
  /**
   * The authorization value.
   */
  authorizationValue?: string;
  /**
   * The security qualifier.
   */
  securityQualifier: string;
  /**
   * The password value.
   */
  passwordValue?: string;
}

/**
 * The X12 processing settings.
 */
export interface X12ProcessingSettings {
  /**
   * The value indicating whether to mask security information.
   */
  maskSecurityInfo: boolean;
  /**
   * The value indicating whether to convert numerical type to implied decimal.
   */
  convertImpliedDecimal: boolean;
  /**
   * The value indicating whether to preserve interchange.
   */
  preserveInterchange: boolean;
  /**
   * The value indicating whether to suspend interchange on error.
   */
  suspendInterchangeOnError: boolean;
  /**
   * The value indicating whether to create empty xml tags for trailing separators.
   */
  createEmptyXmlTagsForTrailingSeparators: boolean;
  /**
   * The value indicating whether to use dot as decimal separator.
   */
  useDotAsDecimalSeparator: boolean;
}

/**
 * The X12 envelope override settings.
 */
export interface X12EnvelopeOverride {
  /**
   * The target namespace on which this envelope settings has to be applied.
   */
  targetNamespace: string;
  /**
   * The protocol version on which this envelope settings has to be applied.
   */
  protocolVersion: string;
  /**
   * The message id on which this envelope settings has to be applied.
   */
  messageId: string;
  /**
   * The responsible agency code.
   */
  responsibleAgencyCode: string;
  /**
   * The header version.
   */
  headerVersion: string;
  /**
   * The sender application id.
   */
  senderApplicationId: string;
  /**
   * The receiver application id.
   */
  receiverApplicationId: string;
  /**
   * The functional identifier code.
   */
  functionalIdentifierCode?: string;
  /**
   * The date format. Possible values include: 'NotSpecified', 'CCYYMMDD', 'YYMMDD'
   */
  dateFormat: X12DateFormat;
  /**
   * The time format. Possible values include: 'NotSpecified', 'HHMM', 'HHMMSS', 'HHMMSSdd',
   * 'HHMMSSd'
   */
  timeFormat: X12TimeFormat;
}

/**
 * The X12 validation override settings.
 */
export interface X12ValidationOverride {
  /**
   * The message id on which the validation settings has to be applied.
   */
  messageId: string;
  /**
   * The value indicating whether to validate EDI types.
   */
  validateEDITypes: boolean;
  /**
   * The value indicating whether to validate XSD types.
   */
  validateXSDTypes: boolean;
  /**
   * The value indicating whether to allow leading and trailing spaces and zeroes.
   */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The value indicating whether to validate character Set.
   */
  validateCharacterSet: boolean;
  /**
   * The value indicating whether to trim leading and trailing spaces and zeroes.
   */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The trailing separator policy. Possible values include: 'NotSpecified', 'NotAllowed',
   * 'Optional', 'Mandatory'
   */
  trailingSeparatorPolicy: TrailingSeparatorPolicy;
}

/**
 * The X12 message identifier.
 */
export interface X12MessageIdentifier {
  /**
   * The message id.
   */
  messageId: string;
}

/**
 * The X12 schema reference.
 */
export interface X12SchemaReference {
  /**
   * The message id.
   */
  messageId: string;
  /**
   * The sender application id.
   */
  senderApplicationId?: string;
  /**
   * The schema version.
   */
  schemaVersion: string;
  /**
   * The schema name.
   */
  schemaName: string;
}

/**
 * The X12 delimiter override settings.
 */
export interface X12DelimiterOverrides {
  /**
   * The protocol version.
   */
  protocolVersion?: string;
  /**
   * The message id.
   */
  messageId?: string;
  /**
   * The data element separator.
   */
  dataElementSeparator: number;
  /**
   * The component separator.
   */
  componentSeparator: number;
  /**
   * The segment terminator.
   */
  segmentTerminator: number;
  /**
   * The segment terminator suffix. Possible values include: 'NotSpecified', 'None', 'CR', 'LF',
   * 'CRLF'
   */
  segmentTerminatorSuffix: SegmentTerminatorSuffix;
  /**
   * The replacement character.
   */
  replaceCharacter: number;
  /**
   * The value indicating whether to replace separators in payload.
   */
  replaceSeparatorsInPayload: boolean;
  /**
   * The target namespace on which this delimiter settings has to be applied.
   */
  targetNamespace?: string;
}

/**
 * The X12 agreement protocol settings.
 */
export interface X12ProtocolSettings {
  /**
   * The X12 validation settings.
   */
  validationSettings: X12ValidationSettings;
  /**
   * The X12 framing settings.
   */
  framingSettings: X12FramingSettings;
  /**
   * The X12 envelope settings.
   */
  envelopeSettings: X12EnvelopeSettings;
  /**
   * The X12 acknowledgment settings.
   */
  acknowledgementSettings: X12AcknowledgementSettings;
  /**
   * The X12 message filter.
   */
  messageFilter: X12MessageFilter;
  /**
   * The X12 security settings.
   */
  securitySettings: X12SecuritySettings;
  /**
   * The X12 processing settings.
   */
  processingSettings: X12ProcessingSettings;
  /**
   * The X12 envelope override settings.
   */
  envelopeOverrides?: X12EnvelopeOverride[];
  /**
   * The X12 validation override settings.
   */
  validationOverrides?: X12ValidationOverride[];
  /**
   * The X12 message filter list.
   */
  messageFilterList?: X12MessageIdentifier[];
  /**
   * The X12 schema references.
   */
  schemaReferences: X12SchemaReference[];
  /**
   * The X12 delimiter override settings.
   */
  x12DelimiterOverrides?: X12DelimiterOverrides[];
}

/**
 * The X12 one-way agreement.
 */
export interface X12OneWayAgreement {
  /**
   * The sender business identity
   */
  senderBusinessIdentity: BusinessIdentity;
  /**
   * The receiver business identity
   */
  receiverBusinessIdentity: BusinessIdentity;
  /**
   * The X12 protocol settings.
   */
  protocolSettings: X12ProtocolSettings;
}

/**
 * The X12 agreement content.
 */
export interface X12AgreementContent {
  /**
   * The X12 one-way receive agreement.
   */
  receiveAgreement: X12OneWayAgreement;
  /**
   * The X12 one-way send agreement.
   */
  sendAgreement: X12OneWayAgreement;
}

/**
 * The Edifact agreement validation settings.
 */
export interface EdifactValidationSettings {
  /**
   * The value indicating whether to validate character set in the message.
   */
  validateCharacterSet: boolean;
  /**
   * The value indicating whether to check for duplicate interchange control number.
   */
  checkDuplicateInterchangeControlNumber: boolean;
  /**
   * The validity period of interchange control number.
   */
  interchangeControlNumberValidityDays: number;
  /**
   * The value indicating whether to check for duplicate group control number.
   */
  checkDuplicateGroupControlNumber: boolean;
  /**
   * The value indicating whether to check for duplicate transaction set control number.
   */
  checkDuplicateTransactionSetControlNumber: boolean;
  /**
   * The value indicating whether to Whether to validate EDI types.
   */
  validateEDITypes: boolean;
  /**
   * The value indicating whether to Whether to validate XSD types.
   */
  validateXSDTypes: boolean;
  /**
   * The value indicating whether to allow leading and trailing spaces and zeroes.
   */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The value indicating whether to trim leading and trailing spaces and zeroes.
   */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The trailing separator policy. Possible values include: 'NotSpecified', 'NotAllowed',
   * 'Optional', 'Mandatory'
   */
  trailingSeparatorPolicy: TrailingSeparatorPolicy;
}

/**
 * The Edifact agreement framing settings.
 */
export interface EdifactFramingSettings {
  /**
   * The service code list directory version.
   */
  serviceCodeListDirectoryVersion?: string;
  /**
   * The character encoding.
   */
  characterEncoding?: string;
  /**
   * The protocol version.
   */
  protocolVersion: number;
  /**
   * The data element separator.
   */
  dataElementSeparator: number;
  /**
   * The component separator.
   */
  componentSeparator: number;
  /**
   * The segment terminator.
   */
  segmentTerminator: number;
  /**
   * The release indicator.
   */
  releaseIndicator: number;
  /**
   * The repetition separator.
   */
  repetitionSeparator: number;
  /**
   * The EDIFACT frame setting characterSet. Possible values include: 'NotSpecified', 'UNOB',
   * 'UNOA', 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG', 'UNOH', 'UNOI', 'UNOJ', 'UNOK', 'UNOX',
   * 'UNOY', 'KECA'
   */
  characterSet: EdifactCharacterSet;
  /**
   * The EDIFACT frame setting decimal indicator. Possible values include: 'NotSpecified', 'Comma',
   * 'Decimal'
   */
  decimalPointIndicator: EdifactDecimalIndicator;
  /**
   * The EDIFACT frame setting segment terminator suffix. Possible values include: 'NotSpecified',
   * 'None', 'CR', 'LF', 'CRLF'
   */
  segmentTerminatorSuffix: SegmentTerminatorSuffix;
}

/**
 * The Edifact agreement envelope settings.
 */
export interface EdifactEnvelopeSettings {
  /**
   * The group association assigned code.
   */
  groupAssociationAssignedCode?: string;
  /**
   * The communication agreement id.
   */
  communicationAgreementId?: string;
  /**
   * The value indicating whether to apply delimiter string advice.
   */
  applyDelimiterStringAdvice: boolean;
  /**
   * The value indicating whether to create grouping segments.
   */
  createGroupingSegments: boolean;
  /**
   * The value indicating whether to enable default group headers.
   */
  enableDefaultGroupHeaders: boolean;
  /**
   * The recipient reference password value.
   */
  recipientReferencePasswordValue?: string;
  /**
   * The recipient reference password qualifier.
   */
  recipientReferencePasswordQualifier?: string;
  /**
   * The application reference id.
   */
  applicationReferenceId?: string;
  /**
   * The processing priority code.
   */
  processingPriorityCode?: string;
  /**
   * The interchange control number lower bound.
   */
  interchangeControlNumberLowerBound: number;
  /**
   * The interchange control number upper bound.
   */
  interchangeControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover interchange control number.
   */
  rolloverInterchangeControlNumber: boolean;
  /**
   * The interchange control number prefix.
   */
  interchangeControlNumberPrefix?: string;
  /**
   * The interchange control number suffix.
   */
  interchangeControlNumberSuffix?: string;
  /**
   * The sender reverse routing address.
   */
  senderReverseRoutingAddress?: string;
  /**
   * The receiver reverse routing address.
   */
  receiverReverseRoutingAddress?: string;
  /**
   * The functional group id.
   */
  functionalGroupId?: string;
  /**
   * The group controlling agency code.
   */
  groupControllingAgencyCode?: string;
  /**
   * The group message version.
   */
  groupMessageVersion?: string;
  /**
   * The group message release.
   */
  groupMessageRelease?: string;
  /**
   * The group control number lower bound.
   */
  groupControlNumberLowerBound: number;
  /**
   * The group control number upper bound.
   */
  groupControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover group control number.
   */
  rolloverGroupControlNumber: boolean;
  /**
   * The group control number prefix.
   */
  groupControlNumberPrefix?: string;
  /**
   * The group control number suffix.
   */
  groupControlNumberSuffix?: string;
  /**
   * The group application receiver qualifier.
   */
  groupApplicationReceiverQualifier?: string;
  /**
   * The group application receiver id.
   */
  groupApplicationReceiverId?: string;
  /**
   * The group application sender qualifier.
   */
  groupApplicationSenderQualifier?: string;
  /**
   * The group application sender id.
   */
  groupApplicationSenderId?: string;
  /**
   * The group application password.
   */
  groupApplicationPassword?: string;
  /**
   * The value indicating whether to overwrite existing transaction set control number.
   */
  overwriteExistingTransactionSetControlNumber: boolean;
  /**
   * The transaction set control number prefix.
   */
  transactionSetControlNumberPrefix?: string;
  /**
   * The transaction set control number suffix.
   */
  transactionSetControlNumberSuffix?: string;
  /**
   * The transaction set control number lower bound.
   */
  transactionSetControlNumberLowerBound: number;
  /**
   * The transaction set control number upper bound.
   */
  transactionSetControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover transaction set control number.
   */
  rolloverTransactionSetControlNumber: boolean;
  /**
   * The value indicating whether the message is a test interchange.
   */
  isTestInterchange: boolean;
  /**
   * The sender internal identification.
   */
  senderInternalIdentification?: string;
  /**
   * The sender internal sub identification.
   */
  senderInternalSubIdentification?: string;
  /**
   * The receiver internal identification.
   */
  receiverInternalIdentification?: string;
  /**
   * The receiver internal sub identification.
   */
  receiverInternalSubIdentification?: string;
}

/**
 * The Edifact agreement acknowledgement settings.
 */
export interface EdifactAcknowledgementSettings {
  /**
   * The value indicating whether technical acknowledgement is needed.
   */
  needTechnicalAcknowledgement: boolean;
  /**
   * The value indicating whether to batch the technical acknowledgements.
   */
  batchTechnicalAcknowledgements: boolean;
  /**
   * The value indicating whether functional acknowledgement is needed.
   */
  needFunctionalAcknowledgement: boolean;
  /**
   * The value indicating whether to batch functional acknowledgements.
   */
  batchFunctionalAcknowledgements: boolean;
  /**
   * The value indicating whether a loop is needed for valid messages.
   */
  needLoopForValidMessages: boolean;
  /**
   * The value indicating whether to send synchronous acknowledgement.
   */
  sendSynchronousAcknowledgement: boolean;
  /**
   * The acknowledgement control number prefix.
   */
  acknowledgementControlNumberPrefix?: string;
  /**
   * The acknowledgement control number suffix.
   */
  acknowledgementControlNumberSuffix?: string;
  /**
   * The acknowledgement control number lower bound.
   */
  acknowledgementControlNumberLowerBound: number;
  /**
   * The acknowledgement control number upper bound.
   */
  acknowledgementControlNumberUpperBound: number;
  /**
   * The value indicating whether to rollover acknowledgement control number.
   */
  rolloverAcknowledgementControlNumber: boolean;
}

/**
 * The Edifact message filter for odata query.
 */
export interface EdifactMessageFilter {
  /**
   * The message filter type. Possible values include: 'NotSpecified', 'Include', 'Exclude'
   */
  messageFilterType: MessageFilterType;
}

/**
 * The Edifact agreement protocol settings.
 */
export interface EdifactProcessingSettings {
  /**
   * The value indicating whether to mask security information.
   */
  maskSecurityInfo: boolean;
  /**
   * The value indicating whether to preserve interchange.
   */
  preserveInterchange: boolean;
  /**
   * The value indicating whether to suspend interchange on error.
   */
  suspendInterchangeOnError: boolean;
  /**
   * The value indicating whether to create empty xml tags for trailing separators.
   */
  createEmptyXmlTagsForTrailingSeparators: boolean;
  /**
   * The value indicating whether to use dot as decimal separator.
   */
  useDotAsDecimalSeparator: boolean;
}

/**
 * The Edifact envelope override settings.
 */
export interface EdifactEnvelopeOverride {
  /**
   * The message id on which this envelope settings has to be applied.
   */
  messageId?: string;
  /**
   * The message version on which this envelope settings has to be applied.
   */
  messageVersion?: string;
  /**
   * The message release version on which this envelope settings has to be applied.
   */
  messageRelease?: string;
  /**
   * The message association assigned code.
   */
  messageAssociationAssignedCode?: string;
  /**
   * The target namespace on which this envelope settings has to be applied.
   */
  targetNamespace?: string;
  /**
   * The functional group id.
   */
  functionalGroupId?: string;
  /**
   * The sender application qualifier.
   */
  senderApplicationQualifier?: string;
  /**
   * The sender application id.
   */
  senderApplicationId?: string;
  /**
   * The receiver application qualifier.
   */
  receiverApplicationQualifier?: string;
  /**
   * The receiver application id.
   */
  receiverApplicationId?: string;
  /**
   * The controlling agency code.
   */
  controllingAgencyCode?: string;
  /**
   * The group header message version.
   */
  groupHeaderMessageVersion?: string;
  /**
   * The group header message release.
   */
  groupHeaderMessageRelease?: string;
  /**
   * The association assigned code.
   */
  associationAssignedCode?: string;
  /**
   * The application password.
   */
  applicationPassword?: string;
}

/**
 * The Edifact message identifier.
 */
export interface EdifactMessageIdentifier {
  /**
   * The message id on which this envelope settings has to be applied.
   */
  messageId: string;
}

/**
 * The Edifact schema reference.
 */
export interface EdifactSchemaReference {
  /**
   * The message id.
   */
  messageId: string;
  /**
   * The message version.
   */
  messageVersion: string;
  /**
   * The message release version.
   */
  messageRelease: string;
  /**
   * The sender application id.
   */
  senderApplicationId?: string;
  /**
   * The sender application qualifier.
   */
  senderApplicationQualifier?: string;
  /**
   * The association assigned code.
   */
  associationAssignedCode?: string;
  /**
   * The schema name.
   */
  schemaName: string;
}

/**
 * The Edifact validation override settings.
 */
export interface EdifactValidationOverride {
  /**
   * The message id on which the validation settings has to be applied.
   */
  messageId: string;
  /**
   * The value indicating whether to validate character Set.
   */
  enforceCharacterSet: boolean;
  /**
   * The value indicating whether to validate EDI types.
   */
  validateEDITypes: boolean;
  /**
   * The value indicating whether to validate XSD types.
   */
  validateXSDTypes: boolean;
  /**
   * The value indicating whether to allow leading and trailing spaces and zeroes.
   */
  allowLeadingAndTrailingSpacesAndZeroes: boolean;
  /**
   * The trailing separator policy. Possible values include: 'NotSpecified', 'NotAllowed',
   * 'Optional', 'Mandatory'
   */
  trailingSeparatorPolicy: TrailingSeparatorPolicy;
  /**
   * The value indicating whether to trim leading and trailing spaces and zeroes.
   */
  trimLeadingAndTrailingSpacesAndZeroes: boolean;
}

/**
 * The Edifact delimiter override settings.
 */
export interface EdifactDelimiterOverride {
  /**
   * The message id.
   */
  messageId?: string;
  /**
   * The message version.
   */
  messageVersion?: string;
  /**
   * The message release.
   */
  messageRelease?: string;
  /**
   * The data element separator.
   */
  dataElementSeparator: number;
  /**
   * The component separator.
   */
  componentSeparator: number;
  /**
   * The segment terminator.
   */
  segmentTerminator: number;
  /**
   * The repetition separator.
   */
  repetitionSeparator: number;
  /**
   * The segment terminator suffix. Possible values include: 'NotSpecified', 'None', 'CR', 'LF',
   * 'CRLF'
   */
  segmentTerminatorSuffix: SegmentTerminatorSuffix;
  /**
   * The decimal point indicator. Possible values include: 'NotSpecified', 'Comma', 'Decimal'
   */
  decimalPointIndicator: EdifactDecimalIndicator;
  /**
   * The release indicator.
   */
  releaseIndicator: number;
  /**
   * The message association assigned code.
   */
  messageAssociationAssignedCode?: string;
  /**
   * The target namespace on which this delimiter settings has to be applied.
   */
  targetNamespace?: string;
}

/**
 * The Edifact agreement protocol settings.
 */
export interface EdifactProtocolSettings {
  /**
   * The EDIFACT validation settings.
   */
  validationSettings: EdifactValidationSettings;
  /**
   * The EDIFACT framing settings.
   */
  framingSettings: EdifactFramingSettings;
  /**
   * The EDIFACT envelope settings.
   */
  envelopeSettings: EdifactEnvelopeSettings;
  /**
   * The EDIFACT acknowledgement settings.
   */
  acknowledgementSettings: EdifactAcknowledgementSettings;
  /**
   * The EDIFACT message filter.
   */
  messageFilter: EdifactMessageFilter;
  /**
   * The EDIFACT processing Settings.
   */
  processingSettings: EdifactProcessingSettings;
  /**
   * The EDIFACT envelope override settings.
   */
  envelopeOverrides?: EdifactEnvelopeOverride[];
  /**
   * The EDIFACT message filter list.
   */
  messageFilterList?: EdifactMessageIdentifier[];
  /**
   * The EDIFACT schema references.
   */
  schemaReferences: EdifactSchemaReference[];
  /**
   * The EDIFACT validation override settings.
   */
  validationOverrides?: EdifactValidationOverride[];
  /**
   * The EDIFACT delimiter override settings.
   */
  edifactDelimiterOverrides?: EdifactDelimiterOverride[];
}

/**
 * The Edifact one way agreement.
 */
export interface EdifactOneWayAgreement {
  /**
   * The sender business identity
   */
  senderBusinessIdentity: BusinessIdentity;
  /**
   * The receiver business identity
   */
  receiverBusinessIdentity: BusinessIdentity;
  /**
   * The EDIFACT protocol settings.
   */
  protocolSettings: EdifactProtocolSettings;
}

/**
 * The Edifact agreement content.
 */
export interface EdifactAgreementContent {
  /**
   * The EDIFACT one-way receive agreement.
   */
  receiveAgreement: EdifactOneWayAgreement;
  /**
   * The EDIFACT one-way send agreement.
   */
  sendAgreement: EdifactOneWayAgreement;
}

/**
 * The integration account agreement content.
 */
export interface AgreementContent {
  /**
   * The AS2 agreement content.
   */
  aS2?: AS2AgreementContent;
  /**
   * The X12 agreement content.
   */
  x12?: X12AgreementContent;
  /**
   * The EDIFACT agreement content.
   */
  edifact?: EdifactAgreementContent;
}

/**
 * The integration account agreement.
 */
export interface IntegrationAccountAgreement extends Resource {
  /**
   * The created time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changedTime?: Date;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The agreement type. Possible values include: 'NotSpecified', 'AS2', 'X12', 'Edifact'
   */
  agreementType: AgreementType;
  /**
   * The integration account partner that is set as host partner for this agreement.
   */
  hostPartner: string;
  /**
   * The integration account partner that is set as guest partner for this agreement.
   */
  guestPartner: string;
  /**
   * The business identity of the host partner.
   */
  hostIdentity: BusinessIdentity;
  /**
   * The business identity of the guest partner.
   */
  guestIdentity: BusinessIdentity;
  /**
   * The agreement content.
   */
  content: AgreementContent;
}

/**
 * The integration account agreement filter for odata query.
 */
export interface IntegrationAccountAgreementFilter {
  /**
   * The agreement type of integration account agreement. Possible values include: 'NotSpecified',
   * 'AS2', 'X12', 'Edifact'
   */
  agreementType: AgreementType;
}

/**
 * The key vault reference.
 */
export interface KeyVaultKeyReferenceKeyVault {
  /**
   * The resource id.
   */
  id?: string;
  /**
   * The resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The reference to the key vault key.
 */
export interface KeyVaultKeyReference {
  /**
   * The key vault reference.
   */
  keyVault: KeyVaultKeyReferenceKeyVault;
  /**
   * The private key name in key vault.
   */
  keyName: string;
  /**
   * The private key version in key vault.
   */
  keyVersion?: string;
}

/**
 * The integration account certificate.
 */
export interface IntegrationAccountCertificate extends Resource {
  /**
   * The created time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changedTime?: Date;
  /**
   * The metadata.
   */
  metadata?: any;
  /**
   * The key details in the key vault.
   */
  key?: KeyVaultKeyReference;
  /**
   * The public certificate.
   */
  publicCertificate?: string;
}

/**
 * The integration account session filter.
 */
export interface IntegrationAccountSessionFilter {
  /**
   * The changed time of integration account sessions.
   */
  changedTime: Date;
}

/**
 * The integration account session.
 */
export interface IntegrationAccountSession extends Resource {
  /**
   * The created time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTime?: Date;
  /**
   * The changed time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changedTime?: Date;
  /**
   * The session content.
   */
  content?: any;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.Logic
   */
  provider?: string;
  /**
   * Resource on which the operation is performed: Profile, endpoint, etc.
   */
  resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   */
  operation?: string;
  /**
   * Operation: description.
   */
  description?: string;
}

/**
 * Logic REST API operation
 */
export interface Operation {
  /**
   * Operation: origin
   */
  origin?: string;
  /**
   * Operation name: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
  /**
   * The properties.
   */
  properties?: any;
}

/**
 * The key vault reference.
 */
export interface KeyVaultReference extends ResourceReference {
}

/**
 * The list key vault keys definition.
 */
export interface ListKeyVaultKeysDefinition {
  /**
   * The key vault reference.
   */
  keyVault: KeyVaultReference;
  /**
   * The skip token.
   */
  skipToken?: string;
}

/**
 * The key attributes.
 */
export interface KeyVaultKeyAttributes {
  /**
   * Whether the key is enabled or not.
   */
  enabled?: boolean;
  /**
   * When the key was created.
   */
  created?: number;
  /**
   * When the key was updated.
   */
  updated?: number;
}

/**
 * The key vault key.
 */
export interface KeyVaultKey {
  /**
   * The key id.
   */
  kid?: string;
  /**
   * The key attributes.
   */
  attributes?: KeyVaultKeyAttributes;
}

/**
 * The tracking event error info.
 */
export interface TrackingEventErrorInfo {
  /**
   * The message.
   */
  message?: string;
  /**
   * The code.
   */
  code?: string;
}

/**
 * The tracking event.
 */
export interface TrackingEvent {
  /**
   * The event level. Possible values include: 'LogAlways', 'Critical', 'Error', 'Warning',
   * 'Informational', 'Verbose'
   */
  eventLevel: EventLevel;
  /**
   * The event time.
   */
  eventTime: Date;
  /**
   * The record type. Possible values include: 'NotSpecified', 'Custom', 'AS2Message', 'AS2MDN',
   * 'X12Interchange', 'X12FunctionalGroup', 'X12TransactionSet', 'X12InterchangeAcknowledgment',
   * 'X12FunctionalGroupAcknowledgment', 'X12TransactionSetAcknowledgment', 'EdifactInterchange',
   * 'EdifactFunctionalGroup', 'EdifactTransactionSet', 'EdifactInterchangeAcknowledgment',
   * 'EdifactFunctionalGroupAcknowledgment', 'EdifactTransactionSetAcknowledgment'
   */
  recordType: TrackingRecordType;
  /**
   * The record.
   */
  record?: any;
  /**
   * The error.
   */
  error?: TrackingEventErrorInfo;
}

/**
 * The tracking events definition.
 */
export interface TrackingEventsDefinition {
  /**
   * The source type.
   */
  sourceType: string;
  /**
   * The track events options. Possible values include: 'None', 'DisableSourceInfoEnrich'
   */
  trackEventsOptions?: TrackEventsOperationOptions;
  /**
   * The events.
   */
  events: TrackingEvent[];
}

/**
 * The set trigger state action definition.
 */
export interface SetTriggerStateActionDefinition {
  /**
   * The source.
   */
  source: WorkflowTriggerReference;
}

/**
 * The expression.
 */
export interface Expression {
  /**
   * The text.
   */
  text?: string;
  value?: any;
  /**
   * The sub expressions.
   */
  subexpressions?: Expression[];
  error?: AzureResourceErrorInfo;
}

/**
 * The expression root.
 */
export interface ExpressionRoot extends Expression {
  /**
   * The path.
   */
  path?: string;
}

/**
 * The error info.
 */
export interface ErrorInfo {
  /**
   * The error code.
   */
  code: string;
}

/**
 * The azure resource error info.
 */
export interface AzureResourceErrorInfo extends ErrorInfo {
  /**
   * The error message.
   */
  message: string;
  /**
   * The error details.
   */
  details?: AzureResourceErrorInfo[];
}

/**
 * The workflow run action repetition index.
 */
export interface RepetitionIndex {
  /**
   * The scope.
   */
  scopeName?: string;
  /**
   * The index.
   */
  itemIndex: number;
}

/**
 * The workflow run action repetition definition.
 */
export interface WorkflowRunActionRepetitionDefinition extends Resource {
  /**
   * The start time of the workflow scope repetition.
   */
  startTime?: Date;
  /**
   * The end time of the workflow scope repetition.
   */
  endTime?: Date;
  /**
   * The correlation properties.
   */
  correlation?: RunActionCorrelation;
  /**
   * The status of the workflow scope repetition. Possible values include: 'NotSpecified',
   * 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed',
   * 'Faulted', 'TimedOut', 'Aborted', 'Ignored'
   */
  status?: WorkflowStatus;
  /**
   * The workflow scope repetition code.
   */
  code?: string;
  error?: any;
  /**
   * Gets the tracking id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackingId?: string;
  /**
   * Gets the inputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly inputs?: any;
  /**
   * Gets the link to inputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the outputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outputs?: any;
  /**
   * Gets the link to outputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the tracked properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackedProperties?: any;
  /**
   * Gets the retry histories.
   */
  retryHistory?: RetryHistory[];
  iterationCount?: number;
  /**
   * The repetition indexes.
   */
  repetitionIndexes?: RepetitionIndex[];
}

/**
 * The run operation result properties.
 */
export interface OperationResultProperties {
  /**
   * The start time of the workflow scope repetition.
   */
  startTime?: Date;
  /**
   * The end time of the workflow scope repetition.
   */
  endTime?: Date;
  /**
   * The correlation properties.
   */
  correlation?: RunActionCorrelation;
  /**
   * The status of the workflow scope repetition. Possible values include: 'NotSpecified',
   * 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped', 'Suspended', 'Cancelled', 'Failed',
   * 'Faulted', 'TimedOut', 'Aborted', 'Ignored'
   */
  status?: WorkflowStatus;
  /**
   * The workflow scope repetition code.
   */
  code?: string;
  error?: any;
}

/**
 * The operation result definition.
 */
export interface OperationResult extends OperationResultProperties {
  /**
   * Gets the tracking id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackingId?: string;
  /**
   * Gets the inputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly inputs?: any;
  /**
   * Gets the link to inputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly inputsLink?: ContentLink;
  /**
   * Gets the outputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outputs?: any;
  /**
   * Gets the link to outputs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outputsLink?: ContentLink;
  /**
   * Gets the tracked properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trackedProperties?: any;
  /**
   * Gets the retry histories.
   */
  retryHistory?: RetryHistory[];
  iterationCount?: number;
}

/**
 * The JSON schema.
 */
export interface JsonSchema {
  /**
   * The JSON title.
   */
  title?: string;
  /**
   * The JSON content.
   */
  content?: string;
}

/**
 * The artifact properties definition.
 */
export interface ArtifactProperties {
  /**
   * The artifact creation time.
   */
  createdTime?: Date;
  /**
   * The artifact changed time.
   */
  changedTime?: Date;
  metadata?: any;
}

/**
 * The artifact content properties definition.
 */
export interface ArtifactContentPropertiesDefinition extends ArtifactProperties {
  content?: any;
  /**
   * The content type.
   */
  contentType?: string;
  /**
   * The content link.
   */
  contentLink?: ContentLink;
}

/**
 * The assembly properties definition.
 */
export interface AssemblyProperties extends ArtifactContentPropertiesDefinition {
  /**
   * The assembly name.
   */
  assemblyName: string;
  /**
   * The assembly version.
   */
  assemblyVersion?: string;
  /**
   * The assembly culture.
   */
  assemblyCulture?: string;
  /**
   * The assembly public key token.
   */
  assemblyPublicKeyToken?: string;
}

/**
 * The assembly definition.
 */
export interface AssemblyDefinition extends Resource {
  /**
   * The assembly properties.
   */
  properties: AssemblyProperties;
}

/**
 * The batch release criteria.
 */
export interface BatchReleaseCriteria {
  /**
   * The message count.
   */
  messageCount?: number;
  /**
   * The batch size in bytes.
   */
  batchSize?: number;
  /**
   * The recurrence.
   */
  recurrence?: WorkflowTriggerRecurrence;
}

/**
 * The batch configuration properties definition.
 */
export interface BatchConfigurationProperties extends ArtifactProperties {
  /**
   * The name of the batch group.
   */
  batchGroupName: string;
  /**
   * The batch release criteria.
   */
  releaseCriteria: BatchReleaseCriteria;
}

/**
 * The batch configuration resource definition.
 */
export interface BatchConfiguration extends Resource {
  /**
   * The batch configuration properties.
   */
  properties: BatchConfigurationProperties;
}

/**
 * A request.
 */
export interface Request {
  /**
   * A list of all the headers attached to the request.
   */
  headers?: any;
  /**
   * The destination for the request.
   */
  uri?: string;
  /**
   * The HTTP method used for the request.
   */
  method?: string;
}

/**
 * A response.
 */
export interface Response {
  /**
   * A list of all the headers attached to the response.
   */
  headers?: any;
  /**
   * The status code of the response.
   */
  statusCode?: number;
  /**
   * Details on the location of the body content.
   */
  bodyLink?: ContentLink;
}

/**
 * The request history.
 */
export interface RequestHistoryProperties {
  /**
   * The time the request started.
   */
  startTime?: Date;
  /**
   * The time the request ended.
   */
  endTime?: Date;
  /**
   * The request.
   */
  request?: Request;
  /**
   * The response.
   */
  response?: Response;
}

/**
 * The request history.
 */
export interface RequestHistory extends Resource {
  /**
   * The request history properties.
   */
  properties?: RequestHistoryProperties;
}

/**
 * Optional Parameters.
 */
export interface WorkflowsListBySubscriptionOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: State, Trigger, and
   * ReferencedResourceId.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface WorkflowsListByResourceGroupOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: State, Trigger, and
   * ReferencedResourceId.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface WorkflowVersionsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface WorkflowTriggersListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface WorkflowVersionTriggersListCallbackUrlOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The callback URL parameters.
   */
  parameters?: GetCallbackUrlParameters;
}

/**
 * Optional Parameters.
 */
export interface WorkflowTriggerHistoriesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: Status, StartTime, and
   * ClientTrackingId.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface WorkflowRunsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: Status, StartTime, and
   * ClientTrackingId.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface WorkflowRunActionsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: Status.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface IntegrationAccountsListBySubscriptionOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface IntegrationAccountsListByResourceGroupOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface IntegrationAccountSchemasListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: SchemaType.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface IntegrationAccountMapsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: MapType.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface IntegrationAccountPartnersListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: PartnerType.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface IntegrationAccountAgreementsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: AgreementType.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface IntegrationAccountCertificatesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface IntegrationAccountSessionsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
  /**
   * The filter to apply on the operation. Options for filters include: ChangedTime.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface IntegrationServiceEnvironmentsListBySubscriptionOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface IntegrationServiceEnvironmentsListByResourceGroupOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The number of items to be included in the result.
   */
  top?: number;
}

/**
 * An interface representing LogicManagementClientOptions.
 */
export interface LogicManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * The list of workflows.
 * @extends Array<Workflow>
 */
export interface WorkflowListResult extends Array<Workflow> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of workflow versions.
 * @extends Array<WorkflowVersion>
 */
export interface WorkflowVersionListResult extends Array<WorkflowVersion> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of workflow triggers.
 * @extends Array<WorkflowTrigger>
 */
export interface WorkflowTriggerListResult extends Array<WorkflowTrigger> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of workflow trigger histories.
 * @extends Array<WorkflowTriggerHistory>
 */
export interface WorkflowTriggerHistoryListResult extends Array<WorkflowTriggerHistory> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of workflow runs.
 * @extends Array<WorkflowRun>
 */
export interface WorkflowRunListResult extends Array<WorkflowRun> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of workflow run actions.
 * @extends Array<WorkflowRunAction>
 */
export interface WorkflowRunActionListResult extends Array<WorkflowRunAction> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The expression traces.
 * @extends Array<ExpressionRoot>
 */
export interface ExpressionTraces extends Array<ExpressionRoot> {
  inputs?: ExpressionRoot[];
}

/**
 * @interface
 * A collection of workflow run action repetitions.
 * @extends Array<WorkflowRunActionRepetitionDefinition>
 */
export interface WorkflowRunActionRepetitionDefinitionCollection extends Array<WorkflowRunActionRepetitionDefinition> {
  /**
   * The link used to get the next page of recommendations.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of workflow request histories.
 * @extends Array<RequestHistory>
 */
export interface RequestHistoryListResult extends Array<RequestHistory> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of integration accounts.
 * @extends Array<IntegrationAccount>
 */
export interface IntegrationAccountListResult extends Array<IntegrationAccount> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Collection of key vault keys.
 * @extends Array<KeyVaultKey>
 */
export interface KeyVaultKeyCollection extends Array<KeyVaultKey> {
  /**
   * The skip token.
   */
  skipToken?: string;
}

/**
 * @interface
 * A collection of assembly definitions.
 * @extends Array<AssemblyDefinition>
 */
export interface AssemblyCollection extends Array<AssemblyDefinition> {
}

/**
 * @interface
 * A collection of batch configurations.
 * @extends Array<BatchConfiguration>
 */
export interface BatchConfigurationCollection extends Array<BatchConfiguration> {
}

/**
 * @interface
 * The list of integration account schemas.
 * @extends Array<IntegrationAccountSchema>
 */
export interface IntegrationAccountSchemaListResult extends Array<IntegrationAccountSchema> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of integration account maps.
 * @extends Array<IntegrationAccountMap>
 */
export interface IntegrationAccountMapListResult extends Array<IntegrationAccountMap> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of integration account partners.
 * @extends Array<IntegrationAccountPartner>
 */
export interface IntegrationAccountPartnerListResult extends Array<IntegrationAccountPartner> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of integration account agreements.
 * @extends Array<IntegrationAccountAgreement>
 */
export interface IntegrationAccountAgreementListResult extends Array<IntegrationAccountAgreement> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of integration account certificates.
 * @extends Array<IntegrationAccountCertificate>
 */
export interface IntegrationAccountCertificateListResult extends Array<IntegrationAccountCertificate> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of integration account sessions.
 * @extends Array<IntegrationAccountSession>
 */
export interface IntegrationAccountSessionListResult extends Array<IntegrationAccountSession> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of integration service environments.
 * @extends Array<IntegrationServiceEnvironment>
 */
export interface IntegrationServiceEnvironmentListResult extends Array<IntegrationServiceEnvironment> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of integration service environment skus.
 * @extends Array<IntegrationServiceEnvironmentSkuDefinition>
 */
export interface IntegrationServiceEnvironmentSkuList extends Array<IntegrationServiceEnvironmentSkuDefinition> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of managed APIs.
 * @extends Array<ManagedApi>
 */
export interface ManagedApiListResult extends Array<ManagedApi> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of managed API operations.
 * @extends Array<ApiOperation>
 */
export interface ApiOperationListResult extends Array<ApiOperation> {
  /**
   * The URL to get the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Result of the request to list Logic operations. It contains a list of operations and a URL link
 * to get the next set of results.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * URL to get the next set of operation list results if there are any.
   */
  nextLink?: string;
}

/**
 * Defines values for WorkflowProvisioningState.
 * Possible values include: 'NotSpecified', 'Accepted', 'Running', 'Ready', 'Creating', 'Created',
 * 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded', 'Moving', 'Updating', 'Registering',
 * 'Registered', 'Unregistering', 'Unregistered', 'Completed', 'Renewing', 'Pending', 'Waiting',
 * 'InProgress'
 * @readonly
 * @enum {string}
 */
export type WorkflowProvisioningState = 'NotSpecified' | 'Accepted' | 'Running' | 'Ready' | 'Creating' | 'Created' | 'Deleting' | 'Deleted' | 'Canceled' | 'Failed' | 'Succeeded' | 'Moving' | 'Updating' | 'Registering' | 'Registered' | 'Unregistering' | 'Unregistered' | 'Completed' | 'Renewing' | 'Pending' | 'Waiting' | 'InProgress';

/**
 * Defines values for WorkflowState.
 * Possible values include: 'NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted',
 * 'Suspended'
 * @readonly
 * @enum {string}
 */
export type WorkflowState = 'NotSpecified' | 'Completed' | 'Enabled' | 'Disabled' | 'Deleted' | 'Suspended';

/**
 * Defines values for OpenAuthenticationProviderType.
 * Possible values include: 'AAD'
 * @readonly
 * @enum {string}
 */
export type OpenAuthenticationProviderType = 'AAD';

/**
 * Defines values for SkuName.
 * Possible values include: 'NotSpecified', 'Free', 'Shared', 'Basic', 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type SkuName = 'NotSpecified' | 'Free' | 'Shared' | 'Basic' | 'Standard' | 'Premium';

/**
 * Defines values for ParameterType.
 * Possible values include: 'NotSpecified', 'String', 'SecureString', 'Int', 'Float', 'Bool',
 * 'Array', 'Object', 'SecureObject'
 * @readonly
 * @enum {string}
 */
export type ParameterType = 'NotSpecified' | 'String' | 'SecureString' | 'Int' | 'Float' | 'Bool' | 'Array' | 'Object' | 'SecureObject';

/**
 * Defines values for WorkflowTriggerProvisioningState.
 * Possible values include: 'NotSpecified', 'Accepted', 'Running', 'Ready', 'Creating', 'Created',
 * 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded', 'Moving', 'Updating', 'Registering',
 * 'Registered', 'Unregistering', 'Unregistered', 'Completed'
 * @readonly
 * @enum {string}
 */
export type WorkflowTriggerProvisioningState = 'NotSpecified' | 'Accepted' | 'Running' | 'Ready' | 'Creating' | 'Created' | 'Deleting' | 'Deleted' | 'Canceled' | 'Failed' | 'Succeeded' | 'Moving' | 'Updating' | 'Registering' | 'Registered' | 'Unregistering' | 'Unregistered' | 'Completed';

/**
 * Defines values for WorkflowStatus.
 * Possible values include: 'NotSpecified', 'Paused', 'Running', 'Waiting', 'Succeeded', 'Skipped',
 * 'Suspended', 'Cancelled', 'Failed', 'Faulted', 'TimedOut', 'Aborted', 'Ignored'
 * @readonly
 * @enum {string}
 */
export type WorkflowStatus = 'NotSpecified' | 'Paused' | 'Running' | 'Waiting' | 'Succeeded' | 'Skipped' | 'Suspended' | 'Cancelled' | 'Failed' | 'Faulted' | 'TimedOut' | 'Aborted' | 'Ignored';

/**
 * Defines values for RecurrenceFrequency.
 * Possible values include: 'NotSpecified', 'Second', 'Minute', 'Hour', 'Day', 'Week', 'Month',
 * 'Year'
 * @readonly
 * @enum {string}
 */
export type RecurrenceFrequency = 'NotSpecified' | 'Second' | 'Minute' | 'Hour' | 'Day' | 'Week' | 'Month' | 'Year';

/**
 * Defines values for DaysOfWeek.
 * Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',
 * 'Saturday'
 * @readonly
 * @enum {string}
 */
export type DaysOfWeek = 'Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday';

/**
 * Defines values for DayOfWeek.
 * Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',
 * 'Saturday'
 * @readonly
 * @enum {string}
 */
export type DayOfWeek = 'Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday';

/**
 * Defines values for KeyType.
 * Possible values include: 'NotSpecified', 'Primary', 'Secondary'
 * @readonly
 * @enum {string}
 */
export type KeyType = 'NotSpecified' | 'Primary' | 'Secondary';

/**
 * Defines values for ApiTier.
 * Possible values include: 'NotSpecified', 'Enterprise', 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type ApiTier = 'NotSpecified' | 'Enterprise' | 'Standard' | 'Premium';

/**
 * Defines values for StatusAnnotation.
 * Possible values include: 'NotSpecified', 'Preview', 'Production'
 * @readonly
 * @enum {string}
 */
export type StatusAnnotation = 'NotSpecified' | 'Preview' | 'Production';

/**
 * Defines values for SwaggerSchemaType.
 * Possible values include: 'String', 'Number', 'Integer', 'Boolean', 'Array', 'File', 'Object',
 * 'Null'
 * @readonly
 * @enum {string}
 */
export type SwaggerSchemaType = 'String' | 'Number' | 'Integer' | 'Boolean' | 'Array' | 'File' | 'Object' | 'Null';

/**
 * Defines values for ApiType.
 * Possible values include: 'NotSpecified', 'Rest', 'Soap'
 * @readonly
 * @enum {string}
 */
export type ApiType = 'NotSpecified' | 'Rest' | 'Soap';

/**
 * Defines values for WsdlImportMethod.
 * Possible values include: 'NotSpecified', 'SoapToRest', 'SoapPassThrough'
 * @readonly
 * @enum {string}
 */
export type WsdlImportMethod = 'NotSpecified' | 'SoapToRest' | 'SoapPassThrough';

/**
 * Defines values for ApiDeploymentParameterVisibility.
 * Possible values include: 'NotSpecified', 'Default', 'Internal'
 * @readonly
 * @enum {string}
 */
export type ApiDeploymentParameterVisibility = 'NotSpecified' | 'Default' | 'Internal';

/**
 * Defines values for IntegrationServiceEnvironmentNetworkEndPointAccessibilityState.
 * Possible values include: 'NotSpecified', 'Unknown', 'Available', 'NotAvailable'
 * @readonly
 * @enum {string}
 */
export type IntegrationServiceEnvironmentNetworkEndPointAccessibilityState = 'NotSpecified' | 'Unknown' | 'Available' | 'NotAvailable';

/**
 * Defines values for IntegrationServiceEnvironmentNetworkDependencyCategoryType.
 * Possible values include: 'NotSpecified', 'AzureStorage', 'AzureManagement',
 * 'AzureActiveDirectory', 'SSLCertificateVerification', 'DiagnosticLogsAndMetrics',
 * 'IntegrationServiceEnvironmentConnectors', 'RedisCache', 'AccessEndpoints', 'RecoveryService',
 * 'SQL', 'RegionalService'
 * @readonly
 * @enum {string}
 */
export type IntegrationServiceEnvironmentNetworkDependencyCategoryType = 'NotSpecified' | 'AzureStorage' | 'AzureManagement' | 'AzureActiveDirectory' | 'SSLCertificateVerification' | 'DiagnosticLogsAndMetrics' | 'IntegrationServiceEnvironmentConnectors' | 'RedisCache' | 'AccessEndpoints' | 'RecoveryService' | 'SQL' | 'RegionalService';

/**
 * Defines values for IntegrationServiceEnvironmentNetworkDependencyHealthState.
 * Possible values include: 'NotSpecified', 'Healthy', 'Unhealthy', 'Unknown'
 * @readonly
 * @enum {string}
 */
export type IntegrationServiceEnvironmentNetworkDependencyHealthState = 'NotSpecified' | 'Healthy' | 'Unhealthy' | 'Unknown';

/**
 * Defines values for ErrorResponseCode.
 * Possible values include: 'NotSpecified', 'IntegrationServiceEnvironmentNotFound',
 * 'InternalServerError', 'InvalidOperationId'
 * @readonly
 * @enum {string}
 */
export type ErrorResponseCode = 'NotSpecified' | 'IntegrationServiceEnvironmentNotFound' | 'InternalServerError' | 'InvalidOperationId';

/**
 * Defines values for AzureAsyncOperationState.
 * Possible values include: 'Failed', 'Succeeded', 'Pending', 'Canceled'
 * @readonly
 * @enum {string}
 */
export type AzureAsyncOperationState = 'Failed' | 'Succeeded' | 'Pending' | 'Canceled';

/**
 * Defines values for IntegrationServiceEnvironmentAccessEndpointType.
 * Possible values include: 'NotSpecified', 'External', 'Internal'
 * @readonly
 * @enum {string}
 */
export type IntegrationServiceEnvironmentAccessEndpointType = 'NotSpecified' | 'External' | 'Internal';

/**
 * Defines values for IntegrationServiceEnvironmentSkuName.
 * Possible values include: 'NotSpecified', 'Premium', 'Developer'
 * @readonly
 * @enum {string}
 */
export type IntegrationServiceEnvironmentSkuName = 'NotSpecified' | 'Premium' | 'Developer';

/**
 * Defines values for IntegrationServiceEnvironmentSkuScaleType.
 * Possible values include: 'Manual', 'Automatic', 'None'
 * @readonly
 * @enum {string}
 */
export type IntegrationServiceEnvironmentSkuScaleType = 'Manual' | 'Automatic' | 'None';

/**
 * Defines values for IntegrationAccountSkuName.
 * Possible values include: 'NotSpecified', 'Free', 'Basic', 'Standard'
 * @readonly
 * @enum {string}
 */
export type IntegrationAccountSkuName = 'NotSpecified' | 'Free' | 'Basic' | 'Standard';

/**
 * Defines values for SchemaType.
 * Possible values include: 'NotSpecified', 'Xml'
 * @readonly
 * @enum {string}
 */
export type SchemaType = 'NotSpecified' | 'Xml';

/**
 * Defines values for MapType.
 * Possible values include: 'NotSpecified', 'Xslt', 'Xslt20', 'Xslt30', 'Liquid'
 * @readonly
 * @enum {string}
 */
export type MapType = 'NotSpecified' | 'Xslt' | 'Xslt20' | 'Xslt30' | 'Liquid';

/**
 * Defines values for PartnerType.
 * Possible values include: 'NotSpecified', 'B2B'
 * @readonly
 * @enum {string}
 */
export type PartnerType = 'NotSpecified' | 'B2B';

/**
 * Defines values for AgreementType.
 * Possible values include: 'NotSpecified', 'AS2', 'X12', 'Edifact'
 * @readonly
 * @enum {string}
 */
export type AgreementType = 'NotSpecified' | 'AS2' | 'X12' | 'Edifact';

/**
 * Defines values for HashingAlgorithm.
 * Possible values include: 'NotSpecified', 'None', 'MD5', 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @readonly
 * @enum {string}
 */
export type HashingAlgorithm = 'NotSpecified' | 'None' | 'MD5' | 'SHA1' | 'SHA2256' | 'SHA2384' | 'SHA2512';

/**
 * Defines values for EncryptionAlgorithm.
 * Possible values include: 'NotSpecified', 'None', 'DES3', 'RC2', 'AES128', 'AES192', 'AES256'
 * @readonly
 * @enum {string}
 */
export type EncryptionAlgorithm = 'NotSpecified' | 'None' | 'DES3' | 'RC2' | 'AES128' | 'AES192' | 'AES256';

/**
 * Defines values for SigningAlgorithm.
 * Possible values include: 'NotSpecified', 'Default', 'SHA1', 'SHA2256', 'SHA2384', 'SHA2512'
 * @readonly
 * @enum {string}
 */
export type SigningAlgorithm = 'NotSpecified' | 'Default' | 'SHA1' | 'SHA2256' | 'SHA2384' | 'SHA2512';

/**
 * Defines values for TrailingSeparatorPolicy.
 * Possible values include: 'NotSpecified', 'NotAllowed', 'Optional', 'Mandatory'
 * @readonly
 * @enum {string}
 */
export type TrailingSeparatorPolicy = 'NotSpecified' | 'NotAllowed' | 'Optional' | 'Mandatory';

/**
 * Defines values for X12CharacterSet.
 * Possible values include: 'NotSpecified', 'Basic', 'Extended', 'UTF8'
 * @readonly
 * @enum {string}
 */
export type X12CharacterSet = 'NotSpecified' | 'Basic' | 'Extended' | 'UTF8';

/**
 * Defines values for SegmentTerminatorSuffix.
 * Possible values include: 'NotSpecified', 'None', 'CR', 'LF', 'CRLF'
 * @readonly
 * @enum {string}
 */
export type SegmentTerminatorSuffix = 'NotSpecified' | 'None' | 'CR' | 'LF' | 'CRLF';

/**
 * Defines values for X12DateFormat.
 * Possible values include: 'NotSpecified', 'CCYYMMDD', 'YYMMDD'
 * @readonly
 * @enum {string}
 */
export type X12DateFormat = 'NotSpecified' | 'CCYYMMDD' | 'YYMMDD';

/**
 * Defines values for X12TimeFormat.
 * Possible values include: 'NotSpecified', 'HHMM', 'HHMMSS', 'HHMMSSdd', 'HHMMSSd'
 * @readonly
 * @enum {string}
 */
export type X12TimeFormat = 'NotSpecified' | 'HHMM' | 'HHMMSS' | 'HHMMSSdd' | 'HHMMSSd';

/**
 * Defines values for UsageIndicator.
 * Possible values include: 'NotSpecified', 'Test', 'Information', 'Production'
 * @readonly
 * @enum {string}
 */
export type UsageIndicator = 'NotSpecified' | 'Test' | 'Information' | 'Production';

/**
 * Defines values for MessageFilterType.
 * Possible values include: 'NotSpecified', 'Include', 'Exclude'
 * @readonly
 * @enum {string}
 */
export type MessageFilterType = 'NotSpecified' | 'Include' | 'Exclude';

/**
 * Defines values for EdifactCharacterSet.
 * Possible values include: 'NotSpecified', 'UNOB', 'UNOA', 'UNOC', 'UNOD', 'UNOE', 'UNOF', 'UNOG',
 * 'UNOH', 'UNOI', 'UNOJ', 'UNOK', 'UNOX', 'UNOY', 'KECA'
 * @readonly
 * @enum {string}
 */
export type EdifactCharacterSet = 'NotSpecified' | 'UNOB' | 'UNOA' | 'UNOC' | 'UNOD' | 'UNOE' | 'UNOF' | 'UNOG' | 'UNOH' | 'UNOI' | 'UNOJ' | 'UNOK' | 'UNOX' | 'UNOY' | 'KECA';

/**
 * Defines values for EdifactDecimalIndicator.
 * Possible values include: 'NotSpecified', 'Comma', 'Decimal'
 * @readonly
 * @enum {string}
 */
export type EdifactDecimalIndicator = 'NotSpecified' | 'Comma' | 'Decimal';

/**
 * Defines values for TrackEventsOperationOptions.
 * Possible values include: 'None', 'DisableSourceInfoEnrich'
 * @readonly
 * @enum {string}
 */
export type TrackEventsOperationOptions = 'None' | 'DisableSourceInfoEnrich';

/**
 * Defines values for EventLevel.
 * Possible values include: 'LogAlways', 'Critical', 'Error', 'Warning', 'Informational', 'Verbose'
 * @readonly
 * @enum {string}
 */
export type EventLevel = 'LogAlways' | 'Critical' | 'Error' | 'Warning' | 'Informational' | 'Verbose';

/**
 * Defines values for TrackingRecordType.
 * Possible values include: 'NotSpecified', 'Custom', 'AS2Message', 'AS2MDN', 'X12Interchange',
 * 'X12FunctionalGroup', 'X12TransactionSet', 'X12InterchangeAcknowledgment',
 * 'X12FunctionalGroupAcknowledgment', 'X12TransactionSetAcknowledgment', 'EdifactInterchange',
 * 'EdifactFunctionalGroup', 'EdifactTransactionSet', 'EdifactInterchangeAcknowledgment',
 * 'EdifactFunctionalGroupAcknowledgment', 'EdifactTransactionSetAcknowledgment'
 * @readonly
 * @enum {string}
 */
export type TrackingRecordType = 'NotSpecified' | 'Custom' | 'AS2Message' | 'AS2MDN' | 'X12Interchange' | 'X12FunctionalGroup' | 'X12TransactionSet' | 'X12InterchangeAcknowledgment' | 'X12FunctionalGroupAcknowledgment' | 'X12TransactionSetAcknowledgment' | 'EdifactInterchange' | 'EdifactFunctionalGroup' | 'EdifactTransactionSet' | 'EdifactInterchangeAcknowledgment' | 'EdifactFunctionalGroupAcknowledgment' | 'EdifactTransactionSetAcknowledgment';

/**
 * Contains response data for the listBySubscription operation.
 */
export type WorkflowsListBySubscriptionResponse = WorkflowListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type WorkflowsListByResourceGroupResponse = WorkflowListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowsGetResponse = Workflow & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Workflow;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type WorkflowsCreateOrUpdateResponse = Workflow & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Workflow;
    };
};

/**
 * Contains response data for the update operation.
 */
export type WorkflowsUpdateResponse = Workflow & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Workflow;
    };
};

/**
 * Contains response data for the generateUpgradedDefinition operation.
 */
export type WorkflowsGenerateUpgradedDefinitionResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};

/**
 * Contains response data for the listCallbackUrl operation.
 */
export type WorkflowsListCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowTriggerCallbackUrl;
    };
};

/**
 * Contains response data for the listSwagger operation.
 */
export type WorkflowsListSwaggerResponse = {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type WorkflowsListBySubscriptionNextResponse = WorkflowListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type WorkflowsListByResourceGroupNextResponse = WorkflowListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type WorkflowVersionsListResponse = WorkflowVersionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowVersionListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowVersionsGetResponse = WorkflowVersion & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowVersion;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type WorkflowVersionsListNextResponse = WorkflowVersionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowVersionListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type WorkflowTriggersListResponse = WorkflowTriggerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowTriggerListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowTriggersGetResponse = WorkflowTrigger & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowTrigger;
    };
};

/**
 * Contains response data for the getSchemaJson operation.
 */
export type WorkflowTriggersGetSchemaJsonResponse = JsonSchema & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JsonSchema;
    };
};

/**
 * Contains response data for the listCallbackUrl operation.
 */
export type WorkflowTriggersListCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowTriggerCallbackUrl;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type WorkflowTriggersListNextResponse = WorkflowTriggerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowTriggerListResult;
    };
};

/**
 * Contains response data for the listCallbackUrl operation.
 */
export type WorkflowVersionTriggersListCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowTriggerCallbackUrl;
    };
};

/**
 * Contains response data for the list operation.
 */
export type WorkflowTriggerHistoriesListResponse = WorkflowTriggerHistoryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowTriggerHistoryListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowTriggerHistoriesGetResponse = WorkflowTriggerHistory & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowTriggerHistory;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type WorkflowTriggerHistoriesListNextResponse = WorkflowTriggerHistoryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowTriggerHistoryListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type WorkflowRunsListResponse = WorkflowRunListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowRunListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowRunsGetResponse = WorkflowRun & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowRun;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type WorkflowRunsListNextResponse = WorkflowRunListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowRunListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type WorkflowRunActionsListResponse = WorkflowRunActionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowRunActionListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowRunActionsGetResponse = WorkflowRunAction & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowRunAction;
    };
};

/**
 * Contains response data for the listExpressionTraces operation.
 */
export type WorkflowRunActionsListExpressionTracesResponse = ExpressionTraces & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressionTraces;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type WorkflowRunActionsListNextResponse = WorkflowRunActionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowRunActionListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type WorkflowRunActionRepetitionsListResponse = WorkflowRunActionRepetitionDefinitionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowRunActionRepetitionDefinitionCollection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowRunActionRepetitionsGetResponse = WorkflowRunActionRepetitionDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowRunActionRepetitionDefinition;
    };
};

/**
 * Contains response data for the listExpressionTraces operation.
 */
export type WorkflowRunActionRepetitionsListExpressionTracesResponse = ExpressionTraces & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExpressionTraces;
    };
};

/**
 * Contains response data for the list operation.
 */
export type WorkflowRunActionRepetitionsRequestHistoriesListResponse = RequestHistoryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RequestHistoryListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowRunActionRepetitionsRequestHistoriesGetResponse = RequestHistory & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RequestHistory;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type WorkflowRunActionRepetitionsRequestHistoriesListNextResponse = RequestHistoryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RequestHistoryListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type WorkflowRunActionRequestHistoriesListResponse = RequestHistoryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RequestHistoryListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowRunActionRequestHistoriesGetResponse = RequestHistory & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RequestHistory;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type WorkflowRunActionRequestHistoriesListNextResponse = RequestHistoryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RequestHistoryListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type WorkflowRunActionScopeRepetitionsListResponse = WorkflowRunActionRepetitionDefinitionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowRunActionRepetitionDefinitionCollection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowRunActionScopeRepetitionsGetResponse = WorkflowRunActionRepetitionDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowRunActionRepetitionDefinition;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WorkflowRunOperationsGetResponse = WorkflowRun & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowRun;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type IntegrationAccountsListBySubscriptionResponse = IntegrationAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type IntegrationAccountsListByResourceGroupResponse = IntegrationAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountsGetResponse = IntegrationAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccount;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountsCreateOrUpdateResponse = IntegrationAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccount;
    };
};

/**
 * Contains response data for the update operation.
 */
export type IntegrationAccountsUpdateResponse = IntegrationAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccount;
    };
};

/**
 * Contains response data for the listCallbackUrl operation.
 */
export type IntegrationAccountsListCallbackUrlResponse = CallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CallbackUrl;
    };
};

/**
 * Contains response data for the listKeyVaultKeys operation.
 */
export type IntegrationAccountsListKeyVaultKeysResponse = KeyVaultKeyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KeyVaultKeyCollection;
    };
};

/**
 * Contains response data for the regenerateAccessKey operation.
 */
export type IntegrationAccountsRegenerateAccessKeyResponse = IntegrationAccount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccount;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type IntegrationAccountsListBySubscriptionNextResponse = IntegrationAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type IntegrationAccountsListByResourceGroupNextResponse = IntegrationAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountAssembliesListResponse = AssemblyCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AssemblyCollection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountAssembliesGetResponse = AssemblyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AssemblyDefinition;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountAssembliesCreateOrUpdateResponse = AssemblyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AssemblyDefinition;
    };
};

/**
 * Contains response data for the listContentCallbackUrl operation.
 */
export type IntegrationAccountAssembliesListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowTriggerCallbackUrl;
    };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountBatchConfigurationsListResponse = BatchConfigurationCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BatchConfigurationCollection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountBatchConfigurationsGetResponse = BatchConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BatchConfiguration;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountBatchConfigurationsCreateOrUpdateResponse = BatchConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BatchConfiguration;
    };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountSchemasListResponse = IntegrationAccountSchemaListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountSchemaListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountSchemasGetResponse = IntegrationAccountSchema & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountSchema;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountSchemasCreateOrUpdateResponse = IntegrationAccountSchema & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountSchema;
    };
};

/**
 * Contains response data for the listContentCallbackUrl operation.
 */
export type IntegrationAccountSchemasListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowTriggerCallbackUrl;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationAccountSchemasListNextResponse = IntegrationAccountSchemaListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountSchemaListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountMapsListResponse = IntegrationAccountMapListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountMapListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountMapsGetResponse = IntegrationAccountMap & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountMap;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountMapsCreateOrUpdateResponse = IntegrationAccountMap & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountMap;
    };
};

/**
 * Contains response data for the listContentCallbackUrl operation.
 */
export type IntegrationAccountMapsListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowTriggerCallbackUrl;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationAccountMapsListNextResponse = IntegrationAccountMapListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountMapListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountPartnersListResponse = IntegrationAccountPartnerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountPartnerListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountPartnersGetResponse = IntegrationAccountPartner & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountPartner;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountPartnersCreateOrUpdateResponse = IntegrationAccountPartner & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountPartner;
    };
};

/**
 * Contains response data for the listContentCallbackUrl operation.
 */
export type IntegrationAccountPartnersListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowTriggerCallbackUrl;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationAccountPartnersListNextResponse = IntegrationAccountPartnerListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountPartnerListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountAgreementsListResponse = IntegrationAccountAgreementListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountAgreementListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountAgreementsGetResponse = IntegrationAccountAgreement & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountAgreement;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountAgreementsCreateOrUpdateResponse = IntegrationAccountAgreement & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountAgreement;
    };
};

/**
 * Contains response data for the listContentCallbackUrl operation.
 */
export type IntegrationAccountAgreementsListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkflowTriggerCallbackUrl;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationAccountAgreementsListNextResponse = IntegrationAccountAgreementListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountAgreementListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountCertificatesListResponse = IntegrationAccountCertificateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountCertificateListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountCertificatesGetResponse = IntegrationAccountCertificate & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountCertificate;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountCertificatesCreateOrUpdateResponse = IntegrationAccountCertificate & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountCertificate;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationAccountCertificatesListNextResponse = IntegrationAccountCertificateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountCertificateListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationAccountSessionsListResponse = IntegrationAccountSessionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountSessionListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationAccountSessionsGetResponse = IntegrationAccountSession & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountSession;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationAccountSessionsCreateOrUpdateResponse = IntegrationAccountSession & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountSession;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationAccountSessionsListNextResponse = IntegrationAccountSessionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationAccountSessionListResult;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type IntegrationServiceEnvironmentsListBySubscriptionResponse = IntegrationServiceEnvironmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationServiceEnvironmentListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type IntegrationServiceEnvironmentsListByResourceGroupResponse = IntegrationServiceEnvironmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationServiceEnvironmentListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationServiceEnvironmentsGetResponse = IntegrationServiceEnvironment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationServiceEnvironment;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IntegrationServiceEnvironmentsCreateOrUpdateResponse = IntegrationServiceEnvironment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationServiceEnvironment;
    };
};

/**
 * Contains response data for the update operation.
 */
export type IntegrationServiceEnvironmentsUpdateResponse = IntegrationServiceEnvironment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationServiceEnvironment;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type IntegrationServiceEnvironmentsBeginCreateOrUpdateResponse = IntegrationServiceEnvironment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationServiceEnvironment;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type IntegrationServiceEnvironmentsBeginUpdateResponse = IntegrationServiceEnvironment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationServiceEnvironment;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type IntegrationServiceEnvironmentsListBySubscriptionNextResponse = IntegrationServiceEnvironmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationServiceEnvironmentListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type IntegrationServiceEnvironmentsListByResourceGroupNextResponse = IntegrationServiceEnvironmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationServiceEnvironmentListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationServiceEnvironmentSkusListResponse = IntegrationServiceEnvironmentSkuList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationServiceEnvironmentSkuList;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationServiceEnvironmentSkusListNextResponse = IntegrationServiceEnvironmentSkuList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IntegrationServiceEnvironmentSkuList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationServiceEnvironmentNetworkHealthGetResponse = {
  /**
   * The response body properties.
   */
  [propertyName: string]: IntegrationServiceEnvironmentSubnetNetworkHealth;
} & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: { [propertyName: string]: IntegrationServiceEnvironmentSubnetNetworkHealth };
    };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationServiceEnvironmentManagedApisListResponse = ManagedApiListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedApiListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IntegrationServiceEnvironmentManagedApisGetResponse = ManagedApi & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedApi;
    };
};

/**
 * Contains response data for the put operation.
 */
export type IntegrationServiceEnvironmentManagedApisPutResponse = ManagedApi & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedApi;
    };
};

/**
 * Contains response data for the beginPut operation.
 */
export type IntegrationServiceEnvironmentManagedApisBeginPutResponse = ManagedApi & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedApi;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationServiceEnvironmentManagedApisListNextResponse = ManagedApiListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagedApiListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type IntegrationServiceEnvironmentManagedApiOperationsListResponse = ApiOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApiOperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type IntegrationServiceEnvironmentManagedApiOperationsListNextResponse = ApiOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApiOperationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};
