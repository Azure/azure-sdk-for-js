/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { IntegrationAccountPartners } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClient } from "../logicManagementClient";
import {
  IntegrationAccountPartner,
  IntegrationAccountPartnersListNextOptionalParams,
  IntegrationAccountPartnersListOptionalParams,
  IntegrationAccountPartnersListResponse,
  IntegrationAccountPartnersGetOptionalParams,
  IntegrationAccountPartnersGetResponse,
  IntegrationAccountPartnersCreateOrUpdateOptionalParams,
  IntegrationAccountPartnersCreateOrUpdateResponse,
  IntegrationAccountPartnersDeleteOptionalParams,
  GetCallbackUrlParameters,
  IntegrationAccountPartnersListContentCallbackUrlOptionalParams,
  IntegrationAccountPartnersListContentCallbackUrlResponse,
  IntegrationAccountPartnersListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing IntegrationAccountPartners operations. */
export class IntegrationAccountPartnersImpl
  implements IntegrationAccountPartners {
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class IntegrationAccountPartners class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of integration account partners.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    integrationAccountName: string,
    options?: IntegrationAccountPartnersListOptionalParams
  ): PagedAsyncIterableIterator<IntegrationAccountPartner> {
    const iter = this.listPagingAll(
      resourceGroupName,
      integrationAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(
          resourceGroupName,
          integrationAccountName,
          options
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    integrationAccountName: string,
    options?: IntegrationAccountPartnersListOptionalParams
  ): AsyncIterableIterator<IntegrationAccountPartner[]> {
    let result = await this._list(
      resourceGroupName,
      integrationAccountName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        integrationAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    integrationAccountName: string,
    options?: IntegrationAccountPartnersListOptionalParams
  ): AsyncIterableIterator<IntegrationAccountPartner> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      integrationAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of integration account partners.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    integrationAccountName: string,
    options?: IntegrationAccountPartnersListOptionalParams
  ): Promise<IntegrationAccountPartnersListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, integrationAccountName, options },
      listOperationSpec
    );
  }

  /**
   * Gets an integration account partner.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param partnerName The integration account partner name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    integrationAccountName: string,
    partnerName: string,
    options?: IntegrationAccountPartnersGetOptionalParams
  ): Promise<IntegrationAccountPartnersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, integrationAccountName, partnerName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates an integration account partner.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param partnerName The integration account partner name.
   * @param partner The integration account partner.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    integrationAccountName: string,
    partnerName: string,
    partner: IntegrationAccountPartner,
    options?: IntegrationAccountPartnersCreateOrUpdateOptionalParams
  ): Promise<IntegrationAccountPartnersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        partnerName,
        partner,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes an integration account partner.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param partnerName The integration account partner name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    integrationAccountName: string,
    partnerName: string,
    options?: IntegrationAccountPartnersDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, integrationAccountName, partnerName, options },
      deleteOperationSpec
    );
  }

  /**
   * Get the content callback url.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param partnerName The integration account partner name.
   * @param listContentCallbackUrl The callback url parameters.
   * @param options The options parameters.
   */
  listContentCallbackUrl(
    resourceGroupName: string,
    integrationAccountName: string,
    partnerName: string,
    listContentCallbackUrl: GetCallbackUrlParameters,
    options?: IntegrationAccountPartnersListContentCallbackUrlOptionalParams
  ): Promise<IntegrationAccountPartnersListContentCallbackUrlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        partnerName,
        listContentCallbackUrl,
        options
      },
      listContentCallbackUrlOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    integrationAccountName: string,
    nextLink: string,
    options?: IntegrationAccountPartnersListNextOptionalParams
  ): Promise<IntegrationAccountPartnersListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, integrationAccountName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountPartnerListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountPartner
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.partnerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountPartner
    },
    201: {
      bodyMapper: Mappers.IntegrationAccountPartner
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.partner,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.partnerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.partnerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listContentCallbackUrlOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}/listContentCallbackUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowTriggerCallbackUrl
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.listContentCallbackUrl,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.partnerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationAccountPartnerListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.integrationAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
