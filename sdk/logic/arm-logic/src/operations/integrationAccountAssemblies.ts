/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { IntegrationAccountAssemblies } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClient } from "../logicManagementClient";
import {
  AssemblyDefinition,
  IntegrationAccountAssembliesListOptionalParams,
  IntegrationAccountAssembliesListResponse,
  IntegrationAccountAssembliesGetOptionalParams,
  IntegrationAccountAssembliesGetResponse,
  IntegrationAccountAssembliesCreateOrUpdateOptionalParams,
  IntegrationAccountAssembliesCreateOrUpdateResponse,
  IntegrationAccountAssembliesDeleteOptionalParams,
  IntegrationAccountAssembliesListContentCallbackUrlOptionalParams,
  IntegrationAccountAssembliesListContentCallbackUrlResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing IntegrationAccountAssemblies operations. */
export class IntegrationAccountAssembliesImpl
  implements IntegrationAccountAssemblies {
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class IntegrationAccountAssemblies class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * List the assemblies for an integration account.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    integrationAccountName: string,
    options?: IntegrationAccountAssembliesListOptionalParams
  ): PagedAsyncIterableIterator<AssemblyDefinition> {
    const iter = this.listPagingAll(
      resourceGroupName,
      integrationAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          integrationAccountName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    integrationAccountName: string,
    options?: IntegrationAccountAssembliesListOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<AssemblyDefinition[]> {
    let result: IntegrationAccountAssembliesListResponse;
    result = await this._list(
      resourceGroupName,
      integrationAccountName,
      options
    );
    yield result.value || [];
  }

  private async *listPagingAll(
    resourceGroupName: string,
    integrationAccountName: string,
    options?: IntegrationAccountAssembliesListOptionalParams
  ): AsyncIterableIterator<AssemblyDefinition> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      integrationAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List the assemblies for an integration account.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    integrationAccountName: string,
    options?: IntegrationAccountAssembliesListOptionalParams
  ): Promise<IntegrationAccountAssembliesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, integrationAccountName, options },
      listOperationSpec
    );
  }

  /**
   * Get an assembly for an integration account.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param assemblyArtifactName The assembly artifact name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    integrationAccountName: string,
    assemblyArtifactName: string,
    options?: IntegrationAccountAssembliesGetOptionalParams
  ): Promise<IntegrationAccountAssembliesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        assemblyArtifactName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Create or update an assembly for an integration account.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param assemblyArtifactName The assembly artifact name.
   * @param assemblyArtifact The assembly artifact.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    integrationAccountName: string,
    assemblyArtifactName: string,
    assemblyArtifact: AssemblyDefinition,
    options?: IntegrationAccountAssembliesCreateOrUpdateOptionalParams
  ): Promise<IntegrationAccountAssembliesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        assemblyArtifactName,
        assemblyArtifact,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete an assembly for an integration account.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param assemblyArtifactName The assembly artifact name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    integrationAccountName: string,
    assemblyArtifactName: string,
    options?: IntegrationAccountAssembliesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        assemblyArtifactName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Get the content callback url for an integration account assembly.
   * @param resourceGroupName The resource group name.
   * @param integrationAccountName The integration account name.
   * @param assemblyArtifactName The assembly artifact name.
   * @param options The options parameters.
   */
  listContentCallbackUrl(
    resourceGroupName: string,
    integrationAccountName: string,
    assemblyArtifactName: string,
    options?: IntegrationAccountAssembliesListContentCallbackUrlOptionalParams
  ): Promise<IntegrationAccountAssembliesListContentCallbackUrlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        integrationAccountName,
        assemblyArtifactName,
        options
      },
      listContentCallbackUrlOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssemblyCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssemblyDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.assemblyArtifactName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AssemblyDefinition
    },
    201: {
      bodyMapper: Mappers.AssemblyDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.assemblyArtifact,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.assemblyArtifactName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.assemblyArtifactName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listContentCallbackUrlOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}/listContentCallbackUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowTriggerCallbackUrl
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.integrationAccountName,
    Parameters.assemblyArtifactName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
