/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/workflowVersionTriggersMappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClientContext } from "../logicManagementClientContext";

/** Class representing a WorkflowVersionTriggers. */
export class WorkflowVersionTriggers {
  private readonly client: LogicManagementClientContext;

  /**
   * Create a WorkflowVersionTriggers.
   * @param {LogicManagementClientContext} client Reference to the service client.
   */
  constructor(client: LogicManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the callback url for a trigger of a workflow version.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param versionId The workflow versionId.
   * @param triggerName The workflow trigger name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkflowVersionTriggersListCallbackUrlResponse>
   */
  listCallbackUrl(resourceGroupName: string, workflowName: string, versionId: string, triggerName: string, options?: Models.WorkflowVersionTriggersListCallbackUrlOptionalParams): Promise<Models.WorkflowVersionTriggersListCallbackUrlResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param versionId The workflow versionId.
   * @param triggerName The workflow trigger name.
   * @param callback The callback
   */
  listCallbackUrl(resourceGroupName: string, workflowName: string, versionId: string, triggerName: string, callback: msRest.ServiceCallback<Models.WorkflowTriggerCallbackUrl>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param versionId The workflow versionId.
   * @param triggerName The workflow trigger name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCallbackUrl(resourceGroupName: string, workflowName: string, versionId: string, triggerName: string, options: Models.WorkflowVersionTriggersListCallbackUrlOptionalParams, callback: msRest.ServiceCallback<Models.WorkflowTriggerCallbackUrl>): void;
  listCallbackUrl(resourceGroupName: string, workflowName: string, versionId: string, triggerName: string, options?: Models.WorkflowVersionTriggersListCallbackUrlOptionalParams | msRest.ServiceCallback<Models.WorkflowTriggerCallbackUrl>, callback?: msRest.ServiceCallback<Models.WorkflowTriggerCallbackUrl>): Promise<Models.WorkflowVersionTriggersListCallbackUrlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        versionId,
        triggerName,
        options
      },
      listCallbackUrlOperationSpec,
      callback) as Promise<Models.WorkflowVersionTriggersListCallbackUrlResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listCallbackUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/versions/{versionId}/triggers/{triggerName}/listCallbackUrl",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.versionId,
    Parameters.triggerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: Mappers.GetCallbackUrlParameters
  },
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowTriggerCallbackUrl
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
