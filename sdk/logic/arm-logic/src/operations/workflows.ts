/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/workflowsMappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClientContext } from "../logicManagementClientContext";

/** Class representing a Workflows. */
export class Workflows {
  private readonly client: LogicManagementClientContext;

  /**
   * Create a Workflows.
   * @param {LogicManagementClientContext} client Reference to the service client.
   */
  constructor(client: LogicManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a list of workflows by subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkflowsListBySubscriptionResponse>
   */
  listBySubscription(options?: Models.WorkflowsListBySubscriptionOptionalParams): Promise<Models.WorkflowsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.WorkflowListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: Models.WorkflowsListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.WorkflowListResult>): void;
  listBySubscription(options?: Models.WorkflowsListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.WorkflowListResult>, callback?: msRest.ServiceCallback<Models.WorkflowListResult>): Promise<Models.WorkflowsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.WorkflowsListBySubscriptionResponse>;
  }

  /**
   * Gets a list of workflows by resource group.
   * @param resourceGroupName The resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkflowsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.WorkflowsListByResourceGroupOptionalParams): Promise<Models.WorkflowsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.WorkflowListResult>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.WorkflowsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.WorkflowListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.WorkflowsListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.WorkflowListResult>, callback?: msRest.ServiceCallback<Models.WorkflowListResult>): Promise<Models.WorkflowsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.WorkflowsListByResourceGroupResponse>;
  }

  /**
   * Gets a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkflowsGetResponse>
   */
  get(resourceGroupName: string, workflowName: string, options?: msRest.RequestOptionsBase): Promise<Models.WorkflowsGetResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param callback The callback
   */
  get(resourceGroupName: string, workflowName: string, callback: msRest.ServiceCallback<Models.Workflow>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, workflowName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Workflow>): void;
  get(resourceGroupName: string, workflowName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Workflow>, callback?: msRest.ServiceCallback<Models.Workflow>): Promise<Models.WorkflowsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.WorkflowsGetResponse>;
  }

  /**
   * Creates or updates a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param workflow The workflow.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkflowsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, workflowName: string, workflow: Models.Workflow, options?: msRest.RequestOptionsBase): Promise<Models.WorkflowsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param workflow The workflow.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, workflowName: string, workflow: Models.Workflow, callback: msRest.ServiceCallback<Models.Workflow>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param workflow The workflow.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, workflowName: string, workflow: Models.Workflow, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Workflow>): void;
  createOrUpdate(resourceGroupName: string, workflowName: string, workflow: Models.Workflow, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Workflow>, callback?: msRest.ServiceCallback<Models.Workflow>): Promise<Models.WorkflowsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        workflow,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.WorkflowsCreateOrUpdateResponse>;
  }

  /**
   * Updates a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkflowsUpdateResponse>
   */
  update(resourceGroupName: string, workflowName: string, options?: msRest.RequestOptionsBase): Promise<Models.WorkflowsUpdateResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param callback The callback
   */
  update(resourceGroupName: string, workflowName: string, callback: msRest.ServiceCallback<Models.Workflow>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, workflowName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Workflow>): void;
  update(resourceGroupName: string, workflowName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Workflow>, callback?: msRest.ServiceCallback<Models.Workflow>): Promise<Models.WorkflowsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.WorkflowsUpdateResponse>;
  }

  /**
   * Deletes a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, workflowName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, workflowName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, workflowName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, workflowName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Disables a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  disable(resourceGroupName: string, workflowName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param callback The callback
   */
  disable(resourceGroupName: string, workflowName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The optional parameters
   * @param callback The callback
   */
  disable(resourceGroupName: string, workflowName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  disable(resourceGroupName: string, workflowName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        options
      },
      disableOperationSpec,
      callback);
  }

  /**
   * Enables a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  enable(resourceGroupName: string, workflowName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param callback The callback
   */
  enable(resourceGroupName: string, workflowName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The optional parameters
   * @param callback The callback
   */
  enable(resourceGroupName: string, workflowName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  enable(resourceGroupName: string, workflowName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        options
      },
      enableOperationSpec,
      callback);
  }

  /**
   * Generates the upgraded definition for a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param parameters Parameters for generating an upgraded definition.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkflowsGenerateUpgradedDefinitionResponse>
   */
  generateUpgradedDefinition(resourceGroupName: string, workflowName: string, parameters: Models.GenerateUpgradedDefinitionParameters, options?: msRest.RequestOptionsBase): Promise<Models.WorkflowsGenerateUpgradedDefinitionResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param parameters Parameters for generating an upgraded definition.
   * @param callback The callback
   */
  generateUpgradedDefinition(resourceGroupName: string, workflowName: string, parameters: Models.GenerateUpgradedDefinitionParameters, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param parameters Parameters for generating an upgraded definition.
   * @param options The optional parameters
   * @param callback The callback
   */
  generateUpgradedDefinition(resourceGroupName: string, workflowName: string, parameters: Models.GenerateUpgradedDefinitionParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  generateUpgradedDefinition(resourceGroupName: string, workflowName: string, parameters: Models.GenerateUpgradedDefinitionParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.WorkflowsGenerateUpgradedDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        parameters,
        options
      },
      generateUpgradedDefinitionOperationSpec,
      callback) as Promise<Models.WorkflowsGenerateUpgradedDefinitionResponse>;
  }

  /**
   * Get the workflow callback Url.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param listCallbackUrlParameter Which callback url to list.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkflowsListCallbackUrlResponse>
   */
  listCallbackUrl(resourceGroupName: string, workflowName: string, listCallbackUrlParameter: Models.GetCallbackUrlParameters, options?: msRest.RequestOptionsBase): Promise<Models.WorkflowsListCallbackUrlResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param listCallbackUrlParameter Which callback url to list.
   * @param callback The callback
   */
  listCallbackUrl(resourceGroupName: string, workflowName: string, listCallbackUrlParameter: Models.GetCallbackUrlParameters, callback: msRest.ServiceCallback<Models.WorkflowTriggerCallbackUrl>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param listCallbackUrlParameter Which callback url to list.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCallbackUrl(resourceGroupName: string, workflowName: string, listCallbackUrlParameter: Models.GetCallbackUrlParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkflowTriggerCallbackUrl>): void;
  listCallbackUrl(resourceGroupName: string, workflowName: string, listCallbackUrlParameter: Models.GetCallbackUrlParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkflowTriggerCallbackUrl>, callback?: msRest.ServiceCallback<Models.WorkflowTriggerCallbackUrl>): Promise<Models.WorkflowsListCallbackUrlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        listCallbackUrlParameter,
        options
      },
      listCallbackUrlOperationSpec,
      callback) as Promise<Models.WorkflowsListCallbackUrlResponse>;
  }

  /**
   * Gets an OpenAPI definition for the workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkflowsListSwaggerResponse>
   */
  listSwagger(resourceGroupName: string, workflowName: string, options?: msRest.RequestOptionsBase): Promise<Models.WorkflowsListSwaggerResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param callback The callback
   */
  listSwagger(resourceGroupName: string, workflowName: string, callback: msRest.ServiceCallback<any>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSwagger(resourceGroupName: string, workflowName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  listSwagger(resourceGroupName: string, workflowName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<any>, callback?: msRest.ServiceCallback<any>): Promise<Models.WorkflowsListSwaggerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        options
      },
      listSwaggerOperationSpec,
      callback) as Promise<Models.WorkflowsListSwaggerResponse>;
  }

  /**
   * Moves an existing workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param moveParameter The workflow to move.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  move(resourceGroupName: string, workflowName: string, moveParameter: Models.WorkflowReference, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginMove(resourceGroupName,workflowName,moveParameter,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Regenerates the callback URL access key for request triggers.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param keyType The access key type.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  regenerateAccessKey(resourceGroupName: string, workflowName: string, keyType: Models.RegenerateActionParameter, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param keyType The access key type.
   * @param callback The callback
   */
  regenerateAccessKey(resourceGroupName: string, workflowName: string, keyType: Models.RegenerateActionParameter, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param keyType The access key type.
   * @param options The optional parameters
   * @param callback The callback
   */
  regenerateAccessKey(resourceGroupName: string, workflowName: string, keyType: Models.RegenerateActionParameter, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  regenerateAccessKey(resourceGroupName: string, workflowName: string, keyType: Models.RegenerateActionParameter, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        keyType,
        options
      },
      regenerateAccessKeyOperationSpec,
      callback);
  }

  /**
   * Validates the workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param validate The workflow.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  validateByResourceGroup(resourceGroupName: string, workflowName: string, validate: Models.Workflow, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param validate The workflow.
   * @param callback The callback
   */
  validateByResourceGroup(resourceGroupName: string, workflowName: string, validate: Models.Workflow, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param validate The workflow.
   * @param options The optional parameters
   * @param callback The callback
   */
  validateByResourceGroup(resourceGroupName: string, workflowName: string, validate: Models.Workflow, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  validateByResourceGroup(resourceGroupName: string, workflowName: string, validate: Models.Workflow, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workflowName,
        validate,
        options
      },
      validateByResourceGroupOperationSpec,
      callback);
  }

  /**
   * Validates the workflow definition.
   * @param resourceGroupName The resource group name.
   * @param location The workflow location.
   * @param workflowName The workflow name.
   * @param validate The workflow.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  validateByLocation(resourceGroupName: string, location: string, workflowName: string, validate: Models.Workflow, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param location The workflow location.
   * @param workflowName The workflow name.
   * @param validate The workflow.
   * @param callback The callback
   */
  validateByLocation(resourceGroupName: string, location: string, workflowName: string, validate: Models.Workflow, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param location The workflow location.
   * @param workflowName The workflow name.
   * @param validate The workflow.
   * @param options The optional parameters
   * @param callback The callback
   */
  validateByLocation(resourceGroupName: string, location: string, workflowName: string, validate: Models.Workflow, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  validateByLocation(resourceGroupName: string, location: string, workflowName: string, validate: Models.Workflow, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        location,
        workflowName,
        validate,
        options
      },
      validateByLocationOperationSpec,
      callback);
  }

  /**
   * Moves an existing workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param moveParameter The workflow to move.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginMove(resourceGroupName: string, workflowName: string, moveParameter: Models.WorkflowReference, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        workflowName,
        moveParameter,
        options
      },
      beginMoveOperationSpec,
      options);
  }

  /**
   * Gets a list of workflows by subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkflowsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WorkflowsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WorkflowListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkflowListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkflowListResult>, callback?: msRest.ServiceCallback<Models.WorkflowListResult>): Promise<Models.WorkflowsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.WorkflowsListBySubscriptionNextResponse>;
  }

  /**
   * Gets a list of workflows by resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkflowsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.WorkflowsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.WorkflowListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkflowListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkflowListResult>, callback?: msRest.ServiceCallback<Models.WorkflowListResult>): Promise<Models.WorkflowsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.WorkflowsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Logic/workflows",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Workflow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "workflow",
    mapper: {
      ...Mappers.Workflow,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Workflow
    },
    201: {
      bodyMapper: Mappers.Workflow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Workflow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const disableOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/disable",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const enableOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/enable",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const generateUpgradedDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/generateUpgradedDefinition",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.GenerateUpgradedDefinitionParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listCallbackUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/listCallbackUrl",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "listCallbackUrlParameter",
    mapper: {
      ...Mappers.GetCallbackUrlParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowTriggerCallbackUrl
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listSwaggerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/listSwagger",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const regenerateAccessKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/regenerateAccessKey",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "keyType",
    mapper: {
      ...Mappers.RegenerateActionParameter,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const validateByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/validate",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "validate",
    mapper: {
      ...Mappers.Workflow,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const validateByLocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/locations/{location}/workflows/{workflowName}/validate",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location,
    Parameters.workflowName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "validate",
    mapper: {
      ...Mappers.Workflow,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginMoveOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/move",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "moveParameter",
    mapper: {
      ...Mappers.WorkflowReference,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
