/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Workflows } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClient } from "../logicManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Workflow,
  WorkflowsListBySubscriptionNextOptionalParams,
  WorkflowsListBySubscriptionOptionalParams,
  WorkflowsListByResourceGroupNextOptionalParams,
  WorkflowsListByResourceGroupOptionalParams,
  WorkflowsListBySubscriptionResponse,
  WorkflowsListByResourceGroupResponse,
  WorkflowsGetOptionalParams,
  WorkflowsGetResponse,
  WorkflowsCreateOrUpdateOptionalParams,
  WorkflowsCreateOrUpdateResponse,
  WorkflowsUpdateOptionalParams,
  WorkflowsUpdateResponse,
  WorkflowsDeleteOptionalParams,
  WorkflowsDisableOptionalParams,
  WorkflowsEnableOptionalParams,
  GenerateUpgradedDefinitionParameters,
  WorkflowsGenerateUpgradedDefinitionOptionalParams,
  WorkflowsGenerateUpgradedDefinitionResponse,
  GetCallbackUrlParameters,
  WorkflowsListCallbackUrlOptionalParams,
  WorkflowsListCallbackUrlResponse,
  WorkflowsListSwaggerOptionalParams,
  WorkflowsListSwaggerResponse,
  WorkflowReference,
  WorkflowsMoveOptionalParams,
  RegenerateActionParameter,
  WorkflowsRegenerateAccessKeyOptionalParams,
  WorkflowsValidateByResourceGroupOptionalParams,
  WorkflowsValidateByLocationOptionalParams,
  WorkflowsListBySubscriptionNextResponse,
  WorkflowsListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Workflows operations. */
export class WorkflowsImpl implements Workflows {
  private readonly client: LogicManagementClient;

  /**
   * Initialize a new instance of the class Workflows class.
   * @param client Reference to the service client
   */
  constructor(client: LogicManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of workflows by subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: WorkflowsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Workflow> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: WorkflowsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Workflow[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: WorkflowsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Workflow> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of workflows by resource group.
   * @param resourceGroupName The resource group name.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: WorkflowsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Workflow> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: WorkflowsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Workflow[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: WorkflowsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Workflow> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of workflows by subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: WorkflowsListBySubscriptionOptionalParams
  ): Promise<WorkflowsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Gets a list of workflows by resource group.
   * @param resourceGroupName The resource group name.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: WorkflowsListByResourceGroupOptionalParams
  ): Promise<WorkflowsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsGetOptionalParams
  ): Promise<WorkflowsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param workflow The workflow.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    workflowName: string,
    workflow: Workflow,
    options?: WorkflowsCreateOrUpdateOptionalParams
  ): Promise<WorkflowsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, workflow, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Updates a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsUpdateOptionalParams
  ): Promise<WorkflowsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, options },
      updateOperationSpec
    );
  }

  /**
   * Deletes a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, options },
      deleteOperationSpec
    );
  }

  /**
   * Disables a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  disable(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsDisableOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, options },
      disableOperationSpec
    );
  }

  /**
   * Enables a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  enable(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsEnableOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, options },
      enableOperationSpec
    );
  }

  /**
   * Generates the upgraded definition for a workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param parameters Parameters for generating an upgraded definition.
   * @param options The options parameters.
   */
  generateUpgradedDefinition(
    resourceGroupName: string,
    workflowName: string,
    parameters: GenerateUpgradedDefinitionParameters,
    options?: WorkflowsGenerateUpgradedDefinitionOptionalParams
  ): Promise<WorkflowsGenerateUpgradedDefinitionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, parameters, options },
      generateUpgradedDefinitionOperationSpec
    );
  }

  /**
   * Get the workflow callback Url.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param listCallbackUrl Which callback url to list.
   * @param options The options parameters.
   */
  listCallbackUrl(
    resourceGroupName: string,
    workflowName: string,
    listCallbackUrl: GetCallbackUrlParameters,
    options?: WorkflowsListCallbackUrlOptionalParams
  ): Promise<WorkflowsListCallbackUrlResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, listCallbackUrl, options },
      listCallbackUrlOperationSpec
    );
  }

  /**
   * Gets an OpenAPI definition for the workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param options The options parameters.
   */
  listSwagger(
    resourceGroupName: string,
    workflowName: string,
    options?: WorkflowsListSwaggerOptionalParams
  ): Promise<WorkflowsListSwaggerResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, options },
      listSwaggerOperationSpec
    );
  }

  /**
   * Moves an existing workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param move The workflow to move.
   * @param options The options parameters.
   */
  async beginMove(
    resourceGroupName: string,
    workflowName: string,
    move: WorkflowReference,
    options?: WorkflowsMoveOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, workflowName, move, options },
      moveOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Moves an existing workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param move The workflow to move.
   * @param options The options parameters.
   */
  async beginMoveAndWait(
    resourceGroupName: string,
    workflowName: string,
    move: WorkflowReference,
    options?: WorkflowsMoveOptionalParams
  ): Promise<void> {
    const poller = await this.beginMove(
      resourceGroupName,
      workflowName,
      move,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Regenerates the callback URL access key for request triggers.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param keyType The access key type.
   * @param options The options parameters.
   */
  regenerateAccessKey(
    resourceGroupName: string,
    workflowName: string,
    keyType: RegenerateActionParameter,
    options?: WorkflowsRegenerateAccessKeyOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, keyType, options },
      regenerateAccessKeyOperationSpec
    );
  }

  /**
   * Validates the workflow.
   * @param resourceGroupName The resource group name.
   * @param workflowName The workflow name.
   * @param validate The workflow.
   * @param options The options parameters.
   */
  validateByResourceGroup(
    resourceGroupName: string,
    workflowName: string,
    validate: Workflow,
    options?: WorkflowsValidateByResourceGroupOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workflowName, validate, options },
      validateByResourceGroupOperationSpec
    );
  }

  /**
   * Validates the workflow definition.
   * @param resourceGroupName The resource group name.
   * @param location The workflow location.
   * @param workflowName The workflow name.
   * @param validate The workflow.
   * @param options The options parameters.
   */
  validateByLocation(
    resourceGroupName: string,
    location: string,
    workflowName: string,
    validate: Workflow,
    options?: WorkflowsValidateByLocationOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, location, workflowName, validate, options },
      validateByLocationOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: WorkflowsListBySubscriptionNextOptionalParams
  ): Promise<WorkflowsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The resource group name.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: WorkflowsListByResourceGroupNextOptionalParams
  ): Promise<WorkflowsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/workflows",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Workflow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Workflow
    },
    201: {
      bodyMapper: Mappers.Workflow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.workflow,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Workflow
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const disableOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/disable",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const enableOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/enable",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const generateUpgradedDefinitionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/generateUpgradedDefinition",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" } }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listCallbackUrlOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/listCallbackUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowTriggerCallbackUrl
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.listCallbackUrl,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listSwaggerOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/listSwagger",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" } }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const moveOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/move",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.move,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const regenerateAccessKeyOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/regenerateAccessKey",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.keyType,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/validate",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.validate,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateByLocationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/locations/{location}/workflows/{workflowName}/validate",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.validate,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workflowName,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkflowListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
