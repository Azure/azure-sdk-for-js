/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/integrationServiceEnvironmentsMappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClientContext } from "../logicManagementClientContext";

/** Class representing a IntegrationServiceEnvironments. */
export class IntegrationServiceEnvironments {
  private readonly client: LogicManagementClientContext;

  /**
   * Create a IntegrationServiceEnvironments.
   * @param {LogicManagementClientContext} client Reference to the service client.
   */
  constructor(client: LogicManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a list of integration service environments by subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationServiceEnvironmentsListBySubscriptionResponse>
   */
  listBySubscription(options?: Models.IntegrationServiceEnvironmentsListBySubscriptionOptionalParams): Promise<Models.IntegrationServiceEnvironmentsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: Models.IntegrationServiceEnvironmentsListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>): void;
  listBySubscription(options?: Models.IntegrationServiceEnvironmentsListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>, callback?: msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>): Promise<Models.IntegrationServiceEnvironmentsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.IntegrationServiceEnvironmentsListBySubscriptionResponse>;
  }

  /**
   * Gets a list of integration service environments by resource group.
   * @param resourceGroup The resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationServiceEnvironmentsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroup: string, options?: Models.IntegrationServiceEnvironmentsListByResourceGroupOptionalParams): Promise<Models.IntegrationServiceEnvironmentsListByResourceGroupResponse>;
  /**
   * @param resourceGroup The resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroup: string, callback: msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>): void;
  /**
   * @param resourceGroup The resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroup: string, options: Models.IntegrationServiceEnvironmentsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>): void;
  listByResourceGroup(resourceGroup: string, options?: Models.IntegrationServiceEnvironmentsListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>, callback?: msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>): Promise<Models.IntegrationServiceEnvironmentsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.IntegrationServiceEnvironmentsListByResourceGroupResponse>;
  }

  /**
   * Gets an integration service environment.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationServiceEnvironmentsGetResponse>
   */
  get(resourceGroup: string, integrationServiceEnvironmentName: string, options?: msRest.RequestOptionsBase): Promise<Models.IntegrationServiceEnvironmentsGetResponse>;
  /**
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param callback The callback
   */
  get(resourceGroup: string, integrationServiceEnvironmentName: string, callback: msRest.ServiceCallback<Models.IntegrationServiceEnvironment>): void;
  /**
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroup: string, integrationServiceEnvironmentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IntegrationServiceEnvironment>): void;
  get(resourceGroup: string, integrationServiceEnvironmentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IntegrationServiceEnvironment>, callback?: msRest.ServiceCallback<Models.IntegrationServiceEnvironment>): Promise<Models.IntegrationServiceEnvironmentsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        integrationServiceEnvironmentName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.IntegrationServiceEnvironmentsGetResponse>;
  }

  /**
   * Creates or updates an integration service environment.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param integrationServiceEnvironment The integration service environment.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationServiceEnvironmentsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroup: string, integrationServiceEnvironmentName: string, integrationServiceEnvironment: Models.IntegrationServiceEnvironment, options?: msRest.RequestOptionsBase): Promise<Models.IntegrationServiceEnvironmentsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroup,integrationServiceEnvironmentName,integrationServiceEnvironment,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.IntegrationServiceEnvironmentsCreateOrUpdateResponse>;
  }

  /**
   * Updates an integration service environment.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param integrationServiceEnvironment The integration service environment.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationServiceEnvironmentsUpdateResponse>
   */
  update(resourceGroup: string, integrationServiceEnvironmentName: string, integrationServiceEnvironment: Models.IntegrationServiceEnvironment, options?: msRest.RequestOptionsBase): Promise<Models.IntegrationServiceEnvironmentsUpdateResponse> {
    return this.beginUpdate(resourceGroup,integrationServiceEnvironmentName,integrationServiceEnvironment,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.IntegrationServiceEnvironmentsUpdateResponse>;
  }

  /**
   * Deletes an integration service environment.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroup: string, integrationServiceEnvironmentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param callback The callback
   */
  deleteMethod(resourceGroup: string, integrationServiceEnvironmentName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroup: string, integrationServiceEnvironmentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroup: string, integrationServiceEnvironmentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        integrationServiceEnvironmentName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Restarts an integration service environment.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restart(resourceGroup: string, integrationServiceEnvironmentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param callback The callback
   */
  restart(resourceGroup: string, integrationServiceEnvironmentName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The optional parameters
   * @param callback The callback
   */
  restart(resourceGroup: string, integrationServiceEnvironmentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  restart(resourceGroup: string, integrationServiceEnvironmentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        integrationServiceEnvironmentName,
        options
      },
      restartOperationSpec,
      callback);
  }

  /**
   * Creates or updates an integration service environment.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param integrationServiceEnvironment The integration service environment.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroup: string, integrationServiceEnvironmentName: string, integrationServiceEnvironment: Models.IntegrationServiceEnvironment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroup,
        integrationServiceEnvironmentName,
        integrationServiceEnvironment,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Updates an integration service environment.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param integrationServiceEnvironment The integration service environment.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroup: string, integrationServiceEnvironmentName: string, integrationServiceEnvironment: Models.IntegrationServiceEnvironment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroup,
        integrationServiceEnvironmentName,
        integrationServiceEnvironment,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Gets a list of integration service environments by subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationServiceEnvironmentsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.IntegrationServiceEnvironmentsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>, callback?: msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>): Promise<Models.IntegrationServiceEnvironmentsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.IntegrationServiceEnvironmentsListBySubscriptionNextResponse>;
  }

  /**
   * Gets a list of integration service environments by resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationServiceEnvironmentsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.IntegrationServiceEnvironmentsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>, callback?: msRest.ServiceCallback<Models.IntegrationServiceEnvironmentListResult>): Promise<Models.IntegrationServiceEnvironmentsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.IntegrationServiceEnvironmentsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const restartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/restart",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "integrationServiceEnvironment",
    mapper: {
      ...Mappers.IntegrationServiceEnvironment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironment
    },
    201: {
      bodyMapper: Mappers.IntegrationServiceEnvironment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "integrationServiceEnvironment",
    mapper: {
      ...Mappers.IntegrationServiceEnvironment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironment
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationServiceEnvironmentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
