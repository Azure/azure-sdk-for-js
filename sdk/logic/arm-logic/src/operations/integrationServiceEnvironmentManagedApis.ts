/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/integrationServiceEnvironmentManagedApisMappers";
import * as Parameters from "../models/parameters";
import { LogicManagementClientContext } from "../logicManagementClientContext";

/** Class representing a IntegrationServiceEnvironmentManagedApis. */
export class IntegrationServiceEnvironmentManagedApis {
  private readonly client: LogicManagementClientContext;

  /**
   * Create a IntegrationServiceEnvironmentManagedApis.
   * @param {LogicManagementClientContext} client Reference to the service client.
   */
  constructor(client: LogicManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the integration service environment managed Apis.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationServiceEnvironmentManagedApisListResponse>
   */
  list(resourceGroup: string, integrationServiceEnvironmentName: string, options?: msRest.RequestOptionsBase): Promise<Models.IntegrationServiceEnvironmentManagedApisListResponse>;
  /**
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param callback The callback
   */
  list(resourceGroup: string, integrationServiceEnvironmentName: string, callback: msRest.ServiceCallback<Models.ManagedApiListResult>): void;
  /**
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroup: string, integrationServiceEnvironmentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedApiListResult>): void;
  list(resourceGroup: string, integrationServiceEnvironmentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedApiListResult>, callback?: msRest.ServiceCallback<Models.ManagedApiListResult>): Promise<Models.IntegrationServiceEnvironmentManagedApisListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        integrationServiceEnvironmentName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.IntegrationServiceEnvironmentManagedApisListResponse>;
  }

  /**
   * Gets the integration service environment managed Api.
   * @param resourceGroup The resource group name.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param apiName The api name.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationServiceEnvironmentManagedApisGetResponse>
   */
  get(resourceGroup: string, integrationServiceEnvironmentName: string, apiName: string, options?: msRest.RequestOptionsBase): Promise<Models.IntegrationServiceEnvironmentManagedApisGetResponse>;
  /**
   * @param resourceGroup The resource group name.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param apiName The api name.
   * @param callback The callback
   */
  get(resourceGroup: string, integrationServiceEnvironmentName: string, apiName: string, callback: msRest.ServiceCallback<Models.ManagedApi>): void;
  /**
   * @param resourceGroup The resource group name.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param apiName The api name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroup: string, integrationServiceEnvironmentName: string, apiName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedApi>): void;
  get(resourceGroup: string, integrationServiceEnvironmentName: string, apiName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedApi>, callback?: msRest.ServiceCallback<Models.ManagedApi>): Promise<Models.IntegrationServiceEnvironmentManagedApisGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroup,
        integrationServiceEnvironmentName,
        apiName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.IntegrationServiceEnvironmentManagedApisGetResponse>;
  }

  /**
   * Puts the integration service environment managed Api.
   * @param resourceGroup The resource group name.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param apiName The api name.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationServiceEnvironmentManagedApisPutResponse>
   */
  put(resourceGroup: string, integrationServiceEnvironmentName: string, apiName: string, options?: msRest.RequestOptionsBase): Promise<Models.IntegrationServiceEnvironmentManagedApisPutResponse> {
    return this.beginPut(resourceGroup,integrationServiceEnvironmentName,apiName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.IntegrationServiceEnvironmentManagedApisPutResponse>;
  }

  /**
   * Deletes the integration service environment managed Api.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param apiName The api name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroup: string, integrationServiceEnvironmentName: string, apiName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroup,integrationServiceEnvironmentName,apiName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Puts the integration service environment managed Api.
   * @param resourceGroup The resource group name.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param apiName The api name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPut(resourceGroup: string, integrationServiceEnvironmentName: string, apiName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroup,
        integrationServiceEnvironmentName,
        apiName,
        options
      },
      beginPutOperationSpec,
      options);
  }

  /**
   * Deletes the integration service environment managed Api.
   * @param resourceGroup The resource group.
   * @param integrationServiceEnvironmentName The integration service environment name.
   * @param apiName The api name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroup: string, integrationServiceEnvironmentName: string, apiName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroup,
        integrationServiceEnvironmentName,
        apiName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Gets the integration service environment managed Apis.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IntegrationServiceEnvironmentManagedApisListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.IntegrationServiceEnvironmentManagedApisListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ManagedApiListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedApiListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedApiListResult>, callback?: msRest.ServiceCallback<Models.ManagedApiListResult>): Promise<Models.IntegrationServiceEnvironmentManagedApisListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.IntegrationServiceEnvironmentManagedApisListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedApiListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName,
    Parameters.apiName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedApi
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginPutOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName,
    Parameters.apiName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedApi
    },
    201: {
      bodyMapper: Mappers.ManagedApi
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.integrationServiceEnvironmentName,
    Parameters.apiName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedApiListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
