/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  NetworkFabric,
  NetworkFabricsListByResourceGroupOptionalParams,
  NetworkFabricsListBySubscriptionOptionalParams,
  NetworkFabricsCreateOptionalParams,
  NetworkFabricsCreateResponse,
  NetworkFabricsGetOptionalParams,
  NetworkFabricsGetResponse,
  NetworkFabricPatch,
  NetworkFabricsUpdateOptionalParams,
  NetworkFabricsUpdateResponse,
  NetworkFabricsDeleteOptionalParams,
  NetworkFabricsDeleteResponse,
  NetworkFabricsProvisionOptionalParams,
  NetworkFabricsProvisionResponse,
  NetworkFabricsDeprovisionOptionalParams,
  NetworkFabricsDeprovisionResponse,
  UpdateVersion,
  NetworkFabricsUpgradeOptionalParams,
  NetworkFabricsUpgradeResponse,
  NetworkFabricsRefreshConfigurationOptionalParams,
  NetworkFabricsRefreshConfigurationResponse,
  UpdateAdministrativeState,
  NetworkFabricsUpdateWorkloadManagementBfdConfigurationOptionalParams,
  NetworkFabricsUpdateWorkloadManagementBfdConfigurationResponse,
  NetworkFabricsUpdateInfraManagementBfdConfigurationOptionalParams,
  NetworkFabricsUpdateInfraManagementBfdConfigurationResponse,
  ValidateConfigurationProperties,
  NetworkFabricsValidateConfigurationOptionalParams,
  NetworkFabricsValidateConfigurationResponse,
  NetworkFabricsGetTopologyOptionalParams,
  NetworkFabricsGetTopologyResponse,
  NetworkFabricsCommitConfigurationOptionalParams,
  NetworkFabricsCommitConfigurationResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a NetworkFabrics. */
export interface NetworkFabrics {
  /**
   * List all the Network Fabric resources in the given resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: NetworkFabricsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<NetworkFabric>;
  /**
   * List all the Network Fabric resources in the given subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: NetworkFabricsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<NetworkFabric>;
  /**
   * Create Network Fabric resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param body Request payload.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    networkFabricName: string,
    body: NetworkFabric,
    options?: NetworkFabricsCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkFabricsCreateResponse>,
      NetworkFabricsCreateResponse
    >
  >;
  /**
   * Create Network Fabric resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param body Request payload.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    networkFabricName: string,
    body: NetworkFabric,
    options?: NetworkFabricsCreateOptionalParams
  ): Promise<NetworkFabricsCreateResponse>;
  /**
   * Get Network Fabric resource details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    networkFabricName: string,
    options?: NetworkFabricsGetOptionalParams
  ): Promise<NetworkFabricsGetResponse>;
  /**
   * Update certain properties of the Network Fabric resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param body Network Fabric properties to update.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    networkFabricName: string,
    body: NetworkFabricPatch,
    options?: NetworkFabricsUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkFabricsUpdateResponse>,
      NetworkFabricsUpdateResponse
    >
  >;
  /**
   * Update certain properties of the Network Fabric resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param body Network Fabric properties to update.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    networkFabricName: string,
    body: NetworkFabricPatch,
    options?: NetworkFabricsUpdateOptionalParams
  ): Promise<NetworkFabricsUpdateResponse>;
  /**
   * Delete Network Fabric resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    networkFabricName: string,
    options?: NetworkFabricsDeleteOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkFabricsDeleteResponse>,
      NetworkFabricsDeleteResponse
    >
  >;
  /**
   * Delete Network Fabric resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    networkFabricName: string,
    options?: NetworkFabricsDeleteOptionalParams
  ): Promise<NetworkFabricsDeleteResponse>;
  /**
   * Provisions the underlying resources in the given Network Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param options The options parameters.
   */
  beginProvision(
    resourceGroupName: string,
    networkFabricName: string,
    options?: NetworkFabricsProvisionOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkFabricsProvisionResponse>,
      NetworkFabricsProvisionResponse
    >
  >;
  /**
   * Provisions the underlying resources in the given Network Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param options The options parameters.
   */
  beginProvisionAndWait(
    resourceGroupName: string,
    networkFabricName: string,
    options?: NetworkFabricsProvisionOptionalParams
  ): Promise<NetworkFabricsProvisionResponse>;
  /**
   * Deprovisions the underlying resources in the given Network Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param options The options parameters.
   */
  beginDeprovision(
    resourceGroupName: string,
    networkFabricName: string,
    options?: NetworkFabricsDeprovisionOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkFabricsDeprovisionResponse>,
      NetworkFabricsDeprovisionResponse
    >
  >;
  /**
   * Deprovisions the underlying resources in the given Network Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param options The options parameters.
   */
  beginDeprovisionAndWait(
    resourceGroupName: string,
    networkFabricName: string,
    options?: NetworkFabricsDeprovisionOptionalParams
  ): Promise<NetworkFabricsDeprovisionResponse>;
  /**
   * Upgrades the version of the underlying resources in the given Network Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param body Network Fabric properties to update.
   * @param options The options parameters.
   */
  beginUpgrade(
    resourceGroupName: string,
    networkFabricName: string,
    body: UpdateVersion,
    options?: NetworkFabricsUpgradeOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkFabricsUpgradeResponse>,
      NetworkFabricsUpgradeResponse
    >
  >;
  /**
   * Upgrades the version of the underlying resources in the given Network Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param body Network Fabric properties to update.
   * @param options The options parameters.
   */
  beginUpgradeAndWait(
    resourceGroupName: string,
    networkFabricName: string,
    body: UpdateVersion,
    options?: NetworkFabricsUpgradeOptionalParams
  ): Promise<NetworkFabricsUpgradeResponse>;
  /**
   * Refreshes the configuration of the underlying resources in the given Network Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param options The options parameters.
   */
  beginRefreshConfiguration(
    resourceGroupName: string,
    networkFabricName: string,
    options?: NetworkFabricsRefreshConfigurationOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkFabricsRefreshConfigurationResponse>,
      NetworkFabricsRefreshConfigurationResponse
    >
  >;
  /**
   * Refreshes the configuration of the underlying resources in the given Network Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param options The options parameters.
   */
  beginRefreshConfigurationAndWait(
    resourceGroupName: string,
    networkFabricName: string,
    options?: NetworkFabricsRefreshConfigurationOptionalParams
  ): Promise<NetworkFabricsRefreshConfigurationResponse>;
  /**
   * Updates the Workload Management BFD Configuration of the underlying resources in the given Network
   * Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param body Request payload.
   * @param options The options parameters.
   */
  beginUpdateWorkloadManagementBfdConfiguration(
    resourceGroupName: string,
    networkFabricName: string,
    body: UpdateAdministrativeState,
    options?: NetworkFabricsUpdateWorkloadManagementBfdConfigurationOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        NetworkFabricsUpdateWorkloadManagementBfdConfigurationResponse
      >,
      NetworkFabricsUpdateWorkloadManagementBfdConfigurationResponse
    >
  >;
  /**
   * Updates the Workload Management BFD Configuration of the underlying resources in the given Network
   * Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param body Request payload.
   * @param options The options parameters.
   */
  beginUpdateWorkloadManagementBfdConfigurationAndWait(
    resourceGroupName: string,
    networkFabricName: string,
    body: UpdateAdministrativeState,
    options?: NetworkFabricsUpdateWorkloadManagementBfdConfigurationOptionalParams
  ): Promise<NetworkFabricsUpdateWorkloadManagementBfdConfigurationResponse>;
  /**
   * Updates the Infra Management BFD Configuration of the underlying resources in the given Network
   * Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param body Request payload.
   * @param options The options parameters.
   */
  beginUpdateInfraManagementBfdConfiguration(
    resourceGroupName: string,
    networkFabricName: string,
    body: UpdateAdministrativeState,
    options?: NetworkFabricsUpdateInfraManagementBfdConfigurationOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        NetworkFabricsUpdateInfraManagementBfdConfigurationResponse
      >,
      NetworkFabricsUpdateInfraManagementBfdConfigurationResponse
    >
  >;
  /**
   * Updates the Infra Management BFD Configuration of the underlying resources in the given Network
   * Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param body Request payload.
   * @param options The options parameters.
   */
  beginUpdateInfraManagementBfdConfigurationAndWait(
    resourceGroupName: string,
    networkFabricName: string,
    body: UpdateAdministrativeState,
    options?: NetworkFabricsUpdateInfraManagementBfdConfigurationOptionalParams
  ): Promise<NetworkFabricsUpdateInfraManagementBfdConfigurationResponse>;
  /**
   * Validates the configuration of the underlying resources in the given Network Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param body Validate configuration properties.
   * @param options The options parameters.
   */
  beginValidateConfiguration(
    resourceGroupName: string,
    networkFabricName: string,
    body: ValidateConfigurationProperties,
    options?: NetworkFabricsValidateConfigurationOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkFabricsValidateConfigurationResponse>,
      NetworkFabricsValidateConfigurationResponse
    >
  >;
  /**
   * Validates the configuration of the underlying resources in the given Network Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param body Validate configuration properties.
   * @param options The options parameters.
   */
  beginValidateConfigurationAndWait(
    resourceGroupName: string,
    networkFabricName: string,
    body: ValidateConfigurationProperties,
    options?: NetworkFabricsValidateConfigurationOptionalParams
  ): Promise<NetworkFabricsValidateConfigurationResponse>;
  /**
   * Gets Topology of the underlying resources in the given Network Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param options The options parameters.
   */
  beginGetTopology(
    resourceGroupName: string,
    networkFabricName: string,
    options?: NetworkFabricsGetTopologyOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkFabricsGetTopologyResponse>,
      NetworkFabricsGetTopologyResponse
    >
  >;
  /**
   * Gets Topology of the underlying resources in the given Network Fabric instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param options The options parameters.
   */
  beginGetTopologyAndWait(
    resourceGroupName: string,
    networkFabricName: string,
    options?: NetworkFabricsGetTopologyOptionalParams
  ): Promise<NetworkFabricsGetTopologyResponse>;
  /**
   * Atomic update of the given Network Fabric instance. Sync update of NFA resources at Fabric level.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param options The options parameters.
   */
  beginCommitConfiguration(
    resourceGroupName: string,
    networkFabricName: string,
    options?: NetworkFabricsCommitConfigurationOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkFabricsCommitConfigurationResponse>,
      NetworkFabricsCommitConfigurationResponse
    >
  >;
  /**
   * Atomic update of the given Network Fabric instance. Sync update of NFA resources at Fabric level.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkFabricName Name of the Network Fabric.
   * @param options The options parameters.
   */
  beginCommitConfigurationAndWait(
    resourceGroupName: string,
    networkFabricName: string,
    options?: NetworkFabricsCommitConfigurationOptionalParams
  ): Promise<NetworkFabricsCommitConfigurationResponse>;
}
