/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  RoutePolicy,
  RoutePoliciesListByResourceGroupOptionalParams,
  RoutePoliciesListBySubscriptionOptionalParams,
  RoutePoliciesCreateOptionalParams,
  RoutePoliciesCreateResponse,
  RoutePoliciesGetOptionalParams,
  RoutePoliciesGetResponse,
  RoutePolicyPatch,
  RoutePoliciesUpdateOptionalParams,
  RoutePoliciesUpdateResponse,
  RoutePoliciesDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a RoutePolicies. */
export interface RoutePolicies {
  /**
   * Implements RoutePolicies list by resource group GET method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: RoutePoliciesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<RoutePolicy>;
  /**
   * Implements RoutePolicies list by subscription GET method.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: RoutePoliciesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<RoutePolicy>;
  /**
   * Implements Route Policy PUT method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy
   * @param body Request payload.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    routePolicyName: string,
    body: RoutePolicy,
    options?: RoutePoliciesCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<RoutePoliciesCreateResponse>,
      RoutePoliciesCreateResponse
    >
  >;
  /**
   * Implements Route Policy PUT method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy
   * @param body Request payload.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    routePolicyName: string,
    body: RoutePolicy,
    options?: RoutePoliciesCreateOptionalParams
  ): Promise<RoutePoliciesCreateResponse>;
  /**
   * Implements Route Policy GET method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    routePolicyName: string,
    options?: RoutePoliciesGetOptionalParams
  ): Promise<RoutePoliciesGetResponse>;
  /**
   * API to update certain properties of the Route Policy resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy
   * @param body Route Policy properties to update.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    routePolicyName: string,
    body: RoutePolicyPatch,
    options?: RoutePoliciesUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<RoutePoliciesUpdateResponse>,
      RoutePoliciesUpdateResponse
    >
  >;
  /**
   * API to update certain properties of the Route Policy resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy
   * @param body Route Policy properties to update.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    routePolicyName: string,
    body: RoutePolicyPatch,
    options?: RoutePoliciesUpdateOptionalParams
  ): Promise<RoutePoliciesUpdateResponse>;
  /**
   * Implements Route Policy DELETE method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    routePolicyName: string,
    options?: RoutePoliciesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Implements Route Policy DELETE method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    routePolicyName: string,
    options?: RoutePoliciesDeleteOptionalParams
  ): Promise<void>;
}
