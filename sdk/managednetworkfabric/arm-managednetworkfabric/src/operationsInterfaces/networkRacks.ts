/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  NetworkRack,
  NetworkRacksListByResourceGroupOptionalParams,
  NetworkRacksListBySubscriptionOptionalParams,
  NetworkRacksCreateOptionalParams,
  NetworkRacksCreateResponse,
  NetworkRacksGetOptionalParams,
  NetworkRacksGetResponse,
  TagsUpdate,
  NetworkRacksUpdateOptionalParams,
  NetworkRacksUpdateResponse,
  NetworkRacksDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a NetworkRacks. */
export interface NetworkRacks {
  /**
   * List all Network Rack resources in the given resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: NetworkRacksListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<NetworkRack>;
  /**
   * List all Network Rack resources in the given subscription
   * @param options The options parameters.
   */
  listBySubscription(
    options?: NetworkRacksListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<NetworkRack>;
  /**
   * Create Network Rack resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkRackName Name of the Network Rack.
   * @param body Request payload.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    networkRackName: string,
    body: NetworkRack,
    options?: NetworkRacksCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkRacksCreateResponse>,
      NetworkRacksCreateResponse
    >
  >;
  /**
   * Create Network Rack resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkRackName Name of the Network Rack.
   * @param body Request payload.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    networkRackName: string,
    body: NetworkRack,
    options?: NetworkRacksCreateOptionalParams
  ): Promise<NetworkRacksCreateResponse>;
  /**
   * Get Network Rack resource details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkRackName Name of the Network Rack.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    networkRackName: string,
    options?: NetworkRacksGetOptionalParams
  ): Promise<NetworkRacksGetResponse>;
  /**
   * Update certain properties of the Network Rack resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkRackName Name of the Network Rack.
   * @param body Network Rack properties to update.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    networkRackName: string,
    body: TagsUpdate,
    options?: NetworkRacksUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkRacksUpdateResponse>,
      NetworkRacksUpdateResponse
    >
  >;
  /**
   * Update certain properties of the Network Rack resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkRackName Name of the Network Rack.
   * @param body Network Rack properties to update.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    networkRackName: string,
    body: TagsUpdate,
    options?: NetworkRacksUpdateOptionalParams
  ): Promise<NetworkRacksUpdateResponse>;
  /**
   * Delete Network Rack resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkRackName Name of the Network Rack.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    networkRackName: string,
    options?: NetworkRacksDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete Network Rack resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkRackName Name of the Network Rack.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    networkRackName: string,
    options?: NetworkRacksDeleteOptionalParams
  ): Promise<void>;
}
