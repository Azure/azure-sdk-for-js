/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  NetworkInterface,
  NetworkInterfacesListByNetworkDeviceOptionalParams,
  NetworkInterfacesCreateOptionalParams,
  NetworkInterfacesCreateResponse,
  NetworkInterfacesGetOptionalParams,
  NetworkInterfacesGetResponse,
  NetworkInterfacePatch,
  NetworkInterfacesUpdateOptionalParams,
  NetworkInterfacesUpdateResponse,
  NetworkInterfacesDeleteOptionalParams,
  UpdateAdministrativeState,
  NetworkInterfacesUpdateAdministrativeStateOptionalParams,
  NetworkInterfacesUpdateAdministrativeStateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a NetworkInterfaces. */
export interface NetworkInterfaces {
  /**
   * List all the Network Interface resources in a given resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkDeviceName Name of the Network Device.
   * @param options The options parameters.
   */
  listByNetworkDevice(
    resourceGroupName: string,
    networkDeviceName: string,
    options?: NetworkInterfacesListByNetworkDeviceOptionalParams
  ): PagedAsyncIterableIterator<NetworkInterface>;
  /**
   * Create a Network Interface resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkDeviceName Name of the Network Device.
   * @param networkInterfaceName Name of the Network Interface.
   * @param body Request payload.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    networkDeviceName: string,
    networkInterfaceName: string,
    body: NetworkInterface,
    options?: NetworkInterfacesCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkInterfacesCreateResponse>,
      NetworkInterfacesCreateResponse
    >
  >;
  /**
   * Create a Network Interface resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkDeviceName Name of the Network Device.
   * @param networkInterfaceName Name of the Network Interface.
   * @param body Request payload.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    networkDeviceName: string,
    networkInterfaceName: string,
    body: NetworkInterface,
    options?: NetworkInterfacesCreateOptionalParams
  ): Promise<NetworkInterfacesCreateResponse>;
  /**
   * Get the Network Interface resource details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkDeviceName Name of the Network Device.
   * @param networkInterfaceName Name of the Network Interface.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    networkDeviceName: string,
    networkInterfaceName: string,
    options?: NetworkInterfacesGetOptionalParams
  ): Promise<NetworkInterfacesGetResponse>;
  /**
   * Update certain properties of the Network Interface resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkDeviceName Name of the Network Device.
   * @param networkInterfaceName Name of the Network Interface.
   * @param body NetworkInterface properties to update. Only tags are supported.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    networkDeviceName: string,
    networkInterfaceName: string,
    body: NetworkInterfacePatch,
    options?: NetworkInterfacesUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkInterfacesUpdateResponse>,
      NetworkInterfacesUpdateResponse
    >
  >;
  /**
   * Update certain properties of the Network Interface resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkDeviceName Name of the Network Device.
   * @param networkInterfaceName Name of the Network Interface.
   * @param body NetworkInterface properties to update. Only tags are supported.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    networkDeviceName: string,
    networkInterfaceName: string,
    body: NetworkInterfacePatch,
    options?: NetworkInterfacesUpdateOptionalParams
  ): Promise<NetworkInterfacesUpdateResponse>;
  /**
   * Delete the Network Interface resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkDeviceName Name of the Network Device.
   * @param networkInterfaceName Name of the Network Interface.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    networkDeviceName: string,
    networkInterfaceName: string,
    options?: NetworkInterfacesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete the Network Interface resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkDeviceName Name of the Network Device.
   * @param networkInterfaceName Name of the Network Interface.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    networkDeviceName: string,
    networkInterfaceName: string,
    options?: NetworkInterfacesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Update the admin state of the Network Interface.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkDeviceName Name of the Network Device.
   * @param networkInterfaceName Name of the Network Interface.
   * @param body Request payload.
   * @param options The options parameters.
   */
  beginUpdateAdministrativeState(
    resourceGroupName: string,
    networkDeviceName: string,
    networkInterfaceName: string,
    body: UpdateAdministrativeState,
    options?: NetworkInterfacesUpdateAdministrativeStateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<NetworkInterfacesUpdateAdministrativeStateResponse>,
      NetworkInterfacesUpdateAdministrativeStateResponse
    >
  >;
  /**
   * Update the admin state of the Network Interface.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param networkDeviceName Name of the Network Device.
   * @param networkInterfaceName Name of the Network Interface.
   * @param body Request payload.
   * @param options The options parameters.
   */
  beginUpdateAdministrativeStateAndWait(
    resourceGroupName: string,
    networkDeviceName: string,
    networkInterfaceName: string,
    body: UpdateAdministrativeState,
    options?: NetworkInterfacesUpdateAdministrativeStateOptionalParams
  ): Promise<NetworkInterfacesUpdateAdministrativeStateResponse>;
}
