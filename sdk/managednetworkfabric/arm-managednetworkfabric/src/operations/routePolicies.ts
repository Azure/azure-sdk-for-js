/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { RoutePolicies } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureNetworkFabricManagementServiceAPI } from "../azureNetworkFabricManagementServiceAPI";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  RoutePolicy,
  RoutePoliciesListByResourceGroupNextOptionalParams,
  RoutePoliciesListByResourceGroupOptionalParams,
  RoutePoliciesListByResourceGroupResponse,
  RoutePoliciesListBySubscriptionNextOptionalParams,
  RoutePoliciesListBySubscriptionOptionalParams,
  RoutePoliciesListBySubscriptionResponse,
  RoutePoliciesCreateOptionalParams,
  RoutePoliciesCreateResponse,
  RoutePoliciesGetOptionalParams,
  RoutePoliciesGetResponse,
  RoutePolicyPatch,
  RoutePoliciesUpdateOptionalParams,
  RoutePoliciesUpdateResponse,
  RoutePoliciesDeleteOptionalParams,
  UpdateAdministrativeState,
  RoutePoliciesUpdateAdministrativeStateOptionalParams,
  RoutePoliciesUpdateAdministrativeStateResponse,
  RoutePoliciesValidateConfigurationOptionalParams,
  RoutePoliciesValidateConfigurationResponse,
  RoutePoliciesCommitConfigurationOptionalParams,
  RoutePoliciesCommitConfigurationResponse,
  RoutePoliciesListByResourceGroupNextResponse,
  RoutePoliciesListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing RoutePolicies operations. */
export class RoutePoliciesImpl implements RoutePolicies {
  private readonly client: AzureNetworkFabricManagementServiceAPI;

  /**
   * Initialize a new instance of the class RoutePolicies class.
   * @param client Reference to the service client
   */
  constructor(client: AzureNetworkFabricManagementServiceAPI) {
    this.client = client;
  }

  /**
   * Implements RoutePolicies list by resource group GET method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: RoutePoliciesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<RoutePolicy> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: RoutePoliciesListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<RoutePolicy[]> {
    let result: RoutePoliciesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: RoutePoliciesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<RoutePolicy> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Implements RoutePolicies list by subscription GET method.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: RoutePoliciesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<RoutePolicy> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: RoutePoliciesListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<RoutePolicy[]> {
    let result: RoutePoliciesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: RoutePoliciesListBySubscriptionOptionalParams
  ): AsyncIterableIterator<RoutePolicy> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Implements Route Policy PUT method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy.
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    routePolicyName: string,
    body: RoutePolicy,
    options?: RoutePoliciesCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<RoutePoliciesCreateResponse>,
      RoutePoliciesCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<RoutePoliciesCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, routePolicyName, body, options },
      spec: createOperationSpec
    });
    const poller = await createHttpPoller<
      RoutePoliciesCreateResponse,
      OperationState<RoutePoliciesCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Implements Route Policy PUT method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy.
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    routePolicyName: string,
    body: RoutePolicy,
    options?: RoutePoliciesCreateOptionalParams
  ): Promise<RoutePoliciesCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      routePolicyName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Implements Route Policy GET method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    routePolicyName: string,
    options?: RoutePoliciesGetOptionalParams
  ): Promise<RoutePoliciesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, routePolicyName, options },
      getOperationSpec
    );
  }

  /**
   * API to update certain properties of the Route Policy resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy.
   * @param body Route Policy properties to update.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    routePolicyName: string,
    body: RoutePolicyPatch,
    options?: RoutePoliciesUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<RoutePoliciesUpdateResponse>,
      RoutePoliciesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<RoutePoliciesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, routePolicyName, body, options },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      RoutePoliciesUpdateResponse,
      OperationState<RoutePoliciesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * API to update certain properties of the Route Policy resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy.
   * @param body Route Policy properties to update.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    routePolicyName: string,
    body: RoutePolicyPatch,
    options?: RoutePoliciesUpdateOptionalParams
  ): Promise<RoutePoliciesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      routePolicyName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Implements Route Policy DELETE method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    routePolicyName: string,
    options?: RoutePoliciesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, routePolicyName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Implements Route Policy DELETE method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    routePolicyName: string,
    options?: RoutePoliciesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      routePolicyName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Implements RoutePolicies list by resource group GET method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: RoutePoliciesListByResourceGroupOptionalParams
  ): Promise<RoutePoliciesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Implements RoutePolicies list by subscription GET method.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: RoutePoliciesListBySubscriptionOptionalParams
  ): Promise<RoutePoliciesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Updated the admin state for this Route Policy.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy.
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginUpdateAdministrativeState(
    resourceGroupName: string,
    routePolicyName: string,
    body: UpdateAdministrativeState,
    options?: RoutePoliciesUpdateAdministrativeStateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<RoutePoliciesUpdateAdministrativeStateResponse>,
      RoutePoliciesUpdateAdministrativeStateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<RoutePoliciesUpdateAdministrativeStateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, routePolicyName, body, options },
      spec: updateAdministrativeStateOperationSpec
    });
    const poller = await createHttpPoller<
      RoutePoliciesUpdateAdministrativeStateResponse,
      OperationState<RoutePoliciesUpdateAdministrativeStateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updated the admin state for this Route Policy.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy.
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginUpdateAdministrativeStateAndWait(
    resourceGroupName: string,
    routePolicyName: string,
    body: UpdateAdministrativeState,
    options?: RoutePoliciesUpdateAdministrativeStateOptionalParams
  ): Promise<RoutePoliciesUpdateAdministrativeStateResponse> {
    const poller = await this.beginUpdateAdministrativeState(
      resourceGroupName,
      routePolicyName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Validates the configuration of the resources.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy.
   * @param options The options parameters.
   */
  async beginValidateConfiguration(
    resourceGroupName: string,
    routePolicyName: string,
    options?: RoutePoliciesValidateConfigurationOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<RoutePoliciesValidateConfigurationResponse>,
      RoutePoliciesValidateConfigurationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<RoutePoliciesValidateConfigurationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, routePolicyName, options },
      spec: validateConfigurationOperationSpec
    });
    const poller = await createHttpPoller<
      RoutePoliciesValidateConfigurationResponse,
      OperationState<RoutePoliciesValidateConfigurationResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Validates the configuration of the resources.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy.
   * @param options The options parameters.
   */
  async beginValidateConfigurationAndWait(
    resourceGroupName: string,
    routePolicyName: string,
    options?: RoutePoliciesValidateConfigurationOptionalParams
  ): Promise<RoutePoliciesValidateConfigurationResponse> {
    const poller = await this.beginValidateConfiguration(
      resourceGroupName,
      routePolicyName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Commits the configuration of the given resources.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy.
   * @param options The options parameters.
   */
  async beginCommitConfiguration(
    resourceGroupName: string,
    routePolicyName: string,
    options?: RoutePoliciesCommitConfigurationOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<RoutePoliciesCommitConfigurationResponse>,
      RoutePoliciesCommitConfigurationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<RoutePoliciesCommitConfigurationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, routePolicyName, options },
      spec: commitConfigurationOperationSpec
    });
    const poller = await createHttpPoller<
      RoutePoliciesCommitConfigurationResponse,
      OperationState<RoutePoliciesCommitConfigurationResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Commits the configuration of the given resources.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param routePolicyName Name of the Route Policy.
   * @param options The options parameters.
   */
  async beginCommitConfigurationAndWait(
    resourceGroupName: string,
    routePolicyName: string,
    options?: RoutePoliciesCommitConfigurationOptionalParams
  ): Promise<RoutePoliciesCommitConfigurationResponse> {
    const poller = await this.beginCommitConfiguration(
      resourceGroupName,
      routePolicyName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: RoutePoliciesListByResourceGroupNextOptionalParams
  ): Promise<RoutePoliciesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: RoutePoliciesListBySubscriptionNextOptionalParams
  ): Promise<RoutePoliciesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/routePolicies/{routePolicyName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RoutePolicy
    },
    201: {
      bodyMapper: Mappers.RoutePolicy
    },
    202: {
      bodyMapper: Mappers.RoutePolicy
    },
    204: {
      bodyMapper: Mappers.RoutePolicy
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body45,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.routePolicyName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/routePolicies/{routePolicyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoutePolicy
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.routePolicyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/routePolicies/{routePolicyName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RoutePolicy
    },
    201: {
      bodyMapper: Mappers.RoutePolicy
    },
    202: {
      bodyMapper: Mappers.RoutePolicy
    },
    204: {
      bodyMapper: Mappers.RoutePolicy
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body46,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.routePolicyName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/routePolicies/{routePolicyName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.routePolicyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/routePolicies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoutePoliciesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ManagedNetworkFabric/routePolicies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoutePoliciesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateAdministrativeStateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/routePolicies/{routePolicyName}/updateAdministrativeState",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CommonPostActionResponseForDeviceUpdate
    },
    201: {
      bodyMapper: Mappers.CommonPostActionResponseForDeviceUpdate
    },
    202: {
      bodyMapper: Mappers.CommonPostActionResponseForDeviceUpdate
    },
    204: {
      bodyMapper: Mappers.CommonPostActionResponseForDeviceUpdate
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.routePolicyName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const validateConfigurationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/routePolicies/{routePolicyName}/validateConfiguration",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ValidateConfigurationResponse
    },
    201: {
      bodyMapper: Mappers.ValidateConfigurationResponse
    },
    202: {
      bodyMapper: Mappers.ValidateConfigurationResponse
    },
    204: {
      bodyMapper: Mappers.ValidateConfigurationResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.routePolicyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const commitConfigurationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/routePolicies/{routePolicyName}/commitConfiguration",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CommonPostActionResponseForStateUpdate
    },
    201: {
      bodyMapper: Mappers.CommonPostActionResponseForStateUpdate
    },
    202: {
      bodyMapper: Mappers.CommonPostActionResponseForStateUpdate
    },
    204: {
      bodyMapper: Mappers.CommonPostActionResponseForStateUpdate
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.routePolicyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoutePoliciesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoutePoliciesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
