/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ExternalNetworks } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureNetworkFabricManagementServiceAPI } from "../azureNetworkFabricManagementServiceAPI";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ExternalNetwork,
  ExternalNetworksListNextOptionalParams,
  ExternalNetworksListOptionalParams,
  ExternalNetworksListResponse,
  ExternalNetworksCreateOptionalParams,
  ExternalNetworksCreateResponse,
  ExternalNetworksGetOptionalParams,
  ExternalNetworksGetResponse,
  ExternalNetworkPatch,
  ExternalNetworksUpdateOptionalParams,
  ExternalNetworksUpdateResponse,
  ExternalNetworksDeleteOptionalParams,
  UpdateAdministrativeState,
  ExternalNetworksUpdateAdministrativeStateOptionalParams,
  ExternalNetworksUpdateAdministrativeStateResponse,
  ExternalNetworksUpdateBgpAdministrativeStateOptionalParams,
  ExternalNetworksUpdateBgpAdministrativeStateResponse,
  ExternalNetworksUpdateBfdForBgpAdministrativeStateOptionalParams,
  ExternalNetworksUpdateBfdForBgpAdministrativeStateResponse,
  EnableDisableOnResources,
  ExternalNetworksClearIpv6NeighborsOptionalParams,
  ExternalNetworksClearIpv6NeighborsResponse,
  ExternalNetworksClearArpEntriesOptionalParams,
  ExternalNetworksClearArpEntriesResponse,
  ExternalNetworksListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ExternalNetworks operations. */
export class ExternalNetworksImpl implements ExternalNetworks {
  private readonly client: AzureNetworkFabricManagementServiceAPI;

  /**
   * Initialize a new instance of the class ExternalNetworks class.
   * @param client Reference to the service client
   */
  constructor(client: AzureNetworkFabricManagementServiceAPI) {
    this.client = client;
  }

  /**
   * Implements External Networks list by resource group GET method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    options?: ExternalNetworksListOptionalParams
  ): PagedAsyncIterableIterator<ExternalNetwork> {
    const iter = this.listPagingAll(
      resourceGroupName,
      l3IsolationDomainName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          l3IsolationDomainName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    options?: ExternalNetworksListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ExternalNetwork[]> {
    let result: ExternalNetworksListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        l3IsolationDomainName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        l3IsolationDomainName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    options?: ExternalNetworksListOptionalParams
  ): AsyncIterableIterator<ExternalNetwork> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      l3IsolationDomainName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates ExternalNetwork PUT method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain
   * @param externalNetworkName Name of the ExternalNetwork
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    body: ExternalNetwork,
    options?: ExternalNetworksCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ExternalNetworksCreateResponse>,
      ExternalNetworksCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ExternalNetworksCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        l3IsolationDomainName,
        externalNetworkName,
        body,
        options
      },
      spec: createOperationSpec
    });
    const poller = await createHttpPoller<
      ExternalNetworksCreateResponse,
      OperationState<ExternalNetworksCreateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates ExternalNetwork PUT method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain
   * @param externalNetworkName Name of the ExternalNetwork
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    body: ExternalNetwork,
    options?: ExternalNetworksCreateOptionalParams
  ): Promise<ExternalNetworksCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      l3IsolationDomainName,
      externalNetworkName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Implements ExternalNetworks GET method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain
   * @param externalNetworkName Name of the ExternalNetwork
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    options?: ExternalNetworksGetOptionalParams
  ): Promise<ExternalNetworksGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        l3IsolationDomainName,
        externalNetworkName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * API to update certain properties of the ExternalNetworks resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain
   * @param externalNetworkName Name of the ExternalNetwork
   * @param body ExternalNetwork properties to update. Only annotations are supported.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    body: ExternalNetworkPatch,
    options?: ExternalNetworksUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ExternalNetworksUpdateResponse>,
      ExternalNetworksUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ExternalNetworksUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        l3IsolationDomainName,
        externalNetworkName,
        body,
        options
      },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      ExternalNetworksUpdateResponse,
      OperationState<ExternalNetworksUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * API to update certain properties of the ExternalNetworks resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain
   * @param externalNetworkName Name of the ExternalNetwork
   * @param body ExternalNetwork properties to update. Only annotations are supported.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    body: ExternalNetworkPatch,
    options?: ExternalNetworksUpdateOptionalParams
  ): Promise<ExternalNetworksUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      l3IsolationDomainName,
      externalNetworkName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Implements ExternalNetworks DELETE method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain
   * @param externalNetworkName Name of the ExternalNetwork
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    options?: ExternalNetworksDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        l3IsolationDomainName,
        externalNetworkName,
        options
      },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Implements ExternalNetworks DELETE method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain
   * @param externalNetworkName Name of the ExternalNetwork
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    options?: ExternalNetworksDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      l3IsolationDomainName,
      externalNetworkName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Implements External Networks list by resource group GET method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    options?: ExternalNetworksListOptionalParams
  ): Promise<ExternalNetworksListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, l3IsolationDomainName, options },
      listOperationSpec
    );
  }

  /**
   * Executes update operation to enable or disable administrative State for externalNetwork.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain.
   * @param externalNetworkName Name of the ExternalNetwork.
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginUpdateAdministrativeState(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    body: UpdateAdministrativeState,
    options?: ExternalNetworksUpdateAdministrativeStateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ExternalNetworksUpdateAdministrativeStateResponse>,
      ExternalNetworksUpdateAdministrativeStateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ExternalNetworksUpdateAdministrativeStateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        l3IsolationDomainName,
        externalNetworkName,
        body,
        options
      },
      spec: updateAdministrativeStateOperationSpec
    });
    const poller = await createHttpPoller<
      ExternalNetworksUpdateAdministrativeStateResponse,
      OperationState<ExternalNetworksUpdateAdministrativeStateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Executes update operation to enable or disable administrative State for externalNetwork.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain.
   * @param externalNetworkName Name of the ExternalNetwork.
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginUpdateAdministrativeStateAndWait(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    body: UpdateAdministrativeState,
    options?: ExternalNetworksUpdateAdministrativeStateOptionalParams
  ): Promise<ExternalNetworksUpdateAdministrativeStateResponse> {
    const poller = await this.beginUpdateAdministrativeState(
      resourceGroupName,
      l3IsolationDomainName,
      externalNetworkName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update BGP for externalNetwork.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain.
   * @param externalNetworkName Name of the ExternalNetwork.
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginUpdateBgpAdministrativeState(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    body: UpdateAdministrativeState,
    options?: ExternalNetworksUpdateBgpAdministrativeStateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ExternalNetworksUpdateBgpAdministrativeStateResponse>,
      ExternalNetworksUpdateBgpAdministrativeStateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ExternalNetworksUpdateBgpAdministrativeStateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        l3IsolationDomainName,
        externalNetworkName,
        body,
        options
      },
      spec: updateBgpAdministrativeStateOperationSpec
    });
    const poller = await createHttpPoller<
      ExternalNetworksUpdateBgpAdministrativeStateResponse,
      OperationState<ExternalNetworksUpdateBgpAdministrativeStateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update BGP for externalNetwork.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain.
   * @param externalNetworkName Name of the ExternalNetwork.
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginUpdateBgpAdministrativeStateAndWait(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    body: UpdateAdministrativeState,
    options?: ExternalNetworksUpdateBgpAdministrativeStateOptionalParams
  ): Promise<ExternalNetworksUpdateBgpAdministrativeStateResponse> {
    const poller = await this.beginUpdateBgpAdministrativeState(
      resourceGroupName,
      l3IsolationDomainName,
      externalNetworkName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update BfdForBgp for externalNetwork.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain.
   * @param externalNetworkName Name of the ExternalNetwork.
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginUpdateBfdForBgpAdministrativeState(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    body: UpdateAdministrativeState,
    options?: ExternalNetworksUpdateBfdForBgpAdministrativeStateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        ExternalNetworksUpdateBfdForBgpAdministrativeStateResponse
      >,
      ExternalNetworksUpdateBfdForBgpAdministrativeStateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ExternalNetworksUpdateBfdForBgpAdministrativeStateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        l3IsolationDomainName,
        externalNetworkName,
        body,
        options
      },
      spec: updateBfdForBgpAdministrativeStateOperationSpec
    });
    const poller = await createHttpPoller<
      ExternalNetworksUpdateBfdForBgpAdministrativeStateResponse,
      OperationState<ExternalNetworksUpdateBfdForBgpAdministrativeStateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update BfdForBgp for externalNetwork.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain.
   * @param externalNetworkName Name of the ExternalNetwork.
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginUpdateBfdForBgpAdministrativeStateAndWait(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    body: UpdateAdministrativeState,
    options?: ExternalNetworksUpdateBfdForBgpAdministrativeStateOptionalParams
  ): Promise<ExternalNetworksUpdateBfdForBgpAdministrativeStateResponse> {
    const poller = await this.beginUpdateBfdForBgpAdministrativeState(
      resourceGroupName,
      l3IsolationDomainName,
      externalNetworkName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * clearIpv6Neighbors for externalNetwork.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain.
   * @param externalNetworkName Name of the ExternalNetwork.
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginClearIpv6Neighbors(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    body: EnableDisableOnResources,
    options?: ExternalNetworksClearIpv6NeighborsOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ExternalNetworksClearIpv6NeighborsResponse>,
      ExternalNetworksClearIpv6NeighborsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ExternalNetworksClearIpv6NeighborsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        l3IsolationDomainName,
        externalNetworkName,
        body,
        options
      },
      spec: clearIpv6NeighborsOperationSpec
    });
    const poller = await createHttpPoller<
      ExternalNetworksClearIpv6NeighborsResponse,
      OperationState<ExternalNetworksClearIpv6NeighborsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * clearIpv6Neighbors for externalNetwork.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain.
   * @param externalNetworkName Name of the ExternalNetwork.
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginClearIpv6NeighborsAndWait(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    body: EnableDisableOnResources,
    options?: ExternalNetworksClearIpv6NeighborsOptionalParams
  ): Promise<ExternalNetworksClearIpv6NeighborsResponse> {
    const poller = await this.beginClearIpv6Neighbors(
      resourceGroupName,
      l3IsolationDomainName,
      externalNetworkName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * clearArpEntries for externalNetwork.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain.
   * @param externalNetworkName Name of the ExternalNetwork.
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginClearArpEntries(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    body: EnableDisableOnResources,
    options?: ExternalNetworksClearArpEntriesOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ExternalNetworksClearArpEntriesResponse>,
      ExternalNetworksClearArpEntriesResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ExternalNetworksClearArpEntriesResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        l3IsolationDomainName,
        externalNetworkName,
        body,
        options
      },
      spec: clearArpEntriesOperationSpec
    });
    const poller = await createHttpPoller<
      ExternalNetworksClearArpEntriesResponse,
      OperationState<ExternalNetworksClearArpEntriesResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * clearArpEntries for externalNetwork.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain.
   * @param externalNetworkName Name of the ExternalNetwork.
   * @param body Request payload.
   * @param options The options parameters.
   */
  async beginClearArpEntriesAndWait(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    externalNetworkName: string,
    body: EnableDisableOnResources,
    options?: ExternalNetworksClearArpEntriesOptionalParams
  ): Promise<ExternalNetworksClearArpEntriesResponse> {
    const poller = await this.beginClearArpEntries(
      resourceGroupName,
      l3IsolationDomainName,
      externalNetworkName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param l3IsolationDomainName Name of the L3IsolationDomain
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    l3IsolationDomainName: string,
    nextLink: string,
    options?: ExternalNetworksListNextOptionalParams
  ): Promise<ExternalNetworksListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, l3IsolationDomainName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/externalNetworks/{externalNetworkName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ExternalNetwork
    },
    201: {
      bodyMapper: Mappers.ExternalNetwork
    },
    202: {
      bodyMapper: Mappers.ExternalNetwork
    },
    204: {
      bodyMapper: Mappers.ExternalNetwork
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body16,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.l3IsolationDomainName,
    Parameters.externalNetworkName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/externalNetworks/{externalNetworkName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExternalNetwork
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.l3IsolationDomainName,
    Parameters.externalNetworkName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/externalNetworks/{externalNetworkName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ExternalNetwork
    },
    201: {
      bodyMapper: Mappers.ExternalNetwork
    },
    202: {
      bodyMapper: Mappers.ExternalNetwork
    },
    204: {
      bodyMapper: Mappers.ExternalNetwork
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body17,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.l3IsolationDomainName,
    Parameters.externalNetworkName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/externalNetworks/{externalNetworkName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.l3IsolationDomainName,
    Parameters.externalNetworkName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/externalNetworks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExternalNetworksList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.l3IsolationDomainName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateAdministrativeStateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/externalNetworks/{externalNetworkName}/updateAdministrativeState",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.ExternalNetworksUpdateAdministrativeStateHeaders
    },
    201: {
      headersMapper: Mappers.ExternalNetworksUpdateAdministrativeStateHeaders
    },
    202: {
      headersMapper: Mappers.ExternalNetworksUpdateAdministrativeStateHeaders
    },
    204: {
      headersMapper: Mappers.ExternalNetworksUpdateAdministrativeStateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.l3IsolationDomainName,
    Parameters.externalNetworkName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const updateBgpAdministrativeStateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/externalNetworks/{externalNetworkName}/updateBgpAdministrativeState",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.ExternalNetworksUpdateBgpAdministrativeStateHeaders
    },
    201: {
      headersMapper: Mappers.ExternalNetworksUpdateBgpAdministrativeStateHeaders
    },
    202: {
      headersMapper: Mappers.ExternalNetworksUpdateBgpAdministrativeStateHeaders
    },
    204: {
      headersMapper: Mappers.ExternalNetworksUpdateBgpAdministrativeStateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.l3IsolationDomainName,
    Parameters.externalNetworkName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const updateBfdForBgpAdministrativeStateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/externalNetworks/{externalNetworkName}/updateBfdForBgpAdministrativeState",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper:
        Mappers.ExternalNetworksUpdateBfdForBgpAdministrativeStateHeaders
    },
    201: {
      headersMapper:
        Mappers.ExternalNetworksUpdateBfdForBgpAdministrativeStateHeaders
    },
    202: {
      headersMapper:
        Mappers.ExternalNetworksUpdateBfdForBgpAdministrativeStateHeaders
    },
    204: {
      headersMapper:
        Mappers.ExternalNetworksUpdateBfdForBgpAdministrativeStateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.l3IsolationDomainName,
    Parameters.externalNetworkName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const clearIpv6NeighborsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/externalNetworks/{externalNetworkName}/clearIpv6Neighbors",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.ExternalNetworksClearIpv6NeighborsHeaders
    },
    201: {
      headersMapper: Mappers.ExternalNetworksClearIpv6NeighborsHeaders
    },
    202: {
      headersMapper: Mappers.ExternalNetworksClearIpv6NeighborsHeaders
    },
    204: {
      headersMapper: Mappers.ExternalNetworksClearIpv6NeighborsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.l3IsolationDomainName,
    Parameters.externalNetworkName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const clearArpEntriesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/externalNetworks/{externalNetworkName}/clearArpEntries",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.ExternalNetworksClearArpEntriesHeaders
    },
    201: {
      headersMapper: Mappers.ExternalNetworksClearArpEntriesHeaders
    },
    202: {
      headersMapper: Mappers.ExternalNetworksClearArpEntriesHeaders
    },
    204: {
      headersMapper: Mappers.ExternalNetworksClearArpEntriesHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.l3IsolationDomainName,
    Parameters.externalNetworkName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExternalNetworksList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.l3IsolationDomainName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
