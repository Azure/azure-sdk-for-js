/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AccessControlLists } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureNetworkFabricManagementServiceAPI } from "../azureNetworkFabricManagementServiceAPI";
import {
  AccessControlList,
  AccessControlListsListByResourceGroupNextOptionalParams,
  AccessControlListsListByResourceGroupOptionalParams,
  AccessControlListsListByResourceGroupResponse,
  AccessControlListsListBySubscriptionNextOptionalParams,
  AccessControlListsListBySubscriptionOptionalParams,
  AccessControlListsListBySubscriptionResponse,
  AccessControlListsCreateOptionalParams,
  AccessControlListsCreateResponse,
  AccessControlListsGetOptionalParams,
  AccessControlListsGetResponse,
  AccessControlListPatch,
  AccessControlListsUpdateOptionalParams,
  AccessControlListsUpdateResponse,
  AccessControlListsDeleteOptionalParams,
  AccessControlListsListByResourceGroupNextResponse,
  AccessControlListsListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AccessControlLists operations. */
export class AccessControlListsImpl implements AccessControlLists {
  private readonly client: AzureNetworkFabricManagementServiceAPI;

  /**
   * Initialize a new instance of the class AccessControlLists class.
   * @param client Reference to the service client
   */
  constructor(client: AzureNetworkFabricManagementServiceAPI) {
    this.client = client;
  }

  /**
   * Implements AccessControlLists list by resource group GET method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: AccessControlListsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<AccessControlList> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: AccessControlListsListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<AccessControlList[]> {
    let result: AccessControlListsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: AccessControlListsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<AccessControlList> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Implements AccessControlLists list by subscription GET method.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: AccessControlListsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<AccessControlList> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: AccessControlListsListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<AccessControlList[]> {
    let result: AccessControlListsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: AccessControlListsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<AccessControlList> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Implements Access Control List PUT method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accessControlListName Name of the Access Control List
   * @param body Request payload.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    accessControlListName: string,
    body: AccessControlList,
    options?: AccessControlListsCreateOptionalParams
  ): Promise<AccessControlListsCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accessControlListName, body, options },
      createOperationSpec
    );
  }

  /**
   * Implements Access Control List GET method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accessControlListName Name of the Access Control List
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accessControlListName: string,
    options?: AccessControlListsGetOptionalParams
  ): Promise<AccessControlListsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accessControlListName, options },
      getOperationSpec
    );
  }

  /**
   * API to update certain properties of the Access Control List resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accessControlListName Name of the Access Control List
   * @param body Access Control List properties to update.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accessControlListName: string,
    body: AccessControlListPatch,
    options?: AccessControlListsUpdateOptionalParams
  ): Promise<AccessControlListsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accessControlListName, body, options },
      updateOperationSpec
    );
  }

  /**
   * Implements Access Control List DELETE method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accessControlListName Name of the Access Control List
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accessControlListName: string,
    options?: AccessControlListsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accessControlListName, options },
      deleteOperationSpec
    );
  }

  /**
   * Implements AccessControlLists list by resource group GET method.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: AccessControlListsListByResourceGroupOptionalParams
  ): Promise<AccessControlListsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Implements AccessControlLists list by subscription GET method.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: AccessControlListsListBySubscriptionOptionalParams
  ): Promise<AccessControlListsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: AccessControlListsListByResourceGroupNextOptionalParams
  ): Promise<AccessControlListsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: AccessControlListsListBySubscriptionNextOptionalParams
  ): Promise<AccessControlListsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/accessControlLists/{accessControlListName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AccessControlList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accessControlListName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/accessControlLists/{accessControlListName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessControlList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accessControlListName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/accessControlLists/{accessControlListName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AccessControlList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accessControlListName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/accessControlLists/{accessControlListName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accessControlListName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/accessControlLists",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessControlListsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ManagedNetworkFabric/accessControlLists",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessControlListsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessControlListsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessControlListsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
