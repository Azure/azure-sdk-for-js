/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Switch configuration entries require a description to discern between configuration groups. */
export interface AnnotationResource {
  /** Switch configuration description. */
  annotation?: string;
}

/** Access Control List Patch Properties defines the patchable resource properties. */
export interface AccessControlListPatchableProperties {
  /** Input method to configure Access Control List. */
  configurationType?: ConfigurationType;
  /** Access Control List file URL. */
  aclsUrl?: string;
  /** List of match configurations. */
  matchConfigurations?: AccessControlListMatchConfiguration[];
  /** List of dynamic match configurations. */
  dynamicMatchConfigurations?: CommonDynamicMatchConfiguration[];
}

/** Defines the match configuration that are supported to filter the traffic. */
export interface AccessControlListMatchConfiguration {
  /** The name of the match configuration. */
  matchConfigurationName?: string;
  /** Sequence Number of the match configuration. */
  sequenceNumber?: number;
  /** Type of IP Address. IPv4 or IPv6 */
  ipAddressType?: IPAddressType;
  /** List of the match conditions. */
  matchConditions?: AccessControlListMatchCondition[];
  /** List of actions that need to be performed for the matched conditions. */
  actions?: AccessControlListAction[];
}

/** Port condition that needs to be matched. */
export interface PortCondition {
  /** Port type that needs to be matched. */
  portType?: PortType;
  /** Layer4 protocol type that needs to be matched. */
  layer4Protocol: Layer4Protocol;
  /** List of the Ports that need to be matched. */
  ports?: string[];
  /** List of the port Group Names that to be matched. */
  portGroupNames?: string[];
}

/** Defines the common match conditions of the ACL and Network Tap Rule. */
export interface CommonMatchConditions {
  /** List of the protocols that need to be matched. */
  protocolTypes?: string[];
  /** Vlan match condition that needs to be matched. */
  vlanMatchCondition?: VlanMatchCondition;
  /** IP condition that needs to be matched. */
  ipCondition?: IpMatchCondition;
}

/** The vlan match conditions that needs to be matched. */
export interface VlanMatchCondition {
  /** List of vlans that needs to be matched. */
  vlans?: string[];
  /** List of inner vlans that needs to be matched. */
  innerVlans?: string[];
  /** List of vlan group names that to be matched. */
  vlanGroupNames?: string[];
}

/** Defines the condition that can be filtered using the selected IPs. */
export interface IpMatchCondition {
  /** IP Address type. */
  type?: SourceDestinationType;
  /** IP Prefix Type. */
  prefixType?: PrefixType;
  /** The list of IP Prefixes. */
  ipPrefixValues?: string[];
  /** The List of IP Group Names that need to be matched. */
  ipGroupNames?: string[];
}

/** Action that need to performed. */
export interface AccessControlListAction {
  /** Type of actions that can be performed. */
  type?: AclActionType;
  /** Name of the counter block to get match count information. */
  counterName?: string;
}

/** Dynamic match configuration object. */
export interface CommonDynamicMatchConfiguration {
  /** List of IP Groups. */
  ipGroups?: IpGroupProperties[];
  /** List of vlan groups. */
  vlanGroups?: VlanGroupProperties[];
  /** List of the port group. */
  portGroups?: PortGroupProperties[];
}

/** IP Group properties. */
export interface IpGroupProperties {
  /** IP Group name. */
  name?: string;
  /** IP Address type. */
  ipAddressType?: IPAddressType;
  /** List of IP Prefixes. */
  ipPrefixes?: string[];
}

/** Vlan group properties. */
export interface VlanGroupProperties {
  /** Vlan group name. */
  name?: string;
  /** List of vlans. */
  vlans?: string[];
}

/** Port Group properties. */
export interface PortGroupProperties {
  /** The name of the port group. */
  name?: string;
  /** List of the ports that needs to be matched. */
  ports?: string[];
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Base tracked resource type for PATCH updates. */
export interface TagsUpdate {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** List of Access Control Lists. */
export interface AccessControlListsListResult {
  /** List of Access Control List resources. */
  value?: AccessControlList[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Update administrative state on list of resources. */
export interface EnableDisableOnResources {
  /** Network Fabrics or Network Rack resource Id. */
  resourceIds?: string[];
}

/** Internet Gateway Patchable Properties defines the patchable properties of the resource. */
export interface InternetGatewayPatchableProperties {
  /** ARM Resource ID of the Internet Gateway Rule. */
  internetGatewayRuleId?: string;
}

/** List of InternetGateways. */
export interface InternetGatewaysListResult {
  /** Displays list of Internet Gateway resources. */
  value?: InternetGateway[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Rules for the InternetGateways */
export interface RuleProperties {
  /** Specify action. */
  action: Action;
  /** List of Addresses to be allowed or denied. */
  addressList: string[];
}

/** List of Internet Gateway Rules. */
export interface InternetGatewayRulesListResult {
  /** List of Internet Gateway Rule resources. */
  value?: InternetGatewayRule[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** IP Community patchable properties. */
export interface IpCommunityPatchableProperties {
  /** List of IP Community Rules. */
  ipCommunityRules?: IpCommunityRule[];
}

/** IP Community patchable properties. */
export interface IpCommunityRule {
  /** Action to be taken on the configuration. Example: Permit | Deny. */
  action: CommunityActionTypes;
  /** Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored. */
  sequenceNumber: number;
  /** Supported well known Community List. */
  wellKnownCommunities?: WellKnownCommunities[];
  /** List the community members of IP Community. */
  communityMembers: string[];
}

/** List of IP Communities. */
export interface IpCommunitiesListResult {
  /** List of IP Community resources. */
  value?: IpCommunity[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** IP Extended Community patchable properties. */
export interface IpExtendedCommunityPatchableProperties {
  /** List of IP Extended Community Rules. */
  ipExtendedCommunityRules: IpExtendedCommunityRule[];
}

/** List of IP Extended Community Rules. */
export interface IpExtendedCommunityRule {
  /** Action to be taken on the configuration. Example: Permit | Deny. */
  action: CommunityActionTypes;
  /** Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored. */
  sequenceNumber: number;
  /** Route Target List.The expected formats are ASN(plain):NN >> example 4294967294:50, ASN.ASN:NN >> example 65533.65333:40, IP-address:NN >> example 10.10.10.10:65535. The possible values of ASN,NN are in range of 0-65535, ASN(plain) is in range of 0-4294967295. */
  routeTargets: string[];
}

/** List of IP Extended Communities. */
export interface IpExtendedCommunityListResult {
  /** List of IP Extended Communities resources. */
  value?: IpExtendedCommunity[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** IP Prefix patchable properties. */
export interface IpPrefixPatchableProperties {
  /** The list of IP Prefix Rules. */
  ipPrefixRules?: IpPrefixRule[];
}

/** IP Prefix Rule properties. */
export interface IpPrefixRule {
  /** Action to be taken on the configuration. Example: Permit | Deny. */
  action: CommunityActionTypes;
  /** Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored. */
  sequenceNumber: number;
  /** Network Prefix specifying IPv4/IPv6 packets to be permitted or denied. Example: 1.1.1.0/24 | 3FFE:FFFF:0:CD30::/126 */
  networkPrefix: string;
  /** Specify prefix-list bounds. */
  condition?: Condition;
  /** SubnetMaskLength gives the minimum NetworkPrefix length to be matched. Possible values for IPv4 are 1 - 32 . Possible values of IPv6 are 1 - 128. */
  subnetMaskLength?: string;
}

/** List of IP Prefixes. */
export interface IpPrefixesListResult {
  /** List of IP Prefix resources. */
  value?: IpPrefix[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** List of L2 Isolation Domains. */
export interface L2IsolationDomainsListResult {
  /** Displays list of L2 Isolation Domain resources. */
  value?: L2IsolationDomain[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** L3 Isolation Domain Patch Properties defines the patchable properties of the resource. */
export interface L3IsolationDomainPatchableProperties {
  /** Advertise Connected Subnets. Ex: "True" | "False". */
  redistributeConnectedSubnets?: RedistributeConnectedSubnets;
  /** Advertise Static Routes. Ex: "True" | "False". */
  redistributeStaticRoutes?: RedistributeStaticRoutes;
  /** Aggregate route configurations. */
  aggregateRouteConfiguration?: AggregateRouteConfiguration;
  /** Connected Subnet RoutePolicy */
  connectedSubnetRoutePolicy?: ConnectedSubnetRoutePolicy;
}

/** List of IPv4 and IPv6 aggregate routes. */
export interface AggregateRouteConfiguration {
  /** List of IPv4 Route prefixes. */
  ipv4Routes?: AggregateRoute[];
  /** List of Ipv6Routes prefixes. */
  ipv6Routes?: AggregateRoute[];
}

/** aggregateIpv4Route model. */
export interface AggregateRoute {
  /** IPv4 Prefix of the aggregate Ipv4Route. */
  prefix: string;
}

/** Connected Subnet Route Policy properties. */
export interface ConnectedSubnetRoutePolicy {
  /** ARM Resource ID of the Route Policy. This is used for the backward compatibility. */
  exportRoutePolicyId?: string;
  /** Array of ARM Resource ID of the RoutePolicies. */
  exportRoutePolicy?: L3ExportRoutePolicy;
}

/** Array of ARM Resource ID of the RoutePolicies. */
export interface L3ExportRoutePolicy {
  /** ARM Resource ID of the RoutePolicy. */
  exportIpv4RoutePolicyId?: string;
  /** ARM Resource ID of the RoutePolicy. */
  exportIpv6RoutePolicyId?: string;
}

/** List of L3 Isolation Domains. */
export interface L3IsolationDomainsListResult {
  /** List of L3 Isolation Domain resources. */
  value?: L3IsolationDomain[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** BFD configuration properties */
export interface BfdConfiguration {
  /**
   * Administrative state of the BfdConfiguration. Example: Enabled | Disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: BfdAdministrativeState;
  /** Interval in milliseconds. Example: 300. */
  intervalInMilliSeconds?: number;
  /** Multiplier for the Bfd Configuration. Example: 5. */
  multiplier?: number;
}

/** Neighbor Address properties. */
export interface NeighborAddress {
  /** IP Address. */
  address?: string;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
}

/** Static Route Configuration properties. */
export interface StaticRouteConfiguration {
  /** BFD configuration properties */
  bfdConfiguration?: BfdConfiguration;
  /** List of IPv4 Routes. */
  ipv4Routes?: StaticRouteProperties[];
  /** List of IPv6 Routes. */
  ipv6Routes?: StaticRouteProperties[];
}

/** Route Properties. */
export interface StaticRouteProperties {
  /** Prefix of the route. */
  prefix: string;
  /** List of next hop addresses. */
  nextHop: string[];
}

/** Extension property. */
export interface ExtensionEnumProperty {
  /** Extension. Example: NoExtension | NPB. */
  extension?: Extension;
}

/** The InternalNetwork patchable properties. */
export interface InternalNetworkPatchableProperties {
  /** Maximum transmission unit. Default value is 1500. */
  mtu?: number;
  /** List of Connected IPv4 Subnets. */
  connectedIPv4Subnets?: ConnectedSubnet[];
  /** List of connected IPv6 Subnets. */
  connectedIPv6Subnets?: ConnectedSubnet[];
  /** ARM Resource ID of the RoutePolicy. This is used for the backward compatibility. */
  importRoutePolicyId?: string;
  /** ARM Resource ID of the RoutePolicy. This is used for the backward compatibility. */
  exportRoutePolicyId?: string;
  /** Import Route Policy either IPv4 or IPv6. */
  importRoutePolicy?: ImportRoutePolicy;
  /** Export Route Policy either IPv4 or IPv6. */
  exportRoutePolicy?: ExportRoutePolicy;
  /** Ingress Acl. ARM resource ID of Access Control Lists. */
  ingressAclId?: string;
  /** Egress Acl. ARM resource ID of Access Control Lists. */
  egressAclId?: string;
  /** To check whether monitoring of internal network is enabled or not. */
  isMonitoringEnabled?: IsMonitoringEnabled;
}

/** Import Route Policy either IPv4 or IPv6. */
export interface ImportRoutePolicy {
  /** ARM resource ID of RoutePolicy. */
  importIpv4RoutePolicyId?: string;
  /** ARM resource ID of RoutePolicy. */
  importIpv6RoutePolicyId?: string;
}

/** Export Route Policy either IPv4 or IPv6. */
export interface ExportRoutePolicy {
  /** ARM resource ID of RoutePolicy. */
  exportIpv4RoutePolicyId?: string;
  /** ARM resource ID of RoutePolicy. */
  exportIpv6RoutePolicyId?: string;
}

/** The InternalNetwork patch resource definition. */
export interface InternalNetworkPatch {
  /** Switch configuration description. */
  annotation?: string;
  /** Maximum transmission unit. Default value is 1500. */
  mtu?: number;
  /** List of Connected IPv4 Subnets. */
  connectedIPv4Subnets?: ConnectedSubnet[];
  /** List of connected IPv6 Subnets. */
  connectedIPv6Subnets?: ConnectedSubnet[];
  /** ARM Resource ID of the RoutePolicy. This is used for the backward compatibility. */
  importRoutePolicyId?: string;
  /** ARM Resource ID of the RoutePolicy. This is used for the backward compatibility. */
  exportRoutePolicyId?: string;
  /** Import Route Policy either IPv4 or IPv6. */
  importRoutePolicy?: ImportRoutePolicy;
  /** Export Route Policy either IPv4 or IPv6. */
  exportRoutePolicy?: ExportRoutePolicy;
  /** Ingress Acl. ARM resource ID of Access Control Lists. */
  ingressAclId?: string;
  /** Egress Acl. ARM resource ID of Access Control Lists. */
  egressAclId?: string;
  /** To check whether monitoring of internal network is enabled or not. */
  isMonitoringEnabled?: IsMonitoringEnabled;
  /** BGP configuration properties. */
  bgpConfiguration?: BgpConfiguration;
  /** Static Route Configuration properties. */
  staticRouteConfiguration?: StaticRouteConfiguration;
}

/** List of Internal Networks. */
export interface InternalNetworksList {
  /** List of Internal Network resources. */
  value?: InternalNetwork[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Option B configuration. */
export interface L3OptionBProperties {
  /** RouteTargets to be applied. This is used for the backward compatibility. */
  importRouteTargets?: string[];
  /** RouteTargets to be applied. This is used for the backward compatibility. */
  exportRouteTargets?: string[];
  /** RouteTargets to be applied. */
  routeTargets?: RouteTargetInformation;
}

/** Route Target Configuration. */
export interface RouteTargetInformation {
  /** Route Targets to be applied for incoming routes into CE. */
  importIpv4RouteTargets?: string[];
  /** Route Targets to be applied for incoming routes from CE. */
  importIpv6RouteTargets?: string[];
  /** Route Targets to be applied for outgoing routes into CE. */
  exportIpv4RouteTargets?: string[];
  /** Route Targets to be applied for outgoing routes from CE. */
  exportIpv6RouteTargets?: string[];
}

/** Layer 3 primary and secondary IP Address prefixes. */
export interface Layer3IpPrefixProperties {
  /** IPv4 Address Prefix. */
  primaryIpv4Prefix?: string;
  /** IPv6 Address Prefix. */
  primaryIpv6Prefix?: string;
  /** Secondary IPv4 Address Prefix. */
  secondaryIpv4Prefix?: string;
  /** Secondary IPv6 Address Prefix. */
  secondaryIpv6Prefix?: string;
}

/** Peering optionA properties */
export interface L3OptionAProperties {
  /** MTU to use for option A peering. */
  mtu?: number;
  /** Vlan identifier. Example : 501 */
  vlanId?: number;
  /**
   * Fabric ASN number. Example 65001
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fabricASN?: number;
  /** Peer ASN number.Example : 28 */
  peerASN?: number;
  /** BFD configuration properties */
  bfdConfiguration?: BfdConfiguration;
  /** Ingress Acl. ARM resource ID of Access Control Lists. */
  ingressAclId?: string;
  /** Egress Acl. ARM resource ID of Access Control Lists. */
  egressAclId?: string;
}

/** The ExternalNetwork patchable properties. */
export interface ExternalNetworkPatchableProperties {
  /** ARM Resource ID of the RoutePolicy. This is used for the backward compatibility. */
  importRoutePolicyId?: string;
  /** ARM Resource ID of the RoutePolicy. This is used for the backward compatibility. */
  exportRoutePolicyId?: string;
  /** Import Route Policy either IPv4 or IPv6. */
  importRoutePolicy?: ImportRoutePolicy;
  /** Export Route Policy either IPv4 or IPv6. */
  exportRoutePolicy?: ExportRoutePolicy;
}

/** The ExternalNetwork patch resource definition. */
export interface ExternalNetworkPatch {
  /** Switch configuration description. */
  annotation?: string;
  /** ARM Resource ID of the RoutePolicy. This is used for the backward compatibility. */
  importRoutePolicyId?: string;
  /** ARM Resource ID of the RoutePolicy. This is used for the backward compatibility. */
  exportRoutePolicyId?: string;
  /** Import Route Policy either IPv4 or IPv6. */
  importRoutePolicy?: ImportRoutePolicy;
  /** Export Route Policy either IPv4 or IPv6. */
  exportRoutePolicy?: ExportRoutePolicy;
  /** Peering option list. */
  peeringOption?: PeeringOption;
  /** option B properties object */
  optionBProperties?: L3OptionBProperties;
  /** option A properties object */
  optionAProperties?: ExternalNetworkPatchPropertiesOptionAProperties;
}

/** List of External Networks. */
export interface ExternalNetworksList {
  /** List of External Network resources. */
  value?: ExternalNetwork[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Neighbor Group Patchable Properties defines the patchable properties of the resource. */
export interface NeighborGroupPatchableProperties {
  /** An array of destination IPv4 Addresses or IPv6 Addresses. */
  destination?: NeighborGroupDestination;
}

/** An array of destination IPv4 Addresses or IPv6 Addresses. */
export interface NeighborGroupDestination {
  /** Array of IPv4 Addresses. */
  ipv4Addresses?: string[];
  /** Array of IPv6 Addresses. */
  ipv6Addresses?: string[];
}

/** List of Neighbor Group. */
export interface NeighborGroupsListResult {
  /** List of Neighbor Group resources. */
  value?: NeighborGroup[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Supported version details of the network device. */
export interface SupportedVersionProperties {
  /** Operating system and firmware combined versions. */
  version?: string;
  /** Operating system version. */
  vendorOsVersion?: string;
  /** Firmware version. */
  vendorFirmwareVersion?: string;
  /** If true newly provisioned Fabric will use this device version by default to bootstrap the network devices for the first time. */
  isDefault?: BooleanEnumProperty;
}

/** Network device interface properties. */
export interface DeviceInterfaceProperties {
  /** Interface identifier. Example: HundredGigE0/0. */
  identifier?: string;
  /** Interface type. */
  interfaceType?: string;
  /** List of supported connector types. */
  supportedConnectorTypes?: SupportedConnectorProperties[];
}

/** Supported connector properties. */
export interface SupportedConnectorProperties {
  /** Type of connector used. Example: Optical. */
  connectorType?: string;
  /** Maximum speed of the connector in Mbps. */
  maxSpeedInMbps?: number;
}

/** List of Network Device SKUs. */
export interface NetworkDeviceSkusListResult {
  /** List of Network Device SKU resources. */
  value?: NetworkDeviceSku[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Network Device updatable properties. */
export interface NetworkDevicePatchableProperties {
  /** The host name of the device. */
  hostName?: string;
  /** Serial number of the device. Format of serial Number - Make;Model;HardwareRevisionId;SerialNumber. */
  serialNumber?: string;
}

/** List of NetworkDevices. */
export interface NetworkDevicesListResult {
  /** List of NetworkDevice resources. */
  value?: NetworkDevice[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** The NetworkInterfacePatch resource definition. */
export interface NetworkInterfacePatch {
  /** Switch configuration description. */
  annotation?: string;
}

/** List of NetworkInterfaces. */
export interface NetworkInterfacesList {
  /** List of NetworkInterfaces resources. */
  value?: NetworkInterface[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Reboot properties. */
export interface RebootProperties {
  /** Type of reboot to be performed. Example: GracefulRebootWithZTP */
  rebootType?: RebootType;
}

/** Update version properties. */
export interface UpdateVersion {
  /** Specify the version. */
  version?: string;
}

/** Network Fabric Controller services. */
export interface ControllerServices {
  /** The IPv4 Address space is optional, if the value is not defined at the time of NFC creation, then the default value 10.0.0.0/19 is considered. The IPV4 address subnet is an optional attribute. */
  ipv4AddressSpaces?: string[];
  /** The IPv6 is not supported right now. */
  ipv6AddressSpaces?: string[];
}

/** Managed Resource Group configuration properties. */
export interface ManagedResourceGroupConfiguration {
  /** The NFC service will be hosted in a Managed resource group. */
  name?: string;
  /** Managed resource group location. */
  location?: string;
}

/** Network Fabric Controller updatable properties */
export interface NetworkFabricControllerPatchableProperties {
  /** As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute) */
  infrastructureExpressRouteConnections?: ExpressRouteConnectionInformation[];
  /** As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is a Mandatory attribute). */
  workloadExpressRouteConnections?: ExpressRouteConnectionInformation[];
}

/** The ExpressRoute circuit ID and the Auth Key are required for you to successfully deploy NFC service. */
export interface ExpressRouteConnectionInformation {
  /** The express route circuit Azure resource ID, must be of type Microsoft.Network/expressRouteCircuits/circuitName. The ExpressRoute Circuit is a mandatory attribute. */
  expressRouteCircuitId: string;
  /** Authorization key for the circuit, must be of type Microsoft.Network/expressRouteCircuits/authorizations. The Auth Key is a mandatory attribute. */
  expressRouteAuthorizationKey: string;
}

/** List of Network Fabric Controllers. */
export interface NetworkFabricControllersListResult {
  /** List of Network Fabric Controller resources. */
  value?: NetworkFabricController[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** List of Network Fabric SKUs. */
export interface NetworkFabricSkusListResult {
  /** List of Network Fabric SKU resources. */
  value?: NetworkFabricSku[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Network and credential configuration currently applied on terminal server. */
export interface TerminalServerPatchableProperties {
  /** Username for the terminal server connection. */
  username?: string;
  /** Password for the terminal server connection. */
  password?: string;
  /** Serial Number of Terminal server. */
  serialNumber?: string;
}

/** Configuration to be used to setup the management network. */
export interface ManagementNetworkConfigurationProperties {
  /** VPN Configuration properties. */
  infrastructureVpnConfiguration: VpnConfigurationProperties;
  /** VPN Configuration properties. */
  workloadVpnConfiguration: VpnConfigurationProperties;
}

/** Network and credential configuration currently applied on terminal server. */
export interface VpnConfigurationProperties {
  /** ARM Resource ID of the Network To Network Interconnect. */
  networkToNetworkInterconnectId?: string;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
  /** Peering option list. */
  peeringOption: PeeringOption;
  /** option B properties */
  optionBProperties?: OptionBProperties;
  /** option A properties */
  optionAProperties?: VpnConfigurationPropertiesOptionAProperties;
}

/** Option B configuration to be used for Management VPN. */
export interface OptionBProperties {
  /** Route Targets to be applied for incoming routes into CE. This is for backward compatibility. */
  importRouteTargets?: string[];
  /** Route Targets to be applied for outgoing routes from CE. This is for backward compatibility. */
  exportRouteTargets?: string[];
  /** Route Targets to be applied. */
  routeTargets?: RouteTargetInformation;
}

/** Peering optionA properties */
export interface OptionAProperties {
  /** MTU to use for option A peering. */
  mtu?: number;
  /** Vlan Id.Example : 501 */
  vlanId?: number;
  /** Peer ASN number.Example : 28 */
  peerASN?: number;
  /** BFD Configuration properties. */
  bfdConfiguration?: BfdConfiguration;
}

/** Network Fabric updatable properties. */
export interface NetworkFabricPatchableProperties {
  /** Number of compute racks associated to Network Fabric. */
  rackCount?: number;
  /** Number of servers.Possible values are from 1-16. */
  serverCountPerRack?: number;
  /** IPv4Prefix for Management Network. Example: 10.1.0.0/19. */
  ipv4Prefix?: string;
  /** IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59. */
  ipv6Prefix?: string;
  /** ASN of CE devices for CE/PE connectivity. */
  fabricASN?: number;
  /** Network and credentials configuration already applied to terminal server. */
  terminalServerConfiguration?: NetworkFabricPatchablePropertiesTerminalServerConfiguration;
  /** Configuration to be used to setup the management network. */
  managementNetworkConfiguration?: ManagementNetworkConfigurationPatchableProperties;
}

/** Configuration to be used to setup the management network. */
export interface ManagementNetworkConfigurationPatchableProperties {
  /** VPN Configuration properties. */
  infrastructureVpnConfiguration?: VpnConfigurationPatchableProperties;
  /** VPN Configuration properties. */
  workloadVpnConfiguration?: VpnConfigurationPatchableProperties;
}

/** Network and credential configuration currently applied on terminal server. */
export interface VpnConfigurationPatchableProperties {
  /** ARM Resource ID of the Network To Network Interconnect. */
  networkToNetworkInterconnectId?: string;
  /** Peering option list. */
  peeringOption?: PeeringOption;
  /** option B properties */
  optionBProperties?: OptionBProperties;
  /** option A properties */
  optionAProperties?: VpnConfigurationPatchablePropertiesOptionAProperties;
}

/** List of Network Fabrics. */
export interface NetworkFabricsListResult {
  /** List of Network Fabric resources. */
  value?: NetworkFabric[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Validation configuration properties. */
export interface ValidateConfigurationProperties {
  /** Validate action that to be performed */
  validateAction?: ValidateAction;
}

/** Common properties for Layer2 Configuration. */
export interface Layer2Configuration {
  /** MTU of the packets between PE & CE. */
  mtu?: number;
  /** List of network device interfaces resource IDs. */
  interfaces?: string[];
}

/** NPB Static Route Configuration properties. */
export interface NpbStaticRouteConfiguration {
  /** BFD Configuration properties. */
  bfdConfiguration?: BfdConfiguration;
  /** List of IPv4 Routes. */
  ipv4Routes?: StaticRouteProperties[];
  /** List of IPv6 Routes. */
  ipv6Routes?: StaticRouteProperties[];
}

/** Import Route Policy Configuration. */
export interface ImportRoutePolicyInformation {
  /** Import IPv4 Route Policy Id. */
  importIpv4RoutePolicyId?: string;
  /** Import IPv6 Route Policy Id. */
  importIpv6RoutePolicyId?: string;
}

/** Export Route Policy Configuration. */
export interface ExportRoutePolicyInformation {
  /** Export IPv4 Route Policy Id. */
  exportIpv4RoutePolicyId?: string;
  /** Export IPv6 Route Policy Id. */
  exportIpv6RoutePolicyId?: string;
}

/** List of Network To Network Interconnects. */
export interface NetworkToNetworkInterconnectsList {
  /** List of NetworkToNetworkInterconnects resources. */
  value?: NetworkToNetworkInterconnect[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** List of NetworkPacketBrokers. */
export interface NetworkPacketBrokersListResult {
  /** List of NetworkPacketBroker resources. */
  value?: NetworkPacketBroker[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** List of Network Racks. */
export interface NetworkRacksListResult {
  /** List of Network Rack resources. */
  value?: NetworkRack[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Network Tap Rule updatable properties. */
export interface NetworkTapRulePatchableProperties {
  /** Input method to configure Network Tap Rule. */
  configurationType?: ConfigurationType;
  /** Network Tap Rules file URL. */
  tapRulesUrl?: string;
  /** List of match configurations. */
  matchConfigurations?: NetworkTapRuleMatchConfiguration[];
  /** List of dynamic match configurations. */
  dynamicMatchConfigurations?: CommonDynamicMatchConfiguration[];
}

/** Defines the match configuration that are supported to filter the traffic. */
export interface NetworkTapRuleMatchConfiguration {
  /** The name of the match configuration. */
  matchConfigurationName?: string;
  /** Sequence Number of the match configuration.. */
  sequenceNumber?: number;
  /** Type of IP Address. IPv4 or IPv6 */
  ipAddressType?: IPAddressType;
  /** List of the match conditions. */
  matchConditions?: NetworkTapRuleMatchCondition[];
  /** List of actions that need to be performed for the matched conditions. */
  actions?: NetworkTapRuleAction[];
}

/** Action that need to performed. */
export interface NetworkTapRuleAction {
  /** Type of actions that can be performed. */
  type?: TapRuleActionType;
  /** Truncate. 0 indicates do not truncate. */
  truncate?: string;
  /** The parameter to enable or disable the timestamp. */
  isTimestampEnabled?: BooleanEnumProperty;
  /** Destination Id. The ARM resource Id may be either Network To Network Interconnect or NeighborGroup. */
  destinationId?: string;
  /** The name of the match configuration. This is used when Goto type is provided. If Goto type is selected and no match configuration name is provided. It goes to next configuration. */
  matchConfigurationName?: string;
}

/** List of NetworkTapRules. */
export interface NetworkTapRulesListResult {
  /** List of NetworkTapRule resources. */
  value?: NetworkTapRule[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** The network tap destination properties. */
export interface DestinationProperties {
  /** Destination name. */
  name?: string;
  /** Type of destination. Input can be IsolationDomain or Direct. */
  destinationType?: DestinationType;
  /** The destination Id. ARM Resource ID of either NNI or Internal Networks. */
  destinationId?: string;
  /** Isolation Domain Properties. */
  isolationDomainProperties?: IsolationDomainProperties;
  /** ARM Resource ID of destination Tap Rule that contains match configurations. */
  destinationTapRuleId?: string;
}

/** Isolation Domain Properties. */
export interface IsolationDomainProperties {
  /** Type of encapsulation. */
  encapsulation?: Encapsulation;
  /** List of Neighbor Group IDs. */
  neighborGroupIds?: string[];
}

/** List of NetworkTaps. */
export interface NetworkTapsListResult {
  /** List of NetworkTap resources. */
  value?: NetworkTap[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Route Policy patchable properties. */
export interface RoutePolicyPatchableProperties {
  /** Route Policy statements. */
  statements?: RoutePolicyStatementProperties[];
}

/** IP Community ID list properties. */
export interface IpCommunityIdList {
  /** List of IP Community resource IDs. */
  ipCommunityIds?: string[];
}

/** IP Extended Community Id list properties. */
export interface IpExtendedCommunityIdList {
  /** List of IP Extended Community resource IDs. */
  ipExtendedCommunityIds?: string[];
}

/** Route policy action properties. */
export interface StatementActionProperties {
  /** Local Preference of the route policy. */
  localPreference?: number;
  /** Action type. Example: Permit | Deny | Continue. */
  actionType: RoutePolicyActionType;
  /** IP Community Properties. */
  ipCommunityProperties?: ActionIpCommunityProperties;
  /** IP Extended Community Properties. */
  ipExtendedCommunityProperties?: ActionIpExtendedCommunityProperties;
}

/** IP Community add operation properties. */
export interface IpCommunityAddOperationProperties {
  /** List of IP Community IDs. */
  add?: IpCommunityIdList;
}

/** IP Community delete operation properties. */
export interface IpCommunityDeleteOperationProperties {
  /** List of IP Community IDs. */
  delete?: IpCommunityIdList;
}

/** IP Community set operation properties. */
export interface IpCommunitySetOperationProperties {
  /** List of IP Community IDs. */
  set?: IpCommunityIdList;
}

/** IP Extended Community add operation properties. */
export interface IpExtendedCommunityAddOperationProperties {
  /** List of IP Extended Community IDs. */
  add?: IpExtendedCommunityIdList;
}

/** IP Extended Community delete operation properties. */
export interface IpExtendedCommunityDeleteOperationProperties {
  /** List of IP Extended Community IDs. */
  delete?: IpExtendedCommunityIdList;
}

/** IP Extended Community set operation properties. */
export interface IpExtendedCommunitySetOperationProperties {
  /** List of IP Extended Community IDs. */
  set?: IpExtendedCommunityIdList;
}

/** List of RoutePolicies. */
export interface RoutePoliciesListResult {
  /** List of RoutePolicy resources. */
  value?: RoutePolicy[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** The extended location. */
export interface ExtendedLocation {
  /** The extended location type. */
  type?: string;
  /** The extended location name. */
  name?: string;
}

/** Access Control List Properties defines the resource properties. */
export interface AccessControlListProperties
  extends AnnotationResource,
    AccessControlListPatchableProperties {
  /**
   * The last synced timestamp.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSyncedTime?: Date;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** Access Control Lists patch properties. */
export interface AccessControlListPatchProperties
  extends AccessControlListPatchableProperties,
    AnnotationResource {}

/** Internet Gateway Properties defines the properties of the resource. */
export interface InternetGatewayProperties
  extends AnnotationResource,
    InternetGatewayPatchableProperties {
  /**
   * IPv4 Address of Internet Gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv4Address?: string;
  /**
   * Port number of Internet Gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly port?: number;
  /** Gateway Type of the resource. */
  type: GatewayType;
  /** ARM Resource ID of the Network Fabric Controller. */
  networkFabricControllerId: string;
  /**
   * Provisioning state of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Internet Gateway Rule Properties defines the resource properties. */
export interface InternetGatewayRuleProperties extends AnnotationResource {
  /** Rules for the InternetGateways */
  ruleProperties: RuleProperties;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * List of Internet Gateway resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly internetGatewayIds?: string[];
}

/** IP Community Properties defines the resource properties. */
export interface IpCommunityProperties
  extends AnnotationResource,
    IpCommunityPatchableProperties {
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** IP Extended Community Properties defines the resource properties. */
export interface IpExtendedCommunityProperties
  extends AnnotationResource,
    IpExtendedCommunityPatchableProperties {
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** IP Extended Community patchable properties. */
export interface IpExtendedCommunityPatchProperties
  extends IpExtendedCommunityPatchableProperties,
    AnnotationResource {}

/** IP Prefix Properties defines the properties of the resource. */
export interface IpPrefixProperties
  extends AnnotationResource,
    IpPrefixPatchableProperties {
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** IP Prefix patchable properties. */
export interface IpPrefixPatchProperties
  extends AnnotationResource,
    IpPrefixPatchableProperties {}

/** L2Isolation Domain Properties defines the properties of the resource. */
export interface L2IsolationDomainProperties extends AnnotationResource {
  /** ARM Resource ID of the Network Fabric. */
  networkFabricId: string;
  /** Vlan Identifier of the Network Fabric. Example: 501. */
  vlanId: number;
  /** Maximum transmission unit. Default value is 1500. */
  mtu?: number;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** L2 Isolation Domain Patch Properties defines the patchable properties of the resource. */
export interface L2IsolationDomainPatchProperties extends AnnotationResource {
  /** Maximum transmission unit. Default value is 1500. */
  mtu?: number;
}

/** L3 Isolation Domain Properties defines the properties of the resource. */
export interface L3IsolationDomainProperties
  extends AnnotationResource,
    L3IsolationDomainPatchableProperties {
  /** ARM Resource ID of the Network Fabric. */
  networkFabricId: string;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** Resource properties. */
export interface L3IsolationDomainPatchProperties
  extends AnnotationResource,
    L3IsolationDomainPatchableProperties {}

/** BGP configuration properties */
export interface BgpConfiguration extends AnnotationResource {
  /** BFD configuration properties */
  bfdConfiguration?: BfdConfiguration;
  /** Originate a defaultRoute. Ex: "True" | "False". */
  defaultRouteOriginate?: BooleanEnumProperty;
  /** Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2. */
  allowAS?: number;
  /** Enable Or Disable state. */
  allowASOverride?: AllowASOverride;
  /**
   * ASN of Network Fabric. Example: 65048.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fabricASN?: number;
  /** Peer ASN. Example: 65047. */
  peerASN?: number;
  /** List of BGP IPv4 Listen Range prefixes. */
  ipv4ListenRangePrefixes?: string[];
  /** List of BGP IPv6 Listen Ranges prefixes. */
  ipv6ListenRangePrefixes?: string[];
  /** List with stringified IPv4 Neighbor Addresses. */
  ipv4NeighborAddress?: NeighborAddress[];
  /** List with stringified IPv6 Neighbor Address. */
  ipv6NeighborAddress?: NeighborAddress[];
}

/** Connected Subnet properties. */
export interface ConnectedSubnet extends AnnotationResource {
  /** Prefix of the Connected Subnet. */
  prefix: string;
}

/** Internal Network Properties defines the properties of the resource. */
export interface InternalNetworkProperties
  extends AnnotationResource,
    InternalNetworkPatchableProperties,
    ExtensionEnumProperty {
  /** Vlan identifier. Example: 1001. */
  vlanId: number;
  /** BGP configuration properties. */
  bgpConfiguration?: InternalNetworkPropertiesBgpConfiguration;
  /** Static Route Configuration properties. */
  staticRouteConfiguration?: InternalNetworkPropertiesStaticRouteConfiguration;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** InternalNetwork Patch properties. */
export interface InternalNetworkPatchProperties
  extends AnnotationResource,
    InternalNetworkPatchableProperties {
  /** BGP configuration properties. */
  bgpConfiguration?: BgpConfiguration;
  /** Static Route Configuration properties. */
  staticRouteConfiguration?: StaticRouteConfiguration;
}

/** External Network Properties. */
export interface ExternalNetworkProperties
  extends AnnotationResource,
    ExternalNetworkPatchableProperties {
  /**
   * Gets the networkToNetworkInterconnectId of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkToNetworkInterconnectId?: string;
  /** Peering option list. */
  peeringOption: PeeringOption;
  /** option B properties object */
  optionBProperties?: L3OptionBProperties;
  /** option A properties object */
  optionAProperties?: ExternalNetworkPropertiesOptionAProperties;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** External Network Patch properties. */
export interface ExternalNetworkPatchProperties
  extends AnnotationResource,
    ExternalNetworkPatchableProperties {
  /** Peering option list. */
  peeringOption?: PeeringOption;
  /** option B properties object */
  optionBProperties?: L3OptionBProperties;
  /** option A properties object */
  optionAProperties?: ExternalNetworkPatchPropertiesOptionAProperties;
}

/** Neighbor Group Properties defines the properties of the resource. */
export interface NeighborGroupProperties
  extends AnnotationResource,
    NeighborGroupPatchableProperties {
  /**
   * List of NetworkTap IDs where neighbor group is associated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkTapIds?: string[];
  /**
   * List of Network Tap Rule IDs where neighbor group is associated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkTapRuleIds?: string[];
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Neighbor Group Patch properties. */
export interface NeighborGroupPatchProperties
  extends AnnotationResource,
    NeighborGroupPatchableProperties {}

/** Network Device Properties defines the properties of the resource. */
export interface NetworkDeviceProperties
  extends AnnotationResource,
    NetworkDevicePatchableProperties {
  /**
   * Current version of the device as defined in SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /** Network Device SKU name. */
  networkDeviceSku?: string;
  /**
   * NetworkDeviceRole is the device role: Example: CE | ToR.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkDeviceRole?: NetworkDeviceRole;
  /**
   * Reference to network rack resource id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkRackId?: string;
  /**
   * Management IPv4 Address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managementIpv4Address?: string;
  /**
   * Management IPv6 Address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managementIpv6Address?: string;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** Network Device Patch properties. */
export interface NetworkDevicePatchParametersProperties
  extends AnnotationResource,
    NetworkDevicePatchableProperties {}

/** Network Interface Properties defines the properties of the resource. */
export interface NetworkInterfaceProperties extends AnnotationResource {
  /**
   * Physical Identifier of the network interface.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly physicalIdentifier?: string;
  /**
   * The ARM resource id of the interface or compute server its connected to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectedTo?: string;
  /**
   * The Interface Type. Example: Management/Data
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly interfaceType?: InterfaceType;
  /**
   * IPv4Address of the interface.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv4Address?: string;
  /**
   * IPv6Address of the interface.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv6Address?: string;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** Network Interface Patch properties. */
export interface NetworkInterfacePatchProperties extends AnnotationResource {}

/** NetworkFabricControllerProperties defines the resource properties. */
export interface NetworkFabricControllerProperties
  extends AnnotationResource,
    NetworkFabricControllerPatchableProperties {
  /**
   * InfrastructureServices IP ranges.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly infrastructureServices?: ControllerServices;
  /**
   * WorkloadServices IP ranges.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workloadServices?: ControllerServices;
  /** Managed Resource Group configuration properties. */
  managedResourceGroupConfiguration?: ManagedResourceGroupConfiguration;
  /**
   * The NF-ID will be an input parameter used by the NF to link and get associated with the parent NFC Service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkFabricIds?: string[];
  /**
   * A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints. This is used for the backward compatibility.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workloadManagementNetwork?: boolean;
  /** A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints. */
  isWorkloadManagementNetworkEnabled?: IsWorkloadManagementNetworkEnabled;
  /**
   * List of tenant InternetGateway resource IDs
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantInternetGatewayIds?: string[];
  /** IPv4 Network Fabric Controller Address Space. */
  ipv4AddressSpace?: string;
  /** IPv6 Network Fabric Controller Address Space. */
  ipv6AddressSpace?: string;
  /** Network Fabric Controller SKU. */
  nfcSku?: NfcSku;
  /**
   * Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC provisioning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Network Fabric Properties defines the properties of the resource. */
export interface NetworkFabricProperties extends AnnotationResource {
  /** Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric. */
  networkFabricSku: string;
  /**
   * The version of Network Fabric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fabricVersion?: string;
  /**
   * Array of router IDs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly routerIds?: string[];
  /** Azure resource ID for the NetworkFabricController the NetworkFabric belongs. */
  networkFabricControllerId: string;
  /** Number of compute racks associated to Network Fabric. */
  rackCount?: number;
  /** Number of servers.Possible values are from 1-16. */
  serverCountPerRack: number;
  /** IPv4Prefix for Management Network. Example: 10.1.0.0/19. */
  ipv4Prefix: string;
  /** IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59 */
  ipv6Prefix?: string;
  /** ASN of CE devices for CE/PE connectivity. */
  fabricASN: number;
  /** Network and credentials configuration currently applied to terminal server. */
  terminalServerConfiguration: TerminalServerConfiguration;
  /** Configuration to be used to setup the management network. */
  managementNetworkConfiguration: ManagementNetworkConfigurationProperties;
  /**
   * List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly racks?: string[];
  /**
   * List of L2 Isolation Domain resource IDs under the Network Fabric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly l2IsolationDomains?: string[];
  /**
   * List of L3 Isolation Domain resource IDs under the Network Fabric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly l3IsolationDomains?: string[];
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC provisioning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** Network Fabric Patch properties. */
export interface NetworkFabricPatchProperties
  extends AnnotationResource,
    NetworkFabricPatchableProperties {}

/** Network Rack Properties defines the properties of the resource. */
export interface NetworkRackProperties extends AnnotationResource {
  /** Network Rack SKU name. */
  networkRackType?: NetworkRackType;
  /** ARM resource ID of the Network Fabric. */
  networkFabricId: string;
  /**
   * List of network device ARM resource IDs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkDevices?: string[];
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Network Tap Rule Properties defines the resource properties. */
export interface NetworkTapRuleProperties
  extends AnnotationResource,
    NetworkTapRulePatchableProperties {
  /**
   * The ARM resource Id of the NetworkTap.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkTapId?: string;
  /** Polling interval in seconds. */
  pollingIntervalInSeconds?: PollingIntervalInSeconds;
  /**
   * The last sync timestamp.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSyncedTime?: Date;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** Network Tap Rule Patch properties. */
export interface NetworkTapRulePatchProperties
  extends AnnotationResource,
    NetworkTapRulePatchableProperties {}

/** Network Tap Properties defines the properties of the resource. */
export interface NetworkTapProperties extends AnnotationResource {
  /** ARM resource ID of the Network Packet Broker. */
  networkPacketBrokerId: string;
  /**
   * Source Tap Rule Id. ARM Resource ID of the Network Tap Rule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceTapRuleId?: string;
  /** List of destinations to send the filter traffic. */
  destinations: NetworkTapPropertiesDestinationsItem[];
  /** Polling type. */
  pollingType?: PollingType;
  /**
   * Gets the configurations state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of Network Tap provisioning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource. Example -Enabled/Disabled
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** The Network Tap resource patch definition. */
export interface NetworkTapPatchableParameters extends AnnotationResource {
  /** Polling type. */
  pollingType?: PollingType;
  /** List of destination properties to send the filter traffic. */
  destinations?: NetworkTapPatchableParametersDestinationsItem[];
}

/** Route Policy Statement properties. */
export interface RoutePolicyStatementProperties extends AnnotationResource {
  /** Sequence to insert to/delete from existing route. */
  sequenceNumber: number;
  /** Route policy condition properties. */
  condition: StatementConditionProperties;
  /** Route policy action properties. */
  action: StatementActionProperties;
}

/** RoutePolicyProperties defines the resource properties. */
export interface RoutePolicyProperties
  extends AnnotationResource,
    RoutePolicyPatchableProperties {
  /** Arm Resource ID of Network Fabric. */
  networkFabricId: string;
  /** AddressFamilyType. This parameter decides whether the given ipv4 or ipv6 route policy. */
  addressFamilyType?: AddressFamilyType;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** Defines the port condition that needs to be matched. */
export interface AccessControlListPortCondition extends PortCondition {
  /** List of protocol flags that needs to be matched. */
  flags?: string[];
}

/** Defines the match condition that is supported to filter the traffic. */
export interface AccessControlListMatchCondition extends CommonMatchConditions {
  /** List of ether type values that needs to be matched. */
  etherTypes?: string[];
  /** List of IP fragment packets that needs to be matched. */
  fragments?: string[];
  /** List of IP Lengths that needs to be matched. */
  ipLengths?: string[];
  /** List of TTL [Time To Live] values that needs to be matched. */
  ttlValues?: string[];
  /** List of DSCP Markings that needs to be matched. */
  dscpMarkings?: string[];
  /** Defines the port condition that needs to be matched. */
  portCondition?: AccessControlListPortCondition;
}

/** Defines the match condition that is supported to filter the traffic. */
export interface NetworkTapRuleMatchCondition extends CommonMatchConditions {
  /** Encapsulation Type. */
  encapsulationType?: EncapsulationType;
  /** Defines the port condition that needs to be matched. */
  portCondition?: PortCondition;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** Common response for the state updates. */
export interface CommonPostActionResponseForStateUpdate extends ErrorResponse {
  /**
   * Gets the configuration state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
}

/** The response of the action validate configuration. */
export interface ValidateConfigurationResponse extends ErrorResponse {
  /**
   * Gets the configuration state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /** URL for the details of the response. */
  url?: string;
}

/** Common response for device updates. */
export interface CommonPostActionResponseForDeviceUpdate extends ErrorResponse {
  /**
   * Gets the configuration state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /** List of ARM Resource IDs for which the given action applied successfully. */
  successfulDevices?: string[];
  /** List of ARM Resource IDs for which the given action failed to apply. */
  failedDevices?: string[];
}

/** The Access Control Lists patch resource definition. */
export interface AccessControlListPatch extends TagsUpdate {
  /** Input method to configure Access Control List. */
  configurationType?: ConfigurationType;
  /** Access Control List file URL. */
  aclsUrl?: string;
  /** List of match configurations. */
  matchConfigurations?: AccessControlListMatchConfiguration[];
  /** List of dynamic match configurations. */
  dynamicMatchConfigurations?: CommonDynamicMatchConfiguration[];
  /** Switch configuration description. */
  annotation?: string;
}

/** The Internet Gateway patch resource definition. */
export interface InternetGatewayPatch extends TagsUpdate {
  /** ARM Resource ID of the Internet Gateway Rule. */
  internetGatewayRuleId?: string;
}

/** The Internet Gateway Rules patch resource definition. */
export interface InternetGatewayRulePatch extends TagsUpdate {}

/** The IP Community patch resource definition. */
export interface IpCommunityPatch extends TagsUpdate {
  /** List of IP Community Rules. */
  ipCommunityRules?: IpCommunityRule[];
}

/** The IP Extended Communities patch resource definition. */
export interface IpExtendedCommunityPatch extends TagsUpdate {
  /** List of IP Extended Community Rules. */
  ipExtendedCommunityRules?: IpExtendedCommunityRule[];
  /** Switch configuration description. */
  annotation?: string;
}

/** The IP Prefix patch resource definition. */
export interface IpPrefixPatch extends TagsUpdate {
  /** Switch configuration description. */
  annotation?: string;
  /** The list of IP Prefix Rules. */
  ipPrefixRules?: IpPrefixRule[];
}

/** The L2 Isolation Domain patch resource definition. */
export interface L2IsolationDomainPatch extends TagsUpdate {
  /** Switch configuration description. */
  annotation?: string;
  /** Maximum transmission unit. Default value is 1500. */
  mtu?: number;
}

/** The L3 Isolation Domain patch resource definition. */
export interface L3IsolationDomainPatch extends TagsUpdate {
  /** Switch configuration description. */
  annotation?: string;
  /** Advertise Connected Subnets. Ex: "True" | "False". */
  redistributeConnectedSubnets?: RedistributeConnectedSubnets;
  /** Advertise Static Routes. Ex: "True" | "False". */
  redistributeStaticRoutes?: RedistributeStaticRoutes;
  /** Aggregate route configurations. */
  aggregateRouteConfiguration?: AggregateRouteConfiguration;
  /** Connected Subnet RoutePolicy */
  connectedSubnetRoutePolicy?: ConnectedSubnetRoutePolicy;
}

/** The Neighbor Group Patch definition. */
export interface NeighborGroupPatch extends TagsUpdate {
  /** Switch configuration description. */
  annotation?: string;
  /** An array of destination IPv4 Addresses or IPv6 Addresses. */
  destination?: NeighborGroupDestination;
}

/** The Network Device Patch Parameters defines the patch parameters of the resource. */
export interface NetworkDevicePatchParameters extends TagsUpdate {
  /** Switch configuration description. */
  annotation?: string;
  /** The host name of the device. */
  hostName?: string;
  /** Serial number of the device. Format of serial Number - Make;Model;HardwareRevisionId;SerialNumber. */
  serialNumber?: string;
}

/** The Network Fabric Controller Patch payload definition. */
export interface NetworkFabricControllerPatch extends TagsUpdate {
  /** As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute) */
  infrastructureExpressRouteConnections?: ExpressRouteConnectionInformation[];
  /** As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is a Mandatory attribute). */
  workloadExpressRouteConnections?: ExpressRouteConnectionInformation[];
}

/** The Network Fabric resource definition. */
export interface NetworkFabricPatch extends TagsUpdate {
  /** Switch configuration description. */
  annotation?: string;
  /** Number of compute racks associated to Network Fabric. */
  rackCount?: number;
  /** Number of servers.Possible values are from 1-16. */
  serverCountPerRack?: number;
  /** IPv4Prefix for Management Network. Example: 10.1.0.0/19. */
  ipv4Prefix?: string;
  /** IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59. */
  ipv6Prefix?: string;
  /** ASN of CE devices for CE/PE connectivity. */
  fabricASN?: number;
  /** Network and credentials configuration already applied to terminal server. */
  terminalServerConfiguration?: NetworkFabricPatchablePropertiesTerminalServerConfiguration;
  /** Configuration to be used to setup the management network. */
  managementNetworkConfiguration?: ManagementNetworkConfigurationPatchableProperties;
}

/** The NetworkPacketBroker patch resource definition. */
export interface NetworkPacketBrokerPatch extends TagsUpdate {}

/** The NetworkTapRule resource definition. */
export interface NetworkTapRulePatch extends TagsUpdate {
  /** Switch configuration description. */
  annotation?: string;
  /** Input method to configure Network Tap Rule. */
  configurationType?: ConfigurationType;
  /** Network Tap Rules file URL. */
  tapRulesUrl?: string;
  /** List of match configurations. */
  matchConfigurations?: NetworkTapRuleMatchConfiguration[];
  /** List of dynamic match configurations. */
  dynamicMatchConfigurations?: CommonDynamicMatchConfiguration[];
}

/** The NetworkFabric resource definition. */
export interface NetworkTapPatch extends TagsUpdate {
  /** Switch configuration description. */
  annotation?: string;
  /** Polling type. */
  pollingType?: PollingType;
  /** List of destination properties to send the filter traffic. */
  destinations?: NetworkTapPatchableParametersDestinationsItem[];
}

/** The Route Policy patch resource definition. */
export interface RoutePolicyPatch extends TagsUpdate {
  /** Route Policy statements. */
  statements?: RoutePolicyStatementProperties[];
}

/** Update administrative state on list of resources. */
export interface UpdateAdministrativeState extends EnableDisableOnResources {
  /** Administrative state. */
  state?: EnableDisableState;
}

/** Update the administrative state on list of resources. */
export interface UpdateDeviceAdministrativeState
  extends EnableDisableOnResources {
  /** Administrative state. */
  state?: DeviceAdministrativeState;
}

/** Static Route Configuration properties. */
export interface InternalNetworkPropertiesStaticRouteConfiguration
  extends StaticRouteConfiguration,
    ExtensionEnumProperty {}

/** option A properties object */
export interface ExternalNetworkPropertiesOptionAProperties
  extends Layer3IpPrefixProperties,
    L3OptionAProperties {}

/** option A properties object */
export interface ExternalNetworkPatchPropertiesOptionAProperties
  extends Layer3IpPrefixProperties,
    L3OptionAProperties {}

/** Network and credentials configuration currently applied to terminal server. */
export interface TerminalServerConfiguration
  extends TerminalServerPatchableProperties,
    Layer3IpPrefixProperties {
  /**
   * ARM Resource ID used for the NetworkDevice.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkDeviceId?: string;
}

/** option A properties */
export interface VpnConfigurationPropertiesOptionAProperties
  extends OptionAProperties,
    Layer3IpPrefixProperties {}

/** Network and credentials configuration already applied to terminal server. */
export interface NetworkFabricPatchablePropertiesTerminalServerConfiguration
  extends TerminalServerPatchableProperties,
    Layer3IpPrefixProperties {}

/** option A properties */
export interface VpnConfigurationPatchablePropertiesOptionAProperties
  extends OptionAProperties,
    Layer3IpPrefixProperties {}

/** OptionB Layer3 Configuration properties. */
export interface OptionBLayer3Configuration extends Layer3IpPrefixProperties {
  /** ASN of PE devices for CE/PE connectivity.Example : 28 */
  peerASN?: number;
  /** VLAN for CE/PE Layer 3 connectivity.Example : 501 */
  vlanId?: number;
  /**
   * ASN of CE devices for CE/PE connectivity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fabricASN?: number;
}

/** Destination. */
export interface NetworkTapPropertiesDestinationsItem
  extends DestinationProperties {}

/** Destination. */
export interface NetworkTapPatchableParametersDestinationsItem
  extends DestinationProperties {}

/** Route policy statement condition properties. */
export interface StatementConditionProperties
  extends IpCommunityIdList,
    IpExtendedCommunityIdList {
  /** Type of the condition used. */
  type?: RoutePolicyConditionType;
  /** Arm Resource Id of IpPrefix. */
  ipPrefixId?: string;
}

/** IP Community Properties. */
export interface ActionIpCommunityProperties
  extends IpCommunityAddOperationProperties,
    IpCommunityDeleteOperationProperties,
    IpCommunitySetOperationProperties {}

/** IP Extended Community Properties. */
export interface ActionIpExtendedCommunityProperties
  extends IpExtendedCommunityAddOperationProperties,
    IpExtendedCommunityDeleteOperationProperties,
    IpExtendedCommunitySetOperationProperties {}

/** BGP configuration properties. */
export interface InternalNetworkPropertiesBgpConfiguration
  extends BgpConfiguration {}

/** The Access Control List resource definition. */
export interface AccessControlList extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Input method to configure Access Control List. */
  configurationType?: ConfigurationType;
  /** Access Control List file URL. */
  aclsUrl?: string;
  /** List of match configurations. */
  matchConfigurations?: AccessControlListMatchConfiguration[];
  /** List of dynamic match configurations. */
  dynamicMatchConfigurations?: CommonDynamicMatchConfiguration[];
  /**
   * The last synced timestamp.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSyncedTime?: Date;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** The Internet Gateway resource definition. */
export interface InternetGateway extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** ARM Resource ID of the Internet Gateway Rule. */
  internetGatewayRuleId?: string;
  /**
   * IPv4 Address of Internet Gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv4Address?: string;
  /**
   * Port number of Internet Gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly port?: number;
  /** Gateway Type of the resource. */
  typePropertiesType: GatewayType;
  /** ARM Resource ID of the Network Fabric Controller. */
  networkFabricControllerId: string;
  /**
   * Provisioning state of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The Internet Gateway Rule resource definition. */
export interface InternetGatewayRule extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Rules for the InternetGateways */
  ruleProperties: RuleProperties;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * List of Internet Gateway resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly internetGatewayIds?: string[];
}

/** The IP Community resource definition. */
export interface IpCommunity extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** List of IP Community Rules. */
  ipCommunityRules?: IpCommunityRule[];
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** The IP Extended Community resource definition. */
export interface IpExtendedCommunity extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** List of IP Extended Community Rules. */
  ipExtendedCommunityRules: IpExtendedCommunityRule[];
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** The IP Prefix resource definition. */
export interface IpPrefix extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** The list of IP Prefix Rules. */
  ipPrefixRules?: IpPrefixRule[];
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** The L2 Isolation Domain resource definition. */
export interface L2IsolationDomain extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** ARM Resource ID of the Network Fabric. */
  networkFabricId: string;
  /** Vlan Identifier of the Network Fabric. Example: 501. */
  vlanId: number;
  /** Maximum transmission unit. Default value is 1500. */
  mtu?: number;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** The L3 Isolation Domain resource definition. */
export interface L3IsolationDomain extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Advertise Connected Subnets. Ex: "True" | "False". */
  redistributeConnectedSubnets?: RedistributeConnectedSubnets;
  /** Advertise Static Routes. Ex: "True" | "False". */
  redistributeStaticRoutes?: RedistributeStaticRoutes;
  /** Aggregate route configurations. */
  aggregateRouteConfiguration?: AggregateRouteConfiguration;
  /** Connected Subnet RoutePolicy */
  connectedSubnetRoutePolicy?: ConnectedSubnetRoutePolicy;
  /** ARM Resource ID of the Network Fabric. */
  networkFabricId: string;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** Defines the Neighbor Group. */
export interface NeighborGroup extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** An array of destination IPv4 Addresses or IPv6 Addresses. */
  destination?: NeighborGroupDestination;
  /**
   * List of NetworkTap IDs where neighbor group is associated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkTapIds?: string[];
  /**
   * List of Network Tap Rule IDs where neighbor group is associated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkTapRuleIds?: string[];
  /**
   * The provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The Network Device resource definition. */
export interface NetworkDevice extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** The host name of the device. */
  hostName?: string;
  /** Serial number of the device. Format of serial Number - Make;Model;HardwareRevisionId;SerialNumber. */
  serialNumber?: string;
  /**
   * Current version of the device as defined in SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /** Network Device SKU name. */
  networkDeviceSku?: string;
  /**
   * NetworkDeviceRole is the device role: Example: CE | ToR.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkDeviceRole?: NetworkDeviceRole;
  /**
   * Reference to network rack resource id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkRackId?: string;
  /**
   * Management IPv4 Address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managementIpv4Address?: string;
  /**
   * Management IPv6 Address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managementIpv6Address?: string;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** The Network Fabric Controller resource definition. */
export interface NetworkFabricController extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute) */
  infrastructureExpressRouteConnections?: ExpressRouteConnectionInformation[];
  /** As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is a Mandatory attribute). */
  workloadExpressRouteConnections?: ExpressRouteConnectionInformation[];
  /**
   * InfrastructureServices IP ranges.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly infrastructureServices?: ControllerServices;
  /**
   * WorkloadServices IP ranges.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workloadServices?: ControllerServices;
  /** Managed Resource Group configuration properties. */
  managedResourceGroupConfiguration?: ManagedResourceGroupConfiguration;
  /**
   * The NF-ID will be an input parameter used by the NF to link and get associated with the parent NFC Service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkFabricIds?: string[];
  /**
   * A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints. This is used for the backward compatibility.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workloadManagementNetwork?: boolean;
  /** A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints. */
  isWorkloadManagementNetworkEnabled?: IsWorkloadManagementNetworkEnabled;
  /**
   * List of tenant InternetGateway resource IDs
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantInternetGatewayIds?: string[];
  /** IPv4 Network Fabric Controller Address Space. */
  ipv4AddressSpace?: string;
  /** IPv6 Network Fabric Controller Address Space. */
  ipv6AddressSpace?: string;
  /** Network Fabric Controller SKU. */
  nfcSku?: NfcSku;
  /**
   * Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC provisioning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The Network Fabric resource definition. */
export interface NetworkFabric extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric. */
  networkFabricSku: string;
  /**
   * The version of Network Fabric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fabricVersion?: string;
  /**
   * Array of router IDs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly routerIds?: string[];
  /** Azure resource ID for the NetworkFabricController the NetworkFabric belongs. */
  networkFabricControllerId: string;
  /** Number of compute racks associated to Network Fabric. */
  rackCount?: number;
  /** Number of servers.Possible values are from 1-16. */
  serverCountPerRack: number;
  /** IPv4Prefix for Management Network. Example: 10.1.0.0/19. */
  ipv4Prefix: string;
  /** IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59 */
  ipv6Prefix?: string;
  /** ASN of CE devices for CE/PE connectivity. */
  fabricASN: number;
  /** Network and credentials configuration currently applied to terminal server. */
  terminalServerConfiguration: TerminalServerConfiguration;
  /** Configuration to be used to setup the management network. */
  managementNetworkConfiguration: ManagementNetworkConfigurationProperties;
  /**
   * List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly racks?: string[];
  /**
   * List of L2 Isolation Domain resource IDs under the Network Fabric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly l2IsolationDomains?: string[];
  /**
   * List of L3 Isolation Domain resource IDs under the Network Fabric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly l3IsolationDomains?: string[];
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC provisioning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** The NetworkPacketBroker resource definition. */
export interface NetworkPacketBroker extends TrackedResource {
  /** ARM resource ID of the Network Fabric. */
  networkFabricId: string;
  /**
   * List of ARM resource IDs of Network Devices [NPB].
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkDeviceIds?: string[];
  /**
   * List of network interfaces across NPB devices that are used to mirror source traffic.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceInterfaceIds?: string[];
  /**
   * List of network Tap IDs configured on NPB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkTapIds?: string[];
  /**
   * List of neighbor group IDs configured on NPB.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly neighborGroupIds?: string[];
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The Network Rack resource definition. */
export interface NetworkRack extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Network Rack SKU name. */
  networkRackType?: NetworkRackType;
  /** ARM resource ID of the Network Fabric. */
  networkFabricId: string;
  /**
   * List of network device ARM resource IDs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkDevices?: string[];
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The NetworkTapRule resource definition. */
export interface NetworkTapRule extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Input method to configure Network Tap Rule. */
  configurationType?: ConfigurationType;
  /** Network Tap Rules file URL. */
  tapRulesUrl?: string;
  /** List of match configurations. */
  matchConfigurations?: NetworkTapRuleMatchConfiguration[];
  /** List of dynamic match configurations. */
  dynamicMatchConfigurations?: CommonDynamicMatchConfiguration[];
  /**
   * The ARM resource Id of the NetworkTap.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkTapId?: string;
  /** Polling interval in seconds. */
  pollingIntervalInSeconds?: PollingIntervalInSeconds;
  /**
   * The last sync timestamp.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSyncedTime?: Date;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** The Network Tap resource definition. */
export interface NetworkTap extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** ARM resource ID of the Network Packet Broker. */
  networkPacketBrokerId: string;
  /**
   * Source Tap Rule Id. ARM Resource ID of the Network Tap Rule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceTapRuleId?: string;
  /** List of destinations to send the filter traffic. */
  destinations: NetworkTapPropertiesDestinationsItem[];
  /** Polling type. */
  pollingType?: PollingType;
  /**
   * Gets the configurations state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of Network Tap provisioning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource. Example -Enabled/Disabled
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** The RoutePolicy resource definition. */
export interface RoutePolicy extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Route Policy statements. */
  statements?: RoutePolicyStatementProperties[];
  /** Arm Resource ID of Network Fabric. */
  networkFabricId: string;
  /** AddressFamilyType. This parameter decides whether the given ipv4 or ipv6 route policy. */
  addressFamilyType?: AddressFamilyType;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** Defines the Internal Network resource. */
export interface InternalNetwork extends ProxyResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Maximum transmission unit. Default value is 1500. */
  mtu?: number;
  /** List of Connected IPv4 Subnets. */
  connectedIPv4Subnets?: ConnectedSubnet[];
  /** List of connected IPv6 Subnets. */
  connectedIPv6Subnets?: ConnectedSubnet[];
  /** ARM Resource ID of the RoutePolicy. This is used for the backward compatibility. */
  importRoutePolicyId?: string;
  /** ARM Resource ID of the RoutePolicy. This is used for the backward compatibility. */
  exportRoutePolicyId?: string;
  /** Import Route Policy either IPv4 or IPv6. */
  importRoutePolicy?: ImportRoutePolicy;
  /** Export Route Policy either IPv4 or IPv6. */
  exportRoutePolicy?: ExportRoutePolicy;
  /** Ingress Acl. ARM resource ID of Access Control Lists. */
  ingressAclId?: string;
  /** Egress Acl. ARM resource ID of Access Control Lists. */
  egressAclId?: string;
  /** To check whether monitoring of internal network is enabled or not. */
  isMonitoringEnabled?: IsMonitoringEnabled;
  /** Extension. Example: NoExtension | NPB. */
  extension?: Extension;
  /** Vlan identifier. Example: 1001. */
  vlanId: number;
  /** BGP configuration properties. */
  bgpConfiguration?: InternalNetworkPropertiesBgpConfiguration;
  /** Static Route Configuration properties. */
  staticRouteConfiguration?: InternalNetworkPropertiesStaticRouteConfiguration;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** Defines the External Network resource. */
export interface ExternalNetwork extends ProxyResource {
  /** Switch configuration description. */
  annotation?: string;
  /** ARM Resource ID of the RoutePolicy. This is used for the backward compatibility. */
  importRoutePolicyId?: string;
  /** ARM Resource ID of the RoutePolicy. This is used for the backward compatibility. */
  exportRoutePolicyId?: string;
  /** Import Route Policy either IPv4 or IPv6. */
  importRoutePolicy?: ImportRoutePolicy;
  /** Export Route Policy either IPv4 or IPv6. */
  exportRoutePolicy?: ExportRoutePolicy;
  /**
   * Gets the networkToNetworkInterconnectId of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkToNetworkInterconnectId?: string;
  /** Peering option list. */
  peeringOption: PeeringOption;
  /** option B properties object */
  optionBProperties?: L3OptionBProperties;
  /** option A properties object */
  optionAProperties?: ExternalNetworkPropertiesOptionAProperties;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** The NetworkDeviceSku resource definition. */
export interface NetworkDeviceSku extends ProxyResource {
  /** Model of the network device. */
  model: string;
  /** Manufacturer of the network device. */
  manufacturer?: string;
  /** List of supported version details of network device. */
  supportedVersions?: SupportedVersionProperties[];
  /** Available roles for the network device. */
  supportedRoleTypes?: NetworkDeviceRoleName[];
  /** List of network device interfaces. */
  interfaces?: DeviceInterfaceProperties[];
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Defines the NetworkInterface resource. */
export interface NetworkInterface extends ProxyResource {
  /** Switch configuration description. */
  annotation?: string;
  /**
   * Physical Identifier of the network interface.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly physicalIdentifier?: string;
  /**
   * The ARM resource id of the interface or compute server its connected to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectedTo?: string;
  /**
   * The Interface Type. Example: Management/Data
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly interfaceType?: InterfaceType;
  /**
   * IPv4Address of the interface.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv4Address?: string;
  /**
   * IPv6Address of the interface.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv6Address?: string;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** The Network Fabric SKU resource definition. */
export interface NetworkFabricSku extends ProxyResource {
  /**
   * Type of Network Fabric SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesType?: FabricSkuType;
  /** Maximum number of compute racks available for this Network Fabric SKU. The value of max count racks is 4 for 4 rack SKU and 8 for 8 rack SKU. */
  maxComputeRacks?: number;
  /** Maximum number of servers available for this Network Fabric SKU. */
  maximumServerCount?: number;
  /**
   * List of supported Network Fabric SKU versions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly supportedVersions?: string[];
  /**
   * URL providing detailed configuration of the fabric SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: string;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The Network To Network Interconnect resource definition. */
export interface NetworkToNetworkInterconnect extends ProxyResource {
  /** Type of NNI used. Example: CE | NPB */
  nniType?: NniType;
  /** Configuration to use NNI for Infrastructure Management. Example: True/False. */
  isManagementType?: IsManagementType;
  /** Based on this option layer3 parameters are mandatory. Example: True/False */
  useOptionB: BooleanEnumProperty;
  /** Common properties for Layer2 Configuration. */
  layer2Configuration?: Layer2Configuration;
  /** Common properties for Layer3Configuration. */
  optionBLayer3Configuration?: NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration;
  /** NPB Static Route Configuration properties. */
  npbStaticRouteConfiguration?: NpbStaticRouteConfiguration;
  /** Import Route Policy configuration. */
  importRoutePolicy?: ImportRoutePolicyInformation;
  /** Export Route Policy configuration. */
  exportRoutePolicy?: ExportRoutePolicyInformation;
  /** Egress Acl. ARM resource ID of Access Control Lists. */
  egressAclId?: string;
  /** Ingress Acl. ARM resource ID of Access Control Lists. */
  ingressAclId?: string;
  /**
   * Configuration state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly configurationState?: ConfigurationState;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Administrative state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: AdministrativeState;
}

/** The Network To Network Interconnect resource patch definition. */
export interface NetworkToNetworkInterconnectPatch extends ProxyResource {
  /** Common properties for Layer2Configuration. */
  layer2Configuration?: Layer2Configuration;
  /** Common properties for Layer3Configuration. */
  optionBLayer3Configuration?: OptionBLayer3Configuration;
  /** NPB Static Route Configuration properties. */
  npbStaticRouteConfiguration?: NpbStaticRouteConfiguration;
  /** Import Route Policy information. */
  importRoutePolicy?: ImportRoutePolicyInformation;
  /** Export Route Policy information */
  exportRoutePolicy?: ExportRoutePolicyInformation;
  /** Egress Acl. ARM resource ID of Access Control Lists. */
  egressAclId?: string;
  /** Ingress Acl. ARM resource ID of Access Control Lists. */
  ingressAclId?: string;
}

/** Common properties for Layer3Configuration. */
export interface NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration
  extends OptionBLayer3Configuration {}

/** Defines headers for AccessControlLists_create operation. */
export interface AccessControlListsCreateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for AccessControlLists_update operation. */
export interface AccessControlListsUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for AccessControlLists_delete operation. */
export interface AccessControlListsDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for AccessControlLists_updateAdministrativeState operation. */
export interface AccessControlListsUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for AccessControlLists_resync operation. */
export interface AccessControlListsResyncHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for AccessControlLists_validateConfiguration operation. */
export interface AccessControlListsValidateConfigurationHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for InternetGateways_create operation. */
export interface InternetGatewaysCreateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for InternetGateways_update operation. */
export interface InternetGatewaysUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for InternetGatewayRules_create operation. */
export interface InternetGatewayRulesCreateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for InternetGatewayRules_update operation. */
export interface InternetGatewayRulesUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for InternetGatewayRules_delete operation. */
export interface InternetGatewayRulesDeleteHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for IpCommunities_create operation. */
export interface IpCommunitiesCreateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for IpCommunities_update operation. */
export interface IpCommunitiesUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for IpCommunities_delete operation. */
export interface IpCommunitiesDeleteHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for IpExtendedCommunities_create operation. */
export interface IpExtendedCommunitiesCreateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for IpExtendedCommunities_update operation. */
export interface IpExtendedCommunitiesUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for IpExtendedCommunities_delete operation. */
export interface IpExtendedCommunitiesDeleteHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for IpPrefixes_create operation. */
export interface IpPrefixesCreateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for IpPrefixes_update operation. */
export interface IpPrefixesUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for IpPrefixes_delete operation. */
export interface IpPrefixesDeleteHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for L2IsolationDomains_update operation. */
export interface L2IsolationDomainsUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L2IsolationDomains_updateAdministrativeState operation. */
export interface L2IsolationDomainsUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L2IsolationDomains_validateConfiguration operation. */
export interface L2IsolationDomainsValidateConfigurationHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L2IsolationDomains_commitConfiguration operation. */
export interface L2IsolationDomainsCommitConfigurationHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L3IsolationDomains_update operation. */
export interface L3IsolationDomainsUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L3IsolationDomains_updateAdministrativeState operation. */
export interface L3IsolationDomainsUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L3IsolationDomains_validateConfiguration operation. */
export interface L3IsolationDomainsValidateConfigurationHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L3IsolationDomains_commitConfiguration operation. */
export interface L3IsolationDomainsCommitConfigurationHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for InternalNetworks_update operation. */
export interface InternalNetworksUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for InternalNetworks_updateAdministrativeState operation. */
export interface InternalNetworksUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for InternalNetworks_updateBgpAdministrativeState operation. */
export interface InternalNetworksUpdateBgpAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for InternalNetworks_updateStaticRouteBfdAdministrativeState operation. */
export interface InternalNetworksUpdateStaticRouteBfdAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for ExternalNetworks_update operation. */
export interface ExternalNetworksUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for ExternalNetworks_updateAdministrativeState operation. */
export interface ExternalNetworksUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for ExternalNetworks_updateStaticRouteBfdAdministrativeState operation. */
export interface ExternalNetworksUpdateStaticRouteBfdAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NeighborGroups_update operation. */
export interface NeighborGroupsUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkDevices_update operation. */
export interface NetworkDevicesUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkDevices_reboot operation. */
export interface NetworkDevicesRebootHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkDevices_refreshConfiguration operation. */
export interface NetworkDevicesRefreshConfigurationHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkDevices_updateAdministrativeState operation. */
export interface NetworkDevicesUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkDevices_upgrade operation. */
export interface NetworkDevicesUpgradeHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkInterfaces_update operation. */
export interface NetworkInterfacesUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkInterfaces_updateAdministrativeState operation. */
export interface NetworkInterfacesUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabricControllers_update operation. */
export interface NetworkFabricControllersUpdateHeaders {
  /** Tracking URL for long running operation. */
  location?: string;
}

/** Defines headers for NetworkFabricControllers_delete operation. */
export interface NetworkFabricControllersDeleteHeaders {
  /** Tracking URL for long running operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_create operation. */
export interface NetworkFabricsCreateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for NetworkFabrics_update operation. */
export interface NetworkFabricsUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_delete operation. */
export interface NetworkFabricsDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_provision operation. */
export interface NetworkFabricsProvisionHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_deprovision operation. */
export interface NetworkFabricsDeprovisionHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_upgrade operation. */
export interface NetworkFabricsUpgradeHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_refreshConfiguration operation. */
export interface NetworkFabricsRefreshConfigurationHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_updateWorkloadManagementBfdConfiguration operation. */
export interface NetworkFabricsUpdateWorkloadManagementBfdConfigurationHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_updateInfraManagementBfdConfiguration operation. */
export interface NetworkFabricsUpdateInfraManagementBfdConfigurationHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_validateConfiguration operation. */
export interface NetworkFabricsValidateConfigurationHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_getTopology operation. */
export interface NetworkFabricsGetTopologyHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_commitConfiguration operation. */
export interface NetworkFabricsCommitConfigurationHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkToNetworkInterconnects_update operation. */
export interface NetworkToNetworkInterconnectsUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkToNetworkInterconnects_updateNpbStaticRouteBfdAdministrativeState operation. */
export interface NetworkToNetworkInterconnectsUpdateNpbStaticRouteBfdAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkToNetworkInterconnects_updateAdministrativeState operation. */
export interface NetworkToNetworkInterconnectsUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkPacketBrokers_update operation. */
export interface NetworkPacketBrokersUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkRacks_update operation. */
export interface NetworkRacksUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkTapRules_create operation. */
export interface NetworkTapRulesCreateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for NetworkTapRules_update operation. */
export interface NetworkTapRulesUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkTapRules_delete operation. */
export interface NetworkTapRulesDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkTapRules_updateAdministrativeState operation. */
export interface NetworkTapRulesUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkTapRules_resync operation. */
export interface NetworkTapRulesResyncHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkTapRules_validateConfiguration operation. */
export interface NetworkTapRulesValidateConfigurationHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkTaps_update operation. */
export interface NetworkTapsUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkTaps_updateAdministrativeState operation. */
export interface NetworkTapsUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkTaps_resync operation. */
export interface NetworkTapsResyncHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for RoutePolicies_update operation. */
export interface RoutePoliciesUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for RoutePolicies_updateAdministrativeState operation. */
export interface RoutePoliciesUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for RoutePolicies_validateConfiguration operation. */
export interface RoutePoliciesValidateConfigurationHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for RoutePolicies_commitConfiguration operation. */
export interface RoutePoliciesCommitConfigurationHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Known values of {@link ConfigurationState} that the service accepts. */
export enum KnownConfigurationState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Rejected */
  Rejected = "Rejected",
  /** Accepted */
  Accepted = "Accepted",
  /** Provisioned */
  Provisioned = "Provisioned",
  /** ErrorProvisioning */
  ErrorProvisioning = "ErrorProvisioning",
  /** Deprovisioning */
  Deprovisioning = "Deprovisioning",
  /** Deprovisioned */
  Deprovisioned = "Deprovisioned",
  /** ErrorDeprovisioning */
  ErrorDeprovisioning = "ErrorDeprovisioning",
  /** DeferredControl */
  DeferredControl = "DeferredControl"
}

/**
 * Defines values for ConfigurationState. \
 * {@link KnownConfigurationState} can be used interchangeably with ConfigurationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Rejected** \
 * **Accepted** \
 * **Provisioned** \
 * **ErrorProvisioning** \
 * **Deprovisioning** \
 * **Deprovisioned** \
 * **ErrorDeprovisioning** \
 * **DeferredControl**
 */
export type ConfigurationState = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Accepted */
  Accepted = "Accepted",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Succeeded** \
 * **Updating** \
 * **Deleting** \
 * **Failed** \
 * **Canceled**
 */
export type ProvisioningState = string;

/** Known values of {@link AdministrativeState} that the service accepts. */
export enum KnownAdministrativeState {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
  /** MAT */
  MAT = "MAT",
  /** RMA */
  RMA = "RMA"
}

/**
 * Defines values for AdministrativeState. \
 * {@link KnownAdministrativeState} can be used interchangeably with AdministrativeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled** \
 * **MAT** \
 * **RMA**
 */
export type AdministrativeState = string;

/** Known values of {@link ConfigurationType} that the service accepts. */
export enum KnownConfigurationType {
  /** File */
  File = "File",
  /** Inline */
  Inline = "Inline"
}

/**
 * Defines values for ConfigurationType. \
 * {@link KnownConfigurationType} can be used interchangeably with ConfigurationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **File** \
 * **Inline**
 */
export type ConfigurationType = string;

/** Known values of {@link IPAddressType} that the service accepts. */
export enum KnownIPAddressType {
  /** IPv4 */
  IPv4 = "IPv4",
  /** IPv6 */
  IPv6 = "IPv6"
}

/**
 * Defines values for IPAddressType. \
 * {@link KnownIPAddressType} can be used interchangeably with IPAddressType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPv4** \
 * **IPv6**
 */
export type IPAddressType = string;

/** Known values of {@link PortType} that the service accepts. */
export enum KnownPortType {
  /** SourcePort */
  SourcePort = "SourcePort",
  /** DestinationPort */
  DestinationPort = "DestinationPort"
}

/**
 * Defines values for PortType. \
 * {@link KnownPortType} can be used interchangeably with PortType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SourcePort** \
 * **DestinationPort**
 */
export type PortType = string;

/** Known values of {@link Layer4Protocol} that the service accepts. */
export enum KnownLayer4Protocol {
  /** TCP */
  TCP = "TCP",
  /** UDP */
  UDP = "UDP"
}

/**
 * Defines values for Layer4Protocol. \
 * {@link KnownLayer4Protocol} can be used interchangeably with Layer4Protocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TCP** \
 * **UDP**
 */
export type Layer4Protocol = string;

/** Known values of {@link SourceDestinationType} that the service accepts. */
export enum KnownSourceDestinationType {
  /** SourceIP */
  SourceIP = "SourceIP",
  /** DestinationIP */
  DestinationIP = "DestinationIP"
}

/**
 * Defines values for SourceDestinationType. \
 * {@link KnownSourceDestinationType} can be used interchangeably with SourceDestinationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SourceIP** \
 * **DestinationIP**
 */
export type SourceDestinationType = string;

/** Known values of {@link PrefixType} that the service accepts. */
export enum KnownPrefixType {
  /** Prefix */
  Prefix = "Prefix",
  /** LongestPrefix */
  LongestPrefix = "LongestPrefix"
}

/**
 * Defines values for PrefixType. \
 * {@link KnownPrefixType} can be used interchangeably with PrefixType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Prefix** \
 * **LongestPrefix**
 */
export type PrefixType = string;

/** Known values of {@link AclActionType} that the service accepts. */
export enum KnownAclActionType {
  /** Drop */
  Drop = "Drop",
  /** Count */
  Count = "Count",
  /** Log */
  Log = "Log"
}

/**
 * Defines values for AclActionType. \
 * {@link KnownAclActionType} can be used interchangeably with AclActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Drop** \
 * **Count** \
 * **Log**
 */
export type AclActionType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link EnableDisableState} that the service accepts. */
export enum KnownEnableDisableState {
  /** Enable */
  Enable = "Enable",
  /** Disable */
  Disable = "Disable"
}

/**
 * Defines values for EnableDisableState. \
 * {@link KnownEnableDisableState} can be used interchangeably with EnableDisableState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enable** \
 * **Disable**
 */
export type EnableDisableState = string;

/** Known values of {@link GatewayType} that the service accepts. */
export enum KnownGatewayType {
  /** Infrastructure */
  Infrastructure = "Infrastructure",
  /** Workload */
  Workload = "Workload"
}

/**
 * Defines values for GatewayType. \
 * {@link KnownGatewayType} can be used interchangeably with GatewayType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Infrastructure** \
 * **Workload**
 */
export type GatewayType = string;

/** Known values of {@link Action} that the service accepts. */
export enum KnownAction {
  /** Allow */
  Allow = "Allow",
  /** Deny */
  Deny = "Deny"
}

/**
 * Defines values for Action. \
 * {@link KnownAction} can be used interchangeably with Action,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow** \
 * **Deny**
 */
export type Action = string;

/** Known values of {@link CommunityActionTypes} that the service accepts. */
export enum KnownCommunityActionTypes {
  /** Permit */
  Permit = "Permit",
  /** Deny */
  Deny = "Deny"
}

/**
 * Defines values for CommunityActionTypes. \
 * {@link KnownCommunityActionTypes} can be used interchangeably with CommunityActionTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Permit** \
 * **Deny**
 */
export type CommunityActionTypes = string;

/** Known values of {@link WellKnownCommunities} that the service accepts. */
export enum KnownWellKnownCommunities {
  /** Internet */
  Internet = "Internet",
  /** LocalAS */
  LocalAS = "LocalAS",
  /** NoAdvertise */
  NoAdvertise = "NoAdvertise",
  /** NoExport */
  NoExport = "NoExport",
  /** GShut */
  GShut = "GShut"
}

/**
 * Defines values for WellKnownCommunities. \
 * {@link KnownWellKnownCommunities} can be used interchangeably with WellKnownCommunities,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internet** \
 * **LocalAS** \
 * **NoAdvertise** \
 * **NoExport** \
 * **GShut**
 */
export type WellKnownCommunities = string;

/** Known values of {@link Condition} that the service accepts. */
export enum KnownCondition {
  /** EqualTo */
  EqualTo = "EqualTo",
  /** GreaterThanOrEqualTo */
  GreaterThanOrEqualTo = "GreaterThanOrEqualTo",
  /** LesserThanOrEqualTo */
  LesserThanOrEqualTo = "LesserThanOrEqualTo",
  /** Range */
  Range = "Range"
}

/**
 * Defines values for Condition. \
 * {@link KnownCondition} can be used interchangeably with Condition,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EqualTo** \
 * **GreaterThanOrEqualTo** \
 * **LesserThanOrEqualTo** \
 * **Range**
 */
export type Condition = string;

/** Known values of {@link RedistributeConnectedSubnets} that the service accepts. */
export enum KnownRedistributeConnectedSubnets {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for RedistributeConnectedSubnets. \
 * {@link KnownRedistributeConnectedSubnets} can be used interchangeably with RedistributeConnectedSubnets,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type RedistributeConnectedSubnets = string;

/** Known values of {@link RedistributeStaticRoutes} that the service accepts. */
export enum KnownRedistributeStaticRoutes {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for RedistributeStaticRoutes. \
 * {@link KnownRedistributeStaticRoutes} can be used interchangeably with RedistributeStaticRoutes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type RedistributeStaticRoutes = string;

/** Known values of {@link BfdAdministrativeState} that the service accepts. */
export enum KnownBfdAdministrativeState {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled",
  /** MAT */
  MAT = "MAT",
  /** RMA */
  RMA = "RMA"
}

/**
 * Defines values for BfdAdministrativeState. \
 * {@link KnownBfdAdministrativeState} can be used interchangeably with BfdAdministrativeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled** \
 * **MAT** \
 * **RMA**
 */
export type BfdAdministrativeState = string;

/** Known values of {@link BooleanEnumProperty} that the service accepts. */
export enum KnownBooleanEnumProperty {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for BooleanEnumProperty. \
 * {@link KnownBooleanEnumProperty} can be used interchangeably with BooleanEnumProperty,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type BooleanEnumProperty = string;

/** Known values of {@link AllowASOverride} that the service accepts. */
export enum KnownAllowASOverride {
  /** Enable */
  Enable = "Enable",
  /** Disable */
  Disable = "Disable"
}

/**
 * Defines values for AllowASOverride. \
 * {@link KnownAllowASOverride} can be used interchangeably with AllowASOverride,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enable** \
 * **Disable**
 */
export type AllowASOverride = string;

/** Known values of {@link Extension} that the service accepts. */
export enum KnownExtension {
  /** NoExtension */
  NoExtension = "NoExtension",
  /** NPB */
  NPB = "NPB"
}

/**
 * Defines values for Extension. \
 * {@link KnownExtension} can be used interchangeably with Extension,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NoExtension** \
 * **NPB**
 */
export type Extension = string;

/** Known values of {@link IsMonitoringEnabled} that the service accepts. */
export enum KnownIsMonitoringEnabled {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for IsMonitoringEnabled. \
 * {@link KnownIsMonitoringEnabled} can be used interchangeably with IsMonitoringEnabled,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type IsMonitoringEnabled = string;

/** Known values of {@link PeeringOption} that the service accepts. */
export enum KnownPeeringOption {
  /** OptionA */
  OptionA = "OptionA",
  /** OptionB */
  OptionB = "OptionB"
}

/**
 * Defines values for PeeringOption. \
 * {@link KnownPeeringOption} can be used interchangeably with PeeringOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OptionA** \
 * **OptionB**
 */
export type PeeringOption = string;

/** Known values of {@link NetworkDeviceRoleName} that the service accepts. */
export enum KnownNetworkDeviceRoleName {
  /** CE */
  CE = "CE",
  /** ToR */
  ToR = "ToR",
  /** NPB */
  NPB = "NPB",
  /** TS */
  TS = "TS",
  /** Management */
  Management = "Management"
}

/**
 * Defines values for NetworkDeviceRoleName. \
 * {@link KnownNetworkDeviceRoleName} can be used interchangeably with NetworkDeviceRoleName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CE** \
 * **ToR** \
 * **NPB** \
 * **TS** \
 * **Management**
 */
export type NetworkDeviceRoleName = string;

/** Known values of {@link NetworkDeviceRole} that the service accepts. */
export enum KnownNetworkDeviceRole {
  /** CE */
  CE = "CE",
  /** ToR */
  ToR = "ToR",
  /** NPB */
  NPB = "NPB",
  /** TS */
  TS = "TS",
  /** Management */
  Management = "Management"
}

/**
 * Defines values for NetworkDeviceRole. \
 * {@link KnownNetworkDeviceRole} can be used interchangeably with NetworkDeviceRole,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CE** \
 * **ToR** \
 * **NPB** \
 * **TS** \
 * **Management**
 */
export type NetworkDeviceRole = string;

/** Known values of {@link InterfaceType} that the service accepts. */
export enum KnownInterfaceType {
  /** Management */
  Management = "Management",
  /** Data */
  Data = "Data"
}

/**
 * Defines values for InterfaceType. \
 * {@link KnownInterfaceType} can be used interchangeably with InterfaceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Management** \
 * **Data**
 */
export type InterfaceType = string;

/** Known values of {@link RebootType} that the service accepts. */
export enum KnownRebootType {
  /** GracefulRebootWithZTP */
  GracefulRebootWithZTP = "GracefulRebootWithZTP",
  /** GracefulRebootWithoutZTP */
  GracefulRebootWithoutZTP = "GracefulRebootWithoutZTP",
  /** UngracefulRebootWithZTP */
  UngracefulRebootWithZTP = "UngracefulRebootWithZTP",
  /** UngracefulRebootWithoutZTP */
  UngracefulRebootWithoutZTP = "UngracefulRebootWithoutZTP"
}

/**
 * Defines values for RebootType. \
 * {@link KnownRebootType} can be used interchangeably with RebootType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **GracefulRebootWithZTP** \
 * **GracefulRebootWithoutZTP** \
 * **UngracefulRebootWithZTP** \
 * **UngracefulRebootWithoutZTP**
 */
export type RebootType = string;

/** Known values of {@link DeviceAdministrativeState} that the service accepts. */
export enum KnownDeviceAdministrativeState {
  /** RMA */
  RMA = "RMA",
  /** Resync */
  Resync = "Resync",
  /** GracefulQuarantine */
  GracefulQuarantine = "GracefulQuarantine",
  /** Quarantine */
  Quarantine = "Quarantine"
}

/**
 * Defines values for DeviceAdministrativeState. \
 * {@link KnownDeviceAdministrativeState} can be used interchangeably with DeviceAdministrativeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RMA** \
 * **Resync** \
 * **GracefulQuarantine** \
 * **Quarantine**
 */
export type DeviceAdministrativeState = string;

/** Known values of {@link IsWorkloadManagementNetworkEnabled} that the service accepts. */
export enum KnownIsWorkloadManagementNetworkEnabled {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for IsWorkloadManagementNetworkEnabled. \
 * {@link KnownIsWorkloadManagementNetworkEnabled} can be used interchangeably with IsWorkloadManagementNetworkEnabled,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type IsWorkloadManagementNetworkEnabled = string;

/** Known values of {@link NfcSku} that the service accepts. */
export enum KnownNfcSku {
  /** Basic */
  Basic = "Basic",
  /** Standard */
  Standard = "Standard",
  /** HighPerformance */
  HighPerformance = "HighPerformance"
}

/**
 * Defines values for NfcSku. \
 * {@link KnownNfcSku} can be used interchangeably with NfcSku,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Standard** \
 * **HighPerformance**
 */
export type NfcSku = string;

/** Known values of {@link FabricSkuType} that the service accepts. */
export enum KnownFabricSkuType {
  /** SingleRack */
  SingleRack = "SingleRack",
  /** MultiRack */
  MultiRack = "MultiRack"
}

/**
 * Defines values for FabricSkuType. \
 * {@link KnownFabricSkuType} can be used interchangeably with FabricSkuType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SingleRack** \
 * **MultiRack**
 */
export type FabricSkuType = string;

/** Known values of {@link ValidateAction} that the service accepts. */
export enum KnownValidateAction {
  /** Cabling */
  Cabling = "Cabling",
  /** Configuration */
  Configuration = "Configuration",
  /** Connectivity */
  Connectivity = "Connectivity"
}

/**
 * Defines values for ValidateAction. \
 * {@link KnownValidateAction} can be used interchangeably with ValidateAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cabling** \
 * **Configuration** \
 * **Connectivity**
 */
export type ValidateAction = string;

/** Known values of {@link NniType} that the service accepts. */
export enum KnownNniType {
  /** CE */
  CE = "CE",
  /** NPB */
  NPB = "NPB"
}

/**
 * Defines values for NniType. \
 * {@link KnownNniType} can be used interchangeably with NniType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CE** \
 * **NPB**
 */
export type NniType = string;

/** Known values of {@link IsManagementType} that the service accepts. */
export enum KnownIsManagementType {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for IsManagementType. \
 * {@link KnownIsManagementType} can be used interchangeably with IsManagementType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type IsManagementType = string;

/** Known values of {@link NetworkRackType} that the service accepts. */
export enum KnownNetworkRackType {
  /** Aggregate */
  Aggregate = "Aggregate",
  /** Compute */
  Compute = "Compute",
  /** Combined */
  Combined = "Combined"
}

/**
 * Defines values for NetworkRackType. \
 * {@link KnownNetworkRackType} can be used interchangeably with NetworkRackType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Aggregate** \
 * **Compute** \
 * **Combined**
 */
export type NetworkRackType = string;

/** Known values of {@link PollingIntervalInSeconds} that the service accepts. */
export enum KnownPollingIntervalInSeconds {
  /** Thirty */
  Thirty = 30,
  /** Sixty */
  Sixty = 60,
  /** Ninety */
  Ninety = 90,
  /** OneHundredTwenty */
  OneHundredTwenty = 120
}

/**
 * Defines values for PollingIntervalInSeconds. \
 * {@link KnownPollingIntervalInSeconds} can be used interchangeably with PollingIntervalInSeconds,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **30** \
 * **60** \
 * **90** \
 * **120**
 */
export type PollingIntervalInSeconds = number;

/** Known values of {@link EncapsulationType} that the service accepts. */
export enum KnownEncapsulationType {
  /** None */
  None = "None",
  /** GTPv1 */
  GTPv1 = "GTPv1"
}

/**
 * Defines values for EncapsulationType. \
 * {@link KnownEncapsulationType} can be used interchangeably with EncapsulationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **GTPv1**
 */
export type EncapsulationType = string;

/** Known values of {@link TapRuleActionType} that the service accepts. */
export enum KnownTapRuleActionType {
  /** Drop */
  Drop = "Drop",
  /** Count */
  Count = "Count",
  /** Log */
  Log = "Log",
  /** Replicate */
  Replicate = "Replicate",
  /** Goto */
  Goto = "Goto",
  /** Redirect */
  Redirect = "Redirect",
  /** Mirror */
  Mirror = "Mirror"
}

/**
 * Defines values for TapRuleActionType. \
 * {@link KnownTapRuleActionType} can be used interchangeably with TapRuleActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Drop** \
 * **Count** \
 * **Log** \
 * **Replicate** \
 * **Goto** \
 * **Redirect** \
 * **Mirror**
 */
export type TapRuleActionType = string;

/** Known values of {@link DestinationType} that the service accepts. */
export enum KnownDestinationType {
  /** IsolationDomain */
  IsolationDomain = "IsolationDomain",
  /** Direct */
  Direct = "Direct"
}

/**
 * Defines values for DestinationType. \
 * {@link KnownDestinationType} can be used interchangeably with DestinationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IsolationDomain** \
 * **Direct**
 */
export type DestinationType = string;

/** Known values of {@link Encapsulation} that the service accepts. */
export enum KnownEncapsulation {
  /** None */
  None = "None",
  /** GRE */
  GRE = "GRE"
}

/**
 * Defines values for Encapsulation. \
 * {@link KnownEncapsulation} can be used interchangeably with Encapsulation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **GRE**
 */
export type Encapsulation = string;

/** Known values of {@link PollingType} that the service accepts. */
export enum KnownPollingType {
  /** Pull */
  Pull = "Pull",
  /** Push */
  Push = "Push"
}

/**
 * Defines values for PollingType. \
 * {@link KnownPollingType} can be used interchangeably with PollingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pull** \
 * **Push**
 */
export type PollingType = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link AddressFamilyType} that the service accepts. */
export enum KnownAddressFamilyType {
  /** IPv4 */
  IPv4 = "IPv4",
  /** IPv6 */
  IPv6 = "IPv6"
}

/**
 * Defines values for AddressFamilyType. \
 * {@link KnownAddressFamilyType} can be used interchangeably with AddressFamilyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPv4** \
 * **IPv6**
 */
export type AddressFamilyType = string;

/** Known values of {@link RoutePolicyConditionType} that the service accepts. */
export enum KnownRoutePolicyConditionType {
  /** Or */
  Or = "Or",
  /** And */
  And = "And"
}

/**
 * Defines values for RoutePolicyConditionType. \
 * {@link KnownRoutePolicyConditionType} can be used interchangeably with RoutePolicyConditionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Or** \
 * **And**
 */
export type RoutePolicyConditionType = string;

/** Known values of {@link RoutePolicyActionType} that the service accepts. */
export enum KnownRoutePolicyActionType {
  /** Permit */
  Permit = "Permit",
  /** Deny */
  Deny = "Deny",
  /** Continue */
  Continue = "Continue"
}

/**
 * Defines values for RoutePolicyActionType. \
 * {@link KnownRoutePolicyActionType} can be used interchangeably with RoutePolicyActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Permit** \
 * **Deny** \
 * **Continue**
 */
export type RoutePolicyActionType = string;

/** Optional parameters. */
export interface AccessControlListsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type AccessControlListsCreateResponse = AccessControlList;

/** Optional parameters. */
export interface AccessControlListsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AccessControlListsGetResponse = AccessControlList;

/** Optional parameters. */
export interface AccessControlListsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type AccessControlListsUpdateResponse = AccessControlList;

/** Optional parameters. */
export interface AccessControlListsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type AccessControlListsDeleteResponse = AccessControlListsDeleteHeaders;

/** Optional parameters. */
export interface AccessControlListsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type AccessControlListsListByResourceGroupResponse = AccessControlListsListResult;

/** Optional parameters. */
export interface AccessControlListsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type AccessControlListsListBySubscriptionResponse = AccessControlListsListResult;

/** Optional parameters. */
export interface AccessControlListsUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type AccessControlListsUpdateAdministrativeStateResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface AccessControlListsResyncOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the resync operation. */
export type AccessControlListsResyncResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface AccessControlListsValidateConfigurationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validateConfiguration operation. */
export type AccessControlListsValidateConfigurationResponse = ValidateConfigurationResponse;

/** Optional parameters. */
export interface AccessControlListsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type AccessControlListsListByResourceGroupNextResponse = AccessControlListsListResult;

/** Optional parameters. */
export interface AccessControlListsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type AccessControlListsListBySubscriptionNextResponse = AccessControlListsListResult;

/** Optional parameters. */
export interface InternetGatewaysCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type InternetGatewaysCreateResponse = InternetGateway;

/** Optional parameters. */
export interface InternetGatewaysGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type InternetGatewaysGetResponse = InternetGateway;

/** Optional parameters. */
export interface InternetGatewaysUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type InternetGatewaysUpdateResponse = InternetGateway;

/** Optional parameters. */
export interface InternetGatewaysDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface InternetGatewaysListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type InternetGatewaysListByResourceGroupResponse = InternetGatewaysListResult;

/** Optional parameters. */
export interface InternetGatewaysListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type InternetGatewaysListBySubscriptionResponse = InternetGatewaysListResult;

/** Optional parameters. */
export interface InternetGatewaysListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type InternetGatewaysListByResourceGroupNextResponse = InternetGatewaysListResult;

/** Optional parameters. */
export interface InternetGatewaysListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type InternetGatewaysListBySubscriptionNextResponse = InternetGatewaysListResult;

/** Optional parameters. */
export interface InternetGatewayRulesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type InternetGatewayRulesCreateResponse = InternetGatewayRule;

/** Optional parameters. */
export interface InternetGatewayRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type InternetGatewayRulesGetResponse = InternetGatewayRule;

/** Optional parameters. */
export interface InternetGatewayRulesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type InternetGatewayRulesUpdateResponse = InternetGatewayRule;

/** Optional parameters. */
export interface InternetGatewayRulesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type InternetGatewayRulesDeleteResponse = InternetGatewayRulesDeleteHeaders;

/** Optional parameters. */
export interface InternetGatewayRulesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type InternetGatewayRulesListByResourceGroupResponse = InternetGatewayRulesListResult;

/** Optional parameters. */
export interface InternetGatewayRulesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type InternetGatewayRulesListBySubscriptionResponse = InternetGatewayRulesListResult;

/** Optional parameters. */
export interface InternetGatewayRulesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type InternetGatewayRulesListByResourceGroupNextResponse = InternetGatewayRulesListResult;

/** Optional parameters. */
export interface InternetGatewayRulesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type InternetGatewayRulesListBySubscriptionNextResponse = InternetGatewayRulesListResult;

/** Optional parameters. */
export interface IpCommunitiesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type IpCommunitiesCreateResponse = IpCommunity;

/** Optional parameters. */
export interface IpCommunitiesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IpCommunitiesGetResponse = IpCommunity;

/** Optional parameters. */
export interface IpCommunitiesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type IpCommunitiesUpdateResponse = IpCommunity;

/** Optional parameters. */
export interface IpCommunitiesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type IpCommunitiesDeleteResponse = IpCommunitiesDeleteHeaders;

/** Optional parameters. */
export interface IpCommunitiesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type IpCommunitiesListByResourceGroupResponse = IpCommunitiesListResult;

/** Optional parameters. */
export interface IpCommunitiesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type IpCommunitiesListBySubscriptionResponse = IpCommunitiesListResult;

/** Optional parameters. */
export interface IpCommunitiesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type IpCommunitiesListByResourceGroupNextResponse = IpCommunitiesListResult;

/** Optional parameters. */
export interface IpCommunitiesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type IpCommunitiesListBySubscriptionNextResponse = IpCommunitiesListResult;

/** Optional parameters. */
export interface IpExtendedCommunitiesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type IpExtendedCommunitiesCreateResponse = IpExtendedCommunity;

/** Optional parameters. */
export interface IpExtendedCommunitiesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IpExtendedCommunitiesGetResponse = IpExtendedCommunity;

/** Optional parameters. */
export interface IpExtendedCommunitiesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type IpExtendedCommunitiesUpdateResponse = IpExtendedCommunity;

/** Optional parameters. */
export interface IpExtendedCommunitiesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type IpExtendedCommunitiesDeleteResponse = IpExtendedCommunitiesDeleteHeaders;

/** Optional parameters. */
export interface IpExtendedCommunitiesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type IpExtendedCommunitiesListByResourceGroupResponse = IpExtendedCommunityListResult;

/** Optional parameters. */
export interface IpExtendedCommunitiesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type IpExtendedCommunitiesListBySubscriptionResponse = IpExtendedCommunityListResult;

/** Optional parameters. */
export interface IpExtendedCommunitiesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type IpExtendedCommunitiesListByResourceGroupNextResponse = IpExtendedCommunityListResult;

/** Optional parameters. */
export interface IpExtendedCommunitiesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type IpExtendedCommunitiesListBySubscriptionNextResponse = IpExtendedCommunityListResult;

/** Optional parameters. */
export interface IpPrefixesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type IpPrefixesCreateResponse = IpPrefix;

/** Optional parameters. */
export interface IpPrefixesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IpPrefixesGetResponse = IpPrefix;

/** Optional parameters. */
export interface IpPrefixesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type IpPrefixesUpdateResponse = IpPrefix;

/** Optional parameters. */
export interface IpPrefixesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type IpPrefixesDeleteResponse = IpPrefixesDeleteHeaders;

/** Optional parameters. */
export interface IpPrefixesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type IpPrefixesListByResourceGroupResponse = IpPrefixesListResult;

/** Optional parameters. */
export interface IpPrefixesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type IpPrefixesListBySubscriptionResponse = IpPrefixesListResult;

/** Optional parameters. */
export interface IpPrefixesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type IpPrefixesListByResourceGroupNextResponse = IpPrefixesListResult;

/** Optional parameters. */
export interface IpPrefixesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type IpPrefixesListBySubscriptionNextResponse = IpPrefixesListResult;

/** Optional parameters. */
export interface L2IsolationDomainsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type L2IsolationDomainsCreateResponse = L2IsolationDomain;

/** Optional parameters. */
export interface L2IsolationDomainsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type L2IsolationDomainsGetResponse = L2IsolationDomain;

/** Optional parameters. */
export interface L2IsolationDomainsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type L2IsolationDomainsUpdateResponse = L2IsolationDomain;

/** Optional parameters. */
export interface L2IsolationDomainsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface L2IsolationDomainsUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type L2IsolationDomainsUpdateAdministrativeStateResponse = CommonPostActionResponseForDeviceUpdate;

/** Optional parameters. */
export interface L2IsolationDomainsValidateConfigurationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validateConfiguration operation. */
export type L2IsolationDomainsValidateConfigurationResponse = ValidateConfigurationResponse;

/** Optional parameters. */
export interface L2IsolationDomainsCommitConfigurationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the commitConfiguration operation. */
export type L2IsolationDomainsCommitConfigurationResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface L2IsolationDomainsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type L2IsolationDomainsListByResourceGroupResponse = L2IsolationDomainsListResult;

/** Optional parameters. */
export interface L2IsolationDomainsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type L2IsolationDomainsListBySubscriptionResponse = L2IsolationDomainsListResult;

/** Optional parameters. */
export interface L2IsolationDomainsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type L2IsolationDomainsListByResourceGroupNextResponse = L2IsolationDomainsListResult;

/** Optional parameters. */
export interface L2IsolationDomainsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type L2IsolationDomainsListBySubscriptionNextResponse = L2IsolationDomainsListResult;

/** Optional parameters. */
export interface L3IsolationDomainsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type L3IsolationDomainsCreateResponse = L3IsolationDomain;

/** Optional parameters. */
export interface L3IsolationDomainsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type L3IsolationDomainsGetResponse = L3IsolationDomain;

/** Optional parameters. */
export interface L3IsolationDomainsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type L3IsolationDomainsUpdateResponse = L3IsolationDomain;

/** Optional parameters. */
export interface L3IsolationDomainsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface L3IsolationDomainsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type L3IsolationDomainsListByResourceGroupResponse = L3IsolationDomainsListResult;

/** Optional parameters. */
export interface L3IsolationDomainsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type L3IsolationDomainsListBySubscriptionResponse = L3IsolationDomainsListResult;

/** Optional parameters. */
export interface L3IsolationDomainsUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type L3IsolationDomainsUpdateAdministrativeStateResponse = CommonPostActionResponseForDeviceUpdate;

/** Optional parameters. */
export interface L3IsolationDomainsValidateConfigurationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validateConfiguration operation. */
export type L3IsolationDomainsValidateConfigurationResponse = ValidateConfigurationResponse;

/** Optional parameters. */
export interface L3IsolationDomainsCommitConfigurationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the commitConfiguration operation. */
export type L3IsolationDomainsCommitConfigurationResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface L3IsolationDomainsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type L3IsolationDomainsListByResourceGroupNextResponse = L3IsolationDomainsListResult;

/** Optional parameters. */
export interface L3IsolationDomainsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type L3IsolationDomainsListBySubscriptionNextResponse = L3IsolationDomainsListResult;

/** Optional parameters. */
export interface InternalNetworksCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type InternalNetworksCreateResponse = InternalNetwork;

/** Optional parameters. */
export interface InternalNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type InternalNetworksGetResponse = InternalNetwork;

/** Optional parameters. */
export interface InternalNetworksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type InternalNetworksUpdateResponse = InternalNetwork;

/** Optional parameters. */
export interface InternalNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface InternalNetworksListByL3IsolationDomainOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByL3IsolationDomain operation. */
export type InternalNetworksListByL3IsolationDomainResponse = InternalNetworksList;

/** Optional parameters. */
export interface InternalNetworksUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type InternalNetworksUpdateAdministrativeStateResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface InternalNetworksUpdateBgpAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateBgpAdministrativeState operation. */
export type InternalNetworksUpdateBgpAdministrativeStateResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface InternalNetworksUpdateStaticRouteBfdAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateStaticRouteBfdAdministrativeState operation. */
export type InternalNetworksUpdateStaticRouteBfdAdministrativeStateResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface InternalNetworksListByL3IsolationDomainNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByL3IsolationDomainNext operation. */
export type InternalNetworksListByL3IsolationDomainNextResponse = InternalNetworksList;

/** Optional parameters. */
export interface ExternalNetworksCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type ExternalNetworksCreateResponse = ExternalNetwork;

/** Optional parameters. */
export interface ExternalNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ExternalNetworksGetResponse = ExternalNetwork;

/** Optional parameters. */
export interface ExternalNetworksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ExternalNetworksUpdateResponse = ExternalNetwork;

/** Optional parameters. */
export interface ExternalNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ExternalNetworksListByL3IsolationDomainOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByL3IsolationDomain operation. */
export type ExternalNetworksListByL3IsolationDomainResponse = ExternalNetworksList;

/** Optional parameters. */
export interface ExternalNetworksUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type ExternalNetworksUpdateAdministrativeStateResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface ExternalNetworksUpdateStaticRouteBfdAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateStaticRouteBfdAdministrativeState operation. */
export type ExternalNetworksUpdateStaticRouteBfdAdministrativeStateResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface ExternalNetworksListByL3IsolationDomainNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByL3IsolationDomainNext operation. */
export type ExternalNetworksListByL3IsolationDomainNextResponse = ExternalNetworksList;

/** Optional parameters. */
export interface NeighborGroupsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NeighborGroupsCreateResponse = NeighborGroup;

/** Optional parameters. */
export interface NeighborGroupsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NeighborGroupsGetResponse = NeighborGroup;

/** Optional parameters. */
export interface NeighborGroupsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NeighborGroupsUpdateResponse = NeighborGroup;

/** Optional parameters. */
export interface NeighborGroupsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NeighborGroupsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NeighborGroupsListByResourceGroupResponse = NeighborGroupsListResult;

/** Optional parameters. */
export interface NeighborGroupsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NeighborGroupsListBySubscriptionResponse = NeighborGroupsListResult;

/** Optional parameters. */
export interface NeighborGroupsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NeighborGroupsListByResourceGroupNextResponse = NeighborGroupsListResult;

/** Optional parameters. */
export interface NeighborGroupsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NeighborGroupsListBySubscriptionNextResponse = NeighborGroupsListResult;

/** Optional parameters. */
export interface NetworkDeviceSkusGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkDeviceSkusGetResponse = NetworkDeviceSku;

/** Optional parameters. */
export interface NetworkDeviceSkusListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkDeviceSkusListBySubscriptionResponse = NetworkDeviceSkusListResult;

/** Optional parameters. */
export interface NetworkDeviceSkusListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkDeviceSkusListBySubscriptionNextResponse = NetworkDeviceSkusListResult;

/** Optional parameters. */
export interface NetworkDevicesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkDevicesCreateResponse = NetworkDevice;

/** Optional parameters. */
export interface NetworkDevicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkDevicesGetResponse = NetworkDevice;

/** Optional parameters. */
export interface NetworkDevicesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkDevicesUpdateResponse = NetworkDevice;

/** Optional parameters. */
export interface NetworkDevicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkDevicesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NetworkDevicesListByResourceGroupResponse = NetworkDevicesListResult;

/** Optional parameters. */
export interface NetworkDevicesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkDevicesListBySubscriptionResponse = NetworkDevicesListResult;

/** Optional parameters. */
export interface NetworkDevicesRebootOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the reboot operation. */
export type NetworkDevicesRebootResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkDevicesRefreshConfigurationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the refreshConfiguration operation. */
export type NetworkDevicesRefreshConfigurationResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkDevicesUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type NetworkDevicesUpdateAdministrativeStateResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkDevicesUpgradeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the upgrade operation. */
export type NetworkDevicesUpgradeResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkDevicesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NetworkDevicesListByResourceGroupNextResponse = NetworkDevicesListResult;

/** Optional parameters. */
export interface NetworkDevicesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkDevicesListBySubscriptionNextResponse = NetworkDevicesListResult;

/** Optional parameters. */
export interface NetworkInterfacesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkInterfacesCreateResponse = NetworkInterface;

/** Optional parameters. */
export interface NetworkInterfacesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkInterfacesGetResponse = NetworkInterface;

/** Optional parameters. */
export interface NetworkInterfacesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkInterfacesUpdateResponse = NetworkInterface;

/** Optional parameters. */
export interface NetworkInterfacesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkInterfacesListByNetworkDeviceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByNetworkDevice operation. */
export type NetworkInterfacesListByNetworkDeviceResponse = NetworkInterfacesList;

/** Optional parameters. */
export interface NetworkInterfacesUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type NetworkInterfacesUpdateAdministrativeStateResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkInterfacesListByNetworkDeviceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByNetworkDeviceNext operation. */
export type NetworkInterfacesListByNetworkDeviceNextResponse = NetworkInterfacesList;

/** Optional parameters. */
export interface NetworkFabricControllersCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkFabricControllersCreateResponse = NetworkFabricController;

/** Optional parameters. */
export interface NetworkFabricControllersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkFabricControllersGetResponse = NetworkFabricController;

/** Optional parameters. */
export interface NetworkFabricControllersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkFabricControllersUpdateResponse = NetworkFabricController;

/** Optional parameters. */
export interface NetworkFabricControllersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type NetworkFabricControllersDeleteResponse = NetworkFabricControllersDeleteHeaders;

/** Optional parameters. */
export interface NetworkFabricControllersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NetworkFabricControllersListByResourceGroupResponse = NetworkFabricControllersListResult;

/** Optional parameters. */
export interface NetworkFabricControllersListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkFabricControllersListBySubscriptionResponse = NetworkFabricControllersListResult;

/** Optional parameters. */
export interface NetworkFabricControllersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NetworkFabricControllersListByResourceGroupNextResponse = NetworkFabricControllersListResult;

/** Optional parameters. */
export interface NetworkFabricControllersListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkFabricControllersListBySubscriptionNextResponse = NetworkFabricControllersListResult;

/** Optional parameters. */
export interface NetworkFabricSkusGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkFabricSkusGetResponse = NetworkFabricSku;

/** Optional parameters. */
export interface NetworkFabricSkusListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkFabricSkusListBySubscriptionResponse = NetworkFabricSkusListResult;

/** Optional parameters. */
export interface NetworkFabricSkusListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkFabricSkusListBySubscriptionNextResponse = NetworkFabricSkusListResult;

/** Optional parameters. */
export interface NetworkFabricsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkFabricsCreateResponse = NetworkFabric;

/** Optional parameters. */
export interface NetworkFabricsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkFabricsGetResponse = NetworkFabric;

/** Optional parameters. */
export interface NetworkFabricsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkFabricsUpdateResponse = NetworkFabric;

/** Optional parameters. */
export interface NetworkFabricsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type NetworkFabricsDeleteResponse = NetworkFabricsDeleteHeaders;

/** Optional parameters. */
export interface NetworkFabricsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NetworkFabricsListByResourceGroupResponse = NetworkFabricsListResult;

/** Optional parameters. */
export interface NetworkFabricsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkFabricsListBySubscriptionResponse = NetworkFabricsListResult;

/** Optional parameters. */
export interface NetworkFabricsProvisionOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the provision operation. */
export type NetworkFabricsProvisionResponse = CommonPostActionResponseForDeviceUpdate;

/** Optional parameters. */
export interface NetworkFabricsDeprovisionOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deprovision operation. */
export type NetworkFabricsDeprovisionResponse = CommonPostActionResponseForDeviceUpdate;

/** Optional parameters. */
export interface NetworkFabricsUpgradeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the upgrade operation. */
export type NetworkFabricsUpgradeResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkFabricsRefreshConfigurationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the refreshConfiguration operation. */
export type NetworkFabricsRefreshConfigurationResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkFabricsUpdateWorkloadManagementBfdConfigurationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateWorkloadManagementBfdConfiguration operation. */
export type NetworkFabricsUpdateWorkloadManagementBfdConfigurationResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkFabricsUpdateInfraManagementBfdConfigurationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateInfraManagementBfdConfiguration operation. */
export type NetworkFabricsUpdateInfraManagementBfdConfigurationResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkFabricsValidateConfigurationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validateConfiguration operation. */
export type NetworkFabricsValidateConfigurationResponse = ValidateConfigurationResponse;

/** Optional parameters. */
export interface NetworkFabricsGetTopologyOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getTopology operation. */
export type NetworkFabricsGetTopologyResponse = ValidateConfigurationResponse;

/** Optional parameters. */
export interface NetworkFabricsCommitConfigurationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the commitConfiguration operation. */
export type NetworkFabricsCommitConfigurationResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkFabricsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NetworkFabricsListByResourceGroupNextResponse = NetworkFabricsListResult;

/** Optional parameters. */
export interface NetworkFabricsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkFabricsListBySubscriptionNextResponse = NetworkFabricsListResult;

/** Optional parameters. */
export interface NetworkToNetworkInterconnectsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkToNetworkInterconnectsCreateResponse = NetworkToNetworkInterconnect;

/** Optional parameters. */
export interface NetworkToNetworkInterconnectsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkToNetworkInterconnectsGetResponse = NetworkToNetworkInterconnect;

/** Optional parameters. */
export interface NetworkToNetworkInterconnectsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkToNetworkInterconnectsUpdateResponse = NetworkToNetworkInterconnect;

/** Optional parameters. */
export interface NetworkToNetworkInterconnectsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkToNetworkInterconnectsListByNetworkFabricOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByNetworkFabric operation. */
export type NetworkToNetworkInterconnectsListByNetworkFabricResponse = NetworkToNetworkInterconnectsList;

/** Optional parameters. */
export interface NetworkToNetworkInterconnectsUpdateNpbStaticRouteBfdAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateNpbStaticRouteBfdAdministrativeState operation. */
export type NetworkToNetworkInterconnectsUpdateNpbStaticRouteBfdAdministrativeStateResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkToNetworkInterconnectsUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type NetworkToNetworkInterconnectsUpdateAdministrativeStateResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkToNetworkInterconnectsListByNetworkFabricNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByNetworkFabricNext operation. */
export type NetworkToNetworkInterconnectsListByNetworkFabricNextResponse = NetworkToNetworkInterconnectsList;

/** Optional parameters. */
export interface NetworkPacketBrokersCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkPacketBrokersCreateResponse = NetworkPacketBroker;

/** Optional parameters. */
export interface NetworkPacketBrokersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkPacketBrokersGetResponse = NetworkPacketBroker;

/** Optional parameters. */
export interface NetworkPacketBrokersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkPacketBrokersUpdateResponse = NetworkPacketBroker;

/** Optional parameters. */
export interface NetworkPacketBrokersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkPacketBrokersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NetworkPacketBrokersListByResourceGroupResponse = NetworkPacketBrokersListResult;

/** Optional parameters. */
export interface NetworkPacketBrokersListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkPacketBrokersListBySubscriptionResponse = NetworkPacketBrokersListResult;

/** Optional parameters. */
export interface NetworkPacketBrokersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NetworkPacketBrokersListByResourceGroupNextResponse = NetworkPacketBrokersListResult;

/** Optional parameters. */
export interface NetworkPacketBrokersListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkPacketBrokersListBySubscriptionNextResponse = NetworkPacketBrokersListResult;

/** Optional parameters. */
export interface NetworkRacksCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkRacksCreateResponse = NetworkRack;

/** Optional parameters. */
export interface NetworkRacksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkRacksGetResponse = NetworkRack;

/** Optional parameters. */
export interface NetworkRacksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkRacksUpdateResponse = NetworkRack;

/** Optional parameters. */
export interface NetworkRacksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkRacksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NetworkRacksListByResourceGroupResponse = NetworkRacksListResult;

/** Optional parameters. */
export interface NetworkRacksListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkRacksListBySubscriptionResponse = NetworkRacksListResult;

/** Optional parameters. */
export interface NetworkRacksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NetworkRacksListByResourceGroupNextResponse = NetworkRacksListResult;

/** Optional parameters. */
export interface NetworkRacksListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkRacksListBySubscriptionNextResponse = NetworkRacksListResult;

/** Optional parameters. */
export interface NetworkTapRulesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkTapRulesCreateResponse = NetworkTapRule;

/** Optional parameters. */
export interface NetworkTapRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkTapRulesGetResponse = NetworkTapRule;

/** Optional parameters. */
export interface NetworkTapRulesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkTapRulesUpdateResponse = NetworkTapRule;

/** Optional parameters. */
export interface NetworkTapRulesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type NetworkTapRulesDeleteResponse = NetworkTapRulesDeleteHeaders;

/** Optional parameters. */
export interface NetworkTapRulesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NetworkTapRulesListByResourceGroupResponse = NetworkTapRulesListResult;

/** Optional parameters. */
export interface NetworkTapRulesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkTapRulesListBySubscriptionResponse = NetworkTapRulesListResult;

/** Optional parameters. */
export interface NetworkTapRulesUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type NetworkTapRulesUpdateAdministrativeStateResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkTapRulesResyncOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the resync operation. */
export type NetworkTapRulesResyncResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkTapRulesValidateConfigurationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validateConfiguration operation. */
export type NetworkTapRulesValidateConfigurationResponse = ValidateConfigurationResponse;

/** Optional parameters. */
export interface NetworkTapRulesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NetworkTapRulesListByResourceGroupNextResponse = NetworkTapRulesListResult;

/** Optional parameters. */
export interface NetworkTapRulesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkTapRulesListBySubscriptionNextResponse = NetworkTapRulesListResult;

/** Optional parameters. */
export interface NetworkTapsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkTapsCreateResponse = NetworkTap;

/** Optional parameters. */
export interface NetworkTapsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkTapsGetResponse = NetworkTap;

/** Optional parameters. */
export interface NetworkTapsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkTapsUpdateResponse = NetworkTap;

/** Optional parameters. */
export interface NetworkTapsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkTapsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NetworkTapsListByResourceGroupResponse = NetworkTapsListResult;

/** Optional parameters. */
export interface NetworkTapsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkTapsListBySubscriptionResponse = NetworkTapsListResult;

/** Optional parameters. */
export interface NetworkTapsUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type NetworkTapsUpdateAdministrativeStateResponse = CommonPostActionResponseForDeviceUpdate;

/** Optional parameters. */
export interface NetworkTapsResyncOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the resync operation. */
export type NetworkTapsResyncResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface NetworkTapsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NetworkTapsListByResourceGroupNextResponse = NetworkTapsListResult;

/** Optional parameters. */
export interface NetworkTapsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkTapsListBySubscriptionNextResponse = NetworkTapsListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface RoutePoliciesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type RoutePoliciesCreateResponse = RoutePolicy;

/** Optional parameters. */
export interface RoutePoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoutePoliciesGetResponse = RoutePolicy;

/** Optional parameters. */
export interface RoutePoliciesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type RoutePoliciesUpdateResponse = RoutePolicy;

/** Optional parameters. */
export interface RoutePoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RoutePoliciesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type RoutePoliciesListByResourceGroupResponse = RoutePoliciesListResult;

/** Optional parameters. */
export interface RoutePoliciesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type RoutePoliciesListBySubscriptionResponse = RoutePoliciesListResult;

/** Optional parameters. */
export interface RoutePoliciesUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type RoutePoliciesUpdateAdministrativeStateResponse = CommonPostActionResponseForDeviceUpdate;

/** Optional parameters. */
export interface RoutePoliciesValidateConfigurationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the validateConfiguration operation. */
export type RoutePoliciesValidateConfigurationResponse = ValidateConfigurationResponse;

/** Optional parameters. */
export interface RoutePoliciesCommitConfigurationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the commitConfiguration operation. */
export type RoutePoliciesCommitConfigurationResponse = CommonPostActionResponseForStateUpdate;

/** Optional parameters. */
export interface RoutePoliciesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type RoutePoliciesListByResourceGroupNextResponse = RoutePoliciesListResult;

/** Optional parameters. */
export interface RoutePoliciesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type RoutePoliciesListBySubscriptionNextResponse = RoutePoliciesListResult;

/** Optional parameters. */
export interface AzureNetworkFabricManagementServiceAPIOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
