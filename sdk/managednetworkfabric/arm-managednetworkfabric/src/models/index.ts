/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Switch configuration entries require a description to discern between configuration groups. */
export interface AnnotationResource {
  /** Switch configuration description. */
  annotation?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The AccessControlList patch resource definition. */
export interface AccessControlListPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** Switch configuration description. */
  annotation?: string;
  /** IP address family. Example: ipv4 | ipv6. */
  addressFamily?: AddressFamily;
  /** Access Control List conditions. */
  conditions?: AccessControlListConditionProperties[];
}

/** List of AccessControlLists. */
export interface AccessControlListsListResult {
  /** List of AccessControlList resources. */
  value?: AccessControlList[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** The IPCommunity patch resource definition. */
export interface IpCommunityPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** List of IPCommunities. */
export interface IpCommunitiesListResult {
  /** List of IpCommunity resources. */
  value?: IpCommunity[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** The IpExtendedCommunities patch resource definition. */
export interface IpExtendedCommunityPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** List of IpExtendedCommunities. */
export interface IpExtendedCommunityListResult {
  /** List of IpExtendedCommunities resources. */
  value?: IpExtendedCommunity[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

export interface IpPrefixPropertiesIpPrefixRulesItem {
  /** Action to be taken on the configuration. Example: Permit | Deny. */
  action: CommunityActionTypes;
  /** Sequence to insert to/delete from existing route. Prefix lists are evaluated starting with the lowest sequence number and continue down the list until a match is made. Once a match is made, the permit or deny statement is applied to that network and the rest of the list is ignored. */
  sequenceNumber: number;
  /** Network Prefix specifying IPv4/IPv6 packets to be permitted or denied. Example: 1.1.1.0/24 | 3FFE:FFFF:0:CD30::/126 */
  networkPrefix: string;
  /** Specify prefix-list bounds. */
  condition?: Condition;
  /** SubnetMaskLength gives the minimum NetworkPrefix length to be matched.Possible values for IPv4 are 1 - 32. Possible values of IPv6 are 1 - 128. */
  subnetMaskLength?: number;
}

/** The IPPrefix patch resource definition. */
export interface IpPrefixPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** List of IpPrefixes. */
export interface IpPrefixesListResult {
  /** List of IPPrefix resources. */
  value?: IpPrefix[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** The L2IsolationDomain patch resource definition. */
export interface L2IsolationDomainPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** Switch configuration description. */
  annotation?: string;
  /** maximum transmission unit. Default value is 1500. */
  mtu?: number;
}

/** Update administrative state on list of resources. */
export interface EnableDisableOnResources {
  /** Network Fabrics or Network Rack resource Id. */
  resourceIds?: string[];
}

/** Show ARP table entry properties */
export interface ARPProperties {
  /** Ipv4 or Ipv6 address */
  address: string;
  /** Duration in seconds. */
  age: string;
  /** Hardware address. */
  macAddress: string;
  /** Layer 2 interface name. */
  interface: string;
  /** ARP status */
  state?: string;
}

/** List of L2IsolationDomains. */
export interface L2IsolationDomainsListResult {
  /** Displays list of L2IsolationDomain resources. */
  value?: L2IsolationDomain[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** L3IsolationDomainPatchProperties define the patch resource properties. */
export interface L3IsolationDomainPatchProperties {
  /** Advertise Connected Subnets. Ex: "True" | "False". */
  redistributeConnectedSubnets?: RedistributeConnectedSubnets;
  /** Advertise Static Routes. Ex: "True" | "False". */
  redistributeStaticRoutes?: RedistributeStaticRoutes;
  /** List of Ipv4 and Ipv6 route configurations. */
  aggregateRouteConfiguration?: AggregateRouteConfiguration;
  /** L3 Isolation Domain description. */
  description?: string;
  /** Connected Subnet RoutePolicy */
  connectedSubnetRoutePolicy?: L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy;
}

/** List of IPv4 and IPv6 route configurations. */
export interface AggregateRouteConfiguration {
  /** List of IPv4 Route prefixes. */
  ipv4Routes?: AggregateRoute[];
  /** List of IPv6 Routes prefixes. */
  ipv6Routes?: AggregateRoute[];
}

/** Aggregate Route properties. */
export interface AggregateRoute {
  /** Prefix of the aggregate Route. */
  prefix?: string;
}

/** Connected Subnet RoutePolicy */
export interface L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy {
  /** exportRoutePolicyId value. */
  exportRoutePolicyId?: string;
  /**
   * Enabled/Disabled connected subnet route policy. Ex: Enabled | Disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
}

/** The L3IsolationDomain patch resource definition. */
export interface L3IsolationDomainPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
  /** Advertise Connected Subnets. Ex: "True" | "False". */
  redistributeConnectedSubnets?: RedistributeConnectedSubnets;
  /** Advertise Static Routes. Ex: "True" | "False". */
  redistributeStaticRoutes?: RedistributeStaticRoutes;
  /** List of Ipv4 and Ipv6 route configurations. */
  aggregateRouteConfiguration?: AggregateRouteConfiguration;
  /** L3 Isolation Domain description. */
  description?: string;
  /** Connected Subnet RoutePolicy */
  connectedSubnetRoutePolicy?: L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy;
}

/** List of L3IsolationDomains. */
export interface L3IsolationDomainsListResult {
  /** List of L3IsolationDomain resources. */
  value?: L3IsolationDomain[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** The ExternalNetwork patchable properties. */
export interface InternalNetworkPatchableProperties {
  /** Maximum transmission unit. Default value is 1500. */
  mtu?: number;
  /** List with object connected IPv4 Subnets. */
  connectedIPv4Subnets?: ConnectedSubnet[];
  /** List with object connected IPv6 Subnets. */
  connectedIPv6Subnets?: ConnectedSubnet[];
  /** Static Route Configuration properties. */
  staticRouteConfiguration?: StaticRouteConfiguration;
  /** BGP configuration properties */
  bgpConfiguration?: BgpConfiguration;
  /** ARM resource ID of importRoutePolicy. */
  importRoutePolicyId?: string;
  /** ARM resource ID of importRoutePolicy. */
  exportRoutePolicyId?: string;
}

/** staticRouteConfiguration model. */
export interface StaticRouteConfiguration {
  /** BFD configuration properties */
  bfdConfiguration?: BfdConfiguration;
  /** List with object IPv4Routes. */
  ipv4Routes?: StaticRouteProperties[];
  /** List with object IPv6Routes. */
  ipv6Routes?: StaticRouteProperties[];
}

/** BFD configuration properties */
export interface BfdConfiguration {
  /**
   * Administrative state of the BfdConfiguration. Example: Enabled | Disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
  /**
   * interval in milliseconds. Example: 300.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly interval?: number;
  /**
   * Multiplier for the Bfd Configuration. Example: 3.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly multiplier?: number;
}

/** Static Route properties. */
export interface StaticRouteProperties {
  /** IPv4 | IPv6 Prefix. */
  prefix: string;
  /** List of next hop IPv4 | IPv6 addresses. */
  nextHop: string[];
}

/** Neighbor Address properties. */
export interface NeighborAddress {
  /** IP Address. */
  address?: string;
  /**
   * OperationalState of the NeighborAddress.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationalState?: string;
}

/** The InternalNetwork patch resource definition. */
export interface InternalNetworkPatch {
  /** Switch configuration description. */
  annotation?: string;
  /** Maximum transmission unit. Default value is 1500. */
  mtu?: number;
  /** List with object connected IPv4 Subnets. */
  connectedIPv4Subnets?: ConnectedSubnet[];
  /** List with object connected IPv6 Subnets. */
  connectedIPv6Subnets?: ConnectedSubnet[];
  /** Static Route Configuration properties. */
  staticRouteConfiguration?: StaticRouteConfiguration;
  /** BGP configuration properties */
  bgpConfiguration?: BgpConfiguration;
  /** ARM resource ID of importRoutePolicy. */
  importRoutePolicyId?: string;
  /** ARM resource ID of importRoutePolicy. */
  exportRoutePolicyId?: string;
}

/** List of InternalNetworks. */
export interface InternalNetworksList {
  /** List of InternalNetworks resources. */
  value?: InternalNetwork[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Option B configuration. */
export interface OptionBProperties {
  /** Route Targets to be applied for incoming routes into CE. */
  importRouteTargets?: string[];
  /** Route Targets to be applied for outgoing routes from CE. */
  exportRouteTargets?: string[];
}

/** Layer 3 primary and secondary ip address prefixes. */
export interface Layer3IpPrefixProperties {
  /** IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.0/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. */
  primaryIpv4Prefix?: string;
  /** IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a0/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. */
  primaryIpv6Prefix?: string;
  /** Secondary IPv4 Address Prefix of CE-PE interconnect links. Example: 172.31.0.20/31. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. */
  secondaryIpv4Prefix?: string;
  /** Secondary IPv6 Address Prefix of CE-PE interconnect links. Example: 3FFE:FFFF:0:CD30::a4/126. The values can be specified at the time of creation or can be updated afterwards. Any update to the values post-provisioning may disrupt traffic. The 1st and 3rd IPs are to be configured on CE1 and CE2 for Option B interfaces. The 2nd and 4th IPs are to be configured on PE1 and PE2 for Option B interfaces. */
  secondaryIpv6Prefix?: string;
}

/** The ExternalNetwork patch resource definition. */
export interface ExternalNetworkPatch {
  /** Switch configuration description. */
  annotation?: string;
  /** Peering option list. */
  peeringOption?: PeeringOption;
  /** option B properties object */
  optionBProperties?: OptionBProperties;
  /** option A properties object */
  optionAProperties?: Layer3OptionAProperties;
  /** ARM resource ID of importRoutePolicy. */
  importRoutePolicyId?: string;
  /** ARM resource ID of exportRoutePolicy. */
  exportRoutePolicyId?: string;
}

/** The ExternalNetwork patchable properties. */
export interface ExternalNetworkPatchableProperties {
  /** Peering option list. */
  peeringOption?: PeeringOption;
  /** option B properties object */
  optionBProperties?: OptionBProperties;
  /** option A properties object */
  optionAProperties?: Layer3OptionAProperties;
  /** ARM resource ID of importRoutePolicy. */
  importRoutePolicyId?: string;
  /** ARM resource ID of exportRoutePolicy. */
  exportRoutePolicyId?: string;
}

/** List of ExternalNetworks. */
export interface ExternalNetworksList {
  /** List of ExternalNetworks resources. */
  value?: ExternalNetwork[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Network device supported version properties. */
export interface SupportedVersionProperties {
  /** Operating system and firmware combined versions. */
  version?: string;
  /** Operating system version. */
  vendorOsVersion?: string;
  /** Firmware version. */
  vendorFirmwareVersion?: string;
  /** If the current version is in use. */
  isCurrent?: IsCurrentVersion;
  /** If the current version is a test version. */
  isTest?: IsTestVersion;
}

/** Network device limits. */
export interface DeviceLimits {
  /** Maximum number of physical interfaces. */
  physicalInterfaceCount?: number;
  /** Maximum number of sub-interfaces. */
  maxSubInterfaces?: number;
  /** Maximum number of tunnel interfaces. */
  maxTunnelInterfaces?: number;
  /** Maximum number of virtual router functions. */
  maxVirtualRouterFunctions?: number;
  /** Maximum number of Border Gateway Protocol (BGP) peers. */
  maxBorderGatewayProtocolPeers?: number;
  /** Maximum number of Bidirectional Forwarding Detection (BFD) peers. */
  maxBidirectionalForwardingDetectionPeers?: number;
}

/** Network device interface properties. */
export interface DeviceInterfaceProperties {
  /** Interface identifier. Example: HundredGigE0/0. */
  identifier?: string;
  /** Interface type. */
  interfaceType?: string;
  /** List of supported connector types. */
  supportedConnectorTypes?: SupportedConnectorProperties[];
}

/** Supported connector properties. */
export interface SupportedConnectorProperties {
  /** Connector type. Example: Optical. */
  connectorType?: string;
  /** Maximum speed of the connector in Mbps. */
  maxSpeedInMbps?: number;
}

/** List of NetworkDeviceSkus. */
export interface NetworkDeviceSkusListResult {
  /** List of NetworkDeviceSku resources. */
  value?: NetworkDeviceSku[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Network Device updatable properties */
export interface NetworkDevicePatchableProperties {
  /** The host Name of the device. */
  hostName?: string;
  /** serialNumber of the format Make;Model;HardwareRevisionId;SerialNumber. Example: Arista;DCS-7280DR3-24;12.05;JPE21116969 */
  serialNumber?: string;
}

/** The NetworkDevicePatchParameters resource definition. */
export interface NetworkDevicePatchParameters {
  /** Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
  /** Switch configuration description. */
  annotation?: string;
  /** The host Name of the device. */
  hostName?: string;
  /** serialNumber of the format Make;Model;HardwareRevisionId;SerialNumber. Example: Arista;DCS-7280DR3-24;12.05;JPE21116969 */
  serialNumber?: string;
}

/** List of NetworkDevices. */
export interface NetworkDevicesListResult {
  /** List of NetworkDevice resources. */
  value?: NetworkDevice[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** The NetworkInterfacePatch resource definition. */
export interface NetworkInterfacePatch {
  /** Switch configuration description. */
  annotation?: string;
}

/** List of NetworkInterfaces. */
export interface NetworkInterfacesList {
  /** List of NetworkInterfaces resources. */
  value?: NetworkInterface[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Generate support package post action properties. */
export interface UpdateVersionProperties {
  /** The supported version defined in network device SKU. */
  skuVersion: string;
}

/** Generate support package post action properties. */
export interface SupportPackageProperties {
  /** The URL to fetch the generated support package from. */
  supportPackageURL: string;
}

/** Update power cycle input properties. */
export interface UpdatePowerCycleProperties {
  /** Primary or Secondary power end. */
  powerEnd: PowerEnd;
  /** On or Off toggle state. */
  state: State;
}

/** Get Device status response properties. */
export interface GetDeviceStatusProperties {
  /** Primary or Secondary power end. */
  operationalStatus: OperationalStatus;
  /** On or Off power cycle state. */
  powerCycleState: PowerCycleState;
  /** The serial number of the device */
  serialNumber: string;
}

/** Get Device static interface maps as per topology. */
export interface GetStaticInterfaceMapsPropertiesItem {
  /** The interface name. */
  name?: string;
  /** The interface description. */
  description?: string;
  /** The interface identifier. */
  identifier?: string;
  /** The interface type. Example: Ethernet */
  interfaceType?: string;
  /** The physical cable connector type. Example: Optical */
  connectorType?: string;
  /** Connected to ARM resource or external interface */
  connectedTo?: string;
  /** The interface speed. Example: 100 */
  speed?: number;
  /** The port channel group id. */
  channelGroupId?: number;
}

/** Interface running status properties */
export interface InterfaceStatus {
  /**
   * The interface administrative state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
  /** The interface operational status. */
  operationalStatus?: string;
  /** The physical status. */
  phyStatus?: string;
  /** The interface transceiver type. Example: up or down */
  transceiverStatus?: string;
  /** Connected to ARM resource or external interface */
  connectedTo?: string;
}

/** InfrastructureServices IP ranges. */
export interface InfrastructureServices {
  /** The IPv4 Address space is optional, if the value is not defined at the time of NFC creation, then the default value 10.0.0.0/19 is considered. The IPV4 address subnet is an optional attribute. */
  ipv4AddressSpaces?: string[];
  /** The IPv6 is not supported right now. */
  ipv6AddressSpaces?: string[];
}

/** WorkloadServices IP ranges. */
export interface WorkloadServices {
  /** The IPv4 Address space is optional, if the value is defined at the time of NFC creation, then the default value 10.0.0.0/19 is considered. The IPV4 address subnet is an optional attribute. */
  ipv4AddressSpaces?: string[];
  /** The IPv6 is not supported right now. */
  ipv6AddressSpaces?: string[];
}

/** Managed Resource Group configuration properties. */
export interface ManagedResourceGroupConfiguration {
  /** The NFC service will be hosted in a Managed resource group. */
  name?: string;
  /** Managed resource group location. */
  location?: string;
}

/** Network Fabric Controller updatable properties */
export interface NetworkFabricControllerPatchableProperties {
  /** As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute) */
  infrastructureExpressRouteConnections?: ExpressRouteConnectionInformation[];
  /** As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is a Mandatory attribute). */
  workloadExpressRouteConnections?: ExpressRouteConnectionInformation[];
}

/** The ExpressRoute circuit ID and the Auth Key are required for you to successfully deploy NFC service. */
export interface ExpressRouteConnectionInformation {
  /** The express route circuit Azure resource ID, must be of type Microsoft.Network/expressRouteCircuits/circuitName. The ExpressRoute Circuit is a mandatory attribute. */
  expressRouteCircuitId: string;
  /** Authorization key for the circuit, must be of type Microsoft.Network/expressRouteCircuits/authorizations. The Auth Key is a mandatory attribute. */
  expressRouteAuthorizationKey: string;
}

/** The NetworkFabricControllerPatch payload definition. */
export interface NetworkFabricControllerPatch {
  /** Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
  /** As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute) */
  infrastructureExpressRouteConnections?: ExpressRouteConnectionInformation[];
  /** As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is a Mandatory attribute). */
  workloadExpressRouteConnections?: ExpressRouteConnectionInformation[];
}

/** List of NetworkFabricControllers. */
export interface NetworkFabricControllersListResult {
  /** List of NetworkFabricController resources. */
  value?: NetworkFabricController[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** List of NetworkFabricSkus. */
export interface NetworkFabricSkusListResult {
  /** List of NetworkFabricSku resources. */
  value?: NetworkFabricSku[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Network and credential configuration currently applied on terminal server. */
export interface TerminalServerPatchableProperties {
  /** Username for the terminal server connection. */
  username?: string;
  /** Password for the terminal server connection. */
  password?: string;
  /** Serial Number of Terminal server. */
  serialNumber?: string;
}

/** Configuration to be used to setup the management network. */
export interface ManagementNetworkConfiguration {
  /** Configuration for infrastructure vpn. */
  infrastructureVpnConfiguration: VpnConfigurationProperties;
  /** Configuration for workload vpn. */
  workloadVpnConfiguration: VpnConfigurationProperties;
}

/** Configuration for infrastructure vpn. */
export interface VpnConfigurationProperties {
  /**
   * Indicates configuration state. Example: Enabled | Disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
  /**
   * Gets the networkToNetworkInterconnectId of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkToNetworkInterconnectId?: string;
  /** Peering option list. */
  peeringOption: PeeringOption;
  /** option B properties */
  optionBProperties?: OptionBPropertiesAutoGenerated;
  /** option A properties */
  optionAProperties?: OptionAProperties;
}

/** Option B configuration. */
export interface OptionBPropertiesAutoGenerated {
  /** Route Targets to be applied for incoming routes into CE. */
  importRouteTargets: string[];
  /** Route Targets to be applied for outgoing routes from CE. */
  exportRouteTargets: string[];
}

/** BFD Configuration properties. */
export interface FabricBfdConfiguration {
  /**
   * interval in seconds. Example: 300.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly interval?: number;
  /**
   * multiplier. Example: 3.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly multiplier?: number;
}

/** Network Fabric updatable properties */
export interface NetworkFabricPatchableProperties {
  /**
   * List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly racks?: string[];
  /**
   * List of L2IsolationDomain resource IDs under the Network Fabric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly l2IsolationDomains?: string[];
  /**
   * List of L3IsolationDomain resource IDs under the Network Fabric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly l3IsolationDomains?: string[];
}

/** The NetworkFabric resource definition. */
export interface NetworkFabricPatchParameters {
  /** Azure resource tags that will replace the existing ones. */
  tags?: { [propertyName: string]: string };
  /** Switch configuration description. */
  annotation?: string;
  /** Network and credentials configuration already applied to terminal server. */
  terminalServerConfiguration?: TerminalServerPatchableProperties;
  /**
   * List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly racks?: string[];
  /**
   * List of L2IsolationDomain resource IDs under the Network Fabric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly l2IsolationDomains?: string[];
  /**
   * List of L3IsolationDomain resource IDs under the Network Fabric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly l3IsolationDomains?: string[];
}

/** Terminal server patch parameters */
export interface TerminalServerPatchParameters {
  /** Network and credentials configuration already applied to terminal server. */
  terminalServerConfiguration?: TerminalServerPatchableProperties;
}

/** List of NetworkFabrics. */
export interface NetworkFabricsListResult {
  /** List of NetworkFabric resources. */
  value?: NetworkFabric[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** layer2Configuration */
export interface Layer2Configuration {
  /** Number of ports connected between PE/CE. Maximum value depends on FabricSKU. */
  portCount?: number;
  /** MTU of the packets between PE & CE. */
  mtu: number;
  /**
   * List of network device interfaces resource IDs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly interfaces?: string[];
}

/** List of NetworkToNetworkInterconnects. */
export interface NetworkToNetworkInterconnectsList {
  /** List of NetworkToNetworkInterconnects resources. */
  value?: NetworkToNetworkInterconnect[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** Network device properties / role for the Network Rack. */
export interface NetworkDeviceRoleProperties {
  /** Name of the associated Network Device SKU. */
  networkDeviceSkuName?: string;
  /** Role for the network device. */
  roleType?: NetworkDeviceRackRoleType;
  /** Rack slot for the network device. */
  rackSlot?: number;
}

/** List of NetworkRackSkus. */
export interface NetworkRackSkusListResult {
  /** List of NetworkRackSku resources. */
  value?: NetworkRackSku[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** The NetworkRack patch resource definition. */
export interface NetworkRackPatch {
  /** Resource properties. */
  properties?: Record<string, unknown>;
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** List of NetworkRacks. */
export interface NetworkRacksListResult {
  /** List of NetworkRack resources. */
  value?: NetworkRack[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** IP Community ID list properties. */
export interface IpCommunityIdList {
  /** List of IP Community resource IDs. */
  ipCommunityIds?: string[];
}

/** IP Extended Community Id list properties. */
export interface IpExtendedCommunityIdList {
  /** List of IP Extended Community resource IDs. */
  ipExtendedCommunityIds?: string[];
}

/** Route policy action properties. */
export interface StatementActionProperties {
  /** localPreference of the route policy. */
  localPreference?: number;
  /** action. Example: Permit | Deny. */
  actionType: CommunityActionTypes;
  /** IP Community Properties. */
  ipCommunityProperties?: ActionIpCommunityProperties;
  /** IP Extended Community Properties. */
  ipExtendedCommunityProperties?: ActionIpExtendedCommunityProperties;
}

/** IP Community add operation properties. */
export interface IpCommunityAddOperationProperties {
  /** IP Community ID list properties. */
  add?: IpCommunityIdList;
}

/** IP Community delete operation properties. */
export interface IpCommunityDeleteOperationProperties {
  /** IP Community ID list properties. */
  delete?: IpCommunityIdList;
}

/** IP Community set operation properties. */
export interface IpCommunitySetOperationProperties {
  /** IP Community ID list properties. */
  set?: IpCommunityIdList;
}

/** IP Extended Community add operation properties. */
export interface IpExtendedCommunityAddOperationProperties {
  /** IP Extended Community Id list properties. */
  add?: IpExtendedCommunityIdList;
}

/** IP Extended Community delete operation properties. */
export interface IpExtendedCommunityDeleteOperationProperties {
  /** IP Extended Community Id list properties. */
  delete?: IpExtendedCommunityIdList;
}

/** IP Extended Community set operation properties. */
export interface IpExtendedCommunitySetOperationProperties {
  /** IP Extended Community Id list properties. */
  set?: IpExtendedCommunityIdList;
}

/** The RoutePolicy patch resource definition. */
export interface RoutePolicyPatch {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** List of RoutePolicies. */
export interface RoutePoliciesListResult {
  /** List of RoutePolicy resources. */
  value?: RoutePolicy[];
  /** Url to follow for getting next page of resources. */
  nextLink?: string;
}

/** ExpressRouteStatus defines the resource properties. */
export interface ExpressRouteStatusDef {
  /** The express route circuit Azure resource ID, must be of type Microsoft.Network/expressRouteCircuits/circuitName. */
  expressRouteCircuitId?: string;
  /** Express route connection state for the resource. */
  expressRouteStatus?: ExpressRouteConnectionState;
}

/** The extended location. */
export interface ExtendedLocation {
  /** The extended location type. */
  type?: string;
  /** The extended location name. */
  name?: string;
}

/** Access Control List condition model. */
export interface AccessControlListConditionProperties
  extends AnnotationResource {
  /** sequenceNumber of the Access Control List. */
  sequenceNumber: number;
  /** action. Example: allow | deny. */
  action: ConditionActionType;
  /** destinationAddress. Example: any | 1.1.1.0/24 | 1.1.10.10 */
  destinationAddress: string;
  /** destinationPort. Example: any | 1253 */
  destinationPort: string;
  /** sourceAddress. Example: any | 1.1.1.0/24 | 1.1.10.10 */
  sourceAddress: string;
  /** sourcePort. Example: any | 1253 */
  sourcePort: string;
  /** TCP/IP protocol as defined in the list of IP protocol numbers. Example: 255 (any) | 0 | 1. */
  protocol: number;
}

/** AccessControlListProperties define the resource properties. */
export interface AccessControlListProperties extends AnnotationResource {
  /** IP address family. Example: ipv4 | ipv6. */
  addressFamily: AddressFamily;
  /** Access Control List conditions. */
  conditions: AccessControlListConditionProperties[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** AccessControlListPatchProperties define the patchable resource properties. */
export interface AccessControlListPatchProperties extends AnnotationResource {
  /** IP address family. Example: ipv4 | ipv6. */
  addressFamily?: AddressFamily;
  /** Access Control List conditions. */
  conditions?: AccessControlListConditionProperties[];
}

/** IpCommunityProperties define the resource properties. */
export interface IpCommunityProperties extends AnnotationResource {
  /** Action to be taken on the configuration. Example: Permit | Deny. */
  action: CommunityActionTypes;
  /** Supported well known Community List. */
  wellKnownCommunities?: WellKnownCommunities[];
  /** List the communityMembers of IP Community . */
  communityMembers: string[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** IpExtendedCommunityProperties define the resource properties. */
export interface IpExtendedCommunityProperties extends AnnotationResource {
  /** Action to be taken on the configuration. Example: Permit | Deny. */
  action: CommunityActionTypes;
  /** Route Target List.The expected formats are ASN(plain):NN >> example 4294967294:50, ASN.ASN:NN >> example 65533.65333:40, IP-address:NN >> example 10.10.10.10:65535. The possible values of ASN,NN are in range of 0-65535, ASN(plain) is in range of 0-4294967295. */
  routeTargets: string[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** IpPrefixProperties define the resource properties. */
export interface IpPrefixProperties extends AnnotationResource {
  /** IpPrefix contains the list of IP PrefixRules objects. */
  ipPrefixRules: IpPrefixPropertiesIpPrefixRulesItem[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** L2IsolationDomainProperties define the resource properties. */
export interface L2IsolationDomainProperties extends AnnotationResource {
  /** Network Fabric ARM resource id. */
  networkFabricId: string;
  /** vlanId. Example: 501. */
  vlanId: number;
  /** maximum transmission unit. Default value is 1500. */
  mtu?: number;
  /**
   * List of resources the L2 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disabledOnResources?: string[];
  /**
   * state. Example: Enabled | Disabled. It indicates administrative state of the isolationDomain, whether it is enabled or disabled. If enabled, the configuration is applied on the devices. If disabled, the configuration is removed from the devices
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** L2IsolationDomainPatchProperties define the patchable resource properties. */
export interface L2IsolationDomainPatchProperties extends AnnotationResource {
  /** maximum transmission unit. Default value is 1500. */
  mtu?: number;
}

/** L3IsolationDomainProperties define the resource properties. */
export interface L3IsolationDomainProperties
  extends AnnotationResource,
    L3IsolationDomainPatchProperties {
  /** Network Fabric ARM resource id. */
  networkFabricId: string;
  /**
   * List of resources the L3 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disabledOnResources?: string[];
  /**
   * Administrative state of the IsolationDomain. Example: Enabled | Disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
  /**
   * List of resources the OptionB is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly optionBDisabledOnResources?: string[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Connected Subnet properties. */
export interface ConnectedSubnet extends AnnotationResource {
  /** Prefix of the connected Subnet. */
  prefix?: string;
}

/** BGP configuration properties */
export interface BgpConfiguration extends AnnotationResource {
  /** BFD configuration properties */
  bfdConfiguration?: BfdConfiguration;
  /** Originate a defaultRoute. Ex: "True" | "False". */
  defaultRouteOriginate?: BooleanEnumProperty;
  /** Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2. */
  allowAS?: number;
  /** Enable Or Disable state. */
  allowASOverride?: AllowASOverride;
  /**
   * ASN of Network Fabric. Example: 65048.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fabricASN?: number;
  /** Peer ASN. Example: 65047. */
  peerASN: number;
  /** BGP Ipv4 ListenRange. */
  ipv4ListenRangePrefixes?: string[];
  /** BGP Ipv6 ListenRange. */
  ipv6ListenRangePrefixes?: string[];
  /** List with stringified ipv4NeighborAddresses. */
  ipv4NeighborAddress?: NeighborAddress[];
  /** List with stringified IPv6 Neighbor Address. */
  ipv6NeighborAddress?: NeighborAddress[];
}

/** Internal Network Properties */
export interface InternalNetworkProperties
  extends AnnotationResource,
    InternalNetworkPatchableProperties {
  /**
   * List of resources the InternalNetwork is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disabledOnResources?: string[];
  /**
   * Administrative state of the InternalNetwork. Example: Enabled | Disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
  /**
   * List of resources the BGP is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bgpDisabledOnResources?: string[];
  /**
   * List of resources the BFD for BGP is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bfdDisabledOnResources?: string[];
  /**
   * List of resources the BFD of StaticRoutes is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bfdForStaticRoutesDisabledOnResources?: string[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Vlan identifier. Example: 1001. */
  vlanId: number;
}

/** InternalNetwork Patch properties. */
export interface InternalNetworkPatchProperties
  extends AnnotationResource,
    InternalNetworkPatchableProperties {}

/** External Network Properties. */
export interface ExternalNetworkProperties extends AnnotationResource {
  /**
   * Gets the networkToNetworkInterconnectId of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkToNetworkInterconnectId?: string;
  /**
   * List of resources the externalNetwork is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disabledOnResources?: string[];
  /**
   * AdministrativeState of the externalNetwork. Example: Enabled | Disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Peering option list. */
  peeringOption: PeeringOption;
  /** option B properties object */
  optionBProperties?: OptionBProperties;
  /** option A properties object */
  optionAProperties?: ExternalNetworkPropertiesOptionAProperties;
  /** ARM resource ID of importRoutePolicy. */
  importRoutePolicyId?: string;
  /** ARM resource ID of exportRoutePolicy. */
  exportRoutePolicyId?: string;
}

/** External Network Patch properties. */
export interface ExternalNetworkPatchProperties
  extends AnnotationResource,
    ExternalNetworkPatchableProperties {}

/** NetworkDeviceProperties define the resource properties. */
export interface NetworkDeviceProperties
  extends AnnotationResource,
    NetworkDevicePatchableProperties {
  /**
   * Current version of the device as defined in SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /** Network Device SKU name. */
  networkDeviceSku: string;
  /** networkDeviceRole is the device role: Example: CE | ToR. */
  networkDeviceRole: NetworkDeviceRoleTypes;
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Reference to network rack resource id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkRackId?: string;
}

/** Network Device Patch properties. */
export interface NetworkDevicePatchParametersProperties
  extends AnnotationResource,
    NetworkDevicePatchableProperties {}

/** NetworkInterfaceProperties define the resource properties. */
export interface NetworkInterfaceProperties extends AnnotationResource {
  /**
   * physicalIdentifier of the network interface.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly physicalIdentifier?: string;
  /**
   * administrativeState of the network interface. Example: Enabled | Disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The arm resource id of the interface or compute server its connected to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectedTo?: string;
  /**
   * The Interface Type. Example: Management/Data
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly interfaceType?: InterfaceType;
  /**
   * ipv4Address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv4Address?: string;
  /**
   * ipv6Address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv6Address?: string;
}

/** Network Interface Patch properties. */
export interface NetworkInterfacePatchProperties extends AnnotationResource {}

/** NetworkFabricControllerProperties define the resource properties. */
export interface NetworkFabricControllerProperties
  extends AnnotationResource,
    NetworkFabricControllerPatchableProperties {
  /**
   * InfrastructureServices IP ranges.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly infrastructureServices?: InfrastructureServices;
  /**
   * WorkloadServices IP ranges.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workloadServices?: WorkloadServices;
  /** Managed Resource Group configuration properties. */
  managedResourceGroupConfiguration?: ManagedResourceGroupConfiguration;
  /**
   * The NF-ID will be an input parameter used by the NF to link and get associated with the parent NFC Service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkFabricIds?: string[];
  /**
   * A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workloadManagementNetwork?: boolean;
  /** IPv4 Network Fabric Controller Address Space. */
  ipv4AddressSpace?: string;
  /** IPv6 Network Fabric Controller Address Space. */
  ipv6AddressSpace?: string;
  /**
   * The Operational Status would always be NULL. Look only in to the Provisioning state for the latest status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationalState?: NetworkFabricControllerOperationalState;
  /**
   * Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC provisioning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** NetworkFabricProperties - define the resource properties. */
export interface NetworkFabricProperties
  extends AnnotationResource,
    NetworkFabricPatchableProperties {
  /** Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric. */
  networkFabricSku: string;
  /** Number of racks associated to Network Fabric.Possible values are from 2-8. */
  rackCount: number;
  /** Number of servers.Possible values are from 1-16. */
  serverCountPerRack: number;
  /** IPv4Prefix for Management Network. Example: 10.1.0.0/19. */
  ipv4Prefix?: string;
  /** IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59. */
  ipv6Prefix?: string;
  /**
   * Router Id of CE to be used for MP-BGP between PE and CE
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly routerId?: string;
  /** ASN of CE devices for CE/PE connectivity. */
  fabricASN: number;
  /** Azure resource ID for the NetworkFabricController the NetworkFabric belongs. */
  networkFabricControllerId: string;
  /** Network and credentials configuration currently applied to terminal server. */
  terminalServerConfiguration: TerminalServerConfiguration;
  /** Configuration to be used to setup the management network. */
  managementNetworkConfiguration: ManagementNetworkConfiguration;
  /**
   * Gets the operational state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationalState?: NetworkFabricOperationalState;
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Network Fabric Patch properties. */
export interface NetworkFabricPatchParametersProperties
  extends AnnotationResource,
    TerminalServerPatchParameters,
    NetworkFabricPatchableProperties {}

/** NetworkRackProperties define the resource properties. */
export interface NetworkRackProperties extends AnnotationResource {
  /** Network Rack SKU name. */
  networkRackSku: string;
  /** Network Fabric ARM resource id. */
  networkFabricId: string;
  /**
   * List of network device ARM resource ids.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkDevices?: string[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Route Policy Statement properties.. */
export interface RoutePolicyStatementProperties extends AnnotationResource {
  /** Sequence to insert to/delete from existing route. */
  sequenceNumber: number;
  /** Route policy condition properties. */
  condition: StatementConditionProperties;
  /** Route policy action properties. */
  action: StatementActionProperties;
}

/** RoutePolicy Properties define the resource properties. */
export interface RoutePolicyProperties extends AnnotationResource {
  /** Route Policy statements. */
  statements: RoutePolicyStatementProperties[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** Update administrative state on list of resources. */
export interface UpdateAdministrativeState extends EnableDisableOnResources {
  /** Administrative state. */
  state?: AdministrativeState;
}

/** Peering optionA properties */
export interface Layer3OptionAProperties extends Layer3IpPrefixProperties {
  /** MTU to use for option A peering. */
  mtu?: number;
  /** Vlan identifier. Example : 501 */
  vlanId?: number;
  /**
   * Fabric ASN number. Example 65001
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fabricASN?: number;
  /** Peer ASN number.Example : 28 */
  peerASN?: number;
  /** BFD configuration properties */
  bfdConfiguration?: BfdConfiguration;
}

/** Network and credentials configuration currently applied to terminal server. */
export interface TerminalServerConfiguration
  extends Layer3IpPrefixProperties,
    TerminalServerPatchableProperties {
  /**
   * ARM Resource ID used for the NetworkDevice.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkDeviceId?: string;
}

/** Peering optionA properties */
export interface OptionAProperties extends Layer3IpPrefixProperties {
  /** MTU to use for option A peering. */
  mtu?: number;
  /** Vlan identifier. Example : 501 */
  vlanId?: number;
  /** Peer ASN number.Example : 28 */
  peerASN?: number;
  /** BFD Configuration properties. */
  bfdConfiguration?: FabricBfdConfiguration;
}

/** layer3Configuration */
export interface Layer3Configuration extends Layer3IpPrefixProperties {
  /** importRoutePolicyId */
  importRoutePolicyId?: string;
  /** exportRoutePolicyId */
  exportRoutePolicyId?: string;
  /** ASN of PE devices for CE/PE connectivity.Example : 28 */
  peerASN?: number;
  /** VLAN for CE/PE Layer 3 connectivity.Example : 501 */
  vlanId?: number;
  /**
   * ASN of CE devices for CE/PE connectivity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fabricASN?: number;
}

/** Get Device static interface maps as per topology. */
export interface GetDynamicInterfaceMapsPropertiesItem extends InterfaceStatus {
  /** The interface name. */
  name?: string;
}

/** Route policy statement condition properties. */
export interface StatementConditionProperties
  extends IpCommunityIdList,
    IpExtendedCommunityIdList {
  /** Arm Resource Id of IpPrefix. */
  ipPrefixId?: string;
}

/** IP Community Properties. */
export interface ActionIpCommunityProperties
  extends IpCommunityAddOperationProperties,
    IpCommunityDeleteOperationProperties,
    IpCommunitySetOperationProperties {}

/** IP Extended Community Properties. */
export interface ActionIpExtendedCommunityProperties
  extends IpExtendedCommunityAddOperationProperties,
    IpExtendedCommunityDeleteOperationProperties,
    IpExtendedCommunitySetOperationProperties {}

/** The AccessControlList resource definition. */
export interface AccessControlList extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** IP address family. Example: ipv4 | ipv6. */
  addressFamily: AddressFamily;
  /** Access Control List conditions. */
  conditions: AccessControlListConditionProperties[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The IpCommunity resource definition. */
export interface IpCommunity extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Action to be taken on the configuration. Example: Permit | Deny. */
  action?: CommunityActionTypes;
  /** Supported well known Community List. */
  wellKnownCommunities?: WellKnownCommunities[];
  /** List the communityMembers of IP Community . */
  communityMembers?: string[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The IpExtendedCommunity resource definition. */
export interface IpExtendedCommunity extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Action to be taken on the configuration. Example: Permit | Deny. */
  action?: CommunityActionTypes;
  /** Route Target List.The expected formats are ASN(plain):NN >> example 4294967294:50, ASN.ASN:NN >> example 65533.65333:40, IP-address:NN >> example 10.10.10.10:65535. The possible values of ASN,NN are in range of 0-65535, ASN(plain) is in range of 0-4294967295. */
  routeTargets?: string[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The IPPrefix resource definition. */
export interface IpPrefix extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** IpPrefix contains the list of IP PrefixRules objects. */
  ipPrefixRules: IpPrefixPropertiesIpPrefixRulesItem[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The L2IsolationDomain resource definition. */
export interface L2IsolationDomain extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Network Fabric ARM resource id. */
  networkFabricId?: string;
  /** vlanId. Example: 501. */
  vlanId?: number;
  /** maximum transmission unit. Default value is 1500. */
  mtu?: number;
  /**
   * List of resources the L2 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disabledOnResources?: string[];
  /**
   * state. Example: Enabled | Disabled. It indicates administrative state of the isolationDomain, whether it is enabled or disabled. If enabled, the configuration is applied on the devices. If disabled, the configuration is removed from the devices
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The L3IsolationDomain resource definition. */
export interface L3IsolationDomain extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Advertise Connected Subnets. Ex: "True" | "False". */
  redistributeConnectedSubnets?: RedistributeConnectedSubnets;
  /** Advertise Static Routes. Ex: "True" | "False". */
  redistributeStaticRoutes?: RedistributeStaticRoutes;
  /** List of Ipv4 and Ipv6 route configurations. */
  aggregateRouteConfiguration?: AggregateRouteConfiguration;
  /** L3 Isolation Domain description. */
  description?: string;
  /** Connected Subnet RoutePolicy */
  connectedSubnetRoutePolicy?: L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy;
  /** Network Fabric ARM resource id. */
  networkFabricId?: string;
  /**
   * List of resources the L3 Isolation Domain is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disabledOnResources?: string[];
  /**
   * Administrative state of the IsolationDomain. Example: Enabled | Disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
  /**
   * List of resources the OptionB is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly optionBDisabledOnResources?: string[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The NetworkDevice resource definition. */
export interface NetworkDevice extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** The host Name of the device. */
  hostName?: string;
  /** serialNumber of the format Make;Model;HardwareRevisionId;SerialNumber. Example: Arista;DCS-7280DR3-24;12.05;JPE21116969 */
  serialNumber?: string;
  /**
   * Current version of the device as defined in SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /** Network Device SKU name. */
  networkDeviceSku?: string;
  /** networkDeviceRole is the device role: Example: CE | ToR. */
  networkDeviceRole?: NetworkDeviceRoleTypes;
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Reference to network rack resource id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkRackId?: string;
}

/** The NetworkFabricController resource definition. */
export interface NetworkFabricController extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** As part of an update, the Infrastructure ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Infrastructure services. (This is a Mandatory attribute) */
  infrastructureExpressRouteConnections?: ExpressRouteConnectionInformation[];
  /** As part of an update, the workload ExpressRoute CircuitID should be provided to create and Provision a NFC. This Express route is dedicated for Workload services. (This is a Mandatory attribute). */
  workloadExpressRouteConnections?: ExpressRouteConnectionInformation[];
  /**
   * InfrastructureServices IP ranges.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly infrastructureServices?: InfrastructureServices;
  /**
   * WorkloadServices IP ranges.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workloadServices?: WorkloadServices;
  /** Managed Resource Group configuration properties. */
  managedResourceGroupConfiguration?: ManagedResourceGroupConfiguration;
  /**
   * The NF-ID will be an input parameter used by the NF to link and get associated with the parent NFC Service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkFabricIds?: string[];
  /**
   * A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly workloadManagementNetwork?: boolean;
  /** IPv4 Network Fabric Controller Address Space. */
  ipv4AddressSpace?: string;
  /** IPv6 Network Fabric Controller Address Space. */
  ipv6AddressSpace?: string;
  /**
   * The Operational Status would always be NULL. Look only in to the Provisioning state for the latest status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationalState?: NetworkFabricControllerOperationalState;
  /**
   * Provides you the latest status of the NFC service, whether it is Accepted, updating, Succeeded or Failed. During this process, the states keep changing based on the status of NFC provisioning.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The NetworkFabric resource definition. */
export interface NetworkFabric extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /**
   * List of NetworkRack resource IDs under the Network Fabric. The number of racks allowed depends on the Network Fabric SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly racks?: string[];
  /**
   * List of L2IsolationDomain resource IDs under the Network Fabric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly l2IsolationDomains?: string[];
  /**
   * List of L3IsolationDomain resource IDs under the Network Fabric.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly l3IsolationDomains?: string[];
  /** Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric. */
  networkFabricSku?: string;
  /** Number of racks associated to Network Fabric.Possible values are from 2-8. */
  rackCount?: number;
  /** Number of servers.Possible values are from 1-16. */
  serverCountPerRack?: number;
  /** IPv4Prefix for Management Network. Example: 10.1.0.0/19. */
  ipv4Prefix?: string;
  /** IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59. */
  ipv6Prefix?: string;
  /**
   * Router Id of CE to be used for MP-BGP between PE and CE
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly routerId?: string;
  /** ASN of CE devices for CE/PE connectivity. */
  fabricASN?: number;
  /** Azure resource ID for the NetworkFabricController the NetworkFabric belongs. */
  networkFabricControllerId?: string;
  /** Network and credentials configuration currently applied to terminal server. */
  terminalServerConfiguration?: TerminalServerConfiguration;
  /** Configuration to be used to setup the management network. */
  managementNetworkConfiguration?: ManagementNetworkConfiguration;
  /**
   * Gets the operational state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationalState?: NetworkFabricOperationalState;
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The NetworkRack resource definition. */
export interface NetworkRack extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Network Rack SKU name. */
  networkRackSku: string;
  /** Network Fabric ARM resource id. */
  networkFabricId: string;
  /**
   * List of network device ARM resource ids.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkDevices?: string[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The RoutePolicy resource definition. */
export interface RoutePolicy extends TrackedResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Route Policy statements. */
  statements: RoutePolicyStatementProperties[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Defines the InternalNetwork item. */
export interface InternalNetwork extends ProxyResource {
  /** Switch configuration description. */
  annotation?: string;
  /** Maximum transmission unit. Default value is 1500. */
  mtu?: number;
  /** List with object connected IPv4 Subnets. */
  connectedIPv4Subnets?: ConnectedSubnet[];
  /** List with object connected IPv6 Subnets. */
  connectedIPv6Subnets?: ConnectedSubnet[];
  /** Static Route Configuration properties. */
  staticRouteConfiguration?: StaticRouteConfiguration;
  /** BGP configuration properties */
  bgpConfiguration?: BgpConfiguration;
  /** ARM resource ID of importRoutePolicy. */
  importRoutePolicyId?: string;
  /** ARM resource ID of importRoutePolicy. */
  exportRoutePolicyId?: string;
  /**
   * List of resources the InternalNetwork is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disabledOnResources?: string[];
  /**
   * Administrative state of the InternalNetwork. Example: Enabled | Disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
  /**
   * List of resources the BGP is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bgpDisabledOnResources?: string[];
  /**
   * List of resources the BFD for BGP is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bfdDisabledOnResources?: string[];
  /**
   * List of resources the BFD of StaticRoutes is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly bfdForStaticRoutesDisabledOnResources?: string[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Vlan identifier. Example: 1001. */
  vlanId: number;
}

/** Defines the ExternalNetwork item. */
export interface ExternalNetwork extends ProxyResource {
  /** Switch configuration description. */
  annotation?: string;
  /**
   * Gets the networkToNetworkInterconnectId of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly networkToNetworkInterconnectId?: string;
  /**
   * List of resources the externalNetwork is disabled on. Can be either entire NetworkFabric or NetworkRack.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly disabledOnResources?: string[];
  /**
   * AdministrativeState of the externalNetwork. Example: Enabled | Disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Peering option list. */
  peeringOption: PeeringOption;
  /** option B properties object */
  optionBProperties?: OptionBProperties;
  /** option A properties object */
  optionAProperties?: ExternalNetworkPropertiesOptionAProperties;
  /** ARM resource ID of importRoutePolicy. */
  importRoutePolicyId?: string;
  /** ARM resource ID of exportRoutePolicy. */
  exportRoutePolicyId?: string;
}

/** The NetworkDeviceSku resource definition. */
export interface NetworkDeviceSku extends ProxyResource {
  /** Model of the network device. */
  model: string;
  /** Manufacturer of the network device. */
  manufacturer?: string;
  /** List of network device interfaces. */
  supportedVersions?: SupportedVersionProperties[];
  /** Network device limits. */
  limits?: DeviceLimits;
  /** Available roles for the network device. */
  supportedRoleTypes?: NetworkDeviceRoleName[];
  /** List of network device interfaces. */
  interfaces?: DeviceInterfaceProperties[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Defines the NetworkInterface resource. */
export interface NetworkInterface extends ProxyResource {
  /** Switch configuration description. */
  annotation?: string;
  /**
   * physicalIdentifier of the network interface.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly physicalIdentifier?: string;
  /**
   * administrativeState of the network interface. Example: Enabled | Disabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The arm resource id of the interface or compute server its connected to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectedTo?: string;
  /**
   * The Interface Type. Example: Management/Data
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly interfaceType?: InterfaceType;
  /**
   * ipv4Address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv4Address?: string;
  /**
   * ipv6Address.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipv6Address?: string;
}

/** The NetworkFabricSku resource definition. */
export interface NetworkFabricSku extends ProxyResource {
  /**
   * Type of Network Fabric Sku.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesType?: string;
  /** Maximum number of compute racks available for this Network Fabric SKU. */
  maxComputeRacks?: number;
  /**
   * Minimum supported version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minSupportedVer?: string;
  /**
   * Maximum supported version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maxSupportedVer?: string;
  /**
   * The URI gives full details of sku.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly detailsUri?: string;
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The NetworkToNetworkInterconnect resource definition. */
export interface NetworkToNetworkInterconnect extends ProxyResource {
  /** Type of NNI used. Example: CE | NPB */
  nniType?: NniType;
  /**
   * Gets the administrativeState of the resource. Example -Enabled/Disabled
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly administrativeState?: EnabledDisabledState;
  /** Configuration to use NNI for Infrastructure Management. Example: True/False. */
  isManagementType?: BooleanEnumProperty;
  /** Based on this parameter the layer2/layer3 is made as mandatory. Example: True/False */
  useOptionB?: BooleanEnumProperty;
  /** Common properties for Layer2Configuration. */
  layer2Configuration?: Layer2Configuration;
  /** Common properties for Layer3Configuration. */
  layer3Configuration?: Layer3Configuration;
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The NetworkRackSku resource definition. */
export interface NetworkRackSku extends ProxyResource {
  /** The role of the Network Rack: Aggregate or Compute. */
  roleName: NetworkRackRoleName;
  /** Maximum number of servers available for this SKU. */
  maximumServerCount?: number;
  /** Maximum number of storage devices available for this SKU. */
  maximumStorageCount?: number;
  /** Maximum number of network uplinks available for this SKU. */
  maximumUplinks?: number;
  /** List of network device properties / role for the Network Rack. */
  networkDevices?: NetworkDeviceRoleProperties[];
  /**
   * Gets the provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** option A properties object */
export interface ExternalNetworkPropertiesOptionAProperties
  extends Layer3OptionAProperties {}

/** Defines headers for IpCommunities_create operation. */
export interface IpCommunitiesCreateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for IpCommunities_update operation. */
export interface IpCommunitiesUpdateHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for IpCommunities_delete operation. */
export interface IpCommunitiesDeleteHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for IpExtendedCommunities_create operation. */
export interface IpExtendedCommunitiesCreateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for IpExtendedCommunities_update operation. */
export interface IpExtendedCommunitiesUpdateHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for IpExtendedCommunities_delete operation. */
export interface IpExtendedCommunitiesDeleteHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for IpPrefixes_create operation. */
export interface IpPrefixesCreateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for IpPrefixes_update operation. */
export interface IpPrefixesUpdateHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for IpPrefixes_delete operation. */
export interface IpPrefixesDeleteHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for L2IsolationDomains_update operation. */
export interface L2IsolationDomainsUpdateHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for L2IsolationDomains_updateAdministrativeState operation. */
export interface L2IsolationDomainsUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L2IsolationDomains_clearArpTable operation. */
export interface L2IsolationDomainsClearArpTableHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L2IsolationDomains_clearNeighborTable operation. */
export interface L2IsolationDomainsClearNeighborTableHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L2IsolationDomains_getArpEntries operation. */
export interface L2IsolationDomainsGetArpEntriesHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L3IsolationDomains_update operation. */
export interface L3IsolationDomainsUpdateHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for L3IsolationDomains_updateAdministrativeState operation. */
export interface L3IsolationDomainsUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L3IsolationDomains_updateOptionBAdministrativeState operation. */
export interface L3IsolationDomainsUpdateOptionBAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L3IsolationDomains_clearArpTable operation. */
export interface L3IsolationDomainsClearArpTableHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for L3IsolationDomains_clearNeighborTable operation. */
export interface L3IsolationDomainsClearNeighborTableHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for InternalNetworks_updateAdministrativeState operation. */
export interface InternalNetworksUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for InternalNetworks_updateBgpAdministrativeState operation. */
export interface InternalNetworksUpdateBgpAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for InternalNetworks_updateBfdForBgpAdministrativeState operation. */
export interface InternalNetworksUpdateBfdForBgpAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for InternalNetworks_clearIpv6Neighbors operation. */
export interface InternalNetworksClearIpv6NeighborsHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for InternalNetworks_clearArpEntries operation. */
export interface InternalNetworksClearArpEntriesHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for InternalNetworks_updateBfdForStaticRouteAdministrativeState operation. */
export interface InternalNetworksUpdateBfdForStaticRouteAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for ExternalNetworks_updateAdministrativeState operation. */
export interface ExternalNetworksUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for ExternalNetworks_updateBgpAdministrativeState operation. */
export interface ExternalNetworksUpdateBgpAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for ExternalNetworks_updateBfdForBgpAdministrativeState operation. */
export interface ExternalNetworksUpdateBfdForBgpAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for ExternalNetworks_clearIpv6Neighbors operation. */
export interface ExternalNetworksClearIpv6NeighborsHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for ExternalNetworks_clearArpEntries operation. */
export interface ExternalNetworksClearArpEntriesHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkDevices_update operation. */
export interface NetworkDevicesUpdateHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for NetworkDevices_reboot operation. */
export interface NetworkDevicesRebootHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkDevices_restoreConfig operation. */
export interface NetworkDevicesRestoreConfigHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkDevices_updateVersion operation. */
export interface NetworkDevicesUpdateVersionHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkDevices_generateSupportPackage operation. */
export interface NetworkDevicesGenerateSupportPackageHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkDevices_updatePowerCycle operation. */
export interface NetworkDevicesUpdatePowerCycleHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkDevices_getStatus operation. */
export interface NetworkDevicesGetStatusHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkDevices_getStaticInterfaceMaps operation. */
export interface NetworkDevicesGetStaticInterfaceMapsHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkDevices_getDynamicInterfaceMaps operation. */
export interface NetworkDevicesGetDynamicInterfaceMapsHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkInterfaces_getStatus operation. */
export interface NetworkInterfacesGetStatusHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkInterfaces_updateAdministrativeState operation. */
export interface NetworkInterfacesUpdateAdministrativeStateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabricControllers_update operation. */
export interface NetworkFabricControllersUpdateHeaders {
  /** Tracking URL for long running operation. */
  location?: string;
}

/** Defines headers for NetworkFabricControllers_delete operation. */
export interface NetworkFabricControllersDeleteHeaders {
  /** Tracking URL for long running operation. */
  location?: string;
}

/** Defines headers for NetworkFabricControllers_enableWorkloadManagementNetwork operation. */
export interface NetworkFabricControllersEnableWorkloadManagementNetworkHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabricControllers_disableWorkloadManagementNetwork operation. */
export interface NetworkFabricControllersDisableWorkloadManagementNetworkHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_create operation. */
export interface NetworkFabricsCreateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for NetworkFabrics_update operation. */
export interface NetworkFabricsUpdateHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_delete operation. */
export interface NetworkFabricsDeleteHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_provision operation. */
export interface NetworkFabricsProvisionHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkFabrics_deprovision operation. */
export interface NetworkFabricsDeprovisionHeaders {
  /** The URL to retrieve the status of the asynchronous operation. */
  location?: string;
}

/** Defines headers for NetworkRacks_update operation. */
export interface NetworkRacksUpdateHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for RoutePolicies_update operation. */
export interface RoutePoliciesUpdateHeaders {
  /** Tracking URL for long running operation. */
  azureAsyncOperation?: string;
}

/** Known values of {@link AddressFamily} that the service accepts. */
export enum KnownAddressFamily {
  /** Ipv4 */
  Ipv4 = "ipv4",
  /** Ipv6 */
  Ipv6 = "ipv6"
}

/**
 * Defines values for AddressFamily. \
 * {@link KnownAddressFamily} can be used interchangeably with AddressFamily,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ipv4** \
 * **ipv6**
 */
export type AddressFamily = string;

/** Known values of {@link ConditionActionType} that the service accepts. */
export enum KnownConditionActionType {
  /** Allow */
  Allow = "allow",
  /** Deny */
  Deny = "deny"
}

/**
 * Defines values for ConditionActionType. \
 * {@link KnownConditionActionType} can be used interchangeably with ConditionActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **allow** \
 * **deny**
 */
export type ConditionActionType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Updating */
  Updating = "Updating",
  /** Canceled */
  Canceled = "Canceled",
  /** Deleting */
  Deleting = "Deleting",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Updating** \
 * **Canceled** \
 * **Deleting** \
 * **Failed**
 */
export type ProvisioningState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link CommunityActionTypes} that the service accepts. */
export enum KnownCommunityActionTypes {
  /** Permit */
  Permit = "Permit",
  /** Deny */
  Deny = "Deny"
}

/**
 * Defines values for CommunityActionTypes. \
 * {@link KnownCommunityActionTypes} can be used interchangeably with CommunityActionTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Permit** \
 * **Deny**
 */
export type CommunityActionTypes = string;

/** Known values of {@link WellKnownCommunities} that the service accepts. */
export enum KnownWellKnownCommunities {
  /** Internet */
  Internet = "Internet",
  /** LocalAS */
  LocalAS = "LocalAS",
  /** NoAdvertise */
  NoAdvertise = "NoAdvertise",
  /** NoExport */
  NoExport = "NoExport",
  /** GShut */
  GShut = "GShut"
}

/**
 * Defines values for WellKnownCommunities. \
 * {@link KnownWellKnownCommunities} can be used interchangeably with WellKnownCommunities,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internet** \
 * **LocalAS** \
 * **NoAdvertise** \
 * **NoExport** \
 * **GShut**
 */
export type WellKnownCommunities = string;

/** Known values of {@link Condition} that the service accepts. */
export enum KnownCondition {
  /** EqualTo */
  EqualTo = "EqualTo",
  /** GreaterThanOrEqualTo */
  GreaterThanOrEqualTo = "GreaterThanOrEqualTo",
  /** LesserThanOrEqualTo */
  LesserThanOrEqualTo = "LesserThanOrEqualTo"
}

/**
 * Defines values for Condition. \
 * {@link KnownCondition} can be used interchangeably with Condition,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EqualTo** \
 * **GreaterThanOrEqualTo** \
 * **LesserThanOrEqualTo**
 */
export type Condition = string;

/** Known values of {@link EnabledDisabledState} that the service accepts. */
export enum KnownEnabledDisabledState {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for EnabledDisabledState. \
 * {@link KnownEnabledDisabledState} can be used interchangeably with EnabledDisabledState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type EnabledDisabledState = string;

/** Known values of {@link AdministrativeState} that the service accepts. */
export enum KnownAdministrativeState {
  /** Enable */
  Enable = "Enable",
  /** Disable */
  Disable = "Disable"
}

/**
 * Defines values for AdministrativeState. \
 * {@link KnownAdministrativeState} can be used interchangeably with AdministrativeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enable** \
 * **Disable**
 */
export type AdministrativeState = string;

/** Known values of {@link RedistributeConnectedSubnets} that the service accepts. */
export enum KnownRedistributeConnectedSubnets {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for RedistributeConnectedSubnets. \
 * {@link KnownRedistributeConnectedSubnets} can be used interchangeably with RedistributeConnectedSubnets,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type RedistributeConnectedSubnets = string;

/** Known values of {@link RedistributeStaticRoutes} that the service accepts. */
export enum KnownRedistributeStaticRoutes {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for RedistributeStaticRoutes. \
 * {@link KnownRedistributeStaticRoutes} can be used interchangeably with RedistributeStaticRoutes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type RedistributeStaticRoutes = string;

/** Known values of {@link BooleanEnumProperty} that the service accepts. */
export enum KnownBooleanEnumProperty {
  /** True */
  True = "True",
  /** False */
  False = "False"
}

/**
 * Defines values for BooleanEnumProperty. \
 * {@link KnownBooleanEnumProperty} can be used interchangeably with BooleanEnumProperty,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **True** \
 * **False**
 */
export type BooleanEnumProperty = string;

/** Known values of {@link AllowASOverride} that the service accepts. */
export enum KnownAllowASOverride {
  /** Enable */
  Enable = "Enable",
  /** Disable */
  Disable = "Disable"
}

/**
 * Defines values for AllowASOverride. \
 * {@link KnownAllowASOverride} can be used interchangeably with AllowASOverride,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enable** \
 * **Disable**
 */
export type AllowASOverride = string;

/** Known values of {@link PeeringOption} that the service accepts. */
export enum KnownPeeringOption {
  /** OptionA */
  OptionA = "OptionA",
  /** OptionB */
  OptionB = "OptionB"
}

/**
 * Defines values for PeeringOption. \
 * {@link KnownPeeringOption} can be used interchangeably with PeeringOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OptionA** \
 * **OptionB**
 */
export type PeeringOption = string;

/** Known values of {@link IsCurrentVersion} that the service accepts. */
export enum KnownIsCurrentVersion {
  /** True */
  True = "true",
  /** False */
  False = "false"
}

/**
 * Defines values for IsCurrentVersion. \
 * {@link KnownIsCurrentVersion} can be used interchangeably with IsCurrentVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true** \
 * **false**
 */
export type IsCurrentVersion = string;

/** Known values of {@link IsTestVersion} that the service accepts. */
export enum KnownIsTestVersion {
  /** True */
  True = "true",
  /** False */
  False = "false"
}

/**
 * Defines values for IsTestVersion. \
 * {@link KnownIsTestVersion} can be used interchangeably with IsTestVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true** \
 * **false**
 */
export type IsTestVersion = string;

/** Known values of {@link NetworkDeviceRoleName} that the service accepts. */
export enum KnownNetworkDeviceRoleName {
  /** CE */
  CE = "CE",
  /** ToR */
  ToR = "ToR",
  /** NPB */
  NPB = "NPB",
  /** TS */
  TS = "TS",
  /** Management */
  Management = "Management"
}

/**
 * Defines values for NetworkDeviceRoleName. \
 * {@link KnownNetworkDeviceRoleName} can be used interchangeably with NetworkDeviceRoleName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CE** \
 * **ToR** \
 * **NPB** \
 * **TS** \
 * **Management**
 */
export type NetworkDeviceRoleName = string;

/** Known values of {@link NetworkDeviceRoleTypes} that the service accepts. */
export enum KnownNetworkDeviceRoleTypes {
  /** CE */
  CE = "CE",
  /** ToR */
  ToR = "ToR",
  /** NPB */
  NPB = "NPB",
  /** TS */
  TS = "TS",
  /** Management */
  Management = "Management"
}

/**
 * Defines values for NetworkDeviceRoleTypes. \
 * {@link KnownNetworkDeviceRoleTypes} can be used interchangeably with NetworkDeviceRoleTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CE** \
 * **ToR** \
 * **NPB** \
 * **TS** \
 * **Management**
 */
export type NetworkDeviceRoleTypes = string;

/** Known values of {@link InterfaceType} that the service accepts. */
export enum KnownInterfaceType {
  /** Management */
  Management = "Management",
  /** Data */
  Data = "Data"
}

/**
 * Defines values for InterfaceType. \
 * {@link KnownInterfaceType} can be used interchangeably with InterfaceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Management** \
 * **Data**
 */
export type InterfaceType = string;

/** Known values of {@link PowerEnd} that the service accepts. */
export enum KnownPowerEnd {
  /** Primary */
  Primary = "Primary",
  /** Secondary */
  Secondary = "Secondary"
}

/**
 * Defines values for PowerEnd. \
 * {@link KnownPowerEnd} can be used interchangeably with PowerEnd,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Primary** \
 * **Secondary**
 */
export type PowerEnd = string;

/** Known values of {@link State} that the service accepts. */
export enum KnownState {
  /** On */
  On = "On",
  /** Off */
  Off = "Off"
}

/**
 * Defines values for State. \
 * {@link KnownState} can be used interchangeably with State,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **On** \
 * **Off**
 */
export type State = string;

/** Known values of {@link OperationalStatus} that the service accepts. */
export enum KnownOperationalStatus {
  /** Booted */
  Booted = "Booted",
  /** BootPrompt */
  BootPrompt = "BootPrompt",
  /** Ztp */
  Ztp = "Ztp"
}

/**
 * Defines values for OperationalStatus. \
 * {@link KnownOperationalStatus} can be used interchangeably with OperationalStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Booted** \
 * **BootPrompt** \
 * **Ztp**
 */
export type OperationalStatus = string;

/** Known values of {@link PowerCycleState} that the service accepts. */
export enum KnownPowerCycleState {
  /** On */
  On = "On",
  /** Off */
  Off = "Off"
}

/**
 * Defines values for PowerCycleState. \
 * {@link KnownPowerCycleState} can be used interchangeably with PowerCycleState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **On** \
 * **Off**
 */
export type PowerCycleState = string;

/** Known values of {@link NetworkFabricControllerOperationalState} that the service accepts. */
export enum KnownNetworkFabricControllerOperationalState {
  /** Configuring */
  Configuring = "Configuring",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for NetworkFabricControllerOperationalState. \
 * {@link KnownNetworkFabricControllerOperationalState} can be used interchangeably with NetworkFabricControllerOperationalState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Configuring** \
 * **Succeeded** \
 * **Failed**
 */
export type NetworkFabricControllerOperationalState = string;

/** Known values of {@link NetworkFabricOperationalState} that the service accepts. */
export enum KnownNetworkFabricOperationalState {
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Provisioned */
  Provisioned = "Provisioned",
  /** ErrorProvisioning */
  ErrorProvisioning = "ErrorProvisioning",
  /** Deprovisioning */
  Deprovisioning = "Deprovisioning",
  /** Deprovisioned */
  Deprovisioned = "Deprovisioned",
  /** ErrorDeprovisioning */
  ErrorDeprovisioning = "ErrorDeprovisioning",
  /** DeferredControl */
  DeferredControl = "DeferredControl"
}

/**
 * Defines values for NetworkFabricOperationalState. \
 * {@link KnownNetworkFabricOperationalState} can be used interchangeably with NetworkFabricOperationalState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Provisioning** \
 * **Provisioned** \
 * **ErrorProvisioning** \
 * **Deprovisioning** \
 * **Deprovisioned** \
 * **ErrorDeprovisioning** \
 * **DeferredControl**
 */
export type NetworkFabricOperationalState = string;

/** Known values of {@link NniType} that the service accepts. */
export enum KnownNniType {
  /** CE */
  CE = "CE",
  /** NPB */
  NPB = "NPB"
}

/**
 * Defines values for NniType. \
 * {@link KnownNniType} can be used interchangeably with NniType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CE** \
 * **NPB**
 */
export type NniType = string;

/** Known values of {@link NetworkRackRoleName} that the service accepts. */
export enum KnownNetworkRackRoleName {
  /** ComputeRack */
  ComputeRack = "ComputeRack",
  /** AggregateRack */
  AggregateRack = "AggregateRack"
}

/**
 * Defines values for NetworkRackRoleName. \
 * {@link KnownNetworkRackRoleName} can be used interchangeably with NetworkRackRoleName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ComputeRack** \
 * **AggregateRack**
 */
export type NetworkRackRoleName = string;

/** Known values of {@link NetworkDeviceRackRoleType} that the service accepts. */
export enum KnownNetworkDeviceRackRoleType {
  /** CE */
  CE = "CE",
  /** ToR */
  ToR = "ToR",
  /** NPB */
  NPB = "NPB",
  /** TS */
  TS = "TS",
  /** Management */
  Management = "Management"
}

/**
 * Defines values for NetworkDeviceRackRoleType. \
 * {@link KnownNetworkDeviceRackRoleType} can be used interchangeably with NetworkDeviceRackRoleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CE** \
 * **ToR** \
 * **NPB** \
 * **TS** \
 * **Management**
 */
export type NetworkDeviceRackRoleType = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link ExpressRouteConnectionState} that the service accepts. */
export enum KnownExpressRouteConnectionState {
  /** Connecting */
  Connecting = "Connecting",
  /** Connected */
  Connected = "Connected",
  /** Disconnected */
  Disconnected = "Disconnected"
}

/**
 * Defines values for ExpressRouteConnectionState. \
 * {@link KnownExpressRouteConnectionState} can be used interchangeably with ExpressRouteConnectionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Connecting** \
 * **Connected** \
 * **Disconnected**
 */
export type ExpressRouteConnectionState = string;

/** Known values of {@link TerminalServerConnectivityState} that the service accepts. */
export enum KnownTerminalServerConnectivityState {
  /** Ipv4Reachable */
  Ipv4Reachable = "Ipv4Reachable",
  /** Ipv4Unreachable */
  Ipv4Unreachable = "Ipv4Unreachable"
}

/**
 * Defines values for TerminalServerConnectivityState. \
 * {@link KnownTerminalServerConnectivityState} can be used interchangeably with TerminalServerConnectivityState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ipv4Reachable** \
 * **Ipv4Unreachable**
 */
export type TerminalServerConnectivityState = string;

/** Known values of {@link OperationalState} that the service accepts. */
export enum KnownOperationalState {
  /** Configuring */
  Configuring = "Configuring",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for OperationalState. \
 * {@link KnownOperationalState} can be used interchangeably with OperationalState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Configuring** \
 * **Succeeded** \
 * **Failed**
 */
export type OperationalState = string;

/** Known values of {@link ReachabilityState} that the service accepts. */
export enum KnownReachabilityState {
  /** Reachable */
  Reachable = "Reachable",
  /** Unreachable */
  Unreachable = "Unreachable"
}

/**
 * Defines values for ReachabilityState. \
 * {@link KnownReachabilityState} can be used interchangeably with ReachabilityState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Reachable** \
 * **Unreachable**
 */
export type ReachabilityState = string;

/** Known values of {@link FailedSucceededState} that the service accepts. */
export enum KnownFailedSucceededState {
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for FailedSucceededState. \
 * {@link KnownFailedSucceededState} can be used interchangeably with FailedSucceededState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed**
 */
export type FailedSucceededState = string;

/** Optional parameters. */
export interface AccessControlListsCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type AccessControlListsCreateResponse = AccessControlList;

/** Optional parameters. */
export interface AccessControlListsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AccessControlListsGetResponse = AccessControlList;

/** Optional parameters. */
export interface AccessControlListsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type AccessControlListsUpdateResponse = AccessControlList;

/** Optional parameters. */
export interface AccessControlListsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AccessControlListsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type AccessControlListsListByResourceGroupResponse = AccessControlListsListResult;

/** Optional parameters. */
export interface AccessControlListsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type AccessControlListsListBySubscriptionResponse = AccessControlListsListResult;

/** Optional parameters. */
export interface AccessControlListsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type AccessControlListsListByResourceGroupNextResponse = AccessControlListsListResult;

/** Optional parameters. */
export interface AccessControlListsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type AccessControlListsListBySubscriptionNextResponse = AccessControlListsListResult;

/** Optional parameters. */
export interface IpCommunitiesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type IpCommunitiesCreateResponse = IpCommunity;

/** Optional parameters. */
export interface IpCommunitiesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IpCommunitiesGetResponse = IpCommunity;

/** Optional parameters. */
export interface IpCommunitiesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type IpCommunitiesUpdateResponse = IpCommunity;

/** Optional parameters. */
export interface IpCommunitiesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface IpCommunitiesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type IpCommunitiesListByResourceGroupResponse = IpCommunitiesListResult;

/** Optional parameters. */
export interface IpCommunitiesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type IpCommunitiesListBySubscriptionResponse = IpCommunitiesListResult;

/** Optional parameters. */
export interface IpCommunitiesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type IpCommunitiesListByResourceGroupNextResponse = IpCommunitiesListResult;

/** Optional parameters. */
export interface IpCommunitiesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type IpCommunitiesListBySubscriptionNextResponse = IpCommunitiesListResult;

/** Optional parameters. */
export interface IpExtendedCommunitiesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type IpExtendedCommunitiesCreateResponse = IpExtendedCommunity;

/** Optional parameters. */
export interface IpExtendedCommunitiesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IpExtendedCommunitiesGetResponse = IpExtendedCommunity;

/** Optional parameters. */
export interface IpExtendedCommunitiesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type IpExtendedCommunitiesUpdateResponse = IpExtendedCommunity;

/** Optional parameters. */
export interface IpExtendedCommunitiesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface IpExtendedCommunitiesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type IpExtendedCommunitiesListByResourceGroupResponse = IpExtendedCommunityListResult;

/** Optional parameters. */
export interface IpExtendedCommunitiesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type IpExtendedCommunitiesListBySubscriptionResponse = IpExtendedCommunityListResult;

/** Optional parameters. */
export interface IpExtendedCommunitiesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type IpExtendedCommunitiesListByResourceGroupNextResponse = IpExtendedCommunityListResult;

/** Optional parameters. */
export interface IpExtendedCommunitiesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type IpExtendedCommunitiesListBySubscriptionNextResponse = IpExtendedCommunityListResult;

/** Optional parameters. */
export interface IpPrefixesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type IpPrefixesCreateResponse = IpPrefix;

/** Optional parameters. */
export interface IpPrefixesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IpPrefixesGetResponse = IpPrefix;

/** Optional parameters. */
export interface IpPrefixesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type IpPrefixesUpdateResponse = IpPrefix;

/** Optional parameters. */
export interface IpPrefixesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface IpPrefixesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type IpPrefixesListByResourceGroupResponse = IpPrefixesListResult;

/** Optional parameters. */
export interface IpPrefixesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type IpPrefixesListBySubscriptionResponse = IpPrefixesListResult;

/** Optional parameters. */
export interface IpPrefixesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type IpPrefixesListByResourceGroupNextResponse = IpPrefixesListResult;

/** Optional parameters. */
export interface IpPrefixesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type IpPrefixesListBySubscriptionNextResponse = IpPrefixesListResult;

/** Optional parameters. */
export interface L2IsolationDomainsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type L2IsolationDomainsCreateResponse = L2IsolationDomain;

/** Optional parameters. */
export interface L2IsolationDomainsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type L2IsolationDomainsGetResponse = L2IsolationDomain;

/** Optional parameters. */
export interface L2IsolationDomainsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type L2IsolationDomainsUpdateResponse = L2IsolationDomain;

/** Optional parameters. */
export interface L2IsolationDomainsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface L2IsolationDomainsUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type L2IsolationDomainsUpdateAdministrativeStateResponse = L2IsolationDomainsUpdateAdministrativeStateHeaders;

/** Optional parameters. */
export interface L2IsolationDomainsClearArpTableOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the clearArpTable operation. */
export type L2IsolationDomainsClearArpTableResponse = L2IsolationDomainsClearArpTableHeaders;

/** Optional parameters. */
export interface L2IsolationDomainsClearNeighborTableOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the clearNeighborTable operation. */
export type L2IsolationDomainsClearNeighborTableResponse = L2IsolationDomainsClearNeighborTableHeaders;

/** Optional parameters. */
export interface L2IsolationDomainsGetArpEntriesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getArpEntries operation. */
export type L2IsolationDomainsGetArpEntriesResponse = L2IsolationDomainsGetArpEntriesHeaders & {
  [propertyName: string]: ARPProperties;
};

/** Optional parameters. */
export interface L2IsolationDomainsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type L2IsolationDomainsListByResourceGroupResponse = L2IsolationDomainsListResult;

/** Optional parameters. */
export interface L2IsolationDomainsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type L2IsolationDomainsListBySubscriptionResponse = L2IsolationDomainsListResult;

/** Optional parameters. */
export interface L2IsolationDomainsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type L2IsolationDomainsListByResourceGroupNextResponse = L2IsolationDomainsListResult;

/** Optional parameters. */
export interface L2IsolationDomainsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type L2IsolationDomainsListBySubscriptionNextResponse = L2IsolationDomainsListResult;

/** Optional parameters. */
export interface L3IsolationDomainsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type L3IsolationDomainsCreateResponse = L3IsolationDomain;

/** Optional parameters. */
export interface L3IsolationDomainsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type L3IsolationDomainsGetResponse = L3IsolationDomain;

/** Optional parameters. */
export interface L3IsolationDomainsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type L3IsolationDomainsUpdateResponse = L3IsolationDomain;

/** Optional parameters. */
export interface L3IsolationDomainsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface L3IsolationDomainsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type L3IsolationDomainsListByResourceGroupResponse = L3IsolationDomainsListResult;

/** Optional parameters. */
export interface L3IsolationDomainsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type L3IsolationDomainsListBySubscriptionResponse = L3IsolationDomainsListResult;

/** Optional parameters. */
export interface L3IsolationDomainsUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type L3IsolationDomainsUpdateAdministrativeStateResponse = L3IsolationDomainsUpdateAdministrativeStateHeaders;

/** Optional parameters. */
export interface L3IsolationDomainsUpdateOptionBAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateOptionBAdministrativeState operation. */
export type L3IsolationDomainsUpdateOptionBAdministrativeStateResponse = L3IsolationDomainsUpdateOptionBAdministrativeStateHeaders;

/** Optional parameters. */
export interface L3IsolationDomainsClearArpTableOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the clearArpTable operation. */
export type L3IsolationDomainsClearArpTableResponse = L3IsolationDomainsClearArpTableHeaders;

/** Optional parameters. */
export interface L3IsolationDomainsClearNeighborTableOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the clearNeighborTable operation. */
export type L3IsolationDomainsClearNeighborTableResponse = L3IsolationDomainsClearNeighborTableHeaders;

/** Optional parameters. */
export interface L3IsolationDomainsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type L3IsolationDomainsListByResourceGroupNextResponse = L3IsolationDomainsListResult;

/** Optional parameters. */
export interface L3IsolationDomainsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type L3IsolationDomainsListBySubscriptionNextResponse = L3IsolationDomainsListResult;

/** Optional parameters. */
export interface InternalNetworksCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type InternalNetworksCreateResponse = InternalNetwork;

/** Optional parameters. */
export interface InternalNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type InternalNetworksGetResponse = InternalNetwork;

/** Optional parameters. */
export interface InternalNetworksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type InternalNetworksUpdateResponse = InternalNetwork;

/** Optional parameters. */
export interface InternalNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface InternalNetworksListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type InternalNetworksListResponse = InternalNetworksList;

/** Optional parameters. */
export interface InternalNetworksUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type InternalNetworksUpdateAdministrativeStateResponse = InternalNetworksUpdateAdministrativeStateHeaders;

/** Optional parameters. */
export interface InternalNetworksUpdateBgpAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateBgpAdministrativeState operation. */
export type InternalNetworksUpdateBgpAdministrativeStateResponse = InternalNetworksUpdateBgpAdministrativeStateHeaders;

/** Optional parameters. */
export interface InternalNetworksUpdateBfdForBgpAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateBfdForBgpAdministrativeState operation. */
export type InternalNetworksUpdateBfdForBgpAdministrativeStateResponse = InternalNetworksUpdateBfdForBgpAdministrativeStateHeaders;

/** Optional parameters. */
export interface InternalNetworksClearIpv6NeighborsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the clearIpv6Neighbors operation. */
export type InternalNetworksClearIpv6NeighborsResponse = InternalNetworksClearIpv6NeighborsHeaders;

/** Optional parameters. */
export interface InternalNetworksClearArpEntriesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the clearArpEntries operation. */
export type InternalNetworksClearArpEntriesResponse = InternalNetworksClearArpEntriesHeaders;

/** Optional parameters. */
export interface InternalNetworksUpdateBfdForStaticRouteAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateBfdForStaticRouteAdministrativeState operation. */
export type InternalNetworksUpdateBfdForStaticRouteAdministrativeStateResponse = InternalNetworksUpdateBfdForStaticRouteAdministrativeStateHeaders;

/** Optional parameters. */
export interface InternalNetworksListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type InternalNetworksListNextResponse = InternalNetworksList;

/** Optional parameters. */
export interface ExternalNetworksCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type ExternalNetworksCreateResponse = ExternalNetwork;

/** Optional parameters. */
export interface ExternalNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ExternalNetworksGetResponse = ExternalNetwork;

/** Optional parameters. */
export interface ExternalNetworksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ExternalNetworksUpdateResponse = ExternalNetwork;

/** Optional parameters. */
export interface ExternalNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ExternalNetworksListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ExternalNetworksListResponse = ExternalNetworksList;

/** Optional parameters. */
export interface ExternalNetworksUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type ExternalNetworksUpdateAdministrativeStateResponse = ExternalNetworksUpdateAdministrativeStateHeaders;

/** Optional parameters. */
export interface ExternalNetworksUpdateBgpAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateBgpAdministrativeState operation. */
export type ExternalNetworksUpdateBgpAdministrativeStateResponse = ExternalNetworksUpdateBgpAdministrativeStateHeaders;

/** Optional parameters. */
export interface ExternalNetworksUpdateBfdForBgpAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateBfdForBgpAdministrativeState operation. */
export type ExternalNetworksUpdateBfdForBgpAdministrativeStateResponse = ExternalNetworksUpdateBfdForBgpAdministrativeStateHeaders;

/** Optional parameters. */
export interface ExternalNetworksClearIpv6NeighborsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the clearIpv6Neighbors operation. */
export type ExternalNetworksClearIpv6NeighborsResponse = ExternalNetworksClearIpv6NeighborsHeaders;

/** Optional parameters. */
export interface ExternalNetworksClearArpEntriesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the clearArpEntries operation. */
export type ExternalNetworksClearArpEntriesResponse = ExternalNetworksClearArpEntriesHeaders;

/** Optional parameters. */
export interface ExternalNetworksListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ExternalNetworksListNextResponse = ExternalNetworksList;

/** Optional parameters. */
export interface NetworkDeviceSkusGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkDeviceSkusGetResponse = NetworkDeviceSku;

/** Optional parameters. */
export interface NetworkDeviceSkusListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkDeviceSkusListBySubscriptionResponse = NetworkDeviceSkusListResult;

/** Optional parameters. */
export interface NetworkDeviceSkusListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkDeviceSkusListBySubscriptionNextResponse = NetworkDeviceSkusListResult;

/** Optional parameters. */
export interface NetworkDevicesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkDevicesCreateResponse = NetworkDevice;

/** Optional parameters. */
export interface NetworkDevicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkDevicesGetResponse = NetworkDevice;

/** Optional parameters. */
export interface NetworkDevicesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkDevicesUpdateResponse = NetworkDevice;

/** Optional parameters. */
export interface NetworkDevicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkDevicesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NetworkDevicesListByResourceGroupResponse = NetworkDevicesListResult;

/** Optional parameters. */
export interface NetworkDevicesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkDevicesListBySubscriptionResponse = NetworkDevicesListResult;

/** Optional parameters. */
export interface NetworkDevicesRebootOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the reboot operation. */
export type NetworkDevicesRebootResponse = NetworkDevicesRebootHeaders;

/** Optional parameters. */
export interface NetworkDevicesRestoreConfigOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the restoreConfig operation. */
export type NetworkDevicesRestoreConfigResponse = NetworkDevicesRestoreConfigHeaders;

/** Optional parameters. */
export interface NetworkDevicesUpdateVersionOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateVersion operation. */
export type NetworkDevicesUpdateVersionResponse = NetworkDevicesUpdateVersionHeaders;

/** Optional parameters. */
export interface NetworkDevicesGenerateSupportPackageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the generateSupportPackage operation. */
export type NetworkDevicesGenerateSupportPackageResponse = NetworkDevicesGenerateSupportPackageHeaders &
  SupportPackageProperties;

/** Optional parameters. */
export interface NetworkDevicesUpdatePowerCycleOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updatePowerCycle operation. */
export type NetworkDevicesUpdatePowerCycleResponse = NetworkDevicesUpdatePowerCycleHeaders;

/** Optional parameters. */
export interface NetworkDevicesGetStatusOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getStatus operation. */
export type NetworkDevicesGetStatusResponse = NetworkDevicesGetStatusHeaders &
  GetDeviceStatusProperties;

/** Optional parameters. */
export interface NetworkDevicesGetStaticInterfaceMapsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getStaticInterfaceMaps operation. */
export type NetworkDevicesGetStaticInterfaceMapsResponse = NetworkDevicesGetStaticInterfaceMapsHeaders &
  GetStaticInterfaceMapsPropertiesItem[];

/** Optional parameters. */
export interface NetworkDevicesGetDynamicInterfaceMapsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getDynamicInterfaceMaps operation. */
export type NetworkDevicesGetDynamicInterfaceMapsResponse = NetworkDevicesGetDynamicInterfaceMapsHeaders &
  GetDynamicInterfaceMapsPropertiesItem[];

/** Optional parameters. */
export interface NetworkDevicesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NetworkDevicesListByResourceGroupNextResponse = NetworkDevicesListResult;

/** Optional parameters. */
export interface NetworkDevicesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkDevicesListBySubscriptionNextResponse = NetworkDevicesListResult;

/** Optional parameters. */
export interface NetworkInterfacesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkInterfacesCreateResponse = NetworkInterface;

/** Optional parameters. */
export interface NetworkInterfacesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkInterfacesGetResponse = NetworkInterface;

/** Optional parameters. */
export interface NetworkInterfacesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkInterfacesUpdateResponse = NetworkInterface;

/** Optional parameters. */
export interface NetworkInterfacesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkInterfacesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type NetworkInterfacesListResponse = NetworkInterfacesList;

/** Optional parameters. */
export interface NetworkInterfacesGetStatusOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getStatus operation. */
export type NetworkInterfacesGetStatusResponse = NetworkInterfacesGetStatusHeaders &
  InterfaceStatus;

/** Optional parameters. */
export interface NetworkInterfacesUpdateAdministrativeStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateAdministrativeState operation. */
export type NetworkInterfacesUpdateAdministrativeStateResponse = NetworkInterfacesUpdateAdministrativeStateHeaders;

/** Optional parameters. */
export interface NetworkInterfacesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type NetworkInterfacesListNextResponse = NetworkInterfacesList;

/** Optional parameters. */
export interface NetworkFabricControllersCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkFabricControllersCreateResponse = NetworkFabricController;

/** Optional parameters. */
export interface NetworkFabricControllersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkFabricControllersGetResponse = NetworkFabricController;

/** Optional parameters. */
export interface NetworkFabricControllersUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkFabricControllersUpdateResponse = NetworkFabricController;

/** Optional parameters. */
export interface NetworkFabricControllersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkFabricControllersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NetworkFabricControllersListByResourceGroupResponse = NetworkFabricControllersListResult;

/** Optional parameters. */
export interface NetworkFabricControllersListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkFabricControllersListBySubscriptionResponse = NetworkFabricControllersListResult;

/** Optional parameters. */
export interface NetworkFabricControllersEnableWorkloadManagementNetworkOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the enableWorkloadManagementNetwork operation. */
export type NetworkFabricControllersEnableWorkloadManagementNetworkResponse = NetworkFabricControllersEnableWorkloadManagementNetworkHeaders;

/** Optional parameters. */
export interface NetworkFabricControllersDisableWorkloadManagementNetworkOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the disableWorkloadManagementNetwork operation. */
export type NetworkFabricControllersDisableWorkloadManagementNetworkResponse = NetworkFabricControllersDisableWorkloadManagementNetworkHeaders;

/** Optional parameters. */
export interface NetworkFabricControllersListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NetworkFabricControllersListByResourceGroupNextResponse = NetworkFabricControllersListResult;

/** Optional parameters. */
export interface NetworkFabricControllersListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkFabricControllersListBySubscriptionNextResponse = NetworkFabricControllersListResult;

/** Optional parameters. */
export interface NetworkFabricSkusGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkFabricSkusGetResponse = NetworkFabricSku;

/** Optional parameters. */
export interface NetworkFabricSkusListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkFabricSkusListBySubscriptionResponse = NetworkFabricSkusListResult;

/** Optional parameters. */
export interface NetworkFabricSkusListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkFabricSkusListBySubscriptionNextResponse = NetworkFabricSkusListResult;

/** Optional parameters. */
export interface NetworkFabricsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkFabricsCreateResponse = NetworkFabric;

/** Optional parameters. */
export interface NetworkFabricsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkFabricsGetResponse = NetworkFabric;

/** Optional parameters. */
export interface NetworkFabricsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkFabricsUpdateResponse = NetworkFabric;

/** Optional parameters. */
export interface NetworkFabricsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkFabricsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NetworkFabricsListByResourceGroupResponse = NetworkFabricsListResult;

/** Optional parameters. */
export interface NetworkFabricsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkFabricsListBySubscriptionResponse = NetworkFabricsListResult;

/** Optional parameters. */
export interface NetworkFabricsProvisionOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the provision operation. */
export type NetworkFabricsProvisionResponse = NetworkFabricsProvisionHeaders;

/** Optional parameters. */
export interface NetworkFabricsDeprovisionOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the deprovision operation. */
export type NetworkFabricsDeprovisionResponse = NetworkFabricsDeprovisionHeaders;

/** Optional parameters. */
export interface NetworkFabricsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NetworkFabricsListByResourceGroupNextResponse = NetworkFabricsListResult;

/** Optional parameters. */
export interface NetworkFabricsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkFabricsListBySubscriptionNextResponse = NetworkFabricsListResult;

/** Optional parameters. */
export interface NetworkToNetworkInterconnectsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkToNetworkInterconnectsCreateResponse = NetworkToNetworkInterconnect;

/** Optional parameters. */
export interface NetworkToNetworkInterconnectsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkToNetworkInterconnectsGetResponse = NetworkToNetworkInterconnect;

/** Optional parameters. */
export interface NetworkToNetworkInterconnectsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkToNetworkInterconnectsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type NetworkToNetworkInterconnectsListResponse = NetworkToNetworkInterconnectsList;

/** Optional parameters. */
export interface NetworkToNetworkInterconnectsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type NetworkToNetworkInterconnectsListNextResponse = NetworkToNetworkInterconnectsList;

/** Optional parameters. */
export interface NetworkRackSkusGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkRackSkusGetResponse = NetworkRackSku;

/** Optional parameters. */
export interface NetworkRackSkusListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkRackSkusListBySubscriptionResponse = NetworkRackSkusListResult;

/** Optional parameters. */
export interface NetworkRackSkusListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkRackSkusListBySubscriptionNextResponse = NetworkRackSkusListResult;

/** Optional parameters. */
export interface NetworkRacksCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type NetworkRacksCreateResponse = NetworkRack;

/** Optional parameters. */
export interface NetworkRacksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkRacksGetResponse = NetworkRack;

/** Optional parameters. */
export interface NetworkRacksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type NetworkRacksUpdateResponse = NetworkRack;

/** Optional parameters. */
export interface NetworkRacksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface NetworkRacksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NetworkRacksListByResourceGroupResponse = NetworkRacksListResult;

/** Optional parameters. */
export interface NetworkRacksListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkRacksListBySubscriptionResponse = NetworkRacksListResult;

/** Optional parameters. */
export interface NetworkRacksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NetworkRacksListByResourceGroupNextResponse = NetworkRacksListResult;

/** Optional parameters. */
export interface NetworkRacksListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkRacksListBySubscriptionNextResponse = NetworkRacksListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface RoutePoliciesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type RoutePoliciesCreateResponse = RoutePolicy;

/** Optional parameters. */
export interface RoutePoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoutePoliciesGetResponse = RoutePolicy;

/** Optional parameters. */
export interface RoutePoliciesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type RoutePoliciesUpdateResponse = RoutePolicy;

/** Optional parameters. */
export interface RoutePoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RoutePoliciesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type RoutePoliciesListByResourceGroupResponse = RoutePoliciesListResult;

/** Optional parameters. */
export interface RoutePoliciesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type RoutePoliciesListBySubscriptionResponse = RoutePoliciesListResult;

/** Optional parameters. */
export interface RoutePoliciesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type RoutePoliciesListByResourceGroupNextResponse = RoutePoliciesListResult;

/** Optional parameters. */
export interface RoutePoliciesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type RoutePoliciesListBySubscriptionNextResponse = RoutePoliciesListResult;

/** Optional parameters. */
export interface AzureNetworkFabricManagementServiceAPIOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
