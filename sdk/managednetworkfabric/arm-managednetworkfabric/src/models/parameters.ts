/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  AccessControlList as AccessControlListMapper,
  AccessControlListPatch as AccessControlListPatchMapper,
  UpdateAdministrativeState as UpdateAdministrativeStateMapper,
  InternetGateway as InternetGatewayMapper,
  InternetGatewayPatch as InternetGatewayPatchMapper,
  InternetGatewayRule as InternetGatewayRuleMapper,
  InternetGatewayRulePatch as InternetGatewayRulePatchMapper,
  IpCommunity as IpCommunityMapper,
  IpCommunityPatch as IpCommunityPatchMapper,
  IpExtendedCommunity as IpExtendedCommunityMapper,
  IpExtendedCommunityPatch as IpExtendedCommunityPatchMapper,
  IpPrefix as IpPrefixMapper,
  IpPrefixPatch as IpPrefixPatchMapper,
  L2IsolationDomain as L2IsolationDomainMapper,
  L2IsolationDomainPatch as L2IsolationDomainPatchMapper,
  L3IsolationDomain as L3IsolationDomainMapper,
  L3IsolationDomainPatch as L3IsolationDomainPatchMapper,
  InternalNetwork as InternalNetworkMapper,
  InternalNetworkPatch as InternalNetworkPatchMapper,
  ExternalNetwork as ExternalNetworkMapper,
  ExternalNetworkPatch as ExternalNetworkPatchMapper,
  NeighborGroup as NeighborGroupMapper,
  NeighborGroupPatch as NeighborGroupPatchMapper,
  NetworkDevice as NetworkDeviceMapper,
  NetworkDevicePatchParameters as NetworkDevicePatchParametersMapper,
  RebootProperties as RebootPropertiesMapper,
  UpdateDeviceAdministrativeState as UpdateDeviceAdministrativeStateMapper,
  UpdateVersion as UpdateVersionMapper,
  NetworkInterface as NetworkInterfaceMapper,
  NetworkInterfacePatch as NetworkInterfacePatchMapper,
  NetworkFabricController as NetworkFabricControllerMapper,
  NetworkFabricControllerPatch as NetworkFabricControllerPatchMapper,
  NetworkFabric as NetworkFabricMapper,
  NetworkFabricPatch as NetworkFabricPatchMapper,
  ValidateConfigurationProperties as ValidateConfigurationPropertiesMapper,
  NetworkToNetworkInterconnect as NetworkToNetworkInterconnectMapper,
  NetworkToNetworkInterconnectPatch as NetworkToNetworkInterconnectPatchMapper,
  NetworkPacketBroker as NetworkPacketBrokerMapper,
  NetworkPacketBrokerPatch as NetworkPacketBrokerPatchMapper,
  NetworkRack as NetworkRackMapper,
  TagsUpdate as TagsUpdateMapper,
  NetworkTapRule as NetworkTapRuleMapper,
  NetworkTapRulePatch as NetworkTapRulePatchMapper,
  NetworkTap as NetworkTapMapper,
  NetworkTapPatch as NetworkTapPatchMapper,
  RoutePolicy as RoutePolicyMapper,
  RoutePolicyPatch as RoutePolicyPatchMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: AccessControlListMapper
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-06-15",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const accessControlListName: OperationURLParameter = {
  parameterPath: "accessControlListName",
  mapper: {
    serializedName: "accessControlListName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: AccessControlListPatchMapper
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: UpdateAdministrativeStateMapper
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const body3: OperationParameter = {
  parameterPath: "body",
  mapper: InternetGatewayMapper
};

export const internetGatewayName: OperationURLParameter = {
  parameterPath: "internetGatewayName",
  mapper: {
    serializedName: "internetGatewayName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body4: OperationParameter = {
  parameterPath: "body",
  mapper: InternetGatewayPatchMapper
};

export const body5: OperationParameter = {
  parameterPath: "body",
  mapper: InternetGatewayRuleMapper
};

export const internetGatewayRuleName: OperationURLParameter = {
  parameterPath: "internetGatewayRuleName",
  mapper: {
    serializedName: "internetGatewayRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body6: OperationParameter = {
  parameterPath: "body",
  mapper: InternetGatewayRulePatchMapper
};

export const body7: OperationParameter = {
  parameterPath: "body",
  mapper: IpCommunityMapper
};

export const ipCommunityName: OperationURLParameter = {
  parameterPath: "ipCommunityName",
  mapper: {
    serializedName: "ipCommunityName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body8: OperationParameter = {
  parameterPath: "body",
  mapper: IpCommunityPatchMapper
};

export const body9: OperationParameter = {
  parameterPath: "body",
  mapper: IpExtendedCommunityMapper
};

export const ipExtendedCommunityName: OperationURLParameter = {
  parameterPath: "ipExtendedCommunityName",
  mapper: {
    serializedName: "ipExtendedCommunityName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body10: OperationParameter = {
  parameterPath: "body",
  mapper: IpExtendedCommunityPatchMapper
};

export const body11: OperationParameter = {
  parameterPath: "body",
  mapper: IpPrefixMapper
};

export const ipPrefixName: OperationURLParameter = {
  parameterPath: "ipPrefixName",
  mapper: {
    serializedName: "ipPrefixName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body12: OperationParameter = {
  parameterPath: "body",
  mapper: IpPrefixPatchMapper
};

export const body13: OperationParameter = {
  parameterPath: "body",
  mapper: L2IsolationDomainMapper
};

export const l2IsolationDomainName: OperationURLParameter = {
  parameterPath: "l2IsolationDomainName",
  mapper: {
    serializedName: "l2IsolationDomainName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body14: OperationParameter = {
  parameterPath: "body",
  mapper: L2IsolationDomainPatchMapper
};

export const body15: OperationParameter = {
  parameterPath: "body",
  mapper: L3IsolationDomainMapper
};

export const l3IsolationDomainName: OperationURLParameter = {
  parameterPath: "l3IsolationDomainName",
  mapper: {
    serializedName: "l3IsolationDomainName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body16: OperationParameter = {
  parameterPath: "body",
  mapper: L3IsolationDomainPatchMapper
};

export const body17: OperationParameter = {
  parameterPath: "body",
  mapper: InternalNetworkMapper
};

export const internalNetworkName: OperationURLParameter = {
  parameterPath: "internalNetworkName",
  mapper: {
    serializedName: "internalNetworkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body18: OperationParameter = {
  parameterPath: "body",
  mapper: InternalNetworkPatchMapper
};

export const body19: OperationParameter = {
  parameterPath: "body",
  mapper: ExternalNetworkMapper
};

export const externalNetworkName: OperationURLParameter = {
  parameterPath: "externalNetworkName",
  mapper: {
    serializedName: "externalNetworkName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body20: OperationParameter = {
  parameterPath: "body",
  mapper: ExternalNetworkPatchMapper
};

export const body21: OperationParameter = {
  parameterPath: "body",
  mapper: NeighborGroupMapper
};

export const neighborGroupName: OperationURLParameter = {
  parameterPath: "neighborGroupName",
  mapper: {
    serializedName: "neighborGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body22: OperationParameter = {
  parameterPath: "body",
  mapper: NeighborGroupPatchMapper
};

export const networkDeviceSkuName: OperationURLParameter = {
  parameterPath: "networkDeviceSkuName",
  mapper: {
    serializedName: "networkDeviceSkuName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body23: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkDeviceMapper
};

export const networkDeviceName: OperationURLParameter = {
  parameterPath: "networkDeviceName",
  mapper: {
    serializedName: "networkDeviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body24: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkDevicePatchParametersMapper
};

export const body25: OperationParameter = {
  parameterPath: "body",
  mapper: RebootPropertiesMapper
};

export const body26: OperationParameter = {
  parameterPath: "body",
  mapper: UpdateDeviceAdministrativeStateMapper
};

export const body27: OperationParameter = {
  parameterPath: "body",
  mapper: UpdateVersionMapper
};

export const body28: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkInterfaceMapper
};

export const networkInterfaceName: OperationURLParameter = {
  parameterPath: "networkInterfaceName",
  mapper: {
    serializedName: "networkInterfaceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body29: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkInterfacePatchMapper
};

export const body30: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkFabricControllerMapper
};

export const networkFabricControllerName: OperationURLParameter = {
  parameterPath: "networkFabricControllerName",
  mapper: {
    serializedName: "networkFabricControllerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body31: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkFabricControllerPatchMapper
};

export const networkFabricSkuName: OperationURLParameter = {
  parameterPath: "networkFabricSkuName",
  mapper: {
    serializedName: "networkFabricSkuName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body32: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkFabricMapper
};

export const networkFabricName: OperationURLParameter = {
  parameterPath: "networkFabricName",
  mapper: {
    serializedName: "networkFabricName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body33: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkFabricPatchMapper
};

export const body34: OperationParameter = {
  parameterPath: "body",
  mapper: ValidateConfigurationPropertiesMapper
};

export const body35: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkToNetworkInterconnectMapper
};

export const networkToNetworkInterconnectName: OperationURLParameter = {
  parameterPath: "networkToNetworkInterconnectName",
  mapper: {
    serializedName: "networkToNetworkInterconnectName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body36: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkToNetworkInterconnectPatchMapper
};

export const body37: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkPacketBrokerMapper
};

export const networkPacketBrokerName: OperationURLParameter = {
  parameterPath: "networkPacketBrokerName",
  mapper: {
    serializedName: "networkPacketBrokerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body38: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkPacketBrokerPatchMapper
};

export const body39: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkRackMapper
};

export const networkRackName: OperationURLParameter = {
  parameterPath: "networkRackName",
  mapper: {
    serializedName: "networkRackName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body40: OperationParameter = {
  parameterPath: "body",
  mapper: TagsUpdateMapper
};

export const body41: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkTapRuleMapper
};

export const networkTapRuleName: OperationURLParameter = {
  parameterPath: "networkTapRuleName",
  mapper: {
    serializedName: "networkTapRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body42: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkTapRulePatchMapper
};

export const body43: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkTapMapper
};

export const networkTapName: OperationURLParameter = {
  parameterPath: "networkTapName",
  mapper: {
    serializedName: "networkTapName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body44: OperationParameter = {
  parameterPath: "body",
  mapper: NetworkTapPatchMapper
};

export const body45: OperationParameter = {
  parameterPath: "body",
  mapper: RoutePolicyMapper
};

export const routePolicyName: OperationURLParameter = {
  parameterPath: "routePolicyName",
  mapper: {
    serializedName: "routePolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body46: OperationParameter = {
  parameterPath: "body",
  mapper: RoutePolicyPatchMapper
};
