/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const AnnotationResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnnotationResource",
    modelProperties: {
      annotation: {
        serializedName: "annotation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const AccessControlListPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      addressFamily: {
        serializedName: "properties.addressFamily",
        type: {
          name: "String"
        }
      },
      conditions: {
        serializedName: "properties.conditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessControlListConditionProperties"
            }
          }
        }
      }
    }
  }
};

export const AccessControlListsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessControlList"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpCommunityPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunityPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const IpCommunitiesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunitiesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpCommunity"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpExtendedCommunityPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const IpExtendedCommunityListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpExtendedCommunity"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPrefixPropertiesIpPrefixRulesItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixPropertiesIpPrefixRulesItem",
    modelProperties: {
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      },
      sequenceNumber: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "sequenceNumber",
        required: true,
        type: {
          name: "Number"
        }
      },
      networkPrefix: {
        serializedName: "networkPrefix",
        required: true,
        type: {
          name: "String"
        }
      },
      condition: {
        serializedName: "condition",
        type: {
          name: "String"
        }
      },
      subnetMaskLength: {
        constraints: {
          InclusiveMaximum: 128,
          InclusiveMinimum: 1
        },
        serializedName: "subnetMaskLength",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IpPrefixPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const IpPrefixesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpPrefix"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      mtu: {
        serializedName: "properties.mtu",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EnableDisableOnResources: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnableDisableOnResources",
    modelProperties: {
      resourceIds: {
        serializedName: "resourceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ARPProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ARPProperties",
    modelProperties: {
      address: {
        serializedName: "address",
        required: true,
        type: {
          name: "String"
        }
      },
      age: {
        serializedName: "age",
        required: true,
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      interface: {
        serializedName: "interface",
        required: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "L2IsolationDomain"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainPatchProperties",
    modelProperties: {
      redistributeConnectedSubnets: {
        defaultValue: "True",
        serializedName: "redistributeConnectedSubnets",
        type: {
          name: "String"
        }
      },
      redistributeStaticRoutes: {
        defaultValue: "False",
        serializedName: "redistributeStaticRoutes",
        type: {
          name: "String"
        }
      },
      aggregateRouteConfiguration: {
        serializedName: "aggregateRouteConfiguration",
        type: {
          name: "Composite",
          className: "AggregateRouteConfiguration"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      connectedSubnetRoutePolicy: {
        serializedName: "connectedSubnetRoutePolicy",
        type: {
          name: "Composite",
          className:
            "L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy"
        }
      }
    }
  }
};

export const AggregateRouteConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AggregateRouteConfiguration",
    modelProperties: {
      ipv4Routes: {
        serializedName: "ipv4Routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AggregateRoute"
            }
          }
        }
      },
      ipv6Routes: {
        serializedName: "ipv6Routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AggregateRoute"
            }
          }
        }
      }
    }
  }
};

export const AggregateRoute: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AggregateRoute",
    modelProperties: {
      prefix: {
        serializedName: "prefix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy",
    modelProperties: {
      exportRoutePolicyId: {
        serializedName: "exportRoutePolicyId",
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      redistributeConnectedSubnets: {
        defaultValue: "True",
        serializedName: "properties.redistributeConnectedSubnets",
        type: {
          name: "String"
        }
      },
      redistributeStaticRoutes: {
        defaultValue: "False",
        serializedName: "properties.redistributeStaticRoutes",
        type: {
          name: "String"
        }
      },
      aggregateRouteConfiguration: {
        serializedName: "properties.aggregateRouteConfiguration",
        type: {
          name: "Composite",
          className: "AggregateRouteConfiguration"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      connectedSubnetRoutePolicy: {
        serializedName: "properties.connectedSubnetRoutePolicy",
        type: {
          name: "Composite",
          className:
            "L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy"
        }
      }
    }
  }
};

export const L3IsolationDomainsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "L3IsolationDomain"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworkPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworkPatchableProperties",
    modelProperties: {
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9000,
          InclusiveMinimum: 1500
        },
        serializedName: "mtu",
        type: {
          name: "Number"
        }
      },
      connectedIPv4Subnets: {
        serializedName: "connectedIPv4Subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedSubnet"
            }
          }
        }
      },
      connectedIPv6Subnets: {
        serializedName: "connectedIPv6Subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedSubnet"
            }
          }
        }
      },
      staticRouteConfiguration: {
        serializedName: "staticRouteConfiguration",
        type: {
          name: "Composite",
          className: "StaticRouteConfiguration"
        }
      },
      bgpConfiguration: {
        serializedName: "bgpConfiguration",
        type: {
          name: "Composite",
          className: "BgpConfiguration"
        }
      },
      importRoutePolicyId: {
        serializedName: "importRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicyId: {
        serializedName: "exportRoutePolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StaticRouteConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StaticRouteConfiguration",
    modelProperties: {
      bfdConfiguration: {
        serializedName: "bfdConfiguration",
        type: {
          name: "Composite",
          className: "BfdConfiguration"
        }
      },
      ipv4Routes: {
        serializedName: "ipv4Routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StaticRouteProperties"
            }
          }
        }
      },
      ipv6Routes: {
        serializedName: "ipv6Routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StaticRouteProperties"
            }
          }
        }
      }
    }
  }
};

export const BfdConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BfdConfiguration",
    modelProperties: {
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      interval: {
        serializedName: "interval",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      multiplier: {
        serializedName: "multiplier",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const StaticRouteProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StaticRouteProperties",
    modelProperties: {
      prefix: {
        serializedName: "prefix",
        required: true,
        type: {
          name: "String"
        }
      },
      nextHop: {
        serializedName: "nextHop",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const NeighborAddress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NeighborAddress",
    modelProperties: {
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      operationalState: {
        serializedName: "operationalState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworkPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworkPatch",
    modelProperties: {
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9000,
          InclusiveMinimum: 1500
        },
        serializedName: "properties.mtu",
        type: {
          name: "Number"
        }
      },
      connectedIPv4Subnets: {
        serializedName: "properties.connectedIPv4Subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedSubnet"
            }
          }
        }
      },
      connectedIPv6Subnets: {
        serializedName: "properties.connectedIPv6Subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedSubnet"
            }
          }
        }
      },
      staticRouteConfiguration: {
        serializedName: "properties.staticRouteConfiguration",
        type: {
          name: "Composite",
          className: "StaticRouteConfiguration"
        }
      },
      bgpConfiguration: {
        serializedName: "properties.bgpConfiguration",
        type: {
          name: "Composite",
          className: "BgpConfiguration"
        }
      },
      importRoutePolicyId: {
        serializedName: "properties.importRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicyId: {
        serializedName: "properties.exportRoutePolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworksList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworksList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InternalNetwork"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OptionBProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptionBProperties",
    modelProperties: {
      importRouteTargets: {
        serializedName: "importRouteTargets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      exportRouteTargets: {
        serializedName: "exportRouteTargets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Layer3IpPrefixProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Layer3IpPrefixProperties",
    modelProperties: {
      primaryIpv4Prefix: {
        serializedName: "primaryIpv4Prefix",
        type: {
          name: "String"
        }
      },
      primaryIpv6Prefix: {
        serializedName: "primaryIpv6Prefix",
        type: {
          name: "String"
        }
      },
      secondaryIpv4Prefix: {
        serializedName: "secondaryIpv4Prefix",
        type: {
          name: "String"
        }
      },
      secondaryIpv6Prefix: {
        serializedName: "secondaryIpv6Prefix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworkPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworkPatch",
    modelProperties: {
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      peeringOption: {
        serializedName: "properties.peeringOption",
        type: {
          name: "String"
        }
      },
      optionBProperties: {
        serializedName: "properties.optionBProperties",
        type: {
          name: "Composite",
          className: "OptionBProperties"
        }
      },
      optionAProperties: {
        serializedName: "properties.optionAProperties",
        type: {
          name: "Composite",
          className: "Layer3OptionAProperties"
        }
      },
      importRoutePolicyId: {
        serializedName: "properties.importRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicyId: {
        serializedName: "properties.exportRoutePolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworkPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworkPatchableProperties",
    modelProperties: {
      peeringOption: {
        serializedName: "peeringOption",
        type: {
          name: "String"
        }
      },
      optionBProperties: {
        serializedName: "optionBProperties",
        type: {
          name: "Composite",
          className: "OptionBProperties"
        }
      },
      optionAProperties: {
        serializedName: "optionAProperties",
        type: {
          name: "Composite",
          className: "Layer3OptionAProperties"
        }
      },
      importRoutePolicyId: {
        serializedName: "importRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicyId: {
        serializedName: "exportRoutePolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworksList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworksList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExternalNetwork"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SupportedVersionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedVersionProperties",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      vendorOsVersion: {
        serializedName: "vendorOsVersion",
        type: {
          name: "String"
        }
      },
      vendorFirmwareVersion: {
        serializedName: "vendorFirmwareVersion",
        type: {
          name: "String"
        }
      },
      isCurrent: {
        serializedName: "isCurrent",
        type: {
          name: "String"
        }
      },
      isTest: {
        serializedName: "isTest",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeviceLimits: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceLimits",
    modelProperties: {
      physicalInterfaceCount: {
        serializedName: "physicalInterfaceCount",
        type: {
          name: "Number"
        }
      },
      maxSubInterfaces: {
        serializedName: "maxSubInterfaces",
        type: {
          name: "Number"
        }
      },
      maxTunnelInterfaces: {
        serializedName: "maxTunnelInterfaces",
        type: {
          name: "Number"
        }
      },
      maxVirtualRouterFunctions: {
        serializedName: "maxVirtualRouterFunctions",
        type: {
          name: "Number"
        }
      },
      maxBorderGatewayProtocolPeers: {
        serializedName: "maxBorderGatewayProtocolPeers",
        type: {
          name: "Number"
        }
      },
      maxBidirectionalForwardingDetectionPeers: {
        serializedName: "maxBidirectionalForwardingDetectionPeers",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DeviceInterfaceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceInterfaceProperties",
    modelProperties: {
      identifier: {
        serializedName: "identifier",
        type: {
          name: "String"
        }
      },
      interfaceType: {
        serializedName: "interfaceType",
        type: {
          name: "String"
        }
      },
      supportedConnectorTypes: {
        serializedName: "supportedConnectorTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SupportedConnectorProperties"
            }
          }
        }
      }
    }
  }
};

export const SupportedConnectorProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedConnectorProperties",
    modelProperties: {
      connectorType: {
        serializedName: "connectorType",
        type: {
          name: "String"
        }
      },
      maxSpeedInMbps: {
        serializedName: "maxSpeedInMbps",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NetworkDeviceSkusListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDeviceSkusListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkDeviceSku"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicePatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicePatchableProperties",
    modelProperties: {
      hostName: {
        serializedName: "hostName",
        type: {
          name: "String"
        }
      },
      serialNumber: {
        serializedName: "serialNumber",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicePatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicePatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      serialNumber: {
        serializedName: "properties.serialNumber",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkDevice"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfacePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfacePatch",
    modelProperties: {
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfacesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfacesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterface"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateVersionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateVersionProperties",
    modelProperties: {
      skuVersion: {
        serializedName: "skuVersion",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SupportPackageProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportPackageProperties",
    modelProperties: {
      supportPackageURL: {
        serializedName: "supportPackageURL",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdatePowerCycleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdatePowerCycleProperties",
    modelProperties: {
      powerEnd: {
        serializedName: "powerEnd",
        required: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetDeviceStatusProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetDeviceStatusProperties",
    modelProperties: {
      operationalStatus: {
        serializedName: "operationalStatus",
        required: true,
        type: {
          name: "String"
        }
      },
      powerCycleState: {
        serializedName: "powerCycleState",
        required: true,
        type: {
          name: "String"
        }
      },
      serialNumber: {
        serializedName: "serialNumber",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetStaticInterfaceMapsPropertiesItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetStaticInterfaceMapsPropertiesItem",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      identifier: {
        serializedName: "identifier",
        type: {
          name: "String"
        }
      },
      interfaceType: {
        serializedName: "interfaceType",
        type: {
          name: "String"
        }
      },
      connectorType: {
        serializedName: "connectorType",
        type: {
          name: "String"
        }
      },
      connectedTo: {
        serializedName: "connectedTo",
        type: {
          name: "String"
        }
      },
      speed: {
        serializedName: "speed",
        type: {
          name: "Number"
        }
      },
      channelGroupId: {
        serializedName: "channelGroupId",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InterfaceStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InterfaceStatus",
    modelProperties: {
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationalStatus: {
        serializedName: "operationalStatus",
        type: {
          name: "String"
        }
      },
      phyStatus: {
        serializedName: "phyStatus",
        type: {
          name: "String"
        }
      },
      transceiverStatus: {
        serializedName: "transceiverStatus",
        type: {
          name: "String"
        }
      },
      connectedTo: {
        serializedName: "connectedTo",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InfrastructureServices: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InfrastructureServices",
    modelProperties: {
      ipv4AddressSpaces: {
        serializedName: "ipv4AddressSpaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ipv6AddressSpaces: {
        serializedName: "ipv6AddressSpaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const WorkloadServices: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadServices",
    modelProperties: {
      ipv4AddressSpaces: {
        serializedName: "ipv4AddressSpaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ipv6AddressSpaces: {
        serializedName: "ipv6AddressSpaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ManagedResourceGroupConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedResourceGroupConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricControllerPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricControllerPatchableProperties",
    modelProperties: {
      infrastructureExpressRouteConnections: {
        serializedName: "infrastructureExpressRouteConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteConnectionInformation"
            }
          }
        }
      },
      workloadExpressRouteConnections: {
        serializedName: "workloadExpressRouteConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteConnectionInformation"
            }
          }
        }
      }
    }
  }
};

export const ExpressRouteConnectionInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteConnectionInformation",
    modelProperties: {
      expressRouteCircuitId: {
        serializedName: "expressRouteCircuitId",
        required: true,
        type: {
          name: "String"
        }
      },
      expressRouteAuthorizationKey: {
        serializedName: "expressRouteAuthorizationKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricControllerPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricControllerPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      infrastructureExpressRouteConnections: {
        serializedName: "properties.infrastructureExpressRouteConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteConnectionInformation"
            }
          }
        }
      },
      workloadExpressRouteConnections: {
        serializedName: "properties.workloadExpressRouteConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteConnectionInformation"
            }
          }
        }
      }
    }
  }
};

export const NetworkFabricControllersListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricControllersListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkFabricController"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricSkusListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricSkusListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkFabricSku"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TerminalServerPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TerminalServerPatchableProperties",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      serialNumber: {
        serializedName: "serialNumber",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementNetworkConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementNetworkConfiguration",
    modelProperties: {
      infrastructureVpnConfiguration: {
        serializedName: "infrastructureVpnConfiguration",
        type: {
          name: "Composite",
          className: "VpnConfigurationProperties"
        }
      },
      workloadVpnConfiguration: {
        serializedName: "workloadVpnConfiguration",
        type: {
          name: "Composite",
          className: "VpnConfigurationProperties"
        }
      }
    }
  }
};

export const VpnConfigurationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnConfigurationProperties",
    modelProperties: {
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkToNetworkInterconnectId: {
        serializedName: "networkToNetworkInterconnectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      peeringOption: {
        serializedName: "peeringOption",
        required: true,
        type: {
          name: "String"
        }
      },
      optionBProperties: {
        serializedName: "optionBProperties",
        type: {
          name: "Composite",
          className: "OptionBPropertiesAutoGenerated"
        }
      },
      optionAProperties: {
        serializedName: "optionAProperties",
        type: {
          name: "Composite",
          className: "OptionAProperties"
        }
      }
    }
  }
};

export const OptionBPropertiesAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptionBPropertiesAutoGenerated",
    modelProperties: {
      importRouteTargets: {
        serializedName: "importRouteTargets",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      exportRouteTargets: {
        serializedName: "exportRouteTargets",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const FabricBfdConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricBfdConfiguration",
    modelProperties: {
      interval: {
        serializedName: "interval",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      multiplier: {
        serializedName: "multiplier",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NetworkFabricPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricPatchableProperties",
    modelProperties: {
      racks: {
        serializedName: "racks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      l2IsolationDomains: {
        serializedName: "l2IsolationDomains",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      l3IsolationDomains: {
        serializedName: "l3IsolationDomains",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const NetworkFabricPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricPatchParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      terminalServerConfiguration: {
        serializedName: "properties.terminalServerConfiguration",
        type: {
          name: "Composite",
          className: "TerminalServerPatchableProperties"
        }
      },
      racks: {
        serializedName: "properties.racks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      l2IsolationDomains: {
        serializedName: "properties.l2IsolationDomains",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      l3IsolationDomains: {
        serializedName: "properties.l3IsolationDomains",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TerminalServerPatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TerminalServerPatchParameters",
    modelProperties: {
      terminalServerConfiguration: {
        serializedName: "terminalServerConfiguration",
        type: {
          name: "Composite",
          className: "TerminalServerPatchableProperties"
        }
      }
    }
  }
};

export const NetworkFabricsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkFabric"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Layer2Configuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Layer2Configuration",
    modelProperties: {
      portCount: {
        serializedName: "portCount",
        type: {
          name: "Number"
        }
      },
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9000,
          InclusiveMinimum: 1500
        },
        serializedName: "mtu",
        required: true,
        type: {
          name: "Number"
        }
      },
      interfaces: {
        serializedName: "interfaces",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const NetworkToNetworkInterconnectsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkToNetworkInterconnectsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkToNetworkInterconnect"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDeviceRoleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDeviceRoleProperties",
    modelProperties: {
      networkDeviceSkuName: {
        serializedName: "networkDeviceSkuName",
        type: {
          name: "String"
        }
      },
      roleType: {
        serializedName: "roleType",
        type: {
          name: "String"
        }
      },
      rackSlot: {
        serializedName: "rackSlot",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NetworkRackSkusListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRackSkusListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkRackSku"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkRackPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRackPatch",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const NetworkRacksListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRacksListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkRack"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpCommunityIdList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunityIdList",
    modelProperties: {
      ipCommunityIds: {
        serializedName: "ipCommunityIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IpExtendedCommunityIdList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityIdList",
    modelProperties: {
      ipExtendedCommunityIds: {
        serializedName: "ipExtendedCommunityIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StatementActionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatementActionProperties",
    modelProperties: {
      localPreference: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "localPreference",
        type: {
          name: "Number"
        }
      },
      actionType: {
        serializedName: "actionType",
        required: true,
        type: {
          name: "String"
        }
      },
      ipCommunityProperties: {
        serializedName: "ipCommunityProperties",
        type: {
          name: "Composite",
          className: "ActionIpCommunityProperties"
        }
      },
      ipExtendedCommunityProperties: {
        serializedName: "ipExtendedCommunityProperties",
        type: {
          name: "Composite",
          className: "ActionIpExtendedCommunityProperties"
        }
      }
    }
  }
};

export const IpCommunityAddOperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunityAddOperationProperties",
    modelProperties: {
      add: {
        serializedName: "add",
        type: {
          name: "Composite",
          className: "IpCommunityIdList"
        }
      }
    }
  }
};

export const IpCommunityDeleteOperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunityDeleteOperationProperties",
    modelProperties: {
      delete: {
        serializedName: "delete",
        type: {
          name: "Composite",
          className: "IpCommunityIdList"
        }
      }
    }
  }
};

export const IpCommunitySetOperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunitySetOperationProperties",
    modelProperties: {
      set: {
        serializedName: "set",
        type: {
          name: "Composite",
          className: "IpCommunityIdList"
        }
      }
    }
  }
};

export const IpExtendedCommunityAddOperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityAddOperationProperties",
    modelProperties: {
      add: {
        serializedName: "add",
        type: {
          name: "Composite",
          className: "IpExtendedCommunityIdList"
        }
      }
    }
  }
};

export const IpExtendedCommunityDeleteOperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityDeleteOperationProperties",
    modelProperties: {
      delete: {
        serializedName: "delete",
        type: {
          name: "Composite",
          className: "IpExtendedCommunityIdList"
        }
      }
    }
  }
};

export const IpExtendedCommunitySetOperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunitySetOperationProperties",
    modelProperties: {
      set: {
        serializedName: "set",
        type: {
          name: "Composite",
          className: "IpExtendedCommunityIdList"
        }
      }
    }
  }
};

export const RoutePolicyPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePolicyPatch",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const RoutePoliciesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePoliciesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutePolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExpressRouteStatusDef: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteStatusDef",
    modelProperties: {
      expressRouteCircuitId: {
        serializedName: "expressRouteCircuitId",
        type: {
          name: "String"
        }
      },
      expressRouteStatus: {
        serializedName: "expressRouteStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessControlListConditionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListConditionProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      sequenceNumber: {
        serializedName: "sequenceNumber",
        required: true,
        type: {
          name: "Number"
        }
      },
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      },
      destinationAddress: {
        serializedName: "destinationAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      destinationPort: {
        serializedName: "destinationPort",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceAddress: {
        serializedName: "sourceAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      sourcePort: {
        serializedName: "sourcePort",
        required: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AccessControlListProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      addressFamily: {
        serializedName: "addressFamily",
        required: true,
        type: {
          name: "String"
        }
      },
      conditions: {
        serializedName: "conditions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessControlListConditionProperties"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessControlListPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListPatchProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      addressFamily: {
        serializedName: "addressFamily",
        type: {
          name: "String"
        }
      },
      conditions: {
        serializedName: "conditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessControlListConditionProperties"
            }
          }
        }
      }
    }
  }
};

export const IpCommunityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunityProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      },
      wellKnownCommunities: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "wellKnownCommunities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      communityMembers: {
        serializedName: "communityMembers",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpExtendedCommunityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      },
      routeTargets: {
        serializedName: "routeTargets",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPrefixProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ipPrefixRules: {
        serializedName: "ipPrefixRules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpPrefixPropertiesIpPrefixRulesItem"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      networkFabricId: {
        serializedName: "networkFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      vlanId: {
        serializedName: "vlanId",
        required: true,
        type: {
          name: "Number"
        }
      },
      mtu: {
        serializedName: "mtu",
        type: {
          name: "Number"
        }
      },
      disabledOnResources: {
        serializedName: "disabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainPatchProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      mtu: {
        serializedName: "mtu",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const L3IsolationDomainProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...L3IsolationDomainPatchProperties.type.modelProperties,
      networkFabricId: {
        serializedName: "networkFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      disabledOnResources: {
        serializedName: "disabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      optionBDisabledOnResources: {
        serializedName: "optionBDisabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectedSubnet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedSubnet",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      prefix: {
        serializedName: "prefix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BgpConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BgpConfiguration",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      bfdConfiguration: {
        serializedName: "bfdConfiguration",
        type: {
          name: "Composite",
          className: "BfdConfiguration"
        }
      },
      defaultRouteOriginate: {
        serializedName: "defaultRouteOriginate",
        type: {
          name: "String"
        }
      },
      allowAS: {
        defaultValue: 2,
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 0
        },
        serializedName: "allowAS",
        type: {
          name: "Number"
        }
      },
      allowASOverride: {
        serializedName: "allowASOverride",
        type: {
          name: "String"
        }
      },
      fabricASN: {
        serializedName: "fabricASN",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      peerASN: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "peerASN",
        required: true,
        type: {
          name: "Number"
        }
      },
      ipv4ListenRangePrefixes: {
        serializedName: "ipv4ListenRangePrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ipv6ListenRangePrefixes: {
        serializedName: "ipv6ListenRangePrefixes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ipv4NeighborAddress: {
        serializedName: "ipv4NeighborAddress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NeighborAddress"
            }
          }
        }
      },
      ipv6NeighborAddress: {
        serializedName: "ipv6NeighborAddress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NeighborAddress"
            }
          }
        }
      }
    }
  }
};

export const InternalNetworkProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworkProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...InternalNetworkPatchableProperties.type.modelProperties,
      disabledOnResources: {
        serializedName: "disabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bgpDisabledOnResources: {
        serializedName: "bgpDisabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      bfdDisabledOnResources: {
        serializedName: "bfdDisabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      bfdForStaticRoutesDisabledOnResources: {
        serializedName: "bfdForStaticRoutesDisabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vlanId: {
        constraints: {
          InclusiveMaximum: 4095,
          InclusiveMinimum: 100
        },
        serializedName: "vlanId",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InternalNetworkPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworkPatchProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...InternalNetworkPatchableProperties.type.modelProperties
    }
  }
};

export const ExternalNetworkProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworkProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      networkToNetworkInterconnectId: {
        serializedName: "networkToNetworkInterconnectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      disabledOnResources: {
        serializedName: "disabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      peeringOption: {
        serializedName: "peeringOption",
        required: true,
        type: {
          name: "String"
        }
      },
      optionBProperties: {
        serializedName: "optionBProperties",
        type: {
          name: "Composite",
          className: "OptionBProperties"
        }
      },
      optionAProperties: {
        serializedName: "optionAProperties",
        type: {
          name: "Composite",
          className: "ExternalNetworkPropertiesOptionAProperties"
        }
      },
      importRoutePolicyId: {
        serializedName: "importRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicyId: {
        serializedName: "exportRoutePolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworkPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworkPatchProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...ExternalNetworkPatchableProperties.type.modelProperties
    }
  }
};

export const NetworkDeviceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDeviceProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...NetworkDevicePatchableProperties.type.modelProperties,
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkDeviceSku: {
        serializedName: "networkDeviceSku",
        required: true,
        type: {
          name: "String"
        }
      },
      networkDeviceRole: {
        serializedName: "networkDeviceRole",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkRackId: {
        serializedName: "networkRackId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicePatchParametersProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicePatchParametersProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...NetworkDevicePatchableProperties.type.modelProperties
    }
  }
};

export const NetworkInterfaceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      physicalIdentifier: {
        serializedName: "physicalIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectedTo: {
        serializedName: "connectedTo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      interfaceType: {
        serializedName: "interfaceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipv4Address: {
        serializedName: "ipv4Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipv6Address: {
        serializedName: "ipv6Address",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfacePatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfacePatchProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties
    }
  }
};

export const NetworkFabricControllerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricControllerProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...NetworkFabricControllerPatchableProperties.type.modelProperties,
      infrastructureServices: {
        serializedName: "infrastructureServices",
        type: {
          name: "Composite",
          className: "InfrastructureServices"
        }
      },
      workloadServices: {
        serializedName: "workloadServices",
        type: {
          name: "Composite",
          className: "WorkloadServices"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedResourceGroupConfiguration"
        }
      },
      networkFabricIds: {
        serializedName: "networkFabricIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      workloadManagementNetwork: {
        defaultValue: true,
        serializedName: "workloadManagementNetwork",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      ipv4AddressSpace: {
        serializedName: "ipv4AddressSpace",
        type: {
          name: "String"
        }
      },
      ipv6AddressSpace: {
        serializedName: "ipv6AddressSpace",
        type: {
          name: "String"
        }
      },
      operationalState: {
        serializedName: "operationalState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...NetworkFabricPatchableProperties.type.modelProperties,
      networkFabricSku: {
        serializedName: "networkFabricSku",
        required: true,
        type: {
          name: "String"
        }
      },
      rackCount: {
        constraints: {
          InclusiveMaximum: 8,
          InclusiveMinimum: 2
        },
        serializedName: "rackCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      serverCountPerRack: {
        constraints: {
          InclusiveMaximum: 16,
          InclusiveMinimum: 1
        },
        serializedName: "serverCountPerRack",
        required: true,
        type: {
          name: "Number"
        }
      },
      ipv4Prefix: {
        serializedName: "ipv4Prefix",
        type: {
          name: "String"
        }
      },
      ipv6Prefix: {
        serializedName: "ipv6Prefix",
        type: {
          name: "String"
        }
      },
      routerId: {
        serializedName: "routerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricASN: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "fabricASN",
        required: true,
        type: {
          name: "Number"
        }
      },
      networkFabricControllerId: {
        serializedName: "networkFabricControllerId",
        required: true,
        type: {
          name: "String"
        }
      },
      terminalServerConfiguration: {
        serializedName: "terminalServerConfiguration",
        type: {
          name: "Composite",
          className: "TerminalServerConfiguration"
        }
      },
      managementNetworkConfiguration: {
        serializedName: "managementNetworkConfiguration",
        type: {
          name: "Composite",
          className: "ManagementNetworkConfiguration"
        }
      },
      operationalState: {
        serializedName: "operationalState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricPatchParametersProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricPatchParametersProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...TerminalServerPatchParameters.type.modelProperties,
      ...NetworkFabricPatchableProperties.type.modelProperties
    }
  }
};

export const NetworkRackProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRackProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      networkRackSku: {
        serializedName: "networkRackSku",
        required: true,
        type: {
          name: "String"
        }
      },
      networkFabricId: {
        serializedName: "networkFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      networkDevices: {
        serializedName: "networkDevices",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutePolicyStatementProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePolicyStatementProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      sequenceNumber: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "sequenceNumber",
        required: true,
        type: {
          name: "Number"
        }
      },
      condition: {
        serializedName: "condition",
        type: {
          name: "Composite",
          className: "StatementConditionProperties"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "StatementActionProperties"
        }
      }
    }
  }
};

export const RoutePolicyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePolicyProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      statements: {
        serializedName: "statements",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutePolicyStatementProperties"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const UpdateAdministrativeState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateAdministrativeState",
    modelProperties: {
      ...EnableDisableOnResources.type.modelProperties,
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Layer3OptionAProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Layer3OptionAProperties",
    modelProperties: {
      ...Layer3IpPrefixProperties.type.modelProperties,
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9000,
          InclusiveMinimum: 1500
        },
        serializedName: "mtu",
        type: {
          name: "Number"
        }
      },
      vlanId: {
        constraints: {
          InclusiveMaximum: 4095,
          InclusiveMinimum: 501
        },
        serializedName: "vlanId",
        type: {
          name: "Number"
        }
      },
      fabricASN: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "fabricASN",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      peerASN: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "peerASN",
        type: {
          name: "Number"
        }
      },
      bfdConfiguration: {
        serializedName: "bfdConfiguration",
        type: {
          name: "Composite",
          className: "BfdConfiguration"
        }
      }
    }
  }
};

export const TerminalServerConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TerminalServerConfiguration",
    modelProperties: {
      ...Layer3IpPrefixProperties.type.modelProperties,
      ...TerminalServerPatchableProperties.type.modelProperties,
      networkDeviceId: {
        serializedName: "networkDeviceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OptionAProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptionAProperties",
    modelProperties: {
      ...Layer3IpPrefixProperties.type.modelProperties,
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9000,
          InclusiveMinimum: 1500
        },
        serializedName: "mtu",
        type: {
          name: "Number"
        }
      },
      vlanId: {
        constraints: {
          InclusiveMaximum: 4095,
          InclusiveMinimum: 501
        },
        serializedName: "vlanId",
        type: {
          name: "Number"
        }
      },
      peerASN: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "peerASN",
        type: {
          name: "Number"
        }
      },
      bfdConfiguration: {
        serializedName: "bfdConfiguration",
        type: {
          name: "Composite",
          className: "FabricBfdConfiguration"
        }
      }
    }
  }
};

export const Layer3Configuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Layer3Configuration",
    modelProperties: {
      ...Layer3IpPrefixProperties.type.modelProperties,
      importRoutePolicyId: {
        serializedName: "importRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicyId: {
        serializedName: "exportRoutePolicyId",
        type: {
          name: "String"
        }
      },
      peerASN: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "peerASN",
        type: {
          name: "Number"
        }
      },
      vlanId: {
        constraints: {
          InclusiveMaximum: 4095,
          InclusiveMinimum: 501
        },
        serializedName: "vlanId",
        type: {
          name: "Number"
        }
      },
      fabricASN: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "fabricASN",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GetDynamicInterfaceMapsPropertiesItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetDynamicInterfaceMapsPropertiesItem",
    modelProperties: {
      ...InterfaceStatus.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StatementConditionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatementConditionProperties",
    modelProperties: {
      ...IpCommunityIdList.type.modelProperties,
      ...IpExtendedCommunityIdList.type.modelProperties,
      ipPrefixId: {
        serializedName: "ipPrefixId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActionIpCommunityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActionIpCommunityProperties",
    modelProperties: {
      ...IpCommunityAddOperationProperties.type.modelProperties,
      ...IpCommunityDeleteOperationProperties.type.modelProperties,
      ...IpCommunitySetOperationProperties.type.modelProperties
    }
  }
};

export const ActionIpExtendedCommunityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActionIpExtendedCommunityProperties",
    modelProperties: {
      ...IpExtendedCommunityAddOperationProperties.type.modelProperties,
      ...IpExtendedCommunityDeleteOperationProperties.type.modelProperties,
      ...IpExtendedCommunitySetOperationProperties.type.modelProperties
    }
  }
};

export const AccessControlList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlList",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      addressFamily: {
        serializedName: "properties.addressFamily",
        required: true,
        type: {
          name: "String"
        }
      },
      conditions: {
        serializedName: "properties.conditions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessControlListConditionProperties"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpCommunity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunity",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "properties.action",
        type: {
          name: "String"
        }
      },
      wellKnownCommunities: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "properties.wellKnownCommunities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      communityMembers: {
        serializedName: "properties.communityMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpExtendedCommunity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunity",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "properties.action",
        type: {
          name: "String"
        }
      },
      routeTargets: {
        serializedName: "properties.routeTargets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPrefix: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefix",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      ipPrefixRules: {
        serializedName: "properties.ipPrefixRules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpPrefixPropertiesIpPrefixRulesItem"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomain: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomain",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      networkFabricId: {
        serializedName: "properties.networkFabricId",
        type: {
          name: "String"
        }
      },
      vlanId: {
        serializedName: "properties.vlanId",
        type: {
          name: "Number"
        }
      },
      mtu: {
        serializedName: "properties.mtu",
        type: {
          name: "Number"
        }
      },
      disabledOnResources: {
        serializedName: "properties.disabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomain: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomain",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      redistributeConnectedSubnets: {
        defaultValue: "True",
        serializedName: "properties.redistributeConnectedSubnets",
        type: {
          name: "String"
        }
      },
      redistributeStaticRoutes: {
        defaultValue: "False",
        serializedName: "properties.redistributeStaticRoutes",
        type: {
          name: "String"
        }
      },
      aggregateRouteConfiguration: {
        serializedName: "properties.aggregateRouteConfiguration",
        type: {
          name: "Composite",
          className: "AggregateRouteConfiguration"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      connectedSubnetRoutePolicy: {
        serializedName: "properties.connectedSubnetRoutePolicy",
        type: {
          name: "Composite",
          className:
            "L3IsolationDomainPatchPropertiesConnectedSubnetRoutePolicy"
        }
      },
      networkFabricId: {
        serializedName: "properties.networkFabricId",
        type: {
          name: "String"
        }
      },
      disabledOnResources: {
        serializedName: "properties.disabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      optionBDisabledOnResources: {
        serializedName: "properties.optionBDisabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevice: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevice",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      serialNumber: {
        serializedName: "properties.serialNumber",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkDeviceSku: {
        serializedName: "properties.networkDeviceSku",
        type: {
          name: "String"
        }
      },
      networkDeviceRole: {
        serializedName: "properties.networkDeviceRole",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkRackId: {
        serializedName: "properties.networkRackId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricController: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricController",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      infrastructureExpressRouteConnections: {
        serializedName: "properties.infrastructureExpressRouteConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteConnectionInformation"
            }
          }
        }
      },
      workloadExpressRouteConnections: {
        serializedName: "properties.workloadExpressRouteConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteConnectionInformation"
            }
          }
        }
      },
      infrastructureServices: {
        serializedName: "properties.infrastructureServices",
        type: {
          name: "Composite",
          className: "InfrastructureServices"
        }
      },
      workloadServices: {
        serializedName: "properties.workloadServices",
        type: {
          name: "Composite",
          className: "WorkloadServices"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "properties.managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedResourceGroupConfiguration"
        }
      },
      networkFabricIds: {
        serializedName: "properties.networkFabricIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      workloadManagementNetwork: {
        defaultValue: true,
        serializedName: "properties.workloadManagementNetwork",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      ipv4AddressSpace: {
        serializedName: "properties.ipv4AddressSpace",
        type: {
          name: "String"
        }
      },
      ipv6AddressSpace: {
        serializedName: "properties.ipv6AddressSpace",
        type: {
          name: "String"
        }
      },
      operationalState: {
        serializedName: "properties.operationalState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabric",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      racks: {
        serializedName: "properties.racks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      l2IsolationDomains: {
        serializedName: "properties.l2IsolationDomains",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      l3IsolationDomains: {
        serializedName: "properties.l3IsolationDomains",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      networkFabricSku: {
        serializedName: "properties.networkFabricSku",
        type: {
          name: "String"
        }
      },
      rackCount: {
        constraints: {
          InclusiveMaximum: 8,
          InclusiveMinimum: 2
        },
        serializedName: "properties.rackCount",
        type: {
          name: "Number"
        }
      },
      serverCountPerRack: {
        constraints: {
          InclusiveMaximum: 16,
          InclusiveMinimum: 1
        },
        serializedName: "properties.serverCountPerRack",
        type: {
          name: "Number"
        }
      },
      ipv4Prefix: {
        serializedName: "properties.ipv4Prefix",
        type: {
          name: "String"
        }
      },
      ipv6Prefix: {
        serializedName: "properties.ipv6Prefix",
        type: {
          name: "String"
        }
      },
      routerId: {
        serializedName: "properties.routerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricASN: {
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1
        },
        serializedName: "properties.fabricASN",
        type: {
          name: "Number"
        }
      },
      networkFabricControllerId: {
        serializedName: "properties.networkFabricControllerId",
        type: {
          name: "String"
        }
      },
      terminalServerConfiguration: {
        serializedName: "properties.terminalServerConfiguration",
        type: {
          name: "Composite",
          className: "TerminalServerConfiguration"
        }
      },
      managementNetworkConfiguration: {
        serializedName: "properties.managementNetworkConfiguration",
        type: {
          name: "Composite",
          className: "ManagementNetworkConfiguration"
        }
      },
      operationalState: {
        serializedName: "properties.operationalState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkRack: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRack",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      networkRackSku: {
        serializedName: "properties.networkRackSku",
        required: true,
        type: {
          name: "String"
        }
      },
      networkFabricId: {
        serializedName: "properties.networkFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      networkDevices: {
        serializedName: "properties.networkDevices",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePolicy",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      statements: {
        serializedName: "properties.statements",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutePolicyStatementProperties"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetwork",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9000,
          InclusiveMinimum: 1500
        },
        serializedName: "properties.mtu",
        type: {
          name: "Number"
        }
      },
      connectedIPv4Subnets: {
        serializedName: "properties.connectedIPv4Subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedSubnet"
            }
          }
        }
      },
      connectedIPv6Subnets: {
        serializedName: "properties.connectedIPv6Subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedSubnet"
            }
          }
        }
      },
      staticRouteConfiguration: {
        serializedName: "properties.staticRouteConfiguration",
        type: {
          name: "Composite",
          className: "StaticRouteConfiguration"
        }
      },
      bgpConfiguration: {
        serializedName: "properties.bgpConfiguration",
        type: {
          name: "Composite",
          className: "BgpConfiguration"
        }
      },
      importRoutePolicyId: {
        serializedName: "properties.importRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicyId: {
        serializedName: "properties.exportRoutePolicyId",
        type: {
          name: "String"
        }
      },
      disabledOnResources: {
        serializedName: "properties.disabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bgpDisabledOnResources: {
        serializedName: "properties.bgpDisabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      bfdDisabledOnResources: {
        serializedName: "properties.bfdDisabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      bfdForStaticRoutesDisabledOnResources: {
        serializedName: "properties.bfdForStaticRoutesDisabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vlanId: {
        constraints: {
          InclusiveMaximum: 4095,
          InclusiveMinimum: 100
        },
        serializedName: "properties.vlanId",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExternalNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetwork",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      networkToNetworkInterconnectId: {
        serializedName: "properties.networkToNetworkInterconnectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      disabledOnResources: {
        serializedName: "properties.disabledOnResources",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      peeringOption: {
        serializedName: "properties.peeringOption",
        required: true,
        type: {
          name: "String"
        }
      },
      optionBProperties: {
        serializedName: "properties.optionBProperties",
        type: {
          name: "Composite",
          className: "OptionBProperties"
        }
      },
      optionAProperties: {
        serializedName: "properties.optionAProperties",
        type: {
          name: "Composite",
          className: "ExternalNetworkPropertiesOptionAProperties"
        }
      },
      importRoutePolicyId: {
        serializedName: "properties.importRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicyId: {
        serializedName: "properties.exportRoutePolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDeviceSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDeviceSku",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      model: {
        serializedName: "properties.model",
        required: true,
        type: {
          name: "String"
        }
      },
      manufacturer: {
        serializedName: "properties.manufacturer",
        type: {
          name: "String"
        }
      },
      supportedVersions: {
        serializedName: "properties.supportedVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SupportedVersionProperties"
            }
          }
        }
      },
      limits: {
        serializedName: "properties.limits",
        type: {
          name: "Composite",
          className: "DeviceLimits"
        }
      },
      supportedRoleTypes: {
        serializedName: "properties.supportedRoleTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      interfaces: {
        serializedName: "properties.interfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeviceInterfaceProperties"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterface: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterface",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      physicalIdentifier: {
        serializedName: "properties.physicalIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectedTo: {
        serializedName: "properties.connectedTo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      interfaceType: {
        serializedName: "properties.interfaceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipv4Address: {
        serializedName: "properties.ipv4Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipv6Address: {
        serializedName: "properties.ipv6Address",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricSku",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      typePropertiesType: {
        serializedName: "properties.type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxComputeRacks: {
        serializedName: "properties.maxComputeRacks",
        type: {
          name: "Number"
        }
      },
      minSupportedVer: {
        serializedName: "properties.minSupportedVer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxSupportedVer: {
        serializedName: "properties.maxSupportedVer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      detailsUri: {
        serializedName: "properties.detailsUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkToNetworkInterconnect: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkToNetworkInterconnect",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      nniType: {
        defaultValue: "CE",
        serializedName: "properties.nniType",
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isManagementType: {
        serializedName: "properties.isManagementType",
        type: {
          name: "String"
        }
      },
      useOptionB: {
        serializedName: "properties.useOptionB",
        type: {
          name: "String"
        }
      },
      layer2Configuration: {
        serializedName: "properties.layer2Configuration",
        type: {
          name: "Composite",
          className: "Layer2Configuration"
        }
      },
      layer3Configuration: {
        serializedName: "properties.layer3Configuration",
        type: {
          name: "Composite",
          className: "Layer3Configuration"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkRackSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRackSku",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      roleName: {
        serializedName: "properties.roleName",
        required: true,
        type: {
          name: "String"
        }
      },
      maximumServerCount: {
        serializedName: "properties.maximumServerCount",
        type: {
          name: "Number"
        }
      },
      maximumStorageCount: {
        serializedName: "properties.maximumStorageCount",
        type: {
          name: "Number"
        }
      },
      maximumUplinks: {
        serializedName: "properties.maximumUplinks",
        type: {
          name: "Number"
        }
      },
      networkDevices: {
        serializedName: "properties.networkDevices",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkDeviceRoleProperties"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworkPropertiesOptionAProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworkPropertiesOptionAProperties",
    modelProperties: {
      ...Layer3OptionAProperties.type.modelProperties
    }
  }
};

export const IpCommunitiesCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunitiesCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpCommunitiesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunitiesUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpCommunitiesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunitiesDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpExtendedCommunitiesCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunitiesCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpExtendedCommunitiesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunitiesUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpExtendedCommunitiesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunitiesDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPrefixesCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixesCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPrefixesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixesUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPrefixesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixesDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainsUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainsUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainsUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainsClearArpTableHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainsClearArpTableHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainsClearNeighborTableHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainsClearNeighborTableHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainsGetArpEntriesHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainsGetArpEntriesHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainsUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainsUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainsUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainsUpdateOptionBAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainsUpdateOptionBAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainsClearArpTableHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainsClearArpTableHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainsClearNeighborTableHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainsClearNeighborTableHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworksUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworksUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworksUpdateBgpAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworksUpdateBgpAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworksUpdateBfdForBgpAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworksUpdateBfdForBgpAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworksClearIpv6NeighborsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworksClearIpv6NeighborsHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworksClearArpEntriesHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworksClearArpEntriesHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworksUpdateBfdForStaticRouteAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "InternalNetworksUpdateBfdForStaticRouteAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworksUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworksUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworksUpdateBgpAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworksUpdateBgpAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworksUpdateBfdForBgpAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworksUpdateBfdForBgpAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworksClearIpv6NeighborsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworksClearIpv6NeighborsHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworksClearArpEntriesHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworksClearArpEntriesHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesRebootHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesRebootHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesRestoreConfigHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesRestoreConfigHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesUpdateVersionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesUpdateVersionHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesGenerateSupportPackageHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesGenerateSupportPackageHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesUpdatePowerCycleHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesUpdatePowerCycleHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesGetStatusHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesGetStatusHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesGetStaticInterfaceMapsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesGetStaticInterfaceMapsHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesGetDynamicInterfaceMapsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesGetDynamicInterfaceMapsHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfacesGetStatusHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfacesGetStatusHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfacesUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfacesUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricControllersUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricControllersUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricControllersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricControllersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricControllersEnableWorkloadManagementNetworkHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricControllersEnableWorkloadManagementNetworkHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricControllersDisableWorkloadManagementNetworkHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "NetworkFabricControllersDisableWorkloadManagementNetworkHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsProvisionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsProvisionHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsDeprovisionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsDeprovisionHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkRacksUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRacksUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutePoliciesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePoliciesUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};
