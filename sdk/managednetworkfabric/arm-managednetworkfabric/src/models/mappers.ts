/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const AnnotationResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnnotationResource",
    modelProperties: {
      annotation: {
        serializedName: "annotation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessControlListPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListPatchableProperties",
    modelProperties: {
      configurationType: {
        serializedName: "configurationType",
        type: {
          name: "String"
        }
      },
      aclsUrl: {
        constraints: {
          MinLength: 1
        },
        serializedName: "aclsUrl",
        type: {
          name: "String"
        }
      },
      matchConfigurations: {
        constraints: {
          MinItems: 1
        },
        serializedName: "matchConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessControlListMatchConfiguration"
            }
          }
        }
      },
      dynamicMatchConfigurations: {
        constraints: {
          MinItems: 1
        },
        serializedName: "dynamicMatchConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommonDynamicMatchConfiguration"
            }
          }
        }
      }
    }
  }
};

export const AccessControlListMatchConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListMatchConfiguration",
    modelProperties: {
      matchConfigurationName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "matchConfigurationName",
        type: {
          name: "String"
        }
      },
      sequenceNumber: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "sequenceNumber",
        type: {
          name: "Number"
        }
      },
      ipAddressType: {
        serializedName: "ipAddressType",
        type: {
          name: "String"
        }
      },
      matchConditions: {
        constraints: {
          MinItems: 1
        },
        serializedName: "matchConditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessControlListMatchCondition"
            }
          }
        }
      },
      actions: {
        constraints: {
          MinItems: 1
        },
        serializedName: "actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessControlListAction"
            }
          }
        }
      }
    }
  }
};

export const PortCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PortCondition",
    modelProperties: {
      portType: {
        serializedName: "portType",
        type: {
          name: "String"
        }
      },
      layer4Protocol: {
        serializedName: "layer4Protocol",
        required: true,
        type: {
          name: "String"
        }
      },
      ports: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ports",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      portGroupNames: {
        constraints: {
          MinItems: 1
        },
        serializedName: "portGroupNames",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CommonMatchConditions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommonMatchConditions",
    modelProperties: {
      protocolTypes: {
        constraints: {
          MinItems: 1
        },
        serializedName: "protocolTypes",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      vlanMatchCondition: {
        serializedName: "vlanMatchCondition",
        type: {
          name: "Composite",
          className: "VlanMatchCondition"
        }
      },
      ipCondition: {
        serializedName: "ipCondition",
        type: {
          name: "Composite",
          className: "IpMatchCondition"
        }
      }
    }
  }
};

export const VlanMatchCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VlanMatchCondition",
    modelProperties: {
      vlans: {
        constraints: {
          MinItems: 1
        },
        serializedName: "vlans",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      innerVlans: {
        constraints: {
          MinItems: 1
        },
        serializedName: "innerVlans",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      vlanGroupNames: {
        constraints: {
          MinItems: 1
        },
        serializedName: "vlanGroupNames",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IpMatchCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpMatchCondition",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      prefixType: {
        serializedName: "prefixType",
        type: {
          name: "String"
        }
      },
      ipPrefixValues: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipPrefixValues",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      ipGroupNames: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipGroupNames",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AccessControlListAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListAction",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      counterName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "counterName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CommonDynamicMatchConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommonDynamicMatchConfiguration",
    modelProperties: {
      ipGroups: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpGroupProperties"
            }
          }
        }
      },
      vlanGroups: {
        constraints: {
          MinItems: 1
        },
        serializedName: "vlanGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VlanGroupProperties"
            }
          }
        }
      },
      portGroups: {
        constraints: {
          MinItems: 1
        },
        serializedName: "portGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PortGroupProperties"
            }
          }
        }
      }
    }
  }
};

export const IpGroupProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpGroupProperties",
    modelProperties: {
      name: {
        constraints: {
          MinLength: 1
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      ipAddressType: {
        serializedName: "ipAddressType",
        type: {
          name: "String"
        }
      },
      ipPrefixes: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipPrefixes",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VlanGroupProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VlanGroupProperties",
    modelProperties: {
      name: {
        constraints: {
          MinLength: 1
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      vlans: {
        constraints: {
          MinItems: 1
        },
        serializedName: "vlans",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PortGroupProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PortGroupProperties",
    modelProperties: {
      name: {
        constraints: {
          MinLength: 1
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      ports: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ports",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const TagsUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AccessControlListsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessControlList"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnableDisableOnResources: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnableDisableOnResources",
    modelProperties: {
      resourceIds: {
        serializedName: "resourceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const InternetGatewayPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternetGatewayPatchableProperties",
    modelProperties: {
      internetGatewayRuleId: {
        serializedName: "internetGatewayRuleId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternetGatewaysListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternetGatewaysListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InternetGateway"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuleProperties",
    modelProperties: {
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      },
      addressList: {
        constraints: {
          MinItems: 1
        },
        serializedName: "addressList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const InternetGatewayRulesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternetGatewayRulesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InternetGatewayRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpCommunityPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunityPatchableProperties",
    modelProperties: {
      ipCommunityRules: {
        serializedName: "ipCommunityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpCommunityRule"
            }
          }
        }
      }
    }
  }
};

export const IpCommunityRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunityRule",
    modelProperties: {
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      },
      sequenceNumber: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "sequenceNumber",
        required: true,
        type: {
          name: "Number"
        }
      },
      wellKnownCommunities: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "wellKnownCommunities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      communityMembers: {
        constraints: {
          MinItems: 1
        },
        serializedName: "communityMembers",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IpCommunitiesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunitiesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpCommunity"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpExtendedCommunityPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityPatchableProperties",
    modelProperties: {
      ipExtendedCommunityRules: {
        serializedName: "ipExtendedCommunityRules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpExtendedCommunityRule"
            }
          }
        }
      }
    }
  }
};

export const IpExtendedCommunityRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityRule",
    modelProperties: {
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      },
      sequenceNumber: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "sequenceNumber",
        required: true,
        type: {
          name: "Number"
        }
      },
      routeTargets: {
        constraints: {
          MinItems: 1
        },
        serializedName: "routeTargets",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IpExtendedCommunityListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpExtendedCommunity"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPrefixPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixPatchableProperties",
    modelProperties: {
      ipPrefixRules: {
        serializedName: "ipPrefixRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpPrefixRule"
            }
          }
        }
      }
    }
  }
};

export const IpPrefixRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixRule",
    modelProperties: {
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      },
      sequenceNumber: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "sequenceNumber",
        required: true,
        type: {
          name: "Number"
        }
      },
      networkPrefix: {
        serializedName: "networkPrefix",
        required: true,
        type: {
          name: "String"
        }
      },
      condition: {
        serializedName: "condition",
        type: {
          name: "String"
        }
      },
      subnetMaskLength: {
        serializedName: "subnetMaskLength",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPrefixesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpPrefix"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "L2IsolationDomain"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainPatchableProperties",
    modelProperties: {
      redistributeConnectedSubnets: {
        defaultValue: "True",
        serializedName: "redistributeConnectedSubnets",
        type: {
          name: "String"
        }
      },
      redistributeStaticRoutes: {
        defaultValue: "False",
        serializedName: "redistributeStaticRoutes",
        type: {
          name: "String"
        }
      },
      aggregateRouteConfiguration: {
        serializedName: "aggregateRouteConfiguration",
        type: {
          name: "Composite",
          className: "AggregateRouteConfiguration"
        }
      },
      connectedSubnetRoutePolicy: {
        serializedName: "connectedSubnetRoutePolicy",
        type: {
          name: "Composite",
          className: "ConnectedSubnetRoutePolicy"
        }
      }
    }
  }
};

export const AggregateRouteConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AggregateRouteConfiguration",
    modelProperties: {
      ipv4Routes: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipv4Routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AggregateRoute"
            }
          }
        }
      },
      ipv6Routes: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipv6Routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AggregateRoute"
            }
          }
        }
      }
    }
  }
};

export const AggregateRoute: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AggregateRoute",
    modelProperties: {
      prefix: {
        constraints: {
          MinLength: 1
        },
        serializedName: "prefix",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectedSubnetRoutePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedSubnetRoutePolicy",
    modelProperties: {
      exportRoutePolicyId: {
        serializedName: "exportRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicy: {
        serializedName: "exportRoutePolicy",
        type: {
          name: "Composite",
          className: "L3ExportRoutePolicy"
        }
      }
    }
  }
};

export const L3ExportRoutePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3ExportRoutePolicy",
    modelProperties: {
      exportIpv4RoutePolicyId: {
        serializedName: "exportIpv4RoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportIpv6RoutePolicyId: {
        serializedName: "exportIpv6RoutePolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "L3IsolationDomain"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BfdConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BfdConfiguration",
    modelProperties: {
      administrativeState: {
        defaultValue: "Disabled",
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      intervalInMilliSeconds: {
        defaultValue: 300,
        serializedName: "intervalInMilliSeconds",
        type: {
          name: "Number"
        }
      },
      multiplier: {
        defaultValue: 5,
        serializedName: "multiplier",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NeighborAddress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NeighborAddress",
    modelProperties: {
      address: {
        constraints: {
          MinLength: 1
        },
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StaticRouteConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StaticRouteConfiguration",
    modelProperties: {
      bfdConfiguration: {
        serializedName: "bfdConfiguration",
        type: {
          name: "Composite",
          className: "BfdConfiguration"
        }
      },
      ipv4Routes: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipv4Routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StaticRouteProperties"
            }
          }
        }
      },
      ipv6Routes: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipv6Routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StaticRouteProperties"
            }
          }
        }
      }
    }
  }
};

export const StaticRouteProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StaticRouteProperties",
    modelProperties: {
      prefix: {
        constraints: {
          MinLength: 1
        },
        serializedName: "prefix",
        required: true,
        type: {
          name: "String"
        }
      },
      nextHop: {
        constraints: {
          MinItems: 1
        },
        serializedName: "nextHop",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ExtensionEnumProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtensionEnumProperty",
    modelProperties: {
      extension: {
        defaultValue: "NoExtension",
        serializedName: "extension",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworkPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworkPatchableProperties",
    modelProperties: {
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9200,
          InclusiveMinimum: 64
        },
        serializedName: "mtu",
        type: {
          name: "Number"
        }
      },
      connectedIPv4Subnets: {
        constraints: {
          MinItems: 1
        },
        serializedName: "connectedIPv4Subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedSubnet"
            }
          }
        }
      },
      connectedIPv6Subnets: {
        constraints: {
          MinItems: 1
        },
        serializedName: "connectedIPv6Subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedSubnet"
            }
          }
        }
      },
      importRoutePolicyId: {
        serializedName: "importRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicyId: {
        serializedName: "exportRoutePolicyId",
        type: {
          name: "String"
        }
      },
      importRoutePolicy: {
        serializedName: "importRoutePolicy",
        type: {
          name: "Composite",
          className: "ImportRoutePolicy"
        }
      },
      exportRoutePolicy: {
        serializedName: "exportRoutePolicy",
        type: {
          name: "Composite",
          className: "ExportRoutePolicy"
        }
      },
      ingressAclId: {
        serializedName: "ingressAclId",
        type: {
          name: "String"
        }
      },
      egressAclId: {
        serializedName: "egressAclId",
        type: {
          name: "String"
        }
      },
      isMonitoringEnabled: {
        defaultValue: "False",
        serializedName: "isMonitoringEnabled",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportRoutePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportRoutePolicy",
    modelProperties: {
      importIpv4RoutePolicyId: {
        serializedName: "importIpv4RoutePolicyId",
        type: {
          name: "String"
        }
      },
      importIpv6RoutePolicyId: {
        serializedName: "importIpv6RoutePolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExportRoutePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportRoutePolicy",
    modelProperties: {
      exportIpv4RoutePolicyId: {
        serializedName: "exportIpv4RoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportIpv6RoutePolicyId: {
        serializedName: "exportIpv6RoutePolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworkPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworkPatch",
    modelProperties: {
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9200,
          InclusiveMinimum: 64
        },
        serializedName: "properties.mtu",
        type: {
          name: "Number"
        }
      },
      connectedIPv4Subnets: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.connectedIPv4Subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedSubnet"
            }
          }
        }
      },
      connectedIPv6Subnets: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.connectedIPv6Subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedSubnet"
            }
          }
        }
      },
      importRoutePolicyId: {
        serializedName: "properties.importRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicyId: {
        serializedName: "properties.exportRoutePolicyId",
        type: {
          name: "String"
        }
      },
      importRoutePolicy: {
        serializedName: "properties.importRoutePolicy",
        type: {
          name: "Composite",
          className: "ImportRoutePolicy"
        }
      },
      exportRoutePolicy: {
        serializedName: "properties.exportRoutePolicy",
        type: {
          name: "Composite",
          className: "ExportRoutePolicy"
        }
      },
      ingressAclId: {
        serializedName: "properties.ingressAclId",
        type: {
          name: "String"
        }
      },
      egressAclId: {
        serializedName: "properties.egressAclId",
        type: {
          name: "String"
        }
      },
      isMonitoringEnabled: {
        defaultValue: "False",
        serializedName: "properties.isMonitoringEnabled",
        type: {
          name: "String"
        }
      },
      bgpConfiguration: {
        serializedName: "properties.bgpConfiguration",
        type: {
          name: "Composite",
          className: "BgpConfiguration"
        }
      },
      staticRouteConfiguration: {
        serializedName: "properties.staticRouteConfiguration",
        type: {
          name: "Composite",
          className: "StaticRouteConfiguration"
        }
      }
    }
  }
};

export const InternalNetworksList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworksList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InternalNetwork"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3OptionBProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3OptionBProperties",
    modelProperties: {
      importRouteTargets: {
        serializedName: "importRouteTargets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      exportRouteTargets: {
        serializedName: "exportRouteTargets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      routeTargets: {
        serializedName: "routeTargets",
        type: {
          name: "Composite",
          className: "RouteTargetInformation"
        }
      }
    }
  }
};

export const RouteTargetInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouteTargetInformation",
    modelProperties: {
      importIpv4RouteTargets: {
        constraints: {
          MinItems: 1
        },
        serializedName: "importIpv4RouteTargets",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      importIpv6RouteTargets: {
        constraints: {
          MinItems: 1
        },
        serializedName: "importIpv6RouteTargets",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      exportIpv4RouteTargets: {
        constraints: {
          MinItems: 1
        },
        serializedName: "exportIpv4RouteTargets",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      exportIpv6RouteTargets: {
        constraints: {
          MinItems: 1
        },
        serializedName: "exportIpv6RouteTargets",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Layer3IpPrefixProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Layer3IpPrefixProperties",
    modelProperties: {
      primaryIpv4Prefix: {
        serializedName: "primaryIpv4Prefix",
        type: {
          name: "String"
        }
      },
      primaryIpv6Prefix: {
        serializedName: "primaryIpv6Prefix",
        type: {
          name: "String"
        }
      },
      secondaryIpv4Prefix: {
        serializedName: "secondaryIpv4Prefix",
        type: {
          name: "String"
        }
      },
      secondaryIpv6Prefix: {
        serializedName: "secondaryIpv6Prefix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3OptionAProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3OptionAProperties",
    modelProperties: {
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9200,
          InclusiveMinimum: 64
        },
        serializedName: "mtu",
        type: {
          name: "Number"
        }
      },
      vlanId: {
        constraints: {
          InclusiveMaximum: 4094,
          InclusiveMinimum: 501
        },
        serializedName: "vlanId",
        type: {
          name: "Number"
        }
      },
      fabricASN: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "fabricASN",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      peerASN: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "peerASN",
        type: {
          name: "Number"
        }
      },
      bfdConfiguration: {
        serializedName: "bfdConfiguration",
        type: {
          name: "Composite",
          className: "BfdConfiguration"
        }
      },
      ingressAclId: {
        serializedName: "ingressAclId",
        type: {
          name: "String"
        }
      },
      egressAclId: {
        serializedName: "egressAclId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworkPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworkPatchableProperties",
    modelProperties: {
      importRoutePolicyId: {
        serializedName: "importRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicyId: {
        serializedName: "exportRoutePolicyId",
        type: {
          name: "String"
        }
      },
      importRoutePolicy: {
        serializedName: "importRoutePolicy",
        type: {
          name: "Composite",
          className: "ImportRoutePolicy"
        }
      },
      exportRoutePolicy: {
        serializedName: "exportRoutePolicy",
        type: {
          name: "Composite",
          className: "ExportRoutePolicy"
        }
      }
    }
  }
};

export const ExternalNetworkPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworkPatch",
    modelProperties: {
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      importRoutePolicyId: {
        serializedName: "properties.importRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicyId: {
        serializedName: "properties.exportRoutePolicyId",
        type: {
          name: "String"
        }
      },
      importRoutePolicy: {
        serializedName: "properties.importRoutePolicy",
        type: {
          name: "Composite",
          className: "ImportRoutePolicy"
        }
      },
      exportRoutePolicy: {
        serializedName: "properties.exportRoutePolicy",
        type: {
          name: "Composite",
          className: "ExportRoutePolicy"
        }
      },
      peeringOption: {
        serializedName: "properties.peeringOption",
        type: {
          name: "String"
        }
      },
      optionBProperties: {
        serializedName: "properties.optionBProperties",
        type: {
          name: "Composite",
          className: "L3OptionBProperties"
        }
      },
      optionAProperties: {
        serializedName: "properties.optionAProperties",
        type: {
          name: "Composite",
          className: "ExternalNetworkPatchPropertiesOptionAProperties"
        }
      }
    }
  }
};

export const ExternalNetworksList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworksList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExternalNetwork"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NeighborGroupPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NeighborGroupPatchableProperties",
    modelProperties: {
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "NeighborGroupDestination"
        }
      }
    }
  }
};

export const NeighborGroupDestination: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NeighborGroupDestination",
    modelProperties: {
      ipv4Addresses: {
        constraints: {
          MaxItems: 16
        },
        serializedName: "ipv4Addresses",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      ipv6Addresses: {
        constraints: {
          MaxItems: 16
        },
        serializedName: "ipv6Addresses",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const NeighborGroupsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NeighborGroupsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NeighborGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SupportedVersionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedVersionProperties",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      vendorOsVersion: {
        serializedName: "vendorOsVersion",
        type: {
          name: "String"
        }
      },
      vendorFirmwareVersion: {
        serializedName: "vendorFirmwareVersion",
        type: {
          name: "String"
        }
      },
      isDefault: {
        serializedName: "isDefault",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeviceInterfaceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceInterfaceProperties",
    modelProperties: {
      identifier: {
        serializedName: "identifier",
        type: {
          name: "String"
        }
      },
      interfaceType: {
        serializedName: "interfaceType",
        type: {
          name: "String"
        }
      },
      supportedConnectorTypes: {
        serializedName: "supportedConnectorTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SupportedConnectorProperties"
            }
          }
        }
      }
    }
  }
};

export const SupportedConnectorProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SupportedConnectorProperties",
    modelProperties: {
      connectorType: {
        serializedName: "connectorType",
        type: {
          name: "String"
        }
      },
      maxSpeedInMbps: {
        serializedName: "maxSpeedInMbps",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NetworkDeviceSkusListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDeviceSkusListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkDeviceSku"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicePatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicePatchableProperties",
    modelProperties: {
      hostName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "hostName",
        type: {
          name: "String"
        }
      },
      serialNumber: {
        constraints: {
          MinLength: 1
        },
        serializedName: "serialNumber",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkDevice"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfacePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfacePatch",
    modelProperties: {
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfacesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfacesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkInterface"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RebootProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RebootProperties",
    modelProperties: {
      rebootType: {
        serializedName: "rebootType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateVersion",
    modelProperties: {
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ControllerServices: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ControllerServices",
    modelProperties: {
      ipv4AddressSpaces: {
        serializedName: "ipv4AddressSpaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ipv6AddressSpaces: {
        serializedName: "ipv6AddressSpaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ManagedResourceGroupConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedResourceGroupConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricControllerPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricControllerPatchableProperties",
    modelProperties: {
      infrastructureExpressRouteConnections: {
        serializedName: "infrastructureExpressRouteConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteConnectionInformation"
            }
          }
        }
      },
      workloadExpressRouteConnections: {
        serializedName: "workloadExpressRouteConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteConnectionInformation"
            }
          }
        }
      }
    }
  }
};

export const ExpressRouteConnectionInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExpressRouteConnectionInformation",
    modelProperties: {
      expressRouteCircuitId: {
        serializedName: "expressRouteCircuitId",
        required: true,
        type: {
          name: "String"
        }
      },
      expressRouteAuthorizationKey: {
        serializedName: "expressRouteAuthorizationKey",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricControllersListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricControllersListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkFabricController"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricSkusListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricSkusListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkFabricSku"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TerminalServerPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TerminalServerPatchableProperties",
    modelProperties: {
      username: {
        constraints: {
          MinLength: 1
        },
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        constraints: {
          MinLength: 1
        },
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      serialNumber: {
        constraints: {
          MinLength: 1
        },
        serializedName: "serialNumber",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagementNetworkConfigurationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementNetworkConfigurationProperties",
    modelProperties: {
      infrastructureVpnConfiguration: {
        serializedName: "infrastructureVpnConfiguration",
        type: {
          name: "Composite",
          className: "VpnConfigurationProperties"
        }
      },
      workloadVpnConfiguration: {
        serializedName: "workloadVpnConfiguration",
        type: {
          name: "Composite",
          className: "VpnConfigurationProperties"
        }
      }
    }
  }
};

export const VpnConfigurationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnConfigurationProperties",
    modelProperties: {
      networkToNetworkInterconnectId: {
        serializedName: "networkToNetworkInterconnectId",
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      peeringOption: {
        serializedName: "peeringOption",
        required: true,
        type: {
          name: "String"
        }
      },
      optionBProperties: {
        serializedName: "optionBProperties",
        type: {
          name: "Composite",
          className: "OptionBProperties"
        }
      },
      optionAProperties: {
        serializedName: "optionAProperties",
        type: {
          name: "Composite",
          className: "VpnConfigurationPropertiesOptionAProperties"
        }
      }
    }
  }
};

export const OptionBProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptionBProperties",
    modelProperties: {
      importRouteTargets: {
        serializedName: "importRouteTargets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      exportRouteTargets: {
        serializedName: "exportRouteTargets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      routeTargets: {
        serializedName: "routeTargets",
        type: {
          name: "Composite",
          className: "RouteTargetInformation"
        }
      }
    }
  }
};

export const OptionAProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptionAProperties",
    modelProperties: {
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9200,
          InclusiveMinimum: 64
        },
        serializedName: "mtu",
        type: {
          name: "Number"
        }
      },
      vlanId: {
        constraints: {
          InclusiveMaximum: 4094,
          InclusiveMinimum: 501
        },
        serializedName: "vlanId",
        type: {
          name: "Number"
        }
      },
      peerASN: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "peerASN",
        type: {
          name: "Number"
        }
      },
      bfdConfiguration: {
        serializedName: "bfdConfiguration",
        type: {
          name: "Composite",
          className: "BfdConfiguration"
        }
      }
    }
  }
};

export const NetworkFabricPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricPatchableProperties",
    modelProperties: {
      rackCount: {
        constraints: {
          InclusiveMaximum: 8,
          InclusiveMinimum: 1
        },
        serializedName: "rackCount",
        type: {
          name: "Number"
        }
      },
      serverCountPerRack: {
        constraints: {
          InclusiveMaximum: 16,
          InclusiveMinimum: 1
        },
        serializedName: "serverCountPerRack",
        type: {
          name: "Number"
        }
      },
      ipv4Prefix: {
        constraints: {
          MinLength: 1
        },
        serializedName: "ipv4Prefix",
        type: {
          name: "String"
        }
      },
      ipv6Prefix: {
        constraints: {
          MinLength: 1
        },
        serializedName: "ipv6Prefix",
        type: {
          name: "String"
        }
      },
      fabricASN: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "fabricASN",
        type: {
          name: "Number"
        }
      },
      terminalServerConfiguration: {
        serializedName: "terminalServerConfiguration",
        type: {
          name: "Composite",
          className:
            "NetworkFabricPatchablePropertiesTerminalServerConfiguration"
        }
      },
      managementNetworkConfiguration: {
        serializedName: "managementNetworkConfiguration",
        type: {
          name: "Composite",
          className: "ManagementNetworkConfigurationPatchableProperties"
        }
      }
    }
  }
};

export const ManagementNetworkConfigurationPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementNetworkConfigurationPatchableProperties",
    modelProperties: {
      infrastructureVpnConfiguration: {
        serializedName: "infrastructureVpnConfiguration",
        type: {
          name: "Composite",
          className: "VpnConfigurationPatchableProperties"
        }
      },
      workloadVpnConfiguration: {
        serializedName: "workloadVpnConfiguration",
        type: {
          name: "Composite",
          className: "VpnConfigurationPatchableProperties"
        }
      }
    }
  }
};

export const VpnConfigurationPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnConfigurationPatchableProperties",
    modelProperties: {
      networkToNetworkInterconnectId: {
        serializedName: "networkToNetworkInterconnectId",
        type: {
          name: "String"
        }
      },
      peeringOption: {
        serializedName: "peeringOption",
        type: {
          name: "String"
        }
      },
      optionBProperties: {
        serializedName: "optionBProperties",
        type: {
          name: "Composite",
          className: "OptionBProperties"
        }
      },
      optionAProperties: {
        serializedName: "optionAProperties",
        type: {
          name: "Composite",
          className: "VpnConfigurationPatchablePropertiesOptionAProperties"
        }
      }
    }
  }
};

export const NetworkFabricsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkFabric"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateConfigurationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateConfigurationProperties",
    modelProperties: {
      validateAction: {
        serializedName: "validateAction",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Layer2Configuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Layer2Configuration",
    modelProperties: {
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9200,
          InclusiveMinimum: 64
        },
        serializedName: "mtu",
        type: {
          name: "Number"
        }
      },
      interfaces: {
        constraints: {
          MinItems: 1
        },
        serializedName: "interfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const NpbStaticRouteConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NpbStaticRouteConfiguration",
    modelProperties: {
      bfdConfiguration: {
        serializedName: "bfdConfiguration",
        type: {
          name: "Composite",
          className: "BfdConfiguration"
        }
      },
      ipv4Routes: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipv4Routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StaticRouteProperties"
            }
          }
        }
      },
      ipv6Routes: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipv6Routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StaticRouteProperties"
            }
          }
        }
      }
    }
  }
};

export const ImportRoutePolicyInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportRoutePolicyInformation",
    modelProperties: {
      importIpv4RoutePolicyId: {
        serializedName: "importIpv4RoutePolicyId",
        type: {
          name: "String"
        }
      },
      importIpv6RoutePolicyId: {
        serializedName: "importIpv6RoutePolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExportRoutePolicyInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportRoutePolicyInformation",
    modelProperties: {
      exportIpv4RoutePolicyId: {
        serializedName: "exportIpv4RoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportIpv6RoutePolicyId: {
        serializedName: "exportIpv6RoutePolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkToNetworkInterconnectsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkToNetworkInterconnectsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkToNetworkInterconnect"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkPacketBrokersListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkPacketBrokersListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkPacketBroker"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkRacksListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRacksListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkRack"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapRulePatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRulePatchableProperties",
    modelProperties: {
      configurationType: {
        serializedName: "configurationType",
        type: {
          name: "String"
        }
      },
      tapRulesUrl: {
        constraints: {
          MinLength: 1
        },
        serializedName: "tapRulesUrl",
        type: {
          name: "String"
        }
      },
      matchConfigurations: {
        constraints: {
          MinItems: 1
        },
        serializedName: "matchConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTapRuleMatchConfiguration"
            }
          }
        }
      },
      dynamicMatchConfigurations: {
        constraints: {
          MinItems: 1
        },
        serializedName: "dynamicMatchConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommonDynamicMatchConfiguration"
            }
          }
        }
      }
    }
  }
};

export const NetworkTapRuleMatchConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRuleMatchConfiguration",
    modelProperties: {
      matchConfigurationName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "matchConfigurationName",
        type: {
          name: "String"
        }
      },
      sequenceNumber: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "sequenceNumber",
        type: {
          name: "Number"
        }
      },
      ipAddressType: {
        serializedName: "ipAddressType",
        type: {
          name: "String"
        }
      },
      matchConditions: {
        constraints: {
          MinItems: 1
        },
        serializedName: "matchConditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTapRuleMatchCondition"
            }
          }
        }
      },
      actions: {
        constraints: {
          MinItems: 1
        },
        serializedName: "actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTapRuleAction"
            }
          }
        }
      }
    }
  }
};

export const NetworkTapRuleAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRuleAction",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      truncate: {
        constraints: {
          MinLength: 1
        },
        serializedName: "truncate",
        type: {
          name: "String"
        }
      },
      isTimestampEnabled: {
        serializedName: "isTimestampEnabled",
        type: {
          name: "String"
        }
      },
      destinationId: {
        serializedName: "destinationId",
        type: {
          name: "String"
        }
      },
      matchConfigurationName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "matchConfigurationName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapRulesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRulesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTapRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DestinationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DestinationProperties",
    modelProperties: {
      name: {
        constraints: {
          MinLength: 1
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      destinationType: {
        serializedName: "destinationType",
        type: {
          name: "String"
        }
      },
      destinationId: {
        serializedName: "destinationId",
        type: {
          name: "String"
        }
      },
      isolationDomainProperties: {
        serializedName: "isolationDomainProperties",
        type: {
          name: "Composite",
          className: "IsolationDomainProperties"
        }
      },
      destinationTapRuleId: {
        serializedName: "destinationTapRuleId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IsolationDomainProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IsolationDomainProperties",
    modelProperties: {
      encapsulation: {
        serializedName: "encapsulation",
        type: {
          name: "String"
        }
      },
      neighborGroupIds: {
        serializedName: "neighborGroupIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const NetworkTapsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTap"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutePolicyPatchableProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePolicyPatchableProperties",
    modelProperties: {
      statements: {
        serializedName: "statements",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutePolicyStatementProperties"
            }
          }
        }
      }
    }
  }
};

export const IpCommunityIdList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunityIdList",
    modelProperties: {
      ipCommunityIds: {
        serializedName: "ipCommunityIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IpExtendedCommunityIdList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityIdList",
    modelProperties: {
      ipExtendedCommunityIds: {
        serializedName: "ipExtendedCommunityIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StatementActionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatementActionProperties",
    modelProperties: {
      localPreference: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 0
        },
        serializedName: "localPreference",
        type: {
          name: "Number"
        }
      },
      actionType: {
        serializedName: "actionType",
        required: true,
        type: {
          name: "String"
        }
      },
      ipCommunityProperties: {
        serializedName: "ipCommunityProperties",
        type: {
          name: "Composite",
          className: "ActionIpCommunityProperties"
        }
      },
      ipExtendedCommunityProperties: {
        serializedName: "ipExtendedCommunityProperties",
        type: {
          name: "Composite",
          className: "ActionIpExtendedCommunityProperties"
        }
      }
    }
  }
};

export const IpCommunityAddOperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunityAddOperationProperties",
    modelProperties: {
      add: {
        serializedName: "add",
        type: {
          name: "Composite",
          className: "IpCommunityIdList"
        }
      }
    }
  }
};

export const IpCommunityDeleteOperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunityDeleteOperationProperties",
    modelProperties: {
      delete: {
        serializedName: "delete",
        type: {
          name: "Composite",
          className: "IpCommunityIdList"
        }
      }
    }
  }
};

export const IpCommunitySetOperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunitySetOperationProperties",
    modelProperties: {
      set: {
        serializedName: "set",
        type: {
          name: "Composite",
          className: "IpCommunityIdList"
        }
      }
    }
  }
};

export const IpExtendedCommunityAddOperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityAddOperationProperties",
    modelProperties: {
      add: {
        serializedName: "add",
        type: {
          name: "Composite",
          className: "IpExtendedCommunityIdList"
        }
      }
    }
  }
};

export const IpExtendedCommunityDeleteOperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityDeleteOperationProperties",
    modelProperties: {
      delete: {
        serializedName: "delete",
        type: {
          name: "Composite",
          className: "IpExtendedCommunityIdList"
        }
      }
    }
  }
};

export const IpExtendedCommunitySetOperationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunitySetOperationProperties",
    modelProperties: {
      set: {
        serializedName: "set",
        type: {
          name: "Composite",
          className: "IpExtendedCommunityIdList"
        }
      }
    }
  }
};

export const RoutePoliciesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePoliciesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutePolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedLocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedLocation",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessControlListProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...AccessControlListPatchableProperties.type.modelProperties,
      lastSyncedTime: {
        serializedName: "lastSyncedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessControlListPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListPatchProperties",
    modelProperties: {
      ...AccessControlListPatchableProperties.type.modelProperties,
      ...AnnotationResource.type.modelProperties
    }
  }
};

export const InternetGatewayProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternetGatewayProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...InternetGatewayPatchableProperties.type.modelProperties,
      ipv4Address: {
        serializedName: "ipv4Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      networkFabricControllerId: {
        serializedName: "networkFabricControllerId",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternetGatewayRuleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternetGatewayRuleProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ruleProperties: {
        serializedName: "ruleProperties",
        type: {
          name: "Composite",
          className: "RuleProperties"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      internetGatewayIds: {
        serializedName: "internetGatewayIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IpCommunityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunityProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...IpCommunityPatchableProperties.type.modelProperties,
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpExtendedCommunityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...IpExtendedCommunityPatchableProperties.type.modelProperties,
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpExtendedCommunityPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityPatchProperties",
    modelProperties: {
      ...IpExtendedCommunityPatchableProperties.type.modelProperties,
      ...AnnotationResource.type.modelProperties
    }
  }
};

export const IpPrefixProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...IpPrefixPatchableProperties.type.modelProperties,
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPrefixPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixPatchProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...IpPrefixPatchableProperties.type.modelProperties
    }
  }
};

export const L2IsolationDomainProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      networkFabricId: {
        serializedName: "networkFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      vlanId: {
        constraints: {
          InclusiveMaximum: 4094,
          InclusiveMinimum: 100
        },
        serializedName: "vlanId",
        required: true,
        type: {
          name: "Number"
        }
      },
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9200,
          InclusiveMinimum: 64
        },
        serializedName: "mtu",
        type: {
          name: "Number"
        }
      },
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainPatchProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9200,
          InclusiveMinimum: 64
        },
        serializedName: "mtu",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const L3IsolationDomainProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...L3IsolationDomainPatchableProperties.type.modelProperties,
      networkFabricId: {
        serializedName: "networkFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainPatchProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...L3IsolationDomainPatchableProperties.type.modelProperties
    }
  }
};

export const BgpConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BgpConfiguration",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      bfdConfiguration: {
        serializedName: "bfdConfiguration",
        type: {
          name: "Composite",
          className: "BfdConfiguration"
        }
      },
      defaultRouteOriginate: {
        serializedName: "defaultRouteOriginate",
        type: {
          name: "String"
        }
      },
      allowAS: {
        defaultValue: 2,
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 0
        },
        serializedName: "allowAS",
        type: {
          name: "Number"
        }
      },
      allowASOverride: {
        serializedName: "allowASOverride",
        type: {
          name: "String"
        }
      },
      fabricASN: {
        serializedName: "fabricASN",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      peerASN: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "peerASN",
        type: {
          name: "Number"
        }
      },
      ipv4ListenRangePrefixes: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipv4ListenRangePrefixes",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      ipv6ListenRangePrefixes: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipv6ListenRangePrefixes",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      ipv4NeighborAddress: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipv4NeighborAddress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NeighborAddress"
            }
          }
        }
      },
      ipv6NeighborAddress: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipv6NeighborAddress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NeighborAddress"
            }
          }
        }
      }
    }
  }
};

export const ConnectedSubnet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedSubnet",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      prefix: {
        constraints: {
          MinLength: 1
        },
        serializedName: "prefix",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworkProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworkProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...InternalNetworkPatchableProperties.type.modelProperties,
      ...ExtensionEnumProperty.type.modelProperties,
      vlanId: {
        constraints: {
          InclusiveMaximum: 4094,
          InclusiveMinimum: 100
        },
        serializedName: "vlanId",
        required: true,
        type: {
          name: "Number"
        }
      },
      bgpConfiguration: {
        serializedName: "bgpConfiguration",
        type: {
          name: "Composite",
          className: "InternalNetworkPropertiesBgpConfiguration"
        }
      },
      staticRouteConfiguration: {
        serializedName: "staticRouteConfiguration",
        type: {
          name: "Composite",
          className: "InternalNetworkPropertiesStaticRouteConfiguration"
        }
      },
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworkPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworkPatchProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...InternalNetworkPatchableProperties.type.modelProperties,
      bgpConfiguration: {
        serializedName: "bgpConfiguration",
        type: {
          name: "Composite",
          className: "BgpConfiguration"
        }
      },
      staticRouteConfiguration: {
        serializedName: "staticRouteConfiguration",
        type: {
          name: "Composite",
          className: "StaticRouteConfiguration"
        }
      }
    }
  }
};

export const ExternalNetworkProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworkProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...ExternalNetworkPatchableProperties.type.modelProperties,
      networkToNetworkInterconnectId: {
        serializedName: "networkToNetworkInterconnectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      peeringOption: {
        serializedName: "peeringOption",
        required: true,
        type: {
          name: "String"
        }
      },
      optionBProperties: {
        serializedName: "optionBProperties",
        type: {
          name: "Composite",
          className: "L3OptionBProperties"
        }
      },
      optionAProperties: {
        serializedName: "optionAProperties",
        type: {
          name: "Composite",
          className: "ExternalNetworkPropertiesOptionAProperties"
        }
      },
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworkPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworkPatchProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...ExternalNetworkPatchableProperties.type.modelProperties,
      peeringOption: {
        serializedName: "peeringOption",
        type: {
          name: "String"
        }
      },
      optionBProperties: {
        serializedName: "optionBProperties",
        type: {
          name: "Composite",
          className: "L3OptionBProperties"
        }
      },
      optionAProperties: {
        serializedName: "optionAProperties",
        type: {
          name: "Composite",
          className: "ExternalNetworkPatchPropertiesOptionAProperties"
        }
      }
    }
  }
};

export const NeighborGroupProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NeighborGroupProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...NeighborGroupPatchableProperties.type.modelProperties,
      networkTapIds: {
        serializedName: "networkTapIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      networkTapRuleIds: {
        serializedName: "networkTapRuleIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NeighborGroupPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NeighborGroupPatchProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...NeighborGroupPatchableProperties.type.modelProperties
    }
  }
};

export const NetworkDeviceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDeviceProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...NetworkDevicePatchableProperties.type.modelProperties,
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkDeviceSku: {
        serializedName: "networkDeviceSku",
        type: {
          name: "String"
        }
      },
      networkDeviceRole: {
        serializedName: "networkDeviceRole",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkRackId: {
        serializedName: "networkRackId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managementIpv4Address: {
        serializedName: "managementIpv4Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managementIpv6Address: {
        serializedName: "managementIpv6Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicePatchParametersProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicePatchParametersProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...NetworkDevicePatchableProperties.type.modelProperties
    }
  }
};

export const NetworkInterfaceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfaceProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      physicalIdentifier: {
        serializedName: "physicalIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectedTo: {
        serializedName: "connectedTo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      interfaceType: {
        serializedName: "interfaceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipv4Address: {
        serializedName: "ipv4Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipv6Address: {
        serializedName: "ipv6Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfacePatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfacePatchProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties
    }
  }
};

export const NetworkFabricControllerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricControllerProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...NetworkFabricControllerPatchableProperties.type.modelProperties,
      infrastructureServices: {
        serializedName: "infrastructureServices",
        type: {
          name: "Composite",
          className: "ControllerServices"
        }
      },
      workloadServices: {
        serializedName: "workloadServices",
        type: {
          name: "Composite",
          className: "ControllerServices"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedResourceGroupConfiguration"
        }
      },
      networkFabricIds: {
        serializedName: "networkFabricIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      workloadManagementNetwork: {
        defaultValue: true,
        serializedName: "workloadManagementNetwork",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isWorkloadManagementNetworkEnabled: {
        defaultValue: "True",
        serializedName: "isWorkloadManagementNetworkEnabled",
        type: {
          name: "String"
        }
      },
      tenantInternetGatewayIds: {
        serializedName: "tenantInternetGatewayIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ipv4AddressSpace: {
        defaultValue: "10.0.0.0/19",
        constraints: {
          MinLength: 1
        },
        serializedName: "ipv4AddressSpace",
        type: {
          name: "String"
        }
      },
      ipv6AddressSpace: {
        defaultValue: "FC00::/59",
        constraints: {
          MinLength: 1
        },
        serializedName: "ipv6AddressSpace",
        type: {
          name: "String"
        }
      },
      nfcSku: {
        defaultValue: "Standard",
        serializedName: "nfcSku",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      networkFabricSku: {
        constraints: {
          MinLength: 1
        },
        serializedName: "networkFabricSku",
        required: true,
        type: {
          name: "String"
        }
      },
      fabricVersion: {
        serializedName: "fabricVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      routerIds: {
        serializedName: "routerIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      networkFabricControllerId: {
        serializedName: "networkFabricControllerId",
        required: true,
        type: {
          name: "String"
        }
      },
      rackCount: {
        constraints: {
          InclusiveMaximum: 8,
          InclusiveMinimum: 1
        },
        serializedName: "rackCount",
        type: {
          name: "Number"
        }
      },
      serverCountPerRack: {
        constraints: {
          InclusiveMaximum: 16,
          InclusiveMinimum: 1
        },
        serializedName: "serverCountPerRack",
        required: true,
        type: {
          name: "Number"
        }
      },
      ipv4Prefix: {
        constraints: {
          MinLength: 1
        },
        serializedName: "ipv4Prefix",
        required: true,
        type: {
          name: "String"
        }
      },
      ipv6Prefix: {
        constraints: {
          MinLength: 1
        },
        serializedName: "ipv6Prefix",
        type: {
          name: "String"
        }
      },
      fabricASN: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "fabricASN",
        required: true,
        type: {
          name: "Number"
        }
      },
      terminalServerConfiguration: {
        serializedName: "terminalServerConfiguration",
        type: {
          name: "Composite",
          className: "TerminalServerConfiguration"
        }
      },
      managementNetworkConfiguration: {
        serializedName: "managementNetworkConfiguration",
        type: {
          name: "Composite",
          className: "ManagementNetworkConfigurationProperties"
        }
      },
      racks: {
        serializedName: "racks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      l2IsolationDomains: {
        serializedName: "l2IsolationDomains",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      l3IsolationDomains: {
        serializedName: "l3IsolationDomains",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricPatchProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...NetworkFabricPatchableProperties.type.modelProperties
    }
  }
};

export const NetworkRackProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRackProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      networkRackType: {
        serializedName: "networkRackType",
        type: {
          name: "String"
        }
      },
      networkFabricId: {
        serializedName: "networkFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      networkDevices: {
        serializedName: "networkDevices",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapRuleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRuleProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...NetworkTapRulePatchableProperties.type.modelProperties,
      networkTapId: {
        serializedName: "networkTapId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      pollingIntervalInSeconds: {
        defaultValue: 30,
        serializedName: "pollingIntervalInSeconds",
        type: {
          name: "Number"
        }
      },
      lastSyncedTime: {
        serializedName: "lastSyncedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapRulePatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRulePatchProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...NetworkTapRulePatchableProperties.type.modelProperties
    }
  }
};

export const NetworkTapProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      networkPacketBrokerId: {
        serializedName: "networkPacketBrokerId",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceTapRuleId: {
        serializedName: "sourceTapRuleId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      destinations: {
        constraints: {
          MinItems: 1
        },
        serializedName: "destinations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTapPropertiesDestinationsItem"
            }
          }
        }
      },
      pollingType: {
        serializedName: "pollingType",
        type: {
          name: "String"
        }
      },
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapPatchableParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapPatchableParameters",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      pollingType: {
        serializedName: "pollingType",
        type: {
          name: "String"
        }
      },
      destinations: {
        serializedName: "destinations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTapPatchableParametersDestinationsItem"
            }
          }
        }
      }
    }
  }
};

export const RoutePolicyStatementProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePolicyStatementProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      sequenceNumber: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "sequenceNumber",
        required: true,
        type: {
          name: "Number"
        }
      },
      condition: {
        serializedName: "condition",
        type: {
          name: "Composite",
          className: "StatementConditionProperties"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "StatementActionProperties"
        }
      }
    }
  }
};

export const RoutePolicyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePolicyProperties",
    modelProperties: {
      ...AnnotationResource.type.modelProperties,
      ...RoutePolicyPatchableProperties.type.modelProperties,
      networkFabricId: {
        serializedName: "networkFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      addressFamilyType: {
        defaultValue: "IPv4",
        serializedName: "addressFamilyType",
        type: {
          name: "String"
        }
      },
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessControlListPortCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListPortCondition",
    modelProperties: {
      ...PortCondition.type.modelProperties,
      flags: {
        serializedName: "flags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AccessControlListMatchCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListMatchCondition",
    modelProperties: {
      ...CommonMatchConditions.type.modelProperties,
      etherTypes: {
        constraints: {
          MinItems: 1
        },
        serializedName: "etherTypes",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      fragments: {
        constraints: {
          MinItems: 1
        },
        serializedName: "fragments",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      ipLengths: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ipLengths",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      ttlValues: {
        constraints: {
          MinItems: 1
        },
        serializedName: "ttlValues",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      dscpMarkings: {
        constraints: {
          MinItems: 1
        },
        serializedName: "dscpMarkings",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              MinLength: 1
            },
            type: {
              name: "String"
            }
          }
        }
      },
      portCondition: {
        serializedName: "portCondition",
        type: {
          name: "Composite",
          className: "AccessControlListPortCondition"
        }
      }
    }
  }
};

export const NetworkTapRuleMatchCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRuleMatchCondition",
    modelProperties: {
      ...CommonMatchConditions.type.modelProperties,
      encapsulationType: {
        defaultValue: "None",
        serializedName: "encapsulationType",
        type: {
          name: "String"
        }
      },
      portCondition: {
        serializedName: "portCondition",
        type: {
          name: "Composite",
          className: "PortCondition"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const CommonPostActionResponseForStateUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommonPostActionResponseForStateUpdate",
    modelProperties: {
      ...ErrorResponse.type.modelProperties,
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateConfigurationResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidateConfigurationResponse",
    modelProperties: {
      ...ErrorResponse.type.modelProperties,
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CommonPostActionResponseForDeviceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommonPostActionResponseForDeviceUpdate",
    modelProperties: {
      ...ErrorResponse.type.modelProperties,
      configurationState: {
        serializedName: "configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      successfulDevices: {
        serializedName: "successfulDevices",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      failedDevices: {
        serializedName: "failedDevices",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AccessControlListPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListPatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties,
      configurationType: {
        serializedName: "properties.configurationType",
        type: {
          name: "String"
        }
      },
      aclsUrl: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.aclsUrl",
        type: {
          name: "String"
        }
      },
      matchConfigurations: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.matchConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessControlListMatchConfiguration"
            }
          }
        }
      },
      dynamicMatchConfigurations: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.dynamicMatchConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommonDynamicMatchConfiguration"
            }
          }
        }
      },
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternetGatewayPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternetGatewayPatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties,
      internetGatewayRuleId: {
        serializedName: "properties.internetGatewayRuleId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternetGatewayRulePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternetGatewayRulePatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties
    }
  }
};

export const IpCommunityPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunityPatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties,
      ipCommunityRules: {
        serializedName: "properties.ipCommunityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpCommunityRule"
            }
          }
        }
      }
    }
  }
};

export const IpExtendedCommunityPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunityPatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties,
      ipExtendedCommunityRules: {
        serializedName: "properties.ipExtendedCommunityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpExtendedCommunityRule"
            }
          }
        }
      },
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPrefixPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixPatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      ipPrefixRules: {
        serializedName: "properties.ipPrefixRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpPrefixRule"
            }
          }
        }
      }
    }
  }
};

export const L2IsolationDomainPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainPatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9200,
          InclusiveMinimum: 64
        },
        serializedName: "properties.mtu",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const L3IsolationDomainPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainPatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      redistributeConnectedSubnets: {
        defaultValue: "True",
        serializedName: "properties.redistributeConnectedSubnets",
        type: {
          name: "String"
        }
      },
      redistributeStaticRoutes: {
        defaultValue: "False",
        serializedName: "properties.redistributeStaticRoutes",
        type: {
          name: "String"
        }
      },
      aggregateRouteConfiguration: {
        serializedName: "properties.aggregateRouteConfiguration",
        type: {
          name: "Composite",
          className: "AggregateRouteConfiguration"
        }
      },
      connectedSubnetRoutePolicy: {
        serializedName: "properties.connectedSubnetRoutePolicy",
        type: {
          name: "Composite",
          className: "ConnectedSubnetRoutePolicy"
        }
      }
    }
  }
};

export const NeighborGroupPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NeighborGroupPatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      destination: {
        serializedName: "properties.destination",
        type: {
          name: "Composite",
          className: "NeighborGroupDestination"
        }
      }
    }
  }
};

export const NetworkDevicePatchParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicePatchParameters",
    modelProperties: {
      ...TagsUpdate.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      hostName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      serialNumber: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.serialNumber",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricControllerPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricControllerPatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties,
      infrastructureExpressRouteConnections: {
        serializedName: "properties.infrastructureExpressRouteConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteConnectionInformation"
            }
          }
        }
      },
      workloadExpressRouteConnections: {
        serializedName: "properties.workloadExpressRouteConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteConnectionInformation"
            }
          }
        }
      }
    }
  }
};

export const NetworkFabricPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricPatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      rackCount: {
        constraints: {
          InclusiveMaximum: 8,
          InclusiveMinimum: 1
        },
        serializedName: "properties.rackCount",
        type: {
          name: "Number"
        }
      },
      serverCountPerRack: {
        constraints: {
          InclusiveMaximum: 16,
          InclusiveMinimum: 1
        },
        serializedName: "properties.serverCountPerRack",
        type: {
          name: "Number"
        }
      },
      ipv4Prefix: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.ipv4Prefix",
        type: {
          name: "String"
        }
      },
      ipv6Prefix: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.ipv6Prefix",
        type: {
          name: "String"
        }
      },
      fabricASN: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "properties.fabricASN",
        type: {
          name: "Number"
        }
      },
      terminalServerConfiguration: {
        serializedName: "properties.terminalServerConfiguration",
        type: {
          name: "Composite",
          className:
            "NetworkFabricPatchablePropertiesTerminalServerConfiguration"
        }
      },
      managementNetworkConfiguration: {
        serializedName: "properties.managementNetworkConfiguration",
        type: {
          name: "Composite",
          className: "ManagementNetworkConfigurationPatchableProperties"
        }
      }
    }
  }
};

export const NetworkPacketBrokerPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkPacketBrokerPatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties
    }
  }
};

export const NetworkTapRulePatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRulePatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      configurationType: {
        serializedName: "properties.configurationType",
        type: {
          name: "String"
        }
      },
      tapRulesUrl: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.tapRulesUrl",
        type: {
          name: "String"
        }
      },
      matchConfigurations: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.matchConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTapRuleMatchConfiguration"
            }
          }
        }
      },
      dynamicMatchConfigurations: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.dynamicMatchConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommonDynamicMatchConfiguration"
            }
          }
        }
      }
    }
  }
};

export const NetworkTapPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapPatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      pollingType: {
        serializedName: "properties.pollingType",
        type: {
          name: "String"
        }
      },
      destinations: {
        serializedName: "properties.destinations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTapPatchableParametersDestinationsItem"
            }
          }
        }
      }
    }
  }
};

export const RoutePolicyPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePolicyPatch",
    modelProperties: {
      ...TagsUpdate.type.modelProperties,
      statements: {
        serializedName: "properties.statements",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutePolicyStatementProperties"
            }
          }
        }
      }
    }
  }
};

export const UpdateAdministrativeState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateAdministrativeState",
    modelProperties: {
      ...EnableDisableOnResources.type.modelProperties,
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateDeviceAdministrativeState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateDeviceAdministrativeState",
    modelProperties: {
      ...EnableDisableOnResources.type.modelProperties,
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworkPropertiesStaticRouteConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworkPropertiesStaticRouteConfiguration",
    modelProperties: {
      ...StaticRouteConfiguration.type.modelProperties,
      ...ExtensionEnumProperty.type.modelProperties
    }
  }
};

export const ExternalNetworkPropertiesOptionAProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworkPropertiesOptionAProperties",
    modelProperties: {
      ...Layer3IpPrefixProperties.type.modelProperties,
      ...L3OptionAProperties.type.modelProperties
    }
  }
};

export const ExternalNetworkPatchPropertiesOptionAProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworkPatchPropertiesOptionAProperties",
    modelProperties: {
      ...Layer3IpPrefixProperties.type.modelProperties,
      ...L3OptionAProperties.type.modelProperties
    }
  }
};

export const TerminalServerConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TerminalServerConfiguration",
    modelProperties: {
      ...TerminalServerPatchableProperties.type.modelProperties,
      ...Layer3IpPrefixProperties.type.modelProperties,
      networkDeviceId: {
        serializedName: "networkDeviceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VpnConfigurationPropertiesOptionAProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnConfigurationPropertiesOptionAProperties",
    modelProperties: {
      ...OptionAProperties.type.modelProperties,
      ...Layer3IpPrefixProperties.type.modelProperties
    }
  }
};

export const NetworkFabricPatchablePropertiesTerminalServerConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricPatchablePropertiesTerminalServerConfiguration",
    modelProperties: {
      ...TerminalServerPatchableProperties.type.modelProperties,
      ...Layer3IpPrefixProperties.type.modelProperties
    }
  }
};

export const VpnConfigurationPatchablePropertiesOptionAProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VpnConfigurationPatchablePropertiesOptionAProperties",
    modelProperties: {
      ...OptionAProperties.type.modelProperties,
      ...Layer3IpPrefixProperties.type.modelProperties
    }
  }
};

export const OptionBLayer3Configuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptionBLayer3Configuration",
    modelProperties: {
      ...Layer3IpPrefixProperties.type.modelProperties,
      peerASN: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "peerASN",
        type: {
          name: "Number"
        }
      },
      vlanId: {
        constraints: {
          InclusiveMaximum: 4094,
          InclusiveMinimum: 100
        },
        serializedName: "vlanId",
        type: {
          name: "Number"
        }
      },
      fabricASN: {
        serializedName: "fabricASN",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NetworkTapPropertiesDestinationsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapPropertiesDestinationsItem",
    modelProperties: {
      ...DestinationProperties.type.modelProperties
    }
  }
};

export const NetworkTapPatchableParametersDestinationsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapPatchableParametersDestinationsItem",
    modelProperties: {
      ...DestinationProperties.type.modelProperties
    }
  }
};

export const StatementConditionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatementConditionProperties",
    modelProperties: {
      ...IpCommunityIdList.type.modelProperties,
      ...IpExtendedCommunityIdList.type.modelProperties,
      type: {
        defaultValue: "Or",
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      ipPrefixId: {
        serializedName: "ipPrefixId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActionIpCommunityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActionIpCommunityProperties",
    modelProperties: {
      ...IpCommunityAddOperationProperties.type.modelProperties,
      ...IpCommunityDeleteOperationProperties.type.modelProperties,
      ...IpCommunitySetOperationProperties.type.modelProperties
    }
  }
};

export const ActionIpExtendedCommunityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActionIpExtendedCommunityProperties",
    modelProperties: {
      ...IpExtendedCommunityAddOperationProperties.type.modelProperties,
      ...IpExtendedCommunityDeleteOperationProperties.type.modelProperties,
      ...IpExtendedCommunitySetOperationProperties.type.modelProperties
    }
  }
};

export const InternalNetworkPropertiesBgpConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworkPropertiesBgpConfiguration",
    modelProperties: {
      ...BgpConfiguration.type.modelProperties
    }
  }
};

export const AccessControlList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlList",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      configurationType: {
        serializedName: "properties.configurationType",
        type: {
          name: "String"
        }
      },
      aclsUrl: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.aclsUrl",
        type: {
          name: "String"
        }
      },
      matchConfigurations: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.matchConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccessControlListMatchConfiguration"
            }
          }
        }
      },
      dynamicMatchConfigurations: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.dynamicMatchConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommonDynamicMatchConfiguration"
            }
          }
        }
      },
      lastSyncedTime: {
        serializedName: "properties.lastSyncedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternetGateway: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternetGateway",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      internetGatewayRuleId: {
        serializedName: "properties.internetGatewayRuleId",
        type: {
          name: "String"
        }
      },
      ipv4Address: {
        serializedName: "properties.ipv4Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "properties.port",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        required: true,
        type: {
          name: "String"
        }
      },
      networkFabricControllerId: {
        serializedName: "properties.networkFabricControllerId",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternetGatewayRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternetGatewayRule",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      ruleProperties: {
        serializedName: "properties.ruleProperties",
        type: {
          name: "Composite",
          className: "RuleProperties"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      internetGatewayIds: {
        serializedName: "properties.internetGatewayIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IpCommunity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunity",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      ipCommunityRules: {
        serializedName: "properties.ipCommunityRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpCommunityRule"
            }
          }
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpExtendedCommunity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunity",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      ipExtendedCommunityRules: {
        serializedName: "properties.ipExtendedCommunityRules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpExtendedCommunityRule"
            }
          }
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPrefix: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefix",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      ipPrefixRules: {
        serializedName: "properties.ipPrefixRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpPrefixRule"
            }
          }
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomain: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomain",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      networkFabricId: {
        serializedName: "properties.networkFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      vlanId: {
        constraints: {
          InclusiveMaximum: 4094,
          InclusiveMinimum: 100
        },
        serializedName: "properties.vlanId",
        required: true,
        type: {
          name: "Number"
        }
      },
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9200,
          InclusiveMinimum: 64
        },
        serializedName: "properties.mtu",
        type: {
          name: "Number"
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomain: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomain",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      redistributeConnectedSubnets: {
        defaultValue: "True",
        serializedName: "properties.redistributeConnectedSubnets",
        type: {
          name: "String"
        }
      },
      redistributeStaticRoutes: {
        defaultValue: "False",
        serializedName: "properties.redistributeStaticRoutes",
        type: {
          name: "String"
        }
      },
      aggregateRouteConfiguration: {
        serializedName: "properties.aggregateRouteConfiguration",
        type: {
          name: "Composite",
          className: "AggregateRouteConfiguration"
        }
      },
      connectedSubnetRoutePolicy: {
        serializedName: "properties.connectedSubnetRoutePolicy",
        type: {
          name: "Composite",
          className: "ConnectedSubnetRoutePolicy"
        }
      },
      networkFabricId: {
        serializedName: "properties.networkFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NeighborGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NeighborGroup",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      destination: {
        serializedName: "properties.destination",
        type: {
          name: "Composite",
          className: "NeighborGroupDestination"
        }
      },
      networkTapIds: {
        serializedName: "properties.networkTapIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      networkTapRuleIds: {
        serializedName: "properties.networkTapRuleIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevice: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevice",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      hostName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      serialNumber: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.serialNumber",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkDeviceSku: {
        serializedName: "properties.networkDeviceSku",
        type: {
          name: "String"
        }
      },
      networkDeviceRole: {
        serializedName: "properties.networkDeviceRole",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkRackId: {
        serializedName: "properties.networkRackId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managementIpv4Address: {
        serializedName: "properties.managementIpv4Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managementIpv6Address: {
        serializedName: "properties.managementIpv6Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricController: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricController",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      infrastructureExpressRouteConnections: {
        serializedName: "properties.infrastructureExpressRouteConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteConnectionInformation"
            }
          }
        }
      },
      workloadExpressRouteConnections: {
        serializedName: "properties.workloadExpressRouteConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExpressRouteConnectionInformation"
            }
          }
        }
      },
      infrastructureServices: {
        serializedName: "properties.infrastructureServices",
        type: {
          name: "Composite",
          className: "ControllerServices"
        }
      },
      workloadServices: {
        serializedName: "properties.workloadServices",
        type: {
          name: "Composite",
          className: "ControllerServices"
        }
      },
      managedResourceGroupConfiguration: {
        serializedName: "properties.managedResourceGroupConfiguration",
        type: {
          name: "Composite",
          className: "ManagedResourceGroupConfiguration"
        }
      },
      networkFabricIds: {
        serializedName: "properties.networkFabricIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      workloadManagementNetwork: {
        defaultValue: true,
        serializedName: "properties.workloadManagementNetwork",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isWorkloadManagementNetworkEnabled: {
        defaultValue: "True",
        serializedName: "properties.isWorkloadManagementNetworkEnabled",
        type: {
          name: "String"
        }
      },
      tenantInternetGatewayIds: {
        serializedName: "properties.tenantInternetGatewayIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ipv4AddressSpace: {
        defaultValue: "10.0.0.0/19",
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.ipv4AddressSpace",
        type: {
          name: "String"
        }
      },
      ipv6AddressSpace: {
        defaultValue: "FC00::/59",
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.ipv6AddressSpace",
        type: {
          name: "String"
        }
      },
      nfcSku: {
        defaultValue: "Standard",
        serializedName: "properties.nfcSku",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabric",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      networkFabricSku: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.networkFabricSku",
        required: true,
        type: {
          name: "String"
        }
      },
      fabricVersion: {
        serializedName: "properties.fabricVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      routerIds: {
        serializedName: "properties.routerIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      networkFabricControllerId: {
        serializedName: "properties.networkFabricControllerId",
        required: true,
        type: {
          name: "String"
        }
      },
      rackCount: {
        constraints: {
          InclusiveMaximum: 8,
          InclusiveMinimum: 1
        },
        serializedName: "properties.rackCount",
        type: {
          name: "Number"
        }
      },
      serverCountPerRack: {
        constraints: {
          InclusiveMaximum: 16,
          InclusiveMinimum: 1
        },
        serializedName: "properties.serverCountPerRack",
        required: true,
        type: {
          name: "Number"
        }
      },
      ipv4Prefix: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.ipv4Prefix",
        required: true,
        type: {
          name: "String"
        }
      },
      ipv6Prefix: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.ipv6Prefix",
        type: {
          name: "String"
        }
      },
      fabricASN: {
        constraints: {
          InclusiveMaximum: 4294967295,
          InclusiveMinimum: 1
        },
        serializedName: "properties.fabricASN",
        required: true,
        type: {
          name: "Number"
        }
      },
      terminalServerConfiguration: {
        serializedName: "properties.terminalServerConfiguration",
        type: {
          name: "Composite",
          className: "TerminalServerConfiguration"
        }
      },
      managementNetworkConfiguration: {
        serializedName: "properties.managementNetworkConfiguration",
        type: {
          name: "Composite",
          className: "ManagementNetworkConfigurationProperties"
        }
      },
      racks: {
        serializedName: "properties.racks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      l2IsolationDomains: {
        serializedName: "properties.l2IsolationDomains",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      l3IsolationDomains: {
        serializedName: "properties.l3IsolationDomains",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkPacketBroker: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkPacketBroker",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      networkFabricId: {
        serializedName: "properties.networkFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      networkDeviceIds: {
        serializedName: "properties.networkDeviceIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sourceInterfaceIds: {
        serializedName: "properties.sourceInterfaceIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      networkTapIds: {
        serializedName: "properties.networkTapIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      neighborGroupIds: {
        serializedName: "properties.neighborGroupIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkRack: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRack",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      networkRackType: {
        serializedName: "properties.networkRackType",
        type: {
          name: "String"
        }
      },
      networkFabricId: {
        serializedName: "properties.networkFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      networkDevices: {
        serializedName: "properties.networkDevices",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRule",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      configurationType: {
        serializedName: "properties.configurationType",
        type: {
          name: "String"
        }
      },
      tapRulesUrl: {
        constraints: {
          MinLength: 1
        },
        serializedName: "properties.tapRulesUrl",
        type: {
          name: "String"
        }
      },
      matchConfigurations: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.matchConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTapRuleMatchConfiguration"
            }
          }
        }
      },
      dynamicMatchConfigurations: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.dynamicMatchConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommonDynamicMatchConfiguration"
            }
          }
        }
      },
      networkTapId: {
        serializedName: "properties.networkTapId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      pollingIntervalInSeconds: {
        defaultValue: 30,
        serializedName: "properties.pollingIntervalInSeconds",
        type: {
          name: "Number"
        }
      },
      lastSyncedTime: {
        serializedName: "properties.lastSyncedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTap: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTap",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      networkPacketBrokerId: {
        serializedName: "properties.networkPacketBrokerId",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceTapRuleId: {
        serializedName: "properties.sourceTapRuleId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      destinations: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.destinations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkTapPropertiesDestinationsItem"
            }
          }
        }
      },
      pollingType: {
        serializedName: "properties.pollingType",
        type: {
          name: "String"
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePolicy",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      statements: {
        serializedName: "properties.statements",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoutePolicyStatementProperties"
            }
          }
        }
      },
      networkFabricId: {
        serializedName: "properties.networkFabricId",
        required: true,
        type: {
          name: "String"
        }
      },
      addressFamilyType: {
        defaultValue: "IPv4",
        serializedName: "properties.addressFamilyType",
        type: {
          name: "String"
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetwork",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      mtu: {
        defaultValue: 1500,
        constraints: {
          InclusiveMaximum: 9200,
          InclusiveMinimum: 64
        },
        serializedName: "properties.mtu",
        type: {
          name: "Number"
        }
      },
      connectedIPv4Subnets: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.connectedIPv4Subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedSubnet"
            }
          }
        }
      },
      connectedIPv6Subnets: {
        constraints: {
          MinItems: 1
        },
        serializedName: "properties.connectedIPv6Subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedSubnet"
            }
          }
        }
      },
      importRoutePolicyId: {
        serializedName: "properties.importRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicyId: {
        serializedName: "properties.exportRoutePolicyId",
        type: {
          name: "String"
        }
      },
      importRoutePolicy: {
        serializedName: "properties.importRoutePolicy",
        type: {
          name: "Composite",
          className: "ImportRoutePolicy"
        }
      },
      exportRoutePolicy: {
        serializedName: "properties.exportRoutePolicy",
        type: {
          name: "Composite",
          className: "ExportRoutePolicy"
        }
      },
      ingressAclId: {
        serializedName: "properties.ingressAclId",
        type: {
          name: "String"
        }
      },
      egressAclId: {
        serializedName: "properties.egressAclId",
        type: {
          name: "String"
        }
      },
      isMonitoringEnabled: {
        defaultValue: "False",
        serializedName: "properties.isMonitoringEnabled",
        type: {
          name: "String"
        }
      },
      extension: {
        defaultValue: "NoExtension",
        serializedName: "properties.extension",
        type: {
          name: "String"
        }
      },
      vlanId: {
        constraints: {
          InclusiveMaximum: 4094,
          InclusiveMinimum: 100
        },
        serializedName: "properties.vlanId",
        required: true,
        type: {
          name: "Number"
        }
      },
      bgpConfiguration: {
        serializedName: "properties.bgpConfiguration",
        type: {
          name: "Composite",
          className: "InternalNetworkPropertiesBgpConfiguration"
        }
      },
      staticRouteConfiguration: {
        serializedName: "properties.staticRouteConfiguration",
        type: {
          name: "Composite",
          className: "InternalNetworkPropertiesStaticRouteConfiguration"
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetwork",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      importRoutePolicyId: {
        serializedName: "properties.importRoutePolicyId",
        type: {
          name: "String"
        }
      },
      exportRoutePolicyId: {
        serializedName: "properties.exportRoutePolicyId",
        type: {
          name: "String"
        }
      },
      importRoutePolicy: {
        serializedName: "properties.importRoutePolicy",
        type: {
          name: "Composite",
          className: "ImportRoutePolicy"
        }
      },
      exportRoutePolicy: {
        serializedName: "properties.exportRoutePolicy",
        type: {
          name: "Composite",
          className: "ExportRoutePolicy"
        }
      },
      networkToNetworkInterconnectId: {
        serializedName: "properties.networkToNetworkInterconnectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      peeringOption: {
        serializedName: "properties.peeringOption",
        required: true,
        type: {
          name: "String"
        }
      },
      optionBProperties: {
        serializedName: "properties.optionBProperties",
        type: {
          name: "Composite",
          className: "L3OptionBProperties"
        }
      },
      optionAProperties: {
        serializedName: "properties.optionAProperties",
        type: {
          name: "Composite",
          className: "ExternalNetworkPropertiesOptionAProperties"
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDeviceSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDeviceSku",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      model: {
        serializedName: "properties.model",
        required: true,
        type: {
          name: "String"
        }
      },
      manufacturer: {
        serializedName: "properties.manufacturer",
        type: {
          name: "String"
        }
      },
      supportedVersions: {
        serializedName: "properties.supportedVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SupportedVersionProperties"
            }
          }
        }
      },
      supportedRoleTypes: {
        serializedName: "properties.supportedRoleTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      interfaces: {
        serializedName: "properties.interfaces",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeviceInterfaceProperties"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterface: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterface",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      annotation: {
        serializedName: "properties.annotation",
        type: {
          name: "String"
        }
      },
      physicalIdentifier: {
        serializedName: "properties.physicalIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectedTo: {
        serializedName: "properties.connectedTo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      interfaceType: {
        serializedName: "properties.interfaceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipv4Address: {
        serializedName: "properties.ipv4Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipv6Address: {
        serializedName: "properties.ipv6Address",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricSku",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      typePropertiesType: {
        serializedName: "properties.type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxComputeRacks: {
        serializedName: "properties.maxComputeRacks",
        type: {
          name: "Number"
        }
      },
      maximumServerCount: {
        serializedName: "properties.maximumServerCount",
        type: {
          name: "Number"
        }
      },
      supportedVersions: {
        serializedName: "properties.supportedVersions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      details: {
        serializedName: "properties.details",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkToNetworkInterconnect: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkToNetworkInterconnect",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      nniType: {
        defaultValue: "CE",
        serializedName: "properties.nniType",
        type: {
          name: "String"
        }
      },
      isManagementType: {
        defaultValue: "True",
        serializedName: "properties.isManagementType",
        type: {
          name: "String"
        }
      },
      useOptionB: {
        serializedName: "properties.useOptionB",
        required: true,
        type: {
          name: "String"
        }
      },
      layer2Configuration: {
        serializedName: "properties.layer2Configuration",
        type: {
          name: "Composite",
          className: "Layer2Configuration"
        }
      },
      optionBLayer3Configuration: {
        serializedName: "properties.optionBLayer3Configuration",
        type: {
          name: "Composite",
          className:
            "NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration"
        }
      },
      npbStaticRouteConfiguration: {
        serializedName: "properties.npbStaticRouteConfiguration",
        type: {
          name: "Composite",
          className: "NpbStaticRouteConfiguration"
        }
      },
      importRoutePolicy: {
        serializedName: "properties.importRoutePolicy",
        type: {
          name: "Composite",
          className: "ImportRoutePolicyInformation"
        }
      },
      exportRoutePolicy: {
        serializedName: "properties.exportRoutePolicy",
        type: {
          name: "Composite",
          className: "ExportRoutePolicyInformation"
        }
      },
      egressAclId: {
        serializedName: "properties.egressAclId",
        type: {
          name: "String"
        }
      },
      ingressAclId: {
        serializedName: "properties.ingressAclId",
        type: {
          name: "String"
        }
      },
      configurationState: {
        serializedName: "properties.configurationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      administrativeState: {
        serializedName: "properties.administrativeState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkToNetworkInterconnectPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkToNetworkInterconnectPatch",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      layer2Configuration: {
        serializedName: "properties.layer2Configuration",
        type: {
          name: "Composite",
          className: "Layer2Configuration"
        }
      },
      optionBLayer3Configuration: {
        serializedName: "properties.optionBLayer3Configuration",
        type: {
          name: "Composite",
          className: "OptionBLayer3Configuration"
        }
      },
      npbStaticRouteConfiguration: {
        serializedName: "properties.npbStaticRouteConfiguration",
        type: {
          name: "Composite",
          className: "NpbStaticRouteConfiguration"
        }
      },
      importRoutePolicy: {
        serializedName: "properties.importRoutePolicy",
        type: {
          name: "Composite",
          className: "ImportRoutePolicyInformation"
        }
      },
      exportRoutePolicy: {
        serializedName: "properties.exportRoutePolicy",
        type: {
          name: "Composite",
          className: "ExportRoutePolicyInformation"
        }
      },
      egressAclId: {
        serializedName: "properties.egressAclId",
        type: {
          name: "String"
        }
      },
      ingressAclId: {
        serializedName: "properties.ingressAclId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "NetworkToNetworkInterconnectPropertiesOptionBLayer3Configuration",
    modelProperties: {
      ...OptionBLayer3Configuration.type.modelProperties
    }
  }
};

export const AccessControlListsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListsCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessControlListsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessControlListsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessControlListsUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListsUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessControlListsResyncHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListsResyncHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessControlListsValidateConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccessControlListsValidateConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternetGatewaysCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternetGatewaysCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternetGatewaysUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternetGatewaysUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternetGatewayRulesCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternetGatewayRulesCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternetGatewayRulesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternetGatewayRulesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternetGatewayRulesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternetGatewayRulesDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpCommunitiesCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunitiesCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpCommunitiesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunitiesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpCommunitiesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpCommunitiesDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpExtendedCommunitiesCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunitiesCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpExtendedCommunitiesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunitiesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpExtendedCommunitiesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpExtendedCommunitiesDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPrefixesCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixesCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPrefixesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpPrefixesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpPrefixesDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainsUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainsUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainsValidateConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainsValidateConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L2IsolationDomainsCommitConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L2IsolationDomainsCommitConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainsUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainsUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainsValidateConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainsValidateConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const L3IsolationDomainsCommitConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "L3IsolationDomainsCommitConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworksUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworksUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworksUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworksUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworksUpdateBgpAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworksUpdateBgpAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InternalNetworksUpdateStaticRouteBfdAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InternalNetworksUpdateStaticRouteBfdAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworksUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworksUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworksUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworksUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalNetworksUpdateStaticRouteBfdAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalNetworksUpdateStaticRouteBfdAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NeighborGroupsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NeighborGroupsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesRebootHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesRebootHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesRefreshConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesRefreshConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkDevicesUpgradeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkDevicesUpgradeHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfacesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfacesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkInterfacesUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkInterfacesUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricControllersUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricControllersUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricControllersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricControllersDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsProvisionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsProvisionHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsDeprovisionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsDeprovisionHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsUpgradeHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsUpgradeHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsRefreshConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsRefreshConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsUpdateWorkloadManagementBfdConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsUpdateWorkloadManagementBfdConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsUpdateInfraManagementBfdConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsUpdateInfraManagementBfdConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsValidateConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsValidateConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsGetTopologyHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsGetTopologyHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFabricsCommitConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkFabricsCommitConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkToNetworkInterconnectsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkToNetworkInterconnectsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkToNetworkInterconnectsUpdateNpbStaticRouteBfdAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "NetworkToNetworkInterconnectsUpdateNpbStaticRouteBfdAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkToNetworkInterconnectsUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkToNetworkInterconnectsUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkPacketBrokersUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkPacketBrokersUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkRacksUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRacksUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapRulesCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRulesCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapRulesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRulesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapRulesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRulesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapRulesUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRulesUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapRulesResyncHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRulesResyncHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapRulesValidateConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapRulesValidateConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapsUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapsUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapsUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkTapsResyncHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkTapsResyncHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutePoliciesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePoliciesUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutePoliciesUpdateAdministrativeStateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePoliciesUpdateAdministrativeStateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutePoliciesValidateConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePoliciesValidateConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoutePoliciesCommitConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoutePoliciesCommitConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};
