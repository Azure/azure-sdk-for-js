/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
const { AzureNetworkFabricManagementServiceAPI } = require("@azure/arm-managednetworkfabric");
const { DefaultAzureCredential } = require("@azure/identity");
require("dotenv").config();

/**
 * This sample demonstrates how to Creates ExternalNetwork PUT method.
 *
 * @summary Creates ExternalNetwork PUT method.
 * x-ms-original-file: specification/managednetworkfabric/resource-manager/Microsoft.ManagedNetworkFabric/preview/2023-02-01-preview/examples/ExternalNetworks_Create_MaximumSet_Gen.json
 */
async function externalNetworksCreateMaximumSetGen() {
  const subscriptionId = process.env["MANAGEDNETWORKFABRIC_SUBSCRIPTION_ID"] || "subscriptionId";
  const resourceGroupName =
    process.env["MANAGEDNETWORKFABRIC_RESOURCE_GROUP"] || "resourceGroupName";
  const l3IsolationDomainName = "example-l3domain";
  const externalNetworkName = "example-externalnetwork";
  const body = {
    exportRoutePolicyId:
      "/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.ManagedNetworkFabric/routePolicies/routePolicyName",
    importRoutePolicyId:
      "/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.ManagedNetworkFabric/routePolicies/routePolicyName",
    optionAProperties: {
      bfdConfiguration: {},
      mtu: 1500,
      peerASN: 65047,
      primaryIpv4Prefix: "10.1.1.0/30",
      primaryIpv6Prefix: "3FFE:FFFF:0:CD30::a0/126",
      secondaryIpv4Prefix: "10.1.1.4/30",
      secondaryIpv6Prefix: "3FFE:FFFF:0:CD30::a4/126",
      vlanId: 1001,
    },
    optionBProperties: {
      exportRouteTargets: ["65046:10039"],
      importRouteTargets: ["65046:10039"],
    },
    peeringOption: "OptionA",
  };
  const credential = new DefaultAzureCredential();
  const client = new AzureNetworkFabricManagementServiceAPI(credential, subscriptionId);
  const result = await client.externalNetworks.beginCreateAndWait(
    resourceGroupName,
    l3IsolationDomainName,
    externalNetworkName,
    body
  );
  console.log(result);
}

async function main() {
  externalNetworksCreateMaximumSetGen();
}

main().catch(console.error);
