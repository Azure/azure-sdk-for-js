/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  RoleAssignment,
  RoleAssignmentsListForResourceOptionalParams,
  RoleAssignmentsListForResourceGroupOptionalParams,
  RoleAssignmentsListOptionalParams,
  RoleAssignmentsListForScopeOptionalParams,
  RoleAssignmentsDeleteOptionalParams,
  RoleAssignmentsDeleteResponse,
  RoleAssignmentCreateParameters,
  RoleAssignmentsCreateOptionalParams,
  RoleAssignmentsCreateResponse,
  RoleAssignmentsGetOptionalParams,
  RoleAssignmentsGetResponse,
  RoleAssignmentsDeleteByIdOptionalParams,
  RoleAssignmentsDeleteByIdResponse,
  RoleAssignmentsCreateByIdOptionalParams,
  RoleAssignmentsCreateByIdResponse,
  RoleAssignmentsGetByIdOptionalParams,
  RoleAssignmentsGetByIdResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a RoleAssignments. */
export interface RoleAssignments {
  /**
   * Gets role assignments for a resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the resource.
   * @param resourceName The name of the resource to get role assignments for.
   * @param options The options parameters.
   */
  listForResource(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    options?: RoleAssignmentsListForResourceOptionalParams
  ): PagedAsyncIterableIterator<RoleAssignment>;
  /**
   * Gets role assignments for a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listForResourceGroup(
    resourceGroupName: string,
    options?: RoleAssignmentsListForResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<RoleAssignment>;
  /**
   * Gets all role assignments for the subscription.
   * @param options The options parameters.
   */
  list(
    options?: RoleAssignmentsListOptionalParams
  ): PagedAsyncIterableIterator<RoleAssignment>;
  /**
   * Gets role assignments for a scope.
   * @param scope The scope of the role assignments.
   * @param options The options parameters.
   */
  listForScope(
    scope: string,
    options?: RoleAssignmentsListForScopeOptionalParams
  ): PagedAsyncIterableIterator<RoleAssignment>;
  /**
   * Deletes a role assignment.
   * @param scope The scope of the role assignment to delete.
   * @param roleAssignmentName The name of the role assignment to delete.
   * @param options The options parameters.
   */
  delete(
    scope: string,
    roleAssignmentName: string,
    options?: RoleAssignmentsDeleteOptionalParams
  ): Promise<RoleAssignmentsDeleteResponse>;
  /**
   * Creates a role assignment.
   * @param scope The scope of the role assignment to create. The scope can be any REST resource
   *              instance. For example, use '/subscriptions/{subscription-id}/' for a subscription,
   *              '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and
   *              '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
   *              for a resource.
   * @param roleAssignmentName A GUID for the role assignment to create. The name must be unique and
   *                           different for each role assignment.
   * @param parameters Parameters for the role assignment.
   * @param options The options parameters.
   */
  create(
    scope: string,
    roleAssignmentName: string,
    parameters: RoleAssignmentCreateParameters,
    options?: RoleAssignmentsCreateOptionalParams
  ): Promise<RoleAssignmentsCreateResponse>;
  /**
   * Get the specified role assignment.
   * @param scope The scope of the role assignment.
   * @param roleAssignmentName The name of the role assignment to get.
   * @param options The options parameters.
   */
  get(
    scope: string,
    roleAssignmentName: string,
    options?: RoleAssignmentsGetOptionalParams
  ): Promise<RoleAssignmentsGetResponse>;
  /**
   * Deletes a role assignment.
   * @param roleAssignmentId The fully qualified ID of the role assignment, including the scope, resource
   *                         name and resource type. Use the format,
   *                         /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example:
   *                         /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
   * @param options The options parameters.
   */
  deleteById(
    roleAssignmentId: string,
    options?: RoleAssignmentsDeleteByIdOptionalParams
  ): Promise<RoleAssignmentsDeleteByIdResponse>;
  /**
   * Creates a role assignment by ID.
   * @param roleAssignmentId The fully qualified ID of the role assignment, including the scope, resource
   *                         name and resource type. Use the format,
   *                         /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example:
   *                         /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
   * @param parameters Parameters for the role assignment.
   * @param options The options parameters.
   */
  createById(
    roleAssignmentId: string,
    parameters: RoleAssignmentCreateParameters,
    options?: RoleAssignmentsCreateByIdOptionalParams
  ): Promise<RoleAssignmentsCreateByIdResponse>;
  /**
   * Gets a role assignment by ID.
   * @param roleAssignmentId The fully qualified ID of the role assignment, including the scope, resource
   *                         name and resource type. Use the format,
   *                         /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example:
   *                         /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
   * @param options The options parameters.
   */
  getById(
    roleAssignmentId: string,
    options?: RoleAssignmentsGetByIdOptionalParams
  ): Promise<RoleAssignmentsGetByIdResponse>;
}
