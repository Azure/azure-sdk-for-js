/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Alert,
  AlertsListForScopeOptionalParams,
  AlertsGetOptionalParams,
  AlertsGetResponse,
  AlertsUpdateOptionalParams,
  AlertsRefreshOptionalParams,
  AlertsRefreshResponse,
  AlertsRefreshAllOptionalParams,
  AlertsRefreshAllResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Alerts. */
export interface Alerts {
  /**
   * Gets alerts for a resource scope.
   * @param scope The scope of the alert.
   * @param options The options parameters.
   */
  listForScope(
    scope: string,
    options?: AlertsListForScopeOptionalParams
  ): PagedAsyncIterableIterator<Alert>;
  /**
   * Get the specified alert.
   * @param scope The scope of the alert. The scope can be any REST resource instance. For example, use
   *              '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/' for a subscription,
   *              '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}'
   *              for a resource group, and
   *              '/providers/Microsoft.Subscription/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
   *              for a resource.
   * @param alertId The name of the alert to get.
   * @param options The options parameters.
   */
  get(
    scope: string,
    alertId: string,
    options?: AlertsGetOptionalParams
  ): Promise<AlertsGetResponse>;
  /**
   * Update an alert.
   * @param scope The scope of the alert.
   * @param alertId The name of the alert to dismiss.
   * @param parameters Parameters for the alert.
   * @param options The options parameters.
   */
  update(
    scope: string,
    alertId: string,
    parameters: Alert,
    options?: AlertsUpdateOptionalParams
  ): Promise<void>;
  /**
   * Refresh an alert.
   * @param scope The scope of the alert.
   * @param alertId The name of the alert to refresh.
   * @param options The options parameters.
   */
  beginRefresh(
    scope: string,
    alertId: string,
    options?: AlertsRefreshOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AlertsRefreshResponse>,
      AlertsRefreshResponse
    >
  >;
  /**
   * Refresh an alert.
   * @param scope The scope of the alert.
   * @param alertId The name of the alert to refresh.
   * @param options The options parameters.
   */
  beginRefreshAndWait(
    scope: string,
    alertId: string,
    options?: AlertsRefreshOptionalParams
  ): Promise<AlertsRefreshResponse>;
  /**
   * Refresh all alerts for a resource scope.
   * @param scope The scope of the alert.
   * @param options The options parameters.
   */
  beginRefreshAll(
    scope: string,
    options?: AlertsRefreshAllOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AlertsRefreshAllResponse>,
      AlertsRefreshAllResponse
    >
  >;
  /**
   * Refresh all alerts for a resource scope.
   * @param scope The scope of the alert.
   * @param options The options parameters.
   */
  beginRefreshAllAndWait(
    scope: string,
    options?: AlertsRefreshAllOptionalParams
  ): Promise<AlertsRefreshAllResponse>;
}
