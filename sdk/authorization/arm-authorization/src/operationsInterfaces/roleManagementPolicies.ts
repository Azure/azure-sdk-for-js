/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  RoleManagementPolicy,
  RoleManagementPoliciesListForScopeOptionalParams,
  RoleManagementPoliciesGetOptionalParams,
  RoleManagementPoliciesGetResponse,
  RoleManagementPoliciesUpdateOptionalParams,
  RoleManagementPoliciesUpdateResponse,
  RoleManagementPoliciesDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a RoleManagementPolicies. */
export interface RoleManagementPolicies {
  /**
   * Gets role management policies for a resource scope.
   * @param scope The scope of the role management policy.
   * @param options The options parameters.
   */
  listForScope(
    scope: string,
    options?: RoleManagementPoliciesListForScopeOptionalParams
  ): PagedAsyncIterableIterator<RoleManagementPolicy>;
  /**
   * Get the specified role management policy for a resource scope
   * @param scope The scope of the role management policy.
   * @param roleManagementPolicyName The name (guid) of the role management policy to get.
   * @param options The options parameters.
   */
  get(
    scope: string,
    roleManagementPolicyName: string,
    options?: RoleManagementPoliciesGetOptionalParams
  ): Promise<RoleManagementPoliciesGetResponse>;
  /**
   * Update a role management policy
   * @param scope The scope of the role management policy to upsert.
   * @param roleManagementPolicyName The name (guid) of the role management policy to upsert.
   * @param parameters Parameters for the role management policy.
   * @param options The options parameters.
   */
  update(
    scope: string,
    roleManagementPolicyName: string,
    parameters: RoleManagementPolicy,
    options?: RoleManagementPoliciesUpdateOptionalParams
  ): Promise<RoleManagementPoliciesUpdateResponse>;
  /**
   * Delete a role management policy
   * @param scope The scope of the role management policy to upsert.
   * @param roleManagementPolicyName The name (guid) of the role management policy to upsert.
   * @param options The options parameters.
   */
  delete(
    scope: string,
    roleManagementPolicyName: string,
    options?: RoleManagementPoliciesDeleteOptionalParams
  ): Promise<void>;
}
