/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  ClassicAdministratorsImpl,
  GlobalAdministratorImpl,
  DenyAssignmentsImpl,
  ProviderOperationsMetadataOperationsImpl,
  RoleAssignmentsImpl,
  PermissionsImpl,
  RoleDefinitionsImpl,
  OperationsImpl,
  AccessReviewHistoryDefinitionsImpl,
  AccessReviewHistoryDefinitionOperationsImpl,
  AccessReviewHistoryDefinitionInstanceImpl,
  AccessReviewHistoryDefinitionInstancesImpl,
  AccessReviewScheduleDefinitionsImpl,
  AccessReviewInstancesImpl,
  AccessReviewInstanceOperationsImpl,
  AccessReviewInstanceDecisionsImpl,
  AccessReviewInstanceContactedReviewersImpl,
  AccessReviewDefaultSettingsOperationsImpl,
  ScopeAccessReviewHistoryDefinitionsImpl,
  ScopeAccessReviewHistoryDefinitionImpl,
  ScopeAccessReviewHistoryDefinitionInstanceImpl,
  ScopeAccessReviewHistoryDefinitionInstancesImpl,
  ScopeAccessReviewScheduleDefinitionsImpl,
  ScopeAccessReviewInstancesImpl,
  ScopeAccessReviewInstanceImpl,
  ScopeAccessReviewInstanceDecisionsImpl,
  ScopeAccessReviewInstanceContactedReviewersImpl,
  ScopeAccessReviewDefaultSettingsImpl,
  AccessReviewScheduleDefinitionsAssignedForMyApprovalImpl,
  AccessReviewInstancesAssignedForMyApprovalImpl,
  AccessReviewInstanceMyDecisionsImpl,
  TenantLevelAccessReviewInstanceContactedReviewersImpl,
  EligibleChildResourcesImpl,
  RoleAssignmentSchedulesImpl,
  RoleAssignmentScheduleInstancesImpl,
  RoleAssignmentScheduleRequestsImpl,
  RoleEligibilitySchedulesImpl,
  RoleEligibilityScheduleInstancesImpl,
  RoleEligibilityScheduleRequestsImpl,
  RoleManagementPoliciesImpl,
  RoleManagementPolicyAssignmentsImpl,
  AlertsImpl,
  AlertConfigurationsImpl,
  AlertDefinitionsImpl,
  AlertIncidentsImpl,
  AlertOperationImpl
} from "./operations";
import {
  ClassicAdministrators,
  GlobalAdministrator,
  DenyAssignments,
  ProviderOperationsMetadataOperations,
  RoleAssignments,
  Permissions,
  RoleDefinitions,
  Operations,
  AccessReviewHistoryDefinitions,
  AccessReviewHistoryDefinitionOperations,
  AccessReviewHistoryDefinitionInstance,
  AccessReviewHistoryDefinitionInstances,
  AccessReviewScheduleDefinitions,
  AccessReviewInstances,
  AccessReviewInstanceOperations,
  AccessReviewInstanceDecisions,
  AccessReviewInstanceContactedReviewers,
  AccessReviewDefaultSettingsOperations,
  ScopeAccessReviewHistoryDefinitions,
  ScopeAccessReviewHistoryDefinition,
  ScopeAccessReviewHistoryDefinitionInstance,
  ScopeAccessReviewHistoryDefinitionInstances,
  ScopeAccessReviewScheduleDefinitions,
  ScopeAccessReviewInstances,
  ScopeAccessReviewInstance,
  ScopeAccessReviewInstanceDecisions,
  ScopeAccessReviewInstanceContactedReviewers,
  ScopeAccessReviewDefaultSettings,
  AccessReviewScheduleDefinitionsAssignedForMyApproval,
  AccessReviewInstancesAssignedForMyApproval,
  AccessReviewInstanceMyDecisions,
  TenantLevelAccessReviewInstanceContactedReviewers,
  EligibleChildResources,
  RoleAssignmentSchedules,
  RoleAssignmentScheduleInstances,
  RoleAssignmentScheduleRequests,
  RoleEligibilitySchedules,
  RoleEligibilityScheduleInstances,
  RoleEligibilityScheduleRequests,
  RoleManagementPolicies,
  RoleManagementPolicyAssignments,
  Alerts,
  AlertConfigurations,
  AlertDefinitions,
  AlertIncidents,
  AlertOperation
} from "./operationsInterfaces";
import { AuthorizationManagementClientOptionalParams } from "./models";

export class AuthorizationManagementClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId?: string;

  /**
   * Initializes a new instance of the AuthorizationManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: AuthorizationManagementClientOptionalParams
  );
  constructor(
    credentials: coreAuth.TokenCredential,
    options?: AuthorizationManagementClientOptionalParams
  );
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionIdOrOptions?:
      | AuthorizationManagementClientOptionalParams
      | string,
    options?: AuthorizationManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }

    let subscriptionId: string | undefined;

    if (typeof subscriptionIdOrOptions === "string") {
      subscriptionId = subscriptionIdOrOptions;
    } else if (typeof subscriptionIdOrOptions === "object") {
      options = subscriptionIdOrOptions;
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: AuthorizationManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-authorization/10.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.classicAdministrators = new ClassicAdministratorsImpl(this);
    this.globalAdministrator = new GlobalAdministratorImpl(this);
    this.denyAssignments = new DenyAssignmentsImpl(this);
    this.providerOperationsMetadataOperations = new ProviderOperationsMetadataOperationsImpl(
      this
    );
    this.roleAssignments = new RoleAssignmentsImpl(this);
    this.permissions = new PermissionsImpl(this);
    this.roleDefinitions = new RoleDefinitionsImpl(this);
    this.operations = new OperationsImpl(this);
    this.accessReviewHistoryDefinitions = new AccessReviewHistoryDefinitionsImpl(
      this
    );
    this.accessReviewHistoryDefinitionOperations = new AccessReviewHistoryDefinitionOperationsImpl(
      this
    );
    this.accessReviewHistoryDefinitionInstance = new AccessReviewHistoryDefinitionInstanceImpl(
      this
    );
    this.accessReviewHistoryDefinitionInstances = new AccessReviewHistoryDefinitionInstancesImpl(
      this
    );
    this.accessReviewScheduleDefinitions = new AccessReviewScheduleDefinitionsImpl(
      this
    );
    this.accessReviewInstances = new AccessReviewInstancesImpl(this);
    this.accessReviewInstanceOperations = new AccessReviewInstanceOperationsImpl(
      this
    );
    this.accessReviewInstanceDecisions = new AccessReviewInstanceDecisionsImpl(
      this
    );
    this.accessReviewInstanceContactedReviewers = new AccessReviewInstanceContactedReviewersImpl(
      this
    );
    this.accessReviewDefaultSettingsOperations = new AccessReviewDefaultSettingsOperationsImpl(
      this
    );
    this.scopeAccessReviewHistoryDefinitions = new ScopeAccessReviewHistoryDefinitionsImpl(
      this
    );
    this.scopeAccessReviewHistoryDefinition = new ScopeAccessReviewHistoryDefinitionImpl(
      this
    );
    this.scopeAccessReviewHistoryDefinitionInstance = new ScopeAccessReviewHistoryDefinitionInstanceImpl(
      this
    );
    this.scopeAccessReviewHistoryDefinitionInstances = new ScopeAccessReviewHistoryDefinitionInstancesImpl(
      this
    );
    this.scopeAccessReviewScheduleDefinitions = new ScopeAccessReviewScheduleDefinitionsImpl(
      this
    );
    this.scopeAccessReviewInstances = new ScopeAccessReviewInstancesImpl(this);
    this.scopeAccessReviewInstance = new ScopeAccessReviewInstanceImpl(this);
    this.scopeAccessReviewInstanceDecisions = new ScopeAccessReviewInstanceDecisionsImpl(
      this
    );
    this.scopeAccessReviewInstanceContactedReviewers = new ScopeAccessReviewInstanceContactedReviewersImpl(
      this
    );
    this.scopeAccessReviewDefaultSettings = new ScopeAccessReviewDefaultSettingsImpl(
      this
    );
    this.accessReviewScheduleDefinitionsAssignedForMyApproval = new AccessReviewScheduleDefinitionsAssignedForMyApprovalImpl(
      this
    );
    this.accessReviewInstancesAssignedForMyApproval = new AccessReviewInstancesAssignedForMyApprovalImpl(
      this
    );
    this.accessReviewInstanceMyDecisions = new AccessReviewInstanceMyDecisionsImpl(
      this
    );
    this.tenantLevelAccessReviewInstanceContactedReviewers = new TenantLevelAccessReviewInstanceContactedReviewersImpl(
      this
    );
    this.eligibleChildResources = new EligibleChildResourcesImpl(this);
    this.roleAssignmentSchedules = new RoleAssignmentSchedulesImpl(this);
    this.roleAssignmentScheduleInstances = new RoleAssignmentScheduleInstancesImpl(
      this
    );
    this.roleAssignmentScheduleRequests = new RoleAssignmentScheduleRequestsImpl(
      this
    );
    this.roleEligibilitySchedules = new RoleEligibilitySchedulesImpl(this);
    this.roleEligibilityScheduleInstances = new RoleEligibilityScheduleInstancesImpl(
      this
    );
    this.roleEligibilityScheduleRequests = new RoleEligibilityScheduleRequestsImpl(
      this
    );
    this.roleManagementPolicies = new RoleManagementPoliciesImpl(this);
    this.roleManagementPolicyAssignments = new RoleManagementPolicyAssignmentsImpl(
      this
    );
    this.alerts = new AlertsImpl(this);
    this.alertConfigurations = new AlertConfigurationsImpl(this);
    this.alertDefinitions = new AlertDefinitionsImpl(this);
    this.alertIncidents = new AlertIncidentsImpl(this);
    this.alertOperation = new AlertOperationImpl(this);
  }

  classicAdministrators: ClassicAdministrators;
  globalAdministrator: GlobalAdministrator;
  denyAssignments: DenyAssignments;
  providerOperationsMetadataOperations: ProviderOperationsMetadataOperations;
  roleAssignments: RoleAssignments;
  permissions: Permissions;
  roleDefinitions: RoleDefinitions;
  operations: Operations;
  accessReviewHistoryDefinitions: AccessReviewHistoryDefinitions;
  accessReviewHistoryDefinitionOperations: AccessReviewHistoryDefinitionOperations;
  accessReviewHistoryDefinitionInstance: AccessReviewHistoryDefinitionInstance;
  accessReviewHistoryDefinitionInstances: AccessReviewHistoryDefinitionInstances;
  accessReviewScheduleDefinitions: AccessReviewScheduleDefinitions;
  accessReviewInstances: AccessReviewInstances;
  accessReviewInstanceOperations: AccessReviewInstanceOperations;
  accessReviewInstanceDecisions: AccessReviewInstanceDecisions;
  accessReviewInstanceContactedReviewers: AccessReviewInstanceContactedReviewers;
  accessReviewDefaultSettingsOperations: AccessReviewDefaultSettingsOperations;
  scopeAccessReviewHistoryDefinitions: ScopeAccessReviewHistoryDefinitions;
  scopeAccessReviewHistoryDefinition: ScopeAccessReviewHistoryDefinition;
  scopeAccessReviewHistoryDefinitionInstance: ScopeAccessReviewHistoryDefinitionInstance;
  scopeAccessReviewHistoryDefinitionInstances: ScopeAccessReviewHistoryDefinitionInstances;
  scopeAccessReviewScheduleDefinitions: ScopeAccessReviewScheduleDefinitions;
  scopeAccessReviewInstances: ScopeAccessReviewInstances;
  scopeAccessReviewInstance: ScopeAccessReviewInstance;
  scopeAccessReviewInstanceDecisions: ScopeAccessReviewInstanceDecisions;
  scopeAccessReviewInstanceContactedReviewers: ScopeAccessReviewInstanceContactedReviewers;
  scopeAccessReviewDefaultSettings: ScopeAccessReviewDefaultSettings;
  accessReviewScheduleDefinitionsAssignedForMyApproval: AccessReviewScheduleDefinitionsAssignedForMyApproval;
  accessReviewInstancesAssignedForMyApproval: AccessReviewInstancesAssignedForMyApproval;
  accessReviewInstanceMyDecisions: AccessReviewInstanceMyDecisions;
  tenantLevelAccessReviewInstanceContactedReviewers: TenantLevelAccessReviewInstanceContactedReviewers;
  eligibleChildResources: EligibleChildResources;
  roleAssignmentSchedules: RoleAssignmentSchedules;
  roleAssignmentScheduleInstances: RoleAssignmentScheduleInstances;
  roleAssignmentScheduleRequests: RoleAssignmentScheduleRequests;
  roleEligibilitySchedules: RoleEligibilitySchedules;
  roleEligibilityScheduleInstances: RoleEligibilityScheduleInstances;
  roleEligibilityScheduleRequests: RoleEligibilityScheduleRequests;
  roleManagementPolicies: RoleManagementPolicies;
  roleManagementPolicyAssignments: RoleManagementPolicyAssignments;
  alerts: Alerts;
  alertConfigurations: AlertConfigurations;
  alertDefinitions: AlertDefinitions;
  alertIncidents: AlertIncidents;
  alertOperation: AlertOperation;
}
