/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ScopeAccessReviewHistoryDefinitions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AuthorizationManagementClient } from "../authorizationManagementClient";
import {
  AccessReviewHistoryDefinition,
  ScopeAccessReviewHistoryDefinitionsListNextOptionalParams,
  ScopeAccessReviewHistoryDefinitionsListOptionalParams,
  ScopeAccessReviewHistoryDefinitionsListResponse,
  ScopeAccessReviewHistoryDefinitionsGetByIdOptionalParams,
  ScopeAccessReviewHistoryDefinitionsGetByIdResponse,
  ScopeAccessReviewHistoryDefinitionsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ScopeAccessReviewHistoryDefinitions operations. */
export class ScopeAccessReviewHistoryDefinitionsImpl
  implements ScopeAccessReviewHistoryDefinitions {
  private readonly client: AuthorizationManagementClient;

  /**
   * Initialize a new instance of the class ScopeAccessReviewHistoryDefinitions class.
   * @param client Reference to the service client
   */
  constructor(client: AuthorizationManagementClient) {
    this.client = client;
  }

  /**
   * Lists the accessReviewHistoryDefinitions available from this provider, definition instances are only
   * available for 30 days after creation.
   * @param scope The scope of the resource.
   * @param options The options parameters.
   */
  public list(
    scope: string,
    options?: ScopeAccessReviewHistoryDefinitionsListOptionalParams
  ): PagedAsyncIterableIterator<AccessReviewHistoryDefinition> {
    const iter = this.listPagingAll(scope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(scope, options, settings);
      }
    };
  }

  private async *listPagingPage(
    scope: string,
    options?: ScopeAccessReviewHistoryDefinitionsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<AccessReviewHistoryDefinition[]> {
    let result: ScopeAccessReviewHistoryDefinitionsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(scope, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(scope, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    scope: string,
    options?: ScopeAccessReviewHistoryDefinitionsListOptionalParams
  ): AsyncIterableIterator<AccessReviewHistoryDefinition> {
    for await (const page of this.listPagingPage(scope, options)) {
      yield* page;
    }
  }

  /**
   * Lists the accessReviewHistoryDefinitions available from this provider, definition instances are only
   * available for 30 days after creation.
   * @param scope The scope of the resource.
   * @param options The options parameters.
   */
  private _list(
    scope: string,
    options?: ScopeAccessReviewHistoryDefinitionsListOptionalParams
  ): Promise<ScopeAccessReviewHistoryDefinitionsListResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      listOperationSpec
    );
  }

  /**
   * Get access review history definition by definition Id
   * @param scope The scope of the resource.
   * @param historyDefinitionId The id of the access review history definition.
   * @param options The options parameters.
   */
  getById(
    scope: string,
    historyDefinitionId: string,
    options?: ScopeAccessReviewHistoryDefinitionsGetByIdOptionalParams
  ): Promise<ScopeAccessReviewHistoryDefinitionsGetByIdResponse> {
    return this.client.sendOperationRequest(
      { scope, historyDefinitionId, options },
      getByIdOperationSpec
    );
  }

  /**
   * ListNext
   * @param scope The scope of the resource.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    scope: string,
    nextLink: string,
    options?: ScopeAccessReviewHistoryDefinitionsListNextOptionalParams
  ): Promise<ScopeAccessReviewHistoryDefinitionsListNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/accessReviewHistoryDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessReviewHistoryDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDefinition
    }
  },
  queryParameters: [Parameters.filter1, Parameters.apiVersion3],
  urlParameters: [Parameters.$host, Parameters.scope1],
  headerParameters: [Parameters.accept],
  serializer
};
const getByIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/accessReviewHistoryDefinitions/{historyDefinitionId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessReviewHistoryDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorDefinition
    }
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.historyDefinitionId,
    Parameters.scope1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessReviewHistoryDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDefinition
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope1],
  headerParameters: [Parameters.accept],
  serializer
};
