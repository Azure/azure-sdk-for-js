/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/denyAssignmentsMappers";
import * as Parameters from "../models/parameters";
import { AuthorizationManagementClientContext } from "../authorizationManagementClientContext";

/** Class representing a DenyAssignments. */
export class DenyAssignments {
  private readonly client: AuthorizationManagementClientContext;

  /**
   * Create a DenyAssignments.
   * @param {AuthorizationManagementClientContext} client Reference to the service client.
   */
  constructor(client: AuthorizationManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets deny assignments for a resource.
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the resource.
   * @param resourceName The name of the resource to get deny assignments for.
   * @param [options] The optional parameters
   * @returns Promise<Models.DenyAssignmentsListForResourceResponse>
   */
  listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options?: Models.DenyAssignmentsListForResourceOptionalParams): Promise<Models.DenyAssignmentsListForResourceResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the resource.
   * @param resourceName The name of the resource to get deny assignments for.
   * @param callback The callback
   */
  listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource identity.
   * @param resourceType The resource type of the resource.
   * @param resourceName The name of the resource to get deny assignments for.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options: Models.DenyAssignmentsListForResourceOptionalParams, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options?: Models.DenyAssignmentsListForResourceOptionalParams | msRest.ServiceCallback<Models.DenyAssignmentListResult>, callback?: msRest.ServiceCallback<Models.DenyAssignmentListResult>): Promise<Models.DenyAssignmentsListForResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        options
      },
      listForResourceOperationSpec,
      callback) as Promise<Models.DenyAssignmentsListForResourceResponse>;
  }

  /**
   * Gets deny assignments for a resource group.
   * @param resourceGroupName The name of the resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.DenyAssignmentsListForResourceGroupResponse>
   */
  listForResourceGroup(resourceGroupName: string, options?: Models.DenyAssignmentsListForResourceGroupOptionalParams): Promise<Models.DenyAssignmentsListForResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param callback The callback
   */
  listForResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResourceGroup(resourceGroupName: string, options: Models.DenyAssignmentsListForResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  listForResourceGroup(resourceGroupName: string, options?: Models.DenyAssignmentsListForResourceGroupOptionalParams | msRest.ServiceCallback<Models.DenyAssignmentListResult>, callback?: msRest.ServiceCallback<Models.DenyAssignmentListResult>): Promise<Models.DenyAssignmentsListForResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listForResourceGroupOperationSpec,
      callback) as Promise<Models.DenyAssignmentsListForResourceGroupResponse>;
  }

  /**
   * Gets all deny assignments for the subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.DenyAssignmentsListResponse>
   */
  list(options?: Models.DenyAssignmentsListOptionalParams): Promise<Models.DenyAssignmentsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.DenyAssignmentsListOptionalParams, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  list(options?: Models.DenyAssignmentsListOptionalParams | msRest.ServiceCallback<Models.DenyAssignmentListResult>, callback?: msRest.ServiceCallback<Models.DenyAssignmentListResult>): Promise<Models.DenyAssignmentsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DenyAssignmentsListResponse>;
  }

  /**
   * Get the specified deny assignment.
   * @param scope The scope of the deny assignment.
   * @param denyAssignmentId The ID of the deny assignment to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.DenyAssignmentsGetResponse>
   */
  get(scope: string, denyAssignmentId: string, options?: msRest.RequestOptionsBase): Promise<Models.DenyAssignmentsGetResponse>;
  /**
   * @param scope The scope of the deny assignment.
   * @param denyAssignmentId The ID of the deny assignment to get.
   * @param callback The callback
   */
  get(scope: string, denyAssignmentId: string, callback: msRest.ServiceCallback<Models.DenyAssignment>): void;
  /**
   * @param scope The scope of the deny assignment.
   * @param denyAssignmentId The ID of the deny assignment to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(scope: string, denyAssignmentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DenyAssignment>): void;
  get(scope: string, denyAssignmentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DenyAssignment>, callback?: msRest.ServiceCallback<Models.DenyAssignment>): Promise<Models.DenyAssignmentsGetResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        denyAssignmentId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DenyAssignmentsGetResponse>;
  }

  /**
   * Gets a deny assignment by ID.
   * @param denyAssignmentId The fully qualified deny assignment ID. For example, use the format,
   * /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for
   * subscription level deny assignments, or
   * /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny
   * assignments.
   * @param [options] The optional parameters
   * @returns Promise<Models.DenyAssignmentsGetByIdResponse>
   */
  getById(denyAssignmentId: string, options?: msRest.RequestOptionsBase): Promise<Models.DenyAssignmentsGetByIdResponse>;
  /**
   * @param denyAssignmentId The fully qualified deny assignment ID. For example, use the format,
   * /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for
   * subscription level deny assignments, or
   * /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny
   * assignments.
   * @param callback The callback
   */
  getById(denyAssignmentId: string, callback: msRest.ServiceCallback<Models.DenyAssignment>): void;
  /**
   * @param denyAssignmentId The fully qualified deny assignment ID. For example, use the format,
   * /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for
   * subscription level deny assignments, or
   * /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny
   * assignments.
   * @param options The optional parameters
   * @param callback The callback
   */
  getById(denyAssignmentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DenyAssignment>): void;
  getById(denyAssignmentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DenyAssignment>, callback?: msRest.ServiceCallback<Models.DenyAssignment>): Promise<Models.DenyAssignmentsGetByIdResponse> {
    return this.client.sendOperationRequest(
      {
        denyAssignmentId,
        options
      },
      getByIdOperationSpec,
      callback) as Promise<Models.DenyAssignmentsGetByIdResponse>;
  }

  /**
   * Gets deny assignments for a scope.
   * @param scope The scope of the deny assignments.
   * @param [options] The optional parameters
   * @returns Promise<Models.DenyAssignmentsListForScopeResponse>
   */
  listForScope(scope: string, options?: Models.DenyAssignmentsListForScopeOptionalParams): Promise<Models.DenyAssignmentsListForScopeResponse>;
  /**
   * @param scope The scope of the deny assignments.
   * @param callback The callback
   */
  listForScope(scope: string, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  /**
   * @param scope The scope of the deny assignments.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForScope(scope: string, options: Models.DenyAssignmentsListForScopeOptionalParams, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  listForScope(scope: string, options?: Models.DenyAssignmentsListForScopeOptionalParams | msRest.ServiceCallback<Models.DenyAssignmentListResult>, callback?: msRest.ServiceCallback<Models.DenyAssignmentListResult>): Promise<Models.DenyAssignmentsListForScopeResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        options
      },
      listForScopeOperationSpec,
      callback) as Promise<Models.DenyAssignmentsListForScopeResponse>;
  }

  /**
   * Gets deny assignments for a resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DenyAssignmentsListForResourceNextResponse>
   */
  listForResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DenyAssignmentsListForResourceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listForResourceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResourceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  listForResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DenyAssignmentListResult>, callback?: msRest.ServiceCallback<Models.DenyAssignmentListResult>): Promise<Models.DenyAssignmentsListForResourceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listForResourceNextOperationSpec,
      callback) as Promise<Models.DenyAssignmentsListForResourceNextResponse>;
  }

  /**
   * Gets deny assignments for a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DenyAssignmentsListForResourceGroupNextResponse>
   */
  listForResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DenyAssignmentsListForResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listForResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  listForResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DenyAssignmentListResult>, callback?: msRest.ServiceCallback<Models.DenyAssignmentListResult>): Promise<Models.DenyAssignmentsListForResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listForResourceGroupNextOperationSpec,
      callback) as Promise<Models.DenyAssignmentsListForResourceGroupNextResponse>;
  }

  /**
   * Gets all deny assignments for the subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DenyAssignmentsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DenyAssignmentsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DenyAssignmentListResult>, callback?: msRest.ServiceCallback<Models.DenyAssignmentListResult>): Promise<Models.DenyAssignmentsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.DenyAssignmentsListNextResponse>;
  }

  /**
   * Gets deny assignments for a scope.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DenyAssignmentsListForScopeNextResponse>
   */
  listForScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DenyAssignmentsListForScopeNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listForScopeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForScopeNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DenyAssignmentListResult>): void;
  listForScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DenyAssignmentListResult>, callback?: msRest.ServiceCallback<Models.DenyAssignmentListResult>): Promise<Models.DenyAssignmentsListForScopeNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listForScopeNextOperationSpec,
      callback) as Promise<Models.DenyAssignmentsListForScopeNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listForResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/denyAssignments",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DenyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listForResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/denyAssignments",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DenyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Authorization/denyAssignments",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DenyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}",
  urlParameters: [
    Parameters.scope,
    Parameters.denyAssignmentId0
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DenyAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{denyAssignmentId}",
  urlParameters: [
    Parameters.denyAssignmentId1
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DenyAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listForScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Authorization/denyAssignments",
  urlParameters: [
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DenyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listForResourceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DenyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listForResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DenyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DenyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listForScopeNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DenyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
