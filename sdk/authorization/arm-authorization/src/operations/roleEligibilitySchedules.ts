/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { RoleEligibilitySchedules } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AuthorizationManagementClientContext } from "../authorizationManagementClientContext";
import {
  RoleEligibilitySchedule,
  RoleEligibilitySchedulesListForScopeNextOptionalParams,
  RoleEligibilitySchedulesListForScopeOptionalParams,
  RoleEligibilitySchedulesGetOptionalParams,
  RoleEligibilitySchedulesGetResponse,
  RoleEligibilitySchedulesListForScopeResponse,
  RoleEligibilitySchedulesListForScopeNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing RoleEligibilitySchedules operations. */
export class RoleEligibilitySchedulesImpl implements RoleEligibilitySchedules {
  private readonly client: AuthorizationManagementClientContext;

  /**
   * Initialize a new instance of the class RoleEligibilitySchedules class.
   * @param client Reference to the service client
   */
  constructor(client: AuthorizationManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets role eligibility schedules for a resource scope.
   * @param scope The scope of the role eligibility schedules.
   * @param options The options parameters.
   */
  public listForScope(
    scope: string,
    options?: RoleEligibilitySchedulesListForScopeOptionalParams
  ): PagedAsyncIterableIterator<RoleEligibilitySchedule> {
    const iter = this.listForScopePagingAll(scope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listForScopePagingPage(scope, options);
      }
    };
  }

  private async *listForScopePagingPage(
    scope: string,
    options?: RoleEligibilitySchedulesListForScopeOptionalParams
  ): AsyncIterableIterator<RoleEligibilitySchedule[]> {
    let result = await this._listForScope(scope, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listForScopeNext(scope, continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listForScopePagingAll(
    scope: string,
    options?: RoleEligibilitySchedulesListForScopeOptionalParams
  ): AsyncIterableIterator<RoleEligibilitySchedule> {
    for await (const page of this.listForScopePagingPage(scope, options)) {
      yield* page;
    }
  }

  /**
   * Get the specified role eligibility schedule for a resource scope
   * @param scope The scope of the role eligibility schedule.
   * @param roleEligibilityScheduleName The name (guid) of the role eligibility schedule to get.
   * @param options The options parameters.
   */
  get(
    scope: string,
    roleEligibilityScheduleName: string,
    options?: RoleEligibilitySchedulesGetOptionalParams
  ): Promise<RoleEligibilitySchedulesGetResponse> {
    return this.client.sendOperationRequest(
      { scope, roleEligibilityScheduleName, options },
      getOperationSpec
    );
  }

  /**
   * Gets role eligibility schedules for a resource scope.
   * @param scope The scope of the role eligibility schedules.
   * @param options The options parameters.
   */
  private _listForScope(
    scope: string,
    options?: RoleEligibilitySchedulesListForScopeOptionalParams
  ): Promise<RoleEligibilitySchedulesListForScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      listForScopeOperationSpec
    );
  }

  /**
   * ListForScopeNext
   * @param scope The scope of the role eligibility schedules.
   * @param nextLink The nextLink from the previous successful call to the ListForScope method.
   * @param options The options parameters.
   */
  private _listForScopeNext(
    scope: string,
    nextLink: string,
    options?: RoleEligibilitySchedulesListForScopeNextOptionalParams
  ): Promise<RoleEligibilitySchedulesListForScopeNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listForScopeNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/roleEligibilitySchedules/{roleEligibilityScheduleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoleEligibilitySchedule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.roleEligibilityScheduleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Authorization/roleEligibilitySchedules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoleEligibilityScheduleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const listForScopeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoleEligibilityScheduleListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
