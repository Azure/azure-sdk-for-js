/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AccessReviewInstancesAssignedForMyApproval } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AuthorizationManagementClient } from "../authorizationManagementClient";
import {
  AccessReviewInstance,
  AccessReviewInstancesAssignedForMyApprovalListNextOptionalParams,
  AccessReviewInstancesAssignedForMyApprovalListOptionalParams,
  AccessReviewInstancesAssignedForMyApprovalListResponse,
  AccessReviewInstancesAssignedForMyApprovalGetByIdOptionalParams,
  AccessReviewInstancesAssignedForMyApprovalGetByIdResponse,
  AccessReviewInstancesAssignedForMyApprovalListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AccessReviewInstancesAssignedForMyApproval operations. */
export class AccessReviewInstancesAssignedForMyApprovalImpl
  implements AccessReviewInstancesAssignedForMyApproval {
  private readonly client: AuthorizationManagementClient;

  /**
   * Initialize a new instance of the class AccessReviewInstancesAssignedForMyApproval class.
   * @param client Reference to the service client
   */
  constructor(client: AuthorizationManagementClient) {
    this.client = client;
  }

  /**
   * Get access review instances assigned for my approval.
   * @param scheduleDefinitionId The id of the access review schedule definition.
   * @param options The options parameters.
   */
  public list(
    scheduleDefinitionId: string,
    options?: AccessReviewInstancesAssignedForMyApprovalListOptionalParams
  ): PagedAsyncIterableIterator<AccessReviewInstance> {
    const iter = this.listPagingAll(scheduleDefinitionId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(scheduleDefinitionId, options, settings);
      }
    };
  }

  private async *listPagingPage(
    scheduleDefinitionId: string,
    options?: AccessReviewInstancesAssignedForMyApprovalListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<AccessReviewInstance[]> {
    let result: AccessReviewInstancesAssignedForMyApprovalListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(scheduleDefinitionId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        scheduleDefinitionId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    scheduleDefinitionId: string,
    options?: AccessReviewInstancesAssignedForMyApprovalListOptionalParams
  ): AsyncIterableIterator<AccessReviewInstance> {
    for await (const page of this.listPagingPage(
      scheduleDefinitionId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get access review instances assigned for my approval.
   * @param scheduleDefinitionId The id of the access review schedule definition.
   * @param options The options parameters.
   */
  private _list(
    scheduleDefinitionId: string,
    options?: AccessReviewInstancesAssignedForMyApprovalListOptionalParams
  ): Promise<AccessReviewInstancesAssignedForMyApprovalListResponse> {
    return this.client.sendOperationRequest(
      { scheduleDefinitionId, options },
      listOperationSpec
    );
  }

  /**
   * Get single access review instance assigned for my approval.
   * @param scheduleDefinitionId The id of the access review schedule definition.
   * @param id The id of the access review instance.
   * @param options The options parameters.
   */
  getById(
    scheduleDefinitionId: string,
    id: string,
    options?: AccessReviewInstancesAssignedForMyApprovalGetByIdOptionalParams
  ): Promise<AccessReviewInstancesAssignedForMyApprovalGetByIdResponse> {
    return this.client.sendOperationRequest(
      { scheduleDefinitionId, id, options },
      getByIdOperationSpec
    );
  }

  /**
   * ListNext
   * @param scheduleDefinitionId The id of the access review schedule definition.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    scheduleDefinitionId: string,
    nextLink: string,
    options?: AccessReviewInstancesAssignedForMyApprovalListNextOptionalParams
  ): Promise<AccessReviewInstancesAssignedForMyApprovalListNextResponse> {
    return this.client.sendOperationRequest(
      { scheduleDefinitionId, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessReviewInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDefinition
    }
  },
  queryParameters: [Parameters.filter1, Parameters.apiVersion3],
  urlParameters: [Parameters.$host, Parameters.scheduleDefinitionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getByIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Authorization/accessReviewScheduleDefinitions/{scheduleDefinitionId}/instances/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessReviewInstance
    },
    default: {
      bodyMapper: Mappers.ErrorDefinition
    }
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.scheduleDefinitionId,
    Parameters.id
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AccessReviewInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorDefinition
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.scheduleDefinitionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
