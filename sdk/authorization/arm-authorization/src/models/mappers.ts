/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const RoleAssignmentListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoleAssignmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoleAssignment"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleAssignment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoleAssignment",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "String"
        }
      },
      roleDefinitionId: {
        serializedName: "properties.roleDefinitionId",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "properties.principalId",
        type: {
          name: "String"
        }
      },
      principalType: {
        serializedName: "properties.principalType",
        type: {
          name: "String"
        }
      },
      canDelegate: {
        serializedName: "properties.canDelegate",
        type: {
          name: "Boolean"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      condition: {
        serializedName: "properties.condition",
        type: {
          name: "String"
        }
      },
      conditionVersion: {
        serializedName: "properties.conditionVersion",
        type: {
          name: "String"
        }
      },
      createdOn: {
        serializedName: "properties.createdOn",
        type: {
          name: "DateTime"
        }
      },
      updatedOn: {
        serializedName: "properties.updatedOn",
        type: {
          name: "DateTime"
        }
      },
      createdBy: {
        serializedName: "properties.createdBy",
        type: {
          name: "String"
        }
      },
      updatedBy: {
        serializedName: "properties.updatedBy",
        type: {
          name: "String"
        }
      },
      delegatedManagedIdentityResourceId: {
        serializedName: "properties.delegatedManagedIdentityResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const RoleAssignmentCreateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoleAssignmentCreateParameters",
    modelProperties: {
      roleDefinitionId: {
        serializedName: "properties.roleDefinitionId",
        required: true,
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "properties.principalId",
        required: true,
        type: {
          name: "String"
        }
      },
      principalType: {
        serializedName: "properties.principalType",
        type: {
          name: "String"
        }
      },
      canDelegate: {
        serializedName: "properties.canDelegate",
        type: {
          name: "Boolean"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      condition: {
        serializedName: "properties.condition",
        type: {
          name: "String"
        }
      },
      conditionVersion: {
        serializedName: "properties.conditionVersion",
        type: {
          name: "String"
        }
      },
      delegatedManagedIdentityResourceId: {
        serializedName: "properties.delegatedManagedIdentityResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleAssignmentFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoleAssignmentFilter",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      canDelegate: {
        serializedName: "canDelegate",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};
