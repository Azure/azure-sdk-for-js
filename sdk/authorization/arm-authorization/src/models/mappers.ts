/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const RoleAssignmentFilter: msRest.CompositeMapper = {
  serializedName: "RoleAssignmentFilter",
  type: {
    name: "Composite",
    className: "RoleAssignmentFilter",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      canDelegate: {
        serializedName: "canDelegate",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RoleAssignment: msRest.CompositeMapper = {
  serializedName: "RoleAssignment",
  type: {
    name: "Composite",
    className: "RoleAssignment",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "String"
        }
      },
      roleDefinitionId: {
        serializedName: "properties.roleDefinitionId",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "properties.principalId",
        type: {
          name: "String"
        }
      },
      principalType: {
        serializedName: "properties.principalType",
        type: {
          name: "String"
        }
      },
      canDelegate: {
        serializedName: "properties.canDelegate",
        type: {
          name: "Boolean"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      condition: {
        serializedName: "properties.condition",
        type: {
          name: "String"
        }
      },
      conditionVersion: {
        serializedName: "properties.conditionVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleAssignmentCreateParameters: msRest.CompositeMapper = {
  serializedName: "RoleAssignmentCreateParameters",
  type: {
    name: "Composite",
    className: "RoleAssignmentCreateParameters",
    modelProperties: {
      roleDefinitionId: {
        required: true,
        serializedName: "properties.roleDefinitionId",
        type: {
          name: "String"
        }
      },
      principalId: {
        required: true,
        serializedName: "properties.principalId",
        type: {
          name: "String"
        }
      },
      principalType: {
        serializedName: "properties.principalType",
        type: {
          name: "String"
        }
      },
      canDelegate: {
        serializedName: "properties.canDelegate",
        type: {
          name: "Boolean"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      condition: {
        serializedName: "properties.condition",
        type: {
          name: "String"
        }
      },
      conditionVersion: {
        serializedName: "properties.conditionVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoleAssignmentListResult: msRest.CompositeMapper = {
  serializedName: "RoleAssignmentListResult",
  type: {
    name: "Composite",
    className: "RoleAssignmentListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoleAssignment"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
