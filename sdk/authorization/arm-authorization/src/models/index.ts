/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type AccessReviewDecisionTargetUnion =
  | AccessReviewDecisionTarget
  | UserDecisionTarget
  | ServicePrincipalDecisionTarget;
export type RoleManagementPolicyRuleUnion =
  | RoleManagementPolicyRule
  | RoleManagementPolicyApprovalRule
  | RoleManagementPolicyAuthenticationContextRule
  | RoleManagementPolicyEnablementRule
  | RoleManagementPolicyExpirationRule
  | RoleManagementPolicyNotificationRule;

/** The result of a request to list Microsoft.Authorization operations. */
export interface OperationListResult {
  /** The collection value. */
  value?: Operation[];
  /** The URI that can be used to request the next set of paged results. */
  nextLink?: string;
}

/** The definition of a Microsoft.Authorization operation. */
export interface Operation {
  /** Name of the operation */
  name?: string;
  /** Indicates whether the operation is a data action */
  isDataAction?: boolean;
  /** Display of the operation */
  display?: OperationDisplay;
  /** Origin of the operation */
  origin?: string;
}

/** The display information for a Microsoft.Authorization operation. */
export interface OperationDisplay {
  /**
   * The resource provider name: Microsoft.Authorization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The resource on which the operation is performed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The operation that users can perform.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The description for the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Error description and code explaining why an operation failed. */
export interface ErrorDefinition {
  /** Error of the list gateway status. */
  error?: ErrorDefinitionProperties;
}

/** Error description and code explaining why an operation failed. */
export interface ErrorDefinitionProperties {
  /**
   * Description of the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /** Error code of list gateway. */
  code?: string;
}

/** List of Access Review Schedule Definitions. */
export interface AccessReviewScheduleDefinitionListResult {
  /** Access Review Schedule Definition list. */
  value?: AccessReviewScheduleDefinition[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Access Review Schedule Definition. */
export interface AccessReviewScheduleDefinition {
  /**
   * The access review schedule definition id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The access review schedule definition unique id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The display name for the schedule definition. */
  displayName?: string;
  /**
   * This read-only field specifies the status of an accessReview.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: AccessReviewScheduleDefinitionStatus;
  /** The description provided by the access review creator and visible to admins. */
  descriptionForAdmins?: string;
  /** The description provided by the access review creator to be shown to reviewers. */
  descriptionForReviewers?: string;
  /** This is the collection of reviewers. */
  reviewers?: AccessReviewReviewer[];
  /**
   * This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reviewersType?: AccessReviewScheduleDefinitionReviewersType;
  /** This is the collection of instances returned when one does an expand on it. */
  instances?: AccessReviewInstance[];
  /**
   * ResourceId in which this review is getting created
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceId?: string;
  /**
   * This is used to indicate the role being reviewed
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly roleDefinitionId?: string;
  /**
   * The identity type user/servicePrincipal to review
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalTypePropertiesScopePrincipalType?: AccessReviewScopePrincipalType;
  /** Flag to indicate whether sending mails to reviewers and the review creator is enabled. */
  mailNotificationsEnabled?: boolean;
  /** Flag to indicate whether sending reminder emails to reviewers are enabled. */
  reminderNotificationsEnabled?: boolean;
  /** Flag to indicate whether reviewers are required to provide a justification when reviewing access. */
  defaultDecisionEnabled?: boolean;
  /** Flag to indicate whether the reviewer is required to pass justification when recording a decision. */
  justificationRequiredOnApproval?: boolean;
  /** This specifies the behavior for the autoReview feature when an access review completes. */
  defaultDecision?: DefaultDecisionType;
  /** Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review. */
  autoApplyDecisionsEnabled?: boolean;
  /** Flag to indicate whether showing recommendations to reviewers is enabled. */
  recommendationsEnabled?: boolean;
  /** The duration in days for an instance. */
  instanceDurationInDays?: number;
  /** The recurrence range type. The possible values are: endDate, noEnd, numbered. */
  typePropertiesSettingsRecurrenceRangeType?: AccessReviewRecurrenceRangeType;
  /** The number of times to repeat the access review. Required and must be positive if type is numbered. */
  numberOfOccurrences?: number;
  /** The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create. */
  startDate?: Date;
  /** The DateTime when the review is scheduled to end. Required if type is endDate */
  endDate?: Date;
  /** The recurrence type : weekly, monthly, etc. */
  typePropertiesSettingsRecurrencePatternType?: AccessReviewRecurrencePatternType;
  /** The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly. */
  interval?: number;
  /**
   * The identity id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The identity type : user/servicePrincipal
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalTypePropertiesCreatedByPrincipalType?: AccessReviewActorIdentityType;
  /**
   * The identity display name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalName?: string;
  /**
   * The user principal name(if valid)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly userPrincipalName?: string;
}

/** Access Review. */
export interface AccessReviewScheduleDefinitionProperties {
  /** The display name for the schedule definition. */
  displayName?: string;
  /**
   * This read-only field specifies the status of an accessReview.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: AccessReviewScheduleDefinitionStatus;
  /** The description provided by the access review creator and visible to admins. */
  descriptionForAdmins?: string;
  /** The description provided by the access review creator to be shown to reviewers. */
  descriptionForReviewers?: string;
  /** This is the collection of reviewers. */
  reviewers?: AccessReviewReviewer[];
  /**
   * This field specifies the type of reviewers for a review. Usually for a review, reviewers are explicitly assigned. However, in some cases, the reviewers may not be assigned and instead be chosen dynamically. For example managers review or self review.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reviewersType?: AccessReviewScheduleDefinitionReviewersType;
  /** This is the collection of instances returned when one does an expand on it. */
  instances?: AccessReviewInstance[];
  /**
   * ResourceId in which this review is getting created
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceId?: string;
  /**
   * This is used to indicate the role being reviewed
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly roleDefinitionId?: string;
  /**
   * The identity type user/servicePrincipal to review
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalTypeScopePrincipalType?: AccessReviewScopePrincipalType;
  /** Flag to indicate whether sending mails to reviewers and the review creator is enabled. */
  mailNotificationsEnabled?: boolean;
  /** Flag to indicate whether sending reminder emails to reviewers are enabled. */
  reminderNotificationsEnabled?: boolean;
  /** Flag to indicate whether reviewers are required to provide a justification when reviewing access. */
  defaultDecisionEnabled?: boolean;
  /** Flag to indicate whether the reviewer is required to pass justification when recording a decision. */
  justificationRequiredOnApproval?: boolean;
  /** This specifies the behavior for the autoReview feature when an access review completes. */
  defaultDecision?: DefaultDecisionType;
  /** Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review. */
  autoApplyDecisionsEnabled?: boolean;
  /** Flag to indicate whether showing recommendations to reviewers is enabled. */
  recommendationsEnabled?: boolean;
  /** The duration in days for an instance. */
  instanceDurationInDays?: number;
  /** The recurrence range type. The possible values are: endDate, noEnd, numbered. */
  typeSettingsRecurrenceRangeType?: AccessReviewRecurrenceRangeType;
  /** The number of times to repeat the access review. Required and must be positive if type is numbered. */
  numberOfOccurrences?: number;
  /** The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create. */
  startDate?: Date;
  /** The DateTime when the review is scheduled to end. Required if type is endDate */
  endDate?: Date;
  /** The recurrence type : weekly, monthly, etc. */
  typeSettingsRecurrencePatternType?: AccessReviewRecurrencePatternType;
  /** The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly. */
  interval?: number;
  /**
   * The identity id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The identity type : user/servicePrincipal
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalTypeCreatedByPrincipalType?: AccessReviewActorIdentityType;
  /**
   * The identity display name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalName?: string;
  /**
   * The user principal name(if valid)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly userPrincipalName?: string;
}

/** Settings of an Access Review. */
export interface AccessReviewScheduleSettings {
  /** Flag to indicate whether sending mails to reviewers and the review creator is enabled. */
  mailNotificationsEnabled?: boolean;
  /** Flag to indicate whether sending reminder emails to reviewers are enabled. */
  reminderNotificationsEnabled?: boolean;
  /** Flag to indicate whether reviewers are required to provide a justification when reviewing access. */
  defaultDecisionEnabled?: boolean;
  /** Flag to indicate whether the reviewer is required to pass justification when recording a decision. */
  justificationRequiredOnApproval?: boolean;
  /** This specifies the behavior for the autoReview feature when an access review completes. */
  defaultDecision?: DefaultDecisionType;
  /** Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review. */
  autoApplyDecisionsEnabled?: boolean;
  /** Flag to indicate whether showing recommendations to reviewers is enabled. */
  recommendationsEnabled?: boolean;
  /** The duration in days for an instance. */
  instanceDurationInDays?: number;
  /** The recurrence range type. The possible values are: endDate, noEnd, numbered. */
  typeRecurrenceRangeType?: AccessReviewRecurrenceRangeType;
  /** The number of times to repeat the access review. Required and must be positive if type is numbered. */
  numberOfOccurrences?: number;
  /** The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create. */
  startDate?: Date;
  /** The DateTime when the review is scheduled to end. Required if type is endDate */
  endDate?: Date;
  /** The recurrence type : weekly, monthly, etc. */
  typeRecurrencePatternType?: AccessReviewRecurrencePatternType;
  /** The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly. */
  interval?: number;
}

/** Descriptor for what needs to be reviewed */
export interface AccessReviewReviewer {
  /** The id of the reviewer(user/servicePrincipal) */
  principalId?: string;
  /**
   * The identity type : user/servicePrincipal
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalType?: AccessReviewReviewerType;
}

/** Access Review Instance. */
export interface AccessReviewInstance {
  /**
   * The access review instance id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The access review instance name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * This read-only field specifies the status of an access review instance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: AccessReviewInstanceStatus;
  /** The DateTime when the review instance is scheduled to be start. */
  startDateTime?: Date;
  /** The DateTime when the review instance is scheduled to end. */
  endDateTime?: Date;
}

/** List of Access Review Instances. */
export interface AccessReviewInstanceListResult {
  /** Access Review Instance list. */
  value?: AccessReviewInstance[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** List of access review decisions. */
export interface AccessReviewDecisionListResult {
  /** Access Review Decision list. */
  value?: AccessReviewDecision[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Access Review. */
export interface AccessReviewDecision {
  /**
   * The access review decision id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The access review decision name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The feature- generated recommendation shown to the reviewer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly recommendation?: AccessRecommendationType;
  /** The decision on the approval step. This value is initially set to NotReviewed. Approvers can take action of Approve/Deny */
  decision?: AccessReviewResult;
  /** Justification provided by approvers for their action */
  justification?: string;
  /**
   * Date Time when a decision was taken.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reviewedDateTime?: Date;
  /**
   * The outcome of applying the decision.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly applyResult?: AccessReviewApplyResult;
  /**
   * The date and time when the review decision was applied.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly appliedDateTime?: Date;
  /**
   * The identity id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalIdPropertiesAppliedByPrincipalId?: string;
  /**
   * The identity type : user/servicePrincipal
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalTypePropertiesAppliedByPrincipalType?: AccessReviewActorIdentityType;
  /**
   * The identity display name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalNamePropertiesAppliedByPrincipalName?: string;
  /**
   * The user principal name(if valid)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly userPrincipalNamePropertiesAppliedByUserPrincipalName?: string;
  /**
   * The identity id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalIdPropertiesReviewedByPrincipalId?: string;
  /**
   * The identity type : user/servicePrincipal
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalTypePropertiesReviewedByPrincipalType?: AccessReviewActorIdentityType;
  /**
   * The identity display name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalNamePropertiesReviewedByPrincipalName?: string;
  /**
   * The user principal name(if valid)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly userPrincipalNamePropertiesReviewedByUserPrincipalName?: string;
  /** The type of decision target : User/ServicePrincipal */
  typePropertiesTargetType?: DecisionTargetType;
}

/** Approval Step. */
export interface AccessReviewDecisionProperties {
  /**
   * The feature- generated recommendation shown to the reviewer.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly recommendation?: AccessRecommendationType;
  /** The decision on the approval step. This value is initially set to NotReviewed. Approvers can take action of Approve/Deny */
  decision?: AccessReviewResult;
  /** Justification provided by approvers for their action */
  justification?: string;
  /**
   * Date Time when a decision was taken.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reviewedDateTime?: Date;
  /**
   * The outcome of applying the decision.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly applyResult?: AccessReviewApplyResult;
  /**
   * The date and time when the review decision was applied.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly appliedDateTime?: Date;
  /**
   * The identity id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalIdAppliedByPrincipalId?: string;
  /**
   * The identity type : user/servicePrincipal
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalTypeAppliedByPrincipalType?: AccessReviewActorIdentityType;
  /**
   * The identity display name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalNameAppliedByPrincipalName?: string;
  /**
   * The user principal name(if valid)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly userPrincipalNameAppliedByUserPrincipalName?: string;
  /**
   * The identity id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalIdReviewedByPrincipalId?: string;
  /**
   * The identity type : user/servicePrincipal
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalTypeReviewedByPrincipalType?: AccessReviewActorIdentityType;
  /**
   * The identity display name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalNameReviewedByPrincipalName?: string;
  /**
   * The user principal name(if valid)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly userPrincipalNameReviewedByUserPrincipalName?: string;
  /** The type of decision target : User/ServicePrincipal */
  type?: DecisionTargetType;
}

/** Target of the decision. */
export interface AccessReviewDecisionTarget {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "user" | "servicePrincipal";
}

/** Access Review Default Settings. */
export interface AccessReviewDefaultSettings {
  /**
   * The access review default settings id. This is only going to be default
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The access review default settings name. This is always going to be Access Review Default Settings
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Flag to indicate whether sending mails to reviewers and the review creator is enabled. */
  mailNotificationsEnabled?: boolean;
  /** Flag to indicate whether sending reminder emails to reviewers are enabled. */
  reminderNotificationsEnabled?: boolean;
  /** Flag to indicate whether reviewers are required to provide a justification when reviewing access. */
  defaultDecisionEnabled?: boolean;
  /** Flag to indicate whether the reviewer is required to pass justification when recording a decision. */
  justificationRequiredOnApproval?: boolean;
  /** This specifies the behavior for the autoReview feature when an access review completes. */
  defaultDecision?: DefaultDecisionType;
  /** Flag to indicate whether auto-apply capability, to automatically change the target object access resource, is enabled. If not enabled, a user must, after the review completes, apply the access review. */
  autoApplyDecisionsEnabled?: boolean;
  /** Flag to indicate whether showing recommendations to reviewers is enabled. */
  recommendationsEnabled?: boolean;
  /** The duration in days for an instance. */
  instanceDurationInDays?: number;
  /** The recurrence range type. The possible values are: endDate, noEnd, numbered. */
  typePropertiesRecurrenceRangeType?: AccessReviewRecurrenceRangeType;
  /** The number of times to repeat the access review. Required and must be positive if type is numbered. */
  numberOfOccurrences?: number;
  /** The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create. */
  startDate?: Date;
  /** The DateTime when the review is scheduled to end. Required if type is endDate */
  endDate?: Date;
  /** The recurrence type : weekly, monthly, etc. */
  typePropertiesRecurrencePatternType?: AccessReviewRecurrencePatternType;
  /** The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly. */
  interval?: number;
}

/** Deny assignment list operation result. */
export interface DenyAssignmentListResult {
  /** Deny assignment list. */
  value?: DenyAssignment[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Deny Assignment */
export interface DenyAssignment {
  /**
   * The deny assignment ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The deny assignment name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The deny assignment type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The display name of the deny assignment. */
  denyAssignmentName?: string;
  /** The description of the deny assignment. */
  description?: string;
  /** An array of permissions that are denied by the deny assignment. */
  permissions?: DenyAssignmentPermission[];
  /** The deny assignment scope. */
  scope?: string;
  /** Determines if the deny assignment applies to child scopes. Default value is false. */
  doNotApplyToChildScopes?: boolean;
  /** Array of principals to which the deny assignment applies. */
  principals?: Principal[];
  /** Array of principals to which the deny assignment does not apply. */
  excludePrincipals?: Principal[];
  /** Specifies whether this deny assignment was created by Azure and cannot be edited or deleted. */
  isSystemProtected?: boolean;
}

/** Deny assignment permissions. */
export interface DenyAssignmentPermission {
  /** Actions to which the deny assignment does not grant access. */
  actions?: string[];
  /** Actions to exclude from that the deny assignment does not grant access. */
  notActions?: string[];
  /** Data actions to which the deny assignment does not grant access. */
  dataActions?: string[];
  /** Data actions to exclude from that the deny assignment does not grant access. */
  notDataActions?: string[];
}

/** The name of the entity last modified it */
export interface Principal {
  /** The id of the principal made changes */
  id?: string;
  /** The name of the principal made changes */
  displayName?: string;
  /** Type of principal such as user , group etc */
  type?: string;
  /** Email of principal */
  email?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Provider Operations metadata */
export interface ProviderOperationsMetadata {
  /** The provider id. */
  id?: string;
  /** The provider name. */
  name?: string;
  /** The provider type. */
  type?: string;
  /** The provider display name. */
  displayName?: string;
  /** The provider resource types */
  resourceTypes?: ResourceType[];
  /** The provider operations. */
  operations?: ProviderOperation[];
}

/** Resource Type */
export interface ResourceType {
  /** The resource type name. */
  name?: string;
  /** The resource type display name. */
  displayName?: string;
  /** The resource type operations. */
  operations?: ProviderOperation[];
}

/** Operation */
export interface ProviderOperation {
  /** The operation name. */
  name?: string;
  /** The operation display name. */
  displayName?: string;
  /** The operation description. */
  description?: string;
  /** The operation origin. */
  origin?: string;
  /** The operation properties. */
  properties?: Record<string, unknown>;
  /** The dataAction flag to specify the operation type. */
  isDataAction?: boolean;
}

/** Provider operations metadata list */
export interface ProviderOperationsMetadataListResult {
  /** The list of providers. */
  value?: ProviderOperationsMetadata[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Role assignment list operation result. */
export interface RoleAssignmentListResult {
  /** Role assignment list. */
  value?: RoleAssignment[];
  /**
   * The URL to use for getting the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Role Assignments */
export interface RoleAssignment {
  /**
   * The role assignment ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The role assignment name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The role assignment type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The role assignment scope.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scope?: string;
  /** The role definition ID. */
  roleDefinitionId?: string;
  /** The principal ID. */
  principalId?: string;
  /** The principal type of the assigned principal ID. */
  principalType?: PrincipalType;
  /** Description of role assignment */
  description?: string;
  /** The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container' */
  condition?: string;
  /** Version of the condition. Currently accepted value is '2.0' */
  conditionVersion?: string;
  /**
   * Time it was created
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdOn?: Date;
  /**
   * Time it was updated
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedOn?: Date;
  /**
   * Id of the user who created the assignment
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdBy?: string;
  /**
   * Id of the user who updated the assignment
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedBy?: string;
  /** Id of the delegated managed identity resource */
  delegatedManagedIdentityResourceId?: string;
}

/** Role assignment create parameters. */
export interface RoleAssignmentCreateParameters {
  /**
   * The role assignment scope.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scope?: string;
  /** The role definition ID. */
  roleDefinitionId: string;
  /** The principal ID. */
  principalId: string;
  /** The principal type of the assigned principal ID. */
  principalType?: PrincipalType;
  /** Description of role assignment */
  description?: string;
  /** The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container' */
  condition?: string;
  /** Version of the condition. Currently accepted value is '2.0' */
  conditionVersion?: string;
  /**
   * Time it was created
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdOn?: Date;
  /**
   * Time it was updated
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedOn?: Date;
  /**
   * Id of the user who created the assignment
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdBy?: string;
  /**
   * Id of the user who updated the assignment
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedBy?: string;
  /** Id of the delegated managed identity resource */
  delegatedManagedIdentityResourceId?: string;
}

/** Validation response */
export interface ValidationResponse {
  /**
   * Whether or not validation succeeded
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isValid?: boolean;
  /** Failed validation result details */
  errorInfo?: ValidationResponseErrorInfo;
}

/** Failed validation result details */
export interface ValidationResponseErrorInfo {
  /**
   * Error code indicating why validation failed
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Message indicating why validation failed
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** Permissions information. */
export interface PermissionGetResult {
  /** An array of permissions. */
  value?: Permission[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Role definition permissions. */
export interface Permission {
  /** Allowed actions. */
  actions?: string[];
  /** Denied actions. */
  notActions?: string[];
  /** Allowed Data actions. */
  dataActions?: string[];
  /** Denied Data actions. */
  notDataActions?: string[];
}

/** Role definition. */
export interface RoleDefinition {
  /**
   * The role definition ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The role definition name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The role definition type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The role name. */
  roleName?: string;
  /** The role definition description. */
  description?: string;
  /** The role type. */
  roleType?: string;
  /** Role definition permissions. */
  permissions?: Permission[];
  /** Role definition assignable scopes. */
  assignableScopes?: string[];
}

/** Role definition list operation result. */
export interface RoleDefinitionListResult {
  /** Role definition list. */
  value?: RoleDefinition[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Role Assignment Metrics */
export interface RoleAssignmentMetricsResult {
  /**
   * The subscription ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subscriptionId?: string;
  /**
   * The role assignment limit.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly roleAssignmentsLimit?: number;
  /**
   * The number of current role assignments.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly roleAssignmentsCurrentCount?: number;
  /**
   * The number of remaining role assignments available.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly roleAssignmentsRemainingCount?: number;
}

/** Eligible child resources list operation result. */
export interface EligibleChildResourcesListResult {
  /** Eligible child resource list. */
  value?: EligibleChildResource[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Eligible child resource */
export interface EligibleChildResource {
  /**
   * The resource scope Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** An error response from the service. */
export interface CloudError {
  /** An error response from the service. */
  error?: CloudErrorBody;
}

/** An error response from the service. */
export interface CloudErrorBody {
  /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
  code?: string;
  /** A message describing the error, intended to be suitable for display in a user interface. */
  message?: string;
}

/** Role Assignment schedule */
export interface RoleAssignmentSchedule {
  /**
   * The role assignment schedule Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The role assignment schedule name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The role assignment schedule type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The role assignment schedule scope. */
  scope?: string;
  /** The role definition ID. */
  roleDefinitionId?: string;
  /** The principal ID. */
  principalId?: string;
  /** The principal type of the assigned principal ID. */
  principalType?: PrincipalType;
  /** The id of roleAssignmentScheduleRequest used to create this roleAssignmentSchedule */
  roleAssignmentScheduleRequestId?: string;
  /** The id of roleEligibilitySchedule used to activated this roleAssignmentSchedule */
  linkedRoleEligibilityScheduleId?: string;
  /** Assignment type of the role assignment schedule */
  assignmentType?: AssignmentType;
  /** Membership type of the role assignment schedule */
  memberType?: MemberType;
  /** The status of the role assignment schedule. */
  status?: Status;
  /** Start DateTime when role assignment schedule */
  startDateTime?: Date;
  /** End DateTime when role assignment schedule */
  endDateTime?: Date;
  /** The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container' */
  condition?: string;
  /** Version of the condition. Currently accepted value is '2.0' */
  conditionVersion?: string;
  /** DateTime when role assignment schedule was created */
  createdOn?: Date;
  /** DateTime when role assignment schedule was modified */
  updatedOn?: Date;
  /** Additional properties of principal, scope and role definition */
  expandedProperties?: ExpandedProperties;
}

export interface ExpandedProperties {
  /** Details of the resource scope */
  scope?: ExpandedPropertiesScope;
  /** Details of role definition */
  roleDefinition?: ExpandedPropertiesRoleDefinition;
  /** Details of the principal */
  principal?: ExpandedPropertiesPrincipal;
}

/** Details of the resource scope */
export interface ExpandedPropertiesScope {
  /** Scope id of the resource */
  id?: string;
  /** Display name of the resource */
  displayName?: string;
  /** Type of the resource */
  type?: string;
}

/** Details of role definition */
export interface ExpandedPropertiesRoleDefinition {
  /** Id of the role definition */
  id?: string;
  /** Display name of the role definition */
  displayName?: string;
  /** Type of the role definition */
  type?: string;
}

/** Details of the principal */
export interface ExpandedPropertiesPrincipal {
  /** Id of the principal */
  id?: string;
  /** Display name of the principal */
  displayName?: string;
  /** Email id of the principal */
  email?: string;
  /** Type of the principal */
  type?: string;
}

/** Role assignment schedule list operation result. */
export interface RoleAssignmentScheduleListResult {
  /** Role assignment schedule list. */
  value?: RoleAssignmentSchedule[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Role assignment schedule instance list operation result. */
export interface RoleAssignmentScheduleInstanceListResult {
  /** Role assignment schedule instance list. */
  value?: RoleAssignmentScheduleInstance[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Information about current or upcoming role assignment schedule instance */
export interface RoleAssignmentScheduleInstance {
  /**
   * The role assignment schedule instance ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The role assignment schedule instance name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The role assignment schedule instance type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The role assignment schedule scope. */
  scope?: string;
  /** The role definition ID. */
  roleDefinitionId?: string;
  /** The principal ID. */
  principalId?: string;
  /** The principal type of the assigned principal ID. */
  principalType?: PrincipalType;
  /** Id of the master role assignment schedule */
  roleAssignmentScheduleId?: string;
  /** Role Assignment Id in external system */
  originRoleAssignmentId?: string;
  /** The status of the role assignment schedule instance. */
  status?: Status;
  /** The startDateTime of the role assignment schedule instance */
  startDateTime?: Date;
  /** The endDateTime of the role assignment schedule instance */
  endDateTime?: Date;
  /** roleEligibilityScheduleId used to activate */
  linkedRoleEligibilityScheduleId?: string;
  /** roleEligibilityScheduleInstanceId linked to this roleAssignmentScheduleInstance */
  linkedRoleEligibilityScheduleInstanceId?: string;
  /** Assignment type of the role assignment schedule */
  assignmentType?: AssignmentType;
  /** Membership type of the role assignment schedule */
  memberType?: MemberType;
  /** The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container' */
  condition?: string;
  /** Version of the condition. Currently accepted value is '2.0' */
  conditionVersion?: string;
  /** DateTime when role assignment schedule was created */
  createdOn?: Date;
  /** Additional properties of principal, scope and role definition */
  expandedProperties?: ExpandedProperties;
}

/** Role Assignment schedule request */
export interface RoleAssignmentScheduleRequest {
  /**
   * The role assignment schedule request ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The role assignment schedule request name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The role assignment schedule request type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The role assignment schedule request scope.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scope?: string;
  /** The role definition ID. */
  roleDefinitionId?: string;
  /** The principal ID. */
  principalId?: string;
  /**
   * The principal type of the assigned principal ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalType?: PrincipalType;
  /** The type of the role assignment schedule request. Eg: SelfActivate, AdminAssign etc */
  requestType?: RequestType;
  /**
   * The status of the role assignment schedule request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: Status;
  /**
   * The approvalId of the role assignment schedule request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly approvalId?: string;
  /** The resultant role assignment schedule id or the role assignment schedule id being updated */
  targetRoleAssignmentScheduleId?: string;
  /** The role assignment schedule instance id being updated */
  targetRoleAssignmentScheduleInstanceId?: string;
  /** Schedule info of the role assignment schedule */
  scheduleInfo?: RoleAssignmentScheduleRequestPropertiesScheduleInfo;
  /** The linked role eligibility schedule id - to activate an eligibility. */
  linkedRoleEligibilityScheduleId?: string;
  /** Justification for the role assignment */
  justification?: string;
  /** Ticket Info of the role assignment */
  ticketInfo?: RoleAssignmentScheduleRequestPropertiesTicketInfo;
  /** The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container' */
  condition?: string;
  /** Version of the condition. Currently accepted value is '2.0' */
  conditionVersion?: string;
  /**
   * DateTime when role assignment schedule request was created
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdOn?: Date;
  /**
   * Id of the user who created this request
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requestorId?: string;
  /**
   * Additional properties of principal, scope and role definition
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expandedProperties?: ExpandedProperties;
}

/** Schedule info of the role assignment schedule */
export interface RoleAssignmentScheduleRequestPropertiesScheduleInfo {
  /** Start DateTime of the role assignment schedule. */
  startDateTime?: Date;
  /** Expiration of the role assignment schedule */
  expiration?: RoleAssignmentScheduleRequestPropertiesScheduleInfoExpiration;
}

/** Expiration of the role assignment schedule */
export interface RoleAssignmentScheduleRequestPropertiesScheduleInfoExpiration {
  /** Type of the role assignment schedule expiration */
  type?: Type;
  /** End DateTime of the role assignment schedule. */
  endDateTime?: Date;
  /** Duration of the role assignment schedule in TimeSpan. */
  duration?: string;
}

/** Ticket Info of the role assignment */
export interface RoleAssignmentScheduleRequestPropertiesTicketInfo {
  /** Ticket number for the role assignment */
  ticketNumber?: string;
  /** Ticket system name for the role assignment */
  ticketSystem?: string;
}

/** Role assignment schedule request list operation result. */
export interface RoleAssignmentScheduleRequestListResult {
  /** Role assignment schedule request list. */
  value?: RoleAssignmentScheduleRequest[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Role eligibility schedule */
export interface RoleEligibilitySchedule {
  /**
   * The role eligibility schedule Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The role eligibility schedule name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The role eligibility schedule type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The role eligibility schedule scope. */
  scope?: string;
  /** The role definition ID. */
  roleDefinitionId?: string;
  /** The principal ID. */
  principalId?: string;
  /** The principal type of the assigned principal ID. */
  principalType?: PrincipalType;
  /** The id of roleEligibilityScheduleRequest used to create this roleAssignmentSchedule */
  roleEligibilityScheduleRequestId?: string;
  /** Membership type of the role eligibility schedule */
  memberType?: MemberType;
  /** The status of the role eligibility schedule. */
  status?: Status;
  /** Start DateTime when role eligibility schedule */
  startDateTime?: Date;
  /** End DateTime when role eligibility schedule */
  endDateTime?: Date;
  /** The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container' */
  condition?: string;
  /** Version of the condition. Currently accepted value is '2.0' */
  conditionVersion?: string;
  /** DateTime when role eligibility schedule was created */
  createdOn?: Date;
  /** DateTime when role eligibility schedule was modified */
  updatedOn?: Date;
  /** Additional properties of principal, scope and role definition */
  expandedProperties?: ExpandedProperties;
}

/** role eligibility schedule list operation result. */
export interface RoleEligibilityScheduleListResult {
  /** role eligibility schedule list. */
  value?: RoleEligibilitySchedule[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Role eligibility schedule instance list operation result. */
export interface RoleEligibilityScheduleInstanceListResult {
  /** Role eligibility schedule instance list. */
  value?: RoleEligibilityScheduleInstance[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Information about current or upcoming role eligibility schedule instance */
export interface RoleEligibilityScheduleInstance {
  /**
   * The role eligibility schedule instance ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The role eligibility schedule instance name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The role eligibility schedule instance type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The role eligibility schedule scope. */
  scope?: string;
  /** The role definition ID. */
  roleDefinitionId?: string;
  /** The principal ID. */
  principalId?: string;
  /** The principal type of the assigned principal ID. */
  principalType?: PrincipalType;
  /** Id of the master role eligibility schedule */
  roleEligibilityScheduleId?: string;
  /** The status of the role eligibility schedule instance */
  status?: Status;
  /** The startDateTime of the role eligibility schedule instance */
  startDateTime?: Date;
  /** The endDateTime of the role eligibility schedule instance */
  endDateTime?: Date;
  /** Membership type of the role eligibility schedule */
  memberType?: MemberType;
  /** The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container' */
  condition?: string;
  /** Version of the condition. Currently accepted value is '2.0' */
  conditionVersion?: string;
  /** DateTime when role eligibility schedule was created */
  createdOn?: Date;
  /** Additional properties of principal, scope and role definition */
  expandedProperties?: ExpandedProperties;
}

/** Role Eligibility schedule request */
export interface RoleEligibilityScheduleRequest {
  /**
   * The role eligibility schedule request ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The role eligibility schedule request name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The role eligibility schedule request type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The role eligibility schedule request scope.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scope?: string;
  /** The role definition ID. */
  roleDefinitionId?: string;
  /** The principal ID. */
  principalId?: string;
  /**
   * The principal type of the assigned principal ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalType?: PrincipalType;
  /** The type of the role assignment schedule request. Eg: SelfActivate, AdminAssign etc */
  requestType?: RequestType;
  /**
   * The status of the role eligibility schedule request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: Status;
  /**
   * The approvalId of the role eligibility schedule request.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly approvalId?: string;
  /** Schedule info of the role eligibility schedule */
  scheduleInfo?: RoleEligibilityScheduleRequestPropertiesScheduleInfo;
  /** The resultant role eligibility schedule id or the role eligibility schedule id being updated */
  targetRoleEligibilityScheduleId?: string;
  /** The role eligibility schedule instance id being updated */
  targetRoleEligibilityScheduleInstanceId?: string;
  /** Justification for the role eligibility */
  justification?: string;
  /** Ticket Info of the role eligibility */
  ticketInfo?: RoleEligibilityScheduleRequestPropertiesTicketInfo;
  /** The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase 'foo_storage_container' */
  condition?: string;
  /** Version of the condition. Currently accepted value is '2.0' */
  conditionVersion?: string;
  /**
   * DateTime when role eligibility schedule request was created
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdOn?: Date;
  /**
   * Id of the user who created this request
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requestorId?: string;
  /**
   * Additional properties of principal, scope and role definition
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expandedProperties?: ExpandedProperties;
}

/** Schedule info of the role eligibility schedule */
export interface RoleEligibilityScheduleRequestPropertiesScheduleInfo {
  /** Start DateTime of the role eligibility schedule. */
  startDateTime?: Date;
  /** Expiration of the role eligibility schedule */
  expiration?: RoleEligibilityScheduleRequestPropertiesScheduleInfoExpiration;
}

/** Expiration of the role eligibility schedule */
export interface RoleEligibilityScheduleRequestPropertiesScheduleInfoExpiration {
  /** Type of the role eligibility schedule expiration */
  type?: Type;
  /** End DateTime of the role eligibility schedule. */
  endDateTime?: Date;
  /** Duration of the role eligibility schedule in TimeSpan. */
  duration?: string;
}

/** Ticket Info of the role eligibility */
export interface RoleEligibilityScheduleRequestPropertiesTicketInfo {
  /** Ticket number for the role eligibility */
  ticketNumber?: string;
  /** Ticket system name for the role eligibility */
  ticketSystem?: string;
}

/** Role eligibility schedule request list operation result. */
export interface RoleEligibilityScheduleRequestListResult {
  /** Role eligibility schedule request list. */
  value?: RoleEligibilityScheduleRequest[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Role management policy */
export interface RoleManagementPolicy {
  /**
   * The role management policy Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The role management policy name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The role management policy type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The role management policy scope. */
  scope?: string;
  /** The role management policy display name. */
  displayName?: string;
  /** The role management policy description. */
  description?: string;
  /** The role management policy is default policy. */
  isOrganizationDefault?: boolean;
  /**
   * The name of the entity last modified it
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedBy?: Principal;
  /**
   * The last modified date time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedDateTime?: Date;
  /** The rule applied to the policy. */
  rules?: RoleManagementPolicyRuleUnion[];
  /**
   * The readonly computed rule applied to the policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly effectiveRules?: RoleManagementPolicyRuleUnion[];
  /**
   * Additional properties of scope
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly policyProperties?: PolicyProperties;
}

/** The role management policy rule. */
export interface RoleManagementPolicyRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ruleType:
    | "RoleManagementPolicyApprovalRule"
    | "RoleManagementPolicyAuthenticationContextRule"
    | "RoleManagementPolicyEnablementRule"
    | "RoleManagementPolicyExpirationRule"
    | "RoleManagementPolicyNotificationRule";
  /** The id of the rule. */
  id?: string;
  /** The target of the current rule. */
  target?: RoleManagementPolicyRuleTarget;
}

/** The role management policy rule target. */
export interface RoleManagementPolicyRuleTarget {
  /** The caller of the setting. */
  caller?: string;
  /** The type of operation. */
  operations?: string[];
  /** The assignment level to which it is applied. */
  level?: string;
  /** The list of target objects. */
  targetObjects?: string[];
  /** The list of inheritable settings. */
  inheritableSettings?: string[];
  /** The list of enforced settings. */
  enforcedSettings?: string[];
}

export interface PolicyProperties {
  /**
   * Details of the resource scope
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scope?: PolicyPropertiesScope;
}

/** Details of the resource scope */
export interface PolicyPropertiesScope {
  /** Scope id of the resource */
  id?: string;
  /** Display name of the resource */
  displayName?: string;
  /** Type of the resource */
  type?: string;
}

/** Role management policy list operation result. */
export interface RoleManagementPolicyListResult {
  /** Role management policy list. */
  value?: RoleManagementPolicy[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Role management policy */
export interface RoleManagementPolicyAssignment {
  /**
   * The role management policy Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The role management policy name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The role management policy type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The role management policy scope. */
  scope?: string;
  /** The role definition of management policy assignment. */
  roleDefinitionId?: string;
  /** The policy id role management policy assignment. */
  policyId?: string;
  /**
   * Additional properties of scope, role definition and policy
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly policyAssignmentProperties?: PolicyAssignmentProperties;
}

export interface PolicyAssignmentProperties {
  /** Details of the resource scope */
  scope?: PolicyAssignmentPropertiesScope;
  /** Details of role definition */
  roleDefinition?: PolicyAssignmentPropertiesRoleDefinition;
  /** Details of the policy */
  policy?: PolicyAssignmentPropertiesPolicy;
}

/** Details of the resource scope */
export interface PolicyAssignmentPropertiesScope {
  /** Scope id of the resource */
  id?: string;
  /** Display name of the resource */
  displayName?: string;
  /** Type of the resource */
  type?: string;
}

/** Details of role definition */
export interface PolicyAssignmentPropertiesRoleDefinition {
  /** Id of the role definition */
  id?: string;
  /** Display name of the role definition */
  displayName?: string;
  /** Type of the role definition */
  type?: string;
}

/** Details of the policy */
export interface PolicyAssignmentPropertiesPolicy {
  /** Id of the policy */
  id?: string;
  /**
   * The name of the entity last modified it
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedBy?: Principal;
  /** The last modified date time. */
  lastModifiedDateTime?: Date;
}

/** Role management policy assignment list operation result. */
export interface RoleManagementPolicyAssignmentListResult {
  /** Role management policy assignment list. */
  value?: RoleManagementPolicyAssignment[];
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** Deny Assignments filter */
export interface DenyAssignmentFilter {
  /** Return deny assignment with specified name. */
  denyAssignmentName?: string;
  /** Return all deny assignments where the specified principal is listed in the principals list of deny assignments. */
  principalId?: string;
  /** Return all deny assignments where the specified principal is listed either in the principals list or exclude principals list of deny assignments. */
  gdprExportPrincipalId?: string;
}

/** Role Assignments filter */
export interface RoleAssignmentFilter {
  /** Returns role assignment of the specific principal. */
  principalId?: string;
}

/** Role Definitions filter */
export interface RoleDefinitionFilter {
  /** Returns role definition with the specific name. */
  roleName?: string;
  /** Returns role definition with the specific type. */
  type?: string;
}

/** Role assignment schedule filter */
export interface RoleAssignmentScheduleFilter {
  /** Returns role assignment schedule of the specific principal. */
  principalId?: string;
  /** Returns role assignment schedule of the specific role definition. */
  roleDefinitionId?: string;
  /** Returns role assignment schedule instances of the specific status. */
  status?: string;
}

/** Role assignment schedule instance filter */
export interface RoleAssignmentScheduleInstanceFilter {
  /** Returns role assignment schedule instances of the specific principal. */
  principalId?: string;
  /** Returns role assignment schedule instances of the specific role definition. */
  roleDefinitionId?: string;
  /** Returns role assignment schedule instances of the specific status. */
  status?: string;
  /** Returns role assignment schedule instances belonging to a specific role assignment schedule. */
  roleAssignmentScheduleId?: string;
}

/** Role assignment schedule request filter */
export interface RoleAssignmentScheduleRequestFilter {
  /** Returns role assignment requests of the specific principal. */
  principalId?: string;
  /** Returns role assignment requests of the specific role definition. */
  roleDefinitionId?: string;
  /** Returns role assignment requests created by specific principal. */
  requestorId?: string;
  /** Returns role assignment requests of specific status. */
  status?: string;
}

/** Role eligibility schedule filter */
export interface RoleEligibilityScheduleFilter {
  /** Returns role eligibility schedule of the specific principal. */
  principalId?: string;
  /** Returns role eligibility schedule of the specific role definition. */
  roleDefinitionId?: string;
  /** Returns role eligibility schedule of the specific status. */
  status?: string;
}

/** Role eligibility schedule instance filter */
export interface RoleEligibilityScheduleInstanceFilter {
  /** Returns role eligibility schedule instances of the specific principal. */
  principalId?: string;
  /** Returns role eligibility schedule instances of the specific role definition. */
  roleDefinitionId?: string;
  /** Returns role eligibility schedule instances of the specific status. */
  status?: string;
  /** Returns role eligibility schedule instances belonging to a specific role eligibility schedule. */
  roleEligibilityScheduleId?: string;
}

/** Role eligibility schedule request filter */
export interface RoleEligibilityScheduleRequestFilter {
  /** Returns role eligibility requests of the specific principal. */
  principalId?: string;
  /** Returns role eligibility requests of the specific role definition. */
  roleDefinitionId?: string;
  /** Returns role eligibility requests created by specific principal. */
  requestorId?: string;
  /** Returns role eligibility requests of specific status. */
  status?: string;
}

/** The approval settings. */
export interface ApprovalSettings {
  /** Determine whether approval is required or not. */
  isApprovalRequired?: boolean;
  /** Determine whether approval is required for assignment extension. */
  isApprovalRequiredForExtension?: boolean;
  /** Determine whether requestor justification required. */
  isRequestorJustificationRequired?: boolean;
  /** The type of rule */
  approvalMode?: ApprovalMode;
  /** The approval stages of the request. */
  approvalStages?: ApprovalStage[];
}

/** The approval stage. */
export interface ApprovalStage {
  /** The time in days when approval request would be timed out. */
  approvalStageTimeOutInDays?: number;
  /** Determine whether approver need to provide justification for his decision. */
  isApproverJustificationRequired?: boolean;
  /** The time in minutes when the approval request would be escalated if the primary approver does not approves. */
  escalationTimeInMinutes?: number;
  /** The primary approver of the request. */
  primaryApprovers?: UserSet[];
  /** The value determine whether escalation feature is enabled. */
  isEscalationEnabled?: boolean;
  /** The escalation approver of the request. */
  escalationApprovers?: UserSet[];
}

/** The detail of a user. */
export interface UserSet {
  /** The type of user. */
  userType?: UserType;
  /** The value indicating whether the user is a backup fallback approver */
  isBackup?: boolean;
  /** The object id of the user. */
  id?: string;
  /** The description of the user. */
  description?: string;
}

/** User Decision Target */
export type UserDecisionTarget = AccessReviewDecisionTarget & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "user";
  /**
   * The id of user whose access was reviewed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The display name of the user whose access was reviewed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalName?: string;
  /**
   * The user principal name of the user whose access was reviewed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly userPrincipalName?: string;
};

/** Service Principal Decision Target */
export type ServicePrincipalDecisionTarget = AccessReviewDecisionTarget & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "servicePrincipal";
  /**
   * The id of service principal whose access is reviewed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The display name of the service principal whose access was reviewed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalName?: string;
  /**
   * The appId for the service principal entity being reviewed
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly appId?: string;
};

/** The role management policy rule. */
export type RoleManagementPolicyApprovalRule = RoleManagementPolicyRule & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ruleType: "RoleManagementPolicyApprovalRule";
  /** The approval setting */
  setting?: ApprovalSettings;
};

/** The role management policy rule. */
export type RoleManagementPolicyAuthenticationContextRule = RoleManagementPolicyRule & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ruleType: "RoleManagementPolicyAuthenticationContextRule";
  /** The value indicating if rule is enabled. */
  isEnabled?: boolean;
  /** The claim value. */
  claimValue?: string;
};

/** The role management policy rule. */
export type RoleManagementPolicyEnablementRule = RoleManagementPolicyRule & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ruleType: "RoleManagementPolicyEnablementRule";
  /** The list of enabled rules. */
  enabledRules?: EnablementRules[];
};

/** The role management policy rule. */
export type RoleManagementPolicyExpirationRule = RoleManagementPolicyRule & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ruleType: "RoleManagementPolicyExpirationRule";
  /** The value indicating whether expiration is required. */
  isExpirationRequired?: boolean;
  /** The maximum duration of expiration in timespan. */
  maximumDuration?: string;
};

/** The role management policy rule. */
export type RoleManagementPolicyNotificationRule = RoleManagementPolicyRule & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  ruleType: "RoleManagementPolicyNotificationRule";
  /** The type of notification. */
  notificationType?: NotificationDeliveryMechanism;
  /** The notification level. */
  notificationLevel?: NotificationLevel;
  /** The recipient type. */
  recipientType?: RecipientType;
  /** The list notification recipients. */
  notificationRecipients?: string[];
  /** Its value determine if the notification need to be sent to the recipient type specified in policy rule. */
  isDefaultRecipientsEnabled?: boolean;
};

/** Known values of {@link AccessReviewScheduleDefinitionStatus} that the service accepts. */
export enum KnownAccessReviewScheduleDefinitionStatus {
  NotStarted = "NotStarted",
  InProgress = "InProgress",
  Completed = "Completed",
  Applied = "Applied",
  Initializing = "Initializing",
  Applying = "Applying",
  Completing = "Completing",
  Scheduled = "Scheduled",
  AutoReviewing = "AutoReviewing",
  AutoReviewed = "AutoReviewed",
  Starting = "Starting"
}

/**
 * Defines values for AccessReviewScheduleDefinitionStatus. \
 * {@link KnownAccessReviewScheduleDefinitionStatus} can be used interchangeably with AccessReviewScheduleDefinitionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted** \
 * **InProgress** \
 * **Completed** \
 * **Applied** \
 * **Initializing** \
 * **Applying** \
 * **Completing** \
 * **Scheduled** \
 * **AutoReviewing** \
 * **AutoReviewed** \
 * **Starting**
 */
export type AccessReviewScheduleDefinitionStatus = string;

/** Known values of {@link AccessReviewActorIdentityType} that the service accepts. */
export enum KnownAccessReviewActorIdentityType {
  User = "user",
  ServicePrincipal = "servicePrincipal"
}

/**
 * Defines values for AccessReviewActorIdentityType. \
 * {@link KnownAccessReviewActorIdentityType} can be used interchangeably with AccessReviewActorIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **servicePrincipal**
 */
export type AccessReviewActorIdentityType = string;

/** Known values of {@link DefaultDecisionType} that the service accepts. */
export enum KnownDefaultDecisionType {
  Approve = "Approve",
  Deny = "Deny",
  Recommendation = "Recommendation"
}

/**
 * Defines values for DefaultDecisionType. \
 * {@link KnownDefaultDecisionType} can be used interchangeably with DefaultDecisionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Approve** \
 * **Deny** \
 * **Recommendation**
 */
export type DefaultDecisionType = string;

/** Known values of {@link AccessReviewRecurrencePatternType} that the service accepts. */
export enum KnownAccessReviewRecurrencePatternType {
  Weekly = "weekly",
  AbsoluteMonthly = "absoluteMonthly"
}

/**
 * Defines values for AccessReviewRecurrencePatternType. \
 * {@link KnownAccessReviewRecurrencePatternType} can be used interchangeably with AccessReviewRecurrencePatternType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **weekly** \
 * **absoluteMonthly**
 */
export type AccessReviewRecurrencePatternType = string;

/** Known values of {@link AccessReviewRecurrenceRangeType} that the service accepts. */
export enum KnownAccessReviewRecurrenceRangeType {
  EndDate = "endDate",
  NoEnd = "noEnd",
  Numbered = "numbered"
}

/**
 * Defines values for AccessReviewRecurrenceRangeType. \
 * {@link KnownAccessReviewRecurrenceRangeType} can be used interchangeably with AccessReviewRecurrenceRangeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **endDate** \
 * **noEnd** \
 * **numbered**
 */
export type AccessReviewRecurrenceRangeType = string;

/** Known values of {@link AccessReviewScopePrincipalType} that the service accepts. */
export enum KnownAccessReviewScopePrincipalType {
  User = "user",
  ServicePrincipal = "servicePrincipal"
}

/**
 * Defines values for AccessReviewScopePrincipalType. \
 * {@link KnownAccessReviewScopePrincipalType} can be used interchangeably with AccessReviewScopePrincipalType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **servicePrincipal**
 */
export type AccessReviewScopePrincipalType = string;

/** Known values of {@link AccessReviewReviewerType} that the service accepts. */
export enum KnownAccessReviewReviewerType {
  User = "user",
  ServicePrincipal = "servicePrincipal"
}

/**
 * Defines values for AccessReviewReviewerType. \
 * {@link KnownAccessReviewReviewerType} can be used interchangeably with AccessReviewReviewerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **servicePrincipal**
 */
export type AccessReviewReviewerType = string;

/** Known values of {@link AccessReviewScheduleDefinitionReviewersType} that the service accepts. */
export enum KnownAccessReviewScheduleDefinitionReviewersType {
  Assigned = "Assigned",
  Self = "Self",
  Managers = "Managers"
}

/**
 * Defines values for AccessReviewScheduleDefinitionReviewersType. \
 * {@link KnownAccessReviewScheduleDefinitionReviewersType} can be used interchangeably with AccessReviewScheduleDefinitionReviewersType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Assigned** \
 * **Self** \
 * **Managers**
 */
export type AccessReviewScheduleDefinitionReviewersType = string;

/** Known values of {@link AccessReviewInstanceStatus} that the service accepts. */
export enum KnownAccessReviewInstanceStatus {
  NotStarted = "NotStarted",
  InProgress = "InProgress",
  Completed = "Completed",
  Applied = "Applied",
  Initializing = "Initializing",
  Applying = "Applying",
  Completing = "Completing",
  Scheduled = "Scheduled",
  AutoReviewing = "AutoReviewing",
  AutoReviewed = "AutoReviewed",
  Starting = "Starting"
}

/**
 * Defines values for AccessReviewInstanceStatus. \
 * {@link KnownAccessReviewInstanceStatus} can be used interchangeably with AccessReviewInstanceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted** \
 * **InProgress** \
 * **Completed** \
 * **Applied** \
 * **Initializing** \
 * **Applying** \
 * **Completing** \
 * **Scheduled** \
 * **AutoReviewing** \
 * **AutoReviewed** \
 * **Starting**
 */
export type AccessReviewInstanceStatus = string;

/** Known values of {@link DecisionTargetType} that the service accepts. */
export enum KnownDecisionTargetType {
  User = "user",
  ServicePrincipal = "servicePrincipal"
}

/**
 * Defines values for DecisionTargetType. \
 * {@link KnownDecisionTargetType} can be used interchangeably with DecisionTargetType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **servicePrincipal**
 */
export type DecisionTargetType = string;

/** Known values of {@link AccessRecommendationType} that the service accepts. */
export enum KnownAccessRecommendationType {
  Approve = "Approve",
  Deny = "Deny",
  NoInfoAvailable = "NoInfoAvailable"
}

/**
 * Defines values for AccessRecommendationType. \
 * {@link KnownAccessRecommendationType} can be used interchangeably with AccessRecommendationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Approve** \
 * **Deny** \
 * **NoInfoAvailable**
 */
export type AccessRecommendationType = string;

/** Known values of {@link AccessReviewResult} that the service accepts. */
export enum KnownAccessReviewResult {
  Approve = "Approve",
  Deny = "Deny",
  NotReviewed = "NotReviewed",
  DontKnow = "DontKnow",
  NotNotified = "NotNotified"
}

/**
 * Defines values for AccessReviewResult. \
 * {@link KnownAccessReviewResult} can be used interchangeably with AccessReviewResult,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Approve** \
 * **Deny** \
 * **NotReviewed** \
 * **DontKnow** \
 * **NotNotified**
 */
export type AccessReviewResult = string;

/** Known values of {@link AccessReviewApplyResult} that the service accepts. */
export enum KnownAccessReviewApplyResult {
  New = "New",
  Applying = "Applying",
  AppliedSuccessfully = "AppliedSuccessfully",
  AppliedWithUnknownFailure = "AppliedWithUnknownFailure",
  AppliedSuccessfullyButObjectNotFound = "AppliedSuccessfullyButObjectNotFound",
  ApplyNotSupported = "ApplyNotSupported"
}

/**
 * Defines values for AccessReviewApplyResult. \
 * {@link KnownAccessReviewApplyResult} can be used interchangeably with AccessReviewApplyResult,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **New** \
 * **Applying** \
 * **AppliedSuccessfully** \
 * **AppliedWithUnknownFailure** \
 * **AppliedSuccessfullyButObjectNotFound** \
 * **ApplyNotSupported**
 */
export type AccessReviewApplyResult = string;

/** Known values of {@link PrincipalType} that the service accepts. */
export enum KnownPrincipalType {
  User = "User",
  Group = "Group",
  ServicePrincipal = "ServicePrincipal",
  ForeignGroup = "ForeignGroup",
  Device = "Device"
}

/**
 * Defines values for PrincipalType. \
 * {@link KnownPrincipalType} can be used interchangeably with PrincipalType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Group** \
 * **ServicePrincipal** \
 * **ForeignGroup** \
 * **Device**
 */
export type PrincipalType = string;

/** Known values of {@link AssignmentType} that the service accepts. */
export enum KnownAssignmentType {
  Activated = "Activated",
  Assigned = "Assigned"
}

/**
 * Defines values for AssignmentType. \
 * {@link KnownAssignmentType} can be used interchangeably with AssignmentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Activated** \
 * **Assigned**
 */
export type AssignmentType = string;

/** Known values of {@link MemberType} that the service accepts. */
export enum KnownMemberType {
  Inherited = "Inherited",
  Direct = "Direct",
  Group = "Group"
}

/**
 * Defines values for MemberType. \
 * {@link KnownMemberType} can be used interchangeably with MemberType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inherited** \
 * **Direct** \
 * **Group**
 */
export type MemberType = string;

/** Known values of {@link Status} that the service accepts. */
export enum KnownStatus {
  Accepted = "Accepted",
  PendingEvaluation = "PendingEvaluation",
  Granted = "Granted",
  Denied = "Denied",
  PendingProvisioning = "PendingProvisioning",
  Provisioned = "Provisioned",
  PendingRevocation = "PendingRevocation",
  Revoked = "Revoked",
  Canceled = "Canceled",
  Failed = "Failed",
  PendingApprovalProvisioning = "PendingApprovalProvisioning",
  PendingApproval = "PendingApproval",
  FailedAsResourceIsLocked = "FailedAsResourceIsLocked",
  PendingAdminDecision = "PendingAdminDecision",
  AdminApproved = "AdminApproved",
  AdminDenied = "AdminDenied",
  TimedOut = "TimedOut",
  ProvisioningStarted = "ProvisioningStarted",
  Invalid = "Invalid",
  PendingScheduleCreation = "PendingScheduleCreation",
  ScheduleCreated = "ScheduleCreated",
  PendingExternalProvisioning = "PendingExternalProvisioning"
}

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **PendingEvaluation** \
 * **Granted** \
 * **Denied** \
 * **PendingProvisioning** \
 * **Provisioned** \
 * **PendingRevocation** \
 * **Revoked** \
 * **Canceled** \
 * **Failed** \
 * **PendingApprovalProvisioning** \
 * **PendingApproval** \
 * **FailedAsResourceIsLocked** \
 * **PendingAdminDecision** \
 * **AdminApproved** \
 * **AdminDenied** \
 * **TimedOut** \
 * **ProvisioningStarted** \
 * **Invalid** \
 * **PendingScheduleCreation** \
 * **ScheduleCreated** \
 * **PendingExternalProvisioning**
 */
export type Status = string;

/** Known values of {@link RequestType} that the service accepts. */
export enum KnownRequestType {
  AdminAssign = "AdminAssign",
  AdminRemove = "AdminRemove",
  AdminUpdate = "AdminUpdate",
  AdminExtend = "AdminExtend",
  AdminRenew = "AdminRenew",
  SelfActivate = "SelfActivate",
  SelfDeactivate = "SelfDeactivate",
  SelfExtend = "SelfExtend",
  SelfRenew = "SelfRenew"
}

/**
 * Defines values for RequestType. \
 * {@link KnownRequestType} can be used interchangeably with RequestType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AdminAssign** \
 * **AdminRemove** \
 * **AdminUpdate** \
 * **AdminExtend** \
 * **AdminRenew** \
 * **SelfActivate** \
 * **SelfDeactivate** \
 * **SelfExtend** \
 * **SelfRenew**
 */
export type RequestType = string;

/** Known values of {@link Type} that the service accepts. */
export enum KnownType {
  AfterDuration = "AfterDuration",
  AfterDateTime = "AfterDateTime",
  NoExpiration = "NoExpiration"
}

/**
 * Defines values for Type. \
 * {@link KnownType} can be used interchangeably with Type,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AfterDuration** \
 * **AfterDateTime** \
 * **NoExpiration**
 */
export type Type = string;

/** Known values of {@link RoleManagementPolicyRuleType} that the service accepts. */
export enum KnownRoleManagementPolicyRuleType {
  RoleManagementPolicyApprovalRule = "RoleManagementPolicyApprovalRule",
  RoleManagementPolicyAuthenticationContextRule = "RoleManagementPolicyAuthenticationContextRule",
  RoleManagementPolicyEnablementRule = "RoleManagementPolicyEnablementRule",
  RoleManagementPolicyExpirationRule = "RoleManagementPolicyExpirationRule",
  RoleManagementPolicyNotificationRule = "RoleManagementPolicyNotificationRule"
}

/**
 * Defines values for RoleManagementPolicyRuleType. \
 * {@link KnownRoleManagementPolicyRuleType} can be used interchangeably with RoleManagementPolicyRuleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RoleManagementPolicyApprovalRule** \
 * **RoleManagementPolicyAuthenticationContextRule** \
 * **RoleManagementPolicyEnablementRule** \
 * **RoleManagementPolicyExpirationRule** \
 * **RoleManagementPolicyNotificationRule**
 */
export type RoleManagementPolicyRuleType = string;

/** Known values of {@link ApprovalMode} that the service accepts. */
export enum KnownApprovalMode {
  SingleStage = "SingleStage",
  Serial = "Serial",
  Parallel = "Parallel",
  NoApproval = "NoApproval"
}

/**
 * Defines values for ApprovalMode. \
 * {@link KnownApprovalMode} can be used interchangeably with ApprovalMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SingleStage** \
 * **Serial** \
 * **Parallel** \
 * **NoApproval**
 */
export type ApprovalMode = string;

/** Known values of {@link UserType} that the service accepts. */
export enum KnownUserType {
  User = "User",
  Group = "Group"
}

/**
 * Defines values for UserType. \
 * {@link KnownUserType} can be used interchangeably with UserType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Group**
 */
export type UserType = string;

/** Known values of {@link EnablementRules} that the service accepts. */
export enum KnownEnablementRules {
  MultiFactorAuthentication = "MultiFactorAuthentication",
  Justification = "Justification",
  Ticketing = "Ticketing"
}

/**
 * Defines values for EnablementRules. \
 * {@link KnownEnablementRules} can be used interchangeably with EnablementRules,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MultiFactorAuthentication** \
 * **Justification** \
 * **Ticketing**
 */
export type EnablementRules = string;

/** Known values of {@link NotificationDeliveryMechanism} that the service accepts. */
export enum KnownNotificationDeliveryMechanism {
  Email = "Email"
}

/**
 * Defines values for NotificationDeliveryMechanism. \
 * {@link KnownNotificationDeliveryMechanism} can be used interchangeably with NotificationDeliveryMechanism,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Email**
 */
export type NotificationDeliveryMechanism = string;

/** Known values of {@link NotificationLevel} that the service accepts. */
export enum KnownNotificationLevel {
  None = "None",
  Critical = "Critical",
  All = "All"
}

/**
 * Defines values for NotificationLevel. \
 * {@link KnownNotificationLevel} can be used interchangeably with NotificationLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Critical** \
 * **All**
 */
export type NotificationLevel = string;

/** Known values of {@link RecipientType} that the service accepts. */
export enum KnownRecipientType {
  Requestor = "Requestor",
  Approver = "Approver",
  Admin = "Admin"
}

/**
 * Defines values for RecipientType. \
 * {@link KnownRecipientType} can be used interchangeably with RecipientType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Requestor** \
 * **Approver** \
 * **Admin**
 */
export type RecipientType = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface AccessReviewScheduleDefinitionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AccessReviewScheduleDefinitionsListResponse = AccessReviewScheduleDefinitionListResult;

/** Optional parameters. */
export interface AccessReviewScheduleDefinitionsGetByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getById operation. */
export type AccessReviewScheduleDefinitionsGetByIdResponse = AccessReviewScheduleDefinition;

/** Optional parameters. */
export interface AccessReviewScheduleDefinitionsDeleteByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AccessReviewScheduleDefinitionsCreateOrUpdateByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdateById operation. */
export type AccessReviewScheduleDefinitionsCreateOrUpdateByIdResponse = AccessReviewScheduleDefinition;

/** Optional parameters. */
export interface AccessReviewScheduleDefinitionsStopOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AccessReviewScheduleDefinitionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AccessReviewScheduleDefinitionsListNextResponse = AccessReviewScheduleDefinitionListResult;

/** Optional parameters. */
export interface AccessReviewInstancesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AccessReviewInstancesListResponse = AccessReviewInstanceListResult;

/** Optional parameters. */
export interface AccessReviewInstancesGetByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getById operation. */
export type AccessReviewInstancesGetByIdResponse = AccessReviewInstance;

/** Optional parameters. */
export interface AccessReviewInstancesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AccessReviewInstancesListNextResponse = AccessReviewInstanceListResult;

/** Optional parameters. */
export interface AccessReviewInstanceStopOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AccessReviewInstanceResetDecisionsOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AccessReviewInstanceApplyDecisionsOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AccessReviewInstanceSendRemindersOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AccessReviewInstanceAcceptRecommendationsOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AccessReviewInstanceDecisionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AccessReviewInstanceDecisionsListResponse = AccessReviewDecisionListResult;

/** Optional parameters. */
export interface AccessReviewInstanceDecisionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AccessReviewInstanceDecisionsListNextResponse = AccessReviewDecisionListResult;

/** Optional parameters. */
export interface AccessReviewDefaultSettingsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AccessReviewDefaultSettingsGetResponse = AccessReviewDefaultSettings;

/** Optional parameters. */
export interface AccessReviewDefaultSettingsPutOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the put operation. */
export type AccessReviewDefaultSettingsPutResponse = AccessReviewDefaultSettings;

/** Optional parameters. */
export interface AccessReviewScheduleDefinitionsAssignedForMyApprovalListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AccessReviewScheduleDefinitionsAssignedForMyApprovalListResponse = AccessReviewScheduleDefinitionListResult;

/** Optional parameters. */
export interface AccessReviewScheduleDefinitionsAssignedForMyApprovalListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AccessReviewScheduleDefinitionsAssignedForMyApprovalListNextResponse = AccessReviewScheduleDefinitionListResult;

/** Optional parameters. */
export interface AccessReviewInstancesAssignedForMyApprovalListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AccessReviewInstancesAssignedForMyApprovalListResponse = AccessReviewInstanceListResult;

/** Optional parameters. */
export interface AccessReviewInstancesAssignedForMyApprovalGetByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getById operation. */
export type AccessReviewInstancesAssignedForMyApprovalGetByIdResponse = AccessReviewInstance;

/** Optional parameters. */
export interface AccessReviewInstancesAssignedForMyApprovalListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AccessReviewInstancesAssignedForMyApprovalListNextResponse = AccessReviewInstanceListResult;

/** Optional parameters. */
export interface AccessReviewInstanceMyDecisionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AccessReviewInstanceMyDecisionsListResponse = AccessReviewDecisionListResult;

/** Optional parameters. */
export interface AccessReviewInstanceMyDecisionsGetByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getById operation. */
export type AccessReviewInstanceMyDecisionsGetByIdResponse = AccessReviewDecision;

/** Optional parameters. */
export interface AccessReviewInstanceMyDecisionsPatchOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the patch operation. */
export type AccessReviewInstanceMyDecisionsPatchResponse = AccessReviewDecision;

/** Optional parameters. */
export interface AccessReviewInstanceMyDecisionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AccessReviewInstanceMyDecisionsListNextResponse = AccessReviewDecisionListResult;

/** Optional parameters. */
export interface DenyAssignmentsListForResourceOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. */
  filter?: string;
}

/** Contains response data for the listForResource operation. */
export type DenyAssignmentsListForResourceResponse = DenyAssignmentListResult;

/** Optional parameters. */
export interface DenyAssignmentsListForResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. */
  filter?: string;
}

/** Contains response data for the listForResourceGroup operation. */
export type DenyAssignmentsListForResourceGroupResponse = DenyAssignmentListResult;

/** Optional parameters. */
export interface DenyAssignmentsListOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type DenyAssignmentsListResponse = DenyAssignmentListResult;

/** Optional parameters. */
export interface DenyAssignmentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DenyAssignmentsGetResponse = DenyAssignment;

/** Optional parameters. */
export interface DenyAssignmentsGetByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getById operation. */
export type DenyAssignmentsGetByIdResponse = DenyAssignment;

/** Optional parameters. */
export interface DenyAssignmentsListForScopeOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. */
  filter?: string;
}

/** Contains response data for the listForScope operation. */
export type DenyAssignmentsListForScopeResponse = DenyAssignmentListResult;

/** Optional parameters. */
export interface DenyAssignmentsListForResourceNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. */
  filter?: string;
}

/** Contains response data for the listForResourceNext operation. */
export type DenyAssignmentsListForResourceNextResponse = DenyAssignmentListResult;

/** Optional parameters. */
export interface DenyAssignmentsListForResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. */
  filter?: string;
}

/** Contains response data for the listForResourceGroupNext operation. */
export type DenyAssignmentsListForResourceGroupNextResponse = DenyAssignmentListResult;

/** Optional parameters. */
export interface DenyAssignmentsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. */
  filter?: string;
}

/** Contains response data for the listNext operation. */
export type DenyAssignmentsListNextResponse = DenyAssignmentListResult;

/** Optional parameters. */
export interface DenyAssignmentsListForScopeNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. */
  filter?: string;
}

/** Contains response data for the listForScopeNext operation. */
export type DenyAssignmentsListForScopeNextResponse = DenyAssignmentListResult;

/** Optional parameters. */
export interface ProviderOperationsMetadataGetOptionalParams
  extends coreClient.OperationOptions {
  /** Specifies whether to expand the values. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ProviderOperationsMetadataGetResponse = ProviderOperationsMetadata;

/** Optional parameters. */
export interface ProviderOperationsMetadataListOptionalParams
  extends coreClient.OperationOptions {
  /** Specifies whether to expand the values. */
  expand?: string;
}

/** Contains response data for the list operation. */
export type ProviderOperationsMetadataListResponse = ProviderOperationsMetadataListResult;

/** Optional parameters. */
export interface ProviderOperationsMetadataListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Specifies whether to expand the values. */
  expand?: string;
}

/** Contains response data for the listNext operation. */
export type ProviderOperationsMetadataListNextResponse = ProviderOperationsMetadataListResult;

/** Optional parameters. */
export interface RoleAssignmentsListForSubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. */
  filter?: string;
  /** Tenant ID for cross-tenant request */
  tenantId?: string;
}

/** Contains response data for the listForSubscription operation. */
export type RoleAssignmentsListForSubscriptionResponse = RoleAssignmentListResult;

/** Optional parameters. */
export interface RoleAssignmentsListForResourceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. */
  filter?: string;
  /** Tenant ID for cross-tenant request */
  tenantId?: string;
}

/** Contains response data for the listForResourceGroup operation. */
export type RoleAssignmentsListForResourceGroupResponse = RoleAssignmentListResult;

/** Optional parameters. */
export interface RoleAssignmentsListForResourceOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. */
  filter?: string;
  /** Tenant ID for cross-tenant request */
  tenantId?: string;
}

/** Contains response data for the listForResource operation. */
export type RoleAssignmentsListForResourceResponse = RoleAssignmentListResult;

/** Optional parameters. */
export interface RoleAssignmentsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Tenant ID for cross-tenant request */
  tenantId?: string;
}

/** Contains response data for the get operation. */
export type RoleAssignmentsGetResponse = RoleAssignment;

/** Optional parameters. */
export interface RoleAssignmentsCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type RoleAssignmentsCreateResponse = RoleAssignment;

/** Optional parameters. */
export interface RoleAssignmentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Tenant ID for cross-tenant request */
  tenantId?: string;
}

/** Contains response data for the delete operation. */
export type RoleAssignmentsDeleteResponse = RoleAssignment;

/** Optional parameters. */
export interface RoleAssignmentsValidateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the validate operation. */
export type RoleAssignmentsValidateResponse = ValidationResponse;

/** Optional parameters. */
export interface RoleAssignmentsListForScopeOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. */
  filter?: string;
  /** Tenant ID for cross-tenant request */
  tenantId?: string;
}

/** Contains response data for the listForScope operation. */
export type RoleAssignmentsListForScopeResponse = RoleAssignmentListResult;

/** Optional parameters. */
export interface RoleAssignmentsGetByIdOptionalParams
  extends coreClient.OperationOptions {
  /** Tenant ID for cross-tenant request */
  tenantId?: string;
}

/** Contains response data for the getById operation. */
export type RoleAssignmentsGetByIdResponse = RoleAssignment;

/** Optional parameters. */
export interface RoleAssignmentsCreateByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createById operation. */
export type RoleAssignmentsCreateByIdResponse = RoleAssignment;

/** Optional parameters. */
export interface RoleAssignmentsDeleteByIdOptionalParams
  extends coreClient.OperationOptions {
  /** Tenant ID for cross-tenant request */
  tenantId?: string;
}

/** Contains response data for the deleteById operation. */
export type RoleAssignmentsDeleteByIdResponse = RoleAssignment;

/** Optional parameters. */
export interface RoleAssignmentsValidateByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the validateById operation. */
export type RoleAssignmentsValidateByIdResponse = ValidationResponse;

/** Optional parameters. */
export interface RoleAssignmentsListForSubscriptionNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. */
  filter?: string;
  /** Tenant ID for cross-tenant request */
  tenantId?: string;
}

/** Contains response data for the listForSubscriptionNext operation. */
export type RoleAssignmentsListForSubscriptionNextResponse = RoleAssignmentListResult;

/** Optional parameters. */
export interface RoleAssignmentsListForResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. */
  filter?: string;
  /** Tenant ID for cross-tenant request */
  tenantId?: string;
}

/** Contains response data for the listForResourceGroupNext operation. */
export type RoleAssignmentsListForResourceGroupNextResponse = RoleAssignmentListResult;

/** Optional parameters. */
export interface RoleAssignmentsListForResourceNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. */
  filter?: string;
  /** Tenant ID for cross-tenant request */
  tenantId?: string;
}

/** Contains response data for the listForResourceNext operation. */
export type RoleAssignmentsListForResourceNextResponse = RoleAssignmentListResult;

/** Optional parameters. */
export interface RoleAssignmentsListForScopeNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. */
  filter?: string;
  /** Tenant ID for cross-tenant request */
  tenantId?: string;
}

/** Contains response data for the listForScopeNext operation. */
export type RoleAssignmentsListForScopeNextResponse = RoleAssignmentListResult;

/** Optional parameters. */
export interface PermissionsListForResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForResourceGroup operation. */
export type PermissionsListForResourceGroupResponse = PermissionGetResult;

/** Optional parameters. */
export interface PermissionsListForResourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForResource operation. */
export type PermissionsListForResourceResponse = PermissionGetResult;

/** Optional parameters. */
export interface PermissionsListForResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForResourceGroupNext operation. */
export type PermissionsListForResourceGroupNextResponse = PermissionGetResult;

/** Optional parameters. */
export interface PermissionsListForResourceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForResourceNext operation. */
export type PermissionsListForResourceNextResponse = PermissionGetResult;

/** Optional parameters. */
export interface RoleDefinitionsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the delete operation. */
export type RoleDefinitionsDeleteResponse = RoleDefinition;

/** Optional parameters. */
export interface RoleDefinitionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoleDefinitionsGetResponse = RoleDefinition;

/** Optional parameters. */
export interface RoleDefinitionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type RoleDefinitionsCreateOrUpdateResponse = RoleDefinition;

/** Optional parameters. */
export interface RoleDefinitionsListOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type RoleDefinitionsListResponse = RoleDefinitionListResult;

/** Optional parameters. */
export interface RoleDefinitionsGetByIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getById operation. */
export type RoleDefinitionsGetByIdResponse = RoleDefinition;

/** Optional parameters. */
export interface RoleDefinitionsListNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well. */
  filter?: string;
}

/** Contains response data for the listNext operation. */
export type RoleDefinitionsListNextResponse = RoleDefinitionListResult;

/** Optional parameters. */
export interface RoleAssignmentMetricsGetMetricsForSubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getMetricsForSubscription operation. */
export type RoleAssignmentMetricsGetMetricsForSubscriptionResponse = RoleAssignmentMetricsResult;

/** Optional parameters. */
export interface EligibleChildResourcesGetOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=resourceType+eq+'Subscription' to filter on only resource of type = 'Subscription'. Use $filter=resourceType+eq+'subscription'+or+resourceType+eq+'resourcegroup' to filter on resource of type = 'Subscription' or 'ResourceGroup' */
  filter?: string;
}

/** Contains response data for the get operation. */
export type EligibleChildResourcesGetResponse = EligibleChildResourcesListResult;

/** Optional parameters. */
export interface EligibleChildResourcesGetNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=resourceType+eq+'Subscription' to filter on only resource of type = 'Subscription'. Use $filter=resourceType+eq+'subscription'+or+resourceType+eq+'resourcegroup' to filter on resource of type = 'Subscription' or 'ResourceGroup' */
  filter?: string;
}

/** Contains response data for the getNext operation. */
export type EligibleChildResourcesGetNextResponse = EligibleChildResourcesListResult;

/** Optional parameters. */
export interface RoleAssignmentSchedulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoleAssignmentSchedulesGetResponse = RoleAssignmentSchedule;

/** Optional parameters. */
export interface RoleAssignmentSchedulesListForScopeOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignment schedules at or above the scope. Use $filter=principalId eq {id} to return all role assignment schedules at, above or below the scope for the specified principal. Use $filter=assignedTo('{userId}') to return all role assignment schedules for the current user. Use $filter=asTarget() to return all role assignment schedules created for the current user. */
  filter?: string;
}

/** Contains response data for the listForScope operation. */
export type RoleAssignmentSchedulesListForScopeResponse = RoleAssignmentScheduleListResult;

/** Optional parameters. */
export interface RoleAssignmentSchedulesListForScopeNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignment schedules at or above the scope. Use $filter=principalId eq {id} to return all role assignment schedules at, above or below the scope for the specified principal. Use $filter=assignedTo('{userId}') to return all role assignment schedules for the current user. Use $filter=asTarget() to return all role assignment schedules created for the current user. */
  filter?: string;
}

/** Contains response data for the listForScopeNext operation. */
export type RoleAssignmentSchedulesListForScopeNextResponse = RoleAssignmentScheduleListResult;

/** Optional parameters. */
export interface RoleAssignmentScheduleInstancesListForScopeOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignment schedules at or above the scope. Use $filter=principalId eq {id} to return all role assignment schedules at, above or below the scope for the specified principal.  Use $filter=assignedTo('{userId}') to return all role assignment schedule instances for the user. Use $filter=asTarget() to return all role assignment schedule instances created for the current user. */
  filter?: string;
}

/** Contains response data for the listForScope operation. */
export type RoleAssignmentScheduleInstancesListForScopeResponse = RoleAssignmentScheduleInstanceListResult;

/** Optional parameters. */
export interface RoleAssignmentScheduleInstancesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoleAssignmentScheduleInstancesGetResponse = RoleAssignmentScheduleInstance;

/** Optional parameters. */
export interface RoleAssignmentScheduleInstancesListForScopeNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignment schedules at or above the scope. Use $filter=principalId eq {id} to return all role assignment schedules at, above or below the scope for the specified principal.  Use $filter=assignedTo('{userId}') to return all role assignment schedule instances for the user. Use $filter=asTarget() to return all role assignment schedule instances created for the current user. */
  filter?: string;
}

/** Contains response data for the listForScopeNext operation. */
export type RoleAssignmentScheduleInstancesListForScopeNextResponse = RoleAssignmentScheduleInstanceListResult;

/** Optional parameters. */
export interface RoleAssignmentScheduleRequestsCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type RoleAssignmentScheduleRequestsCreateResponse = RoleAssignmentScheduleRequest;

/** Optional parameters. */
export interface RoleAssignmentScheduleRequestsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoleAssignmentScheduleRequestsGetResponse = RoleAssignmentScheduleRequest;

/** Optional parameters. */
export interface RoleAssignmentScheduleRequestsListForScopeOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignment schedule requests at or above the scope. Use $filter=principalId eq {id} to return all role assignment schedule requests at, above or below the scope for the specified principal. Use $filter=asRequestor() to return all role assignment schedule requests requested by the current user. Use $filter=asTarget() to return all role assignment schedule requests created for the current user. Use $filter=asApprover() to return all role assignment schedule requests where the current user is an approver. */
  filter?: string;
}

/** Contains response data for the listForScope operation. */
export type RoleAssignmentScheduleRequestsListForScopeResponse = RoleAssignmentScheduleRequestListResult;

/** Optional parameters. */
export interface RoleAssignmentScheduleRequestsCancelOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface RoleAssignmentScheduleRequestsListForScopeNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignment schedule requests at or above the scope. Use $filter=principalId eq {id} to return all role assignment schedule requests at, above or below the scope for the specified principal. Use $filter=asRequestor() to return all role assignment schedule requests requested by the current user. Use $filter=asTarget() to return all role assignment schedule requests created for the current user. Use $filter=asApprover() to return all role assignment schedule requests where the current user is an approver. */
  filter?: string;
}

/** Contains response data for the listForScopeNext operation. */
export type RoleAssignmentScheduleRequestsListForScopeNextResponse = RoleAssignmentScheduleRequestListResult;

/** Optional parameters. */
export interface RoleEligibilitySchedulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoleEligibilitySchedulesGetResponse = RoleEligibilitySchedule;

/** Optional parameters. */
export interface RoleEligibilitySchedulesListForScopeOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role eligibility schedules at or above the scope. Use $filter=principalId eq {id} to return all role eligibility schedules at, above or below the scope for the specified principal. Use $filter=assignedTo('{userId}') to return all role eligibility schedules for the user. Use $filter=asTarget() to return all role eligibility schedules created for the current user. */
  filter?: string;
}

/** Contains response data for the listForScope operation. */
export type RoleEligibilitySchedulesListForScopeResponse = RoleEligibilityScheduleListResult;

/** Optional parameters. */
export interface RoleEligibilitySchedulesListForScopeNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role eligibility schedules at or above the scope. Use $filter=principalId eq {id} to return all role eligibility schedules at, above or below the scope for the specified principal. Use $filter=assignedTo('{userId}') to return all role eligibility schedules for the user. Use $filter=asTarget() to return all role eligibility schedules created for the current user. */
  filter?: string;
}

/** Contains response data for the listForScopeNext operation. */
export type RoleEligibilitySchedulesListForScopeNextResponse = RoleEligibilityScheduleListResult;

/** Optional parameters. */
export interface RoleEligibilityScheduleInstancesListForScopeOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignment schedules at or above the scope. Use $filter=principalId eq {id} to return all role assignment schedules at, above or below the scope for the specified principal. Use $filter=assignedTo('{userId}') to return all role eligibility schedules for the user. Use $filter=asTarget() to return all role eligibility schedules created for the current user. */
  filter?: string;
}

/** Contains response data for the listForScope operation. */
export type RoleEligibilityScheduleInstancesListForScopeResponse = RoleEligibilityScheduleInstanceListResult;

/** Optional parameters. */
export interface RoleEligibilityScheduleInstancesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoleEligibilityScheduleInstancesGetResponse = RoleEligibilityScheduleInstance;

/** Optional parameters. */
export interface RoleEligibilityScheduleInstancesListForScopeNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role assignment schedules at or above the scope. Use $filter=principalId eq {id} to return all role assignment schedules at, above or below the scope for the specified principal. Use $filter=assignedTo('{userId}') to return all role eligibility schedules for the user. Use $filter=asTarget() to return all role eligibility schedules created for the current user. */
  filter?: string;
}

/** Contains response data for the listForScopeNext operation. */
export type RoleEligibilityScheduleInstancesListForScopeNextResponse = RoleEligibilityScheduleInstanceListResult;

/** Optional parameters. */
export interface RoleEligibilityScheduleRequestsCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type RoleEligibilityScheduleRequestsCreateResponse = RoleEligibilityScheduleRequest;

/** Optional parameters. */
export interface RoleEligibilityScheduleRequestsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoleEligibilityScheduleRequestsGetResponse = RoleEligibilityScheduleRequest;

/** Optional parameters. */
export interface RoleEligibilityScheduleRequestsListForScopeOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role eligibility schedule requests at or above the scope. Use $filter=principalId eq {id} to return all role eligibility schedule requests at, above or below the scope for the specified principal. Use $filter=asRequestor() to return all role eligibility schedule requests requested by the current user. Use $filter=asTarget() to return all role eligibility schedule requests created for the current user. Use $filter=asApprover() to return all role eligibility schedule requests where the current user is an approver. */
  filter?: string;
}

/** Contains response data for the listForScope operation. */
export type RoleEligibilityScheduleRequestsListForScopeResponse = RoleEligibilityScheduleRequestListResult;

/** Optional parameters. */
export interface RoleEligibilityScheduleRequestsCancelOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface RoleEligibilityScheduleRequestsListForScopeNextOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply on the operation. Use $filter=atScope() to return all role eligibility schedule requests at or above the scope. Use $filter=principalId eq {id} to return all role eligibility schedule requests at, above or below the scope for the specified principal. Use $filter=asRequestor() to return all role eligibility schedule requests requested by the current user. Use $filter=asTarget() to return all role eligibility schedule requests created for the current user. Use $filter=asApprover() to return all role eligibility schedule requests where the current user is an approver. */
  filter?: string;
}

/** Contains response data for the listForScopeNext operation. */
export type RoleEligibilityScheduleRequestsListForScopeNextResponse = RoleEligibilityScheduleRequestListResult;

/** Optional parameters. */
export interface RoleManagementPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoleManagementPoliciesGetResponse = RoleManagementPolicy;

/** Optional parameters. */
export interface RoleManagementPoliciesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type RoleManagementPoliciesUpdateResponse = RoleManagementPolicy;

/** Optional parameters. */
export interface RoleManagementPoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface RoleManagementPoliciesListForScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForScope operation. */
export type RoleManagementPoliciesListForScopeResponse = RoleManagementPolicyListResult;

/** Optional parameters. */
export interface RoleManagementPoliciesListForScopeNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForScopeNext operation. */
export type RoleManagementPoliciesListForScopeNextResponse = RoleManagementPolicyListResult;

/** Optional parameters. */
export interface RoleManagementPolicyAssignmentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoleManagementPolicyAssignmentsGetResponse = RoleManagementPolicyAssignment;

/** Optional parameters. */
export interface RoleManagementPolicyAssignmentsCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type RoleManagementPolicyAssignmentsCreateResponse = RoleManagementPolicyAssignment;

/** Optional parameters. */
export interface RoleManagementPolicyAssignmentsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface RoleManagementPolicyAssignmentsListForScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForScope operation. */
export type RoleManagementPolicyAssignmentsListForScopeResponse = RoleManagementPolicyAssignmentListResult;

/** Optional parameters. */
export interface RoleManagementPolicyAssignmentsListForScopeNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listForScopeNext operation. */
export type RoleManagementPolicyAssignmentsListForScopeNextResponse = RoleManagementPolicyAssignmentListResult;

/** Optional parameters. */
export interface AuthorizationManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
