/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { NameAvailability } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftVoiceServices } from "../microsoftVoiceServices";
import {
  CheckNameAvailabilityRequest,
  NameAvailabilityCheckLocalOptionalParams,
  NameAvailabilityCheckLocalResponse
} from "../models";

/** Class containing NameAvailability operations. */
export class NameAvailabilityImpl implements NameAvailability {
  private readonly client: MicrosoftVoiceServices;

  /**
   * Initialize a new instance of the class NameAvailability class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftVoiceServices) {
    this.client = client;
  }

  /**
   * Check whether the resource name is available in the given region.
   * @param location The location in which uniqueness will be verified.
   * @param body The check availability request body.
   * @param options The options parameters.
   */
  checkLocal(
    location: string,
    body: CheckNameAvailabilityRequest,
    options?: NameAvailabilityCheckLocalOptionalParams
  ): Promise<NameAvailabilityCheckLocalResponse> {
    return this.client.sendOperationRequest(
      { location, body, options },
      checkLocalOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkLocalOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.VoiceServices/locations/{location}/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
