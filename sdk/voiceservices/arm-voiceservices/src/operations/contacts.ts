/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Contacts } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftVoiceServices } from "../microsoftVoiceServices";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Contact,
  ContactsListByCommunicationsGatewayNextOptionalParams,
  ContactsListByCommunicationsGatewayOptionalParams,
  ContactsListByCommunicationsGatewayResponse,
  ContactsGetOptionalParams,
  ContactsGetResponse,
  ContactsCreateOrUpdateOptionalParams,
  ContactsCreateOrUpdateResponse,
  ContactsDeleteOptionalParams,
  ContactUpdate,
  ContactsUpdateOptionalParams,
  ContactsUpdateResponse,
  ContactsListByCommunicationsGatewayNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Contacts operations. */
export class ContactsImpl implements Contacts {
  private readonly client: MicrosoftVoiceServices;

  /**
   * Initialize a new instance of the class Contacts class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftVoiceServices) {
    this.client = client;
  }

  /**
   * List Contact resources by CommunicationsGateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param options The options parameters.
   */
  public listByCommunicationsGateway(
    resourceGroupName: string,
    communicationsGatewayName: string,
    options?: ContactsListByCommunicationsGatewayOptionalParams
  ): PagedAsyncIterableIterator<Contact> {
    const iter = this.listByCommunicationsGatewayPagingAll(
      resourceGroupName,
      communicationsGatewayName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByCommunicationsGatewayPagingPage(
          resourceGroupName,
          communicationsGatewayName,
          options,
          settings
        );
      }
    };
  }

  private async *listByCommunicationsGatewayPagingPage(
    resourceGroupName: string,
    communicationsGatewayName: string,
    options?: ContactsListByCommunicationsGatewayOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Contact[]> {
    let result: ContactsListByCommunicationsGatewayResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByCommunicationsGateway(
        resourceGroupName,
        communicationsGatewayName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByCommunicationsGatewayNext(
        resourceGroupName,
        communicationsGatewayName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByCommunicationsGatewayPagingAll(
    resourceGroupName: string,
    communicationsGatewayName: string,
    options?: ContactsListByCommunicationsGatewayOptionalParams
  ): AsyncIterableIterator<Contact> {
    for await (const page of this.listByCommunicationsGatewayPagingPage(
      resourceGroupName,
      communicationsGatewayName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List Contact resources by CommunicationsGateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param options The options parameters.
   */
  private _listByCommunicationsGateway(
    resourceGroupName: string,
    communicationsGatewayName: string,
    options?: ContactsListByCommunicationsGatewayOptionalParams
  ): Promise<ContactsListByCommunicationsGatewayResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, communicationsGatewayName, options },
      listByCommunicationsGatewayOperationSpec
    );
  }

  /**
   * Get a Contact
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param contactName Unique identifier for this contact
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    communicationsGatewayName: string,
    contactName: string,
    options?: ContactsGetOptionalParams
  ): Promise<ContactsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, communicationsGatewayName, contactName, options },
      getOperationSpec
    );
  }

  /**
   * Create a Contact
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param contactName Unique identifier for this contact
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    communicationsGatewayName: string,
    contactName: string,
    resource: Contact,
    options?: ContactsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ContactsCreateOrUpdateResponse>,
      ContactsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ContactsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        communicationsGatewayName,
        contactName,
        resource,
        options
      },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a Contact
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param contactName Unique identifier for this contact
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    communicationsGatewayName: string,
    contactName: string,
    resource: Contact,
    options?: ContactsCreateOrUpdateOptionalParams
  ): Promise<ContactsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      communicationsGatewayName,
      contactName,
      resource,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a Contact
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param contactName Unique identifier for this contact
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    communicationsGatewayName: string,
    contactName: string,
    options?: ContactsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, communicationsGatewayName, contactName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a Contact
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param contactName Unique identifier for this contact
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    communicationsGatewayName: string,
    contactName: string,
    options?: ContactsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      communicationsGatewayName,
      contactName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a Contact
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param contactName Unique identifier for this contact
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    communicationsGatewayName: string,
    contactName: string,
    properties: ContactUpdate,
    options?: ContactsUpdateOptionalParams
  ): Promise<ContactsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        communicationsGatewayName,
        contactName,
        properties,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * ListByCommunicationsGatewayNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param nextLink The nextLink from the previous successful call to the ListByCommunicationsGateway
   *                 method.
   * @param options The options parameters.
   */
  private _listByCommunicationsGatewayNext(
    resourceGroupName: string,
    communicationsGatewayName: string,
    nextLink: string,
    options?: ContactsListByCommunicationsGatewayNextOptionalParams
  ): Promise<ContactsListByCommunicationsGatewayNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, communicationsGatewayName, nextLink, options },
      listByCommunicationsGatewayNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByCommunicationsGatewayOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VoiceServices/communicationsGateways/{communicationsGatewayName}/contacts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContactListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationsGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VoiceServices/communicationsGateways/{communicationsGatewayName}/contacts/{contactName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Contact
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationsGatewayName,
    Parameters.contactName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VoiceServices/communicationsGateways/{communicationsGatewayName}/contacts/{contactName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Contact
    },
    201: {
      bodyMapper: Mappers.Contact
    },
    202: {
      bodyMapper: Mappers.Contact
    },
    204: {
      bodyMapper: Mappers.Contact
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationsGatewayName,
    Parameters.contactName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VoiceServices/communicationsGateways/{communicationsGatewayName}/contacts/{contactName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationsGatewayName,
    Parameters.contactName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VoiceServices/communicationsGateways/{communicationsGatewayName}/contacts/{contactName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Contact
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationsGatewayName,
    Parameters.contactName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByCommunicationsGatewayNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContactListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationsGatewayName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
