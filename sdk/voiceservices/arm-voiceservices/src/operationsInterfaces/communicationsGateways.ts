/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  CommunicationsGateway,
  CommunicationsGatewaysListBySubscriptionOptionalParams,
  CommunicationsGatewaysListByResourceGroupOptionalParams,
  CommunicationsGatewaysGetOptionalParams,
  CommunicationsGatewaysGetResponse,
  CommunicationsGatewaysCreateOrUpdateOptionalParams,
  CommunicationsGatewaysCreateOrUpdateResponse,
  CommunicationsGatewaysDeleteOptionalParams,
  CommunicationsGatewayUpdate,
  CommunicationsGatewaysUpdateOptionalParams,
  CommunicationsGatewaysUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a CommunicationsGateways. */
export interface CommunicationsGateways {
  /**
   * List CommunicationsGateway resources by subscription ID
   * @param options The options parameters.
   */
  listBySubscription(
    options?: CommunicationsGatewaysListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<CommunicationsGateway>;
  /**
   * List CommunicationsGateway resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: CommunicationsGatewaysListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<CommunicationsGateway>;
  /**
   * Get a CommunicationsGateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    communicationsGatewayName: string,
    options?: CommunicationsGatewaysGetOptionalParams
  ): Promise<CommunicationsGatewaysGetResponse>;
  /**
   * Create a CommunicationsGateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    communicationsGatewayName: string,
    resource: CommunicationsGateway,
    options?: CommunicationsGatewaysCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CommunicationsGatewaysCreateOrUpdateResponse>,
      CommunicationsGatewaysCreateOrUpdateResponse
    >
  >;
  /**
   * Create a CommunicationsGateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    communicationsGatewayName: string,
    resource: CommunicationsGateway,
    options?: CommunicationsGatewaysCreateOrUpdateOptionalParams
  ): Promise<CommunicationsGatewaysCreateOrUpdateResponse>;
  /**
   * Delete a CommunicationsGateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    communicationsGatewayName: string,
    options?: CommunicationsGatewaysDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete a CommunicationsGateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    communicationsGatewayName: string,
    options?: CommunicationsGatewaysDeleteOptionalParams
  ): Promise<void>;
  /**
   * Update a CommunicationsGateway
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationsGatewayName Unique identifier for this deployment
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    communicationsGatewayName: string,
    properties: CommunicationsGatewayUpdate,
    options?: CommunicationsGatewaysUpdateOptionalParams
  ): Promise<CommunicationsGatewaysUpdateResponse>;
}
