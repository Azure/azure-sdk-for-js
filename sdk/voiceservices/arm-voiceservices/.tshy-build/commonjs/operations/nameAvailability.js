"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NameAvailabilityImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing NameAvailability operations. */
class NameAvailabilityImpl {
    /**
     * Initialize a new instance of the class NameAvailability class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Check whether the resource name is available in the given region.
     * @param location The location in which uniqueness will be verified.
     * @param body The check availability request body.
     * @param options The options parameters.
     */
    checkLocal(location, body, options) {
        return this.client.sendOperationRequest({ location, body, options }, checkLocalOperationSpec);
    }
}
exports.NameAvailabilityImpl = NameAvailabilityImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const checkLocalOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.VoiceServices/locations/{location}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckNameAvailabilityResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.body,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=nameAvailability.js.map