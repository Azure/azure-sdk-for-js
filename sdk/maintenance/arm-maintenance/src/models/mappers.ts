/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ListMaintenanceConfigurationsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListMaintenanceConfigurationsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaintenanceConfiguration"
            }
          }
        }
      }
    }
  }
};

export const InputPatchConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InputPatchConfiguration",
    modelProperties: {
      rebootSetting: {
        defaultValue: "IfRequired",
        serializedName: "rebootSetting",
        type: {
          name: "String"
        }
      },
      windowsParameters: {
        serializedName: "windowsParameters",
        type: {
          name: "Composite",
          className: "InputWindowsParameters"
        }
      },
      linuxParameters: {
        serializedName: "linuxParameters",
        type: {
          name: "Composite",
          className: "InputLinuxParameters"
        }
      }
    }
  }
};

export const InputWindowsParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InputWindowsParameters",
    modelProperties: {
      kbNumbersToExclude: {
        serializedName: "kbNumbersToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      kbNumbersToInclude: {
        serializedName: "kbNumbersToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      classificationsToInclude: {
        serializedName: "classificationsToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      excludeKbsRequiringReboot: {
        serializedName: "excludeKbsRequiringReboot",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const InputLinuxParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InputLinuxParameters",
    modelProperties: {
      packageNameMasksToExclude: {
        serializedName: "packageNameMasksToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      packageNameMasksToInclude: {
        serializedName: "packageNameMasksToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      classificationsToInclude: {
        serializedName: "classificationsToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MaintenanceError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      }
    }
  }
};

export const ErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConfigurationAssignmentFilterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationAssignmentFilterProperties",
    modelProperties: {
      resourceTypes: {
        serializedName: "resourceTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      resourceGroups: {
        serializedName: "resourceGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      osTypes: {
        serializedName: "osTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      tagSettings: {
        serializedName: "tagSettings",
        type: {
          name: "Composite",
          className: "TagSettingsProperties"
        }
      }
    }
  }
};

export const TagSettingsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagSettingsProperties",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      },
      filterOperator: {
        serializedName: "filterOperator",
        type: {
          name: "Enum",
          allowedValues: ["All", "Any"]
        }
      }
    }
  }
};

export const ListConfigurationAssignmentsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListConfigurationAssignmentsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConfigurationAssignment"
            }
          }
        }
      }
    }
  }
};

export const ListApplyUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListApplyUpdate",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplyUpdate"
            }
          }
        }
      }
    }
  }
};

export const OperationsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationInfo"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationInfo",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListUpdatesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListUpdatesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Update"
            }
          }
        }
      }
    }
  }
};

export const Update: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Update",
    modelProperties: {
      maintenanceScope: {
        serializedName: "maintenanceScope",
        type: {
          name: "String"
        }
      },
      impactType: {
        serializedName: "impactType",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      impactDurationInSec: {
        serializedName: "impactDurationInSec",
        type: {
          name: "Number"
        }
      },
      notBefore: {
        serializedName: "notBefore",
        type: {
          name: "DateTime"
        }
      },
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MaintenanceConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceConfiguration",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      namespace: {
        serializedName: "properties.namespace",
        type: {
          name: "String"
        }
      },
      extensionProperties: {
        serializedName: "properties.extensionProperties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      maintenanceScope: {
        serializedName: "properties.maintenanceScope",
        type: {
          name: "String"
        }
      },
      visibility: {
        serializedName: "properties.visibility",
        type: {
          name: "String"
        }
      },
      installPatches: {
        serializedName: "properties.installPatches",
        type: {
          name: "Composite",
          className: "InputPatchConfiguration"
        }
      },
      startDateTime: {
        serializedName: "properties.maintenanceWindow.startDateTime",
        type: {
          name: "String"
        }
      },
      expirationDateTime: {
        serializedName: "properties.maintenanceWindow.expirationDateTime",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "properties.maintenanceWindow.duration",
        type: {
          name: "String"
        }
      },
      timeZone: {
        serializedName: "properties.maintenanceWindow.timeZone",
        type: {
          name: "String"
        }
      },
      recurEvery: {
        serializedName: "properties.maintenanceWindow.recurEvery",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplyUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplyUpdate",
    modelProperties: {
      ...Resource.type.modelProperties,
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      lastUpdateTime: {
        serializedName: "properties.lastUpdateTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ConfigurationAssignment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConfigurationAssignment",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      maintenanceConfigurationId: {
        serializedName: "properties.maintenanceConfigurationId",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      filter: {
        serializedName: "properties.filter",
        type: {
          name: "Composite",
          className: "ConfigurationAssignmentFilterProperties"
        }
      }
    }
  }
};
