/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ConfigurationAssignmentsForSubscriptions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MaintenanceManagementClient } from "../maintenanceManagementClient";
import {
  ConfigurationAssignmentsForSubscriptionsGetOptionalParams,
  ConfigurationAssignmentsForSubscriptionsGetResponse,
  ConfigurationAssignment,
  ConfigurationAssignmentsForSubscriptionsCreateOrUpdateOptionalParams,
  ConfigurationAssignmentsForSubscriptionsCreateOrUpdateResponse,
  ConfigurationAssignmentsForSubscriptionsUpdateOptionalParams,
  ConfigurationAssignmentsForSubscriptionsUpdateResponse,
  ConfigurationAssignmentsForSubscriptionsDeleteOptionalParams,
  ConfigurationAssignmentsForSubscriptionsDeleteResponse,
} from "../models";

/** Class containing ConfigurationAssignmentsForSubscriptions operations. */
export class ConfigurationAssignmentsForSubscriptionsImpl
  implements ConfigurationAssignmentsForSubscriptions
{
  private readonly client: MaintenanceManagementClient;

  /**
   * Initialize a new instance of the class ConfigurationAssignmentsForSubscriptions class.
   * @param client Reference to the service client
   */
  constructor(client: MaintenanceManagementClient) {
    this.client = client;
  }

  /**
   * Get configuration assignment for resource..
   * @param configurationAssignmentName Configuration assignment name
   * @param options The options parameters.
   */
  get(
    configurationAssignmentName: string,
    options?: ConfigurationAssignmentsForSubscriptionsGetOptionalParams,
  ): Promise<ConfigurationAssignmentsForSubscriptionsGetResponse> {
    return this.client.sendOperationRequest(
      { configurationAssignmentName, options },
      getOperationSpec,
    );
  }

  /**
   * Register configuration for resource.
   * @param configurationAssignmentName Configuration assignment name
   * @param configurationAssignment The configurationAssignment
   * @param options The options parameters.
   */
  createOrUpdate(
    configurationAssignmentName: string,
    configurationAssignment: ConfigurationAssignment,
    options?: ConfigurationAssignmentsForSubscriptionsCreateOrUpdateOptionalParams,
  ): Promise<ConfigurationAssignmentsForSubscriptionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { configurationAssignmentName, configurationAssignment, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Register configuration for resource.
   * @param configurationAssignmentName Configuration assignment name
   * @param configurationAssignment The configurationAssignment
   * @param options The options parameters.
   */
  update(
    configurationAssignmentName: string,
    configurationAssignment: ConfigurationAssignment,
    options?: ConfigurationAssignmentsForSubscriptionsUpdateOptionalParams,
  ): Promise<ConfigurationAssignmentsForSubscriptionsUpdateResponse> {
    return this.client.sendOperationRequest(
      { configurationAssignmentName, configurationAssignment, options },
      updateOperationSpec,
    );
  }

  /**
   * Unregister configuration for resource.
   * @param configurationAssignmentName Unique configuration assignment name
   * @param options The options parameters.
   */
  delete(
    configurationAssignmentName: string,
    options?: ConfigurationAssignmentsForSubscriptionsDeleteOptionalParams,
  ): Promise<ConfigurationAssignmentsForSubscriptionsDeleteResponse> {
    return this.client.sendOperationRequest(
      { configurationAssignmentName, options },
      deleteOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationAssignment,
    },
    default: {
      bodyMapper: Mappers.MaintenanceError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configurationAssignmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationAssignment,
    },
    201: {
      bodyMapper: Mappers.ConfigurationAssignment,
    },
    default: {
      bodyMapper: Mappers.MaintenanceError,
    },
  },
  requestBody: Parameters.configurationAssignment,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configurationAssignmentName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationAssignment,
    },
    default: {
      bodyMapper: Mappers.MaintenanceError,
    },
  },
  requestBody: Parameters.configurationAssignment,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configurationAssignmentName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationAssignment,
    },
    204: {},
    default: {
      bodyMapper: Mappers.MaintenanceError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.configurationAssignmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
