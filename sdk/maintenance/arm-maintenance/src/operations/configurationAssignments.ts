/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { ConfigurationAssignments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MaintenanceManagementClient } from "../maintenanceManagementClient";
import {
  ConfigurationAssignment,
  ConfigurationAssignmentsListParentOptionalParams,
  ConfigurationAssignmentsListParentResponse,
  ConfigurationAssignmentsListOptionalParams,
  ConfigurationAssignmentsListResponse,
  ConfigurationAssignmentsGetParentOptionalParams,
  ConfigurationAssignmentsGetParentResponse,
  ConfigurationAssignmentsCreateOrUpdateParentOptionalParams,
  ConfigurationAssignmentsCreateOrUpdateParentResponse,
  ConfigurationAssignmentsDeleteParentOptionalParams,
  ConfigurationAssignmentsDeleteParentResponse,
  ConfigurationAssignmentsGetOptionalParams,
  ConfigurationAssignmentsGetResponse,
  ConfigurationAssignmentsCreateOrUpdateOptionalParams,
  ConfigurationAssignmentsCreateOrUpdateResponse,
  ConfigurationAssignmentsDeleteOptionalParams,
  ConfigurationAssignmentsDeleteResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ConfigurationAssignments operations. */
export class ConfigurationAssignmentsImpl implements ConfigurationAssignments {
  private readonly client: MaintenanceManagementClient;

  /**
   * Initialize a new instance of the class ConfigurationAssignments class.
   * @param client Reference to the service client
   */
  constructor(client: MaintenanceManagementClient) {
    this.client = client;
  }

  /**
   * List configurationAssignments for resource.
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceParentType Resource parent type
   * @param resourceParentName Resource parent identifier
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param options The options parameters.
   */
  public listParent(
    resourceGroupName: string,
    providerName: string,
    resourceParentType: string,
    resourceParentName: string,
    resourceType: string,
    resourceName: string,
    options?: ConfigurationAssignmentsListParentOptionalParams
  ): PagedAsyncIterableIterator<ConfigurationAssignment> {
    const iter = this.listParentPagingAll(
      resourceGroupName,
      providerName,
      resourceParentType,
      resourceParentName,
      resourceType,
      resourceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listParentPagingPage(
          resourceGroupName,
          providerName,
          resourceParentType,
          resourceParentName,
          resourceType,
          resourceName,
          options,
          settings
        );
      }
    };
  }

  private async *listParentPagingPage(
    resourceGroupName: string,
    providerName: string,
    resourceParentType: string,
    resourceParentName: string,
    resourceType: string,
    resourceName: string,
    options?: ConfigurationAssignmentsListParentOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<ConfigurationAssignment[]> {
    let result: ConfigurationAssignmentsListParentResponse;
    result = await this._listParent(
      resourceGroupName,
      providerName,
      resourceParentType,
      resourceParentName,
      resourceType,
      resourceName,
      options
    );
    yield result.value || [];
  }

  private async *listParentPagingAll(
    resourceGroupName: string,
    providerName: string,
    resourceParentType: string,
    resourceParentName: string,
    resourceType: string,
    resourceName: string,
    options?: ConfigurationAssignmentsListParentOptionalParams
  ): AsyncIterableIterator<ConfigurationAssignment> {
    for await (const page of this.listParentPagingPage(
      resourceGroupName,
      providerName,
      resourceParentType,
      resourceParentName,
      resourceType,
      resourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List configurationAssignments for resource.
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    options?: ConfigurationAssignmentsListOptionalParams
  ): PagedAsyncIterableIterator<ConfigurationAssignment> {
    const iter = this.listPagingAll(
      resourceGroupName,
      providerName,
      resourceType,
      resourceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          providerName,
          resourceType,
          resourceName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    options?: ConfigurationAssignmentsListOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<ConfigurationAssignment[]> {
    let result: ConfigurationAssignmentsListResponse;
    result = await this._list(
      resourceGroupName,
      providerName,
      resourceType,
      resourceName,
      options
    );
    yield result.value || [];
  }

  private async *listPagingAll(
    resourceGroupName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    options?: ConfigurationAssignmentsListOptionalParams
  ): AsyncIterableIterator<ConfigurationAssignment> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      providerName,
      resourceType,
      resourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get configuration assignment for resource..
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceParentType Resource parent type
   * @param resourceParentName Resource parent identifier
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param configurationAssignmentName Configuration assignment name
   * @param options The options parameters.
   */
  getParent(
    resourceGroupName: string,
    providerName: string,
    resourceParentType: string,
    resourceParentName: string,
    resourceType: string,
    resourceName: string,
    configurationAssignmentName: string,
    options?: ConfigurationAssignmentsGetParentOptionalParams
  ): Promise<ConfigurationAssignmentsGetParentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerName,
        resourceParentType,
        resourceParentName,
        resourceType,
        resourceName,
        configurationAssignmentName,
        options
      },
      getParentOperationSpec
    );
  }

  /**
   * Register configuration for resource.
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceParentType Resource parent type
   * @param resourceParentName Resource parent identifier
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param configurationAssignmentName Configuration assignment name
   * @param configurationAssignment The configurationAssignment
   * @param options The options parameters.
   */
  createOrUpdateParent(
    resourceGroupName: string,
    providerName: string,
    resourceParentType: string,
    resourceParentName: string,
    resourceType: string,
    resourceName: string,
    configurationAssignmentName: string,
    configurationAssignment: ConfigurationAssignment,
    options?: ConfigurationAssignmentsCreateOrUpdateParentOptionalParams
  ): Promise<ConfigurationAssignmentsCreateOrUpdateParentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerName,
        resourceParentType,
        resourceParentName,
        resourceType,
        resourceName,
        configurationAssignmentName,
        configurationAssignment,
        options
      },
      createOrUpdateParentOperationSpec
    );
  }

  /**
   * Unregister configuration for resource.
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceParentType Resource parent type
   * @param resourceParentName Resource parent identifier
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param configurationAssignmentName Unique configuration assignment name
   * @param options The options parameters.
   */
  deleteParent(
    resourceGroupName: string,
    providerName: string,
    resourceParentType: string,
    resourceParentName: string,
    resourceType: string,
    resourceName: string,
    configurationAssignmentName: string,
    options?: ConfigurationAssignmentsDeleteParentOptionalParams
  ): Promise<ConfigurationAssignmentsDeleteParentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerName,
        resourceParentType,
        resourceParentName,
        resourceType,
        resourceName,
        configurationAssignmentName,
        options
      },
      deleteParentOperationSpec
    );
  }

  /**
   * Get configuration assignment for resource..
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param configurationAssignmentName Configuration assignment name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    configurationAssignmentName: string,
    options?: ConfigurationAssignmentsGetOptionalParams
  ): Promise<ConfigurationAssignmentsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerName,
        resourceType,
        resourceName,
        configurationAssignmentName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Register configuration for resource.
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param configurationAssignmentName Configuration assignment name
   * @param configurationAssignment The configurationAssignment
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    configurationAssignmentName: string,
    configurationAssignment: ConfigurationAssignment,
    options?: ConfigurationAssignmentsCreateOrUpdateOptionalParams
  ): Promise<ConfigurationAssignmentsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerName,
        resourceType,
        resourceName,
        configurationAssignmentName,
        configurationAssignment,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Unregister configuration for resource.
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param configurationAssignmentName Unique configuration assignment name
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    configurationAssignmentName: string,
    options?: ConfigurationAssignmentsDeleteOptionalParams
  ): Promise<ConfigurationAssignmentsDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerName,
        resourceType,
        resourceName,
        configurationAssignmentName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * List configurationAssignments for resource.
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceParentType Resource parent type
   * @param resourceParentName Resource parent identifier
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param options The options parameters.
   */
  private _listParent(
    resourceGroupName: string,
    providerName: string,
    resourceParentType: string,
    resourceParentName: string,
    resourceType: string,
    resourceName: string,
    options?: ConfigurationAssignmentsListParentOptionalParams
  ): Promise<ConfigurationAssignmentsListParentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerName,
        resourceParentType,
        resourceParentName,
        resourceType,
        resourceName,
        options
      },
      listParentOperationSpec
    );
  }

  /**
   * List configurationAssignments for resource.
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    options?: ConfigurationAssignmentsListOptionalParams
  ): Promise<ConfigurationAssignmentsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, providerName, resourceType, resourceName, options },
      listOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getParentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationAssignment
    },
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceParentType,
    Parameters.resourceParentName,
    Parameters.resourceType,
    Parameters.configurationAssignmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateParentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationAssignment
    },
    201: {
      bodyMapper: Mappers.ConfigurationAssignment
    },
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  requestBody: Parameters.configurationAssignment,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceParentType,
    Parameters.resourceParentName,
    Parameters.resourceType,
    Parameters.configurationAssignmentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteParentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationAssignment
    },
    204: {},
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceParentType,
    Parameters.resourceParentName,
    Parameters.resourceType,
    Parameters.configurationAssignmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationAssignment
    },
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceType,
    Parameters.configurationAssignmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationAssignment
    },
    201: {
      bodyMapper: Mappers.ConfigurationAssignment
    },
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  requestBody: Parameters.configurationAssignment,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceType,
    Parameters.configurationAssignmentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.ConfigurationAssignment
    },
    204: {},
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceType,
    Parameters.configurationAssignmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listParentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListConfigurationAssignmentsResult
    },
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceParentType,
    Parameters.resourceParentName,
    Parameters.resourceType
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/configurationAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListConfigurationAssignmentsResult
    },
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceType
  ],
  headerParameters: [Parameters.accept],
  serializer
};
