/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { Updates } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MaintenanceManagementClient } from "../maintenanceManagementClient";
import {
  Update,
  UpdatesListParentOptionalParams,
  UpdatesListParentResponse,
  UpdatesListOptionalParams,
  UpdatesListResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Updates operations. */
export class UpdatesImpl implements Updates {
  private readonly client: MaintenanceManagementClient;

  /**
   * Initialize a new instance of the class Updates class.
   * @param client Reference to the service client
   */
  constructor(client: MaintenanceManagementClient) {
    this.client = client;
  }

  /**
   * Get updates to resources.
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceParentType Resource parent type
   * @param resourceParentName Resource parent identifier
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param options The options parameters.
   */
  public listParent(
    resourceGroupName: string,
    providerName: string,
    resourceParentType: string,
    resourceParentName: string,
    resourceType: string,
    resourceName: string,
    options?: UpdatesListParentOptionalParams
  ): PagedAsyncIterableIterator<Update> {
    const iter = this.listParentPagingAll(
      resourceGroupName,
      providerName,
      resourceParentType,
      resourceParentName,
      resourceType,
      resourceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listParentPagingPage(
          resourceGroupName,
          providerName,
          resourceParentType,
          resourceParentName,
          resourceType,
          resourceName,
          options,
          settings
        );
      }
    };
  }

  private async *listParentPagingPage(
    resourceGroupName: string,
    providerName: string,
    resourceParentType: string,
    resourceParentName: string,
    resourceType: string,
    resourceName: string,
    options?: UpdatesListParentOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<Update[]> {
    let result: UpdatesListParentResponse;
    result = await this._listParent(
      resourceGroupName,
      providerName,
      resourceParentType,
      resourceParentName,
      resourceType,
      resourceName,
      options
    );
    yield result.value || [];
  }

  private async *listParentPagingAll(
    resourceGroupName: string,
    providerName: string,
    resourceParentType: string,
    resourceParentName: string,
    resourceType: string,
    resourceName: string,
    options?: UpdatesListParentOptionalParams
  ): AsyncIterableIterator<Update> {
    for await (const page of this.listParentPagingPage(
      resourceGroupName,
      providerName,
      resourceParentType,
      resourceParentName,
      resourceType,
      resourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get updates to resources.
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    options?: UpdatesListOptionalParams
  ): PagedAsyncIterableIterator<Update> {
    const iter = this.listPagingAll(
      resourceGroupName,
      providerName,
      resourceType,
      resourceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          providerName,
          resourceType,
          resourceName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    options?: UpdatesListOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<Update[]> {
    let result: UpdatesListResponse;
    result = await this._list(
      resourceGroupName,
      providerName,
      resourceType,
      resourceName,
      options
    );
    yield result.value || [];
  }

  private async *listPagingAll(
    resourceGroupName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    options?: UpdatesListOptionalParams
  ): AsyncIterableIterator<Update> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      providerName,
      resourceType,
      resourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get updates to resources.
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceParentType Resource parent type
   * @param resourceParentName Resource parent identifier
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param options The options parameters.
   */
  private _listParent(
    resourceGroupName: string,
    providerName: string,
    resourceParentType: string,
    resourceParentName: string,
    resourceType: string,
    resourceName: string,
    options?: UpdatesListParentOptionalParams
  ): Promise<UpdatesListParentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        providerName,
        resourceParentType,
        resourceParentName,
        resourceType,
        resourceName,
        options
      },
      listParentOperationSpec
    );
  }

  /**
   * Get updates to resources.
   * @param resourceGroupName Resource group name
   * @param providerName Resource provider name
   * @param resourceType Resource type
   * @param resourceName Resource identifier
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    providerName: string,
    resourceType: string,
    resourceName: string,
    options?: UpdatesListOptionalParams
  ): Promise<UpdatesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, providerName, resourceType, resourceName, options },
      listOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listParentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceParentType}/{resourceParentName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/updates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListUpdatesResult
    },
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceParentType,
    Parameters.resourceParentName,
    Parameters.resourceType
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{providerName}/{resourceType}/{resourceName}/providers/Microsoft.Maintenance/updates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListUpdatesResult
    },
    default: {
      bodyMapper: Mappers.MaintenanceError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceName,
    Parameters.resourceGroupName,
    Parameters.providerName,
    Parameters.resourceType
  ],
  headerParameters: [Parameters.accept],
  serializer
};
