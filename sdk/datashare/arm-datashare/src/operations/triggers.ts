/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/triggersMappers";
import * as Parameters from "../models/parameters";
import { DataShareManagementClientContext } from "../dataShareManagementClientContext";

/** Class representing a Triggers. */
export class Triggers {
  private readonly client: DataShareManagementClientContext;

  /**
   * Create a Triggers.
   * @param {DataShareManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataShareManagementClientContext) {
    this.client = client;
  }

  /**
   * Get a Trigger in a shareSubscription
   * @summary Get Trigger in a shareSubscription.
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param triggerName The name of the trigger.
   * @param [options] The optional parameters
   * @returns Promise<Models.TriggersGetResponse>
   */
  get(resourceGroupName: string, accountName: string, shareSubscriptionName: string, triggerName: string, options?: msRest.RequestOptionsBase): Promise<Models.TriggersGetResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param triggerName The name of the trigger.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, shareSubscriptionName: string, triggerName: string, callback: msRest.ServiceCallback<Models.TriggerUnion>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param triggerName The name of the trigger.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, shareSubscriptionName: string, triggerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggerUnion>): void;
  get(resourceGroupName: string, accountName: string, shareSubscriptionName: string, triggerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggerUnion>, callback?: msRest.ServiceCallback<Models.TriggerUnion>): Promise<Models.TriggersGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        shareSubscriptionName,
        triggerName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.TriggersGetResponse>;
  }

  /**
   * Create a Trigger
   * @summary This method creates a trigger for a share subscription
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the share subscription which will hold the data set
   * sink.
   * @param triggerName The name of the trigger.
   * @param trigger Trigger details.
   * @param [options] The optional parameters
   * @returns Promise<Models.TriggersCreateResponse>
   */
  create(resourceGroupName: string, accountName: string, shareSubscriptionName: string, triggerName: string, trigger: Models.TriggerUnion, options?: msRest.RequestOptionsBase): Promise<Models.TriggersCreateResponse> {
    return this.beginCreate(resourceGroupName,accountName,shareSubscriptionName,triggerName,trigger,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.TriggersCreateResponse>;
  }

  /**
   * Delete a Trigger in a shareSubscription
   * @summary Delete Trigger in a shareSubscription.
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param triggerName The name of the trigger.
   * @param [options] The optional parameters
   * @returns Promise<Models.TriggersDeleteMethodResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, shareSubscriptionName: string, triggerName: string, options?: msRest.RequestOptionsBase): Promise<Models.TriggersDeleteMethodResponse> {
    return this.beginDeleteMethod(resourceGroupName,accountName,shareSubscriptionName,triggerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.TriggersDeleteMethodResponse>;
  }

  /**
   * List Triggers in a share subscription
   * @summary List Triggers in a share subscription.
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the share subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.TriggersListByShareSubscriptionResponse>
   */
  listByShareSubscription(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options?: Models.TriggersListByShareSubscriptionOptionalParams): Promise<Models.TriggersListByShareSubscriptionResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the share subscription.
   * @param callback The callback
   */
  listByShareSubscription(resourceGroupName: string, accountName: string, shareSubscriptionName: string, callback: msRest.ServiceCallback<Models.TriggerList>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the share subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByShareSubscription(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options: Models.TriggersListByShareSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.TriggerList>): void;
  listByShareSubscription(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options?: Models.TriggersListByShareSubscriptionOptionalParams | msRest.ServiceCallback<Models.TriggerList>, callback?: msRest.ServiceCallback<Models.TriggerList>): Promise<Models.TriggersListByShareSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        shareSubscriptionName,
        options
      },
      listByShareSubscriptionOperationSpec,
      callback) as Promise<Models.TriggersListByShareSubscriptionResponse>;
  }

  /**
   * Create a Trigger
   * @summary This method creates a trigger for a share subscription
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the share subscription which will hold the data set
   * sink.
   * @param triggerName The name of the trigger.
   * @param trigger Trigger details.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, accountName: string, shareSubscriptionName: string, triggerName: string, trigger: Models.TriggerUnion, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        shareSubscriptionName,
        triggerName,
        trigger,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Delete a Trigger in a shareSubscription
   * @summary Delete Trigger in a shareSubscription.
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param triggerName The name of the trigger.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, accountName: string, shareSubscriptionName: string, triggerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        shareSubscriptionName,
        triggerName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * List Triggers in a share subscription
   * @summary List Triggers in a share subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.TriggersListByShareSubscriptionNextResponse>
   */
  listByShareSubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.TriggersListByShareSubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByShareSubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TriggerList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByShareSubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TriggerList>): void;
  listByShareSubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TriggerList>, callback?: msRest.ServiceCallback<Models.TriggerList>): Promise<Models.TriggersListByShareSubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByShareSubscriptionNextOperationSpec,
      callback) as Promise<Models.TriggersListByShareSubscriptionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers/{triggerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareSubscriptionName,
    Parameters.triggerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Trigger
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listByShareSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TriggerList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers/{triggerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareSubscriptionName,
    Parameters.triggerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "trigger",
    mapper: {
      ...Mappers.Trigger,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Trigger
    },
    201: {
      bodyMapper: Mappers.Trigger
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers/{triggerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareSubscriptionName,
    Parameters.triggerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationResponse
    },
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listByShareSubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TriggerList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};
