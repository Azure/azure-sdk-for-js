/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/sharesMappers";
import * as Parameters from "../models/parameters";
import { DataShareManagementClientContext } from "../dataShareManagementClientContext";

/** Class representing a Shares. */
export class Shares {
  private readonly client: DataShareManagementClientContext;

  /**
   * Create a Shares.
   * @param {DataShareManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataShareManagementClientContext) {
    this.client = client;
  }

  /**
   * List synchronization details
   * @summary List data set level details for a share synchronization
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareName The name of the share.
   * @param shareSynchronization Share Synchronization payload.
   * @param [options] The optional parameters
   * @returns Promise<Models.SharesListSynchronizationDetailsResponse>
   */
  listSynchronizationDetails(resourceGroupName: string, accountName: string, shareName: string, shareSynchronization: Models.ShareSynchronization, options?: Models.SharesListSynchronizationDetailsOptionalParams): Promise<Models.SharesListSynchronizationDetailsResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareName The name of the share.
   * @param shareSynchronization Share Synchronization payload.
   * @param callback The callback
   */
  listSynchronizationDetails(resourceGroupName: string, accountName: string, shareName: string, shareSynchronization: Models.ShareSynchronization, callback: msRest.ServiceCallback<Models.SynchronizationDetailsList>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareName The name of the share.
   * @param shareSynchronization Share Synchronization payload.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSynchronizationDetails(resourceGroupName: string, accountName: string, shareName: string, shareSynchronization: Models.ShareSynchronization, options: Models.SharesListSynchronizationDetailsOptionalParams, callback: msRest.ServiceCallback<Models.SynchronizationDetailsList>): void;
  listSynchronizationDetails(resourceGroupName: string, accountName: string, shareName: string, shareSynchronization: Models.ShareSynchronization, options?: Models.SharesListSynchronizationDetailsOptionalParams | msRest.ServiceCallback<Models.SynchronizationDetailsList>, callback?: msRest.ServiceCallback<Models.SynchronizationDetailsList>): Promise<Models.SharesListSynchronizationDetailsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        shareName,
        shareSynchronization,
        options
      },
      listSynchronizationDetailsOperationSpec,
      callback) as Promise<Models.SharesListSynchronizationDetailsResponse>;
  }

  /**
   * List synchronizations of a share
   * @summary List Synchronizations in a share
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareName The name of the share.
   * @param [options] The optional parameters
   * @returns Promise<Models.SharesListSynchronizationsResponse>
   */
  listSynchronizations(resourceGroupName: string, accountName: string, shareName: string, options?: Models.SharesListSynchronizationsOptionalParams): Promise<Models.SharesListSynchronizationsResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareName The name of the share.
   * @param callback The callback
   */
  listSynchronizations(resourceGroupName: string, accountName: string, shareName: string, callback: msRest.ServiceCallback<Models.ShareSynchronizationList>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareName The name of the share.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSynchronizations(resourceGroupName: string, accountName: string, shareName: string, options: Models.SharesListSynchronizationsOptionalParams, callback: msRest.ServiceCallback<Models.ShareSynchronizationList>): void;
  listSynchronizations(resourceGroupName: string, accountName: string, shareName: string, options?: Models.SharesListSynchronizationsOptionalParams | msRest.ServiceCallback<Models.ShareSynchronizationList>, callback?: msRest.ServiceCallback<Models.ShareSynchronizationList>): Promise<Models.SharesListSynchronizationsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        shareName,
        options
      },
      listSynchronizationsOperationSpec,
      callback) as Promise<Models.SharesListSynchronizationsResponse>;
  }

  /**
   * Get a share
   * @summary Get a specified share
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareName The name of the share to retrieve.
   * @param [options] The optional parameters
   * @returns Promise<Models.SharesGetResponse>
   */
  get(resourceGroupName: string, accountName: string, shareName: string, options?: msRest.RequestOptionsBase): Promise<Models.SharesGetResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareName The name of the share to retrieve.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, shareName: string, callback: msRest.ServiceCallback<Models.Share>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareName The name of the share to retrieve.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, shareName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Share>): void;
  get(resourceGroupName: string, accountName: string, shareName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Share>, callback?: msRest.ServiceCallback<Models.Share>): Promise<Models.SharesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        shareName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SharesGetResponse>;
  }

  /**
   * Create a share
   * @summary Create a share in the given account.
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareName The name of the share.
   * @param share The share payload
   * @param [options] The optional parameters
   * @returns Promise<Models.SharesCreateResponse>
   */
  create(resourceGroupName: string, accountName: string, shareName: string, share: Models.Share, options?: msRest.RequestOptionsBase): Promise<Models.SharesCreateResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareName The name of the share.
   * @param share The share payload
   * @param callback The callback
   */
  create(resourceGroupName: string, accountName: string, shareName: string, share: Models.Share, callback: msRest.ServiceCallback<Models.Share>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareName The name of the share.
   * @param share The share payload
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, accountName: string, shareName: string, share: Models.Share, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Share>): void;
  create(resourceGroupName: string, accountName: string, shareName: string, share: Models.Share, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Share>, callback?: msRest.ServiceCallback<Models.Share>): Promise<Models.SharesCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        shareName,
        share,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.SharesCreateResponse>;
  }

  /**
   * Delete a share
   * @summary Deletes a share
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareName The name of the share.
   * @param [options] The optional parameters
   * @returns Promise<Models.SharesDeleteMethodResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, shareName: string, options?: msRest.RequestOptionsBase): Promise<Models.SharesDeleteMethodResponse> {
    return this.beginDeleteMethod(resourceGroupName,accountName,shareName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SharesDeleteMethodResponse>;
  }

  /**
   * List shares in an account
   * @summary List of available shares under an account.
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param [options] The optional parameters
   * @returns Promise<Models.SharesListByAccountResponse>
   */
  listByAccount(resourceGroupName: string, accountName: string, options?: Models.SharesListByAccountOptionalParams): Promise<Models.SharesListByAccountResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param callback The callback
   */
  listByAccount(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.ShareList>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByAccount(resourceGroupName: string, accountName: string, options: Models.SharesListByAccountOptionalParams, callback: msRest.ServiceCallback<Models.ShareList>): void;
  listByAccount(resourceGroupName: string, accountName: string, options?: Models.SharesListByAccountOptionalParams | msRest.ServiceCallback<Models.ShareList>, callback?: msRest.ServiceCallback<Models.ShareList>): Promise<Models.SharesListByAccountResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listByAccountOperationSpec,
      callback) as Promise<Models.SharesListByAccountResponse>;
  }

  /**
   * Delete a share
   * @summary Deletes a share
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareName The name of the share.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, accountName: string, shareName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        shareName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * List synchronization details
   * @summary List data set level details for a share synchronization
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SharesListSynchronizationDetailsNextResponse>
   */
  listSynchronizationDetailsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SharesListSynchronizationDetailsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSynchronizationDetailsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SynchronizationDetailsList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSynchronizationDetailsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SynchronizationDetailsList>): void;
  listSynchronizationDetailsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SynchronizationDetailsList>, callback?: msRest.ServiceCallback<Models.SynchronizationDetailsList>): Promise<Models.SharesListSynchronizationDetailsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSynchronizationDetailsNextOperationSpec,
      callback) as Promise<Models.SharesListSynchronizationDetailsNextResponse>;
  }

  /**
   * List synchronizations of a share
   * @summary List Synchronizations in a share
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SharesListSynchronizationsNextResponse>
   */
  listSynchronizationsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SharesListSynchronizationsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSynchronizationsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ShareSynchronizationList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSynchronizationsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ShareSynchronizationList>): void;
  listSynchronizationsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ShareSynchronizationList>, callback?: msRest.ServiceCallback<Models.ShareSynchronizationList>): Promise<Models.SharesListSynchronizationsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSynchronizationsNextOperationSpec,
      callback) as Promise<Models.SharesListSynchronizationsNextResponse>;
  }

  /**
   * List shares in an account
   * @summary List of available shares under an account.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SharesListByAccountNextResponse>
   */
  listByAccountNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SharesListByAccountNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByAccountNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ShareList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByAccountNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ShareList>): void;
  listByAccountNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ShareList>, callback?: msRest.ServiceCallback<Models.ShareList>): Promise<Models.SharesListByAccountNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByAccountNextOperationSpec,
      callback) as Promise<Models.SharesListByAccountNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listSynchronizationDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/listSynchronizationDetails",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken,
    Parameters.filter,
    Parameters.orderby
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "shareSynchronization",
    mapper: {
      ...Mappers.ShareSynchronization,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SynchronizationDetailsList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listSynchronizationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/listSynchronizations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken,
    Parameters.filter,
    Parameters.orderby
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ShareSynchronizationList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Share
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "share",
    mapper: {
      ...Mappers.Share,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Share
    },
    201: {
      bodyMapper: Mappers.Share
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listByAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken,
    Parameters.filter,
    Parameters.orderby
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ShareList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationResponse
    },
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listSynchronizationDetailsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SynchronizationDetailsList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listSynchronizationsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ShareSynchronizationList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listByAccountNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ShareList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};
