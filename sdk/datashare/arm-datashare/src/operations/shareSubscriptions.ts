/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/shareSubscriptionsMappers";
import * as Parameters from "../models/parameters";
import { DataShareManagementClientContext } from "../dataShareManagementClientContext";

/** Class representing a ShareSubscriptions. */
export class ShareSubscriptions {
  private readonly client: DataShareManagementClientContext;

  /**
   * Create a ShareSubscriptions.
   * @param {DataShareManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataShareManagementClientContext) {
    this.client = client;
  }

  /**
   * Get a shareSubscription in an account
   * @summary Get shareSubscription in an account.
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ShareSubscriptionsGetResponse>
   */
  get(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<Models.ShareSubscriptionsGetResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, shareSubscriptionName: string, callback: msRest.ServiceCallback<Models.ShareSubscription>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ShareSubscription>): void;
  get(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ShareSubscription>, callback?: msRest.ServiceCallback<Models.ShareSubscription>): Promise<Models.ShareSubscriptionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        shareSubscriptionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ShareSubscriptionsGetResponse>;
  }

  /**
   * Create a shareSubscription in an account
   * @summary Create shareSubscription in an account.
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param shareSubscription create parameters for shareSubscription
   * @param [options] The optional parameters
   * @returns Promise<Models.ShareSubscriptionsCreateResponse>
   */
  create(resourceGroupName: string, accountName: string, shareSubscriptionName: string, shareSubscription: Models.ShareSubscription, options?: msRest.RequestOptionsBase): Promise<Models.ShareSubscriptionsCreateResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param shareSubscription create parameters for shareSubscription
   * @param callback The callback
   */
  create(resourceGroupName: string, accountName: string, shareSubscriptionName: string, shareSubscription: Models.ShareSubscription, callback: msRest.ServiceCallback<Models.ShareSubscription>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param shareSubscription create parameters for shareSubscription
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, accountName: string, shareSubscriptionName: string, shareSubscription: Models.ShareSubscription, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ShareSubscription>): void;
  create(resourceGroupName: string, accountName: string, shareSubscriptionName: string, shareSubscription: Models.ShareSubscription, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ShareSubscription>, callback?: msRest.ServiceCallback<Models.ShareSubscription>): Promise<Models.ShareSubscriptionsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        shareSubscriptionName,
        shareSubscription,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.ShareSubscriptionsCreateResponse>;
  }

  /**
   * Delete a shareSubscription in an account
   * @summary Delete shareSubscription in an account.
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ShareSubscriptionsDeleteMethodResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<Models.ShareSubscriptionsDeleteMethodResponse> {
    return this.beginDeleteMethod(resourceGroupName,accountName,shareSubscriptionName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ShareSubscriptionsDeleteMethodResponse>;
  }

  /**
   * List share subscriptions in an account
   * @summary List of available share subscriptions under an account.
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param [options] The optional parameters
   * @returns Promise<Models.ShareSubscriptionsListByAccountResponse>
   */
  listByAccount(resourceGroupName: string, accountName: string, options?: Models.ShareSubscriptionsListByAccountOptionalParams): Promise<Models.ShareSubscriptionsListByAccountResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param callback The callback
   */
  listByAccount(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.ShareSubscriptionList>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByAccount(resourceGroupName: string, accountName: string, options: Models.ShareSubscriptionsListByAccountOptionalParams, callback: msRest.ServiceCallback<Models.ShareSubscriptionList>): void;
  listByAccount(resourceGroupName: string, accountName: string, options?: Models.ShareSubscriptionsListByAccountOptionalParams | msRest.ServiceCallback<Models.ShareSubscriptionList>, callback?: msRest.ServiceCallback<Models.ShareSubscriptionList>): Promise<Models.ShareSubscriptionsListByAccountResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listByAccountOperationSpec,
      callback) as Promise<Models.ShareSubscriptionsListByAccountResponse>;
  }

  /**
   * Get synchronization settings set on a share
   * @summary Get source share synchronization settings for a shareSubscription.
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ShareSubscriptionsListSourceShareSynchronizationSettingsResponse>
   */
  listSourceShareSynchronizationSettings(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options?: Models.ShareSubscriptionsListSourceShareSynchronizationSettingsOptionalParams): Promise<Models.ShareSubscriptionsListSourceShareSynchronizationSettingsResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param callback The callback
   */
  listSourceShareSynchronizationSettings(resourceGroupName: string, accountName: string, shareSubscriptionName: string, callback: msRest.ServiceCallback<Models.SourceShareSynchronizationSettingList>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSourceShareSynchronizationSettings(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options: Models.ShareSubscriptionsListSourceShareSynchronizationSettingsOptionalParams, callback: msRest.ServiceCallback<Models.SourceShareSynchronizationSettingList>): void;
  listSourceShareSynchronizationSettings(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options?: Models.ShareSubscriptionsListSourceShareSynchronizationSettingsOptionalParams | msRest.ServiceCallback<Models.SourceShareSynchronizationSettingList>, callback?: msRest.ServiceCallback<Models.SourceShareSynchronizationSettingList>): Promise<Models.ShareSubscriptionsListSourceShareSynchronizationSettingsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        shareSubscriptionName,
        options
      },
      listSourceShareSynchronizationSettingsOperationSpec,
      callback) as Promise<Models.ShareSubscriptionsListSourceShareSynchronizationSettingsResponse>;
  }

  /**
   * List synchronizations of a share subscription
   * @summary List Synchronizations in a share subscription.
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the share subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ShareSubscriptionsListSynchronizationsResponse>
   */
  listSynchronizations(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options?: Models.ShareSubscriptionsListSynchronizationsOptionalParams): Promise<Models.ShareSubscriptionsListSynchronizationsResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the share subscription.
   * @param callback The callback
   */
  listSynchronizations(resourceGroupName: string, accountName: string, shareSubscriptionName: string, callback: msRest.ServiceCallback<Models.ShareSubscriptionSynchronizationList>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the share subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSynchronizations(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options: Models.ShareSubscriptionsListSynchronizationsOptionalParams, callback: msRest.ServiceCallback<Models.ShareSubscriptionSynchronizationList>): void;
  listSynchronizations(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options?: Models.ShareSubscriptionsListSynchronizationsOptionalParams | msRest.ServiceCallback<Models.ShareSubscriptionSynchronizationList>, callback?: msRest.ServiceCallback<Models.ShareSubscriptionSynchronizationList>): Promise<Models.ShareSubscriptionsListSynchronizationsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        shareSubscriptionName,
        options
      },
      listSynchronizationsOperationSpec,
      callback) as Promise<Models.ShareSubscriptionsListSynchronizationsResponse>;
  }

  /**
   * List synchronization details
   * @summary List data set level details for a share subscription synchronization
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the share subscription.
   * @param shareSubscriptionSynchronization Share Subscription Synchronization payload.
   * @param [options] The optional parameters
   * @returns Promise<Models.ShareSubscriptionsListSynchronizationDetailsResponse>
   */
  listSynchronizationDetails(resourceGroupName: string, accountName: string, shareSubscriptionName: string, shareSubscriptionSynchronization: Models.ShareSubscriptionSynchronization, options?: Models.ShareSubscriptionsListSynchronizationDetailsOptionalParams): Promise<Models.ShareSubscriptionsListSynchronizationDetailsResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the share subscription.
   * @param shareSubscriptionSynchronization Share Subscription Synchronization payload.
   * @param callback The callback
   */
  listSynchronizationDetails(resourceGroupName: string, accountName: string, shareSubscriptionName: string, shareSubscriptionSynchronization: Models.ShareSubscriptionSynchronization, callback: msRest.ServiceCallback<Models.SynchronizationDetailsList>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the share subscription.
   * @param shareSubscriptionSynchronization Share Subscription Synchronization payload.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSynchronizationDetails(resourceGroupName: string, accountName: string, shareSubscriptionName: string, shareSubscriptionSynchronization: Models.ShareSubscriptionSynchronization, options: Models.ShareSubscriptionsListSynchronizationDetailsOptionalParams, callback: msRest.ServiceCallback<Models.SynchronizationDetailsList>): void;
  listSynchronizationDetails(resourceGroupName: string, accountName: string, shareSubscriptionName: string, shareSubscriptionSynchronization: Models.ShareSubscriptionSynchronization, options?: Models.ShareSubscriptionsListSynchronizationDetailsOptionalParams | msRest.ServiceCallback<Models.SynchronizationDetailsList>, callback?: msRest.ServiceCallback<Models.SynchronizationDetailsList>): Promise<Models.ShareSubscriptionsListSynchronizationDetailsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        shareSubscriptionName,
        shareSubscriptionSynchronization,
        options
      },
      listSynchronizationDetailsOperationSpec,
      callback) as Promise<Models.ShareSubscriptionsListSynchronizationDetailsResponse>;
  }

  /**
   * Initiate a copy
   * @summary Initiate an asynchronous data share job
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of share subscription
   * @param synchronize Synchronize payload
   * @param [options] The optional parameters
   * @returns Promise<Models.ShareSubscriptionsSynchronizeMethodResponse>
   */
  synchronizeMethod(resourceGroupName: string, accountName: string, shareSubscriptionName: string, synchronize: Models.Synchronize, options?: msRest.RequestOptionsBase): Promise<Models.ShareSubscriptionsSynchronizeMethodResponse> {
    return this.beginSynchronizeMethod(resourceGroupName,accountName,shareSubscriptionName,synchronize,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ShareSubscriptionsSynchronizeMethodResponse>;
  }

  /**
   * Request to cancel a synchronization.
   * @summary Request cancellation of a data share snapshot
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param shareSubscriptionSynchronization Share Subscription Synchronization payload.
   * @param [options] The optional parameters
   * @returns Promise<Models.ShareSubscriptionsCancelSynchronizationResponse>
   */
  cancelSynchronization(resourceGroupName: string, accountName: string, shareSubscriptionName: string, shareSubscriptionSynchronization: Models.ShareSubscriptionSynchronization, options?: msRest.RequestOptionsBase): Promise<Models.ShareSubscriptionsCancelSynchronizationResponse> {
    return this.beginCancelSynchronization(resourceGroupName,accountName,shareSubscriptionName,shareSubscriptionSynchronization,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ShareSubscriptionsCancelSynchronizationResponse>;
  }

  /**
   * Delete a shareSubscription in an account
   * @summary Delete shareSubscription in an account.
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        shareSubscriptionName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Initiate a copy
   * @summary Initiate an asynchronous data share job
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of share subscription
   * @param synchronize Synchronize payload
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginSynchronizeMethod(resourceGroupName: string, accountName: string, shareSubscriptionName: string, synchronize: Models.Synchronize, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        shareSubscriptionName,
        synchronize,
        options
      },
      beginSynchronizeMethodOperationSpec,
      options);
  }

  /**
   * Request to cancel a synchronization.
   * @summary Request cancellation of a data share snapshot
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param shareSubscriptionSynchronization Share Subscription Synchronization payload.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCancelSynchronization(resourceGroupName: string, accountName: string, shareSubscriptionName: string, shareSubscriptionSynchronization: Models.ShareSubscriptionSynchronization, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        shareSubscriptionName,
        shareSubscriptionSynchronization,
        options
      },
      beginCancelSynchronizationOperationSpec,
      options);
  }

  /**
   * List share subscriptions in an account
   * @summary List of available share subscriptions under an account.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ShareSubscriptionsListByAccountNextResponse>
   */
  listByAccountNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ShareSubscriptionsListByAccountNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByAccountNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ShareSubscriptionList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByAccountNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ShareSubscriptionList>): void;
  listByAccountNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ShareSubscriptionList>, callback?: msRest.ServiceCallback<Models.ShareSubscriptionList>): Promise<Models.ShareSubscriptionsListByAccountNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByAccountNextOperationSpec,
      callback) as Promise<Models.ShareSubscriptionsListByAccountNextResponse>;
  }

  /**
   * Get synchronization settings set on a share
   * @summary Get source share synchronization settings for a shareSubscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ShareSubscriptionsListSourceShareSynchronizationSettingsNextResponse>
   */
  listSourceShareSynchronizationSettingsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ShareSubscriptionsListSourceShareSynchronizationSettingsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSourceShareSynchronizationSettingsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SourceShareSynchronizationSettingList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSourceShareSynchronizationSettingsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceShareSynchronizationSettingList>): void;
  listSourceShareSynchronizationSettingsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SourceShareSynchronizationSettingList>, callback?: msRest.ServiceCallback<Models.SourceShareSynchronizationSettingList>): Promise<Models.ShareSubscriptionsListSourceShareSynchronizationSettingsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSourceShareSynchronizationSettingsNextOperationSpec,
      callback) as Promise<Models.ShareSubscriptionsListSourceShareSynchronizationSettingsNextResponse>;
  }

  /**
   * List synchronizations of a share subscription
   * @summary List Synchronizations in a share subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ShareSubscriptionsListSynchronizationsNextResponse>
   */
  listSynchronizationsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ShareSubscriptionsListSynchronizationsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSynchronizationsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ShareSubscriptionSynchronizationList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSynchronizationsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ShareSubscriptionSynchronizationList>): void;
  listSynchronizationsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ShareSubscriptionSynchronizationList>, callback?: msRest.ServiceCallback<Models.ShareSubscriptionSynchronizationList>): Promise<Models.ShareSubscriptionsListSynchronizationsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSynchronizationsNextOperationSpec,
      callback) as Promise<Models.ShareSubscriptionsListSynchronizationsNextResponse>;
  }

  /**
   * List synchronization details
   * @summary List data set level details for a share subscription synchronization
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ShareSubscriptionsListSynchronizationDetailsNextResponse>
   */
  listSynchronizationDetailsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ShareSubscriptionsListSynchronizationDetailsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSynchronizationDetailsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SynchronizationDetailsList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSynchronizationDetailsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SynchronizationDetailsList>): void;
  listSynchronizationDetailsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SynchronizationDetailsList>, callback?: msRest.ServiceCallback<Models.SynchronizationDetailsList>): Promise<Models.ShareSubscriptionsListSynchronizationDetailsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSynchronizationDetailsNextOperationSpec,
      callback) as Promise<Models.ShareSubscriptionsListSynchronizationDetailsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ShareSubscription
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "shareSubscription",
    mapper: {
      ...Mappers.ShareSubscription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ShareSubscription
    },
    201: {
      bodyMapper: Mappers.ShareSubscription
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listByAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken,
    Parameters.filter,
    Parameters.orderby
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ShareSubscriptionList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listSourceShareSynchronizationSettingsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSourceShareSynchronizationSettings",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SourceShareSynchronizationSettingList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listSynchronizationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSynchronizations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken,
    Parameters.filter,
    Parameters.orderby
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ShareSubscriptionSynchronizationList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listSynchronizationDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSynchronizationDetails",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken,
    Parameters.filter,
    Parameters.orderby
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "shareSubscriptionSynchronization",
    mapper: {
      ...Mappers.ShareSubscriptionSynchronization,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SynchronizationDetailsList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationResponse
    },
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const beginSynchronizeMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/Synchronize",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "synchronize",
    mapper: {
      ...Mappers.Synchronize,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ShareSubscriptionSynchronization
    },
    202: {
      bodyMapper: Mappers.ShareSubscriptionSynchronization
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const beginCancelSynchronizationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/cancelSynchronization",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "shareSubscriptionSynchronization",
    mapper: {
      ...Mappers.ShareSubscriptionSynchronization,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ShareSubscriptionSynchronization
    },
    202: {
      bodyMapper: Mappers.ShareSubscriptionSynchronization
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listByAccountNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ShareSubscriptionList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listSourceShareSynchronizationSettingsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SourceShareSynchronizationSettingList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listSynchronizationsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ShareSubscriptionSynchronizationList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listSynchronizationDetailsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SynchronizationDetailsList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};
