/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/consumerSourceDataSetsMappers";
import * as Parameters from "../models/parameters";
import { DataShareManagementClientContext } from "../dataShareManagementClientContext";

/** Class representing a ConsumerSourceDataSets. */
export class ConsumerSourceDataSets {
  private readonly client: DataShareManagementClientContext;

  /**
   * Create a ConsumerSourceDataSets.
   * @param {DataShareManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataShareManagementClientContext) {
    this.client = client;
  }

  /**
   * Get source dataSets of a shareSubscription
   * @summary Get source dataSets of a shareSubscription.
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConsumerSourceDataSetsListByShareSubscriptionResponse>
   */
  listByShareSubscription(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options?: Models.ConsumerSourceDataSetsListByShareSubscriptionOptionalParams): Promise<Models.ConsumerSourceDataSetsListByShareSubscriptionResponse>;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param callback The callback
   */
  listByShareSubscription(resourceGroupName: string, accountName: string, shareSubscriptionName: string, callback: msRest.ServiceCallback<Models.ConsumerSourceDataSetList>): void;
  /**
   * @param resourceGroupName The resource group name.
   * @param accountName The name of the share account.
   * @param shareSubscriptionName The name of the shareSubscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByShareSubscription(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options: Models.ConsumerSourceDataSetsListByShareSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.ConsumerSourceDataSetList>): void;
  listByShareSubscription(resourceGroupName: string, accountName: string, shareSubscriptionName: string, options?: Models.ConsumerSourceDataSetsListByShareSubscriptionOptionalParams | msRest.ServiceCallback<Models.ConsumerSourceDataSetList>, callback?: msRest.ServiceCallback<Models.ConsumerSourceDataSetList>): Promise<Models.ConsumerSourceDataSetsListByShareSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        shareSubscriptionName,
        options
      },
      listByShareSubscriptionOperationSpec,
      callback) as Promise<Models.ConsumerSourceDataSetsListByShareSubscriptionResponse>;
  }

  /**
   * Get source dataSets of a shareSubscription
   * @summary Get source dataSets of a shareSubscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConsumerSourceDataSetsListByShareSubscriptionNextResponse>
   */
  listByShareSubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ConsumerSourceDataSetsListByShareSubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByShareSubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ConsumerSourceDataSetList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByShareSubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConsumerSourceDataSetList>): void;
  listByShareSubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConsumerSourceDataSetList>, callback?: msRest.ServiceCallback<Models.ConsumerSourceDataSetList>): Promise<Models.ConsumerSourceDataSetsListByShareSubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByShareSubscriptionNextOperationSpec,
      callback) as Promise<Models.ConsumerSourceDataSetsListByShareSubscriptionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByShareSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/ConsumerSourceDataSets",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.shareSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConsumerSourceDataSetList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};

const listByShareSubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConsumerSourceDataSetList
    },
    default: {
      bodyMapper: Mappers.DataShareError
    }
  },
  serializer
};
