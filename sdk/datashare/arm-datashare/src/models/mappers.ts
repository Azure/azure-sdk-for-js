/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const Identity: msRest.CompositeMapper = {
  serializedName: "Identity",
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DefaultDto: msRest.CompositeMapper = {
  serializedName: "DefaultDto",
  type: {
    name: "Composite",
    className: "DefaultDto",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Account: msRest.CompositeMapper = {
  serializedName: "Account",
  type: {
    name: "Composite",
    className: "Account",
    modelProperties: {
      ...DefaultDto.type.modelProperties,
      identity: {
        required: true,
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      createdAt: {
        readOnly: true,
        serializedName: "properties.createdAt",
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      userEmail: {
        readOnly: true,
        serializedName: "properties.userEmail",
        type: {
          name: "String"
        }
      },
      userName: {
        readOnly: true,
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountUpdateParameters: msRest.CompositeMapper = {
  serializedName: "AccountUpdateParameters",
  type: {
    name: "Composite",
    className: "AccountUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ProxyDto: msRest.CompositeMapper = {
  serializedName: "ProxyDto",
  type: {
    name: "Composite",
    className: "ProxyDto",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataSet: msRest.CompositeMapper = {
  serializedName: "DataSet",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "DataSet",
    className: "DataSet",
    modelProperties: {
      ...ProxyDto.type.modelProperties,
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ADLSGen1FileDataSet: msRest.CompositeMapper = {
  serializedName: "AdlsGen1File",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSet.type.polymorphicDiscriminator,
    uberParent: "DataSet",
    className: "ADLSGen1FileDataSet",
    modelProperties: {
      ...DataSet.type.modelProperties,
      accountName: {
        required: true,
        serializedName: "properties.accountName",
        type: {
          name: "String"
        }
      },
      dataSetId: {
        readOnly: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      fileName: {
        required: true,
        serializedName: "properties.fileName",
        type: {
          name: "String"
        }
      },
      folderPath: {
        required: true,
        serializedName: "properties.folderPath",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        required: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ADLSGen1FolderDataSet: msRest.CompositeMapper = {
  serializedName: "AdlsGen1Folder",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSet.type.polymorphicDiscriminator,
    uberParent: "DataSet",
    className: "ADLSGen1FolderDataSet",
    modelProperties: {
      ...DataSet.type.modelProperties,
      accountName: {
        required: true,
        serializedName: "properties.accountName",
        type: {
          name: "String"
        }
      },
      dataSetId: {
        readOnly: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      folderPath: {
        required: true,
        serializedName: "properties.folderPath",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        required: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ADLSGen2FileDataSet: msRest.CompositeMapper = {
  serializedName: "AdlsGen2File",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSet.type.polymorphicDiscriminator,
    uberParent: "DataSet",
    className: "ADLSGen2FileDataSet",
    modelProperties: {
      ...DataSet.type.modelProperties,
      dataSetId: {
        readOnly: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      filePath: {
        required: true,
        serializedName: "properties.filePath",
        type: {
          name: "String"
        }
      },
      fileSystem: {
        required: true,
        serializedName: "properties.fileSystem",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        required: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        required: true,
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataSetMapping: msRest.CompositeMapper = {
  serializedName: "DataSetMapping",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "DataSetMapping",
    className: "DataSetMapping",
    modelProperties: {
      ...ProxyDto.type.modelProperties,
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ADLSGen2FileDataSetMapping: msRest.CompositeMapper = {
  serializedName: "AdlsGen2File",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSetMapping.type.polymorphicDiscriminator,
    uberParent: "DataSetMapping",
    className: "ADLSGen2FileDataSetMapping",
    modelProperties: {
      ...DataSetMapping.type.modelProperties,
      dataSetId: {
        required: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      dataSetMappingStatus: {
        readOnly: true,
        serializedName: "properties.dataSetMappingStatus",
        type: {
          name: "String"
        }
      },
      filePath: {
        required: true,
        serializedName: "properties.filePath",
        type: {
          name: "String"
        }
      },
      fileSystem: {
        required: true,
        serializedName: "properties.fileSystem",
        type: {
          name: "String"
        }
      },
      outputType: {
        serializedName: "properties.outputType",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        required: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        required: true,
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ADLSGen2FileSystemDataSet: msRest.CompositeMapper = {
  serializedName: "AdlsGen2FileSystem",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSet.type.polymorphicDiscriminator,
    uberParent: "DataSet",
    className: "ADLSGen2FileSystemDataSet",
    modelProperties: {
      ...DataSet.type.modelProperties,
      dataSetId: {
        readOnly: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      fileSystem: {
        required: true,
        serializedName: "properties.fileSystem",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        required: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        required: true,
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ADLSGen2FileSystemDataSetMapping: msRest.CompositeMapper = {
  serializedName: "AdlsGen2FileSystem",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSetMapping.type.polymorphicDiscriminator,
    uberParent: "DataSetMapping",
    className: "ADLSGen2FileSystemDataSetMapping",
    modelProperties: {
      ...DataSetMapping.type.modelProperties,
      dataSetId: {
        required: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      dataSetMappingStatus: {
        readOnly: true,
        serializedName: "properties.dataSetMappingStatus",
        type: {
          name: "String"
        }
      },
      fileSystem: {
        required: true,
        serializedName: "properties.fileSystem",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        required: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        required: true,
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ADLSGen2FolderDataSet: msRest.CompositeMapper = {
  serializedName: "AdlsGen2Folder",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSet.type.polymorphicDiscriminator,
    uberParent: "DataSet",
    className: "ADLSGen2FolderDataSet",
    modelProperties: {
      ...DataSet.type.modelProperties,
      dataSetId: {
        readOnly: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      fileSystem: {
        required: true,
        serializedName: "properties.fileSystem",
        type: {
          name: "String"
        }
      },
      folderPath: {
        required: true,
        serializedName: "properties.folderPath",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        required: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        required: true,
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ADLSGen2FolderDataSetMapping: msRest.CompositeMapper = {
  serializedName: "AdlsGen2Folder",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSetMapping.type.polymorphicDiscriminator,
    uberParent: "DataSetMapping",
    className: "ADLSGen2FolderDataSetMapping",
    modelProperties: {
      ...DataSetMapping.type.modelProperties,
      dataSetId: {
        required: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      dataSetMappingStatus: {
        readOnly: true,
        serializedName: "properties.dataSetMappingStatus",
        type: {
          name: "String"
        }
      },
      fileSystem: {
        required: true,
        serializedName: "properties.fileSystem",
        type: {
          name: "String"
        }
      },
      folderPath: {
        required: true,
        serializedName: "properties.folderPath",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        required: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        required: true,
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobContainerDataSet: msRest.CompositeMapper = {
  serializedName: "Container",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSet.type.polymorphicDiscriminator,
    uberParent: "DataSet",
    className: "BlobContainerDataSet",
    modelProperties: {
      ...DataSet.type.modelProperties,
      containerName: {
        required: true,
        serializedName: "properties.containerName",
        type: {
          name: "String"
        }
      },
      dataSetId: {
        readOnly: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        required: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        required: true,
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobContainerDataSetMapping: msRest.CompositeMapper = {
  serializedName: "Container",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSetMapping.type.polymorphicDiscriminator,
    uberParent: "DataSetMapping",
    className: "BlobContainerDataSetMapping",
    modelProperties: {
      ...DataSetMapping.type.modelProperties,
      containerName: {
        required: true,
        serializedName: "properties.containerName",
        type: {
          name: "String"
        }
      },
      dataSetId: {
        required: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      dataSetMappingStatus: {
        readOnly: true,
        serializedName: "properties.dataSetMappingStatus",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        required: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        required: true,
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobDataSet: msRest.CompositeMapper = {
  serializedName: "Blob",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSet.type.polymorphicDiscriminator,
    uberParent: "DataSet",
    className: "BlobDataSet",
    modelProperties: {
      ...DataSet.type.modelProperties,
      containerName: {
        required: true,
        serializedName: "properties.containerName",
        type: {
          name: "String"
        }
      },
      dataSetId: {
        readOnly: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      filePath: {
        required: true,
        serializedName: "properties.filePath",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        required: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        required: true,
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobDataSetMapping: msRest.CompositeMapper = {
  serializedName: "Blob",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSetMapping.type.polymorphicDiscriminator,
    uberParent: "DataSetMapping",
    className: "BlobDataSetMapping",
    modelProperties: {
      ...DataSetMapping.type.modelProperties,
      containerName: {
        required: true,
        serializedName: "properties.containerName",
        type: {
          name: "String"
        }
      },
      dataSetId: {
        required: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      dataSetMappingStatus: {
        readOnly: true,
        serializedName: "properties.dataSetMappingStatus",
        type: {
          name: "String"
        }
      },
      filePath: {
        required: true,
        serializedName: "properties.filePath",
        type: {
          name: "String"
        }
      },
      outputType: {
        serializedName: "properties.outputType",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        required: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        required: true,
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobFolderDataSet: msRest.CompositeMapper = {
  serializedName: "BlobFolder",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSet.type.polymorphicDiscriminator,
    uberParent: "DataSet",
    className: "BlobFolderDataSet",
    modelProperties: {
      ...DataSet.type.modelProperties,
      containerName: {
        required: true,
        serializedName: "properties.containerName",
        type: {
          name: "String"
        }
      },
      dataSetId: {
        readOnly: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      prefix: {
        required: true,
        serializedName: "properties.prefix",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        required: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        required: true,
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BlobFolderDataSetMapping: msRest.CompositeMapper = {
  serializedName: "BlobFolder",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSetMapping.type.polymorphicDiscriminator,
    uberParent: "DataSetMapping",
    className: "BlobFolderDataSetMapping",
    modelProperties: {
      ...DataSetMapping.type.modelProperties,
      containerName: {
        required: true,
        serializedName: "properties.containerName",
        type: {
          name: "String"
        }
      },
      dataSetId: {
        required: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      dataSetMappingStatus: {
        readOnly: true,
        serializedName: "properties.dataSetMappingStatus",
        type: {
          name: "String"
        }
      },
      prefix: {
        required: true,
        serializedName: "properties.prefix",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        required: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        required: true,
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        required: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConsumerInvitation: msRest.CompositeMapper = {
  serializedName: "ConsumerInvitation",
  type: {
    name: "Composite",
    className: "ConsumerInvitation",
    modelProperties: {
      ...ProxyDto.type.modelProperties,
      dataSetCount: {
        readOnly: true,
        serializedName: "properties.dataSetCount",
        type: {
          name: "Number"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      invitationId: {
        required: true,
        serializedName: "properties.invitationId",
        type: {
          name: "String"
        }
      },
      invitationStatus: {
        readOnly: true,
        serializedName: "properties.invitationStatus",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "properties.location",
        type: {
          name: "String"
        }
      },
      providerEmail: {
        readOnly: true,
        serializedName: "properties.providerEmail",
        type: {
          name: "String"
        }
      },
      providerName: {
        readOnly: true,
        serializedName: "properties.providerName",
        type: {
          name: "String"
        }
      },
      providerTenantName: {
        readOnly: true,
        serializedName: "properties.providerTenantName",
        type: {
          name: "String"
        }
      },
      respondedAt: {
        readOnly: true,
        serializedName: "properties.respondedAt",
        type: {
          name: "DateTime"
        }
      },
      sentAt: {
        readOnly: true,
        serializedName: "properties.sentAt",
        type: {
          name: "DateTime"
        }
      },
      shareName: {
        readOnly: true,
        serializedName: "properties.shareName",
        type: {
          name: "String"
        }
      },
      termsOfUse: {
        readOnly: true,
        serializedName: "properties.termsOfUse",
        type: {
          name: "String"
        }
      },
      userEmail: {
        readOnly: true,
        serializedName: "properties.userEmail",
        type: {
          name: "String"
        }
      },
      userName: {
        readOnly: true,
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConsumerSourceDataSet: msRest.CompositeMapper = {
  serializedName: "ConsumerSourceDataSet",
  type: {
    name: "Composite",
    className: "ConsumerSourceDataSet",
    modelProperties: {
      ...ProxyDto.type.modelProperties,
      dataSetId: {
        readOnly: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      dataSetLocation: {
        readOnly: true,
        serializedName: "properties.dataSetLocation",
        type: {
          name: "String"
        }
      },
      dataSetName: {
        readOnly: true,
        serializedName: "properties.dataSetName",
        type: {
          name: "String"
        }
      },
      dataSetPath: {
        readOnly: true,
        serializedName: "properties.dataSetPath",
        type: {
          name: "String"
        }
      },
      dataSetType: {
        readOnly: true,
        serializedName: "properties.dataSetType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataShareErrorInfo: msRest.CompositeMapper = {
  serializedName: "DataShareErrorInfo",
  type: {
    name: "Composite",
    className: "DataShareErrorInfo",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataShareErrorInfo"
            }
          }
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataShareError: msRest.CompositeMapper = {
  serializedName: "DataShareError",
  type: {
    name: "Composite",
    className: "DataShareError",
    modelProperties: {
      error: {
        required: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "DataShareErrorInfo"
        }
      }
    }
  }
};

export const DimensionProperties: msRest.CompositeMapper = {
  serializedName: "DimensionProperties",
  type: {
    name: "Composite",
    className: "DimensionProperties",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Invitation: msRest.CompositeMapper = {
  serializedName: "Invitation",
  type: {
    name: "Composite",
    className: "Invitation",
    modelProperties: {
      ...ProxyDto.type.modelProperties,
      invitationId: {
        readOnly: true,
        serializedName: "properties.invitationId",
        type: {
          name: "String"
        }
      },
      invitationStatus: {
        readOnly: true,
        serializedName: "properties.invitationStatus",
        type: {
          name: "String"
        }
      },
      respondedAt: {
        readOnly: true,
        serializedName: "properties.respondedAt",
        type: {
          name: "DateTime"
        }
      },
      sentAt: {
        readOnly: true,
        serializedName: "properties.sentAt",
        type: {
          name: "DateTime"
        }
      },
      targetActiveDirectoryId: {
        serializedName: "properties.targetActiveDirectoryId",
        type: {
          name: "String"
        }
      },
      targetEmail: {
        serializedName: "properties.targetEmail",
        type: {
          name: "String"
        }
      },
      targetObjectId: {
        serializedName: "properties.targetObjectId",
        type: {
          name: "String"
        }
      },
      userEmail: {
        readOnly: true,
        serializedName: "properties.userEmail",
        type: {
          name: "String"
        }
      },
      userName: {
        readOnly: true,
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KustoClusterDataSet: msRest.CompositeMapper = {
  serializedName: "KustoCluster",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSet.type.polymorphicDiscriminator,
    uberParent: "DataSet",
    className: "KustoClusterDataSet",
    modelProperties: {
      ...DataSet.type.modelProperties,
      dataSetId: {
        readOnly: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      kustoClusterResourceId: {
        required: true,
        serializedName: "properties.kustoClusterResourceId",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "properties.location",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KustoClusterDataSetMapping: msRest.CompositeMapper = {
  serializedName: "KustoCluster",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSetMapping.type.polymorphicDiscriminator,
    uberParent: "DataSetMapping",
    className: "KustoClusterDataSetMapping",
    modelProperties: {
      ...DataSetMapping.type.modelProperties,
      dataSetId: {
        required: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      dataSetMappingStatus: {
        readOnly: true,
        serializedName: "properties.dataSetMappingStatus",
        type: {
          name: "String"
        }
      },
      kustoClusterResourceId: {
        required: true,
        serializedName: "properties.kustoClusterResourceId",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "properties.location",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KustoDatabaseDataSet: msRest.CompositeMapper = {
  serializedName: "KustoDatabase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSet.type.polymorphicDiscriminator,
    uberParent: "DataSet",
    className: "KustoDatabaseDataSet",
    modelProperties: {
      ...DataSet.type.modelProperties,
      dataSetId: {
        readOnly: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      kustoDatabaseResourceId: {
        required: true,
        serializedName: "properties.kustoDatabaseResourceId",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "properties.location",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KustoDatabaseDataSetMapping: msRest.CompositeMapper = {
  serializedName: "KustoDatabase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSetMapping.type.polymorphicDiscriminator,
    uberParent: "DataSetMapping",
    className: "KustoDatabaseDataSetMapping",
    modelProperties: {
      ...DataSetMapping.type.modelProperties,
      dataSetId: {
        required: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      dataSetMappingStatus: {
        readOnly: true,
        serializedName: "properties.dataSetMappingStatus",
        type: {
          name: "String"
        }
      },
      kustoClusterResourceId: {
        required: true,
        serializedName: "properties.kustoClusterResourceId",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "properties.location",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationModelProperties: msRest.CompositeMapper = {
  serializedName: "OperationModelProperties",
  type: {
    name: "Composite",
    className: "OperationModelProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetaLogSpecification: msRest.CompositeMapper = {
  serializedName: "OperationMetaLogSpecification",
  type: {
    name: "Composite",
    className: "OperationMetaLogSpecification",
    modelProperties: {
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetaMetricSpecification: msRest.CompositeMapper = {
  serializedName: "OperationMetaMetricSpecification",
  type: {
    name: "Composite",
    className: "OperationMetaMetricSpecification",
    modelProperties: {
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DimensionProperties"
            }
          }
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      enableRegionalMdmAccount: {
        serializedName: "enableRegionalMdmAccount",
        type: {
          name: "String"
        }
      },
      internalMetricName: {
        serializedName: "internalMetricName",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      resourceIdDimensionNameOverride: {
        serializedName: "resourceIdDimensionNameOverride",
        type: {
          name: "String"
        }
      },
      supportedAggregationTypes: {
        serializedName: "supportedAggregationTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      supportedTimeGrainTypes: {
        serializedName: "supportedTimeGrainTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetaServiceSpecification: msRest.CompositeMapper = {
  serializedName: "OperationMetaServiceSpecification",
  type: {
    name: "Composite",
    className: "OperationMetaServiceSpecification",
    modelProperties: {
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetaLogSpecification"
            }
          }
        }
      },
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetaMetricSpecification"
            }
          }
        }
      }
    }
  }
};

export const OperationModel: msRest.CompositeMapper = {
  serializedName: "OperationModel",
  type: {
    name: "Composite",
    className: "OperationModel",
    modelProperties: {
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationModelProperties"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className: "OperationMetaServiceSpecification"
        }
      }
    }
  }
};

export const OperationResponse: msRest.CompositeMapper = {
  serializedName: "OperationResponse",
  type: {
    name: "Composite",
    className: "OperationResponse",
    modelProperties: {
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "DataShareErrorInfo"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProviderShareSubscription: msRest.CompositeMapper = {
  serializedName: "ProviderShareSubscription",
  type: {
    name: "Composite",
    className: "ProviderShareSubscription",
    modelProperties: {
      ...ProxyDto.type.modelProperties,
      consumerEmail: {
        readOnly: true,
        serializedName: "properties.consumerEmail",
        type: {
          name: "String"
        }
      },
      consumerName: {
        readOnly: true,
        serializedName: "properties.consumerName",
        type: {
          name: "String"
        }
      },
      consumerTenantName: {
        readOnly: true,
        serializedName: "properties.consumerTenantName",
        type: {
          name: "String"
        }
      },
      createdAt: {
        readOnly: true,
        serializedName: "properties.createdAt",
        type: {
          name: "DateTime"
        }
      },
      providerEmail: {
        readOnly: true,
        serializedName: "properties.providerEmail",
        type: {
          name: "String"
        }
      },
      providerName: {
        readOnly: true,
        serializedName: "properties.providerName",
        type: {
          name: "String"
        }
      },
      sharedAt: {
        readOnly: true,
        serializedName: "properties.sharedAt",
        type: {
          name: "DateTime"
        }
      },
      shareSubscriptionObjectId: {
        readOnly: true,
        serializedName: "properties.shareSubscriptionObjectId",
        type: {
          name: "String"
        }
      },
      shareSubscriptionStatus: {
        readOnly: true,
        serializedName: "properties.shareSubscriptionStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SourceShareSynchronizationSetting: msRest.CompositeMapper = {
  serializedName: "SourceShareSynchronizationSetting",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "SourceShareSynchronizationSetting",
    className: "SourceShareSynchronizationSetting",
    modelProperties: {
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScheduledSourceSynchronizationSetting: msRest.CompositeMapper = {
  serializedName: "ScheduleBased",
  type: {
    name: "Composite",
    polymorphicDiscriminator: SourceShareSynchronizationSetting.type.polymorphicDiscriminator,
    uberParent: "SourceShareSynchronizationSetting",
    className: "ScheduledSourceSynchronizationSetting",
    modelProperties: {
      ...SourceShareSynchronizationSetting.type.modelProperties,
      recurrenceInterval: {
        serializedName: "properties.recurrenceInterval",
        type: {
          name: "String"
        }
      },
      synchronizationTime: {
        serializedName: "properties.synchronizationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SynchronizationSetting: msRest.CompositeMapper = {
  serializedName: "SynchronizationSetting",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "SynchronizationSetting",
    className: "SynchronizationSetting",
    modelProperties: {
      ...ProxyDto.type.modelProperties,
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScheduledSynchronizationSetting: msRest.CompositeMapper = {
  serializedName: "ScheduleBased",
  type: {
    name: "Composite",
    polymorphicDiscriminator: SynchronizationSetting.type.polymorphicDiscriminator,
    uberParent: "SynchronizationSetting",
    className: "ScheduledSynchronizationSetting",
    modelProperties: {
      ...SynchronizationSetting.type.modelProperties,
      createdAt: {
        readOnly: true,
        serializedName: "properties.createdAt",
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      recurrenceInterval: {
        required: true,
        serializedName: "properties.recurrenceInterval",
        type: {
          name: "String"
        }
      },
      synchronizationTime: {
        required: true,
        serializedName: "properties.synchronizationTime",
        type: {
          name: "DateTime"
        }
      },
      userName: {
        readOnly: true,
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Trigger: msRest.CompositeMapper = {
  serializedName: "Trigger",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    uberParent: "Trigger",
    className: "Trigger",
    modelProperties: {
      ...ProxyDto.type.modelProperties,
      kind: {
        required: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScheduledTrigger: msRest.CompositeMapper = {
  serializedName: "ScheduleBased",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Trigger.type.polymorphicDiscriminator,
    uberParent: "Trigger",
    className: "ScheduledTrigger",
    modelProperties: {
      ...Trigger.type.modelProperties,
      createdAt: {
        readOnly: true,
        serializedName: "properties.createdAt",
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      recurrenceInterval: {
        required: true,
        serializedName: "properties.recurrenceInterval",
        type: {
          name: "String"
        }
      },
      synchronizationMode: {
        serializedName: "properties.synchronizationMode",
        type: {
          name: "String"
        }
      },
      synchronizationTime: {
        required: true,
        serializedName: "properties.synchronizationTime",
        type: {
          name: "DateTime"
        }
      },
      triggerStatus: {
        readOnly: true,
        serializedName: "properties.triggerStatus",
        type: {
          name: "String"
        }
      },
      userName: {
        readOnly: true,
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Share: msRest.CompositeMapper = {
  serializedName: "Share",
  type: {
    name: "Composite",
    className: "Share",
    modelProperties: {
      ...ProxyDto.type.modelProperties,
      createdAt: {
        readOnly: true,
        serializedName: "properties.createdAt",
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      shareKind: {
        serializedName: "properties.shareKind",
        type: {
          name: "String"
        }
      },
      terms: {
        serializedName: "properties.terms",
        type: {
          name: "String"
        }
      },
      userEmail: {
        readOnly: true,
        serializedName: "properties.userEmail",
        type: {
          name: "String"
        }
      },
      userName: {
        readOnly: true,
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareSubscription: msRest.CompositeMapper = {
  serializedName: "ShareSubscription",
  type: {
    name: "Composite",
    className: "ShareSubscription",
    modelProperties: {
      ...ProxyDto.type.modelProperties,
      createdAt: {
        readOnly: true,
        serializedName: "properties.createdAt",
        type: {
          name: "DateTime"
        }
      },
      invitationId: {
        required: true,
        serializedName: "properties.invitationId",
        type: {
          name: "String"
        }
      },
      providerEmail: {
        readOnly: true,
        serializedName: "properties.providerEmail",
        type: {
          name: "String"
        }
      },
      providerName: {
        readOnly: true,
        serializedName: "properties.providerName",
        type: {
          name: "String"
        }
      },
      providerTenantName: {
        readOnly: true,
        serializedName: "properties.providerTenantName",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      shareDescription: {
        readOnly: true,
        serializedName: "properties.shareDescription",
        type: {
          name: "String"
        }
      },
      shareKind: {
        readOnly: true,
        serializedName: "properties.shareKind",
        type: {
          name: "String"
        }
      },
      shareName: {
        readOnly: true,
        serializedName: "properties.shareName",
        type: {
          name: "String"
        }
      },
      shareSubscriptionStatus: {
        readOnly: true,
        serializedName: "properties.shareSubscriptionStatus",
        type: {
          name: "String"
        }
      },
      shareTerms: {
        readOnly: true,
        serializedName: "properties.shareTerms",
        type: {
          name: "String"
        }
      },
      sourceShareLocation: {
        required: true,
        serializedName: "properties.sourceShareLocation",
        type: {
          name: "String"
        }
      },
      userEmail: {
        readOnly: true,
        serializedName: "properties.userEmail",
        type: {
          name: "String"
        }
      },
      userName: {
        readOnly: true,
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareSubscriptionSynchronization: msRest.CompositeMapper = {
  serializedName: "ShareSubscriptionSynchronization",
  type: {
    name: "Composite",
    className: "ShareSubscriptionSynchronization",
    modelProperties: {
      durationMs: {
        readOnly: true,
        serializedName: "durationMs",
        type: {
          name: "Number"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      synchronizationId: {
        required: true,
        serializedName: "synchronizationId",
        type: {
          name: "String"
        }
      },
      synchronizationMode: {
        readOnly: true,
        serializedName: "synchronizationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShareSynchronization: msRest.CompositeMapper = {
  serializedName: "ShareSynchronization",
  type: {
    name: "Composite",
    className: "ShareSynchronization",
    modelProperties: {
      consumerEmail: {
        serializedName: "consumerEmail",
        type: {
          name: "String"
        }
      },
      consumerName: {
        serializedName: "consumerName",
        type: {
          name: "String"
        }
      },
      consumerTenantName: {
        serializedName: "consumerTenantName",
        type: {
          name: "String"
        }
      },
      durationMs: {
        serializedName: "durationMs",
        type: {
          name: "Number"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      synchronizationId: {
        serializedName: "synchronizationId",
        type: {
          name: "String"
        }
      },
      synchronizationMode: {
        readOnly: true,
        serializedName: "synchronizationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDBTableDataSet: msRest.CompositeMapper = {
  serializedName: "SqlDBTable",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSet.type.polymorphicDiscriminator,
    uberParent: "DataSet",
    className: "SqlDBTableDataSet",
    modelProperties: {
      ...DataSet.type.modelProperties,
      databaseName: {
        required: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      dataSetId: {
        readOnly: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      schemaName: {
        required: true,
        serializedName: "properties.schemaName",
        type: {
          name: "String"
        }
      },
      sqlServerResourceId: {
        required: true,
        serializedName: "properties.sqlServerResourceId",
        type: {
          name: "String"
        }
      },
      tableName: {
        required: true,
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDBTableDataSetMapping: msRest.CompositeMapper = {
  serializedName: "SqlDBTable",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSetMapping.type.polymorphicDiscriminator,
    uberParent: "DataSetMapping",
    className: "SqlDBTableDataSetMapping",
    modelProperties: {
      ...DataSetMapping.type.modelProperties,
      databaseName: {
        required: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      dataSetId: {
        required: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      dataSetMappingStatus: {
        readOnly: true,
        serializedName: "properties.dataSetMappingStatus",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      schemaName: {
        required: true,
        serializedName: "properties.schemaName",
        type: {
          name: "String"
        }
      },
      sqlServerResourceId: {
        required: true,
        serializedName: "properties.sqlServerResourceId",
        type: {
          name: "String"
        }
      },
      tableName: {
        required: true,
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDWTableDataSet: msRest.CompositeMapper = {
  serializedName: "SqlDWTable",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSet.type.polymorphicDiscriminator,
    uberParent: "DataSet",
    className: "SqlDWTableDataSet",
    modelProperties: {
      ...DataSet.type.modelProperties,
      dataSetId: {
        readOnly: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      dataWarehouseName: {
        required: true,
        serializedName: "properties.dataWarehouseName",
        type: {
          name: "String"
        }
      },
      schemaName: {
        required: true,
        serializedName: "properties.schemaName",
        type: {
          name: "String"
        }
      },
      sqlServerResourceId: {
        required: true,
        serializedName: "properties.sqlServerResourceId",
        type: {
          name: "String"
        }
      },
      tableName: {
        required: true,
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlDWTableDataSetMapping: msRest.CompositeMapper = {
  serializedName: "SqlDWTable",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataSetMapping.type.polymorphicDiscriminator,
    uberParent: "DataSetMapping",
    className: "SqlDWTableDataSetMapping",
    modelProperties: {
      ...DataSetMapping.type.modelProperties,
      dataSetId: {
        required: true,
        serializedName: "properties.dataSetId",
        type: {
          name: "String"
        }
      },
      dataSetMappingStatus: {
        readOnly: true,
        serializedName: "properties.dataSetMappingStatus",
        type: {
          name: "String"
        }
      },
      dataWarehouseName: {
        required: true,
        serializedName: "properties.dataWarehouseName",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      schemaName: {
        required: true,
        serializedName: "properties.schemaName",
        type: {
          name: "String"
        }
      },
      sqlServerResourceId: {
        required: true,
        serializedName: "properties.sqlServerResourceId",
        type: {
          name: "String"
        }
      },
      tableName: {
        required: true,
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SynchronizationDetails: msRest.CompositeMapper = {
  serializedName: "SynchronizationDetails",
  type: {
    name: "Composite",
    className: "SynchronizationDetails",
    modelProperties: {
      dataSetId: {
        readOnly: true,
        serializedName: "dataSetId",
        type: {
          name: "String"
        }
      },
      dataSetType: {
        readOnly: true,
        serializedName: "dataSetType",
        type: {
          name: "String"
        }
      },
      durationMs: {
        readOnly: true,
        serializedName: "durationMs",
        type: {
          name: "Number"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      filesRead: {
        readOnly: true,
        serializedName: "filesRead",
        type: {
          name: "Number"
        }
      },
      filesWritten: {
        readOnly: true,
        serializedName: "filesWritten",
        type: {
          name: "Number"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      rowsCopied: {
        readOnly: true,
        serializedName: "rowsCopied",
        type: {
          name: "Number"
        }
      },
      rowsRead: {
        readOnly: true,
        serializedName: "rowsRead",
        type: {
          name: "Number"
        }
      },
      sizeRead: {
        readOnly: true,
        serializedName: "sizeRead",
        type: {
          name: "Number"
        }
      },
      sizeWritten: {
        readOnly: true,
        serializedName: "sizeWritten",
        type: {
          name: "Number"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      vCore: {
        readOnly: true,
        serializedName: "vCore",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Synchronize: msRest.CompositeMapper = {
  serializedName: "Synchronize",
  type: {
    name: "Composite",
    className: "Synchronize",
    modelProperties: {
      synchronizationMode: {
        serializedName: "synchronizationMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountList: msRest.CompositeMapper = {
  serializedName: "AccountList",
  type: {
    name: "Composite",
    className: "AccountList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Account"
            }
          }
        }
      }
    }
  }
};

export const ConsumerInvitationList: msRest.CompositeMapper = {
  serializedName: "ConsumerInvitationList",
  type: {
    name: "Composite",
    className: "ConsumerInvitationList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConsumerInvitation"
            }
          }
        }
      }
    }
  }
};

export const DataSetList: msRest.CompositeMapper = {
  serializedName: "DataSetList",
  type: {
    name: "Composite",
    className: "DataSetList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataSet"
            }
          }
        }
      }
    }
  }
};

export const DataSetMappingList: msRest.CompositeMapper = {
  serializedName: "DataSetMappingList",
  type: {
    name: "Composite",
    className: "DataSetMappingList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataSetMapping"
            }
          }
        }
      }
    }
  }
};

export const InvitationList: msRest.CompositeMapper = {
  serializedName: "InvitationList",
  type: {
    name: "Composite",
    className: "InvitationList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Invitation"
            }
          }
        }
      }
    }
  }
};

export const OperationList: msRest.CompositeMapper = {
  serializedName: "OperationList",
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationModel"
            }
          }
        }
      }
    }
  }
};

export const SynchronizationDetailsList: msRest.CompositeMapper = {
  serializedName: "SynchronizationDetailsList",
  type: {
    name: "Composite",
    className: "SynchronizationDetailsList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SynchronizationDetails"
            }
          }
        }
      }
    }
  }
};

export const ShareSynchronizationList: msRest.CompositeMapper = {
  serializedName: "ShareSynchronizationList",
  type: {
    name: "Composite",
    className: "ShareSynchronizationList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ShareSynchronization"
            }
          }
        }
      }
    }
  }
};

export const ShareList: msRest.CompositeMapper = {
  serializedName: "ShareList",
  type: {
    name: "Composite",
    className: "ShareList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Share"
            }
          }
        }
      }
    }
  }
};

export const ProviderShareSubscriptionList: msRest.CompositeMapper = {
  serializedName: "ProviderShareSubscriptionList",
  type: {
    name: "Composite",
    className: "ProviderShareSubscriptionList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProviderShareSubscription"
            }
          }
        }
      }
    }
  }
};

export const SourceShareSynchronizationSettingList: msRest.CompositeMapper = {
  serializedName: "SourceShareSynchronizationSettingList",
  type: {
    name: "Composite",
    className: "SourceShareSynchronizationSettingList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SourceShareSynchronizationSetting"
            }
          }
        }
      }
    }
  }
};

export const ShareSubscriptionSynchronizationList: msRest.CompositeMapper = {
  serializedName: "ShareSubscriptionSynchronizationList",
  type: {
    name: "Composite",
    className: "ShareSubscriptionSynchronizationList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ShareSubscriptionSynchronization"
            }
          }
        }
      }
    }
  }
};

export const ShareSubscriptionList: msRest.CompositeMapper = {
  serializedName: "ShareSubscriptionList",
  type: {
    name: "Composite",
    className: "ShareSubscriptionList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ShareSubscription"
            }
          }
        }
      }
    }
  }
};

export const ConsumerSourceDataSetList: msRest.CompositeMapper = {
  serializedName: "ConsumerSourceDataSetList",
  type: {
    name: "Composite",
    className: "ConsumerSourceDataSetList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConsumerSourceDataSet"
            }
          }
        }
      }
    }
  }
};

export const SynchronizationSettingList: msRest.CompositeMapper = {
  serializedName: "SynchronizationSettingList",
  type: {
    name: "Composite",
    className: "SynchronizationSettingList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SynchronizationSetting"
            }
          }
        }
      }
    }
  }
};

export const TriggerList: msRest.CompositeMapper = {
  serializedName: "TriggerList",
  type: {
    name: "Composite",
    className: "TriggerList",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Trigger"
            }
          }
        }
      }
    }
  }
};

export const discriminators = {
  'DataSet.AdlsGen1File' : ADLSGen1FileDataSet,
  'DataSet.AdlsGen1Folder' : ADLSGen1FolderDataSet,
  'DataSet.AdlsGen2File' : ADLSGen2FileDataSet,
  'DataSetMapping.AdlsGen2File' : ADLSGen2FileDataSetMapping,
  'DataSet.AdlsGen2FileSystem' : ADLSGen2FileSystemDataSet,
  'DataSetMapping.AdlsGen2FileSystem' : ADLSGen2FileSystemDataSetMapping,
  'DataSet.AdlsGen2Folder' : ADLSGen2FolderDataSet,
  'DataSetMapping.AdlsGen2Folder' : ADLSGen2FolderDataSetMapping,
  'DataSet.Container' : BlobContainerDataSet,
  'DataSetMapping.Container' : BlobContainerDataSetMapping,
  'DataSet.Blob' : BlobDataSet,
  'DataSetMapping.Blob' : BlobDataSetMapping,
  'DataSet.BlobFolder' : BlobFolderDataSet,
  'DataSetMapping.BlobFolder' : BlobFolderDataSetMapping,
  'DataSet' : DataSet,
  'DataSetMapping' : DataSetMapping,
  'DataSet.KustoCluster' : KustoClusterDataSet,
  'DataSetMapping.KustoCluster' : KustoClusterDataSetMapping,
  'DataSet.KustoDatabase' : KustoDatabaseDataSet,
  'DataSetMapping.KustoDatabase' : KustoDatabaseDataSetMapping,
  'SourceShareSynchronizationSetting.ScheduleBased' : ScheduledSourceSynchronizationSetting,
  'SynchronizationSetting.ScheduleBased' : ScheduledSynchronizationSetting,
  'Trigger.ScheduleBased' : ScheduledTrigger,
  'SourceShareSynchronizationSetting' : SourceShareSynchronizationSetting,
  'DataSet.SqlDBTable' : SqlDBTableDataSet,
  'DataSetMapping.SqlDBTable' : SqlDBTableDataSetMapping,
  'DataSet.SqlDWTable' : SqlDWTableDataSet,
  'DataSetMapping.SqlDWTable' : SqlDWTableDataSetMapping,
  'SynchronizationSetting' : SynchronizationSetting,
  'Trigger' : Trigger

};
