/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing DeleteOperationResult.
 * The result of the request or operation.
 *
 */
export interface DeleteOperationResult {
  /**
   * @member {boolean} [operationResult] The result of the operation or
   * request.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly operationResult?: boolean;
}

/**
 * @interface
 * An interface representing EndpointPropertiesSubnetsItem.
 * Subnet first address, scope, and/or last address.
 *
 */
export interface EndpointPropertiesSubnetsItem {
  /**
   * @member {string} [first] First address in the subnet.
   */
  first?: string;
  /**
   * @member {string} [last] Last address in the subnet.
   */
  last?: string;
  /**
   * @member {number} [scope] Block size (number of leading bits in the subnet
   * mask).
   */
  scope?: number;
}

/**
 * @interface
 * An interface representing EndpointPropertiesCustomHeadersItem.
 * Custom header name and value.
 *
 */
export interface EndpointPropertiesCustomHeadersItem {
  /**
   * @member {string} [name] Header name.
   */
  name?: string;
  /**
   * @member {string} [value] Header value.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing HeatMapEndpoint.
 * Class which is a sparse representation of a Traffic Manager endpoint.
 *
 */
export interface HeatMapEndpoint {
  /**
   * @member {string} [resourceId] The ARM Resource ID of this Traffic Manager
   * endpoint.
   */
  resourceId?: string;
  /**
   * @member {number} [endpointId] A number uniquely identifying this endpoint
   * in query experiences.
   */
  endpointId?: number;
}

/**
 * @interface
 * An interface representing QueryExperience.
 * Class representing a Traffic Manager HeatMap query experience properties.
 *
 */
export interface QueryExperience {
  /**
   * @member {number} endpointId The id of the endpoint from the 'endpoints'
   * array which these queries were routed to.
   */
  endpointId: number;
  /**
   * @member {number} queryCount The number of queries originating from this
   * location.
   */
  queryCount: number;
  /**
   * @member {number} [latency] The latency experienced by queries originating
   * from this location.
   */
  latency?: number;
}

/**
 * @interface
 * An interface representing TrafficFlow.
 * Class representing a Traffic Manager HeatMap traffic flow properties.
 *
 */
export interface TrafficFlow {
  /**
   * @member {string} [sourceIp] The IP address that this query experience
   * originated from.
   */
  sourceIp?: string;
  /**
   * @member {number} [latitude] The approximate latitude that these queries
   * originated from.
   */
  latitude?: number;
  /**
   * @member {number} [longitude] The approximate longitude that these queries
   * originated from.
   */
  longitude?: number;
  /**
   * @member {QueryExperience[]} [queryExperiences] The query experiences
   * produced in this HeatMap calculation.
   */
  queryExperiences?: QueryExperience[];
}

/**
 * @interface
 * An interface representing Resource.
 * The core properties of ARM resources
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
   */
  id?: string;
  /**
   * @member {string} [name] The name of the resource
   */
  name?: string;
  /**
   * @member {string} [type] The type of the resource. Ex-
   * Microsoft.Network/trafficmanagerProfiles.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing ProxyResource.
 * The resource model definition for a ARM proxy resource. It will have
 * everything other than required location and tags
 *
 * @extends Resource
 */
export interface ProxyResource extends Resource {
}

/**
 * @interface
 * An interface representing HeatMapModel.
 * Class representing a Traffic Manager HeatMap.
 *
 * @extends ProxyResource
 */
export interface HeatMapModel extends ProxyResource {
  /**
   * @member {Date} [startTime] The beginning of the time window for this
   * HeatMap, inclusive.
   */
  startTime?: Date;
  /**
   * @member {Date} [endTime] The ending of the time window for this HeatMap,
   * exclusive.
   */
  endTime?: Date;
  /**
   * @member {HeatMapEndpoint[]} [endpoints] The endpoints used in this HeatMap
   * calculation.
   */
  endpoints?: HeatMapEndpoint[];
  /**
   * @member {TrafficFlow[]} [trafficFlows] The traffic flows produced in this
   * HeatMap calculation.
   */
  trafficFlows?: TrafficFlow[];
}

/**
 * @interface
 * An interface representing UserMetricsModel.
 * Class representing Traffic Manager User Metrics.
 *
 * @extends ProxyResource
 */
export interface UserMetricsModel extends ProxyResource {
  /**
   * @member {string} [key] The key returned by the User Metrics operation.
   */
  key?: string;
}

/**
 * @interface
 * An interface representing Endpoint.
 * Class representing a Traffic Manager endpoint.
 *
 * @extends ProxyResource
 */
export interface Endpoint extends ProxyResource {
  /**
   * @member {string} [targetResourceId] The Azure Resource URI of the of the
   * endpoint. Not applicable to endpoints of type 'ExternalEndpoints'.
   */
  targetResourceId?: string;
  /**
   * @member {string} [target] The fully-qualified DNS name or IP address of
   * the endpoint. Traffic Manager returns this value in DNS responses to
   * direct traffic to this endpoint.
   */
  target?: string;
  /**
   * @member {EndpointStatus} [endpointStatus] The status of the endpoint. If
   * the endpoint is Enabled, it is probed for endpoint health and is included
   * in the traffic routing method. Possible values include: 'Enabled',
   * 'Disabled'
   */
  endpointStatus?: EndpointStatus;
  /**
   * @member {number} [weight] The weight of this endpoint when using the
   * 'Weighted' traffic routing method. Possible values are from 1 to 1000.
   */
  weight?: number;
  /**
   * @member {number} [priority] The priority of this endpoint when using the
   * 'Priority' traffic routing method. Possible values are from 1 to 1000,
   * lower values represent higher priority. This is an optional parameter.  If
   * specified, it must be specified on all endpoints, and no two endpoints can
   * share the same priority value.
   */
  priority?: number;
  /**
   * @member {string} [endpointLocation] Specifies the location of the external
   * or nested endpoints when using the 'Performance' traffic routing method.
   */
  endpointLocation?: string;
  /**
   * @member {EndpointMonitorStatus} [endpointMonitorStatus] The monitoring
   * status of the endpoint. Possible values include: 'CheckingEndpoint',
   * 'Online', 'Degraded', 'Disabled', 'Inactive', 'Stopped'
   */
  endpointMonitorStatus?: EndpointMonitorStatus;
  /**
   * @member {number} [minChildEndpoints] The minimum number of endpoints that
   * must be available in the child profile in order for the parent profile to
   * be considered available. Only applicable to endpoint of type
   * 'NestedEndpoints'.
   */
  minChildEndpoints?: number;
  /**
   * @member {string[]} [geoMapping] The list of countries/regions mapped to
   * this endpoint when using the 'Geographic' traffic routing method. Please
   * consult Traffic Manager Geographic documentation for a full list of
   * accepted values.
   */
  geoMapping?: string[];
  /**
   * @member {EndpointPropertiesSubnetsItem[]} [subnets] The list of subnets,
   * IP addresses, and/or address ranges mapped to this endpoint when using the
   * 'Subnet' traffic routing method. An empty list will match all ranges not
   * covered by other endpoints.
   */
  subnets?: EndpointPropertiesSubnetsItem[];
  /**
   * @member {EndpointPropertiesCustomHeadersItem[]} [customHeaders] List of
   * custom headers.
   */
  customHeaders?: EndpointPropertiesCustomHeadersItem[];
}

/**
 * @interface
 * An interface representing CheckTrafficManagerRelativeDnsNameAvailabilityParameters.
 * Parameters supplied to check Traffic Manager name operation.
 *
 */
export interface CheckTrafficManagerRelativeDnsNameAvailabilityParameters {
  /**
   * @member {string} [name] The name of the resource.
   */
  name?: string;
  /**
   * @member {string} [type] The type of the resource.
   */
  type?: string;
}

/**
 * @interface
 * An interface representing DnsConfig.
 * Class containing DNS settings in a Traffic Manager profile.
 *
 */
export interface DnsConfig {
  /**
   * @member {string} [relativeName] The relative DNS name provided by this
   * Traffic Manager profile. This value is combined with the DNS domain name
   * used by Azure Traffic Manager to form the fully-qualified domain name
   * (FQDN) of the profile.
   */
  relativeName?: string;
  /**
   * @member {string} [fqdn] The fully-qualified domain name (FQDN) of the
   * Traffic Manager profile. This is formed from the concatenation of the
   * RelativeName with the DNS domain used by Azure Traffic Manager.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly fqdn?: string;
  /**
   * @member {number} [ttl] The DNS Time-To-Live (TTL), in seconds. This
   * informs the local DNS resolvers and DNS clients how long to cache DNS
   * responses provided by this Traffic Manager profile.
   */
  ttl?: number;
}

/**
 * @interface
 * An interface representing MonitorConfigCustomHeadersItem.
 * Custom header name and value.
 *
 */
export interface MonitorConfigCustomHeadersItem {
  /**
   * @member {string} [name] Header name.
   */
  name?: string;
  /**
   * @member {string} [value] Header value.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing MonitorConfigExpectedStatusCodeRangesItem.
 * Min and max value of a status code range.
 *
 */
export interface MonitorConfigExpectedStatusCodeRangesItem {
  /**
   * @member {number} [min] Min status code.
   */
  min?: number;
  /**
   * @member {number} [max] Max status code.
   */
  max?: number;
}

/**
 * @interface
 * An interface representing MonitorConfig.
 * Class containing endpoint monitoring settings in a Traffic Manager profile.
 *
 */
export interface MonitorConfig {
  /**
   * @member {ProfileMonitorStatus} [profileMonitorStatus] The profile-level
   * monitoring status of the Traffic Manager profile. Possible values include:
   * 'CheckingEndpoints', 'Online', 'Degraded', 'Disabled', 'Inactive'
   */
  profileMonitorStatus?: ProfileMonitorStatus;
  /**
   * @member {MonitorProtocol} [protocol] The protocol (HTTP, HTTPS or TCP)
   * used to probe for endpoint health. Possible values include: 'HTTP',
   * 'HTTPS', 'TCP'
   */
  protocol?: MonitorProtocol;
  /**
   * @member {number} [port] The TCP port used to probe for endpoint health.
   */
  port?: number;
  /**
   * @member {string} [path] The path relative to the endpoint domain name used
   * to probe for endpoint health.
   */
  path?: string;
  /**
   * @member {number} [intervalInSeconds] The monitor interval for endpoints in
   * this profile. This is the interval at which Traffic Manager will check the
   * health of each endpoint in this profile.
   */
  intervalInSeconds?: number;
  /**
   * @member {number} [timeoutInSeconds] The monitor timeout for endpoints in
   * this profile. This is the time that Traffic Manager allows endpoints in
   * this profile to response to the health check.
   */
  timeoutInSeconds?: number;
  /**
   * @member {number} [toleratedNumberOfFailures] The number of consecutive
   * failed health check that Traffic Manager tolerates before declaring an
   * endpoint in this profile Degraded after the next failed health check.
   */
  toleratedNumberOfFailures?: number;
  /**
   * @member {MonitorConfigCustomHeadersItem[]} [customHeaders] List of custom
   * headers.
   */
  customHeaders?: MonitorConfigCustomHeadersItem[];
  /**
   * @member {MonitorConfigExpectedStatusCodeRangesItem[]}
   * [expectedStatusCodeRanges] List of expected status code ranges.
   */
  expectedStatusCodeRanges?: MonitorConfigExpectedStatusCodeRangesItem[];
}

/**
 * @interface
 * An interface representing TrackedResource.
 * The resource model definition for a ARM tracked top level resource
 *
 * @extends Resource
 */
export interface TrackedResource extends Resource {
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * @member {string} [location] The Azure Region where the resource lives
   */
  location?: string;
}

/**
 * @interface
 * An interface representing Profile.
 * Class representing a Traffic Manager profile.
 *
 * @extends TrackedResource
 */
export interface Profile extends TrackedResource {
  /**
   * @member {ProfileStatus} [profileStatus] The status of the Traffic Manager
   * profile. Possible values include: 'Enabled', 'Disabled'
   */
  profileStatus?: ProfileStatus;
  /**
   * @member {TrafficRoutingMethod} [trafficRoutingMethod] The traffic routing
   * method of the Traffic Manager profile. Possible values include:
   * 'Performance', 'Priority', 'Weighted', 'Geographic', 'MultiValue',
   * 'Subnet'
   */
  trafficRoutingMethod?: TrafficRoutingMethod;
  /**
   * @member {DnsConfig} [dnsConfig] The DNS settings of the Traffic Manager
   * profile.
   */
  dnsConfig?: DnsConfig;
  /**
   * @member {MonitorConfig} [monitorConfig] The endpoint monitoring settings
   * of the Traffic Manager profile.
   */
  monitorConfig?: MonitorConfig;
  /**
   * @member {Endpoint[]} [endpoints] The list of endpoints in the Traffic
   * Manager profile.
   */
  endpoints?: Endpoint[];
  /**
   * @member {TrafficViewEnrollmentStatus} [trafficViewEnrollmentStatus]
   * Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic
   * Manager profile. Null, indicates 'Disabled'. Enabling this feature will
   * increase the cost of the Traffic Manage profile. Possible values include:
   * 'Enabled', 'Disabled'
   */
  trafficViewEnrollmentStatus?: TrafficViewEnrollmentStatus;
  /**
   * @member {number} [maxReturn] Maximum number of endpoints to be returned
   * for MultiValue routing type.
   */
  maxReturn?: number;
}

/**
 * @interface
 * An interface representing TrafficManagerNameAvailability.
 * Class representing a Traffic Manager Name Availability response.
 *
 */
export interface TrafficManagerNameAvailability {
  /**
   * @member {string} [name] The relative name.
   */
  name?: string;
  /**
   * @member {string} [type] Traffic Manager profile resource type.
   */
  type?: string;
  /**
   * @member {boolean} [nameAvailable] Describes whether the relative name is
   * available or not.
   */
  nameAvailable?: boolean;
  /**
   * @member {string} [reason] The reason why the name is not available, when
   * applicable.
   */
  reason?: string;
  /**
   * @member {string} [message] Descriptive message that explains why the name
   * is not available, when applicable.
   */
  message?: string;
}

/**
 * @interface
 * An interface representing Region.
 * Class representing a region in the Geographic hierarchy used with the
 * Geographic traffic routing method.
 *
 */
export interface Region {
  /**
   * @member {string} [code] The code of the region
   */
  code?: string;
  /**
   * @member {string} [name] The name of the region
   */
  name?: string;
  /**
   * @member {Region[]} [regions] The list of Regions grouped under this Region
   * in the Geographic Hierarchy.
   */
  regions?: Region[];
}

/**
 * @interface
 * An interface representing TrafficManagerGeographicHierarchy.
 * Class representing the Geographic hierarchy used with the Geographic traffic
 * routing method.
 *
 * @extends ProxyResource
 */
export interface TrafficManagerGeographicHierarchy extends ProxyResource {
  /**
   * @member {Region} [geographicHierarchy] The region at the root of the
   * hierarchy from all the regions in the hierarchy can be retrieved.
   */
  geographicHierarchy?: Region;
}

/**
 * @interface
 * An interface representing HeatMapGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface HeatMapGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number[]} [topLeft] The top left latitude,longitude pair of the
   * rectangular viewport to query for.
   */
  topLeft?: number[];
  /**
   * @member {number[]} [botRight] The bottom right latitude,longitude pair of
   * the rectangular viewport to query for.
   */
  botRight?: number[];
}

/**
 * @interface
 * An interface representing TrafficManagerManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface TrafficManagerManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the ProfileListResult.
 * The list Traffic Manager profiles operation response.
 *
 * @extends Array<Profile>
 */
export interface ProfileListResult extends Array<Profile> {
}

/**
 * Defines values for EndpointStatus.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type EndpointStatus = 'Enabled' | 'Disabled';

/**
 * Defines values for EndpointMonitorStatus.
 * Possible values include: 'CheckingEndpoint', 'Online', 'Degraded', 'Disabled', 'Inactive',
 * 'Stopped'
 * @readonly
 * @enum {string}
 */
export type EndpointMonitorStatus = 'CheckingEndpoint' | 'Online' | 'Degraded' | 'Disabled' | 'Inactive' | 'Stopped';

/**
 * Defines values for ProfileMonitorStatus.
 * Possible values include: 'CheckingEndpoints', 'Online', 'Degraded', 'Disabled', 'Inactive'
 * @readonly
 * @enum {string}
 */
export type ProfileMonitorStatus = 'CheckingEndpoints' | 'Online' | 'Degraded' | 'Disabled' | 'Inactive';

/**
 * Defines values for MonitorProtocol.
 * Possible values include: 'HTTP', 'HTTPS', 'TCP'
 * @readonly
 * @enum {string}
 */
export type MonitorProtocol = 'HTTP' | 'HTTPS' | 'TCP';

/**
 * Defines values for ProfileStatus.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type ProfileStatus = 'Enabled' | 'Disabled';

/**
 * Defines values for TrafficRoutingMethod.
 * Possible values include: 'Performance', 'Priority', 'Weighted', 'Geographic', 'MultiValue',
 * 'Subnet'
 * @readonly
 * @enum {string}
 */
export type TrafficRoutingMethod = 'Performance' | 'Priority' | 'Weighted' | 'Geographic' | 'MultiValue' | 'Subnet';

/**
 * Defines values for TrafficViewEnrollmentStatus.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type TrafficViewEnrollmentStatus = 'Enabled' | 'Disabled';

/**
 * Contains response data for the update operation.
 */
export type EndpointsUpdateResponse = Endpoint & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Endpoint;
    };
};

/**
 * Contains response data for the get operation.
 */
export type EndpointsGetResponse = Endpoint & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Endpoint;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type EndpointsCreateOrUpdateResponse = Endpoint & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Endpoint;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type EndpointsDeleteMethodResponse = DeleteOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeleteOperationResult;
    };
};

/**
 * Contains response data for the checkTrafficManagerRelativeDnsNameAvailability operation.
 */
export type ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityResponse = TrafficManagerNameAvailability & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TrafficManagerNameAvailability;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ProfilesListByResourceGroupResponse = ProfileListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProfileListResult;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type ProfilesListBySubscriptionResponse = ProfileListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProfileListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ProfilesGetResponse = Profile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Profile;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ProfilesCreateOrUpdateResponse = Profile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Profile;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type ProfilesDeleteMethodResponse = DeleteOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeleteOperationResult;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ProfilesUpdateResponse = Profile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Profile;
    };
};

/**
 * Contains response data for the getDefault operation.
 */
export type GeographicHierarchiesGetDefaultResponse = TrafficManagerGeographicHierarchy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TrafficManagerGeographicHierarchy;
    };
};

/**
 * Contains response data for the get operation.
 */
export type HeatMapGetResponse = HeatMapModel & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HeatMapModel;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TrafficManagerUserMetricsKeysGetResponse = UserMetricsModel & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UserMetricsModel;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type TrafficManagerUserMetricsKeysCreateOrUpdateResponse = UserMetricsModel & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UserMetricsModel;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type TrafficManagerUserMetricsKeysDeleteMethodResponse = DeleteOperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DeleteOperationResult;
    };
};
