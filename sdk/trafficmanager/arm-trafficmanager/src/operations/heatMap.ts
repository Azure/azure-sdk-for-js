/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/heatMapMappers";
import * as Parameters from "../models/parameters";
import { TrafficManagerManagementClientContext } from "../trafficManagerManagementClientContext";

/** Class representing a HeatMap. */
export class HeatMap {
  private readonly client: TrafficManagerManagementClientContext;

  /**
   * Create a HeatMap.
   * @param {TrafficManagerManagementClientContext} client Reference to the service client.
   */
  constructor(client: TrafficManagerManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets latest heatmap for Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint.
   * @param profileName The name of the Traffic Manager profile.
   * @param [options] The optional parameters
   * @returns Promise<Models.HeatMapGetResponse>
   */
  get(resourceGroupName: string, profileName: string, options?: Models.HeatMapGetOptionalParams): Promise<Models.HeatMapGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint.
   * @param profileName The name of the Traffic Manager profile.
   * @param callback The callback
   */
  get(resourceGroupName: string, profileName: string, callback: msRest.ServiceCallback<Models.HeatMapModel>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint.
   * @param profileName The name of the Traffic Manager profile.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, profileName: string, options: Models.HeatMapGetOptionalParams, callback: msRest.ServiceCallback<Models.HeatMapModel>): void;
  get(resourceGroupName: string, profileName: string, options?: Models.HeatMapGetOptionalParams | msRest.ServiceCallback<Models.HeatMapModel>, callback?: msRest.ServiceCallback<Models.HeatMapModel>): Promise<Models.HeatMapGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.HeatMapGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.heatMapType
  ],
  queryParameters: [
    Parameters.topLeft,
    Parameters.botRight,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HeatMapModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
