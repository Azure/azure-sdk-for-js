/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/profilesMappers";
import * as Parameters from "../models/parameters";
import { TrafficManagerManagementClientContext } from "../trafficManagerManagementClientContext";

/** Class representing a Profiles. */
export class Profiles {
  private readonly client: TrafficManagerManagementClientContext;

  /**
   * Create a Profiles.
   * @param {TrafficManagerManagementClientContext} client Reference to the service client.
   */
  constructor(client: TrafficManagerManagementClientContext) {
    this.client = client;
  }

  /**
   * Checks the availability of a Traffic Manager Relative DNS name.
   * @param parameters The Traffic Manager name parameters supplied to the
   * CheckTrafficManagerNameAvailability operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityResponse>
   */
  checkTrafficManagerRelativeDnsNameAvailability(parameters: Models.CheckTrafficManagerRelativeDnsNameAvailabilityParameters, options?: msRest.RequestOptionsBase): Promise<Models.ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityResponse>;
  /**
   * @param parameters The Traffic Manager name parameters supplied to the
   * CheckTrafficManagerNameAvailability operation.
   * @param callback The callback
   */
  checkTrafficManagerRelativeDnsNameAvailability(parameters: Models.CheckTrafficManagerRelativeDnsNameAvailabilityParameters, callback: msRest.ServiceCallback<Models.TrafficManagerNameAvailability>): void;
  /**
   * @param parameters The Traffic Manager name parameters supplied to the
   * CheckTrafficManagerNameAvailability operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkTrafficManagerRelativeDnsNameAvailability(parameters: Models.CheckTrafficManagerRelativeDnsNameAvailabilityParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TrafficManagerNameAvailability>): void;
  checkTrafficManagerRelativeDnsNameAvailability(parameters: Models.CheckTrafficManagerRelativeDnsNameAvailabilityParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TrafficManagerNameAvailability>, callback?: msRest.ServiceCallback<Models.TrafficManagerNameAvailability>): Promise<Models.ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        options
      },
      checkTrafficManagerRelativeDnsNameAvailabilityOperationSpec,
      callback) as Promise<Models.ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityResponse>;
  }

  /**
   * Lists all Traffic Manager profiles within a resource group.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profiles
   * to be listed.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProfilesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ProfilesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profiles
   * to be listed.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ProfileListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profiles
   * to be listed.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProfileListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProfileListResult>, callback?: msRest.ServiceCallback<Models.ProfileListResult>): Promise<Models.ProfilesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ProfilesListByResourceGroupResponse>;
  }

  /**
   * Lists all Traffic Manager profiles within a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProfilesListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.ProfilesListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.ProfileListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProfileListResult>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProfileListResult>, callback?: msRest.ServiceCallback<Models.ProfileListResult>): Promise<Models.ProfilesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.ProfilesListBySubscriptionResponse>;
  }

  /**
   * Gets a Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProfilesGetResponse>
   */
  get(resourceGroupName: string, profileName: string, options?: msRest.RequestOptionsBase): Promise<Models.ProfilesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param callback The callback
   */
  get(resourceGroupName: string, profileName: string, callback: msRest.ServiceCallback<Models.Profile>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, profileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Profile>): void;
  get(resourceGroupName: string, profileName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Profile>, callback?: msRest.ServiceCallback<Models.Profile>): Promise<Models.ProfilesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ProfilesGetResponse>;
  }

  /**
   * Create or update a Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param parameters The Traffic Manager profile parameters supplied to the CreateOrUpdate
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProfilesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, profileName: string, parameters: Models.Profile, options?: msRest.RequestOptionsBase): Promise<Models.ProfilesCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param parameters The Traffic Manager profile parameters supplied to the CreateOrUpdate
   * operation.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, profileName: string, parameters: Models.Profile, callback: msRest.ServiceCallback<Models.Profile>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param parameters The Traffic Manager profile parameters supplied to the CreateOrUpdate
   * operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, profileName: string, parameters: Models.Profile, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Profile>): void;
  createOrUpdate(resourceGroupName: string, profileName: string, parameters: Models.Profile, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Profile>, callback?: msRest.ServiceCallback<Models.Profile>): Promise<Models.ProfilesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.ProfilesCreateOrUpdateResponse>;
  }

  /**
   * Deletes a Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile
   * to be deleted.
   * @param profileName The name of the Traffic Manager profile to be deleted.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProfilesDeleteMethodResponse>
   */
  deleteMethod(resourceGroupName: string, profileName: string, options?: msRest.RequestOptionsBase): Promise<Models.ProfilesDeleteMethodResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile
   * to be deleted.
   * @param profileName The name of the Traffic Manager profile to be deleted.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, profileName: string, callback: msRest.ServiceCallback<Models.DeleteOperationResult>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile
   * to be deleted.
   * @param profileName The name of the Traffic Manager profile to be deleted.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, profileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeleteOperationResult>): void;
  deleteMethod(resourceGroupName: string, profileName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeleteOperationResult>, callback?: msRest.ServiceCallback<Models.DeleteOperationResult>): Promise<Models.ProfilesDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.ProfilesDeleteMethodResponse>;
  }

  /**
   * Update a Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param parameters The Traffic Manager profile parameters supplied to the Update operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProfilesUpdateResponse>
   */
  update(resourceGroupName: string, profileName: string, parameters: Models.Profile, options?: msRest.RequestOptionsBase): Promise<Models.ProfilesUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param parameters The Traffic Manager profile parameters supplied to the Update operation.
   * @param callback The callback
   */
  update(resourceGroupName: string, profileName: string, parameters: Models.Profile, callback: msRest.ServiceCallback<Models.Profile>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param parameters The Traffic Manager profile parameters supplied to the Update operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, profileName: string, parameters: Models.Profile, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Profile>): void;
  update(resourceGroupName: string, profileName: string, parameters: Models.Profile, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Profile>, callback?: msRest.ServiceCallback<Models.Profile>): Promise<Models.ProfilesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ProfilesUpdateResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkTrafficManagerRelativeDnsNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Network/checkTrafficManagerNameAvailability",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CheckTrafficManagerRelativeDnsNameAvailabilityParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TrafficManagerNameAvailability
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProfileListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficmanagerprofiles",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProfileListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Profile
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Profile,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Profile
    },
    201: {
      bodyMapper: Mappers.Profile
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeleteOperationResult
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Profile,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Profile
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
