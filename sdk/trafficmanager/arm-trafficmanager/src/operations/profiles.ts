/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Profiles } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TrafficManagerManagementClient } from "../trafficManagerManagementClient";
import {
  Profile,
  ProfilesListByResourceGroupOptionalParams,
  ProfilesListBySubscriptionOptionalParams,
  CheckTrafficManagerRelativeDnsNameAvailabilityParameters,
  ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityOptionalParams,
  ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityResponse,
  ProfilesListByResourceGroupResponse,
  ProfilesListBySubscriptionResponse,
  ProfilesGetOptionalParams,
  ProfilesGetResponse,
  ProfilesCreateOrUpdateOptionalParams,
  ProfilesCreateOrUpdateResponse,
  ProfilesDeleteOptionalParams,
  ProfilesDeleteResponse,
  ProfilesUpdateOptionalParams,
  ProfilesUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Profiles operations. */
export class ProfilesImpl implements Profiles {
  private readonly client: TrafficManagerManagementClient;

  /**
   * Initialize a new instance of the class Profiles class.
   * @param client Reference to the service client
   */
  constructor(client: TrafficManagerManagementClient) {
    this.client = client;
  }

  /**
   * Lists all Traffic Manager profiles within a resource group.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profiles to
   *                          be listed.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: ProfilesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Profile> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: ProfilesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Profile[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: ProfilesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Profile> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all Traffic Manager profiles within a subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: ProfilesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Profile> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: ProfilesListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Profile[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
  }

  private async *listBySubscriptionPagingAll(
    options?: ProfilesListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Profile> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Checks the availability of a Traffic Manager Relative DNS name.
   * @param parameters The Traffic Manager name parameters supplied to the
   *                   CheckTrafficManagerNameAvailability operation.
   * @param options The options parameters.
   */
  checkTrafficManagerRelativeDnsNameAvailability(
    parameters: CheckTrafficManagerRelativeDnsNameAvailabilityParameters,
    options?: ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityOptionalParams
  ): Promise<ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { parameters, options },
      checkTrafficManagerRelativeDnsNameAvailabilityOperationSpec
    );
  }

  /**
   * Lists all Traffic Manager profiles within a resource group.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profiles to
   *                          be listed.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: ProfilesListByResourceGroupOptionalParams
  ): Promise<ProfilesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Lists all Traffic Manager profiles within a subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: ProfilesListBySubscriptionOptionalParams
  ): Promise<ProfilesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Gets a Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    profileName: string,
    options?: ProfilesGetOptionalParams
  ): Promise<ProfilesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, profileName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update a Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param parameters The Traffic Manager profile parameters supplied to the CreateOrUpdate operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    profileName: string,
    parameters: Profile,
    options?: ProfilesCreateOrUpdateOptionalParams
  ): Promise<ProfilesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, profileName, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes a Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile to be
   *                          deleted.
   * @param profileName The name of the Traffic Manager profile to be deleted.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    profileName: string,
    options?: ProfilesDeleteOptionalParams
  ): Promise<ProfilesDeleteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, profileName, options },
      deleteOperationSpec
    );
  }

  /**
   * Update a Traffic Manager profile.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager profile.
   * @param profileName The name of the Traffic Manager profile.
   * @param parameters The Traffic Manager profile parameters supplied to the Update operation.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    profileName: string,
    parameters: Profile,
    options?: ProfilesUpdateOptionalParams
  ): Promise<ProfilesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, profileName, parameters, options },
      updateOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkTrafficManagerRelativeDnsNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Network/checkTrafficManagerNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.TrafficManagerNameAvailability
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProfileListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficmanagerprofiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProfileListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Profile
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Profile
    },
    201: {
      bodyMapper: Mappers.Profile
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeleteOperationResult
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Profile
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
