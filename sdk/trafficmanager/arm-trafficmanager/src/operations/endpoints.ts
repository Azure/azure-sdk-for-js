/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Endpoints } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TrafficManagerManagementClient } from "../trafficManagerManagementClient";
import {
  Endpoint,
  EndpointType,
  EndpointsUpdateOptionalParams,
  EndpointsUpdateResponse,
  EndpointsGetOptionalParams,
  EndpointsGetResponse,
  EndpointsCreateOrUpdateOptionalParams,
  EndpointsCreateOrUpdateResponse,
  EndpointsDeleteOptionalParams,
  EndpointsDeleteResponse
} from "../models";

/** Class containing Endpoints operations. */
export class EndpointsImpl implements Endpoints {
  private readonly client: TrafficManagerManagementClient;

  /**
   * Initialize a new instance of the class Endpoints class.
   * @param client Reference to the service client
   */
  constructor(client: TrafficManagerManagementClient) {
    this.client = client;
  }

  /**
   * Update a Traffic Manager endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint to be updated.
   * @param endpointName The name of the Traffic Manager endpoint to be updated.
   * @param parameters The Traffic Manager endpoint parameters supplied to the Update operation.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    profileName: string,
    endpointType: EndpointType,
    endpointName: string,
    parameters: Endpoint,
    options?: EndpointsUpdateOptionalParams
  ): Promise<EndpointsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        endpointType,
        endpointName,
        parameters,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * Gets a Traffic Manager endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint.
   * @param endpointName The name of the Traffic Manager endpoint.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    profileName: string,
    endpointType: EndpointType,
    endpointName: string,
    options?: EndpointsGetOptionalParams
  ): Promise<EndpointsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, profileName, endpointType, endpointName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update a Traffic Manager endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint to be created or updated.
   * @param endpointName The name of the Traffic Manager endpoint to be created or updated.
   * @param parameters The Traffic Manager endpoint parameters supplied to the CreateOrUpdate operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    profileName: string,
    endpointType: EndpointType,
    endpointName: string,
    parameters: Endpoint,
    options?: EndpointsCreateOrUpdateOptionalParams
  ): Promise<EndpointsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        endpointType,
        endpointName,
        parameters,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes a Traffic Manager endpoint.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint to be deleted.
   * @param endpointName The name of the Traffic Manager endpoint to be deleted.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    profileName: string,
    endpointType: EndpointType,
    endpointName: string,
    options?: EndpointsDeleteOptionalParams
  ): Promise<EndpointsDeleteResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, profileName, endpointType, endpointName, options },
      deleteOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.endpointType,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.endpointType,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint
    },
    201: {
      bodyMapper: Mappers.Endpoint
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.endpointType,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeleteOperationResult
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.endpointType,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
