/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/endpointsMappers";
import * as Parameters from "../models/parameters";
import { TrafficManagerManagementClientContext } from "../trafficManagerManagementClientContext";

/** Class representing a Endpoints. */
export class Endpoints {
  private readonly client: TrafficManagerManagementClientContext;

  /**
   * Create a Endpoints.
   * @param {TrafficManagerManagementClientContext} client Reference to the service client.
   */
  constructor(client: TrafficManagerManagementClientContext) {
    this.client = client;
  }

  /**
   * Update a Traffic Manager endpoint.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint
   * to be updated.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint to be updated.
   * @param endpointName The name of the Traffic Manager endpoint to be updated.
   * @param parameters The Traffic Manager endpoint parameters supplied to the Update operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EndpointsUpdateResponse>
   */
  update(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: Models.Endpoint, options?: msRest.RequestOptionsBase): Promise<Models.EndpointsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint
   * to be updated.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint to be updated.
   * @param endpointName The name of the Traffic Manager endpoint to be updated.
   * @param parameters The Traffic Manager endpoint parameters supplied to the Update operation.
   * @param callback The callback
   */
  update(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: Models.Endpoint, callback: msRest.ServiceCallback<Models.Endpoint>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint
   * to be updated.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint to be updated.
   * @param endpointName The name of the Traffic Manager endpoint to be updated.
   * @param parameters The Traffic Manager endpoint parameters supplied to the Update operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: Models.Endpoint, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Endpoint>): void;
  update(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: Models.Endpoint, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Endpoint>, callback?: msRest.ServiceCallback<Models.Endpoint>): Promise<Models.EndpointsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        endpointType,
        endpointName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.EndpointsUpdateResponse>;
  }

  /**
   * Gets a Traffic Manager endpoint.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint.
   * @param endpointName The name of the Traffic Manager endpoint.
   * @param [options] The optional parameters
   * @returns Promise<Models.EndpointsGetResponse>
   */
  get(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options?: msRest.RequestOptionsBase): Promise<Models.EndpointsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint.
   * @param endpointName The name of the Traffic Manager endpoint.
   * @param callback The callback
   */
  get(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, callback: msRest.ServiceCallback<Models.Endpoint>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint.
   * @param endpointName The name of the Traffic Manager endpoint.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Endpoint>): void;
  get(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Endpoint>, callback?: msRest.ServiceCallback<Models.Endpoint>): Promise<Models.EndpointsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        endpointType,
        endpointName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.EndpointsGetResponse>;
  }

  /**
   * Create or update a Traffic Manager endpoint.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint
   * to be created or updated.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint to be created or updated.
   * @param endpointName The name of the Traffic Manager endpoint to be created or updated.
   * @param parameters The Traffic Manager endpoint parameters supplied to the CreateOrUpdate
   * operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.EndpointsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: Models.Endpoint, options?: msRest.RequestOptionsBase): Promise<Models.EndpointsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint
   * to be created or updated.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint to be created or updated.
   * @param endpointName The name of the Traffic Manager endpoint to be created or updated.
   * @param parameters The Traffic Manager endpoint parameters supplied to the CreateOrUpdate
   * operation.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: Models.Endpoint, callback: msRest.ServiceCallback<Models.Endpoint>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint
   * to be created or updated.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint to be created or updated.
   * @param endpointName The name of the Traffic Manager endpoint to be created or updated.
   * @param parameters The Traffic Manager endpoint parameters supplied to the CreateOrUpdate
   * operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: Models.Endpoint, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Endpoint>): void;
  createOrUpdate(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, parameters: Models.Endpoint, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Endpoint>, callback?: msRest.ServiceCallback<Models.Endpoint>): Promise<Models.EndpointsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        endpointType,
        endpointName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.EndpointsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a Traffic Manager endpoint.
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint
   * to be deleted.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint to be deleted.
   * @param endpointName The name of the Traffic Manager endpoint to be deleted.
   * @param [options] The optional parameters
   * @returns Promise<Models.EndpointsDeleteMethodResponse>
   */
  deleteMethod(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options?: msRest.RequestOptionsBase): Promise<Models.EndpointsDeleteMethodResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint
   * to be deleted.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint to be deleted.
   * @param endpointName The name of the Traffic Manager endpoint to be deleted.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, callback: msRest.ServiceCallback<Models.DeleteOperationResult>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Traffic Manager endpoint
   * to be deleted.
   * @param profileName The name of the Traffic Manager profile.
   * @param endpointType The type of the Traffic Manager endpoint to be deleted.
   * @param endpointName The name of the Traffic Manager endpoint to be deleted.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeleteOperationResult>): void;
  deleteMethod(resourceGroupName: string, profileName: string, endpointType: string, endpointName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeleteOperationResult>, callback?: msRest.ServiceCallback<Models.DeleteOperationResult>): Promise<Models.EndpointsDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        profileName,
        endpointType,
        endpointName,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.EndpointsDeleteMethodResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.endpointType,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Endpoint,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.endpointType,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.endpointType,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Endpoint,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Endpoint
    },
    201: {
      bodyMapper: Mappers.Endpoint
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.profileName,
    Parameters.endpointType,
    Parameters.endpointName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeleteOperationResult
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
