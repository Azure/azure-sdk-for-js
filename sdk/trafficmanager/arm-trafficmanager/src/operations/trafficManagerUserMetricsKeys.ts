/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { TrafficManagerUserMetricsKeys } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TrafficManagerManagementClient } from "../trafficManagerManagementClient";
import {
  TrafficManagerUserMetricsKeysGetOptionalParams,
  TrafficManagerUserMetricsKeysGetResponse,
  TrafficManagerUserMetricsKeysCreateOrUpdateOptionalParams,
  TrafficManagerUserMetricsKeysCreateOrUpdateResponse,
  TrafficManagerUserMetricsKeysDeleteOptionalParams,
  TrafficManagerUserMetricsKeysDeleteResponse
} from "../models";

/** Class containing TrafficManagerUserMetricsKeys operations. */
export class TrafficManagerUserMetricsKeysImpl
  implements TrafficManagerUserMetricsKeys {
  private readonly client: TrafficManagerManagementClient;

  /**
   * Initialize a new instance of the class TrafficManagerUserMetricsKeys class.
   * @param client Reference to the service client
   */
  constructor(client: TrafficManagerManagementClient) {
    this.client = client;
  }

  /**
   * Get the subscription-level key used for Real User Metrics collection.
   * @param options The options parameters.
   */
  get(
    options?: TrafficManagerUserMetricsKeysGetOptionalParams
  ): Promise<TrafficManagerUserMetricsKeysGetResponse> {
    return this.client.sendOperationRequest({ options }, getOperationSpec);
  }

  /**
   * Create or update a subscription-level key used for Real User Metrics collection.
   * @param options The options parameters.
   */
  createOrUpdate(
    options?: TrafficManagerUserMetricsKeysCreateOrUpdateOptionalParams
  ): Promise<TrafficManagerUserMetricsKeysCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete a subscription-level key used for Real User Metrics collection.
   * @param options The options parameters.
   */
  delete(
    options?: TrafficManagerUserMetricsKeysDeleteOptionalParams
  ): Promise<TrafficManagerUserMetricsKeysDeleteResponse> {
    return this.client.sendOperationRequest({ options }, deleteOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UserMetricsModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.UserMetricsModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.DeleteOperationResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
