/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/spacecraftsMappers";
import * as Parameters from "../models/parameters";
import { AzureOrbitalContext } from "../azureOrbitalContext";

/** Class representing a Spacecrafts. */
export class Spacecrafts {
  private readonly client: AzureOrbitalContext;

  /**
   * Create a Spacecrafts.
   * @param {AzureOrbitalContext} client Reference to the service client.
   */
  constructor(client: AzureOrbitalContext) {
    this.client = client;
  }

  /**
   * Return list of spacecrafts
   * @param [options] The optional parameters
   * @returns Promise<Models.SpacecraftsListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.SpacecraftsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.SpacecraftListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SpacecraftListResult>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SpacecraftListResult>, callback?: msRest.ServiceCallback<Models.SpacecraftListResult>): Promise<Models.SpacecraftsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.SpacecraftsListBySubscriptionResponse>;
  }

  /**
   * Return list of spacecrafts
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.SpacecraftsListResponse>
   */
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.SpacecraftsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.SpacecraftListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SpacecraftListResult>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SpacecraftListResult>, callback?: msRest.ServiceCallback<Models.SpacecraftListResult>): Promise<Models.SpacecraftsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SpacecraftsListResponse>;
  }

  /**
   * Gets the specified spacecraft in a specified resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param [options] The optional parameters
   * @returns Promise<Models.SpacecraftsGetResponse>
   */
  get(resourceGroupName: string, spacecraftName: string, options?: msRest.RequestOptionsBase): Promise<Models.SpacecraftsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param callback The callback
   */
  get(resourceGroupName: string, spacecraftName: string, callback: msRest.ServiceCallback<Models.Spacecraft>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, spacecraftName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Spacecraft>): void;
  get(resourceGroupName: string, spacecraftName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Spacecraft>, callback?: msRest.ServiceCallback<Models.Spacecraft>): Promise<Models.SpacecraftsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        spacecraftName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SpacecraftsGetResponse>;
  }

  /**
   * Creates or updates a spacecraft resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param location The geo-location where the resource lives
   * @param noradId NORAD ID of the spacecraft.
   * @param [options] The optional parameters
   * @returns Promise<Models.SpacecraftsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, spacecraftName: string, location: string, noradId: string, options?: Models.SpacecraftsCreateOrUpdateOptionalParams): Promise<Models.SpacecraftsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,spacecraftName,location,noradId,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SpacecraftsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a specified spacecraft resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, spacecraftName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,spacecraftName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Updates the specified spacecraft tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param [options] The optional parameters
   * @returns Promise<Models.SpacecraftsUpdateTagsResponse>
   */
  updateTags(resourceGroupName: string, spacecraftName: string, options?: Models.SpacecraftsUpdateTagsOptionalParams): Promise<Models.SpacecraftsUpdateTagsResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param callback The callback
   */
  updateTags(resourceGroupName: string, spacecraftName: string, callback: msRest.ServiceCallback<Models.Spacecraft>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param options The optional parameters
   * @param callback The callback
   */
  updateTags(resourceGroupName: string, spacecraftName: string, options: Models.SpacecraftsUpdateTagsOptionalParams, callback: msRest.ServiceCallback<Models.Spacecraft>): void;
  updateTags(resourceGroupName: string, spacecraftName: string, options?: Models.SpacecraftsUpdateTagsOptionalParams | msRest.ServiceCallback<Models.Spacecraft>, callback?: msRest.ServiceCallback<Models.Spacecraft>): Promise<Models.SpacecraftsUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        spacecraftName,
        options
      },
      updateTagsOperationSpec,
      callback) as Promise<Models.SpacecraftsUpdateTagsResponse>;
  }

  /**
   * Return list of available contacts
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param contactProfile The reference to the contact profile resource.
   * @param groundStationName Name of Azure Ground Station.
   * @param startTime Start time of a contact.
   * @param endTime End time of a contact.
   * @param [options] The optional parameters
   * @returns Promise<Models.SpacecraftsListAvailableContactsResponse>
   */
  listAvailableContacts(resourceGroupName: string, spacecraftName: string, contactProfile: Models.ResourceReference, groundStationName: string, startTime: Date | string, endTime: Date | string, options?: msRest.RequestOptionsBase): Promise<Models.SpacecraftsListAvailableContactsResponse> {
    return this.beginListAvailableContacts(resourceGroupName,spacecraftName,contactProfile,groundStationName,startTime,endTime,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SpacecraftsListAvailableContactsResponse>;
  }

  /**
   * Creates or updates a spacecraft resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param location The geo-location where the resource lives
   * @param noradId NORAD ID of the spacecraft.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, spacecraftName: string, location: string, noradId: string, options?: Models.SpacecraftsBeginCreateOrUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        spacecraftName,
        location,
        noradId,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a specified spacecraft resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, spacecraftName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        spacecraftName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Return list of available contacts
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param contactProfile The reference to the contact profile resource.
   * @param groundStationName Name of Azure Ground Station.
   * @param startTime Start time of a contact.
   * @param endTime End time of a contact.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginListAvailableContacts(resourceGroupName: string, spacecraftName: string, contactProfile: Models.ResourceReference, groundStationName: string, startTime: Date | string, endTime: Date | string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        spacecraftName,
        contactProfile,
        groundStationName,
        startTime,
        endTime,
        options
      },
      beginListAvailableContactsOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Orbital/spacecrafts",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SpacecraftListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SpacecraftListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spacecraftName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Spacecraft
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spacecraftName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.TagsObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Spacecraft
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spacecraftName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      tags: [
        "options",
        "tags"
      ],
      location: "location",
      noradId: "noradId",
      titleLine: [
        "options",
        "titleLine"
      ],
      tleLine1: [
        "options",
        "tleLine1"
      ],
      tleLine2: [
        "options",
        "tleLine2"
      ],
      links: [
        "options",
        "links"
      ]
    },
    mapper: {
      ...Mappers.Spacecraft,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Spacecraft
    },
    201: {
      bodyMapper: Mappers.Spacecraft
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spacecraftName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginListAvailableContactsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}/listAvailableContacts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spacecraftName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      contactProfile: "contactProfile",
      groundStationName: "groundStationName",
      startTime: "startTime",
      endTime: "endTime"
    },
    mapper: {
      ...Mappers.ContactParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AvailableContactsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
