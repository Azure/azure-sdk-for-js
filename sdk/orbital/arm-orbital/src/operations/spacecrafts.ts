/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Spacecrafts } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureOrbitalContext } from "../azureOrbitalContext";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Spacecraft,
  SpacecraftsListBySubscriptionOptionalParams,
  SpacecraftsListOptionalParams,
  SpacecraftsListBySubscriptionResponse,
  SpacecraftsListResponse,
  SpacecraftsGetOptionalParams,
  SpacecraftsGetResponse,
  SpacecraftsCreateOrUpdateOptionalParams,
  SpacecraftsCreateOrUpdateResponse,
  SpacecraftsDeleteOptionalParams,
  TagsObject,
  SpacecraftsUpdateTagsOptionalParams,
  SpacecraftsUpdateTagsResponse,
  ResourceReference,
  SpacecraftsListAvailableContactsOptionalParams,
  SpacecraftsListAvailableContactsResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Spacecrafts operations. */
export class SpacecraftsImpl implements Spacecrafts {
  private readonly client: AzureOrbitalContext;

  /**
   * Initialize a new instance of the class Spacecrafts class.
   * @param client Reference to the service client
   */
  constructor(client: AzureOrbitalContext) {
    this.client = client;
  }

  /**
   * Return list of spacecrafts
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: SpacecraftsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Spacecraft> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: SpacecraftsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Spacecraft[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
  }

  private async *listBySubscriptionPagingAll(
    options?: SpacecraftsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Spacecraft> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Return list of spacecrafts
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: SpacecraftsListOptionalParams
  ): PagedAsyncIterableIterator<Spacecraft> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: SpacecraftsListOptionalParams
  ): AsyncIterableIterator<Spacecraft[]> {
    let result = await this._list(resourceGroupName, options);
    yield result.value || [];
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: SpacecraftsListOptionalParams
  ): AsyncIterableIterator<Spacecraft> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Return list of spacecrafts
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: SpacecraftsListBySubscriptionOptionalParams
  ): Promise<SpacecraftsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Return list of spacecrafts
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: SpacecraftsListOptionalParams
  ): Promise<SpacecraftsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec
    );
  }

  /**
   * Gets the specified spacecraft in a specified resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    spacecraftName: string,
    options?: SpacecraftsGetOptionalParams
  ): Promise<SpacecraftsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, spacecraftName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a spacecraft resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param location The geo-location where the resource lives
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    spacecraftName: string,
    location: string,
    options?: SpacecraftsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SpacecraftsCreateOrUpdateResponse>,
      SpacecraftsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<SpacecraftsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, spacecraftName, location, options },
      createOrUpdateOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
  }

  /**
   * Creates or updates a spacecraft resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param location The geo-location where the resource lives
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    spacecraftName: string,
    location: string,
    options?: SpacecraftsCreateOrUpdateOptionalParams
  ): Promise<SpacecraftsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      spacecraftName,
      location,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a specified spacecraft resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    spacecraftName: string,
    options?: SpacecraftsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, spacecraftName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
  }

  /**
   * Deletes a specified spacecraft resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    spacecraftName: string,
    options?: SpacecraftsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      spacecraftName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the specified spacecraft tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param parameters Parameters supplied to update spacecraft tags.
   * @param options The options parameters.
   */
  updateTags(
    resourceGroupName: string,
    spacecraftName: string,
    parameters: TagsObject,
    options?: SpacecraftsUpdateTagsOptionalParams
  ): Promise<SpacecraftsUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, spacecraftName, parameters, options },
      updateTagsOperationSpec
    );
  }

  /**
   * Return list of available contacts
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param contactProfile The reference to the contact profile resource.
   * @param groundStationName Name of Azure Ground Station.
   * @param startTime Start time of a contact.
   * @param endTime End time of a contact.
   * @param options The options parameters.
   */
  async beginListAvailableContacts(
    resourceGroupName: string,
    spacecraftName: string,
    contactProfile: ResourceReference,
    groundStationName: string,
    startTime: Date,
    endTime: Date,
    options?: SpacecraftsListAvailableContactsOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SpacecraftsListAvailableContactsResponse>,
      SpacecraftsListAvailableContactsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<SpacecraftsListAvailableContactsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        spacecraftName,
        contactProfile,
        groundStationName,
        startTime,
        endTime,
        options
      },
      listAvailableContactsOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
  }

  /**
   * Return list of available contacts
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param contactProfile The reference to the contact profile resource.
   * @param groundStationName Name of Azure Ground Station.
   * @param startTime Start time of a contact.
   * @param endTime End time of a contact.
   * @param options The options parameters.
   */
  async beginListAvailableContactsAndWait(
    resourceGroupName: string,
    spacecraftName: string,
    contactProfile: ResourceReference,
    groundStationName: string,
    startTime: Date,
    endTime: Date,
    options?: SpacecraftsListAvailableContactsOptionalParams
  ): Promise<SpacecraftsListAvailableContactsResponse> {
    const poller = await this.beginListAvailableContacts(
      resourceGroupName,
      spacecraftName,
      contactProfile,
      groundStationName,
      startTime,
      endTime,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Orbital/spacecrafts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SpacecraftListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SpacecraftListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Spacecraft
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spacecraftName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Spacecraft
    },
    201: {
      bodyMapper: Mappers.Spacecraft
    },
    202: {
      bodyMapper: Mappers.Spacecraft
    },
    204: {
      bodyMapper: Mappers.Spacecraft
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: {
    parameterPath: {
      tags: ["options", "tags"],
      location: ["location"],
      noradId: ["options", "noradId"],
      titleLine: ["options", "titleLine"],
      tleLine1: ["options", "tleLine1"],
      tleLine2: ["options", "tleLine2"],
      links: ["options", "links"]
    },
    mapper: { ...Mappers.Spacecraft, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spacecraftName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spacecraftName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateTagsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Spacecraft
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spacecraftName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listAvailableContactsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}/listAvailableContacts",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableContactsListResult
    },
    201: {
      bodyMapper: Mappers.AvailableContactsListResult
    },
    202: {
      bodyMapper: Mappers.AvailableContactsListResult
    },
    204: {
      bodyMapper: Mappers.AvailableContactsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: {
    parameterPath: {
      contactProfile: ["contactProfile"],
      groundStationName: ["groundStationName"],
      startTime: ["startTime"],
      endTime: ["endTime"]
    },
    mapper: { ...Mappers.ContactParameters, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spacecraftName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
