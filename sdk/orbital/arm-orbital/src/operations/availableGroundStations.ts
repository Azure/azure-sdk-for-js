/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/availableGroundStationsMappers";
import * as Parameters from "../models/parameters";
import { AzureOrbitalContext } from "../azureOrbitalContext";

/** Class representing a AvailableGroundStations. */
export class AvailableGroundStations {
  private readonly client: AzureOrbitalContext;

  /**
   * Create a AvailableGroundStations.
   * @param {AzureOrbitalContext} client Reference to the service client.
   */
  constructor(client: AzureOrbitalContext) {
    this.client = client;
  }

  /**
   * Returns list of available ground stations
   * @param capability Ground Station Capability. Possible values include: 'EarthObservation',
   * 'Communication'
   * @param [options] The optional parameters
   * @returns Promise<Models.AvailableGroundStationsListByCapabilityResponse>
   */
  listByCapability(capability: Models.Capability, options?: msRest.RequestOptionsBase): Promise<Models.AvailableGroundStationsListByCapabilityResponse>;
  /**
   * @param capability Ground Station Capability. Possible values include: 'EarthObservation',
   * 'Communication'
   * @param callback The callback
   */
  listByCapability(capability: Models.Capability, callback: msRest.ServiceCallback<Models.AvailableGroundStationListResult>): void;
  /**
   * @param capability Ground Station Capability. Possible values include: 'EarthObservation',
   * 'Communication'
   * @param options The optional parameters
   * @param callback The callback
   */
  listByCapability(capability: Models.Capability, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AvailableGroundStationListResult>): void;
  listByCapability(capability: Models.Capability, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AvailableGroundStationListResult>, callback?: msRest.ServiceCallback<Models.AvailableGroundStationListResult>): Promise<Models.AvailableGroundStationsListByCapabilityResponse> {
    return this.client.sendOperationRequest(
      {
        capability,
        options
      },
      listByCapabilityOperationSpec,
      callback) as Promise<Models.AvailableGroundStationsListByCapabilityResponse>;
  }

  /**
   * Gets the specified  available ground station
   * @param groundStationName Ground Station name
   * @param [options] The optional parameters
   * @returns Promise<Models.AvailableGroundStationsGetResponse>
   */
  get(groundStationName: string, options?: msRest.RequestOptionsBase): Promise<Models.AvailableGroundStationsGetResponse>;
  /**
   * @param groundStationName Ground Station name
   * @param callback The callback
   */
  get(groundStationName: string, callback: msRest.ServiceCallback<Models.AvailableGroundStation>): void;
  /**
   * @param groundStationName Ground Station name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(groundStationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AvailableGroundStation>): void;
  get(groundStationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AvailableGroundStation>, callback?: msRest.ServiceCallback<Models.AvailableGroundStation>): Promise<Models.AvailableGroundStationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        groundStationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.AvailableGroundStationsGetResponse>;
  }

  /**
   * Returns list of available ground stations
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param capability Ground Station Capability. Possible values include: 'EarthObservation',
   * 'Communication'
   * @param [options] The optional parameters
   * @returns Promise<Models.AvailableGroundStationsListByCapabilityNextResponse>
   */
  listByCapabilityNext(nextPageLink: string, capability: Models.Capability, options?: msRest.RequestOptionsBase): Promise<Models.AvailableGroundStationsListByCapabilityNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param capability Ground Station Capability. Possible values include: 'EarthObservation',
   * 'Communication'
   * @param callback The callback
   */
  listByCapabilityNext(nextPageLink: string, capability: Models.Capability, callback: msRest.ServiceCallback<Models.AvailableGroundStationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param capability Ground Station Capability. Possible values include: 'EarthObservation',
   * 'Communication'
   * @param options The optional parameters
   * @param callback The callback
   */
  listByCapabilityNext(nextPageLink: string, capability: Models.Capability, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AvailableGroundStationListResult>): void;
  listByCapabilityNext(nextPageLink: string, capability: Models.Capability, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AvailableGroundStationListResult>, callback?: msRest.ServiceCallback<Models.AvailableGroundStationListResult>): Promise<Models.AvailableGroundStationsListByCapabilityNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        capability,
        options
      },
      listByCapabilityNextOperationSpec,
      callback) as Promise<Models.AvailableGroundStationsListByCapabilityNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByCapabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Orbital/availableGroundStations",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.capability
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AvailableGroundStationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Orbital/availableGroundStations/{groundStationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.groundStationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AvailableGroundStation
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByCapabilityNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.capability
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AvailableGroundStationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
