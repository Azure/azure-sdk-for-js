/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/contactsMappers";
import * as Parameters from "../models/parameters";
import { AzureOrbitalContext } from "../azureOrbitalContext";

/** Class representing a Contacts. */
export class Contacts {
  private readonly client: AzureOrbitalContext;

  /**
   * Create a Contacts.
   * @param {AzureOrbitalContext} client Reference to the service client.
   */
  constructor(client: AzureOrbitalContext) {
    this.client = client;
  }

  /**
   * Returns list of contacts by spacecraftName
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param [options] The optional parameters
   * @returns Promise<Models.ContactsListResponse>
   */
  list(resourceGroupName: string, spacecraftName: string, options?: msRest.RequestOptionsBase): Promise<Models.ContactsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param callback The callback
   */
  list(resourceGroupName: string, spacecraftName: string, callback: msRest.ServiceCallback<Models.ContactListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, spacecraftName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContactListResult>): void;
  list(resourceGroupName: string, spacecraftName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ContactListResult>, callback?: msRest.ServiceCallback<Models.ContactListResult>): Promise<Models.ContactsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        spacecraftName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ContactsListResponse>;
  }

  /**
   * Gets the specified contact in a specified resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param contactName Contact Name
   * @param [options] The optional parameters
   * @returns Promise<Models.ContactsGetResponse>
   */
  get(resourceGroupName: string, spacecraftName: string, contactName: string, options?: msRest.RequestOptionsBase): Promise<Models.ContactsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param contactName Contact Name
   * @param callback The callback
   */
  get(resourceGroupName: string, spacecraftName: string, contactName: string, callback: msRest.ServiceCallback<Models.Contact>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param contactName Contact Name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, spacecraftName: string, contactName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Contact>): void;
  get(resourceGroupName: string, spacecraftName: string, contactName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Contact>, callback?: msRest.ServiceCallback<Models.Contact>): Promise<Models.ContactsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        spacecraftName,
        contactName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ContactsGetResponse>;
  }

  /**
   * Creates a contact.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param contactName Contact Name
   * @param parameters The parameters to provide for the created contact.
   * @param [options] The optional parameters
   * @returns Promise<Models.ContactsCreateResponse>
   */
  create(resourceGroupName: string, spacecraftName: string, contactName: string, parameters: Models.Contact, options?: msRest.RequestOptionsBase): Promise<Models.ContactsCreateResponse> {
    return this.beginCreate(resourceGroupName,spacecraftName,contactName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ContactsCreateResponse>;
  }

  /**
   * Deletes a specified contact
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param contactName Contact Name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, spacecraftName: string, contactName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,spacecraftName,contactName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates a contact.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param contactName Contact Name
   * @param parameters The parameters to provide for the created contact.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, spacecraftName: string, contactName: string, parameters: Models.Contact, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        spacecraftName,
        contactName,
        parameters,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Deletes a specified contact
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spacecraftName Spacecraft ID
   * @param contactName Contact Name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, spacecraftName: string, contactName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        spacecraftName,
        contactName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}/contacts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spacecraftName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContactListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}/contacts/{contactName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spacecraftName,
    Parameters.contactName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Contact
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}/contacts/{contactName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spacecraftName,
    Parameters.contactName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Contact,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Contact
    },
    201: {
      bodyMapper: Mappers.Contact
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}/contacts/{contactName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spacecraftName,
    Parameters.contactName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
