/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/contactProfilesMappers";
import * as Parameters from "../models/parameters";
import { AzureOrbitalContext } from "../azureOrbitalContext";

/** Class representing a ContactProfiles. */
export class ContactProfiles {
  private readonly client: AzureOrbitalContext;

  /**
   * Create a ContactProfiles.
   * @param {AzureOrbitalContext} client Reference to the service client.
   */
  constructor(client: AzureOrbitalContext) {
    this.client = client;
  }

  /**
   * Gets the specified contact Profile in a specified resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile Name
   * @param [options] The optional parameters
   * @returns Promise<Models.ContactProfilesGetResponse>
   */
  get(resourceGroupName: string, contactProfileName: string, options?: msRest.RequestOptionsBase): Promise<Models.ContactProfilesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile Name
   * @param callback The callback
   */
  get(resourceGroupName: string, contactProfileName: string, callback: msRest.ServiceCallback<Models.ContactProfile>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile Name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, contactProfileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContactProfile>): void;
  get(resourceGroupName: string, contactProfileName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ContactProfile>, callback?: msRest.ServiceCallback<Models.ContactProfile>): Promise<Models.ContactProfilesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        contactProfileName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ContactProfilesGetResponse>;
  }

  /**
   * Creates or updates a contact profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile Name
   * @param location The geo-location where the resource lives
   * @param links Links of the Contact Profile
   * @param [options] The optional parameters
   * @returns Promise<Models.ContactProfilesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, contactProfileName: string, location: string, links: Models.ContactProfileLink[], options?: Models.ContactProfilesCreateOrUpdateOptionalParams): Promise<Models.ContactProfilesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,contactProfileName,location,links,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ContactProfilesCreateOrUpdateResponse>;
  }

  /**
   * Deletes a specified contact profile resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile Name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, contactProfileName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,contactProfileName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Updates the specified contact profile tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile Name
   * @param [options] The optional parameters
   * @returns Promise<Models.ContactProfilesUpdateTagsResponse>
   */
  updateTags(resourceGroupName: string, contactProfileName: string, options?: Models.ContactProfilesUpdateTagsOptionalParams): Promise<Models.ContactProfilesUpdateTagsResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile Name
   * @param callback The callback
   */
  updateTags(resourceGroupName: string, contactProfileName: string, callback: msRest.ServiceCallback<Models.ContactProfile>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile Name
   * @param options The optional parameters
   * @param callback The callback
   */
  updateTags(resourceGroupName: string, contactProfileName: string, options: Models.ContactProfilesUpdateTagsOptionalParams, callback: msRest.ServiceCallback<Models.ContactProfile>): void;
  updateTags(resourceGroupName: string, contactProfileName: string, options?: Models.ContactProfilesUpdateTagsOptionalParams | msRest.ServiceCallback<Models.ContactProfile>, callback?: msRest.ServiceCallback<Models.ContactProfile>): Promise<Models.ContactProfilesUpdateTagsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        contactProfileName,
        options
      },
      updateTagsOperationSpec,
      callback) as Promise<Models.ContactProfilesUpdateTagsResponse>;
  }

  /**
   * Returns list of contact profiles
   * @param [options] The optional parameters
   * @returns Promise<Models.ContactProfilesListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.ContactProfilesListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.ContactProfileListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContactProfileListResult>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ContactProfileListResult>, callback?: msRest.ServiceCallback<Models.ContactProfileListResult>): Promise<Models.ContactProfilesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.ContactProfilesListBySubscriptionResponse>;
  }

  /**
   * Returns list of contact profiles
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.ContactProfilesListResponse>
   */
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ContactProfilesListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ContactProfileListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ContactProfileListResult>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ContactProfileListResult>, callback?: msRest.ServiceCallback<Models.ContactProfileListResult>): Promise<Models.ContactProfilesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ContactProfilesListResponse>;
  }

  /**
   * Creates or updates a contact profile
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile Name
   * @param location The geo-location where the resource lives
   * @param links Links of the Contact Profile
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, contactProfileName: string, location: string, links: Models.ContactProfileLink[], options?: Models.ContactProfilesBeginCreateOrUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        contactProfileName,
        location,
        links,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a specified contact profile resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile Name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, contactProfileName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        contactProfileName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles/{contactProfileName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.contactProfileName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContactProfile
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateTagsOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles/{contactProfileName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.contactProfileName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.TagsObject,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ContactProfile
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Orbital/contactProfiles",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContactProfileListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContactProfileListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles/{contactProfileName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.contactProfileName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      tags: [
        "options",
        "tags"
      ],
      location: "location",
      minimumViableContactDuration: [
        "options",
        "minimumViableContactDuration"
      ],
      minimumElevationDegrees: [
        "options",
        "minimumElevationDegrees"
      ],
      autoTrackingConfiguration: [
        "options",
        "autoTrackingConfiguration"
      ],
      links: "links"
    },
    mapper: {
      ...Mappers.ContactProfile,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ContactProfile
    },
    201: {
      bodyMapper: Mappers.ContactProfile
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles/{contactProfileName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.contactProfileName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
