/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ContactProfiles } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureOrbital } from "../azureOrbital";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ContactProfile,
  ContactProfilesListBySubscriptionNextOptionalParams,
  ContactProfilesListBySubscriptionOptionalParams,
  ContactProfilesListBySubscriptionResponse,
  ContactProfilesListNextOptionalParams,
  ContactProfilesListOptionalParams,
  ContactProfilesListResponse,
  ContactProfilesGetOptionalParams,
  ContactProfilesGetResponse,
  ContactProfilesPropertiesNetworkConfiguration,
  ContactProfileLink,
  ContactProfilesCreateOrUpdateOptionalParams,
  ContactProfilesCreateOrUpdateResponse,
  ContactProfilesDeleteOptionalParams,
  TagsObject,
  ContactProfilesUpdateTagsOptionalParams,
  ContactProfilesUpdateTagsResponse,
  ContactProfilesListBySubscriptionNextResponse,
  ContactProfilesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ContactProfiles operations. */
export class ContactProfilesImpl implements ContactProfiles {
  private readonly client: AzureOrbital;

  /**
   * Initialize a new instance of the class ContactProfiles class.
   * @param client Reference to the service client
   */
  constructor(client: AzureOrbital) {
    this.client = client;
  }

  /**
   * Returns list of contact profiles by Subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: ContactProfilesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<ContactProfile> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: ContactProfilesListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ContactProfile[]> {
    let result: ContactProfilesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: ContactProfilesListBySubscriptionOptionalParams
  ): AsyncIterableIterator<ContactProfile> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Returns list of contact profiles by Resource Group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: ContactProfilesListOptionalParams
  ): PagedAsyncIterableIterator<ContactProfile> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(resourceGroupName, options, settings);
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: ContactProfilesListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ContactProfile[]> {
    let result: ContactProfilesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: ContactProfilesListOptionalParams
  ): AsyncIterableIterator<ContactProfile> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Gets the specified contact Profile in a specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    contactProfileName: string,
    options?: ContactProfilesGetOptionalParams
  ): Promise<ContactProfilesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, contactProfileName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a contact profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile name.
   * @param location The geo-location where the resource lives
   * @param networkConfiguration Network configuration of customer virtual network.
   * @param links Links of the Contact Profile. Describes RF links, modem processing, and IP endpoints.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    contactProfileName: string,
    location: string,
    networkConfiguration: ContactProfilesPropertiesNetworkConfiguration,
    links: ContactProfileLink[],
    options?: ContactProfilesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ContactProfilesCreateOrUpdateResponse>,
      ContactProfilesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ContactProfilesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        contactProfileName,
        location,
        networkConfiguration,
        links,
        options
      },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      ContactProfilesCreateOrUpdateResponse,
      OperationState<ContactProfilesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates a contact profile.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile name.
   * @param location The geo-location where the resource lives
   * @param networkConfiguration Network configuration of customer virtual network.
   * @param links Links of the Contact Profile. Describes RF links, modem processing, and IP endpoints.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    contactProfileName: string,
    location: string,
    networkConfiguration: ContactProfilesPropertiesNetworkConfiguration,
    links: ContactProfileLink[],
    options?: ContactProfilesCreateOrUpdateOptionalParams
  ): Promise<ContactProfilesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      contactProfileName,
      location,
      networkConfiguration,
      links,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a specified contact profile resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile name.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    contactProfileName: string,
    options?: ContactProfilesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, contactProfileName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a specified contact profile resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile name.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    contactProfileName: string,
    options?: ContactProfilesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      contactProfileName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates the specified contact profile tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile name.
   * @param parameters Parameters supplied to update contact profile tags.
   * @param options The options parameters.
   */
  async beginUpdateTags(
    resourceGroupName: string,
    contactProfileName: string,
    parameters: TagsObject,
    options?: ContactProfilesUpdateTagsOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ContactProfilesUpdateTagsResponse>,
      ContactProfilesUpdateTagsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<ContactProfilesUpdateTagsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, contactProfileName, parameters, options },
      spec: updateTagsOperationSpec
    });
    const poller = await createHttpPoller<
      ContactProfilesUpdateTagsResponse,
      OperationState<ContactProfilesUpdateTagsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the specified contact profile tags.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param contactProfileName Contact Profile name.
   * @param parameters Parameters supplied to update contact profile tags.
   * @param options The options parameters.
   */
  async beginUpdateTagsAndWait(
    resourceGroupName: string,
    contactProfileName: string,
    parameters: TagsObject,
    options?: ContactProfilesUpdateTagsOptionalParams
  ): Promise<ContactProfilesUpdateTagsResponse> {
    const poller = await this.beginUpdateTags(
      resourceGroupName,
      contactProfileName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns list of contact profiles by Subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: ContactProfilesListBySubscriptionOptionalParams
  ): Promise<ContactProfilesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Returns list of contact profiles by Resource Group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: ContactProfilesListOptionalParams
  ): Promise<ContactProfilesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: ContactProfilesListBySubscriptionNextOptionalParams
  ): Promise<ContactProfilesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    nextLink: string,
    options?: ContactProfilesListNextOptionalParams
  ): Promise<ContactProfilesListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles/{contactProfileName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContactProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.contactProfileName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles/{contactProfileName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ContactProfile
    },
    201: {
      bodyMapper: Mappers.ContactProfile
    },
    202: {
      bodyMapper: Mappers.ContactProfile
    },
    204: {
      bodyMapper: Mappers.ContactProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: {
    parameterPath: {
      tags: ["options", "tags"],
      location: ["location"],
      provisioningState: ["options", "provisioningState"],
      minimumViableContactDuration: ["options", "minimumViableContactDuration"],
      minimumElevationDegrees: ["options", "minimumElevationDegrees"],
      autoTrackingConfiguration: ["options", "autoTrackingConfiguration"],
      eventHubUri: ["options", "eventHubUri"],
      networkConfiguration: ["networkConfiguration"],
      thirdPartyConfigurations: ["options", "thirdPartyConfigurations"],
      links: ["links"]
    },
    mapper: { ...Mappers.ContactProfile, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.contactProfileName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles/{contactProfileName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.contactProfileName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateTagsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles/{contactProfileName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ContactProfile
    },
    201: {
      bodyMapper: Mappers.ContactProfile
    },
    202: {
      bodyMapper: Mappers.ContactProfile
    },
    204: {
      bodyMapper: Mappers.ContactProfile
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.contactProfileName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Orbital/contactProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContactProfileListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContactProfileListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContactProfileListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ContactProfileListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
