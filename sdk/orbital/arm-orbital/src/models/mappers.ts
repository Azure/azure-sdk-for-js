/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      }
    }
  }
};

export const SpacecraftListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpacecraftListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Spacecraft"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SpacecraftLink: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SpacecraftLink",
    modelProperties: {
      centerFrequencyMHz: {
        serializedName: "centerFrequencyMHz",
        required: true,
        type: {
          name: "Number"
        }
      },
      bandwidthMHz: {
        serializedName: "bandwidthMHz",
        required: true,
        type: {
          name: "Number"
        }
      },
      direction: {
        serializedName: "direction",
        required: true,
        type: {
          name: "String"
        }
      },
      polarization: {
        serializedName: "polarization",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const TagsObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ContactListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContactListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Contact"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceReference",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContactParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContactParameters",
    modelProperties: {
      contactProfile: {
        serializedName: "contactProfile",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      groundStationName: {
        serializedName: "groundStationName",
        required: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AvailableContactsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableContactsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableContacts"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableContacts: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableContacts",
    modelProperties: {
      spacecraft: {
        serializedName: "spacecraft",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      },
      groundStationName: {
        serializedName: "groundStationName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maximumElevationDegrees: {
        serializedName: "properties.maximumElevationDegrees",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      txStartTime: {
        serializedName: "properties.txStartTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      txEndTime: {
        serializedName: "properties.txEndTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      rxStartTime: {
        serializedName: "properties.rxStartTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      rxEndTime: {
        serializedName: "properties.rxEndTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      startAzimuthDegrees: {
        serializedName: "properties.startAzimuthDegrees",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      endAzimuthDegrees: {
        serializedName: "properties.endAzimuthDegrees",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      startElevationDegrees: {
        serializedName: "properties.startElevationDegrees",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      endElevationDegrees: {
        serializedName: "properties.endElevationDegrees",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContactProfileLink: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContactProfileLink",
    modelProperties: {
      polarization: {
        serializedName: "polarization",
        required: true,
        type: {
          name: "String"
        }
      },
      direction: {
        serializedName: "direction",
        required: true,
        type: {
          name: "String"
        }
      },
      gainOverTemperature: {
        serializedName: "gainOverTemperature",
        type: {
          name: "Number"
        }
      },
      eirpdBW: {
        serializedName: "eirpdBW",
        type: {
          name: "Number"
        }
      },
      channels: {
        serializedName: "channels",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContactProfileLinkChannel"
            }
          }
        }
      }
    }
  }
};

export const ContactProfileLinkChannel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContactProfileLinkChannel",
    modelProperties: {
      centerFrequencyMHz: {
        serializedName: "centerFrequencyMHz",
        required: true,
        type: {
          name: "Number"
        }
      },
      bandwidthMHz: {
        serializedName: "bandwidthMHz",
        required: true,
        type: {
          name: "Number"
        }
      },
      endPoint: {
        serializedName: "endPoint",
        type: {
          name: "Composite",
          className: "EndPoint"
        }
      },
      modulationConfiguration: {
        serializedName: "modulationConfiguration",
        type: {
          name: "String"
        }
      },
      demodulationConfiguration: {
        serializedName: "demodulationConfiguration",
        type: {
          name: "String"
        }
      },
      encodingConfiguration: {
        serializedName: "encodingConfiguration",
        type: {
          name: "String"
        }
      },
      decodingConfiguration: {
        serializedName: "decodingConfiguration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndPoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndPoint",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      endPointName: {
        serializedName: "endPointName",
        required: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        required: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        serializedName: "protocol",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContactProfileListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContactProfileListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContactProfile"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableGroundStationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableGroundStationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableGroundStation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableGroundStation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableGroundStation",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "properties.city",
        type: {
          name: "String"
        }
      },
      providerName: {
        serializedName: "properties.providerName",
        type: {
          name: "String"
        }
      },
      longitudeDegrees: {
        serializedName: "properties.longitudeDegrees",
        type: {
          name: "Number"
        }
      },
      latitudeDegrees: {
        serializedName: "properties.latitudeDegrees",
        type: {
          name: "Number"
        }
      },
      altitudeMeters: {
        serializedName: "properties.altitudeMeters",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ResourceIdListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceIdListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceIdListResultValueItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceIdListResultValueItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceIdListResultValueItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const Spacecraft: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Spacecraft",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      noradId: {
        serializedName: "properties.noradId",
        type: {
          name: "String"
        }
      },
      authorizationStatus: {
        serializedName: "properties.authorizationStatus",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Allowed", "Pending", "Denied"]
        }
      },
      authorizationStatusExtended: {
        serializedName: "properties.authorizationStatusExtended",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      titleLine: {
        serializedName: "properties.titleLine",
        type: {
          name: "String"
        }
      },
      tleLine1: {
        serializedName: "properties.tleLine1",
        type: {
          name: "String"
        }
      },
      tleLine2: {
        serializedName: "properties.tleLine2",
        type: {
          name: "String"
        }
      },
      links: {
        serializedName: "properties.links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SpacecraftLink"
            }
          }
        }
      }
    }
  }
};

export const ContactProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContactProfile",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      minimumViableContactDuration: {
        serializedName: "properties.minimumViableContactDuration",
        type: {
          name: "String"
        }
      },
      minimumElevationDegrees: {
        serializedName: "properties.minimumElevationDegrees",
        type: {
          name: "Number"
        }
      },
      autoTrackingConfiguration: {
        serializedName: "properties.autoTrackingConfiguration",
        type: {
          name: "Enum",
          allowedValues: ["disabled", "xBand", "sBand"]
        }
      },
      links: {
        serializedName: "properties.links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContactProfileLink"
            }
          }
        }
      }
    }
  }
};

export const Contact: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Contact",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "scheduled",
            "cancelled",
            "succeeded",
            "failed",
            "providerCancelled"
          ]
        }
      },
      reservationStartTime: {
        serializedName: "properties.reservationStartTime",
        type: {
          name: "DateTime"
        }
      },
      reservationEndTime: {
        serializedName: "properties.reservationEndTime",
        type: {
          name: "DateTime"
        }
      },
      rxStartTime: {
        serializedName: "properties.rxStartTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      rxEndTime: {
        serializedName: "properties.rxEndTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      txStartTime: {
        serializedName: "properties.txStartTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      txEndTime: {
        serializedName: "properties.txEndTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      errorMessage: {
        serializedName: "properties.errorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maximumElevationDegrees: {
        serializedName: "properties.maximumElevationDegrees",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      startAzimuthDegrees: {
        serializedName: "properties.startAzimuthDegrees",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      endAzimuthDegrees: {
        serializedName: "properties.endAzimuthDegrees",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      groundStationName: {
        serializedName: "properties.groundStationName",
        type: {
          name: "String"
        }
      },
      startElevationDegrees: {
        serializedName: "properties.startElevationDegrees",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      endElevationDegrees: {
        serializedName: "properties.endElevationDegrees",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      contactProfile: {
        serializedName: "properties.contactProfile",
        type: {
          name: "Composite",
          className: "ResourceReference"
        }
      }
    }
  }
};
