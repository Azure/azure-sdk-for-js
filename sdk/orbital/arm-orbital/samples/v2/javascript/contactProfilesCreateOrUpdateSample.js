/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
const { AzureOrbital } = require("@azure/arm-orbital");
const { DefaultAzureCredential } = require("@azure/identity");
require("dotenv").config();

/**
 * This sample demonstrates how to Creates or updates a contact profile.
 *
 * @summary Creates or updates a contact profile.
 * x-ms-original-file: specification/orbital/resource-manager/Microsoft.Orbital/stable/2022-11-01/examples/ContactProfileCreate.json
 */
async function createAContactProfile() {
  const subscriptionId =
    process.env["ORBITAL_SUBSCRIPTION_ID"] || "c1be1141-a7c9-4aac-9608-3c2e2f1152c3";
  const resourceGroupName = process.env["ORBITAL_RESOURCE_GROUP"] || "contoso-Rgp";
  const contactProfileName = "CONTOSO-CP";
  const location = "eastus2";
  const networkConfiguration = {
    subnetId:
      "/subscriptions/c1be1141-a7c9-4aac-9608-3c2e2f1152c3/resourceGroups/contoso-Rgp/providers/Microsoft.Network/virtualNetworks/contoso-vnet/subnets/orbital-delegated-subnet",
  };
  const links = [
    {
      name: "contoso-uplink",
      polarization: "LHCP",
      direction: "Uplink",
      gainOverTemperature: 0,
      eirpdBW: 45,
      channels: [
        {
          name: "contoso-uplink-channel",
          centerFrequencyMHz: 2250.0,
          bandwidthMHz: 2.0,
          endPoint: {
            ipAddress: "10.1.0.4",
            endPointName: "ContosoTest_Uplink",
            port: "50000",
            protocol: "TCP",
          },
        },
      ],
    },
    {
      name: "contoso-downlink",
      polarization: "RHCP",
      direction: "Downlink",
      gainOverTemperature: 25.0,
      eirpdBW: 0.0,
      channels: [
        {
          name: "contoso-downlink-channel",
          centerFrequencyMHz: 8160.0,
          bandwidthMHz: 15.0,
          endPoint: {
            ipAddress: "10.1.0.5",
            endPointName: "ContosoTest_Downlink",
            port: "50001",
            protocol: "UDP",
          },
        },
      ],
    },
  ];

  const credential = new DefaultAzureCredential();
  const client = new AzureOrbital(credential, subscriptionId);
  const result = await client.contactProfiles.beginCreateOrUpdateAndWait(
    resourceGroupName,
    contactProfileName,
    location,
    networkConfiguration,
    links
  );
  console.log(result);
}

async function main() {
  createAContactProfile();
}

main().catch(console.error);
