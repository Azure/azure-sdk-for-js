/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  HybridUseBenefitModel,
  HybridUseBenefitListOptionalParams,
  HybridUseBenefitCreateOptionalParams,
  HybridUseBenefitCreateResponse,
  HybridUseBenefitUpdateOptionalParams,
  HybridUseBenefitUpdateResponse,
  HybridUseBenefitGetOptionalParams,
  HybridUseBenefitGetResponse,
  HybridUseBenefitDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a HybridUseBenefit. */
export interface HybridUseBenefit {
  /**
   * Get all hybrid use benefits associated with an ARM resource.
   * @param scope The scope at which the operation is performed. This is limited to
   *              Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param options The options parameters.
   */
  list(
    scope: string,
    options?: HybridUseBenefitListOptionalParams
  ): PagedAsyncIterableIterator<HybridUseBenefitModel>;
  /**
   * Create a new hybrid use benefit under a given scope
   * @param scope The scope at which the operation is performed. This is limited to
   *              Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param body Request body for creating a hybrid use benefit
   * @param options The options parameters.
   */
  create(
    scope: string,
    planId: string,
    body: HybridUseBenefitModel,
    options?: HybridUseBenefitCreateOptionalParams
  ): Promise<HybridUseBenefitCreateResponse>;
  /**
   * Updates an existing hybrid use benefit
   * @param scope The scope at which the operation is performed. This is limited to
   *              Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param body Request body for creating a hybrid use benefit
   * @param options The options parameters.
   */
  update(
    scope: string,
    planId: string,
    body: HybridUseBenefitModel,
    options?: HybridUseBenefitUpdateOptionalParams
  ): Promise<HybridUseBenefitUpdateResponse>;
  /**
   * Gets a given plan ID
   * @param scope The scope at which the operation is performed. This is limited to
   *              Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param options The options parameters.
   */
  get(
    scope: string,
    planId: string,
    options?: HybridUseBenefitGetOptionalParams
  ): Promise<HybridUseBenefitGetResponse>;
  /**
   * Deletes a given plan ID
   * @param scope The scope at which the operation is performed. This is limited to
   *              Microsoft.Compute/virtualMachines and Microsoft.Compute/hostGroups/hosts for now
   * @param planId This is a unique identifier for a plan. Should be a guid.
   * @param options The options parameters.
   */
  delete(
    scope: string,
    planId: string,
    options?: HybridUseBenefitDeleteOptionalParams
  ): Promise<void>;
}
