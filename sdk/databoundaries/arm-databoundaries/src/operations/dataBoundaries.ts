/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { DataBoundaries } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataboundariesManegementClient } from "../databoundariesManegementClient";
import {
  DataBoundaryDefinition,
  DefaultName,
  DataBoundariesPutOptionalParams,
  DataBoundariesPutResponse,
  DataBoundariesGetTenantOptionalParams,
  DataBoundariesGetTenantResponse,
  DataBoundariesGetScopeOptionalParams,
  DataBoundariesGetScopeResponse,
} from "../models";

/** Class containing DataBoundaries operations. */
export class DataBoundariesImpl implements DataBoundaries {
  private readonly client: DataboundariesManegementClient;

  /**
   * Initialize a new instance of the class DataBoundaries class.
   * @param client Reference to the service client
   */
  constructor(client: DataboundariesManegementClient) {
    this.client = client;
  }

  /**
   * Opt-in tenant to data boundary.
   * @param defaultParam Default string modeled as parameter for auto generation to work correctly.
   * @param dataBoundaryDefinition The data boundary to opt the tenant to.
   * @param options The options parameters.
   */
  put(
    defaultParam: DefaultName,
    dataBoundaryDefinition: DataBoundaryDefinition,
    options?: DataBoundariesPutOptionalParams,
  ): Promise<DataBoundariesPutResponse> {
    return this.client.sendOperationRequest(
      { defaultParam, dataBoundaryDefinition, options },
      putOperationSpec,
    );
  }

  /**
   * Get data boundary of tenant.
   * @param defaultParam Default string modeled as parameter for auto generation to work correctly.
   * @param options The options parameters.
   */
  getTenant(
    defaultParam: DefaultName,
    options?: DataBoundariesGetTenantOptionalParams,
  ): Promise<DataBoundariesGetTenantResponse> {
    return this.client.sendOperationRequest(
      { defaultParam, options },
      getTenantOperationSpec,
    );
  }

  /**
   * Get data boundary at specified scope
   * @param scope The scope at which the operation is performed.
   * @param defaultParam Default string modeled as parameter for auto generation to work correctly.
   * @param options The options parameters.
   */
  getScope(
    scope: string,
    defaultParam: DefaultName,
    options?: DataBoundariesGetScopeOptionalParams,
  ): Promise<DataBoundariesGetScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, defaultParam, options },
      getScopeOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const putOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Resources/dataBoundaries/{default}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DataBoundaryDefinition,
    },
    201: {
      bodyMapper: Mappers.DataBoundaryDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.dataBoundaryDefinition,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.defaultParam],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const getTenantOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Resources/dataBoundaries/{default}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataBoundaryDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.defaultParam],
  headerParameters: [Parameters.accept],
  serializer,
};
const getScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.Resources/dataBoundaries/{default}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataBoundaryDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.defaultParam, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer,
};
