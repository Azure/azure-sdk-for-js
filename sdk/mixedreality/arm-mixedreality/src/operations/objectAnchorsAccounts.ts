/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/objectAnchorsAccountsMappers";
import * as Parameters from "../models/parameters";
import { MixedRealityClientContext } from "../mixedRealityClientContext";

/** Class representing a ObjectAnchorsAccounts. */
export class ObjectAnchorsAccounts {
  private readonly client: MixedRealityClientContext;

  /**
   * Create a ObjectAnchorsAccounts.
   * @param {MixedRealityClientContext} client Reference to the service client.
   */
  constructor(client: MixedRealityClientContext) {
    this.client = client;
  }

  /**
   * List Object Anchors Accounts by Subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.ObjectAnchorsAccountsListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.ObjectAnchorsAccountsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>, callback?: msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>): Promise<Models.ObjectAnchorsAccountsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.ObjectAnchorsAccountsListBySubscriptionResponse>;
  }

  /**
   * List Resources by Resource Group
   * @param resourceGroupName Name of an Azure resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.ObjectAnchorsAccountsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ObjectAnchorsAccountsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>, callback?: msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>): Promise<Models.ObjectAnchorsAccountsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ObjectAnchorsAccountsListByResourceGroupResponse>;
  }

  /**
   * Delete an Object Anchors Account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Retrieve an Object Anchors Account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param [options] The optional parameters
   * @returns Promise<Models.ObjectAnchorsAccountsGetResponse>
   */
  get(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.ObjectAnchorsAccountsGetResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.ObjectAnchorsAccount>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ObjectAnchorsAccount>): void;
  get(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ObjectAnchorsAccount>, callback?: msRest.ServiceCallback<Models.ObjectAnchorsAccount>): Promise<Models.ObjectAnchorsAccountsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ObjectAnchorsAccountsGetResponse>;
  }

  /**
   * Updating an Object Anchors Account
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param objectAnchorsAccount Object Anchors Account parameter.
   * @param [options] The optional parameters
   * @returns Promise<Models.ObjectAnchorsAccountsUpdateResponse>
   */
  update(resourceGroupName: string, accountName: string, objectAnchorsAccount: Models.ObjectAnchorsAccount, options?: msRest.RequestOptionsBase): Promise<Models.ObjectAnchorsAccountsUpdateResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param objectAnchorsAccount Object Anchors Account parameter.
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, objectAnchorsAccount: Models.ObjectAnchorsAccount, callback: msRest.ServiceCallback<Models.ObjectAnchorsAccount>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param objectAnchorsAccount Object Anchors Account parameter.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, objectAnchorsAccount: Models.ObjectAnchorsAccount, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ObjectAnchorsAccount>): void;
  update(resourceGroupName: string, accountName: string, objectAnchorsAccount: Models.ObjectAnchorsAccount, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ObjectAnchorsAccount>, callback?: msRest.ServiceCallback<Models.ObjectAnchorsAccount>): Promise<Models.ObjectAnchorsAccountsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        objectAnchorsAccount,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ObjectAnchorsAccountsUpdateResponse>;
  }

  /**
   * Creating or Updating an object anchors Account.
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param objectAnchorsAccount Object Anchors Account parameter.
   * @param [options] The optional parameters
   * @returns Promise<Models.ObjectAnchorsAccountsCreateResponse>
   */
  create(resourceGroupName: string, accountName: string, objectAnchorsAccount: Models.ObjectAnchorsAccount, options?: msRest.RequestOptionsBase): Promise<Models.ObjectAnchorsAccountsCreateResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param objectAnchorsAccount Object Anchors Account parameter.
   * @param callback The callback
   */
  create(resourceGroupName: string, accountName: string, objectAnchorsAccount: Models.ObjectAnchorsAccount, callback: msRest.ServiceCallback<Models.ObjectAnchorsAccount>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param objectAnchorsAccount Object Anchors Account parameter.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, accountName: string, objectAnchorsAccount: Models.ObjectAnchorsAccount, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ObjectAnchorsAccount>): void;
  create(resourceGroupName: string, accountName: string, objectAnchorsAccount: Models.ObjectAnchorsAccount, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ObjectAnchorsAccount>, callback?: msRest.ServiceCallback<Models.ObjectAnchorsAccount>): Promise<Models.ObjectAnchorsAccountsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        objectAnchorsAccount,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.ObjectAnchorsAccountsCreateResponse>;
  }

  /**
   * List Both of the 2 Keys of an object anchors Account
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param [options] The optional parameters
   * @returns Promise<Models.ObjectAnchorsAccountsListKeysResponse>
   */
  listKeys(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.ObjectAnchorsAccountsListKeysResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.AccountKeys>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AccountKeys>): void;
  listKeys(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AccountKeys>, callback?: msRest.ServiceCallback<Models.AccountKeys>): Promise<Models.ObjectAnchorsAccountsListKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listKeysOperationSpec,
      callback) as Promise<Models.ObjectAnchorsAccountsListKeysResponse>;
  }

  /**
   * Regenerate specified Key of an object anchors Account
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param regenerate Required information for key regeneration.
   * @param [options] The optional parameters
   * @returns Promise<Models.ObjectAnchorsAccountsRegenerateKeysResponse>
   */
  regenerateKeys(resourceGroupName: string, accountName: string, regenerate: Models.AccountKeyRegenerateRequest, options?: msRest.RequestOptionsBase): Promise<Models.ObjectAnchorsAccountsRegenerateKeysResponse>;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param regenerate Required information for key regeneration.
   * @param callback The callback
   */
  regenerateKeys(resourceGroupName: string, accountName: string, regenerate: Models.AccountKeyRegenerateRequest, callback: msRest.ServiceCallback<Models.AccountKeys>): void;
  /**
   * @param resourceGroupName Name of an Azure resource group.
   * @param accountName Name of an Mixed Reality Account.
   * @param regenerate Required information for key regeneration.
   * @param options The optional parameters
   * @param callback The callback
   */
  regenerateKeys(resourceGroupName: string, accountName: string, regenerate: Models.AccountKeyRegenerateRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AccountKeys>): void;
  regenerateKeys(resourceGroupName: string, accountName: string, regenerate: Models.AccountKeyRegenerateRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AccountKeys>, callback?: msRest.ServiceCallback<Models.AccountKeys>): Promise<Models.ObjectAnchorsAccountsRegenerateKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        regenerate,
        options
      },
      regenerateKeysOperationSpec,
      callback) as Promise<Models.ObjectAnchorsAccountsRegenerateKeysResponse>;
  }

  /**
   * List Object Anchors Accounts by Subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ObjectAnchorsAccountsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ObjectAnchorsAccountsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>, callback?: msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>): Promise<Models.ObjectAnchorsAccountsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.ObjectAnchorsAccountsListBySubscriptionNextResponse>;
  }

  /**
   * List Resources by Resource Group
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ObjectAnchorsAccountsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ObjectAnchorsAccountsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>, callback?: msRest.ServiceCallback<Models.ObjectAnchorsAccountPage>): Promise<Models.ObjectAnchorsAccountsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.ObjectAnchorsAccountsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MixedReality/objectAnchorsAccounts",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ObjectAnchorsAccountPage
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/objectAnchorsAccounts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ObjectAnchorsAccountPage
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/objectAnchorsAccounts/{accountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/objectAnchorsAccounts/{accountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ObjectAnchorsAccount
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/objectAnchorsAccounts/{accountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "objectAnchorsAccount",
    mapper: {
      ...Mappers.ObjectAnchorsAccount,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ObjectAnchorsAccount
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/objectAnchorsAccounts/{accountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "objectAnchorsAccount",
    mapper: {
      ...Mappers.ObjectAnchorsAccount,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ObjectAnchorsAccount
    },
    201: {
      bodyMapper: Mappers.ObjectAnchorsAccount
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/objectAnchorsAccounts/{accountName}/listKeys",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AccountKeys
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const regenerateKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/objectAnchorsAccounts/{accountName}/regenerateKeys",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "regenerate",
    mapper: {
      ...Mappers.AccountKeyRegenerateRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AccountKeys
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ObjectAnchorsAccountPage
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ObjectAnchorsAccountPage
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
