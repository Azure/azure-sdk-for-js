/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { MixedRealityClientContext } from "./mixedRealityClientContext";


class MixedRealityClient extends MixedRealityClientContext {
  // Operation groups
  operations: operations.Operations;
  spatialAnchorsAccounts: operations.SpatialAnchorsAccounts;
  remoteRenderingAccounts: operations.RemoteRenderingAccounts;

  /**
   * Initializes a new instance of the MixedRealityClient class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g.
   * 00000000-0000-0000-0000-000000000000)
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.MixedRealityClientOptions) {
    super(credentials, subscriptionId, options);
    this.operations = new operations.Operations(this);
    this.spatialAnchorsAccounts = new operations.SpatialAnchorsAccounts(this);
    this.remoteRenderingAccounts = new operations.RemoteRenderingAccounts(this);
  }

  /**
   * Check Name Availability for local uniqueness
   * @param location The location in which uniqueness will be verified.
   * @param checkNameAvailability Check Name Availability Request.
   * @param [options] The optional parameters
   * @returns Promise<Models.CheckNameAvailabilityLocalResponse>
   */
  checkNameAvailabilityLocal(location: string, checkNameAvailability: Models.CheckNameAvailabilityRequest, options?: msRest.RequestOptionsBase): Promise<Models.CheckNameAvailabilityLocalResponse>;
  /**
   * @param location The location in which uniqueness will be verified.
   * @param checkNameAvailability Check Name Availability Request.
   * @param callback The callback
   */
  checkNameAvailabilityLocal(location: string, checkNameAvailability: Models.CheckNameAvailabilityRequest, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResponse>): void;
  /**
   * @param location The location in which uniqueness will be verified.
   * @param checkNameAvailability Check Name Availability Request.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailabilityLocal(location: string, checkNameAvailability: Models.CheckNameAvailabilityRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResponse>): void;
  checkNameAvailabilityLocal(location: string, checkNameAvailability: Models.CheckNameAvailabilityRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckNameAvailabilityResponse>, callback?: msRest.ServiceCallback<Models.CheckNameAvailabilityResponse>): Promise<Models.CheckNameAvailabilityLocalResponse> {
    return this.sendOperationRequest(
      {
        location,
        checkNameAvailability,
        options
      },
      checkNameAvailabilityLocalOperationSpec,
      callback) as Promise<Models.CheckNameAvailabilityLocalResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkNameAvailabilityLocalOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.MixedReality/locations/{location}/checkNameAvailability",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "checkNameAvailability",
    mapper: {
      ...Mappers.CheckNameAvailabilityRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

export {
  MixedRealityClient,
  MixedRealityClientContext,
  Models as MixedRealityModels,
  Mappers as MixedRealityMappers
};
export * from "./operations";
