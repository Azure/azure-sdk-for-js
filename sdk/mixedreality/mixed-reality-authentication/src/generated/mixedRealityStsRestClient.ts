/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { MixedRealityStsRestClientContext } from "./mixedRealityStsRestClientContext";
import {
  MixedRealityStsRestClientOptionalParams,
  MixedRealityStsRestClientGetTokenOptionalParams,
  MixedRealityStsRestClientGetTokenResponse
} from "./models";

class MixedRealityStsRestClient extends MixedRealityStsRestClientContext {
  /**
   * Initializes a new instance of the MixedRealityStsRestClient class.
   * @param options The parameter options
   */
  constructor(options?: MixedRealityStsRestClientOptionalParams) {
    super(options);
  }

  /**
   * Gets an access token to be used with Mixed Reality services.
   * @param accountId The Mixed Reality account identifier.
   * @param options The options parameters.
   */
  getToken(
    accountId: string,
    options?: MixedRealityStsRestClientGetTokenOptionalParams
  ): Promise<MixedRealityStsRestClientGetTokenResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { accountId, options: operationOptions },
      getTokenOperationSpec
    ) as Promise<MixedRealityStsRestClientGetTokenResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getTokenOperationSpec: coreHttp.OperationSpec = {
  path: "/Accounts/{accountId}/token",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StsTokenResponseMessage,
      headersMapper: Mappers.MixedRealityStsRestClientGetTokenHeaders
    },
    400: {
      headersMapper: Mappers.MixedRealityStsRestClientGetTokenHeaders
    },
    401: {
      headersMapper: Mappers.MixedRealityStsRestClientGetTokenHeaders
    },
    429: {
      headersMapper: Mappers.MixedRealityStsRestClientGetTokenHeaders
    },
    default: {
      headersMapper: Mappers.MixedRealityStsRestClientGetTokenHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.accountId],
  headerParameters: [Parameters.clientRequestId],
  serializer
};

// Operation Specifications

export {
  MixedRealityStsRestClient,
  MixedRealityStsRestClientContext,
  Models as MixedRealityStsRestModels,
  Mappers as MixedRealityStsRestMappers
};
