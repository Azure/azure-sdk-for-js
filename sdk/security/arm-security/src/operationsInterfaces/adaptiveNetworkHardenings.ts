/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  AdaptiveNetworkHardening,
  AdaptiveNetworkHardeningsListByExtendedResourceOptionalParams,
  AdaptiveNetworkHardeningsGetOptionalParams,
  AdaptiveNetworkHardeningsGetResponse,
  AdaptiveNetworkHardeningEnforceRequest,
  AdaptiveNetworkHardeningsEnforceOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a AdaptiveNetworkHardenings. */
export interface AdaptiveNetworkHardenings {
  /**
   * Gets a list of Adaptive Network Hardenings resources in scope of an extended resource.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param resourceNamespace The Namespace of the resource.
   * @param resourceType The type of the resource.
   * @param resourceName Name of the resource.
   * @param options The options parameters.
   */
  listByExtendedResource(
    resourceGroupName: string,
    resourceNamespace: string,
    resourceType: string,
    resourceName: string,
    options?: AdaptiveNetworkHardeningsListByExtendedResourceOptionalParams
  ): PagedAsyncIterableIterator<AdaptiveNetworkHardening>;
  /**
   * Gets a single Adaptive Network Hardening resource
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param resourceNamespace The Namespace of the resource.
   * @param resourceType The type of the resource.
   * @param resourceName Name of the resource.
   * @param adaptiveNetworkHardeningResourceName The name of the Adaptive Network Hardening resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceNamespace: string,
    resourceType: string,
    resourceName: string,
    adaptiveNetworkHardeningResourceName: string,
    options?: AdaptiveNetworkHardeningsGetOptionalParams
  ): Promise<AdaptiveNetworkHardeningsGetResponse>;
  /**
   * Enforces the given rules on the NSG(s) listed in the request
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param resourceNamespace The Namespace of the resource.
   * @param resourceType The type of the resource.
   * @param resourceName Name of the resource.
   * @param adaptiveNetworkHardeningResourceName The name of the Adaptive Network Hardening resource.
   * @param body
   * @param options The options parameters.
   */
  beginEnforce(
    resourceGroupName: string,
    resourceNamespace: string,
    resourceType: string,
    resourceName: string,
    adaptiveNetworkHardeningResourceName: string,
    body: AdaptiveNetworkHardeningEnforceRequest,
    options?: AdaptiveNetworkHardeningsEnforceOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Enforces the given rules on the NSG(s) listed in the request
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param resourceNamespace The Namespace of the resource.
   * @param resourceType The type of the resource.
   * @param resourceName Name of the resource.
   * @param adaptiveNetworkHardeningResourceName The name of the Adaptive Network Hardening resource.
   * @param body
   * @param options The options parameters.
   */
  beginEnforceAndWait(
    resourceGroupName: string,
    resourceNamespace: string,
    resourceType: string,
    resourceName: string,
    adaptiveNetworkHardeningResourceName: string,
    body: AdaptiveNetworkHardeningEnforceRequest,
    options?: AdaptiveNetworkHardeningsEnforceOptionalParams
  ): Promise<void>;
}
