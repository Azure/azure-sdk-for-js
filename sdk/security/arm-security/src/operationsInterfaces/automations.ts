/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  Automation,
  AutomationsListOptionalParams,
  AutomationsListByResourceGroupOptionalParams,
  AutomationsGetOptionalParams,
  AutomationsGetResponse,
  AutomationsCreateOrUpdateOptionalParams,
  AutomationsCreateOrUpdateResponse,
  AutomationsDeleteOptionalParams,
  AutomationsValidateOptionalParams,
  AutomationsValidateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Automations. */
export interface Automations {
  /**
   * Lists all the security automations in the specified subscription. Use the 'nextLink' property in the
   * response to get the next page of security automations for the specified subscription.
   * @param options The options parameters.
   */
  list(
    options?: AutomationsListOptionalParams
  ): PagedAsyncIterableIterator<Automation>;
  /**
   * Lists all the security automations in the specified resource group. Use the 'nextLink' property in
   * the response to get the next page of security automations for the specified resource group.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: AutomationsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Automation>;
  /**
   * Retrieves information about the model of a security automation.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param automationName The security automation name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    automationName: string,
    options?: AutomationsGetOptionalParams
  ): Promise<AutomationsGetResponse>;
  /**
   * Creates or updates a security automation. If a security automation is already created and a
   * subsequent request is issued for the same automation id, then it will be updated.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param automationName The security automation name.
   * @param automation The security automation resource
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    automationName: string,
    automation: Automation,
    options?: AutomationsCreateOrUpdateOptionalParams
  ): Promise<AutomationsCreateOrUpdateResponse>;
  /**
   * Deletes a security automation.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param automationName The security automation name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    automationName: string,
    options?: AutomationsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Validates the security automation model before create or update. Any validation errors are returned
   * to the client.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param automationName The security automation name.
   * @param automation The security automation resource
   * @param options The options parameters.
   */
  validate(
    resourceGroupName: string,
    automationName: string,
    automation: Automation,
    options?: AutomationsValidateOptionalParams
  ): Promise<AutomationsValidateResponse>;
}
