/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  IngestionSetting,
  IngestionSettingsListOptionalParams,
  IngestionSettingsGetOptionalParams,
  IngestionSettingsGetResponse,
  IngestionSettingsCreateOptionalParams,
  IngestionSettingsCreateResponse,
  IngestionSettingsDeleteOptionalParams,
  IngestionSettingsListTokensOptionalParams,
  IngestionSettingsListTokensResponse,
  IngestionSettingsListConnectionStringsOptionalParams,
  IngestionSettingsListConnectionStringsResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a IngestionSettings. */
export interface IngestionSettings {
  /**
   * Settings for ingesting security data and logs to correlate with resources associated with the
   * subscription.
   * @param options The options parameters.
   */
  list(
    options?: IngestionSettingsListOptionalParams
  ): PagedAsyncIterableIterator<IngestionSetting>;
  /**
   * Settings for ingesting security data and logs to correlate with resources associated with the
   * subscription.
   * @param ingestionSettingName Name of the ingestion setting
   * @param options The options parameters.
   */
  get(
    ingestionSettingName: string,
    options?: IngestionSettingsGetOptionalParams
  ): Promise<IngestionSettingsGetResponse>;
  /**
   * Create setting for ingesting security data and logs to correlate with resources associated with the
   * subscription.
   * @param ingestionSettingName Name of the ingestion setting
   * @param ingestionSetting Ingestion setting object
   * @param options The options parameters.
   */
  create(
    ingestionSettingName: string,
    ingestionSetting: IngestionSetting,
    options?: IngestionSettingsCreateOptionalParams
  ): Promise<IngestionSettingsCreateResponse>;
  /**
   * Deletes the ingestion settings for this subscription.
   * @param ingestionSettingName Name of the ingestion setting
   * @param options The options parameters.
   */
  delete(
    ingestionSettingName: string,
    options?: IngestionSettingsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Returns the token that is used for correlating ingested telemetry with the resources in the
   * subscription.
   * @param ingestionSettingName Name of the ingestion setting
   * @param options The options parameters.
   */
  listTokens(
    ingestionSettingName: string,
    options?: IngestionSettingsListTokensOptionalParams
  ): Promise<IngestionSettingsListTokensResponse>;
  /**
   * Connection strings for ingesting security scan logs and data.
   * @param ingestionSettingName Name of the ingestion setting
   * @param options The options parameters.
   */
  listConnectionStrings(
    ingestionSettingName: string,
    options?: IngestionSettingsListConnectionStringsOptionalParams
  ): Promise<IngestionSettingsListConnectionStringsResponse>;
}
