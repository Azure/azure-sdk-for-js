/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  SubscriptionGovernanceRulesExecuteStatusGetOptionalParams,
  SubscriptionGovernanceRulesExecuteStatusGetResponse
} from "../models";

/** Interface representing a SubscriptionGovernanceRulesExecuteStatus. */
export interface SubscriptionGovernanceRulesExecuteStatus {
  /**
   * Get a specific governanceRule execution status for the requested scope by ruleId and operationId
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param operationId The security GovernanceRule execution key - unique key for the execution of
   *                    GovernanceRule
   * @param options The options parameters.
   */
  beginGet(
    ruleId: string,
    operationId: string,
    options?: SubscriptionGovernanceRulesExecuteStatusGetOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SubscriptionGovernanceRulesExecuteStatusGetResponse>,
      SubscriptionGovernanceRulesExecuteStatusGetResponse
    >
  >;
  /**
   * Get a specific governanceRule execution status for the requested scope by ruleId and operationId
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param operationId The security GovernanceRule execution key - unique key for the execution of
   *                    GovernanceRule
   * @param options The options parameters.
   */
  beginGetAndWait(
    ruleId: string,
    operationId: string,
    options?: SubscriptionGovernanceRulesExecuteStatusGetOptionalParams
  ): Promise<SubscriptionGovernanceRulesExecuteStatusGetResponse>;
}
