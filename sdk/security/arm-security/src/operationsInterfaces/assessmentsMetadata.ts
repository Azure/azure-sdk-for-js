/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  SecurityAssessmentMetadataResponse,
  AssessmentsMetadataListOptionalParams,
  AssessmentsMetadataListBySubscriptionOptionalParams,
  AssessmentsMetadataGetOptionalParams,
  AssessmentsMetadataGetResponse,
  AssessmentsMetadataGetInSubscriptionOptionalParams,
  AssessmentsMetadataGetInSubscriptionResponse,
  AssessmentsMetadataCreateInSubscriptionOptionalParams,
  AssessmentsMetadataCreateInSubscriptionResponse,
  AssessmentsMetadataDeleteInSubscriptionOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a AssessmentsMetadata. */
export interface AssessmentsMetadata {
  /**
   * Get metadata information on all assessment types
   * @param options The options parameters.
   */
  list(
    options?: AssessmentsMetadataListOptionalParams
  ): PagedAsyncIterableIterator<SecurityAssessmentMetadataResponse>;
  /**
   * Get metadata information on all assessment types in a specific subscription
   * @param options The options parameters.
   */
  listBySubscription(
    options?: AssessmentsMetadataListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<SecurityAssessmentMetadataResponse>;
  /**
   * Get metadata information on an assessment type
   * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type
   * @param options The options parameters.
   */
  get(
    assessmentMetadataName: string,
    options?: AssessmentsMetadataGetOptionalParams
  ): Promise<AssessmentsMetadataGetResponse>;
  /**
   * Get metadata information on an assessment type in a specific subscription
   * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type
   * @param options The options parameters.
   */
  getInSubscription(
    assessmentMetadataName: string,
    options?: AssessmentsMetadataGetInSubscriptionOptionalParams
  ): Promise<AssessmentsMetadataGetInSubscriptionResponse>;
  /**
   * Create metadata information on an assessment type in a specific subscription
   * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type
   * @param assessmentMetadata AssessmentMetadata object
   * @param options The options parameters.
   */
  createInSubscription(
    assessmentMetadataName: string,
    assessmentMetadata: SecurityAssessmentMetadataResponse,
    options?: AssessmentsMetadataCreateInSubscriptionOptionalParams
  ): Promise<AssessmentsMetadataCreateInSubscriptionResponse>;
  /**
   * Delete metadata information on an assessment type in a specific subscription, will cause the
   * deletion of all the assessments of that type in that subscription
   * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type
   * @param options The options parameters.
   */
  deleteInSubscription(
    assessmentMetadataName: string,
    options?: AssessmentsMetadataDeleteInSubscriptionOptionalParams
  ): Promise<void>;
}
