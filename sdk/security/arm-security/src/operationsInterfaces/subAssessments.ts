/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  SecuritySubAssessment,
  SubAssessmentsListAllOptionalParams,
  SubAssessmentsListOptionalParams,
  SubAssessmentsGetOptionalParams,
  SubAssessmentsGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a SubAssessments. */
export interface SubAssessments {
  /**
   * Get security sub-assessments on all your scanned resources inside a subscription scope
   * @param scope Scope of the query, can be subscription
   *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
   *              (/providers/Microsoft.Management/managementGroups/mgName).
   * @param options The options parameters.
   */
  listAll(
    scope: string,
    options?: SubAssessmentsListAllOptionalParams
  ): PagedAsyncIterableIterator<SecuritySubAssessment>;
  /**
   * Get security sub-assessments on all your scanned resources inside a scope
   * @param scope Scope of the query, can be subscription
   *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
   *              (/providers/Microsoft.Management/managementGroups/mgName).
   * @param assessmentName The Assessment Key - Unique key for the assessment type
   * @param options The options parameters.
   */
  list(
    scope: string,
    assessmentName: string,
    options?: SubAssessmentsListOptionalParams
  ): PagedAsyncIterableIterator<SecuritySubAssessment>;
  /**
   * Get a security sub-assessment on your scanned resource
   * @param scope Scope of the query, can be subscription
   *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
   *              (/providers/Microsoft.Management/managementGroups/mgName).
   * @param assessmentName The Assessment Key - Unique key for the assessment type
   * @param subAssessmentName The Sub-Assessment Key - Unique key for the sub-assessment type
   * @param options The options parameters.
   */
  get(
    scope: string,
    assessmentName: string,
    subAssessmentName: string,
    options?: SubAssessmentsGetOptionalParams
  ): Promise<SubAssessmentsGetResponse>;
}
