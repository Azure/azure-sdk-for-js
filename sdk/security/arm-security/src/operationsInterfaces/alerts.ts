/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Alert,
  AlertsListOptionalParams,
  AlertsListByResourceGroupOptionalParams,
  AlertsListSubscriptionLevelByRegionOptionalParams,
  AlertsListResourceGroupLevelByRegionOptionalParams,
  AlertsGetSubscriptionLevelOptionalParams,
  AlertsGetSubscriptionLevelResponse,
  AlertsGetResourceGroupLevelOptionalParams,
  AlertsGetResourceGroupLevelResponse,
  AlertsUpdateSubscriptionLevelStateToDismissOptionalParams,
  AlertsUpdateSubscriptionLevelStateToResolveOptionalParams,
  AlertsUpdateSubscriptionLevelStateToActivateOptionalParams,
  AlertsUpdateResourceGroupLevelStateToResolveOptionalParams,
  AlertsUpdateResourceGroupLevelStateToDismissOptionalParams,
  AlertsUpdateResourceGroupLevelStateToActivateOptionalParams,
  AlertSimulatorRequestBody,
  AlertsSimulateOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Alerts. */
export interface Alerts {
  /**
   * List all the alerts that are associated with the subscription
   * @param options The options parameters.
   */
  list(options?: AlertsListOptionalParams): PagedAsyncIterableIterator<Alert>;
  /**
   * List all the alerts that are associated with the resource group
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: AlertsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Alert>;
  /**
   * List all the alerts that are associated with the subscription that are stored in a specific location
   * @param options The options parameters.
   */
  listSubscriptionLevelByRegion(
    options?: AlertsListSubscriptionLevelByRegionOptionalParams
  ): PagedAsyncIterableIterator<Alert>;
  /**
   * List all the alerts that are associated with the resource group that are stored in a specific
   * location
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  listResourceGroupLevelByRegion(
    resourceGroupName: string,
    options?: AlertsListResourceGroupLevelByRegionOptionalParams
  ): PagedAsyncIterableIterator<Alert>;
  /**
   * Get an alert that is associated with a subscription
   * @param alertName Name of the alert object
   * @param options The options parameters.
   */
  getSubscriptionLevel(
    alertName: string,
    options?: AlertsGetSubscriptionLevelOptionalParams
  ): Promise<AlertsGetSubscriptionLevelResponse>;
  /**
   * Get an alert that is associated a resource group or a resource in a resource group
   * @param alertName Name of the alert object
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  getResourceGroupLevel(
    alertName: string,
    resourceGroupName: string,
    options?: AlertsGetResourceGroupLevelOptionalParams
  ): Promise<AlertsGetResourceGroupLevelResponse>;
  /**
   * Update the alert's state
   * @param alertName Name of the alert object
   * @param options The options parameters.
   */
  updateSubscriptionLevelStateToDismiss(
    alertName: string,
    options?: AlertsUpdateSubscriptionLevelStateToDismissOptionalParams
  ): Promise<void>;
  /**
   * Update the alert's state
   * @param alertName Name of the alert object
   * @param options The options parameters.
   */
  updateSubscriptionLevelStateToResolve(
    alertName: string,
    options?: AlertsUpdateSubscriptionLevelStateToResolveOptionalParams
  ): Promise<void>;
  /**
   * Update the alert's state
   * @param alertName Name of the alert object
   * @param options The options parameters.
   */
  updateSubscriptionLevelStateToActivate(
    alertName: string,
    options?: AlertsUpdateSubscriptionLevelStateToActivateOptionalParams
  ): Promise<void>;
  /**
   * Update the alert's state
   * @param alertName Name of the alert object
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  updateResourceGroupLevelStateToResolve(
    alertName: string,
    resourceGroupName: string,
    options?: AlertsUpdateResourceGroupLevelStateToResolveOptionalParams
  ): Promise<void>;
  /**
   * Update the alert's state
   * @param alertName Name of the alert object
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  updateResourceGroupLevelStateToDismiss(
    alertName: string,
    resourceGroupName: string,
    options?: AlertsUpdateResourceGroupLevelStateToDismissOptionalParams
  ): Promise<void>;
  /**
   * Update the alert's state
   * @param alertName Name of the alert object
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  updateResourceGroupLevelStateToActivate(
    alertName: string,
    resourceGroupName: string,
    options?: AlertsUpdateResourceGroupLevelStateToActivateOptionalParams
  ): Promise<void>;
  /**
   * Simulate security alerts
   * @param alertSimulatorRequestBody Alert Simulator Request Properties
   * @param options The options parameters.
   */
  beginSimulate(
    alertSimulatorRequestBody: AlertSimulatorRequestBody,
    options?: AlertsSimulateOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Simulate security alerts
   * @param alertSimulatorRequestBody Alert Simulator Request Properties
   * @param options The options parameters.
   */
  beginSimulateAndWait(
    alertSimulatorRequestBody: AlertSimulatorRequestBody,
    options?: AlertsSimulateOptionalParams
  ): Promise<void>;
}
