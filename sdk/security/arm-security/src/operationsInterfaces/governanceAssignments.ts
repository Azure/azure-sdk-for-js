/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  GovernanceAssignment,
  GovernanceAssignmentsListOptionalParams,
  GovernanceAssignmentsGetOptionalParams,
  GovernanceAssignmentsGetResponse,
  GovernanceAssignmentsCreateOrUpdateOptionalParams,
  GovernanceAssignmentsCreateOrUpdateResponse,
  GovernanceAssignmentsDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a GovernanceAssignments. */
export interface GovernanceAssignments {
  /**
   * Get security governanceAssignments on all your resources inside a scope
   * @param scope Scope of the query, can be subscription
   *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
   *              (/providers/Microsoft.Management/managementGroups/mgName).
   * @param assessmentName The Assessment Key - Unique key for the assessment type
   * @param options The options parameters.
   */
  list(
    scope: string,
    assessmentName: string,
    options?: GovernanceAssignmentsListOptionalParams
  ): PagedAsyncIterableIterator<GovernanceAssignment>;
  /**
   * Get a specific governanceAssignment for the requested scope by AssignmentKey
   * @param scope Scope of the query, can be subscription
   *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
   *              (/providers/Microsoft.Management/managementGroups/mgName).
   * @param assessmentName The Assessment Key - Unique key for the assessment type
   * @param assignmentKey The security governance assignment key - the assessment key of the required
   *                      governance assignment
   * @param options The options parameters.
   */
  get(
    scope: string,
    assessmentName: string,
    assignmentKey: string,
    options?: GovernanceAssignmentsGetOptionalParams
  ): Promise<GovernanceAssignmentsGetResponse>;
  /**
   * Creates or update a security GovernanceAssignment on the given subscription.
   * @param scope Scope of the query, can be subscription
   *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
   *              (/providers/Microsoft.Management/managementGroups/mgName).
   * @param assessmentName The Assessment Key - Unique key for the assessment type
   * @param assignmentKey The security governance assignment key - the assessment key of the required
   *                      governance assignment
   * @param governanceAssignment GovernanceAssignment over a subscription scope
   * @param options The options parameters.
   */
  createOrUpdate(
    scope: string,
    assessmentName: string,
    assignmentKey: string,
    governanceAssignment: GovernanceAssignment,
    options?: GovernanceAssignmentsCreateOrUpdateOptionalParams
  ): Promise<GovernanceAssignmentsCreateOrUpdateResponse>;
  /**
   * Delete a GovernanceAssignment over a given scope
   * @param scope Scope of the query, can be subscription
   *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
   *              (/providers/Microsoft.Management/managementGroups/mgName).
   * @param assessmentName The Assessment Key - Unique key for the assessment type
   * @param assignmentKey The security governance assignment key - the assessment key of the required
   *                      governance assignment
   * @param options The options parameters.
   */
  delete(
    scope: string,
    assessmentName: string,
    assignmentKey: string,
    options?: GovernanceAssignmentsDeleteOptionalParams
  ): Promise<void>;
}
