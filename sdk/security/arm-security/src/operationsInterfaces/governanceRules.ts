/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  GovernanceRulesGetOptionalParams,
  GovernanceRulesGetResponse,
  GovernanceRule,
  GovernanceRulesCreateOrUpdateOptionalParams,
  GovernanceRulesCreateOrUpdateResponse,
  GovernanceRulesDeleteOptionalParams,
  GovernanceRulesRuleIdExecuteSingleSubscriptionOptionalParams,
  GovernanceRulesRuleIdExecuteSingleSubscriptionResponse,
  GovernanceRulesRuleIdExecuteSingleSecurityConnectorOptionalParams,
  GovernanceRulesRuleIdExecuteSingleSecurityConnectorResponse
} from "../models";

/** Interface representing a GovernanceRules. */
export interface GovernanceRules {
  /**
   * Get a specific governanceRule for the requested scope by ruleId
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param options The options parameters.
   */
  get(
    ruleId: string,
    options?: GovernanceRulesGetOptionalParams
  ): Promise<GovernanceRulesGetResponse>;
  /**
   * Creates or update a security GovernanceRule on the given subscription.
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param governanceRule GovernanceRule over a subscription scope
   * @param options The options parameters.
   */
  createOrUpdate(
    ruleId: string,
    governanceRule: GovernanceRule,
    options?: GovernanceRulesCreateOrUpdateOptionalParams
  ): Promise<GovernanceRulesCreateOrUpdateResponse>;
  /**
   * Delete a GovernanceRule over a given scope
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param options The options parameters.
   */
  delete(
    ruleId: string,
    options?: GovernanceRulesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Execute a security GovernanceRule on the given subscription.
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param options The options parameters.
   */
  beginRuleIdExecuteSingleSubscription(
    ruleId: string,
    options?: GovernanceRulesRuleIdExecuteSingleSubscriptionOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        GovernanceRulesRuleIdExecuteSingleSubscriptionResponse
      >,
      GovernanceRulesRuleIdExecuteSingleSubscriptionResponse
    >
  >;
  /**
   * Execute a security GovernanceRule on the given subscription.
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param options The options parameters.
   */
  beginRuleIdExecuteSingleSubscriptionAndWait(
    ruleId: string,
    options?: GovernanceRulesRuleIdExecuteSingleSubscriptionOptionalParams
  ): Promise<GovernanceRulesRuleIdExecuteSingleSubscriptionResponse>;
  /**
   * Execute a security GovernanceRule on the given security connector.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param options The options parameters.
   */
  beginRuleIdExecuteSingleSecurityConnector(
    resourceGroupName: string,
    securityConnectorName: string,
    ruleId: string,
    options?: GovernanceRulesRuleIdExecuteSingleSecurityConnectorOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        GovernanceRulesRuleIdExecuteSingleSecurityConnectorResponse
      >,
      GovernanceRulesRuleIdExecuteSingleSecurityConnectorResponse
    >
  >;
  /**
   * Execute a security GovernanceRule on the given security connector.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param options The options parameters.
   */
  beginRuleIdExecuteSingleSecurityConnectorAndWait(
    resourceGroupName: string,
    securityConnectorName: string,
    ruleId: string,
    options?: GovernanceRulesRuleIdExecuteSingleSecurityConnectorOptionalParams
  ): Promise<GovernanceRulesRuleIdExecuteSingleSecurityConnectorResponse>;
}
