/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  Standard,
  StandardsListBySubscriptionOptionalParams,
  StandardsListOptionalParams,
  StandardsGetOptionalParams,
  StandardsGetResponse,
  StandardsCreateOrUpdateOptionalParams,
  StandardsCreateOrUpdateResponse,
  StandardsDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Standards. */
export interface Standards {
  /**
   * Get a list of all relevant security standards over a subscription level scope.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: StandardsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Standard>;
  /**
   * Get security standards on all your resources inside a scope
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: StandardsListOptionalParams
  ): PagedAsyncIterableIterator<Standard>;
  /**
   * Get a specific security standard for the requested scope
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param standardId The Security Standard key - unique key for the standard type
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    standardId: string,
    options?: StandardsGetOptionalParams
  ): Promise<StandardsGetResponse>;
  /**
   * Create a security standard on the given scope.  Available only for custom standards.  Will
   * create/update the required standard definitions.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param standardId The Security Standard key - unique key for the standard type
   * @param standard Custom security standard over a pre-defined scope
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    standardId: string,
    standard: Standard,
    options?: StandardsCreateOrUpdateOptionalParams
  ): Promise<StandardsCreateOrUpdateResponse>;
  /**
   * Delete a security standard on a scope.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param standardId The Security Standard key - unique key for the standard type
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    standardId: string,
    options?: StandardsDeleteOptionalParams
  ): Promise<void>;
}
