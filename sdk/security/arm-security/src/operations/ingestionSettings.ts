/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/ingestionSettingsMappers";
import * as Parameters from "../models/parameters";
import { SecurityCenterContext } from "../securityCenterContext";

/** Class representing a IngestionSettings. */
export class IngestionSettings {
  private readonly client: SecurityCenterContext;

  /**
   * Create a IngestionSettings.
   * @param {SecurityCenterContext} client Reference to the service client.
   */
  constructor(client: SecurityCenterContext) {
    this.client = client;
  }

  /**
   * Settings for ingesting security data and logs to correlate with resources associated with the
   * subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.IngestionSettingsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.IngestionSettingsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.IngestionSettingList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IngestionSettingList>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IngestionSettingList>, callback?: msRest.ServiceCallback<Models.IngestionSettingList>): Promise<Models.IngestionSettingsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.IngestionSettingsListResponse>;
  }

  /**
   * Settings for ingesting security data and logs to correlate with resources associated with the
   * subscription.
   * @param ingestionSettingName Name of the ingestion setting
   * @param [options] The optional parameters
   * @returns Promise<Models.IngestionSettingsGetResponse>
   */
  get(ingestionSettingName: string, options?: msRest.RequestOptionsBase): Promise<Models.IngestionSettingsGetResponse>;
  /**
   * @param ingestionSettingName Name of the ingestion setting
   * @param callback The callback
   */
  get(ingestionSettingName: string, callback: msRest.ServiceCallback<Models.IngestionSetting>): void;
  /**
   * @param ingestionSettingName Name of the ingestion setting
   * @param options The optional parameters
   * @param callback The callback
   */
  get(ingestionSettingName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IngestionSetting>): void;
  get(ingestionSettingName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IngestionSetting>, callback?: msRest.ServiceCallback<Models.IngestionSetting>): Promise<Models.IngestionSettingsGetResponse> {
    return this.client.sendOperationRequest(
      {
        ingestionSettingName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.IngestionSettingsGetResponse>;
  }

  /**
   * Create setting for ingesting security data and logs to correlate with resources associated with
   * the subscription.
   * @param ingestionSettingName Name of the ingestion setting
   * @param ingestionSetting Ingestion setting object
   * @param [options] The optional parameters
   * @returns Promise<Models.IngestionSettingsCreateResponse>
   */
  create(ingestionSettingName: string, ingestionSetting: Models.IngestionSetting, options?: msRest.RequestOptionsBase): Promise<Models.IngestionSettingsCreateResponse>;
  /**
   * @param ingestionSettingName Name of the ingestion setting
   * @param ingestionSetting Ingestion setting object
   * @param callback The callback
   */
  create(ingestionSettingName: string, ingestionSetting: Models.IngestionSetting, callback: msRest.ServiceCallback<Models.IngestionSetting>): void;
  /**
   * @param ingestionSettingName Name of the ingestion setting
   * @param ingestionSetting Ingestion setting object
   * @param options The optional parameters
   * @param callback The callback
   */
  create(ingestionSettingName: string, ingestionSetting: Models.IngestionSetting, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IngestionSetting>): void;
  create(ingestionSettingName: string, ingestionSetting: Models.IngestionSetting, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IngestionSetting>, callback?: msRest.ServiceCallback<Models.IngestionSetting>): Promise<Models.IngestionSettingsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        ingestionSettingName,
        ingestionSetting,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.IngestionSettingsCreateResponse>;
  }

  /**
   * Deletes the ingestion settings for this subscription.
   * @param ingestionSettingName Name of the ingestion setting
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(ingestionSettingName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param ingestionSettingName Name of the ingestion setting
   * @param callback The callback
   */
  deleteMethod(ingestionSettingName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param ingestionSettingName Name of the ingestion setting
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(ingestionSettingName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(ingestionSettingName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        ingestionSettingName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Returns the token that is used for correlating ingested telemetry with the resources in the
   * subscription.
   * @param ingestionSettingName Name of the ingestion setting
   * @param [options] The optional parameters
   * @returns Promise<Models.IngestionSettingsListTokensResponse>
   */
  listTokens(ingestionSettingName: string, options?: msRest.RequestOptionsBase): Promise<Models.IngestionSettingsListTokensResponse>;
  /**
   * @param ingestionSettingName Name of the ingestion setting
   * @param callback The callback
   */
  listTokens(ingestionSettingName: string, callback: msRest.ServiceCallback<Models.IngestionSettingToken>): void;
  /**
   * @param ingestionSettingName Name of the ingestion setting
   * @param options The optional parameters
   * @param callback The callback
   */
  listTokens(ingestionSettingName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IngestionSettingToken>): void;
  listTokens(ingestionSettingName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IngestionSettingToken>, callback?: msRest.ServiceCallback<Models.IngestionSettingToken>): Promise<Models.IngestionSettingsListTokensResponse> {
    return this.client.sendOperationRequest(
      {
        ingestionSettingName,
        options
      },
      listTokensOperationSpec,
      callback) as Promise<Models.IngestionSettingsListTokensResponse>;
  }

  /**
   * Connection strings for ingesting security scan logs and data.
   * @param ingestionSettingName Name of the ingestion setting
   * @param [options] The optional parameters
   * @returns Promise<Models.IngestionSettingsListConnectionStringsResponse>
   */
  listConnectionStrings(ingestionSettingName: string, options?: msRest.RequestOptionsBase): Promise<Models.IngestionSettingsListConnectionStringsResponse>;
  /**
   * @param ingestionSettingName Name of the ingestion setting
   * @param callback The callback
   */
  listConnectionStrings(ingestionSettingName: string, callback: msRest.ServiceCallback<Models.ConnectionStrings>): void;
  /**
   * @param ingestionSettingName Name of the ingestion setting
   * @param options The optional parameters
   * @param callback The callback
   */
  listConnectionStrings(ingestionSettingName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectionStrings>): void;
  listConnectionStrings(ingestionSettingName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectionStrings>, callback?: msRest.ServiceCallback<Models.ConnectionStrings>): Promise<Models.IngestionSettingsListConnectionStringsResponse> {
    return this.client.sendOperationRequest(
      {
        ingestionSettingName,
        options
      },
      listConnectionStringsOperationSpec,
      callback) as Promise<Models.IngestionSettingsListConnectionStringsResponse>;
  }

  /**
   * Settings for ingesting security data and logs to correlate with resources associated with the
   * subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IngestionSettingsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.IngestionSettingsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IngestionSettingList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IngestionSettingList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IngestionSettingList>, callback?: msRest.ServiceCallback<Models.IngestionSettingList>): Promise<Models.IngestionSettingsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.IngestionSettingsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Security/ingestionSettings",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion13
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IngestionSettingList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Security/ingestionSettings/{ingestionSettingName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.ingestionSettingName
  ],
  queryParameters: [
    Parameters.apiVersion13
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IngestionSetting
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Security/ingestionSettings/{ingestionSettingName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.ingestionSettingName
  ],
  queryParameters: [
    Parameters.apiVersion13
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "ingestionSetting",
    mapper: {
      ...Mappers.IngestionSetting,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IngestionSetting
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Security/ingestionSettings/{ingestionSettingName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.ingestionSettingName
  ],
  queryParameters: [
    Parameters.apiVersion13
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listTokensOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Security/ingestionSettings/{ingestionSettingName}/listTokens",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.ingestionSettingName
  ],
  queryParameters: [
    Parameters.apiVersion13
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IngestionSettingToken
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listConnectionStringsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Security/ingestionSettings/{ingestionSettingName}/listConnectionStrings",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.ingestionSettingName
  ],
  queryParameters: [
    Parameters.apiVersion13
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionStrings
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion13
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IngestionSettingList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
