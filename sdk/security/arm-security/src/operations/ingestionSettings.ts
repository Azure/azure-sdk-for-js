/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { IngestionSettings } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  IngestionSetting,
  IngestionSettingsListNextOptionalParams,
  IngestionSettingsListOptionalParams,
  IngestionSettingsListResponse,
  IngestionSettingsGetOptionalParams,
  IngestionSettingsGetResponse,
  IngestionSettingsCreateOptionalParams,
  IngestionSettingsCreateResponse,
  IngestionSettingsDeleteOptionalParams,
  IngestionSettingsListTokensOptionalParams,
  IngestionSettingsListTokensResponse,
  IngestionSettingsListConnectionStringsOptionalParams,
  IngestionSettingsListConnectionStringsResponse,
  IngestionSettingsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing IngestionSettings operations. */
export class IngestionSettingsImpl implements IngestionSettings {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class IngestionSettings class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Settings for ingesting security data and logs to correlate with resources associated with the
   * subscription.
   * @param options The options parameters.
   */
  public list(
    options?: IngestionSettingsListOptionalParams
  ): PagedAsyncIterableIterator<IngestionSetting> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: IngestionSettingsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<IngestionSetting[]> {
    let result: IngestionSettingsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: IngestionSettingsListOptionalParams
  ): AsyncIterableIterator<IngestionSetting> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Settings for ingesting security data and logs to correlate with resources associated with the
   * subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: IngestionSettingsListOptionalParams
  ): Promise<IngestionSettingsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Settings for ingesting security data and logs to correlate with resources associated with the
   * subscription.
   * @param ingestionSettingName Name of the ingestion setting
   * @param options The options parameters.
   */
  get(
    ingestionSettingName: string,
    options?: IngestionSettingsGetOptionalParams
  ): Promise<IngestionSettingsGetResponse> {
    return this.client.sendOperationRequest(
      { ingestionSettingName, options },
      getOperationSpec
    );
  }

  /**
   * Create setting for ingesting security data and logs to correlate with resources associated with the
   * subscription.
   * @param ingestionSettingName Name of the ingestion setting
   * @param ingestionSetting Ingestion setting object
   * @param options The options parameters.
   */
  create(
    ingestionSettingName: string,
    ingestionSetting: IngestionSetting,
    options?: IngestionSettingsCreateOptionalParams
  ): Promise<IngestionSettingsCreateResponse> {
    return this.client.sendOperationRequest(
      { ingestionSettingName, ingestionSetting, options },
      createOperationSpec
    );
  }

  /**
   * Deletes the ingestion settings for this subscription.
   * @param ingestionSettingName Name of the ingestion setting
   * @param options The options parameters.
   */
  delete(
    ingestionSettingName: string,
    options?: IngestionSettingsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { ingestionSettingName, options },
      deleteOperationSpec
    );
  }

  /**
   * Returns the token that is used for correlating ingested telemetry with the resources in the
   * subscription.
   * @param ingestionSettingName Name of the ingestion setting
   * @param options The options parameters.
   */
  listTokens(
    ingestionSettingName: string,
    options?: IngestionSettingsListTokensOptionalParams
  ): Promise<IngestionSettingsListTokensResponse> {
    return this.client.sendOperationRequest(
      { ingestionSettingName, options },
      listTokensOperationSpec
    );
  }

  /**
   * Connection strings for ingesting security scan logs and data.
   * @param ingestionSettingName Name of the ingestion setting
   * @param options The options parameters.
   */
  listConnectionStrings(
    ingestionSettingName: string,
    options?: IngestionSettingsListConnectionStringsOptionalParams
  ): Promise<IngestionSettingsListConnectionStringsResponse> {
    return this.client.sendOperationRequest(
      { ingestionSettingName, options },
      listConnectionStringsOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: IngestionSettingsListNextOptionalParams
  ): Promise<IngestionSettingsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/ingestionSettings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IngestionSettingList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion15],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/ingestionSettings/{ingestionSettingName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IngestionSetting
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion15],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ingestionSettingName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/ingestionSettings/{ingestionSettingName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IngestionSetting
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.ingestionSetting,
  queryParameters: [Parameters.apiVersion15],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ingestionSettingName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/ingestionSettings/{ingestionSettingName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion15],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ingestionSettingName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listTokensOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/ingestionSettings/{ingestionSettingName}/listTokens",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.IngestionSettingToken
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion15],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ingestionSettingName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listConnectionStringsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/ingestionSettings/{ingestionSettingName}/listConnectionStrings",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectionStrings
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion15],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ingestionSettingName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IngestionSettingList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion15],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
