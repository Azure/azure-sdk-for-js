/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { GovernanceAssignments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  GovernanceAssignment,
  GovernanceAssignmentsListNextOptionalParams,
  GovernanceAssignmentsListOptionalParams,
  GovernanceAssignmentsListResponse,
  GovernanceAssignmentsGetOptionalParams,
  GovernanceAssignmentsGetResponse,
  GovernanceAssignmentsCreateOrUpdateOptionalParams,
  GovernanceAssignmentsCreateOrUpdateResponse,
  GovernanceAssignmentsDeleteOptionalParams,
  GovernanceAssignmentsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing GovernanceAssignments operations. */
export class GovernanceAssignmentsImpl implements GovernanceAssignments {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class GovernanceAssignments class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Get security governanceAssignments on all your resources inside a scope
   * @param scope Scope of the query, can be subscription
   *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
   *              (/providers/Microsoft.Management/managementGroups/mgName).
   * @param assessmentName The Assessment Key - Unique key for the assessment type
   * @param options The options parameters.
   */
  public list(
    scope: string,
    assessmentName: string,
    options?: GovernanceAssignmentsListOptionalParams
  ): PagedAsyncIterableIterator<GovernanceAssignment> {
    const iter = this.listPagingAll(scope, assessmentName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(scope, assessmentName, options);
      }
    };
  }

  private async *listPagingPage(
    scope: string,
    assessmentName: string,
    options?: GovernanceAssignmentsListOptionalParams
  ): AsyncIterableIterator<GovernanceAssignment[]> {
    let result = await this._list(scope, assessmentName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        scope,
        assessmentName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    scope: string,
    assessmentName: string,
    options?: GovernanceAssignmentsListOptionalParams
  ): AsyncIterableIterator<GovernanceAssignment> {
    for await (const page of this.listPagingPage(
      scope,
      assessmentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get security governanceAssignments on all your resources inside a scope
   * @param scope Scope of the query, can be subscription
   *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
   *              (/providers/Microsoft.Management/managementGroups/mgName).
   * @param assessmentName The Assessment Key - Unique key for the assessment type
   * @param options The options parameters.
   */
  private _list(
    scope: string,
    assessmentName: string,
    options?: GovernanceAssignmentsListOptionalParams
  ): Promise<GovernanceAssignmentsListResponse> {
    return this.client.sendOperationRequest(
      { scope, assessmentName, options },
      listOperationSpec
    );
  }

  /**
   * Get a specific governanceAssignment for the requested scope by AssignmentKey
   * @param scope Scope of the query, can be subscription
   *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
   *              (/providers/Microsoft.Management/managementGroups/mgName).
   * @param assessmentName The Assessment Key - Unique key for the assessment type
   * @param assignmentKey The security governance assignment key - the assessment key of the required
   *                      governance assignment
   * @param options The options parameters.
   */
  get(
    scope: string,
    assessmentName: string,
    assignmentKey: string,
    options?: GovernanceAssignmentsGetOptionalParams
  ): Promise<GovernanceAssignmentsGetResponse> {
    return this.client.sendOperationRequest(
      { scope, assessmentName, assignmentKey, options },
      getOperationSpec
    );
  }

  /**
   * Creates or update a security GovernanceAssignment on the given subscription.
   * @param scope Scope of the query, can be subscription
   *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
   *              (/providers/Microsoft.Management/managementGroups/mgName).
   * @param assessmentName The Assessment Key - Unique key for the assessment type
   * @param assignmentKey The security governance assignment key - the assessment key of the required
   *                      governance assignment
   * @param governanceAssignment GovernanceAssignment over a subscription scope
   * @param options The options parameters.
   */
  createOrUpdate(
    scope: string,
    assessmentName: string,
    assignmentKey: string,
    governanceAssignment: GovernanceAssignment,
    options?: GovernanceAssignmentsCreateOrUpdateOptionalParams
  ): Promise<GovernanceAssignmentsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { scope, assessmentName, assignmentKey, governanceAssignment, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete a GovernanceAssignment over a given scope
   * @param scope Scope of the query, can be subscription
   *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
   *              (/providers/Microsoft.Management/managementGroups/mgName).
   * @param assessmentName The Assessment Key - Unique key for the assessment type
   * @param assignmentKey The security governance assignment key - the assessment key of the required
   *                      governance assignment
   * @param options The options parameters.
   */
  delete(
    scope: string,
    assessmentName: string,
    assignmentKey: string,
    options?: GovernanceAssignmentsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { scope, assessmentName, assignmentKey, options },
      deleteOperationSpec
    );
  }

  /**
   * ListNext
   * @param scope Scope of the query, can be subscription
   *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
   *              (/providers/Microsoft.Management/managementGroups/mgName).
   * @param assessmentName The Assessment Key - Unique key for the assessment type
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    scope: string,
    assessmentName: string,
    nextLink: string,
    options?: GovernanceAssignmentsListNextOptionalParams
  ): Promise<GovernanceAssignmentsListNextResponse> {
    return this.client.sendOperationRequest(
      { scope, assessmentName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GovernanceAssignmentsList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion18],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.assessmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GovernanceAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion18],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.assessmentName,
    Parameters.assignmentKey
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GovernanceAssignment
    },
    201: {
      bodyMapper: Mappers.GovernanceAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.governanceAssignment,
  queryParameters: [Parameters.apiVersion18],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.assessmentName,
    Parameters.assignmentKey
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Security/assessments/{assessmentName}/governanceAssignments/{assignmentKey}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion18],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.assessmentName,
    Parameters.assignmentKey
  ],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GovernanceAssignmentsList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion18],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.scope,
    Parameters.assessmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
