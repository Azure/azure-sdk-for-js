/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Alerts } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Alert,
  AlertsListNextOptionalParams,
  AlertsListOptionalParams,
  AlertsListResponse,
  AlertsListByResourceGroupNextOptionalParams,
  AlertsListByResourceGroupOptionalParams,
  AlertsListByResourceGroupResponse,
  AlertsListSubscriptionLevelByRegionNextOptionalParams,
  AlertsListSubscriptionLevelByRegionOptionalParams,
  AlertsListSubscriptionLevelByRegionResponse,
  AlertsListResourceGroupLevelByRegionNextOptionalParams,
  AlertsListResourceGroupLevelByRegionOptionalParams,
  AlertsListResourceGroupLevelByRegionResponse,
  AlertsGetSubscriptionLevelOptionalParams,
  AlertsGetSubscriptionLevelResponse,
  AlertsGetResourceGroupLevelOptionalParams,
  AlertsGetResourceGroupLevelResponse,
  AlertsUpdateSubscriptionLevelStateToDismissOptionalParams,
  AlertsUpdateSubscriptionLevelStateToResolveOptionalParams,
  AlertsUpdateSubscriptionLevelStateToActivateOptionalParams,
  AlertsUpdateSubscriptionLevelStateToInProgressOptionalParams,
  AlertsUpdateResourceGroupLevelStateToResolveOptionalParams,
  AlertsUpdateResourceGroupLevelStateToDismissOptionalParams,
  AlertsUpdateResourceGroupLevelStateToActivateOptionalParams,
  AlertsUpdateResourceGroupLevelStateToInProgressOptionalParams,
  AlertSimulatorRequestBody,
  AlertsSimulateOptionalParams,
  AlertsListNextResponse,
  AlertsListByResourceGroupNextResponse,
  AlertsListSubscriptionLevelByRegionNextResponse,
  AlertsListResourceGroupLevelByRegionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Alerts operations. */
export class AlertsImpl implements Alerts {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class Alerts class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * List all the alerts that are associated with the subscription
   * @param options The options parameters.
   */
  public list(
    options?: AlertsListOptionalParams
  ): PagedAsyncIterableIterator<Alert> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: AlertsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Alert[]> {
    let result: AlertsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: AlertsListOptionalParams
  ): AsyncIterableIterator<Alert> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List all the alerts that are associated with the resource group
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: AlertsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Alert> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: AlertsListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Alert[]> {
    let result: AlertsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: AlertsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Alert> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all the alerts that are associated with the subscription that are stored in a specific location
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param options The options parameters.
   */
  public listSubscriptionLevelByRegion(
    ascLocation: string,
    options?: AlertsListSubscriptionLevelByRegionOptionalParams
  ): PagedAsyncIterableIterator<Alert> {
    const iter = this.listSubscriptionLevelByRegionPagingAll(
      ascLocation,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSubscriptionLevelByRegionPagingPage(
          ascLocation,
          options,
          settings
        );
      }
    };
  }

  private async *listSubscriptionLevelByRegionPagingPage(
    ascLocation: string,
    options?: AlertsListSubscriptionLevelByRegionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Alert[]> {
    let result: AlertsListSubscriptionLevelByRegionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSubscriptionLevelByRegion(ascLocation, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSubscriptionLevelByRegionNext(
        ascLocation,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSubscriptionLevelByRegionPagingAll(
    ascLocation: string,
    options?: AlertsListSubscriptionLevelByRegionOptionalParams
  ): AsyncIterableIterator<Alert> {
    for await (const page of this.listSubscriptionLevelByRegionPagingPage(
      ascLocation,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all the alerts that are associated with the resource group that are stored in a specific
   * location
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  public listResourceGroupLevelByRegion(
    ascLocation: string,
    resourceGroupName: string,
    options?: AlertsListResourceGroupLevelByRegionOptionalParams
  ): PagedAsyncIterableIterator<Alert> {
    const iter = this.listResourceGroupLevelByRegionPagingAll(
      ascLocation,
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listResourceGroupLevelByRegionPagingPage(
          ascLocation,
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listResourceGroupLevelByRegionPagingPage(
    ascLocation: string,
    resourceGroupName: string,
    options?: AlertsListResourceGroupLevelByRegionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Alert[]> {
    let result: AlertsListResourceGroupLevelByRegionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listResourceGroupLevelByRegion(
        ascLocation,
        resourceGroupName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listResourceGroupLevelByRegionNext(
        ascLocation,
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listResourceGroupLevelByRegionPagingAll(
    ascLocation: string,
    resourceGroupName: string,
    options?: AlertsListResourceGroupLevelByRegionOptionalParams
  ): AsyncIterableIterator<Alert> {
    for await (const page of this.listResourceGroupLevelByRegionPagingPage(
      ascLocation,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all the alerts that are associated with the subscription
   * @param options The options parameters.
   */
  private _list(
    options?: AlertsListOptionalParams
  ): Promise<AlertsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * List all the alerts that are associated with the resource group
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: AlertsListByResourceGroupOptionalParams
  ): Promise<AlertsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * List all the alerts that are associated with the subscription that are stored in a specific location
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param options The options parameters.
   */
  private _listSubscriptionLevelByRegion(
    ascLocation: string,
    options?: AlertsListSubscriptionLevelByRegionOptionalParams
  ): Promise<AlertsListSubscriptionLevelByRegionResponse> {
    return this.client.sendOperationRequest(
      { ascLocation, options },
      listSubscriptionLevelByRegionOperationSpec
    );
  }

  /**
   * List all the alerts that are associated with the resource group that are stored in a specific
   * location
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  private _listResourceGroupLevelByRegion(
    ascLocation: string,
    resourceGroupName: string,
    options?: AlertsListResourceGroupLevelByRegionOptionalParams
  ): Promise<AlertsListResourceGroupLevelByRegionResponse> {
    return this.client.sendOperationRequest(
      { ascLocation, resourceGroupName, options },
      listResourceGroupLevelByRegionOperationSpec
    );
  }

  /**
   * Get an alert that is associated with a subscription
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param alertName Name of the alert object
   * @param options The options parameters.
   */
  getSubscriptionLevel(
    ascLocation: string,
    alertName: string,
    options?: AlertsGetSubscriptionLevelOptionalParams
  ): Promise<AlertsGetSubscriptionLevelResponse> {
    return this.client.sendOperationRequest(
      { ascLocation, alertName, options },
      getSubscriptionLevelOperationSpec
    );
  }

  /**
   * Get an alert that is associated a resource group or a resource in a resource group
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param alertName Name of the alert object
   * @param options The options parameters.
   */
  getResourceGroupLevel(
    resourceGroupName: string,
    ascLocation: string,
    alertName: string,
    options?: AlertsGetResourceGroupLevelOptionalParams
  ): Promise<AlertsGetResourceGroupLevelResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, ascLocation, alertName, options },
      getResourceGroupLevelOperationSpec
    );
  }

  /**
   * Update the alert's state
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param alertName Name of the alert object
   * @param options The options parameters.
   */
  updateSubscriptionLevelStateToDismiss(
    ascLocation: string,
    alertName: string,
    options?: AlertsUpdateSubscriptionLevelStateToDismissOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { ascLocation, alertName, options },
      updateSubscriptionLevelStateToDismissOperationSpec
    );
  }

  /**
   * Update the alert's state
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param alertName Name of the alert object
   * @param options The options parameters.
   */
  updateSubscriptionLevelStateToResolve(
    ascLocation: string,
    alertName: string,
    options?: AlertsUpdateSubscriptionLevelStateToResolveOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { ascLocation, alertName, options },
      updateSubscriptionLevelStateToResolveOperationSpec
    );
  }

  /**
   * Update the alert's state
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param alertName Name of the alert object
   * @param options The options parameters.
   */
  updateSubscriptionLevelStateToActivate(
    ascLocation: string,
    alertName: string,
    options?: AlertsUpdateSubscriptionLevelStateToActivateOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { ascLocation, alertName, options },
      updateSubscriptionLevelStateToActivateOperationSpec
    );
  }

  /**
   * Update the alert's state
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param alertName Name of the alert object
   * @param options The options parameters.
   */
  updateSubscriptionLevelStateToInProgress(
    ascLocation: string,
    alertName: string,
    options?: AlertsUpdateSubscriptionLevelStateToInProgressOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { ascLocation, alertName, options },
      updateSubscriptionLevelStateToInProgressOperationSpec
    );
  }

  /**
   * Update the alert's state
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param alertName Name of the alert object
   * @param options The options parameters.
   */
  updateResourceGroupLevelStateToResolve(
    resourceGroupName: string,
    ascLocation: string,
    alertName: string,
    options?: AlertsUpdateResourceGroupLevelStateToResolveOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, ascLocation, alertName, options },
      updateResourceGroupLevelStateToResolveOperationSpec
    );
  }

  /**
   * Update the alert's state
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param alertName Name of the alert object
   * @param options The options parameters.
   */
  updateResourceGroupLevelStateToDismiss(
    resourceGroupName: string,
    ascLocation: string,
    alertName: string,
    options?: AlertsUpdateResourceGroupLevelStateToDismissOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, ascLocation, alertName, options },
      updateResourceGroupLevelStateToDismissOperationSpec
    );
  }

  /**
   * Update the alert's state
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param alertName Name of the alert object
   * @param options The options parameters.
   */
  updateResourceGroupLevelStateToActivate(
    resourceGroupName: string,
    ascLocation: string,
    alertName: string,
    options?: AlertsUpdateResourceGroupLevelStateToActivateOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, ascLocation, alertName, options },
      updateResourceGroupLevelStateToActivateOperationSpec
    );
  }

  /**
   * Update the alert's state
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param alertName Name of the alert object
   * @param options The options parameters.
   */
  updateResourceGroupLevelStateToInProgress(
    resourceGroupName: string,
    ascLocation: string,
    alertName: string,
    options?: AlertsUpdateResourceGroupLevelStateToInProgressOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, ascLocation, alertName, options },
      updateResourceGroupLevelStateToInProgressOperationSpec
    );
  }

  /**
   * Simulate security alerts
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param alertSimulatorRequestBody Alert Simulator Request Properties
   * @param options The options parameters.
   */
  async beginSimulate(
    ascLocation: string,
    alertSimulatorRequestBody: AlertSimulatorRequestBody,
    options?: AlertsSimulateOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { ascLocation, alertSimulatorRequestBody, options },
      simulateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "original-uri"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Simulate security alerts
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param alertSimulatorRequestBody Alert Simulator Request Properties
   * @param options The options parameters.
   */
  async beginSimulateAndWait(
    ascLocation: string,
    alertSimulatorRequestBody: AlertSimulatorRequestBody,
    options?: AlertsSimulateOptionalParams
  ): Promise<void> {
    const poller = await this.beginSimulate(
      ascLocation,
      alertSimulatorRequestBody,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: AlertsListNextOptionalParams
  ): Promise<AlertsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: AlertsListByResourceGroupNextOptionalParams
  ): Promise<AlertsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListSubscriptionLevelByRegionNext
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param nextLink The nextLink from the previous successful call to the ListSubscriptionLevelByRegion
   *                 method.
   * @param options The options parameters.
   */
  private _listSubscriptionLevelByRegionNext(
    ascLocation: string,
    nextLink: string,
    options?: AlertsListSubscriptionLevelByRegionNextOptionalParams
  ): Promise<AlertsListSubscriptionLevelByRegionNextResponse> {
    return this.client.sendOperationRequest(
      { ascLocation, nextLink, options },
      listSubscriptionLevelByRegionNextOperationSpec
    );
  }

  /**
   * ListResourceGroupLevelByRegionNext
   * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
   *                    Get locations
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListResourceGroupLevelByRegion
   *                 method.
   * @param options The options parameters.
   */
  private _listResourceGroupLevelByRegionNext(
    ascLocation: string,
    resourceGroupName: string,
    nextLink: string,
    options?: AlertsListResourceGroupLevelByRegionNextOptionalParams
  ): Promise<AlertsListResourceGroupLevelByRegionNextResponse> {
    return this.client.sendOperationRequest(
      { ascLocation, resourceGroupName, nextLink, options },
      listResourceGroupLevelByRegionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Security/alerts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/alerts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSubscriptionLevelByRegionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ascLocation
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listResourceGroupLevelByRegionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ascLocation
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSubscriptionLevelOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Alert
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ascLocation,
    Parameters.alertName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getResourceGroupLevelOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Alert
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ascLocation,
    Parameters.alertName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateSubscriptionLevelStateToDismissOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/dismiss",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ascLocation,
    Parameters.alertName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateSubscriptionLevelStateToResolveOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/resolve",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ascLocation,
    Parameters.alertName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateSubscriptionLevelStateToActivateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/activate",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ascLocation,
    Parameters.alertName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateSubscriptionLevelStateToInProgressOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/inProgress",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ascLocation,
    Parameters.alertName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateResourceGroupLevelStateToResolveOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/resolve",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ascLocation,
    Parameters.alertName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateResourceGroupLevelStateToDismissOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/dismiss",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ascLocation,
    Parameters.alertName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateResourceGroupLevelStateToActivateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/activate",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ascLocation,
    Parameters.alertName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateResourceGroupLevelStateToInProgressOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/inProgress",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ascLocation,
    Parameters.alertName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const simulateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/default/simulate",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.alertSimulatorRequestBody,
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ascLocation
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSubscriptionLevelByRegionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.ascLocation
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listResourceGroupLevelByRegionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion13],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.ascLocation
  ],
  headerParameters: [Parameters.accept],
  serializer
};
