/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SecurityOperators } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  SecurityOperatorsListOptionalParams,
  SecurityOperatorsListResponse,
  SecurityOperatorsGetOptionalParams,
  SecurityOperatorsGetResponse,
  SecurityOperatorsCreateOrUpdateOptionalParams,
  SecurityOperatorsCreateOrUpdateResponse,
  SecurityOperatorsDeleteOptionalParams
} from "../models";

/** Class containing SecurityOperators operations. */
export class SecurityOperatorsImpl implements SecurityOperators {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class SecurityOperators class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Lists Microsoft Defender for Cloud securityOperators in the subscription.
   * @param pricingName name of the pricing configuration
   * @param options The options parameters.
   */
  list(
    pricingName: string,
    options?: SecurityOperatorsListOptionalParams
  ): Promise<SecurityOperatorsListResponse> {
    return this.client.sendOperationRequest(
      { pricingName, options },
      listOperationSpec
    );
  }

  /**
   * Get a specific security operator for the requested scope.
   * @param pricingName name of the pricing configuration
   * @param securityOperatorName name of the securityOperator
   * @param options The options parameters.
   */
  get(
    pricingName: string,
    securityOperatorName: string,
    options?: SecurityOperatorsGetOptionalParams
  ): Promise<SecurityOperatorsGetResponse> {
    return this.client.sendOperationRequest(
      { pricingName, securityOperatorName, options },
      getOperationSpec
    );
  }

  /**
   * Creates Microsoft Defender for Cloud security operator on the given scope.
   * @param pricingName name of the pricing configuration
   * @param securityOperatorName name of the securityOperator
   * @param options The options parameters.
   */
  createOrUpdate(
    pricingName: string,
    securityOperatorName: string,
    options?: SecurityOperatorsCreateOrUpdateOptionalParams
  ): Promise<SecurityOperatorsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { pricingName, securityOperatorName, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete Microsoft Defender for Cloud securityOperator in the subscription.
   * @param pricingName name of the pricing configuration
   * @param securityOperatorName name of the securityOperator
   * @param options The options parameters.
   */
  delete(
    pricingName: string,
    securityOperatorName: string,
    options?: SecurityOperatorsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { pricingName, securityOperatorName, options },
      deleteOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings/{pricingName}/securityOperators",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecurityOperatorList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion21],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.pricingName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings/{pricingName}/securityOperators/{securityOperatorName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecurityOperator
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion21],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.pricingName1,
    Parameters.securityOperatorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings/{pricingName}/securityOperators/{securityOperatorName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SecurityOperator
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion21],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.pricingName1,
    Parameters.securityOperatorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings/{pricingName}/securityOperators/{securityOperatorName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion21],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.pricingName1,
    Parameters.securityOperatorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
