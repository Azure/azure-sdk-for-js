/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AzureDevOpsOrgs } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  AzureDevOpsOrg,
  AzureDevOpsOrgsListNextOptionalParams,
  AzureDevOpsOrgsListOptionalParams,
  AzureDevOpsOrgsListResponse,
  AzureDevOpsOrgsListAvailableOptionalParams,
  AzureDevOpsOrgsListAvailableResponse,
  AzureDevOpsOrgsGetOptionalParams,
  AzureDevOpsOrgsGetResponse,
  AzureDevOpsOrgsCreateOrUpdateOptionalParams,
  AzureDevOpsOrgsCreateOrUpdateResponse,
  AzureDevOpsOrgsUpdateOptionalParams,
  AzureDevOpsOrgsUpdateResponse,
  AzureDevOpsOrgsListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AzureDevOpsOrgs operations. */
export class AzureDevOpsOrgsImpl implements AzureDevOpsOrgs {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class AzureDevOpsOrgs class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Returns a list of Azure DevOps organizations onboarded to the connector.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param securityConnectorName The security connector name.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    securityConnectorName: string,
    options?: AzureDevOpsOrgsListOptionalParams,
  ): PagedAsyncIterableIterator<AzureDevOpsOrg> {
    const iter = this.listPagingAll(
      resourceGroupName,
      securityConnectorName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          securityConnectorName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    securityConnectorName: string,
    options?: AzureDevOpsOrgsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AzureDevOpsOrg[]> {
    let result: AzureDevOpsOrgsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        securityConnectorName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        securityConnectorName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    securityConnectorName: string,
    options?: AzureDevOpsOrgsListOptionalParams,
  ): AsyncIterableIterator<AzureDevOpsOrg> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      securityConnectorName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Returns a list of all Azure DevOps organizations accessible by the user token consumed by the
   * connector.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param securityConnectorName The security connector name.
   * @param options The options parameters.
   */
  listAvailable(
    resourceGroupName: string,
    securityConnectorName: string,
    options?: AzureDevOpsOrgsListAvailableOptionalParams,
  ): Promise<AzureDevOpsOrgsListAvailableResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, securityConnectorName, options },
      listAvailableOperationSpec,
    );
  }

  /**
   * Returns a list of Azure DevOps organizations onboarded to the connector.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param securityConnectorName The security connector name.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    securityConnectorName: string,
    options?: AzureDevOpsOrgsListOptionalParams,
  ): Promise<AzureDevOpsOrgsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, securityConnectorName, options },
      listOperationSpec,
    );
  }

  /**
   * Returns a monitored Azure DevOps organization resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param securityConnectorName The security connector name.
   * @param orgName The Azure DevOps organization name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    securityConnectorName: string,
    orgName: string,
    options?: AzureDevOpsOrgsGetOptionalParams,
  ): Promise<AzureDevOpsOrgsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, securityConnectorName, orgName, options },
      getOperationSpec,
    );
  }

  /**
   * Creates or updates monitored Azure DevOps organization details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param securityConnectorName The security connector name.
   * @param orgName The Azure DevOps organization name.
   * @param azureDevOpsOrg The Azure DevOps organization resource payload.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    securityConnectorName: string,
    orgName: string,
    azureDevOpsOrg: AzureDevOpsOrg,
    options?: AzureDevOpsOrgsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AzureDevOpsOrgsCreateOrUpdateResponse>,
      AzureDevOpsOrgsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AzureDevOpsOrgsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        securityConnectorName,
        orgName,
        azureDevOpsOrg,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      AzureDevOpsOrgsCreateOrUpdateResponse,
      OperationState<AzureDevOpsOrgsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates monitored Azure DevOps organization details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param securityConnectorName The security connector name.
   * @param orgName The Azure DevOps organization name.
   * @param azureDevOpsOrg The Azure DevOps organization resource payload.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    securityConnectorName: string,
    orgName: string,
    azureDevOpsOrg: AzureDevOpsOrg,
    options?: AzureDevOpsOrgsCreateOrUpdateOptionalParams,
  ): Promise<AzureDevOpsOrgsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      securityConnectorName,
      orgName,
      azureDevOpsOrg,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates monitored Azure DevOps organization details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param securityConnectorName The security connector name.
   * @param orgName The Azure DevOps organization name.
   * @param azureDevOpsOrg The Azure DevOps organization resource payload.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    securityConnectorName: string,
    orgName: string,
    azureDevOpsOrg: AzureDevOpsOrg,
    options?: AzureDevOpsOrgsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AzureDevOpsOrgsUpdateResponse>,
      AzureDevOpsOrgsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AzureDevOpsOrgsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        securityConnectorName,
        orgName,
        azureDevOpsOrg,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      AzureDevOpsOrgsUpdateResponse,
      OperationState<AzureDevOpsOrgsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates monitored Azure DevOps organization details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param securityConnectorName The security connector name.
   * @param orgName The Azure DevOps organization name.
   * @param azureDevOpsOrg The Azure DevOps organization resource payload.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    securityConnectorName: string,
    orgName: string,
    azureDevOpsOrg: AzureDevOpsOrg,
    options?: AzureDevOpsOrgsUpdateOptionalParams,
  ): Promise<AzureDevOpsOrgsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      securityConnectorName,
      orgName,
      azureDevOpsOrg,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param securityConnectorName The security connector name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    securityConnectorName: string,
    nextLink: string,
    options?: AzureDevOpsOrgsListNextOptionalParams,
  ): Promise<AzureDevOpsOrgsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, securityConnectorName, nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listAvailableOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/listAvailableAzureDevOpsOrgs",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AzureDevOpsOrgListResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion15],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.securityConnectorName,
    Parameters.resourceGroupName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/azureDevOpsOrgs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AzureDevOpsOrgListResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion15],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.securityConnectorName,
    Parameters.resourceGroupName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/azureDevOpsOrgs/{orgName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AzureDevOpsOrg,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion15],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.securityConnectorName,
    Parameters.resourceGroupName1,
    Parameters.orgName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/azureDevOpsOrgs/{orgName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AzureDevOpsOrg,
    },
    201: {
      bodyMapper: Mappers.AzureDevOpsOrg,
    },
    202: {
      bodyMapper: Mappers.AzureDevOpsOrg,
    },
    204: {
      bodyMapper: Mappers.AzureDevOpsOrg,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  requestBody: Parameters.azureDevOpsOrg,
  queryParameters: [Parameters.apiVersion15],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.securityConnectorName,
    Parameters.resourceGroupName1,
    Parameters.orgName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/azureDevOpsOrgs/{orgName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AzureDevOpsOrg,
    },
    201: {
      bodyMapper: Mappers.AzureDevOpsOrg,
    },
    202: {
      bodyMapper: Mappers.AzureDevOpsOrg,
    },
    204: {
      bodyMapper: Mappers.AzureDevOpsOrg,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  requestBody: Parameters.azureDevOpsOrg,
  queryParameters: [Parameters.apiVersion15],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.securityConnectorName,
    Parameters.resourceGroupName1,
    Parameters.orgName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AzureDevOpsOrgListResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.securityConnectorName,
    Parameters.resourceGroupName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
