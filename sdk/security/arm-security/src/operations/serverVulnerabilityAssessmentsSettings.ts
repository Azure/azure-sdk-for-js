/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ServerVulnerabilityAssessmentsSettings } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  ServerVulnerabilityAssessmentsSettingUnion,
  ServerVulnerabilityAssessmentsSettingsListBySubscriptionNextOptionalParams,
  ServerVulnerabilityAssessmentsSettingsListBySubscriptionOptionalParams,
  ServerVulnerabilityAssessmentsSettingsListBySubscriptionResponse,
  ServerVulnerabilityAssessmentsSettingKindName,
  ServerVulnerabilityAssessmentsSettingsGetOptionalParams,
  ServerVulnerabilityAssessmentsSettingsGetResponse,
  ServerVulnerabilityAssessmentsSettingsCreateOrUpdateOptionalParams,
  ServerVulnerabilityAssessmentsSettingsCreateOrUpdateResponse,
  ServerVulnerabilityAssessmentsSettingsDeleteOptionalParams,
  ServerVulnerabilityAssessmentsSettingsListBySubscriptionNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ServerVulnerabilityAssessmentsSettings operations. */
export class ServerVulnerabilityAssessmentsSettingsImpl
  implements ServerVulnerabilityAssessmentsSettings
{
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class ServerVulnerabilityAssessmentsSettings class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Get a list of all the server vulnerability assessments settings over a subscription level scope
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: ServerVulnerabilityAssessmentsSettingsListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<ServerVulnerabilityAssessmentsSettingUnion> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: ServerVulnerabilityAssessmentsSettingsListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ServerVulnerabilityAssessmentsSettingUnion[]> {
    let result: ServerVulnerabilityAssessmentsSettingsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: ServerVulnerabilityAssessmentsSettingsListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<ServerVulnerabilityAssessmentsSettingUnion> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get a list of all the server vulnerability assessments settings over a subscription level scope
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: ServerVulnerabilityAssessmentsSettingsListBySubscriptionOptionalParams,
  ): Promise<ServerVulnerabilityAssessmentsSettingsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec,
    );
  }

  /**
   * Get a server vulnerability assessments setting of the requested kind, that is set on the
   * subscription
   * @param settingKind The kind of the server vulnerability assessments setting
   * @param options The options parameters.
   */
  get(
    settingKind: ServerVulnerabilityAssessmentsSettingKindName,
    options?: ServerVulnerabilityAssessmentsSettingsGetOptionalParams,
  ): Promise<ServerVulnerabilityAssessmentsSettingsGetResponse> {
    return this.client.sendOperationRequest(
      { settingKind, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update a server vulnerability assessments setting of the requested kind on the
   * subscription
   * @param settingKind The kind of the server vulnerability assessments setting
   * @param serverVulnerabilityAssessmentsSetting A server vulnerability assessments setting over a
   *                                              predefined scope
   * @param options The options parameters.
   */
  createOrUpdate(
    settingKind: ServerVulnerabilityAssessmentsSettingKindName,
    serverVulnerabilityAssessmentsSetting: ServerVulnerabilityAssessmentsSettingUnion,
    options?: ServerVulnerabilityAssessmentsSettingsCreateOrUpdateOptionalParams,
  ): Promise<ServerVulnerabilityAssessmentsSettingsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { settingKind, serverVulnerabilityAssessmentsSetting, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * Delete the server vulnerability assessments setting of the requested kind from the subscription
   * @param settingKind The kind of the server vulnerability assessments setting
   * @param options The options parameters.
   */
  delete(
    settingKind: ServerVulnerabilityAssessmentsSettingKindName,
    options?: ServerVulnerabilityAssessmentsSettingsDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { settingKind, options },
      deleteOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: ServerVulnerabilityAssessmentsSettingsListBySubscriptionNextOptionalParams,
  ): Promise<ServerVulnerabilityAssessmentsSettingsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Security/serverVulnerabilityAssessmentsSettings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerVulnerabilityAssessmentsSettingsList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion24],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Security/serverVulnerabilityAssessmentsSettings/{settingKind}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerVulnerabilityAssessmentsSetting,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion24],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.settingKind,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Security/serverVulnerabilityAssessmentsSettings/{settingKind}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ServerVulnerabilityAssessmentsSetting,
    },
    201: {
      bodyMapper: Mappers.ServerVulnerabilityAssessmentsSetting,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.serverVulnerabilityAssessmentsSetting,
  queryParameters: [Parameters.apiVersion24],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.settingKind,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Security/serverVulnerabilityAssessmentsSettings/{settingKind}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion24],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.settingKind,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerVulnerabilityAssessmentsSettingsList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
