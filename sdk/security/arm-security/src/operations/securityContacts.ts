/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SecurityContacts } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  SecurityContact,
  SecurityContactsListNextOptionalParams,
  SecurityContactsListOptionalParams,
  SecurityContactsListResponse,
  SecurityContactsGetOptionalParams,
  SecurityContactsGetResponse,
  SecurityContactsCreateOptionalParams,
  SecurityContactsCreateResponse,
  SecurityContactsDeleteOptionalParams,
  SecurityContactsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SecurityContacts operations. */
export class SecurityContactsImpl implements SecurityContacts {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class SecurityContacts class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * List all security contact configurations for the subscription
   * @param options The options parameters.
   */
  public list(
    options?: SecurityContactsListOptionalParams
  ): PagedAsyncIterableIterator<SecurityContact> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: SecurityContactsListOptionalParams
  ): AsyncIterableIterator<SecurityContact[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: SecurityContactsListOptionalParams
  ): AsyncIterableIterator<SecurityContact> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List all security contact configurations for the subscription
   * @param options The options parameters.
   */
  private _list(
    options?: SecurityContactsListOptionalParams
  ): Promise<SecurityContactsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Get Default Security contact configurations for the subscription
   * @param securityContactName Name of the security contact object
   * @param options The options parameters.
   */
  get(
    securityContactName: string,
    options?: SecurityContactsGetOptionalParams
  ): Promise<SecurityContactsGetResponse> {
    return this.client.sendOperationRequest(
      { securityContactName, options },
      getOperationSpec
    );
  }

  /**
   * Create security contact configurations for the subscription
   * @param securityContactName Name of the security contact object
   * @param securityContact Security contact object
   * @param options The options parameters.
   */
  create(
    securityContactName: string,
    securityContact: SecurityContact,
    options?: SecurityContactsCreateOptionalParams
  ): Promise<SecurityContactsCreateResponse> {
    return this.client.sendOperationRequest(
      { securityContactName, securityContact, options },
      createOperationSpec
    );
  }

  /**
   * Delete security contact configurations for the subscription
   * @param securityContactName Name of the security contact object
   * @param options The options parameters.
   */
  delete(
    securityContactName: string,
    options?: SecurityContactsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { securityContactName, options },
      deleteOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: SecurityContactsListNextOptionalParams
  ): Promise<SecurityContactsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecurityContactList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion8],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts/{securityContactName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecurityContact
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion8],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.securityContactName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts/{securityContactName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SecurityContact
    },
    201: {
      bodyMapper: Mappers.SecurityContact
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.securityContact,
  queryParameters: [Parameters.apiVersion8],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.securityContactName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/securityContacts/{securityContactName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion8],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.securityContactName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecurityContactList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion8],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
