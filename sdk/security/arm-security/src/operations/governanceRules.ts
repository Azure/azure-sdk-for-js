/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { GovernanceRules } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  GovernanceRulesGetOptionalParams,
  GovernanceRulesGetResponse,
  GovernanceRule,
  GovernanceRulesCreateOrUpdateOptionalParams,
  GovernanceRulesCreateOrUpdateResponse,
  GovernanceRulesDeleteOptionalParams,
  GovernanceRulesRuleIdExecuteSingleSubscriptionOptionalParams,
  GovernanceRulesRuleIdExecuteSingleSubscriptionResponse,
  GovernanceRulesRuleIdExecuteSingleSecurityConnectorOptionalParams,
  GovernanceRulesRuleIdExecuteSingleSecurityConnectorResponse
} from "../models";

/** Class containing GovernanceRules operations. */
export class GovernanceRulesImpl implements GovernanceRules {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class GovernanceRules class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Get a specific governanceRule for the requested scope by ruleId
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param options The options parameters.
   */
  get(
    ruleId: string,
    options?: GovernanceRulesGetOptionalParams
  ): Promise<GovernanceRulesGetResponse> {
    return this.client.sendOperationRequest(
      { ruleId, options },
      getOperationSpec
    );
  }

  /**
   * Creates or update a security GovernanceRule on the given subscription.
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param governanceRule GovernanceRule over a subscription scope
   * @param options The options parameters.
   */
  createOrUpdate(
    ruleId: string,
    governanceRule: GovernanceRule,
    options?: GovernanceRulesCreateOrUpdateOptionalParams
  ): Promise<GovernanceRulesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { ruleId, governanceRule, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete a GovernanceRule over a given scope
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param options The options parameters.
   */
  delete(
    ruleId: string,
    options?: GovernanceRulesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { ruleId, options },
      deleteOperationSpec
    );
  }

  /**
   * Execute a security GovernanceRule on the given subscription.
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param options The options parameters.
   */
  async beginRuleIdExecuteSingleSubscription(
    ruleId: string,
    options?: GovernanceRulesRuleIdExecuteSingleSubscriptionOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        GovernanceRulesRuleIdExecuteSingleSubscriptionResponse
      >,
      GovernanceRulesRuleIdExecuteSingleSubscriptionResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GovernanceRulesRuleIdExecuteSingleSubscriptionResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { ruleId, options },
      ruleIdExecuteSingleSubscriptionOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Execute a security GovernanceRule on the given subscription.
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param options The options parameters.
   */
  async beginRuleIdExecuteSingleSubscriptionAndWait(
    ruleId: string,
    options?: GovernanceRulesRuleIdExecuteSingleSubscriptionOptionalParams
  ): Promise<GovernanceRulesRuleIdExecuteSingleSubscriptionResponse> {
    const poller = await this.beginRuleIdExecuteSingleSubscription(
      ruleId,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Execute a security GovernanceRule on the given security connector.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param options The options parameters.
   */
  async beginRuleIdExecuteSingleSecurityConnector(
    resourceGroupName: string,
    securityConnectorName: string,
    ruleId: string,
    options?: GovernanceRulesRuleIdExecuteSingleSecurityConnectorOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        GovernanceRulesRuleIdExecuteSingleSecurityConnectorResponse
      >,
      GovernanceRulesRuleIdExecuteSingleSecurityConnectorResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GovernanceRulesRuleIdExecuteSingleSecurityConnectorResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, securityConnectorName, ruleId, options },
      ruleIdExecuteSingleSecurityConnectorOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Execute a security GovernanceRule on the given security connector.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param options The options parameters.
   */
  async beginRuleIdExecuteSingleSecurityConnectorAndWait(
    resourceGroupName: string,
    securityConnectorName: string,
    ruleId: string,
    options?: GovernanceRulesRuleIdExecuteSingleSecurityConnectorOptionalParams
  ): Promise<GovernanceRulesRuleIdExecuteSingleSecurityConnectorResponse> {
    const poller = await this.beginRuleIdExecuteSingleSecurityConnector(
      resourceGroupName,
      securityConnectorName,
      ruleId,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/governanceRules/{ruleId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GovernanceRule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion18],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ruleId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/governanceRules/{ruleId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GovernanceRule
    },
    201: {
      bodyMapper: Mappers.GovernanceRule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.governanceRule,
  queryParameters: [Parameters.apiVersion18],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ruleId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/governanceRules/{ruleId}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion18],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ruleId
  ],
  serializer
};
const ruleIdExecuteSingleSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/governanceRules/{ruleId}/execute",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper:
        Mappers.GovernanceRulesRuleIdExecuteSingleSubscriptionHeaders
    },
    201: {
      headersMapper:
        Mappers.GovernanceRulesRuleIdExecuteSingleSubscriptionHeaders
    },
    202: {
      headersMapper:
        Mappers.GovernanceRulesRuleIdExecuteSingleSubscriptionHeaders
    },
    204: {
      headersMapper:
        Mappers.GovernanceRulesRuleIdExecuteSingleSubscriptionHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.executeGovernanceRuleParams,
  queryParameters: [Parameters.apiVersion18],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.ruleId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const ruleIdExecuteSingleSecurityConnectorOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/providers/Microsoft.Security/governanceRules/{ruleId}/execute",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper:
        Mappers.GovernanceRulesRuleIdExecuteSingleSecurityConnectorHeaders
    },
    201: {
      headersMapper:
        Mappers.GovernanceRulesRuleIdExecuteSingleSecurityConnectorHeaders
    },
    202: {
      headersMapper:
        Mappers.GovernanceRulesRuleIdExecuteSingleSecurityConnectorHeaders
    },
    204: {
      headersMapper:
        Mappers.GovernanceRulesRuleIdExecuteSingleSecurityConnectorHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.executeGovernanceRuleParams,
  queryParameters: [Parameters.apiVersion18],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ruleId,
    Parameters.securityConnectorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
