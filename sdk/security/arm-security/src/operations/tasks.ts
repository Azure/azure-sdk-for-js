/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/tasksMappers";
import * as Parameters from "../models/parameters";
import { SecurityCenterContext } from "../securityCenterContext";

/** Class representing a Tasks. */
export class Tasks {
  private readonly client: SecurityCenterContext;

  /**
   * Create a Tasks.
   * @param {SecurityCenterContext} client Reference to the service client.
   */
  constructor(client: SecurityCenterContext) {
    this.client = client;
  }

  /**
   * Recommended tasks that will help improve the security of the subscription proactively
   * @param [options] The optional parameters
   * @returns Promise<Models.TasksListResponse>
   */
  list(options?: Models.TasksListOptionalParams): Promise<Models.TasksListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.SecurityTaskList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.TasksListOptionalParams, callback: msRest.ServiceCallback<Models.SecurityTaskList>): void;
  list(options?: Models.TasksListOptionalParams | msRest.ServiceCallback<Models.SecurityTaskList>, callback?: msRest.ServiceCallback<Models.SecurityTaskList>): Promise<Models.TasksListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.TasksListResponse>;
  }

  /**
   * Recommended tasks that will help improve the security of the subscription proactively
   * @param [options] The optional parameters
   * @returns Promise<Models.TasksListByHomeRegionResponse>
   */
  listByHomeRegion(options?: Models.TasksListByHomeRegionOptionalParams): Promise<Models.TasksListByHomeRegionResponse>;
  /**
   * @param callback The callback
   */
  listByHomeRegion(callback: msRest.ServiceCallback<Models.SecurityTaskList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listByHomeRegion(options: Models.TasksListByHomeRegionOptionalParams, callback: msRest.ServiceCallback<Models.SecurityTaskList>): void;
  listByHomeRegion(options?: Models.TasksListByHomeRegionOptionalParams | msRest.ServiceCallback<Models.SecurityTaskList>, callback?: msRest.ServiceCallback<Models.SecurityTaskList>): Promise<Models.TasksListByHomeRegionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listByHomeRegionOperationSpec,
      callback) as Promise<Models.TasksListByHomeRegionResponse>;
  }

  /**
   * Recommended tasks that will help improve the security of the subscription proactively
   * @param taskName Name of the task object, will be a GUID
   * @param [options] The optional parameters
   * @returns Promise<Models.TasksGetSubscriptionLevelTaskResponse>
   */
  getSubscriptionLevelTask(taskName: string, options?: msRest.RequestOptionsBase): Promise<Models.TasksGetSubscriptionLevelTaskResponse>;
  /**
   * @param taskName Name of the task object, will be a GUID
   * @param callback The callback
   */
  getSubscriptionLevelTask(taskName: string, callback: msRest.ServiceCallback<Models.SecurityTask>): void;
  /**
   * @param taskName Name of the task object, will be a GUID
   * @param options The optional parameters
   * @param callback The callback
   */
  getSubscriptionLevelTask(taskName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SecurityTask>): void;
  getSubscriptionLevelTask(taskName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SecurityTask>, callback?: msRest.ServiceCallback<Models.SecurityTask>): Promise<Models.TasksGetSubscriptionLevelTaskResponse> {
    return this.client.sendOperationRequest(
      {
        taskName,
        options
      },
      getSubscriptionLevelTaskOperationSpec,
      callback) as Promise<Models.TasksGetSubscriptionLevelTaskResponse>;
  }

  /**
   * Recommended tasks that will help improve the security of the subscription proactively
   * @param taskName Name of the task object, will be a GUID
   * @param taskUpdateActionType Type of the action to do on the task. Possible values include:
   * 'Activate', 'Dismiss', 'Start', 'Resolve', 'Close'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateSubscriptionLevelTaskState(taskName: string, taskUpdateActionType: Models.TaskUpdateActionType, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param taskName Name of the task object, will be a GUID
   * @param taskUpdateActionType Type of the action to do on the task. Possible values include:
   * 'Activate', 'Dismiss', 'Start', 'Resolve', 'Close'
   * @param callback The callback
   */
  updateSubscriptionLevelTaskState(taskName: string, taskUpdateActionType: Models.TaskUpdateActionType, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param taskName Name of the task object, will be a GUID
   * @param taskUpdateActionType Type of the action to do on the task. Possible values include:
   * 'Activate', 'Dismiss', 'Start', 'Resolve', 'Close'
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSubscriptionLevelTaskState(taskName: string, taskUpdateActionType: Models.TaskUpdateActionType, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateSubscriptionLevelTaskState(taskName: string, taskUpdateActionType: Models.TaskUpdateActionType, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        taskName,
        taskUpdateActionType,
        options
      },
      updateSubscriptionLevelTaskStateOperationSpec,
      callback);
  }

  /**
   * Recommended tasks that will help improve the security of the subscription proactively
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.TasksListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.TasksListByResourceGroupOptionalParams): Promise<Models.TasksListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.SecurityTaskList>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.TasksListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.SecurityTaskList>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.TasksListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.SecurityTaskList>, callback?: msRest.ServiceCallback<Models.SecurityTaskList>): Promise<Models.TasksListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.TasksListByResourceGroupResponse>;
  }

  /**
   * Recommended tasks that will help improve the security of the subscription proactively
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param taskName Name of the task object, will be a GUID
   * @param [options] The optional parameters
   * @returns Promise<Models.TasksGetResourceGroupLevelTaskResponse>
   */
  getResourceGroupLevelTask(resourceGroupName: string, taskName: string, options?: msRest.RequestOptionsBase): Promise<Models.TasksGetResourceGroupLevelTaskResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param taskName Name of the task object, will be a GUID
   * @param callback The callback
   */
  getResourceGroupLevelTask(resourceGroupName: string, taskName: string, callback: msRest.ServiceCallback<Models.SecurityTask>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param taskName Name of the task object, will be a GUID
   * @param options The optional parameters
   * @param callback The callback
   */
  getResourceGroupLevelTask(resourceGroupName: string, taskName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SecurityTask>): void;
  getResourceGroupLevelTask(resourceGroupName: string, taskName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SecurityTask>, callback?: msRest.ServiceCallback<Models.SecurityTask>): Promise<Models.TasksGetResourceGroupLevelTaskResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        taskName,
        options
      },
      getResourceGroupLevelTaskOperationSpec,
      callback) as Promise<Models.TasksGetResourceGroupLevelTaskResponse>;
  }

  /**
   * Recommended tasks that will help improve the security of the subscription proactively
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param taskName Name of the task object, will be a GUID
   * @param taskUpdateActionType Type of the action to do on the task. Possible values include:
   * 'Activate', 'Dismiss', 'Start', 'Resolve', 'Close'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateResourceGroupLevelTaskState(resourceGroupName: string, taskName: string, taskUpdateActionType: Models.TaskUpdateActionType1, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param taskName Name of the task object, will be a GUID
   * @param taskUpdateActionType Type of the action to do on the task. Possible values include:
   * 'Activate', 'Dismiss', 'Start', 'Resolve', 'Close'
   * @param callback The callback
   */
  updateResourceGroupLevelTaskState(resourceGroupName: string, taskName: string, taskUpdateActionType: Models.TaskUpdateActionType1, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param taskName Name of the task object, will be a GUID
   * @param taskUpdateActionType Type of the action to do on the task. Possible values include:
   * 'Activate', 'Dismiss', 'Start', 'Resolve', 'Close'
   * @param options The optional parameters
   * @param callback The callback
   */
  updateResourceGroupLevelTaskState(resourceGroupName: string, taskName: string, taskUpdateActionType: Models.TaskUpdateActionType1, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateResourceGroupLevelTaskState(resourceGroupName: string, taskName: string, taskUpdateActionType: Models.TaskUpdateActionType1, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        taskName,
        taskUpdateActionType,
        options
      },
      updateResourceGroupLevelTaskStateOperationSpec,
      callback);
  }

  /**
   * Recommended tasks that will help improve the security of the subscription proactively
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.TasksListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.TasksListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SecurityTaskList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SecurityTaskList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SecurityTaskList>, callback?: msRest.ServiceCallback<Models.SecurityTaskList>): Promise<Models.TasksListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.TasksListNextResponse>;
  }

  /**
   * Recommended tasks that will help improve the security of the subscription proactively
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.TasksListByHomeRegionNextResponse>
   */
  listByHomeRegionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.TasksListByHomeRegionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByHomeRegionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SecurityTaskList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByHomeRegionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SecurityTaskList>): void;
  listByHomeRegionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SecurityTaskList>, callback?: msRest.ServiceCallback<Models.SecurityTaskList>): Promise<Models.TasksListByHomeRegionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByHomeRegionNextOperationSpec,
      callback) as Promise<Models.TasksListByHomeRegionNextResponse>;
  }

  /**
   * Recommended tasks that will help improve the security of the subscription proactively
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.TasksListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.TasksListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SecurityTaskList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SecurityTaskList>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SecurityTaskList>, callback?: msRest.ServiceCallback<Models.SecurityTaskList>): Promise<Models.TasksListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.TasksListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Security/tasks",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityTaskList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByHomeRegionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/tasks",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.ascLocation
  ],
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityTaskList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSubscriptionLevelTaskOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.ascLocation,
    Parameters.taskName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityTask
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateSubscriptionLevelTaskStateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}/{taskUpdateActionType}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.ascLocation,
    Parameters.taskName,
    Parameters.taskUpdateActionType
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ascLocation
  ],
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityTaskList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getResourceGroupLevelTaskOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ascLocation,
    Parameters.taskName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityTask
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateResourceGroupLevelTaskStateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/tasks/{taskName}/{taskUpdateActionType}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ascLocation,
    Parameters.taskName,
    Parameters.taskUpdateActionType
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityTaskList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByHomeRegionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityTaskList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityTaskList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
