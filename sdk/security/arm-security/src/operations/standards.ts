/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Standards } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenterContext } from "../securityCenterContext";
import {
  Standard,
  StandardsListBySubscriptionNextOptionalParams,
  StandardsListBySubscriptionOptionalParams,
  StandardsListNextOptionalParams,
  StandardsListOptionalParams,
  StandardsListBySubscriptionResponse,
  StandardsListResponse,
  StandardsGetOptionalParams,
  StandardsGetResponse,
  StandardsCreateOrUpdateOptionalParams,
  StandardsCreateOrUpdateResponse,
  StandardsDeleteOptionalParams,
  StandardsListBySubscriptionNextResponse,
  StandardsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Standards operations. */
export class StandardsImpl implements Standards {
  private readonly client: SecurityCenterContext;

  /**
   * Initialize a new instance of the class Standards class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenterContext) {
    this.client = client;
  }

  /**
   * Get a list of all relevant security standards over a subscription level scope.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: StandardsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Standard> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: StandardsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Standard[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: StandardsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Standard> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get security standards on all your resources inside a scope
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    options?: StandardsListOptionalParams
  ): PagedAsyncIterableIterator<Standard> {
    const iter = this.listPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    options?: StandardsListOptionalParams
  ): AsyncIterableIterator<Standard[]> {
    let result = await this._list(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    options?: StandardsListOptionalParams
  ): AsyncIterableIterator<Standard> {
    for await (const page of this.listPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Get a list of all relevant security standards over a subscription level scope.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: StandardsListBySubscriptionOptionalParams
  ): Promise<StandardsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Get security standards on all your resources inside a scope
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    options?: StandardsListOptionalParams
  ): Promise<StandardsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec
    );
  }

  /**
   * Get a specific security standard for the requested scope
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param standardId The Security Standard key - unique key for the standard type
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    standardId: string,
    options?: StandardsGetOptionalParams
  ): Promise<StandardsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, standardId, options },
      getOperationSpec
    );
  }

  /**
   * Create a security standard on the given scope.  Available only for custom standards.  Will
   * create/update the required standard definitions.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param standardId The Security Standard key - unique key for the standard type
   * @param standard Custom security standard over a pre-defined scope
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    standardId: string,
    standard: Standard,
    options?: StandardsCreateOrUpdateOptionalParams
  ): Promise<StandardsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, standardId, standard, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete a security standard on a scope.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param standardId The Security Standard key - unique key for the standard type
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    standardId: string,
    options?: StandardsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, standardId, options },
      deleteOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: StandardsListBySubscriptionNextOptionalParams
  ): Promise<StandardsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    nextLink: string,
    options?: StandardsListNextOptionalParams
  ): Promise<StandardsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/standards",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StandardList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/standards",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StandardList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/standards/{standardId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Standard
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.standardId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/standards/{standardId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Standard
    },
    201: {
      bodyMapper: Mappers.Standard
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.standard,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.standardId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/standards/{standardId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.standardId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StandardList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StandardList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
