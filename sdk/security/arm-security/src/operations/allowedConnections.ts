/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/allowedConnectionsMappers";
import * as Parameters from "../models/parameters";
import { SecurityCenterContext } from "../securityCenterContext";

/** Class representing a AllowedConnections. */
export class AllowedConnections {
  private readonly client: SecurityCenterContext;

  /**
   * Create a AllowedConnections.
   * @param {SecurityCenterContext} client Reference to the service client.
   */
  constructor(client: SecurityCenterContext) {
    this.client = client;
  }

  /**
   * Gets the list of all possible traffic between resources for the subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.AllowedConnectionsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.AllowedConnectionsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.AllowedConnectionsList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AllowedConnectionsList>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AllowedConnectionsList>, callback?: msRest.ServiceCallback<Models.AllowedConnectionsList>): Promise<Models.AllowedConnectionsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.AllowedConnectionsListResponse>;
  }

  /**
   * Gets the list of all possible traffic between resources for the subscription and location.
   * @param [options] The optional parameters
   * @returns Promise<Models.AllowedConnectionsListByHomeRegionResponse>
   */
  listByHomeRegion(options?: msRest.RequestOptionsBase): Promise<Models.AllowedConnectionsListByHomeRegionResponse>;
  /**
   * @param callback The callback
   */
  listByHomeRegion(callback: msRest.ServiceCallback<Models.AllowedConnectionsList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listByHomeRegion(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AllowedConnectionsList>): void;
  listByHomeRegion(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AllowedConnectionsList>, callback?: msRest.ServiceCallback<Models.AllowedConnectionsList>): Promise<Models.AllowedConnectionsListByHomeRegionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listByHomeRegionOperationSpec,
      callback) as Promise<Models.AllowedConnectionsListByHomeRegionResponse>;
  }

  /**
   * Gets the list of all possible traffic between resources for the subscription and location, based
   * on connection type.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param connectionType The type of allowed connections (Internal, External). Possible values
   * include: 'Internal', 'External'
   * @param [options] The optional parameters
   * @returns Promise<Models.AllowedConnectionsGetResponse>
   */
  get(resourceGroupName: string, connectionType: Models.ConnectionType, options?: msRest.RequestOptionsBase): Promise<Models.AllowedConnectionsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param connectionType The type of allowed connections (Internal, External). Possible values
   * include: 'Internal', 'External'
   * @param callback The callback
   */
  get(resourceGroupName: string, connectionType: Models.ConnectionType, callback: msRest.ServiceCallback<Models.AllowedConnectionsResource>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param connectionType The type of allowed connections (Internal, External). Possible values
   * include: 'Internal', 'External'
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, connectionType: Models.ConnectionType, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AllowedConnectionsResource>): void;
  get(resourceGroupName: string, connectionType: Models.ConnectionType, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AllowedConnectionsResource>, callback?: msRest.ServiceCallback<Models.AllowedConnectionsResource>): Promise<Models.AllowedConnectionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        connectionType,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.AllowedConnectionsGetResponse>;
  }

  /**
   * Gets the list of all possible traffic between resources for the subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AllowedConnectionsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AllowedConnectionsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AllowedConnectionsList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AllowedConnectionsList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AllowedConnectionsList>, callback?: msRest.ServiceCallback<Models.AllowedConnectionsList>): Promise<Models.AllowedConnectionsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.AllowedConnectionsListNextResponse>;
  }

  /**
   * Gets the list of all possible traffic between resources for the subscription and location.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AllowedConnectionsListByHomeRegionNextResponse>
   */
  listByHomeRegionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AllowedConnectionsListByHomeRegionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByHomeRegionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AllowedConnectionsList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByHomeRegionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AllowedConnectionsList>): void;
  listByHomeRegionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AllowedConnectionsList>, callback?: msRest.ServiceCallback<Models.AllowedConnectionsList>): Promise<Models.AllowedConnectionsListByHomeRegionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByHomeRegionNextOperationSpec,
      callback) as Promise<Models.AllowedConnectionsListByHomeRegionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Security/allowedConnections",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion7
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AllowedConnectionsList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByHomeRegionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/allowedConnections",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.ascLocation
  ],
  queryParameters: [
    Parameters.apiVersion7
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AllowedConnectionsList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/allowedConnections/{connectionType}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ascLocation,
    Parameters.connectionType
  ],
  queryParameters: [
    Parameters.apiVersion7
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AllowedConnectionsResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AllowedConnectionsList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByHomeRegionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AllowedConnectionsList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
