/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Pricings } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  PricingsListOptionalParams,
  PricingsListResponse,
  PricingsGetOptionalParams,
  PricingsGetResponse,
  Pricing,
  PricingsUpdateOptionalParams,
  PricingsUpdateResponse
} from "../models";

/** Class containing Pricings operations. */
export class PricingsImpl implements Pricings {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class Pricings class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Lists Microsoft Defender for Cloud pricing configurations in the subscription.
   * @param options The options parameters.
   */
  list(options?: PricingsListOptionalParams): Promise<PricingsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Gets a provided Microsoft Defender for Cloud pricing configuration in the subscription.
   * @param pricingName name of the pricing configuration
   * @param options The options parameters.
   */
  get(
    pricingName: string,
    options?: PricingsGetOptionalParams
  ): Promise<PricingsGetResponse> {
    return this.client.sendOperationRequest(
      { pricingName, options },
      getOperationSpec
    );
  }

  /**
   * Updates a provided Microsoft Defender for Cloud pricing configuration in the subscription.
   * @param pricingName name of the pricing configuration
   * @param pricing Pricing object
   * @param options The options parameters.
   */
  update(
    pricingName: string,
    pricing: Pricing,
    options?: PricingsUpdateOptionalParams
  ): Promise<PricingsUpdateResponse> {
    return this.client.sendOperationRequest(
      { pricingName, pricing, options },
      updateOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PricingList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings/{pricingName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Pricing
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.pricingName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings/{pricingName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Pricing
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.pricing,
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.pricingName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
