/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/externalSecuritySolutionsMappers";
import * as Parameters from "../models/parameters";
import { SecurityCenterContext } from "../securityCenterContext";

/** Class representing a ExternalSecuritySolutions. */
export class ExternalSecuritySolutions {
  private readonly client: SecurityCenterContext;

  /**
   * Create a ExternalSecuritySolutions.
   * @param {SecurityCenterContext} client Reference to the service client.
   */
  constructor(client: SecurityCenterContext) {
    this.client = client;
  }

  /**
   * Gets a list of external security solutions for the subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExternalSecuritySolutionsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.ExternalSecuritySolutionsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.ExternalSecuritySolutionList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExternalSecuritySolutionList>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExternalSecuritySolutionList>, callback?: msRest.ServiceCallback<Models.ExternalSecuritySolutionList>): Promise<Models.ExternalSecuritySolutionsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ExternalSecuritySolutionsListResponse>;
  }

  /**
   * Gets a list of external Security Solutions for the subscription and location.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExternalSecuritySolutionsListByHomeRegionResponse>
   */
  listByHomeRegion(options?: msRest.RequestOptionsBase): Promise<Models.ExternalSecuritySolutionsListByHomeRegionResponse>;
  /**
   * @param callback The callback
   */
  listByHomeRegion(callback: msRest.ServiceCallback<Models.ExternalSecuritySolutionList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listByHomeRegion(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExternalSecuritySolutionList>): void;
  listByHomeRegion(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExternalSecuritySolutionList>, callback?: msRest.ServiceCallback<Models.ExternalSecuritySolutionList>): Promise<Models.ExternalSecuritySolutionsListByHomeRegionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listByHomeRegionOperationSpec,
      callback) as Promise<Models.ExternalSecuritySolutionsListByHomeRegionResponse>;
  }

  /**
   * Gets a specific external Security Solution.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param externalSecuritySolutionsName Name of an external security solution.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExternalSecuritySolutionsGetResponse>
   */
  get(resourceGroupName: string, externalSecuritySolutionsName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExternalSecuritySolutionsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param externalSecuritySolutionsName Name of an external security solution.
   * @param callback The callback
   */
  get(resourceGroupName: string, externalSecuritySolutionsName: string, callback: msRest.ServiceCallback<Models.ExternalSecuritySolutionUnion>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param externalSecuritySolutionsName Name of an external security solution.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, externalSecuritySolutionsName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExternalSecuritySolutionUnion>): void;
  get(resourceGroupName: string, externalSecuritySolutionsName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExternalSecuritySolutionUnion>, callback?: msRest.ServiceCallback<Models.ExternalSecuritySolutionUnion>): Promise<Models.ExternalSecuritySolutionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        externalSecuritySolutionsName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ExternalSecuritySolutionsGetResponse>;
  }

  /**
   * Gets a list of external security solutions for the subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExternalSecuritySolutionsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ExternalSecuritySolutionsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExternalSecuritySolutionList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExternalSecuritySolutionList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExternalSecuritySolutionList>, callback?: msRest.ServiceCallback<Models.ExternalSecuritySolutionList>): Promise<Models.ExternalSecuritySolutionsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ExternalSecuritySolutionsListNextResponse>;
  }

  /**
   * Gets a list of external Security Solutions for the subscription and location.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExternalSecuritySolutionsListByHomeRegionNextResponse>
   */
  listByHomeRegionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ExternalSecuritySolutionsListByHomeRegionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByHomeRegionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExternalSecuritySolutionList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByHomeRegionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExternalSecuritySolutionList>): void;
  listByHomeRegionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ExternalSecuritySolutionList>, callback?: msRest.ServiceCallback<Models.ExternalSecuritySolutionList>): Promise<Models.ExternalSecuritySolutionsListByHomeRegionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByHomeRegionNextOperationSpec,
      callback) as Promise<Models.ExternalSecuritySolutionsListByHomeRegionNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Security/externalSecuritySolutions",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion7
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExternalSecuritySolutionList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByHomeRegionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/ExternalSecuritySolutions",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.ascLocation
  ],
  queryParameters: [
    Parameters.apiVersion7
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExternalSecuritySolutionList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/ExternalSecuritySolutions/{externalSecuritySolutionsName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ascLocation,
    Parameters.externalSecuritySolutionsName
  ],
  queryParameters: [
    Parameters.apiVersion7
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExternalSecuritySolution
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExternalSecuritySolutionList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByHomeRegionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExternalSecuritySolutionList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
