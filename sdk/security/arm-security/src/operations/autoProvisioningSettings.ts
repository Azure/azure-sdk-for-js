/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AutoProvisioningSettings } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  AutoProvisioningSetting,
  AutoProvisioningSettingsListNextOptionalParams,
  AutoProvisioningSettingsListOptionalParams,
  AutoProvisioningSettingsListResponse,
  AutoProvisioningSettingsGetOptionalParams,
  AutoProvisioningSettingsGetResponse,
  AutoProvisioningSettingsCreateOptionalParams,
  AutoProvisioningSettingsCreateResponse,
  AutoProvisioningSettingsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AutoProvisioningSettings operations. */
export class AutoProvisioningSettingsImpl implements AutoProvisioningSettings {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class AutoProvisioningSettings class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Exposes the auto provisioning settings of the subscriptions
   * @param options The options parameters.
   */
  public list(
    options?: AutoProvisioningSettingsListOptionalParams
  ): PagedAsyncIterableIterator<AutoProvisioningSetting> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: AutoProvisioningSettingsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<AutoProvisioningSetting[]> {
    let result: AutoProvisioningSettingsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: AutoProvisioningSettingsListOptionalParams
  ): AsyncIterableIterator<AutoProvisioningSetting> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Exposes the auto provisioning settings of the subscriptions
   * @param options The options parameters.
   */
  private _list(
    options?: AutoProvisioningSettingsListOptionalParams
  ): Promise<AutoProvisioningSettingsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Details of a specific setting
   * @param settingName Auto provisioning setting key
   * @param options The options parameters.
   */
  get(
    settingName: string,
    options?: AutoProvisioningSettingsGetOptionalParams
  ): Promise<AutoProvisioningSettingsGetResponse> {
    return this.client.sendOperationRequest(
      { settingName, options },
      getOperationSpec
    );
  }

  /**
   * Details of a specific setting
   * @param settingName Auto provisioning setting key
   * @param setting Auto provisioning setting key
   * @param options The options parameters.
   */
  create(
    settingName: string,
    setting: AutoProvisioningSetting,
    options?: AutoProvisioningSettingsCreateOptionalParams
  ): Promise<AutoProvisioningSettingsCreateResponse> {
    return this.client.sendOperationRequest(
      { settingName, setting, options },
      createOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: AutoProvisioningSettingsListNextOptionalParams
  ): Promise<AutoProvisioningSettingsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/autoProvisioningSettings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutoProvisioningSettingList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion7],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/autoProvisioningSettings/{settingName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutoProvisioningSetting
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion7],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.settingName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Security/autoProvisioningSettings/{settingName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AutoProvisioningSetting
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.setting,
  queryParameters: [Parameters.apiVersion7],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.settingName1
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutoProvisioningSettingList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
