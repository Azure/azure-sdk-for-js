/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/iotSitesMappers";
import * as Parameters from "../models/parameters";
import { SecurityCenterContext } from "../securityCenterContext";

/** Class representing a IotSites. */
export class IotSites {
  private readonly client: SecurityCenterContext;

  /**
   * Create a IotSites.
   * @param {SecurityCenterContext} client Reference to the service client.
   */
  constructor(client: SecurityCenterContext) {
    this.client = client;
  }

  /**
   * List IoT sites
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param [options] The optional parameters
   * @returns Promise<Models.IotSitesListResponse>
   */
  list(scope: string, options?: msRest.RequestOptionsBase): Promise<Models.IotSitesListResponse>;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param callback The callback
   */
  list(scope: string, callback: msRest.ServiceCallback<Models.IotSitesList>): void;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param options The optional parameters
   * @param callback The callback
   */
  list(scope: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IotSitesList>): void;
  list(scope: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IotSitesList>, callback?: msRest.ServiceCallback<Models.IotSitesList>): Promise<Models.IotSitesListResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.IotSitesListResponse>;
  }

  /**
   * Get IoT site
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param [options] The optional parameters
   * @returns Promise<Models.IotSitesGetResponse>
   */
  get(scope: string, options?: msRest.RequestOptionsBase): Promise<Models.IotSitesGetResponse>;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param callback The callback
   */
  get(scope: string, callback: msRest.ServiceCallback<Models.IotSitesModel>): void;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param options The optional parameters
   * @param callback The callback
   */
  get(scope: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IotSitesModel>): void;
  get(scope: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IotSitesModel>, callback?: msRest.ServiceCallback<Models.IotSitesModel>): Promise<Models.IotSitesGetResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.IotSitesGetResponse>;
  }

  /**
   * Create or update IoT site
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSitesModel The IoT sites model
   * @param [options] The optional parameters
   * @returns Promise<Models.IotSitesCreateOrUpdateResponse>
   */
  createOrUpdate(scope: string, iotSitesModel: Models.IotSitesModel, options?: msRest.RequestOptionsBase): Promise<Models.IotSitesCreateOrUpdateResponse>;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSitesModel The IoT sites model
   * @param callback The callback
   */
  createOrUpdate(scope: string, iotSitesModel: Models.IotSitesModel, callback: msRest.ServiceCallback<Models.IotSitesModel>): void;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSitesModel The IoT sites model
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(scope: string, iotSitesModel: Models.IotSitesModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IotSitesModel>): void;
  createOrUpdate(scope: string, iotSitesModel: Models.IotSitesModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IotSitesModel>, callback?: msRest.ServiceCallback<Models.IotSitesModel>): Promise<Models.IotSitesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        iotSitesModel,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.IotSitesCreateOrUpdateResponse>;
  }

  /**
   * Delete IoT site
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(scope: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param callback The callback
   */
  deleteMethod(scope: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(scope: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(scope: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Security/iotSites",
  urlParameters: [
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion10
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IotSitesList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Security/iotSites/default",
  urlParameters: [
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion10
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IotSitesModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{scope}/providers/Microsoft.Security/iotSites/default",
  urlParameters: [
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion10
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "iotSitesModel",
    mapper: {
      ...Mappers.IotSitesModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IotSitesModel
    },
    201: {
      bodyMapper: Mappers.IotSitesModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{scope}/providers/Microsoft.Security/iotSites/default",
  urlParameters: [
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion10
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
