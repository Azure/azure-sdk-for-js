/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SecurityConnectorGovernanceRules } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  SecurityConnectorGovernanceRulesGetOptionalParams,
  SecurityConnectorGovernanceRulesGetResponse,
  GovernanceRule,
  SecurityConnectorGovernanceRulesCreateOrUpdateOptionalParams,
  SecurityConnectorGovernanceRulesCreateOrUpdateResponse,
  SecurityConnectorGovernanceRulesDeleteOptionalParams
} from "../models";

/** Class containing SecurityConnectorGovernanceRules operations. */
export class SecurityConnectorGovernanceRulesImpl
  implements SecurityConnectorGovernanceRules {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class SecurityConnectorGovernanceRules class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Get a specific governanceRule for the requested scope by ruleId
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    securityConnectorName: string,
    ruleId: string,
    options?: SecurityConnectorGovernanceRulesGetOptionalParams
  ): Promise<SecurityConnectorGovernanceRulesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, securityConnectorName, ruleId, options },
      getOperationSpec
    );
  }

  /**
   * Creates or update a security GovernanceRule on the given security connector.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param governanceRule GovernanceRule over a subscription scope
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    securityConnectorName: string,
    ruleId: string,
    governanceRule: GovernanceRule,
    options?: SecurityConnectorGovernanceRulesCreateOrUpdateOptionalParams
  ): Promise<SecurityConnectorGovernanceRulesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        securityConnectorName,
        ruleId,
        governanceRule,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete a GovernanceRule over a given scope
   * @param resourceGroupName The name of the resource group within the user's subscription. The name is
   *                          case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ruleId The security GovernanceRule key - unique key for the standard GovernanceRule
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    securityConnectorName: string,
    ruleId: string,
    options?: SecurityConnectorGovernanceRulesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, securityConnectorName, ruleId, options },
      deleteOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/providers/Microsoft.Security/governanceRules/{ruleId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GovernanceRule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion18],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ruleId,
    Parameters.securityConnectorName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/providers/Microsoft.Security/governanceRules/{ruleId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GovernanceRule
    },
    201: {
      bodyMapper: Mappers.GovernanceRule
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.governanceRule,
  queryParameters: [Parameters.apiVersion18],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ruleId,
    Parameters.securityConnectorName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/providers/Microsoft.Security/governanceRules/{ruleId}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion18],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.ruleId,
    Parameters.securityConnectorName
  ],
  serializer
};
