/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/iotAlertsMappers";
import * as Parameters from "../models/parameters";
import { SecurityCenterContext } from "../securityCenterContext";

/** Class representing a IotAlerts. */
export class IotAlerts {
  private readonly client: SecurityCenterContext;

  /**
   * Create a IotAlerts.
   * @param {SecurityCenterContext} client Reference to the service client.
   */
  constructor(client: SecurityCenterContext) {
    this.client = client;
  }

  /**
   * List IoT alerts
   * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub
   * (i.e.
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName})
   * @param [options] The optional parameters
   * @returns Promise<Models.IotAlertsListResponse>
   */
  list(scope: string, options?: Models.IotAlertsListOptionalParams): Promise<Models.IotAlertsListResponse>;
  /**
   * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub
   * (i.e.
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName})
   * @param callback The callback
   */
  list(scope: string, callback: msRest.ServiceCallback<Models.IotAlertListModel>): void;
  /**
   * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub
   * (i.e.
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName})
   * @param options The optional parameters
   * @param callback The callback
   */
  list(scope: string, options: Models.IotAlertsListOptionalParams, callback: msRest.ServiceCallback<Models.IotAlertListModel>): void;
  list(scope: string, options?: Models.IotAlertsListOptionalParams | msRest.ServiceCallback<Models.IotAlertListModel>, callback?: msRest.ServiceCallback<Models.IotAlertListModel>): Promise<Models.IotAlertsListResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.IotAlertsListResponse>;
  }

  /**
   * Get IoT alert
   * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub
   * (i.e.
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName})
   * @param iotAlertId Id of the alert
   * @param [options] The optional parameters
   * @returns Promise<Models.IotAlertsGetResponse>
   */
  get(scope: string, iotAlertId: string, options?: msRest.RequestOptionsBase): Promise<Models.IotAlertsGetResponse>;
  /**
   * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub
   * (i.e.
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName})
   * @param iotAlertId Id of the alert
   * @param callback The callback
   */
  get(scope: string, iotAlertId: string, callback: msRest.ServiceCallback<Models.IotAlertModel>): void;
  /**
   * @param scope Scope of the query: Subscription (i.e. /subscriptions/{subscriptionId}) or IoT Hub
   * (i.e.
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Devices/iotHubs/{iotHubName})
   * @param iotAlertId Id of the alert
   * @param options The optional parameters
   * @param callback The callback
   */
  get(scope: string, iotAlertId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IotAlertModel>): void;
  get(scope: string, iotAlertId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IotAlertModel>, callback?: msRest.ServiceCallback<Models.IotAlertModel>): Promise<Models.IotAlertsGetResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        iotAlertId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.IotAlertsGetResponse>;
  }

  /**
   * List IoT alerts
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotAlertsListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.IotAlertsListNextOptionalParams): Promise<Models.IotAlertsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IotAlertListModel>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.IotAlertsListNextOptionalParams, callback: msRest.ServiceCallback<Models.IotAlertListModel>): void;
  listNext(nextPageLink: string, options?: Models.IotAlertsListNextOptionalParams | msRest.ServiceCallback<Models.IotAlertListModel>, callback?: msRest.ServiceCallback<Models.IotAlertListModel>): Promise<Models.IotAlertsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.IotAlertsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Security/iotAlerts",
  urlParameters: [
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion10,
    Parameters.minStartTimeUtc,
    Parameters.maxStartTimeUtc,
    Parameters.alertType1,
    Parameters.deviceManagementType,
    Parameters.compromisedEntity,
    Parameters.limit,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IotAlertListModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Security/iotAlerts/{iotAlertId}",
  urlParameters: [
    Parameters.scope,
    Parameters.iotAlertId
  ],
  queryParameters: [
    Parameters.apiVersion10
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IotAlertModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion10,
    Parameters.minStartTimeUtc,
    Parameters.maxStartTimeUtc,
    Parameters.alertType1,
    Parameters.deviceManagementType,
    Parameters.compromisedEntity,
    Parameters.limit,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IotAlertListModel
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
