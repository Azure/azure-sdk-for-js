/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/deviceSecurityGroupsMappers";
import * as Parameters from "../models/parameters";
import { SecurityCenterContext } from "../securityCenterContext";

/** Class representing a DeviceSecurityGroups. */
export class DeviceSecurityGroups {
  private readonly client: SecurityCenterContext;

  /**
   * Create a DeviceSecurityGroups.
   * @param {SecurityCenterContext} client Reference to the service client.
   */
  constructor(client: SecurityCenterContext) {
    this.client = client;
  }

  /**
   * Use this method get the list of device security groups for the specified IoT Hub resource.
   * @param resourceId The identifier of the resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeviceSecurityGroupsListResponse>
   */
  list(resourceId: string, options?: msRest.RequestOptionsBase): Promise<Models.DeviceSecurityGroupsListResponse>;
  /**
   * @param resourceId The identifier of the resource.
   * @param callback The callback
   */
  list(resourceId: string, callback: msRest.ServiceCallback<Models.DeviceSecurityGroupList>): void;
  /**
   * @param resourceId The identifier of the resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeviceSecurityGroupList>): void;
  list(resourceId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeviceSecurityGroupList>, callback?: msRest.ServiceCallback<Models.DeviceSecurityGroupList>): Promise<Models.DeviceSecurityGroupsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DeviceSecurityGroupsListResponse>;
  }

  /**
   * Use this method to get the device security group for the specified IoT Hub resource.
   * @param resourceId The identifier of the resource.
   * @param deviceSecurityGroupName The name of the device security group. Note that the name of the
   * device security group is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeviceSecurityGroupsGetResponse>
   */
  get(resourceId: string, deviceSecurityGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeviceSecurityGroupsGetResponse>;
  /**
   * @param resourceId The identifier of the resource.
   * @param deviceSecurityGroupName The name of the device security group. Note that the name of the
   * device security group is case insensitive.
   * @param callback The callback
   */
  get(resourceId: string, deviceSecurityGroupName: string, callback: msRest.ServiceCallback<Models.DeviceSecurityGroup>): void;
  /**
   * @param resourceId The identifier of the resource.
   * @param deviceSecurityGroupName The name of the device security group. Note that the name of the
   * device security group is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceId: string, deviceSecurityGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeviceSecurityGroup>): void;
  get(resourceId: string, deviceSecurityGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeviceSecurityGroup>, callback?: msRest.ServiceCallback<Models.DeviceSecurityGroup>): Promise<Models.DeviceSecurityGroupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        deviceSecurityGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DeviceSecurityGroupsGetResponse>;
  }

  /**
   * Use this method to creates or updates the device security group on a specified IoT Hub resource.
   * @param resourceId The identifier of the resource.
   * @param deviceSecurityGroupName The name of the device security group. Note that the name of the
   * device security group is case insensitive.
   * @param deviceSecurityGroup Security group object.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeviceSecurityGroupsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceId: string, deviceSecurityGroupName: string, deviceSecurityGroup: Models.DeviceSecurityGroup, options?: msRest.RequestOptionsBase): Promise<Models.DeviceSecurityGroupsCreateOrUpdateResponse>;
  /**
   * @param resourceId The identifier of the resource.
   * @param deviceSecurityGroupName The name of the device security group. Note that the name of the
   * device security group is case insensitive.
   * @param deviceSecurityGroup Security group object.
   * @param callback The callback
   */
  createOrUpdate(resourceId: string, deviceSecurityGroupName: string, deviceSecurityGroup: Models.DeviceSecurityGroup, callback: msRest.ServiceCallback<Models.DeviceSecurityGroup>): void;
  /**
   * @param resourceId The identifier of the resource.
   * @param deviceSecurityGroupName The name of the device security group. Note that the name of the
   * device security group is case insensitive.
   * @param deviceSecurityGroup Security group object.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceId: string, deviceSecurityGroupName: string, deviceSecurityGroup: Models.DeviceSecurityGroup, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeviceSecurityGroup>): void;
  createOrUpdate(resourceId: string, deviceSecurityGroupName: string, deviceSecurityGroup: Models.DeviceSecurityGroup, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeviceSecurityGroup>, callback?: msRest.ServiceCallback<Models.DeviceSecurityGroup>): Promise<Models.DeviceSecurityGroupsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        deviceSecurityGroupName,
        deviceSecurityGroup,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.DeviceSecurityGroupsCreateOrUpdateResponse>;
  }

  /**
   * User this method to deletes the device security group.
   * @param resourceId The identifier of the resource.
   * @param deviceSecurityGroupName The name of the device security group. Note that the name of the
   * device security group is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceId: string, deviceSecurityGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceId The identifier of the resource.
   * @param deviceSecurityGroupName The name of the device security group. Note that the name of the
   * device security group is case insensitive.
   * @param callback The callback
   */
  deleteMethod(resourceId: string, deviceSecurityGroupName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceId The identifier of the resource.
   * @param deviceSecurityGroupName The name of the device security group. Note that the name of the
   * device security group is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceId: string, deviceSecurityGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceId: string, deviceSecurityGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        deviceSecurityGroupName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Use this method get the list of device security groups for the specified IoT Hub resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeviceSecurityGroupsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DeviceSecurityGroupsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeviceSecurityGroupList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeviceSecurityGroupList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeviceSecurityGroupList>, callback?: msRest.ServiceCallback<Models.DeviceSecurityGroupList>): Promise<Models.DeviceSecurityGroupsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.DeviceSecurityGroupsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{resourceId}/providers/Microsoft.Security/deviceSecurityGroups",
  urlParameters: [
    Parameters.resourceId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeviceSecurityGroupList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{resourceId}/providers/Microsoft.Security/deviceSecurityGroups/{deviceSecurityGroupName}",
  urlParameters: [
    Parameters.resourceId,
    Parameters.deviceSecurityGroupName
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeviceSecurityGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{resourceId}/providers/Microsoft.Security/deviceSecurityGroups/{deviceSecurityGroupName}",
  urlParameters: [
    Parameters.resourceId,
    Parameters.deviceSecurityGroupName
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "deviceSecurityGroup",
    mapper: {
      ...Mappers.DeviceSecurityGroup,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DeviceSecurityGroup
    },
    201: {
      bodyMapper: Mappers.DeviceSecurityGroup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{resourceId}/providers/Microsoft.Security/deviceSecurityGroups/{deviceSecurityGroupName}",
  urlParameters: [
    Parameters.resourceId,
    Parameters.deviceSecurityGroupName
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeviceSecurityGroupList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
