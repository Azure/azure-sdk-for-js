/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { GitHubRepos } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityCenter } from "../securityCenter";
import {
  GitHubRepository,
  GitHubReposListNextOptionalParams,
  GitHubReposListOptionalParams,
  GitHubReposListResponse,
  GitHubReposGetOptionalParams,
  GitHubReposGetResponse,
  GitHubReposListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing GitHubRepos operations. */
export class GitHubReposImpl implements GitHubRepos {
  private readonly client: SecurityCenter;

  /**
   * Initialize a new instance of the class GitHubRepos class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityCenter) {
    this.client = client;
  }

  /**
   * Returns a list of GitHub repositories onboarded to the connector.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ownerName The GitHub owner name.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    securityConnectorName: string,
    ownerName: string,
    options?: GitHubReposListOptionalParams,
  ): PagedAsyncIterableIterator<GitHubRepository> {
    const iter = this.listPagingAll(
      resourceGroupName,
      securityConnectorName,
      ownerName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          securityConnectorName,
          ownerName,
          options,
          settings,
        );
      },
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    securityConnectorName: string,
    ownerName: string,
    options?: GitHubReposListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<GitHubRepository[]> {
    let result: GitHubReposListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        securityConnectorName,
        ownerName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        securityConnectorName,
        ownerName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    securityConnectorName: string,
    ownerName: string,
    options?: GitHubReposListOptionalParams,
  ): AsyncIterableIterator<GitHubRepository> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      securityConnectorName,
      ownerName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Returns a list of GitHub repositories onboarded to the connector.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ownerName The GitHub owner name.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    securityConnectorName: string,
    ownerName: string,
    options?: GitHubReposListOptionalParams,
  ): Promise<GitHubReposListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, securityConnectorName, ownerName, options },
      listOperationSpec,
    );
  }

  /**
   * Returns a monitored GitHub repository.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ownerName The GitHub owner name.
   * @param repoName The repository name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    securityConnectorName: string,
    ownerName: string,
    repoName: string,
    options?: GitHubReposGetOptionalParams,
  ): Promise<GitHubReposGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        securityConnectorName,
        ownerName,
        repoName,
        options,
      },
      getOperationSpec,
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param securityConnectorName The security connector name.
   * @param ownerName The GitHub owner name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    securityConnectorName: string,
    ownerName: string,
    nextLink: string,
    options?: GitHubReposListNextOptionalParams,
  ): Promise<GitHubReposListNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        securityConnectorName,
        ownerName,
        nextLink,
        options,
      },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/gitHubOwners/{ownerName}/repos",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GitHubRepositoryListResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion15],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.securityConnectorName,
    Parameters.resourceGroupName1,
    Parameters.ownerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName}/devops/default/gitHubOwners/{ownerName}/repos/{repoName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GitHubRepository,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  queryParameters: [Parameters.apiVersion15],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.securityConnectorName,
    Parameters.resourceGroupName1,
    Parameters.repoName,
    Parameters.ownerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GitHubRepositoryListResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponseAutoGenerated,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.securityConnectorName,
    Parameters.resourceGroupName1,
    Parameters.ownerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
