/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/assessmentsMetadataMappers";
import * as Parameters from "../models/parameters";
import { SecurityCenterContext } from "../securityCenterContext";

/** Class representing a AssessmentsMetadata. */
export class AssessmentsMetadata {
  private readonly client: SecurityCenterContext;

  /**
   * Create a AssessmentsMetadata.
   * @param {SecurityCenterContext} client Reference to the service client.
   */
  constructor(client: SecurityCenterContext) {
    this.client = client;
  }

  /**
   * Get metadata information on all assessment types
   * @param [options] The optional parameters
   * @returns Promise<Models.AssessmentsMetadataListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.AssessmentsMetadataListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.SecurityAssessmentMetadataList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SecurityAssessmentMetadataList>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SecurityAssessmentMetadataList>, callback?: msRest.ServiceCallback<Models.SecurityAssessmentMetadataList>): Promise<Models.AssessmentsMetadataListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.AssessmentsMetadataListResponse>;
  }

  /**
   * Get metadata information on an assessment type
   * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type
   * @param [options] The optional parameters
   * @returns Promise<Models.AssessmentsMetadataGetResponse>
   */
  get(assessmentMetadataName: string, options?: msRest.RequestOptionsBase): Promise<Models.AssessmentsMetadataGetResponse>;
  /**
   * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type
   * @param callback The callback
   */
  get(assessmentMetadataName: string, callback: msRest.ServiceCallback<Models.SecurityAssessmentMetadata>): void;
  /**
   * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type
   * @param options The optional parameters
   * @param callback The callback
   */
  get(assessmentMetadataName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SecurityAssessmentMetadata>): void;
  get(assessmentMetadataName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SecurityAssessmentMetadata>, callback?: msRest.ServiceCallback<Models.SecurityAssessmentMetadata>): Promise<Models.AssessmentsMetadataGetResponse> {
    return this.client.sendOperationRequest(
      {
        assessmentMetadataName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.AssessmentsMetadataGetResponse>;
  }

  /**
   * Get metadata information on all assessment types
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AssessmentsMetadataListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AssessmentsMetadataListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SecurityAssessmentMetadataList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SecurityAssessmentMetadataList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SecurityAssessmentMetadataList>, callback?: msRest.ServiceCallback<Models.SecurityAssessmentMetadataList>): Promise<Models.AssessmentsMetadataListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.AssessmentsMetadataListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Security/assessmentMetadata",
  queryParameters: [
    Parameters.apiVersion6
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityAssessmentMetadataList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Security/assessmentMetadata/{assessmentMetadataName}",
  urlParameters: [
    Parameters.assessmentMetadataName
  ],
  queryParameters: [
    Parameters.apiVersion6
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityAssessmentMetadata
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SecurityAssessmentMetadataList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
