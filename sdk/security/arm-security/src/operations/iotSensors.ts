/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/iotSensorsMappers";
import * as Parameters from "../models/parameters";
import { SecurityCenterContext } from "../securityCenterContext";

/** Class representing a IotSensors. */
export class IotSensors {
  private readonly client: SecurityCenterContext;

  /**
   * Create a IotSensors.
   * @param {SecurityCenterContext} client Reference to the service client.
   */
  constructor(client: SecurityCenterContext) {
    this.client = client;
  }

  /**
   * List IoT sensors
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param [options] The optional parameters
   * @returns Promise<Models.IotSensorsListResponse>
   */
  list(scope: string, options?: msRest.RequestOptionsBase): Promise<Models.IotSensorsListResponse>;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param callback The callback
   */
  list(scope: string, callback: msRest.ServiceCallback<Models.IotSensorsList>): void;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param options The optional parameters
   * @param callback The callback
   */
  list(scope: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IotSensorsList>): void;
  list(scope: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IotSensorsList>, callback?: msRest.ServiceCallback<Models.IotSensorsList>): Promise<Models.IotSensorsListResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.IotSensorsListResponse>;
  }

  /**
   * Get IoT sensor
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param [options] The optional parameters
   * @returns Promise<Models.IotSensorsGetResponse>
   */
  get(scope: string, iotSensorName: string, options?: msRest.RequestOptionsBase): Promise<Models.IotSensorsGetResponse>;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param callback The callback
   */
  get(scope: string, iotSensorName: string, callback: msRest.ServiceCallback<Models.IotSensor>): void;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param options The optional parameters
   * @param callback The callback
   */
  get(scope: string, iotSensorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IotSensor>): void;
  get(scope: string, iotSensorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IotSensor>, callback?: msRest.ServiceCallback<Models.IotSensor>): Promise<Models.IotSensorsGetResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        iotSensorName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.IotSensorsGetResponse>;
  }

  /**
   * Create or update IoT sensor
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param [options] The optional parameters
   * @returns Promise<Models.IotSensorsCreateOrUpdateResponse>
   */
  createOrUpdate(scope: string, iotSensorName: string, options?: msRest.RequestOptionsBase): Promise<Models.IotSensorsCreateOrUpdateResponse>;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param callback The callback
   */
  createOrUpdate(scope: string, iotSensorName: string, callback: msRest.ServiceCallback<Models.IotSensor>): void;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(scope: string, iotSensorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IotSensor>): void;
  createOrUpdate(scope: string, iotSensorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IotSensor>, callback?: msRest.ServiceCallback<Models.IotSensor>): Promise<Models.IotSensorsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        iotSensorName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.IotSensorsCreateOrUpdateResponse>;
  }

  /**
   * Delete IoT sensor
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(scope: string, iotSensorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param callback The callback
   */
  deleteMethod(scope: string, iotSensorName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(scope: string, iotSensorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(scope: string, iotSensorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        iotSensorName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Download sensor activation file
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param [options] The optional parameters
   * @returns Promise<Models.IotSensorsDownloadActivationResponse>
   */
  downloadActivation(scope: string, iotSensorName: string, options?: msRest.RequestOptionsBase): Promise<Models.IotSensorsDownloadActivationResponse>;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param callback The callback
   */
  downloadActivation(scope: string, iotSensorName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param options The optional parameters
   * @param callback The callback
   */
  downloadActivation(scope: string, iotSensorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  downloadActivation(scope: string, iotSensorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.IotSensorsDownloadActivationResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        iotSensorName,
        options
      },
      downloadActivationOperationSpec,
      callback) as Promise<Models.IotSensorsDownloadActivationResponse>;
  }

  /**
   * Download file for reset password of the sensor
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param body The reset password input.
   * @param [options] The optional parameters
   * @returns Promise<Models.IotSensorsDownloadResetPasswordResponse>
   */
  downloadResetPassword(scope: string, iotSensorName: string, body: Models.ResetPasswordInput, options?: msRest.RequestOptionsBase): Promise<Models.IotSensorsDownloadResetPasswordResponse>;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param body The reset password input.
   * @param callback The callback
   */
  downloadResetPassword(scope: string, iotSensorName: string, body: Models.ResetPasswordInput, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
   * @param iotSensorName Name of the IoT sensor
   * @param body The reset password input.
   * @param options The optional parameters
   * @param callback The callback
   */
  downloadResetPassword(scope: string, iotSensorName: string, body: Models.ResetPasswordInput, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  downloadResetPassword(scope: string, iotSensorName: string, body: Models.ResetPasswordInput, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.IotSensorsDownloadResetPasswordResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        iotSensorName,
        body,
        options
      },
      downloadResetPasswordOperationSpec,
      callback) as Promise<Models.IotSensorsDownloadResetPasswordResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Security/iotSensors",
  urlParameters: [
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IotSensorsList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}",
  urlParameters: [
    Parameters.scope,
    Parameters.iotSensorName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IotSensor
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}",
  urlParameters: [
    Parameters.scope,
    Parameters.iotSensorName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IotSensor
    },
    201: {
      bodyMapper: Mappers.IotSensor
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}",
  urlParameters: [
    Parameters.scope,
    Parameters.iotSensorName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const downloadActivationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}/downloadActivation",
  urlParameters: [
    Parameters.scope,
    Parameters.iotSensorName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const downloadResetPasswordOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{scope}/providers/Microsoft.Security/iotSensors/{iotSensorName}/downloadResetPassword",
  urlParameters: [
    Parameters.scope,
    Parameters.iotSensorName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ResetPasswordInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
