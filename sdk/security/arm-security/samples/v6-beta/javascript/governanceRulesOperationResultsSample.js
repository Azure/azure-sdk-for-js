/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
const { SecurityCenter } = require("@azure/arm-security");
const { DefaultAzureCredential } = require("@azure/identity");
require("dotenv").config();

/**
 * This sample demonstrates how to Get governance rules long run operation result for the requested scope by ruleId and operationId
 *
 * @summary Get governance rules long run operation result for the requested scope by ruleId and operationId
 * x-ms-original-file: specification/security/resource-manager/Microsoft.Security/preview/2022-01-01-preview/examples/GovernanceRules/GetManagementGroupGovernanceRuleExecuteStatus_example.json
 */
async function getGovernanceRulesLongRunOperationResultOverManagementGroup() {
  const subscriptionId =
    process.env["SECURITY_SUBSCRIPTION_ID"] || "00000000-0000-0000-0000-000000000000";
  const scope = "providers/Microsoft.Management/managementGroups/contoso";
  const ruleId = "ad9a8e26-29d9-4829-bb30-e597a58cdbb8";
  const operationId = "58b33f4f-c8c7-4b01-99cc-d437db4d40dd";
  const credential = new DefaultAzureCredential();
  const client = new SecurityCenter(credential, subscriptionId);
  const result = await client.governanceRules.operationResults(scope, ruleId, operationId);
  console.log(result);
}

/**
 * This sample demonstrates how to Get governance rules long run operation result for the requested scope by ruleId and operationId
 *
 * @summary Get governance rules long run operation result for the requested scope by ruleId and operationId
 * x-ms-original-file: specification/security/resource-manager/Microsoft.Security/preview/2022-01-01-preview/examples/GovernanceRules/GetSecurityConnectorGovernanceRuleExecuteStatus_example.json
 */
async function getGovernanceRulesLongRunOperationResultOverSecurityConnector() {
  const subscriptionId =
    process.env["SECURITY_SUBSCRIPTION_ID"] || "00000000-0000-0000-0000-000000000000";
  const scope =
    "subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourceGroups/gcpResourceGroup/providers/Microsoft.Security/securityConnectors/gcpconnector";
  const ruleId = "ad9a8e26-29d9-4829-bb30-e597a58cdbb8";
  const operationId = "58b33f4f-c8c7-4b01-99cc-d437db4d40dd";
  const credential = new DefaultAzureCredential();
  const client = new SecurityCenter(credential, subscriptionId);
  const result = await client.governanceRules.operationResults(scope, ruleId, operationId);
  console.log(result);
}

/**
 * This sample demonstrates how to Get governance rules long run operation result for the requested scope by ruleId and operationId
 *
 * @summary Get governance rules long run operation result for the requested scope by ruleId and operationId
 * x-ms-original-file: specification/security/resource-manager/Microsoft.Security/preview/2022-01-01-preview/examples/GovernanceRules/GetGovernanceRuleExecuteStatus_example.json
 */
async function getGovernanceRulesLongRunOperationResultOverSubscription() {
  const subscriptionId =
    process.env["SECURITY_SUBSCRIPTION_ID"] || "00000000-0000-0000-0000-000000000000";
  const scope = "subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23";
  const ruleId = "ad9a8e26-29d9-4829-bb30-e597a58cdbb8";
  const operationId = "58b33f4f-c8c7-4b01-99cc-d437db4d40dd";
  const credential = new DefaultAzureCredential();
  const client = new SecurityCenter(credential, subscriptionId);
  const result = await client.governanceRules.operationResults(scope, ruleId, operationId);
  console.log(result);
}

async function main() {
  getGovernanceRulesLongRunOperationResultOverManagementGroup();
  getGovernanceRulesLongRunOperationResultOverSecurityConnector();
  getGovernanceRulesLongRunOperationResultOverSubscription();
}

main().catch(console.error);
