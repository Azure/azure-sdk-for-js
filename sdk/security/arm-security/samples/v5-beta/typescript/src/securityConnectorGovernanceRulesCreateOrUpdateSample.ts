/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { GovernanceRule, SecurityCenter } from "@azure/arm-security";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to Creates or update a security GovernanceRule on the given security connector.
 *
 * @summary Creates or update a security GovernanceRule on the given security connector.
 * x-ms-original-file: specification/security/resource-manager/Microsoft.Security/preview/2022-01-01-preview/examples/GovernanceRules/PutSecurityConnectorGovernanceRule_example.json
 */
async function createGovernanceRule() {
  const subscriptionId = "20ff7fc3-e762-44dd-bd96-b71116dcdc23";
  const resourceGroupName = "gcpResourceGroup";
  const securityConnectorName = "gcpconnector";
  const ruleId = "ad9a8e26-29d9-4829-bb30-e597a58cdbb8";
  const governanceRule: GovernanceRule = {
    description: "A rule on critical GCP recommendations",
    conditionSets: [
      {
        conditions: [
          {
            operator: "In",
            property: "$.AssessmentKey",
            value:
              '["b1cd27e0-4ecc-4246-939f-49c426d9d72f", "fe83f80b-073d-4ccf-93d9-6797eb870201"]'
          }
        ]
      }
    ],
    displayName: "GCP Admin's rule",
    governanceEmailNotification: {
      disableManagerEmailNotification: true,
      disableOwnerEmailNotification: false
    },
    isDisabled: false,
    isGracePeriod: true,
    ownerSource: { type: "Manually", value: "user@contoso.com" },
    remediationTimeframe: "7.00:00:00",
    rulePriority: 200,
    ruleType: "Integrated",
    sourceResourceType: "Assessments"
  };
  const credential = new DefaultAzureCredential();
  const client = new SecurityCenter(credential, subscriptionId);
  const result = await client.securityConnectorGovernanceRules.createOrUpdate(
    resourceGroupName,
    securityConnectorName,
    ruleId,
    governanceRule
  );
  console.log(result);
}

createGovernanceRule().catch(console.error);
