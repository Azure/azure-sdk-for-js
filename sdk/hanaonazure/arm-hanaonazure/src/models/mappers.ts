/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const Display: msRest.CompositeMapper = {
  serializedName: "Display",
  type: {
    name: "Composite",
    className: "Display",
    modelProperties: {
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        readOnly: true,
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      origin: {
        readOnly: true,
        serializedName: "origin",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "Display"
        }
      }
    }
  }
};

export const ErrorResponseError: msRest.CompositeMapper = {
  serializedName: "ErrorResponse_error",
  type: {
    name: "Composite",
    className: "ErrorResponseError",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponseError"
        }
      }
    }
  }
};

export const Tags: msRest.CompositeMapper = {
  serializedName: "Tags",
  type: {
    name: "Composite",
    className: "Tags",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SapMonitor: msRest.CompositeMapper = {
  serializedName: "SapMonitor",
  type: {
    name: "Composite",
    className: "SapMonitor",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      managedResourceGroupName: {
        readOnly: true,
        serializedName: "properties.managedResourceGroupName",
        type: {
          name: "String"
        }
      },
      logAnalyticsWorkspaceArmId: {
        serializedName: "properties.logAnalyticsWorkspaceArmId",
        type: {
          name: "String"
        }
      },
      enableCustomerAnalytics: {
        serializedName: "properties.enableCustomerAnalytics",
        type: {
          name: "Boolean"
        }
      },
      logAnalyticsWorkspaceId: {
        serializedName: "properties.logAnalyticsWorkspaceId",
        type: {
          name: "String"
        }
      },
      logAnalyticsWorkspaceSharedKey: {
        serializedName: "properties.logAnalyticsWorkspaceSharedKey",
        type: {
          name: "String"
        }
      },
      sapMonitorCollectorVersion: {
        readOnly: true,
        serializedName: "properties.sapMonitorCollectorVersion",
        type: {
          name: "String"
        }
      },
      monitorSubnet: {
        serializedName: "properties.monitorSubnet",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const ProviderInstance: msRest.CompositeMapper = {
  serializedName: "ProviderInstance",
  type: {
    name: "Composite",
    className: "ProviderInstance",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      providerInstanceType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties.properties",
        type: {
          name: "String"
        }
      },
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureEntityResource: msRest.CompositeMapper = {
  serializedName: "AzureEntityResource",
  type: {
    name: "Composite",
    className: "AzureEntityResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationList: msRest.CompositeMapper = {
  serializedName: "OperationList",
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const SapMonitorListResult: msRest.CompositeMapper = {
  serializedName: "SapMonitorListResult",
  type: {
    name: "Composite",
    className: "SapMonitorListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SapMonitor"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProviderInstanceListResult: msRest.CompositeMapper = {
  serializedName: "ProviderInstanceListResult",
  type: {
    name: "Composite",
    className: "ProviderInstanceListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProviderInstance"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
