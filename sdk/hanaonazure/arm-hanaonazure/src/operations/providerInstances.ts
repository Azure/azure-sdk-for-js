/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/providerInstancesMappers";
import * as Parameters from "../models/parameters";
import { HanaManagementClientContext } from "../hanaManagementClientContext";

/** Class representing a ProviderInstances. */
export class ProviderInstances {
  private readonly client: HanaManagementClientContext;

  /**
   * Create a ProviderInstances.
   * @param {HanaManagementClientContext} client Reference to the service client.
   */
  constructor(client: HanaManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a list of provider instances in the specified SAP monitor. The operations returns various
   * properties of each provider instances.
   * @summary Gets a list of provider instances in the specified SAP monitor.
   * @param resourceGroupName Name of the resource group.
   * @param sapMonitorName Name of the SAP monitor resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProviderInstancesListResponse>
   */
  list(resourceGroupName: string, sapMonitorName: string, options?: msRest.RequestOptionsBase): Promise<Models.ProviderInstancesListResponse>;
  /**
   * @param resourceGroupName Name of the resource group.
   * @param sapMonitorName Name of the SAP monitor resource.
   * @param callback The callback
   */
  list(resourceGroupName: string, sapMonitorName: string, callback: msRest.ServiceCallback<Models.ProviderInstanceListResult>): void;
  /**
   * @param resourceGroupName Name of the resource group.
   * @param sapMonitorName Name of the SAP monitor resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, sapMonitorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProviderInstanceListResult>): void;
  list(resourceGroupName: string, sapMonitorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProviderInstanceListResult>, callback?: msRest.ServiceCallback<Models.ProviderInstanceListResult>): Promise<Models.ProviderInstancesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sapMonitorName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ProviderInstancesListResponse>;
  }

  /**
   * Gets properties of a provider instance for the specified subscription, resource group,
   * SapMonitor name, and resource name.
   * @summary Gets properties of a provider instance.
   * @param resourceGroupName Name of the resource group.
   * @param sapMonitorName Name of the SAP monitor resource.
   * @param providerInstanceName Name of the provider instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProviderInstancesGetResponse>
   */
  get(resourceGroupName: string, sapMonitorName: string, providerInstanceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ProviderInstancesGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group.
   * @param sapMonitorName Name of the SAP monitor resource.
   * @param providerInstanceName Name of the provider instance.
   * @param callback The callback
   */
  get(resourceGroupName: string, sapMonitorName: string, providerInstanceName: string, callback: msRest.ServiceCallback<Models.ProviderInstance>): void;
  /**
   * @param resourceGroupName Name of the resource group.
   * @param sapMonitorName Name of the SAP monitor resource.
   * @param providerInstanceName Name of the provider instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, sapMonitorName: string, providerInstanceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProviderInstance>): void;
  get(resourceGroupName: string, sapMonitorName: string, providerInstanceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProviderInstance>, callback?: msRest.ServiceCallback<Models.ProviderInstance>): Promise<Models.ProviderInstancesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sapMonitorName,
        providerInstanceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ProviderInstancesGetResponse>;
  }

  /**
   * Creates a provider instance for the specified subscription, resource group, SapMonitor name, and
   * resource name.
   * @summary Creates a provider instance.
   * @param resourceGroupName Name of the resource group.
   * @param sapMonitorName Name of the SAP monitor resource.
   * @param providerInstanceName Name of the provider instance.
   * @param providerInstanceParameter Request body representing a provider instance
   * @param [options] The optional parameters
   * @returns Promise<Models.ProviderInstancesCreateResponse>
   */
  create(resourceGroupName: string, sapMonitorName: string, providerInstanceName: string, providerInstanceParameter: Models.ProviderInstance, options?: msRest.RequestOptionsBase): Promise<Models.ProviderInstancesCreateResponse> {
    return this.beginCreate(resourceGroupName,sapMonitorName,providerInstanceName,providerInstanceParameter,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ProviderInstancesCreateResponse>;
  }

  /**
   * Deletes a provider instance for the specified subscription, resource group, SapMonitor name, and
   * resource name.
   * @summary Deletes a provider instance.
   * @param resourceGroupName Name of the resource group.
   * @param sapMonitorName Name of the SAP monitor resource.
   * @param providerInstanceName Name of the provider instance.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, sapMonitorName: string, providerInstanceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,sapMonitorName,providerInstanceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates a provider instance for the specified subscription, resource group, SapMonitor name, and
   * resource name.
   * @summary Creates a provider instance.
   * @param resourceGroupName Name of the resource group.
   * @param sapMonitorName Name of the SAP monitor resource.
   * @param providerInstanceName Name of the provider instance.
   * @param providerInstanceParameter Request body representing a provider instance
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, sapMonitorName: string, providerInstanceName: string, providerInstanceParameter: Models.ProviderInstance, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        sapMonitorName,
        providerInstanceName,
        providerInstanceParameter,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Deletes a provider instance for the specified subscription, resource group, SapMonitor name, and
   * resource name.
   * @summary Deletes a provider instance.
   * @param resourceGroupName Name of the resource group.
   * @param sapMonitorName Name of the SAP monitor resource.
   * @param providerInstanceName Name of the provider instance.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, sapMonitorName: string, providerInstanceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        sapMonitorName,
        providerInstanceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Gets a list of provider instances in the specified SAP monitor. The operations returns various
   * properties of each provider instances.
   * @summary Gets a list of provider instances in the specified SAP monitor.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ProviderInstancesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ProviderInstancesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProviderInstanceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProviderInstanceListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ProviderInstanceListResult>, callback?: msRest.ServiceCallback<Models.ProviderInstanceListResult>): Promise<Models.ProviderInstancesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ProviderInstancesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}/providerInstances",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapMonitorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProviderInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}/providerInstances/{providerInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapMonitorName,
    Parameters.providerInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProviderInstance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}/providerInstances/{providerInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapMonitorName,
    Parameters.providerInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "providerInstanceParameter",
    mapper: {
      ...Mappers.ProviderInstance,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ProviderInstance
    },
    201: {
      bodyMapper: Mappers.ProviderInstance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}/providerInstances/{providerInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sapMonitorName,
    Parameters.providerInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ProviderInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
