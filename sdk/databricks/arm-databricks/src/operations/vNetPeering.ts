/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/vNetPeeringMappers";
import * as Parameters from "../models/parameters";
import { DatabricksClientContext } from "../databricksClientContext";

/** Class representing a VNetPeering. */
export class VNetPeering {
  private readonly client: DatabricksClientContext;

  /**
   * Create a VNetPeering.
   * @param {DatabricksClientContext} client Reference to the service client.
   */
  constructor(client: DatabricksClientContext) {
    this.client = client;
  }

  /**
   * Gets the workspace vNet Peering.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param peeringName The name of the workspace vNet peering.
   * @param [options] The optional parameters
   * @returns Promise<Models.VNetPeeringGetResponse>
   */
  get(resourceGroupName: string, workspaceName: string, peeringName: string, options?: msRest.RequestOptionsBase): Promise<Models.VNetPeeringGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param peeringName The name of the workspace vNet peering.
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, peeringName: string, callback: msRest.ServiceCallback<Models.VirtualNetworkPeering>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param peeringName The name of the workspace vNet peering.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, peeringName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualNetworkPeering>): void;
  get(resourceGroupName: string, workspaceName: string, peeringName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VirtualNetworkPeering>, callback?: msRest.ServiceCallback<Models.VirtualNetworkPeering>): Promise<Models.VNetPeeringGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        peeringName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.VNetPeeringGetResponse>;
  }

  /**
   * Deletes the workspace vNetPeering.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param peeringName The name of the workspace vNet peering.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, peeringName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,workspaceName,peeringName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates vNet Peering for workspace.
   * @param virtualNetworkPeeringParameters Parameters supplied to the create workspace vNet Peering.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param peeringName The name of the workspace vNet peering.
   * @param [options] The optional parameters
   * @returns Promise<Models.VNetPeeringCreateOrUpdateResponse>
   */
  createOrUpdate(virtualNetworkPeeringParameters: Models.VirtualNetworkPeering, resourceGroupName: string, workspaceName: string, peeringName: string, options?: msRest.RequestOptionsBase): Promise<Models.VNetPeeringCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(virtualNetworkPeeringParameters,resourceGroupName,workspaceName,peeringName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.VNetPeeringCreateOrUpdateResponse>;
  }

  /**
   * Lists the workspace vNet Peerings.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param [options] The optional parameters
   * @returns Promise<Models.VNetPeeringListByWorkspaceResponse>
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.VNetPeeringListByWorkspaceResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param callback The callback
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.VirtualNetworkPeeringList>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualNetworkPeeringList>): void;
  listByWorkspace(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VirtualNetworkPeeringList>, callback?: msRest.ServiceCallback<Models.VirtualNetworkPeeringList>): Promise<Models.VNetPeeringListByWorkspaceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        options
      },
      listByWorkspaceOperationSpec,
      callback) as Promise<Models.VNetPeeringListByWorkspaceResponse>;
  }

  /**
   * Deletes the workspace vNetPeering.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param peeringName The name of the workspace vNet peering.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, workspaceName: string, peeringName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        workspaceName,
        peeringName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Creates vNet Peering for workspace.
   * @param virtualNetworkPeeringParameters Parameters supplied to the create workspace vNet Peering.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param peeringName The name of the workspace vNet peering.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(virtualNetworkPeeringParameters: Models.VirtualNetworkPeering, resourceGroupName: string, workspaceName: string, peeringName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        virtualNetworkPeeringParameters,
        resourceGroupName,
        workspaceName,
        peeringName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Lists the workspace vNet Peerings.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.VNetPeeringListByWorkspaceNextResponse>
   */
  listByWorkspaceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.VNetPeeringListByWorkspaceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByWorkspaceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.VirtualNetworkPeeringList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByWorkspaceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VirtualNetworkPeeringList>): void;
  listByWorkspaceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VirtualNetworkPeeringList>, callback?: msRest.ServiceCallback<Models.VirtualNetworkPeeringList>): Promise<Models.VNetPeeringListByWorkspaceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByWorkspaceNextOperationSpec,
      callback) as Promise<Models.VNetPeeringListByWorkspaceNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Databricks/workspaces/{workspaceName}/virtualNetworkPeerings/{peeringName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.subscriptionId,
    Parameters.peeringName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkPeering
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByWorkspaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Databricks/workspaces/{workspaceName}/virtualNetworkPeerings",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkPeeringList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Databricks/workspaces/{workspaceName}/virtualNetworkPeerings/{peeringName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.subscriptionId,
    Parameters.peeringName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Databricks/workspaces/{workspaceName}/virtualNetworkPeerings/{peeringName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.subscriptionId,
    Parameters.peeringName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "virtualNetworkPeeringParameters",
    mapper: {
      ...Mappers.VirtualNetworkPeering,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkPeering
    },
    201: {
      bodyMapper: Mappers.VirtualNetworkPeering
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByWorkspaceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.VirtualNetworkPeeringList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
