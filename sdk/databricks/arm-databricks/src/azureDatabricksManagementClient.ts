/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreAuth from "@azure/core-auth";
import {
  WorkspacesImpl,
  OperationsImpl,
  PrivateLinkResourcesImpl,
  PrivateEndpointConnectionsImpl,
  OutboundNetworkDependenciesEndpointsImpl,
  VNetPeeringImpl
} from "./operations";
import {
  Workspaces,
  Operations,
  PrivateLinkResources,
  PrivateEndpointConnections,
  OutboundNetworkDependenciesEndpoints,
  VNetPeering
} from "./operationsInterfaces";
import { AzureDatabricksManagementClientContext } from "./azureDatabricksManagementClientContext";
import { AzureDatabricksManagementClientOptionalParams } from "./models";

export class AzureDatabricksManagementClient extends AzureDatabricksManagementClientContext {
  /**
   * Initializes a new instance of the AzureDatabricksManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: AzureDatabricksManagementClientOptionalParams
  ) {
    super(credentials, subscriptionId, options);
    this.workspaces = new WorkspacesImpl(this);
    this.operations = new OperationsImpl(this);
    this.privateLinkResources = new PrivateLinkResourcesImpl(this);
    this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
    this.outboundNetworkDependenciesEndpoints = new OutboundNetworkDependenciesEndpointsImpl(
      this
    );
    this.vNetPeering = new VNetPeeringImpl(this);
  }

  workspaces: Workspaces;
  operations: Operations;
  privateLinkResources: PrivateLinkResources;
  privateEndpointConnections: PrivateEndpointConnections;
  outboundNetworkDependenciesEndpoints: OutboundNetworkDependenciesEndpoints;
  vNetPeering: VNetPeering;
}
