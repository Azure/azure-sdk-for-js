/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import {
  MachinesImpl,
  ProcessesImpl,
  PortsImpl,
  ClientGroupsImpl,
  MapsImpl,
  SummariesImpl,
  MachineGroupsImpl
} from "./operations";
import {
  Machines,
  Processes,
  Ports,
  ClientGroups,
  Maps,
  Summaries,
  MachineGroups
} from "./operationsInterfaces";
import { ServiceMapOptionalParams } from "./models";

export class ServiceMap extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the ServiceMap class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Azure subscription identifier.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: ServiceMapOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: ServiceMapOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-servicemap/3.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri: options.endpoint || "https://management.azure.com"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2015-11-01-preview";
    this.machines = new MachinesImpl(this);
    this.processes = new ProcessesImpl(this);
    this.ports = new PortsImpl(this);
    this.clientGroups = new ClientGroupsImpl(this);
    this.maps = new MapsImpl(this);
    this.summaries = new SummariesImpl(this);
    this.machineGroups = new MachineGroupsImpl(this);
  }

  machines: Machines;
  processes: Processes;
  ports: Ports;
  clientGroups: ClientGroups;
  maps: Maps;
  summaries: Summaries;
  machineGroups: MachineGroups;
}
