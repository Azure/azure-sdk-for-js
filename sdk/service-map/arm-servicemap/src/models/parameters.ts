/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  MapRequest as MapRequestMapper,
  MachineGroup as MachineGroupMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      Pattern: new RegExp("[a-zA-Z0-9_-]+"),
      MaxLength: 64,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const workspaceName: OperationURLParameter = {
  parameterPath: "workspaceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("[a-zA-Z0-9_][a-zA-Z0-9_-]+[a-zA-Z0-9_]"),
      MaxLength: 63,
      MinLength: 3
    },
    serializedName: "workspaceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2015-11-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const live: OperationQueryParameter = {
  parameterPath: ["options", "live"],
  mapper: {
    defaultValue: true,
    serializedName: "live",
    type: {
      name: "Boolean"
    }
  }
};

export const startTime: OperationQueryParameter = {
  parameterPath: ["options", "startTime"],
  mapper: {
    serializedName: "startTime",
    type: {
      name: "DateTime"
    }
  }
};

export const endTime: OperationQueryParameter = {
  parameterPath: ["options", "endTime"],
  mapper: {
    serializedName: "endTime",
    type: {
      name: "DateTime"
    }
  }
};

export const timestamp: OperationQueryParameter = {
  parameterPath: ["options", "timestamp"],
  mapper: {
    serializedName: "timestamp",
    type: {
      name: "DateTime"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    constraints: {
      InclusiveMaximum: 200,
      InclusiveMinimum: 1
    },
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const machineName: OperationURLParameter = {
  parameterPath: "machineName",
  mapper: {
    constraints: {
      MaxLength: 64,
      MinLength: 3
    },
    serializedName: "machineName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const processName: OperationURLParameter = {
  parameterPath: "processName",
  mapper: {
    constraints: {
      MaxLength: 128,
      MinLength: 3
    },
    serializedName: "processName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const portName: OperationURLParameter = {
  parameterPath: "portName",
  mapper: {
    constraints: {
      MaxLength: 64,
      MinLength: 3
    },
    serializedName: "portName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const clientGroupName: OperationURLParameter = {
  parameterPath: "clientGroupName",
  mapper: {
    constraints: {
      MaxLength: 256,
      MinLength: 3
    },
    serializedName: "clientGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const request: OperationParameter = {
  parameterPath: "request",
  mapper: MapRequestMapper
};

export const machineGroup: OperationParameter = {
  parameterPath: "machineGroup",
  mapper: MachineGroupMapper
};

export const machineGroupName: OperationURLParameter = {
  parameterPath: "machineGroupName",
  mapper: {
    constraints: {
      MaxLength: 36,
      MinLength: 36
    },
    serializedName: "machineGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};
