/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Resource model definition.
 */
export interface Resource extends BaseResource {
  /**
   * Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
}

/**
 * Contains the possible cases for ResourceReference.
 */
export type ResourceReferenceUnion = ResourceReference | MachineReference | ProcessReference | PortReference | MachineReferenceWithHints | ClientGroupReference;

/**
 * Represents a reference to another resource.
 */
export interface ResourceReference {
  /**
   * Polymorphic Discriminator
   */
  kind: "ResourceReference";
  /**
   * Resource URI.
   */
  id: string;
  /**
   * Resource type qualifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
}

/**
 * Reference to a machine.
 */
export interface MachineReference {
  /**
   * Polymorphic Discriminator
   */
  kind: "ref:machine";
  /**
   * Resource URI.
   */
  id: string;
  /**
   * Resource type qualifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
}

/**
 * Reference to a process.
 */
export interface ProcessReference {
  /**
   * Polymorphic Discriminator
   */
  kind: "ref:process";
  /**
   * Resource URI.
   */
  id: string;
  /**
   * Resource type qualifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Machine hosting the process.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly machine?: MachineReference;
}

/**
 * Reference to a port.
 */
export interface PortReference {
  /**
   * Polymorphic Discriminator
   */
  kind: "ref:port";
  /**
   * Resource URI.
   */
  id: string;
  /**
   * Resource type qualifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Machine hosting the port.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly machine?: MachineReference;
  /**
   * IP address of the port.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly ipAddress?: string;
  /**
   * Port number.
   */
  portNumber?: number;
}

/**
 * A machine reference with a hint of the machine's name and operating system.
 */
export interface MachineReferenceWithHints {
  /**
   * Polymorphic Discriminator
   */
  kind: "ref:machinewithhints";
  /**
   * Resource URI.
   */
  id: string;
  /**
   * Resource type qualifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Last known display name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayNameHint?: string;
  /**
   * Last known operating system family. Possible values include: 'unknown', 'windows', 'linux',
   * 'solaris', 'aix'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly osFamilyHint?: OperatingSystemFamily;
}

/**
 * Reference to a client group.
 */
export interface ClientGroupReference {
  /**
   * Polymorphic Discriminator
   */
  kind: "ref:clientgroup";
  /**
   * Resource URI.
   */
  id: string;
  /**
   * Resource type qualifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
}

/**
 * Contains the possible cases for CoreResource.
 */
export type CoreResourceUnion = CoreResource | Machine | Process | Port | ClientGroup | MachineGroup;

/**
 * Marker resource for the core Service Map resources
 */
export interface CoreResource {
  /**
   * Polymorphic Discriminator
   */
  kind: "CoreResource";
  /**
   * Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource ETAG.
   */
  etag?: string;
}

/**
 * Describes a timezone.
 */
export interface Timezone {
  /**
   * Timezone full name.
   */
  fullName?: string;
}

/**
 * Describes the configuration of the Dependency Agent installed on a machine.
 */
export interface AgentConfiguration {
  /**
   * Health Service Agent unique identifier.
   */
  agentId: string;
  /**
   * Dependency Agent unique identifier.
   */
  dependencyAgentId?: string;
  /**
   * Dependency Agent version number.
   */
  dependencyAgentVersion?: string;
  /**
   * Dependency Agent revision number.
   */
  dependencyAgentRevision?: string;
  /**
   * Specifies whether the machine has been rebooted since the Dependency Agent installation.
   * Possible values include: 'unknown', 'rebooted', 'notRebooted'
   */
  rebootStatus?: MachineRebootStatus;
  /**
   * Machine clock granularity in milliseconds.
   */
  clockGranularity?: number;
}

/**
 * Describes the resources of a machine.
 */
export interface MachineResourcesConfiguration {
  /**
   * Physical memory in megabytes (MB).
   */
  physicalMemory?: number;
  /**
   * Number of CPUs.
   */
  cpus?: number;
  /**
   * CPU speed in megahertz (Mhz).
   */
  cpuSpeed?: number;
  /**
   * Describes the accuracy of the cpuSpeed field. Possible values include: 'actual', 'estimated'
   */
  cpuSpeedAccuracy?: Accuracy;
}

/**
 * Describes an IPv4 network interface.
 */
export interface Ipv4NetworkInterface {
  /**
   * IPv4 address.
   */
  ipAddress: string;
  /**
   * IPv4 subnet mask. Default value: '255.255.255.255'.
   */
  subnetMask?: string;
}

/**
 * Describes an IPv6 network interface.
 */
export interface Ipv6NetworkInterface {
  /**
   * IPv6 address.
   */
  ipAddress: string;
}

/**
 * Describes the network configuration of a machine.
 */
export interface NetworkConfiguration {
  /**
   * IPv4 interfaces.
   */
  ipv4Interfaces?: Ipv4NetworkInterface[];
  /**
   * IPv6 interfaces.
   */
  ipv6Interfaces?: Ipv6NetworkInterface[];
  /**
   * Default IPv4 gateways.
   */
  defaultIpv4Gateways?: string[];
  /**
   * MAC addresses of all active network interfaces.
   */
  macAddresses?: string[];
  /**
   * DNS names associated with the machine.
   */
  dnsNames?: string[];
}

/**
 * Describes the configuration of the operating system of a machine.
 */
export interface OperatingSystemConfiguration {
  /**
   * Windows, Linux, etc. Possible values include: 'unknown', 'windows', 'linux', 'solaris', 'aix'
   */
  family: OperatingSystemFamily;
  /**
   * Operating system full name.
   */
  fullName: string;
  /**
   * Operating system bitness (32-bit or 64-bit). Possible values include: '32bit', '64bit'
   */
  bitness: Bitness;
}

/**
 * Describes the virtualization-related configuration of a machine.
 */
export interface VirtualMachineConfiguration {
  /**
   * Specifies the virtualization technology used by the machine (hyperv, vmware, etc.). Possible
   * values include: 'unknown', 'hyperv', 'ldom', 'lpar', 'vmware', 'virtualPc', 'xen'
   */
  virtualMachineType?: VirtualMachineType;
  /**
   * The unique identifier of the virtual machine as reported by the underlying virtualization
   * system.
   */
  nativeMachineId?: string;
  /**
   * The Name of the virtual machine.
   */
  virtualMachineName?: string;
  /**
   * The unique identifier of the host of this virtual machine as reported by the underlying
   * virtualization system.
   */
  nativeHostMachineId?: string;
}

/**
 * Describes the hypervisor configuration of a machine.
 */
export interface HypervisorConfiguration {
  /**
   * Specifies the virtualization technology used by the hypervisor (hyperv, vmware, etc.).
   * Possible values include: 'unknown', 'hyperv'
   */
  hypervisorType?: HypervisorType;
  /**
   * The unique identifier of the hypervisor machine as reported by the underlying virtualization
   * system.
   */
  nativeHostMachineId?: string;
}

/**
 * Contains the possible cases for HostingConfiguration.
 */
export type HostingConfigurationUnion = HostingConfiguration | AzureHostingConfiguration;

/**
 * Describes the hosting configuration of a machine.
 */
export interface HostingConfiguration {
  /**
   * Polymorphic Discriminator
   */
  kind: "HostingConfiguration";
  /**
   * The hosting provider of the VM. Possible values include: 'azure'
   */
  provider?: Provider;
}

/**
 * A machine resource represents a discovered computer system. It can be *monitored*, i.e., a
 * Dependency Agent is running on it, or *discovered*, i.e., its existence was inferred by
 * observing the data stream from monitored machines. As machines change, prior versions of the
 * machine resource are preserved and available for access. A machine is live during an interval of
 * time, if either its Dependency Agent has reported data during (parts) of that interval, or a
 * Dependency agent running on other machines has reported activity associated with the machine.
 */
export interface Machine {
  /**
   * Polymorphic Discriminator
   */
  kind: "machine";
  /**
   * Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource ETAG.
   */
  etag?: string;
  /**
   * UTC date and time when this resource was updated in the system.
   */
  timestamp?: Date;
  /**
   * Specifies whether the machine is actively monitored or discovered. Possible values include:
   * 'monitored', 'discovered'
   */
  monitoringState?: MonitoringState;
  /**
   * Specifies whether the machine is virtualized. Possible values include: 'unknown', 'physical',
   * 'virtual', 'hypervisor'
   */
  virtualizationState?: VirtualizationState;
  /**
   * Name to use for display purposes
   */
  displayName?: string;
  /**
   * Name of the machine, e.g., server
   */
  computerName?: string;
  /**
   * Fully-qualified name of the machine, e.g., server.company.com
   */
  fullyQualifiedDomainName?: string;
  /**
   * UTC date and time when the machine last booted
   */
  bootTime?: Date;
  /**
   * Timezone of the machine.
   */
  timezone?: Timezone;
  /**
   * Dependency Agent configuration.
   */
  agent?: AgentConfiguration;
  /**
   * Machine resources (memory, cpu, etc.).
   */
  resources?: MachineResourcesConfiguration;
  /**
   * Network configuration (ips, gateways, dns, etc.)
   */
  networking?: NetworkConfiguration;
  /**
   * Operating system information.
   */
  operatingSystem?: OperatingSystemConfiguration;
  /**
   * Virtualization-related configuration. Present only when `virtualizationState` is `virtual`.
   */
  virtualMachine?: VirtualMachineConfiguration;
  /**
   * Hypervisor-related configuration. Present only when 'virtualizationState' is `hypervisor`.
   */
  hypervisor?: HypervisorConfiguration;
  /**
   * Hosting-related configuration. Present if hosting information is discovered for the VM.
   */
  hosting?: HostingConfigurationUnion;
}

/**
 * A service hosted by a process.
 */
export interface ProcessHostedService {
  /**
   * The name of the service.
   */
  name?: string;
  /**
   * The service's display name.
   */
  displayName?: string;
}

/**
 * Describes process metadata.
 */
export interface ProcessDetails {
  /**
   * A unique identifier for a process, generally resilient to process restart, computed by Service
   * Map.
   */
  persistentKey?: string;
  /**
   * Represents the identity of the process pool assigned to the process by Dependency Agent.
   */
  poolId?: number;
  /**
   * The Operating System Process Identifier (PID) of the first process in this process pool.
   */
  firstPid?: number;
  /**
   * Process description.
   */
  description?: string;
  /**
   * Name of company that created the process executable.
   */
  companyName?: string;
  /**
   * Internal process name.
   */
  internalName?: string;
  /**
   * Product name.
   */
  productName?: string;
  /**
   * Product version.
   */
  productVersion?: string;
  /**
   * File version.
   */
  fileVersion?: string;
  /**
   * Process command line.
   */
  commandLine?: string;
  /**
   * Process executable path.
   */
  executablePath?: string;
  /**
   * Process workingDirectory.
   */
  workingDirectory?: string;
  /**
   * Collection of services hosted by this Process (Windows only).
   */
  services?: ProcessHostedService[];
  /**
   * Process zone name (Linux only).
   */
  zoneName?: string;
}

/**
 * Describes the user under which a process is running.
 */
export interface ProcessUser {
  /**
   * User name under which the process is running.
   */
  userName?: string;
  /**
   * Domain name for the user.
   */
  userDomain?: string;
}

/**
 * Contains the possible cases for ProcessHostingConfiguration.
 */
export type ProcessHostingConfigurationUnion = ProcessHostingConfiguration | AzureProcessHostingConfiguration;

/**
 * Describes the hosting configuration of a process.
 */
export interface ProcessHostingConfiguration {
  /**
   * Polymorphic Discriminator
   */
  kind: "ProcessHostingConfiguration";
  /**
   * The hosting provider of the VM. Possible values include: 'azure'
   */
  provider?: Provider1;
}

/**
 * A process resource represents a process running on a machine. The process may be actively
 * *monitored*, i.e., a Dependency Agent is running on its machine, or *discovered*, i.e., its
 * existence was inferred by observing the data stream from monitored machines. A process resource
 * represents a pool of actual operating system resources that share command lines and metadata. As
 * the process pool evolves over time, prior versions of the process resource are preserved and
 * available for access. A process is live during an interval of time, if that process is executing
 * during (parts) of that interval
 */
export interface Process {
  /**
   * Polymorphic Discriminator
   */
  kind: "process";
  /**
   * Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource ETAG.
   */
  etag?: string;
  /**
   * UTC date and time when this process resource was updated in the system
   */
  timestamp?: Date;
  /**
   * Specifies whether the process is actively monitored or discovered. Possible values include:
   * 'monitored', 'discovered'
   */
  monitoringState?: MonitoringState;
  /**
   * Machine hosting this process.
   */
  machine?: ResourceReferenceUnion;
  /**
   * The name of the process executable
   */
  executableName?: string;
  /**
   * Name to use for display purposes
   */
  displayName?: string;
  /**
   * UTC date and time when the process started
   */
  startTime?: Date;
  /**
   * The inferred role of this process based on its name, command line, etc. Possible values
   * include: 'webServer', 'appServer', 'databaseServer', 'ldapServer', 'smbServer'
   */
  role?: ProcessRole;
  /**
   * The name of the product or suite of the process. The group is determined by its executable
   * name, command line, etc.
   */
  group?: string;
  /**
   * Process metadata (command line, product name, etc.).
   */
  details?: ProcessDetails;
  /**
   * Information about the account under which the process is executing.
   */
  user?: ProcessUser;
  /**
   * Present only for a discovered process acting as a client of a monitored process/machine/port.
   * References the monitored process/machine/port that this process is a client of.
   */
  clientOf?: ResourceReferenceUnion;
  /**
   * Present only for a discovered process acting as a server. References the port on which the
   * discovered process is accepting.
   */
  acceptorOf?: ResourceReferenceUnion;
  /**
   * Information about the hosting environment
   */
  hosting?: ProcessHostingConfigurationUnion;
}

/**
 * A port resource represents a server port on a machine. The port may be actively *monitored*,
 * i.e., a Dependency Agent is running on its machine, or *discovered*, i.e., its existence was
 * inferred by observing the data stream from monitored machines. A port is live during an interval
 * of time, if that port had associated activity during (parts) of that interval.
 */
export interface Port {
  /**
   * Polymorphic Discriminator
   */
  kind: "port";
  /**
   * Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource ETAG.
   */
  etag?: string;
  /**
   * Specifies whether the port is actively monitored or discovered. Possible values include:
   * 'monitored', 'discovered'
   */
  monitoringState?: MonitoringState;
  /**
   * Machine hosting this port.
   */
  machine?: ResourceReferenceUnion;
  /**
   * Name to use for display purposes.
   */
  displayName?: string;
  /**
   * IP address associated with the port. At present only IPv4 addresses are supported.
   */
  ipAddress?: string;
  /**
   * Port number.
   */
  portNumber?: number;
}

/**
 * Represents a collection of clients of a resource. A client group can represent the clients of a
 * port, process, or a machine.
 */
export interface ClientGroup {
  /**
   * Polymorphic Discriminator
   */
  kind: "clientGroup";
  /**
   * Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource ETAG.
   */
  etag?: string;
  /**
   * Reference to the resource whose clients are represented by this group.
   */
  clientsOf: ResourceReferenceUnion;
}

/**
 * Represents a member of a client group
 */
export interface ClientGroupMember extends Resource {
  /**
   * IP address.
   */
  ipAddress?: string;
  /**
   * Port into which this client connected
   */
  port?: PortReference;
  /**
   * Processes accepting on the above port that received connections from this client.
   */
  processes?: ProcessReference[];
}

/**
 * A user-defined logical grouping of machines.
 */
export interface MachineGroup {
  /**
   * Polymorphic Discriminator
   */
  kind: "machineGroup";
  /**
   * Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource ETAG.
   */
  etag?: string;
  /**
   * Type of the machine group. Possible values include: 'unknown', 'azure-cs', 'azure-sf',
   * 'azure-vmss', 'user-static'
   */
  groupType?: MachineGroupType;
  /**
   * User defined name for the group
   */
  displayName: string;
  /**
   * Count of machines in this group. The value of count may be bigger than the number of machines
   * in case of the group has been truncated due to exceeding the max number of machines a group
   * can handle.
   */
  count?: number;
  /**
   * References of the machines in this group. The hints within each reference do not represent the
   * current value of the corresponding fields. They are a snapshot created during the last time
   * the machine group was updated.
   */
  machines?: MachineReferenceWithHints[];
}

/**
 * Base for all resource summaries.
 */
export interface Summary extends Resource {
}

/**
 * Machines by operating system.
 */
export interface MachineCountsByOperatingSystem {
  /**
   * Number of live Windows machines.
   */
  windows: number;
  /**
   * Number of live Linux machines.
   */
  linux: number;
}

/**
 * A summary of the machines in the workspace.
 */
export interface MachinesSummary extends Summary {
  /**
   * Summary interval start time.
   */
  startTime: Date;
  /**
   * Summary interval end time.
   */
  endTime: Date;
  /**
   * Total number of machines.
   */
  total: number;
  /**
   * Number of live machines.
   */
  live: number;
  /**
   * Machine counts by operating system.
   */
  os: MachineCountsByOperatingSystem;
}

/**
 * Contains the possible cases for Relationship.
 */
export type RelationshipUnion = Relationship | Connection | Acceptor;

/**
 * A typed relationship between two entities.
 */
export interface Relationship {
  /**
   * Polymorphic Discriminator
   */
  kind: "Relationship";
  /**
   * Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
}

/**
 * A network connection.
 */
export interface Connection {
  /**
   * Polymorphic Discriminator
   */
  kind: "rel:connection";
  /**
   * Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Source resource of the relationship.
   */
  source: ResourceReferenceUnion;
  /**
   * Destination resource of the relationship.
   */
  destination: ResourceReferenceUnion;
  /**
   * Relationship start time.
   */
  startTime?: Date;
  /**
   * Relationship end time.
   */
  endTime?: Date;
  /**
   * Reference to the server port via which this connection has been established.
   */
  serverPort?: PortReference;
  /**
   * Specifies whether there are only successful, failed or a mixture of both connections
   * represented by this resource. Possible values include: 'ok', 'failed', 'mixed'
   */
  failureState?: ConnectionFailureState;
}

/**
 * A process accepting on a port.
 */
export interface Acceptor {
  /**
   * Polymorphic Discriminator
   */
  kind: "rel:acceptor";
  /**
   * Resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Port being accepted.
   */
  source: PortReference;
  /**
   * Accepting process.
   */
  destination: ProcessReference;
  /**
   * Relationship start time.
   */
  startTime?: Date;
  /**
   * Relationship end time.
   */
  endTime?: Date;
}

/**
 * Base for all summaries.
 */
export interface SummaryProperties {
  /**
   * Summary interval start time.
   */
  startTime: Date;
  /**
   * Summary interval end time.
   */
  endTime: Date;
}

/**
 * Relationship properties.
 */
export interface RelationshipProperties {
  /**
   * Source resource of the relationship.
   */
  source: ResourceReferenceUnion;
  /**
   * Destination resource of the relationship.
   */
  destination: ResourceReferenceUnion;
  /**
   * Relationship start time.
   */
  startTime?: Date;
  /**
   * Relationship end time.
   */
  endTime?: Date;
}

/**
 * Describes the VM image of a machine.
 */
export interface ImageConfiguration {
  /**
   * Publisher of the VM image.
   */
  publisher?: string;
  /**
   * Offering of the VM image.
   */
  offering?: string;
  /**
   * SKU of the VM image.
   */
  sku?: string;
  /**
   * Version of the VM image.
   */
  version?: string;
}

/**
 * Describes an Azure Cloud Service
 */
export interface AzureCloudServiceConfiguration {
  /**
   * Cloud Service name
   */
  name?: string;
  /**
   * Cloud Service instance identifier
   */
  instanceId?: string;
  /**
   * Cloud Service deployment identifier
   */
  deployment?: string;
  /**
   * Cloud Service role name
   */
  roleName?: string;
  /**
   * Used to specify type of an Azure Cloud Service role. Possible values include: 'unknown',
   * 'worker', 'web'
   */
  roleType?: AzureCloudServiceRoleType;
}

/**
 * Describes an Azure Virtual Machine Scale Set
 */
export interface AzureVmScaleSetConfiguration {
  /**
   * Virtual Machine Scale Set name
   */
  name?: string;
  /**
   * Virtual Machine Scale Set instance identifier
   */
  instanceId?: string;
  /**
   * Virtual Machine Scale Set deployment identifier
   */
  deployment?: string;
  /**
   * Unique identifier of the resource.
   */
  resourceId?: string;
}

/**
 * Describes an Azure Service Fabric Cluster
 */
export interface AzureServiceFabricClusterConfiguration {
  /**
   * Service Fabric cluster name.
   */
  name?: string;
  /**
   * Service Fabric cluster identifier.
   */
  clusterId?: string;
}

/**
 * Provides information about how a machine is hosted in Azure
 */
export interface AzureHostingConfiguration {
  /**
   * Polymorphic Discriminator
   */
  kind: "provider:azure";
  /**
   * The hosting provider of the VM. Possible values include: 'azure'
   */
  provider?: Provider;
  /**
   * Virtual Machine ID (unique identifier).
   */
  vmId?: string;
  /**
   * Geographical location of the VM.
   */
  location?: string;
  /**
   * Machine name according to the hosting provider.
   */
  name?: string;
  /**
   * Size of the VM.
   */
  size?: string;
  /**
   * Update domain of the VM.
   */
  updateDomain?: string;
  /**
   * Fault domain of the VM.
   */
  faultDomain?: string;
  /**
   * Subscription ID.
   */
  subscriptionId?: string;
  /**
   * Resource group name within the specified subscription.
   */
  resourceGroup?: string;
  /**
   * Unique identifier of the resource.
   */
  resourceId?: string;
  /**
   * Image of the machine.
   */
  image?: ImageConfiguration;
  /**
   * Contains information about machines hosted as an Azure Cloud Service
   */
  cloudService?: AzureCloudServiceConfiguration;
  /**
   * Contains information about machines hosted as an Azure Virtual Machine Scale Set
   */
  vmScaleSet?: AzureVmScaleSetConfiguration;
  /**
   * Contains information about machines that belong an Azure Service Fabric Cluster
   */
  serviceFabricCluster?: AzureServiceFabricClusterConfiguration;
}

/**
 * Describes the hosting configuration of a process when hosted on azure
 */
export interface AzureProcessHostingConfiguration {
  /**
   * Polymorphic Discriminator
   */
  kind: "provider:azure";
  /**
   * The hosting provider of the VM. Possible values include: 'azure'
   */
  provider?: Provider1;
  /**
   * Contains information about the cloud service the process belongs to
   */
  cloudService?: AzureCloudServiceConfiguration;
}

/**
 * The nodes (entities) of a map.
 */
export interface MapNodes {
  /**
   * Machine resources.
   */
  machines?: Machine[];
  /**
   * Process resources.
   */
  processes?: Process[];
  /**
   * Port resources.
   */
  ports?: Port[];
  /**
   * Client Group resources.
   */
  clientGroups?: ClientGroup[];
}

/**
 * The edges (relationships) of a map.
 */
export interface MapEdges {
  /**
   * Network connections.
   */
  connections?: Connection[];
  /**
   * Processes accepting on a port.
   */
  acceptors?: Acceptor[];
}

/**
 * A map of resources and relationships between them.
 */
export interface Map {
  nodes: MapNodes;
  edges: MapEdges;
}

/**
 * Specifies the contents of a check liveness response.
 */
export interface Liveness {
  /**
   * Liveness interval start time.
   */
  startTime: Date;
  /**
   * Liveness interval end time.
   */
  endTime: Date;
  /**
   * `true` if the resource is live during [startTime, endTime], `false` otherwise
   */
  live: boolean;
}

/**
 * Contains the possible cases for MapRequest.
 */
export type MapRequestUnion = MapRequest | SingleMachineDependencyMapRequest | MultipleMachinesMapRequestUnion;

/**
 * Specifies the contents of request to generate a map.
 */
export interface MapRequest {
  /**
   * Polymorphic Discriminator
   */
  kind: "MapRequest";
  /**
   * Map interval start time.
   */
  startTime?: Date;
  /**
   * Map interval end time.
   */
  endTime?: Date;
}

/**
 * Specifies the computation of a single server dependency map. A single server dependency map
 * includes all direct dependencies of a given machine.
 */
export interface SingleMachineDependencyMapRequest {
  /**
   * Polymorphic Discriminator
   */
  kind: "map:single-machine-dependency";
  /**
   * Map interval start time.
   */
  startTime?: Date;
  /**
   * Map interval end time.
   */
  endTime?: Date;
  /**
   * URI of machine resource for which to generate the map.
   */
  machineId: string;
}

/**
 * Contains the possible cases for MultipleMachinesMapRequest.
 */
export type MultipleMachinesMapRequestUnion = MultipleMachinesMapRequest | MachineListMapRequest | MachineGroupMapRequest;

/**
 * Provides a base class for describing map requests for a collection of machines
 */
export interface MultipleMachinesMapRequest {
  /**
   * Polymorphic Discriminator
   */
  kind: "MultipleMachinesMapRequest";
  /**
   * Map interval start time.
   */
  startTime?: Date;
  /**
   * Map interval end time.
   */
  endTime?: Date;
  /**
   * If true, only processes between specified machines will be included. Any connections in or out
   * of those processes will be included.
   */
  filterProcesses?: boolean;
}

/**
 * Specifies the computation of a one hope dependency map for a list of machines. The resulting map
 * includes all direct dependencies for the specified machines.
 */
export interface MachineListMapRequest {
  /**
   * Polymorphic Discriminator
   */
  kind: "map:machine-list-dependency";
  /**
   * Map interval start time.
   */
  startTime?: Date;
  /**
   * Map interval end time.
   */
  endTime?: Date;
  /**
   * If true, only processes between specified machines will be included. Any connections in or out
   * of those processes will be included.
   */
  filterProcesses?: boolean;
  /**
   * a list of URIs of machine resources for which to generate the map.
   */
  machineIds: string[];
}

/**
 * Specifies the computation of a machine group dependency map. A machine group dependency map
 * includes all direct dependencies the machines in the group.
 */
export interface MachineGroupMapRequest {
  /**
   * Polymorphic Discriminator
   */
  kind: "map:machine-group-dependency";
  /**
   * Map interval start time.
   */
  startTime?: Date;
  /**
   * Map interval end time.
   */
  endTime?: Date;
  /**
   * If true, only processes between specified machines will be included. Any connections in or out
   * of those processes will be included.
   */
  filterProcesses?: boolean;
  /**
   * URI of machine group resource for which to generate the map.
   */
  machineGroupId: string;
}

/**
 * Specified the contents of a map response.
 */
export interface MapResponse {
  /**
   * Map interval start time.
   */
  startTime: Date;
  /**
   * Map interval end time.
   */
  endTime: Date;
  /**
   * The generated map.
   */
  map: Map;
}

/**
 * Specifies the number of members in a client group.
 */
export interface ClientGroupMembersCount {
  /**
   * Membership interval start time.
   */
  startTime: Date;
  /**
   * Membership interval start time.
   */
  endTime: Date;
  /**
   * Client Group URI.
   */
  groupId: string;
  /**
   * Number of members in the client group. Use this value together with the value of
   * ```accuracy```. If accuracy is `exact` then the value represents the actual number of members
   * in the cloud. When accuracy is `estimated`, the actual number of members is larger than the
   * value of ```count```.
   */
  count: number;
  /**
   * Accuracy of the reported count. Possible values include: 'actual', 'estimated'
   */
  accuracy: Accuracy;
}

/**
 * Error details.
 */
export interface ErrorModel {
  /**
   * Error code identifying the specific error.
   */
  code: string;
  /**
   * Error message in the caller's locale.
   */
  message?: string;
}

/**
 * An error response from the API.
 */
export interface ErrorResponse {
  /**
   * Error information.
   */
  error: ErrorModel;
}

/**
 * Optional Parameters.
 */
export interface MachinesListByWorkspaceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Specifies whether to return live resources (true) or inventory resources (false). Defaults to
   * **true**. When retrieving live resources, the start time (`startTime`) and end time
   * (`endTime`) of the desired interval should be included. When retrieving inventory resources,
   * an optional timestamp (`timestamp`) parameter can be specified to return the version of each
   * resource closest (not-after) that timestamp. Default value: true.
   */
  live?: boolean;
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
  /**
   * UTC date and time specifying a time instance relative to which to evaluate each machine
   * resource. Only applies when `live=false`. When not specified, the service uses
   * DateTime.UtcNow.
   */
  timestamp?: Date;
  /**
   * Page size to use. When not specified, the default page size is 100 records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface MachinesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying a time instance relative to which to evaluate the machine
   * resource. When not specified, the service uses DateTime.UtcNow.
   */
  timestamp?: Date;
}

/**
 * Optional Parameters.
 */
export interface MachinesGetLivenessOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface MachinesListConnectionsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface MachinesListProcessesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Specifies whether to return live resources (true) or inventory resources (false). Defaults to
   * **true**. When retrieving live resources, the start time (`startTime`) and end time
   * (`endTime`) of the desired interval should be included. When retrieving inventory resources,
   * an optional timestamp (`timestamp`) parameter can be specified to return the version of each
   * resource closest (not-after) that timestamp. Default value: true.
   */
  live?: boolean;
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
  /**
   * UTC date and time specifying a time instance relative to which to evaluate all process
   * resource. Only applies when `live=false`. When not specified, the service uses
   * DateTime.UtcNow.
   */
  timestamp?: Date;
}

/**
 * Optional Parameters.
 */
export interface MachinesListPortsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface MachinesListMachineGroupMembershipOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface ProcessesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying a time instance relative to which to evaluate a resource. When
   * not specified, the service uses DateTime.UtcNow.
   */
  timestamp?: Date;
}

/**
 * Optional Parameters.
 */
export interface ProcessesGetLivenessOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface ProcessesListAcceptingPortsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface ProcessesListConnectionsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface PortsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface PortsGetLivenessOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface PortsListAcceptingProcessesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface PortsListConnectionsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface ClientGroupsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface ClientGroupsGetMembersCountOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface ClientGroupsListMembersOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
  /**
   * Page size to use. When not specified, the default page size is 100 records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface SummariesGetMachinesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface MachineGroupsListByWorkspaceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * Optional Parameters.
 */
export interface MachineGroupsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * UTC date and time specifying the start time of an interval. When not specified the service
   * uses DateTime.UtcNow - 10m
   */
  startTime?: Date;
  /**
   * UTC date and time specifying the end time of an interval. When not specified the service uses
   * DateTime.UtcNow
   */
  endTime?: Date;
}

/**
 * An interface representing ServicemapManagementClientOptions.
 */
export interface ServicemapManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * Collection of Machine resources.
 * @extends Array<Machine>
 */
export interface MachineCollection extends Array<Machine> {
  /**
   * The URL to the next set of resources.
   */
  nextLink?: string;
}

/**
 * @interface
 * Collection of Connection resources.
 * @extends Array<Connection>
 */
export interface ConnectionCollection extends Array<Connection> {
  /**
   * The URL to the next set of resources.
   */
  nextLink?: string;
}

/**
 * @interface
 * Collection of Process resources.
 * @extends Array<Process>
 */
export interface ProcessCollection extends Array<Process> {
  /**
   * The URL to the next set of resources.
   */
  nextLink?: string;
}

/**
 * @interface
 * Collection of Port resources.
 * @extends Array<Port>
 */
export interface PortCollection extends Array<Port> {
  /**
   * The URL to the next set of resources.
   */
  nextLink?: string;
}

/**
 * @interface
 * Collection of Machine Group resources.
 * @extends Array<MachineGroup>
 */
export interface MachineGroupCollection extends Array<MachineGroup> {
  /**
   * The URL to the next set of resources.
   */
  nextLink?: string;
}

/**
 * @interface
 * Collection of ClientGroupMember resources.
 * @extends Array<ClientGroupMember>
 */
export interface ClientGroupMembersCollection extends Array<ClientGroupMember> {
  /**
   * The URL to the next set of resources.
   */
  nextLink?: string;
}

/**
 * Defines values for OperatingSystemFamily.
 * Possible values include: 'unknown', 'windows', 'linux', 'solaris', 'aix'
 * @readonly
 * @enum {string}
 */
export type OperatingSystemFamily = 'unknown' | 'windows' | 'linux' | 'solaris' | 'aix';

/**
 * Defines values for MonitoringState.
 * Possible values include: 'monitored', 'discovered'
 * @readonly
 * @enum {string}
 */
export type MonitoringState = 'monitored' | 'discovered';

/**
 * Defines values for VirtualizationState.
 * Possible values include: 'unknown', 'physical', 'virtual', 'hypervisor'
 * @readonly
 * @enum {string}
 */
export type VirtualizationState = 'unknown' | 'physical' | 'virtual' | 'hypervisor';

/**
 * Defines values for MachineRebootStatus.
 * Possible values include: 'unknown', 'rebooted', 'notRebooted'
 * @readonly
 * @enum {string}
 */
export type MachineRebootStatus = 'unknown' | 'rebooted' | 'notRebooted';

/**
 * Defines values for Accuracy.
 * Possible values include: 'actual', 'estimated'
 * @readonly
 * @enum {string}
 */
export type Accuracy = 'actual' | 'estimated';

/**
 * Defines values for Bitness.
 * Possible values include: '32bit', '64bit'
 * @readonly
 * @enum {string}
 */
export type Bitness = '32bit' | '64bit';

/**
 * Defines values for VirtualMachineType.
 * Possible values include: 'unknown', 'hyperv', 'ldom', 'lpar', 'vmware', 'virtualPc', 'xen'
 * @readonly
 * @enum {string}
 */
export type VirtualMachineType = 'unknown' | 'hyperv' | 'ldom' | 'lpar' | 'vmware' | 'virtualPc' | 'xen';

/**
 * Defines values for HypervisorType.
 * Possible values include: 'unknown', 'hyperv'
 * @readonly
 * @enum {string}
 */
export type HypervisorType = 'unknown' | 'hyperv';

/**
 * Defines values for ProcessRole.
 * Possible values include: 'webServer', 'appServer', 'databaseServer', 'ldapServer', 'smbServer'
 * @readonly
 * @enum {string}
 */
export type ProcessRole = 'webServer' | 'appServer' | 'databaseServer' | 'ldapServer' | 'smbServer';

/**
 * Defines values for MachineGroupType.
 * Possible values include: 'unknown', 'azure-cs', 'azure-sf', 'azure-vmss', 'user-static'
 * @readonly
 * @enum {string}
 */
export type MachineGroupType = 'unknown' | 'azure-cs' | 'azure-sf' | 'azure-vmss' | 'user-static';

/**
 * Defines values for ConnectionFailureState.
 * Possible values include: 'ok', 'failed', 'mixed'
 * @readonly
 * @enum {string}
 */
export type ConnectionFailureState = 'ok' | 'failed' | 'mixed';

/**
 * Defines values for AzureCloudServiceRoleType.
 * Possible values include: 'unknown', 'worker', 'web'
 * @readonly
 * @enum {string}
 */
export type AzureCloudServiceRoleType = 'unknown' | 'worker' | 'web';

/**
 * Defines values for Provider.
 * Possible values include: 'azure'
 * @readonly
 * @enum {string}
 */
export type Provider = 'azure';

/**
 * Defines values for Provider1.
 * Possible values include: 'azure'
 * @readonly
 * @enum {string}
 */
export type Provider1 = 'azure';

/**
 * Contains response data for the listByWorkspace operation.
 */
export type MachinesListByWorkspaceResponse = MachineCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineCollection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type MachinesGetResponse = Machine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Machine;
    };
};

/**
 * Contains response data for the getLiveness operation.
 */
export type MachinesGetLivenessResponse = Liveness & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Liveness;
    };
};

/**
 * Contains response data for the listConnections operation.
 */
export type MachinesListConnectionsResponse = ConnectionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionCollection;
    };
};

/**
 * Contains response data for the listProcesses operation.
 */
export type MachinesListProcessesResponse = ProcessCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProcessCollection;
    };
};

/**
 * Contains response data for the listPorts operation.
 */
export type MachinesListPortsResponse = PortCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PortCollection;
    };
};

/**
 * Contains response data for the listMachineGroupMembership operation.
 */
export type MachinesListMachineGroupMembershipResponse = MachineGroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineGroupCollection;
    };
};

/**
 * Contains response data for the listByWorkspaceNext operation.
 */
export type MachinesListByWorkspaceNextResponse = MachineCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineCollection;
    };
};

/**
 * Contains response data for the listConnectionsNext operation.
 */
export type MachinesListConnectionsNextResponse = ConnectionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionCollection;
    };
};

/**
 * Contains response data for the listProcessesNext operation.
 */
export type MachinesListProcessesNextResponse = ProcessCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProcessCollection;
    };
};

/**
 * Contains response data for the listPortsNext operation.
 */
export type MachinesListPortsNextResponse = PortCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PortCollection;
    };
};

/**
 * Contains response data for the listMachineGroupMembershipNext operation.
 */
export type MachinesListMachineGroupMembershipNextResponse = MachineGroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineGroupCollection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ProcessesGetResponse = Process & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Process;
    };
};

/**
 * Contains response data for the getLiveness operation.
 */
export type ProcessesGetLivenessResponse = Liveness & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Liveness;
    };
};

/**
 * Contains response data for the listAcceptingPorts operation.
 */
export type ProcessesListAcceptingPortsResponse = PortCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PortCollection;
    };
};

/**
 * Contains response data for the listConnections operation.
 */
export type ProcessesListConnectionsResponse = ConnectionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionCollection;
    };
};

/**
 * Contains response data for the listAcceptingPortsNext operation.
 */
export type ProcessesListAcceptingPortsNextResponse = PortCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PortCollection;
    };
};

/**
 * Contains response data for the listConnectionsNext operation.
 */
export type ProcessesListConnectionsNextResponse = ConnectionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionCollection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PortsGetResponse = Port & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Port;
    };
};

/**
 * Contains response data for the getLiveness operation.
 */
export type PortsGetLivenessResponse = Liveness & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Liveness;
    };
};

/**
 * Contains response data for the listAcceptingProcesses operation.
 */
export type PortsListAcceptingProcessesResponse = ProcessCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProcessCollection;
    };
};

/**
 * Contains response data for the listConnections operation.
 */
export type PortsListConnectionsResponse = ConnectionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionCollection;
    };
};

/**
 * Contains response data for the listAcceptingProcessesNext operation.
 */
export type PortsListAcceptingProcessesNextResponse = ProcessCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProcessCollection;
    };
};

/**
 * Contains response data for the listConnectionsNext operation.
 */
export type PortsListConnectionsNextResponse = ConnectionCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectionCollection;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ClientGroupsGetResponse = ClientGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClientGroup;
    };
};

/**
 * Contains response data for the getMembersCount operation.
 */
export type ClientGroupsGetMembersCountResponse = ClientGroupMembersCount & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClientGroupMembersCount;
    };
};

/**
 * Contains response data for the listMembers operation.
 */
export type ClientGroupsListMembersResponse = ClientGroupMembersCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClientGroupMembersCollection;
    };
};

/**
 * Contains response data for the listMembersNext operation.
 */
export type ClientGroupsListMembersNextResponse = ClientGroupMembersCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClientGroupMembersCollection;
    };
};

/**
 * Contains response data for the generate operation.
 */
export type MapsGenerateResponse = MapResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MapResponse;
    };
};

/**
 * Contains response data for the getMachines operation.
 */
export type SummariesGetMachinesResponse = MachinesSummary & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachinesSummary;
    };
};

/**
 * Contains response data for the listByWorkspace operation.
 */
export type MachineGroupsListByWorkspaceResponse = MachineGroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineGroupCollection;
    };
};

/**
 * Contains response data for the create operation.
 */
export type MachineGroupsCreateResponse = MachineGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineGroup;
    };
};

/**
 * Contains response data for the get operation.
 */
export type MachineGroupsGetResponse = MachineGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineGroup;
    };
};

/**
 * Contains response data for the update operation.
 */
export type MachineGroupsUpdateResponse = MachineGroup & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineGroup;
    };
};

/**
 * Contains response data for the listByWorkspaceNext operation.
 */
export type MachineGroupsListByWorkspaceNextResponse = MachineGroupCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MachineGroupCollection;
    };
};
