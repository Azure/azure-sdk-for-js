/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type HostingConfigurationUnion =
  | HostingConfiguration
  | AzureHostingConfiguration;
export type ResourceReferenceUnion =
  | ResourceReference
  | MachineReference
  | PortReference
  | MachineReferenceWithHints
  | ProcessReference
  | ClientGroupReference;
export type ProcessHostingConfigurationUnion =
  | ProcessHostingConfiguration
  | AzureProcessHostingConfiguration;
export type MapRequestUnion =
  | MapRequest
  | SingleMachineDependencyMapRequest
  | MultipleMachinesMapRequestUnion;
export type CoreResourceUnion =
  | CoreResource
  | Machine
  | Process
  | Port
  | MachineGroup
  | ClientGroup;
export type RelationshipUnion = Relationship | Connection | Acceptor;
export type MultipleMachinesMapRequestUnion =
  | MultipleMachinesMapRequest
  | MachineListMapRequest
  | MachineGroupMapRequest;

/** Collection of Machine resources. */
export interface MachineCollection {
  /** Collection of Machine resources. */
  value?: Machine[];
  /** The URL to the next set of resources. */
  nextLink?: string;
}

/** Describes a timezone. */
export interface Timezone {
  /** Timezone full name. */
  fullName?: string;
}

/** Describes the configuration of the Dependency Agent installed on a machine. */
export interface AgentConfiguration {
  /** Health Service Agent unique identifier. */
  agentId: string;
  /** Dependency Agent unique identifier. */
  dependencyAgentId?: string;
  /** Dependency Agent version number. */
  dependencyAgentVersion?: string;
  /** Dependency Agent revision number. */
  dependencyAgentRevision?: string;
  /** Specifies whether the machine has been rebooted since the Dependency Agent installation. */
  rebootStatus?: MachineRebootStatus;
  /** Machine clock granularity in milliseconds. */
  clockGranularity?: number;
}

/** Describes the resources of a machine. */
export interface MachineResourcesConfiguration {
  /** Physical memory in megabytes (MB). */
  physicalMemory?: number;
  /** Number of CPUs. */
  cpus?: number;
  /** CPU speed in megahertz (Mhz). */
  cpuSpeed?: number;
  /** Describes the accuracy of the cpuSpeed field. */
  cpuSpeedAccuracy?: Accuracy;
}

/** Describes the network configuration of a machine. */
export interface NetworkConfiguration {
  /** IPv4 interfaces. */
  ipv4Interfaces?: Ipv4NetworkInterface[];
  /** IPv6 interfaces. */
  ipv6Interfaces?: Ipv6NetworkInterface[];
  /** Default IPv4 gateways. */
  defaultIpv4Gateways?: string[];
  /** MAC addresses of all active network interfaces. */
  macAddresses?: string[];
  /** DNS names associated with the machine. */
  dnsNames?: string[];
}

/** Describes an IPv4 network interface. */
export interface Ipv4NetworkInterface {
  /** IPv4 address. */
  ipAddress: string;
  /** IPv4 subnet mask. */
  subnetMask?: string;
}

/** Describes an IPv6 network interface. */
export interface Ipv6NetworkInterface {
  /** IPv6 address. */
  ipAddress: string;
}

/** Describes the configuration of the operating system of a machine. */
export interface OperatingSystemConfiguration {
  /** Windows, Linux, etc. */
  family: OperatingSystemFamily;
  /** Operating system full name. */
  fullName: string;
  /** Operating system bitness (32-bit or 64-bit). */
  bitness: Bitness;
}

/** Describes the virtualization-related configuration of a machine. */
export interface VirtualMachineConfiguration {
  /** Specifies the virtualization technology used by the machine (hyperv, vmware, etc.) */
  virtualMachineType?: VirtualMachineType;
  /** The unique identifier of the virtual machine as reported by the underlying virtualization system. */
  nativeMachineId?: string;
  /** The Name of the virtual machine. */
  virtualMachineName?: string;
  /** The unique identifier of the host of this virtual machine as reported by the underlying virtualization system. */
  nativeHostMachineId?: string;
}

/** Describes the hypervisor configuration of a machine. */
export interface HypervisorConfiguration {
  /** Specifies the virtualization technology used by the hypervisor (hyperv, vmware, etc.) */
  hypervisorType?: HypervisorType;
  /** The unique identifier of the hypervisor machine as reported by the underlying virtualization system. */
  nativeHostMachineId?: string;
}

/** Describes the hosting configuration of a machine. */
export interface HostingConfiguration {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "provider:azure";
  /** The hosting provider of the VM. */
  provider?: "azure";
}

/** Resource model definition. */
export interface Resource {
  /**
   * Resource identifier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
}

/** An error response from the API. */
export interface ErrorResponse {
  /** Error information. */
  error: ErrorModel;
}

/** Error details. */
export interface ErrorModel {
  /** Error code identifying the specific error. */
  code: string;
  /** Error message in the caller's locale. */
  message?: string;
}

/** Specifies the contents of a check liveness response. */
export interface Liveness {
  /** Liveness interval start time. */
  startTime: Date;
  /** Liveness interval end time. */
  endTime: Date;
  /** `true` if the resource is live during [startTime, endTime], `false` otherwise */
  live: boolean;
}

/** Collection of Connection resources. */
export interface ConnectionCollection {
  /** Collection of Connection resources. */
  value?: Connection[];
  /** The URL to the next set of resources. */
  nextLink?: string;
}

/** Represents a reference to another resource. */
export interface ResourceReference {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind:
    | "ref:machine"
    | "ref:port"
    | "ref:machinewithhints"
    | "ref:process"
    | "ref:clientgroup";
  /** Resource URI. */
  id: string;
  /**
   * Resource type qualifier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
}

/** Relationship properties. */
export interface RelationshipProperties {
  /** Source resource of the relationship. */
  source: ResourceReferenceUnion;
  /** Destination resource of the relationship. */
  destination: ResourceReferenceUnion;
  /** Relationship start time. */
  startTime?: Date;
  /** Relationship end time. */
  endTime?: Date;
}

/** Collection of Process resources. */
export interface ProcessCollection {
  /** Collection of Process resources. */
  value?: Process[];
  /** The URL to the next set of resources. */
  nextLink?: string;
}

/** Describes process metadata. */
export interface ProcessDetails {
  /** A unique identifier for a process, generally resilient to process restart, computed by Service Map. */
  persistentKey?: string;
  /** Represents the identity of the process pool assigned to the process by Dependency Agent. */
  poolId?: number;
  /** The Operating System Process Identifier (PID) of the first process in this process pool. */
  firstPid?: number;
  /** Process description. */
  description?: string;
  /** Name of company that created the process executable. */
  companyName?: string;
  /** Internal process name. */
  internalName?: string;
  /** Product name. */
  productName?: string;
  /** Product version. */
  productVersion?: string;
  /** File version. */
  fileVersion?: string;
  /** Process command line. */
  commandLine?: string;
  /** Process executable path. */
  executablePath?: string;
  /** Process workingDirectory. */
  workingDirectory?: string;
  /** Collection of services hosted by this Process (Windows only). */
  services?: ProcessHostedService[];
  /** Process zone name (Linux only). */
  zoneName?: string;
}

/** A service hosted by a process. */
export interface ProcessHostedService {
  /** The name of the service. */
  name?: string;
  /** The service's display name. */
  displayName?: string;
}

/** Describes the user under which a process is running. */
export interface ProcessUser {
  /** User name under which the process is running. */
  userName?: string;
  /** Domain name for the user. */
  userDomain?: string;
}

/** Describes the hosting configuration of a process. */
export interface ProcessHostingConfiguration {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "provider:azure";
  /** The hosting provider of the VM. */
  provider?: "azure";
}

/** Collection of Port resources. */
export interface PortCollection {
  /** Collection of Port resources. */
  value?: Port[];
  /** The URL to the next set of resources. */
  nextLink?: string;
}

/** Collection of Machine Group resources. */
export interface MachineGroupCollection {
  /** Collection of Machine Group resources. */
  value?: MachineGroup[];
  /** The URL to the next set of resources. */
  nextLink?: string;
}

/** Specifies the number of members in a client group. */
export interface ClientGroupMembersCount {
  /** Membership interval start time. */
  startTime: Date;
  /** Membership interval start time. */
  endTime: Date;
  /** Client Group URI. */
  groupId: string;
  /** Number of members in the client group. Use this value together with the value of ```accuracy```. If accuracy is `exact` then the value represents the actual number of members in the cloud. When accuracy is `estimated`, the actual number of members is larger than the value of ```count```. */
  count: number;
  /** Accuracy of the reported count. */
  accuracy: Accuracy;
}

/** Collection of ClientGroupMember resources. */
export interface ClientGroupMembersCollection {
  /** Collection of ClientGroupMember resources. */
  value?: ClientGroupMember[];
  /** The URL to the next set of resources. */
  nextLink?: string;
}

/** Specifies the contents of request to generate a map. */
export interface MapRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind:
    | "map:single-machine-dependency"
    | "MultipleMachinesMapRequest"
    | "map:machine-list-dependency"
    | "map:machine-group-dependency";
  /** Map interval start time. */
  startTime?: Date;
  /** Map interval end time. */
  endTime?: Date;
}

/** Specified the contents of a map response. */
export interface MapResponse {
  /** Map interval start time. */
  startTime: Date;
  /** Map interval end time. */
  endTime: Date;
  /** The generated map. */
  map: Map;
}

/** A map of resources and relationships between them. */
export interface Map {
  /** The nodes (entities) of a map. */
  nodes: MapNodes;
  /** The edges (relationships) of a map. */
  edges: MapEdges;
}

/** The nodes (entities) of a map. */
export interface MapNodes {
  /** Machine resources. */
  machines?: Machine[];
  /** Process resources. */
  processes?: Process[];
  /** Port resources. */
  ports?: Port[];
  /** Client Group resources. */
  clientGroups?: ClientGroup[];
}

/** The edges (relationships) of a map. */
export interface MapEdges {
  /** Network connections. */
  connections?: Connection[];
  /** Processes accepting on a port. */
  acceptors?: Acceptor[];
}

/** Machines by operating system. */
export interface MachineCountsByOperatingSystem {
  /** Number of live Windows machines. */
  windows: number;
  /** Number of live Linux machines. */
  linux: number;
}

/** Base for all summaries. */
export interface SummaryProperties {
  /** Summary interval start time. */
  startTime: Date;
  /** Summary interval end time. */
  endTime: Date;
}

/** Describes the VM image of a machine. */
export interface ImageConfiguration {
  /** Publisher of the VM image. */
  publisher?: string;
  /** Offering of the VM image. */
  offering?: string;
  /** SKU of the VM image. */
  sku?: string;
  /** Version of the VM image. */
  version?: string;
}

/** Describes an Azure Cloud Service */
export interface AzureCloudServiceConfiguration {
  /** Cloud Service name */
  name?: string;
  /** Cloud Service instance identifier */
  instanceId?: string;
  /** Cloud Service deployment identifier */
  deployment?: string;
  /** Cloud Service role name */
  roleName?: string;
  /** Used to specify type of an Azure Cloud Service role */
  roleType?: AzureCloudServiceRoleType;
}

/** Describes an Azure Virtual Machine Scale Set */
export interface AzureVmScaleSetConfiguration {
  /** Virtual Machine Scale Set name */
  name?: string;
  /** Virtual Machine Scale Set instance identifier */
  instanceId?: string;
  /** Virtual Machine Scale Set deployment identifier */
  deployment?: string;
  /** Unique identifier of the resource. */
  resourceId?: string;
}

/** Describes an Azure Service Fabric Cluster */
export interface AzureServiceFabricClusterConfiguration {
  /** Service Fabric cluster name. */
  name?: string;
  /** Service Fabric cluster identifier. */
  clusterId?: string;
}

/** Provides information about how a machine is hosted in Azure */
export interface AzureHostingConfiguration extends HostingConfiguration {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "provider:azure";
  /** Virtual Machine ID (unique identifier). */
  vmId?: string;
  /** Geographical location of the VM. */
  location?: string;
  /** Machine name according to the hosting provider. */
  name?: string;
  /** Size of the VM. */
  size?: string;
  /** Update domain of the VM. */
  updateDomain?: string;
  /** Fault domain of the VM. */
  faultDomain?: string;
  /** Subscription ID. */
  subscriptionId?: string;
  /** Resource group name within the specified subscription. */
  resourceGroup?: string;
  /** Unique identifier of the resource. */
  resourceId?: string;
  /** Image of the machine. */
  image?: ImageConfiguration;
  /** Contains information about machines hosted as an Azure Cloud Service */
  cloudService?: AzureCloudServiceConfiguration;
  /** Contains information about machines hosted as an Azure Virtual Machine Scale Set */
  vmScaleSet?: AzureVmScaleSetConfiguration;
  /** Contains information about machines that belong an Azure Service Fabric Cluster */
  serviceFabricCluster?: AzureServiceFabricClusterConfiguration;
}

/** Marker resource for the core Service Map resources */
export interface CoreResource extends Resource {
  /** Resource ETAG. */
  etag?: string;
  /** Additional resource type qualifier. */
  kind: CoreResourceKind;
}

/** A typed relationship between two entities. */
export interface Relationship extends Resource {
  /** Additional resource type qualifier. */
  kind: RelationshipKind;
}

/** Represents a member of a client group */
export interface ClientGroupMember extends Resource {
  /** IP address. */
  ipAddress?: string;
  /** Port into which this client connected */
  port?: PortReference;
  /** Processes accepting on the above port that received connections from this client. */
  processes?: ProcessReference[];
}

/** Base for all resource summaries. */
export interface Summary extends Resource {}

/** Reference to a machine. */
export interface MachineReference extends ResourceReference {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "ref:machine";
}

/** Reference to a port. */
export interface PortReference extends ResourceReference {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "ref:port";
  /**
   * Machine hosting the port.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly machine?: MachineReference;
  /**
   * IP address of the port.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddress?: string;
  /** Port number. */
  portNumber?: number;
}

/** A machine reference with a hint of the machine's name and operating system. */
export interface MachineReferenceWithHints extends ResourceReference {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "ref:machinewithhints";
  /**
   * Last known display name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayNameHint?: string;
  /**
   * Last known operating system family.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osFamilyHint?: OperatingSystemFamily;
}

/** Reference to a process. */
export interface ProcessReference extends ResourceReference {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "ref:process";
  /**
   * Machine hosting the process.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly machine?: MachineReference;
}

/** Reference to a client group. */
export interface ClientGroupReference extends ResourceReference {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "ref:clientgroup";
}

/** Properties for a connection resource. */
export interface ConnectionProperties extends RelationshipProperties {
  /** Reference to the server port via which this connection has been established. */
  serverPort?: PortReference;
  /** Specifies whether there are only successful, failed or a mixture of both connections represented by this resource. */
  failureState?: ConnectionFailureState;
}

/** Describes the hosting configuration of a process when hosted on azure */
export interface AzureProcessHostingConfiguration
  extends ProcessHostingConfiguration {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "provider:azure";
  /** Contains information about the cloud service the process belongs to */
  cloudService?: AzureCloudServiceConfiguration;
}

/** Specifies the computation of a single server dependency map. A single server dependency map includes all direct dependencies of a given machine. */
export interface SingleMachineDependencyMapRequest extends MapRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "map:single-machine-dependency";
  /** URI of machine resource for which to generate the map. */
  machineId: string;
}

/** Provides a base class for describing map requests for a collection of machines */
export interface MultipleMachinesMapRequest extends MapRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind:
    | "MultipleMachinesMapRequest"
    | "map:machine-list-dependency"
    | "map:machine-group-dependency";
  /** If true, only processes between specified machines will be included. Any connections in or out of those processes will be included. */
  filterProcesses?: boolean;
}

/** Summarizes machines in the workspace. */
export interface MachinesSummaryProperties extends SummaryProperties {
  /** Total number of machines. */
  total: number;
  /** Number of live machines. */
  live: number;
  /** Machine counts by operating system. */
  os: MachineCountsByOperatingSystem;
}

/** A machine resource represents a discovered computer system. It can be *monitored*, i.e., a Dependency Agent is running on it, or *discovered*, i.e., its existence was inferred by observing the data stream from monitored machines. As machines change, prior versions of the machine resource are preserved and available for access. A machine is live during an interval of time, if either its Dependency Agent has reported data during (parts) of that interval, or a Dependency agent running on other machines has reported activity associated with the machine. */
export interface Machine extends CoreResource {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "machine";
  /** UTC date and time when this resource was updated in the system. */
  timestamp?: Date;
  /** Specifies whether the machine is actively monitored or discovered. */
  monitoringState?: MonitoringState;
  /** Specifies whether the machine is virtualized. */
  virtualizationState?: VirtualizationState;
  /** Name to use for display purposes */
  displayName?: string;
  /** Name of the machine, e.g., server */
  computerName?: string;
  /** Fully-qualified name of the machine, e.g., server.company.com */
  fullyQualifiedDomainName?: string;
  /** UTC date and time when the machine last booted */
  bootTime?: Date;
  /** Timezone of the machine. */
  timezone?: Timezone;
  /** Dependency Agent configuration. */
  agent?: AgentConfiguration;
  /** Machine resources (memory, cpu, etc.). */
  resources?: MachineResourcesConfiguration;
  /** Network configuration (ips, gateways, dns, etc.) */
  networking?: NetworkConfiguration;
  /** Operating system information. */
  operatingSystem?: OperatingSystemConfiguration;
  /** Virtualization-related configuration. Present only when `virtualizationState` is `virtual`. */
  virtualMachine?: VirtualMachineConfiguration;
  /** Hypervisor-related configuration. Present only when 'virtualizationState' is `hypervisor`. */
  hypervisor?: HypervisorConfiguration;
  /** Hosting-related configuration. Present if hosting information is discovered for the VM. */
  hosting?: HostingConfigurationUnion;
}

/** A process resource represents a process running on a machine. The process may be actively *monitored*, i.e., a Dependency Agent is running on its machine, or *discovered*, i.e., its existence was inferred by observing the data stream from monitored machines. A process resource represents a pool of actual operating system resources that share command lines and metadata. As the process pool evolves over time, prior versions of the process resource are preserved and available for access. A process is live during an interval of time, if that process is executing during (parts) of that interval */
export interface Process extends CoreResource {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "process";
  /** UTC date and time when this process resource was updated in the system */
  timestamp?: Date;
  /** Specifies whether the process is actively monitored or discovered. */
  monitoringState?: MonitoringState;
  /** Machine hosting this process. */
  machine?: ResourceReferenceUnion;
  /** The name of the process executable */
  executableName?: string;
  /** Name to use for display purposes */
  displayName?: string;
  /** UTC date and time when the process started */
  startTime?: Date;
  /** The inferred role of this process based on its name, command line, etc. */
  role?: ProcessRole;
  /** The name of the product or suite of the process. The group is determined by its executable name, command line, etc. */
  group?: string;
  /** Process metadata (command line, product name, etc.). */
  details?: ProcessDetails;
  /** Information about the account under which the process is executing. */
  user?: ProcessUser;
  /** Present only for a discovered process acting as a client of a monitored process/machine/port. References the monitored process/machine/port that this process is a client of. */
  clientOf?: ResourceReferenceUnion;
  /** Present only for a discovered process acting as a server. References the port on which the discovered process is accepting. */
  acceptorOf?: ResourceReferenceUnion;
  /** Information about the hosting environment */
  hosting?: ProcessHostingConfigurationUnion;
}

/** A port resource represents a server port on a machine. The port may be actively *monitored*, i.e., a Dependency Agent is running on its machine, or *discovered*, i.e., its existence was inferred by observing the data stream from monitored machines. A port is live during an interval of time, if that port had associated activity during (parts) of that interval. */
export interface Port extends CoreResource {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "port";
  /** Specifies whether the port is actively monitored or discovered. */
  monitoringState?: MonitoringState;
  /** Machine hosting this port. */
  machine?: ResourceReferenceUnion;
  /** Name to use for display purposes. */
  displayName?: string;
  /** IP address associated with the port. At present only IPv4 addresses are supported. */
  ipAddress?: string;
  /** Port number. */
  portNumber?: number;
}

/** A user-defined logical grouping of machines. */
export interface MachineGroup extends CoreResource {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "machineGroup";
  /** Type of the machine group */
  groupType?: MachineGroupType;
  /** User defined name for the group */
  displayName?: string;
  /** Count of machines in this group. The value of count may be bigger than the number of machines in case of the group has been truncated due to exceeding the max number of machines a group can handle. */
  count?: number;
  /** References of the machines in this group. The hints within each reference do not represent the current value of the corresponding fields. They are a snapshot created during the last time the machine group was updated. */
  machines?: MachineReferenceWithHints[];
}

/** Represents a collection of clients of a resource. A client group can represent the clients of a port, process, or a machine. */
export interface ClientGroup extends CoreResource {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "clientGroup";
  /** Reference to the resource whose clients are represented by this group. */
  clientsOf?: ResourceReferenceUnion;
}

/** A network connection. */
export interface Connection extends Relationship {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "rel:connection";
  /** Source resource of the relationship. */
  source?: ResourceReferenceUnion;
  /** Destination resource of the relationship. */
  destination?: ResourceReferenceUnion;
  /** Relationship start time. */
  startTime?: Date;
  /** Relationship end time. */
  endTime?: Date;
  /** Reference to the server port via which this connection has been established. */
  serverPort?: PortReference;
  /** Specifies whether there are only successful, failed or a mixture of both connections represented by this resource. */
  failureState?: ConnectionFailureState;
}

/** A process accepting on a port. */
export interface Acceptor extends Relationship {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "rel:acceptor";
  /** Port being accepted. */
  source?: PortReference;
  /** Accepting process. */
  destination?: ProcessReference;
  /** Relationship start time. */
  startTime?: Date;
  /** Relationship end time. */
  endTime?: Date;
}

/** A summary of the machines in the workspace. */
export interface MachinesSummary extends Summary {
  /** Summary interval start time. */
  startTime?: Date;
  /** Summary interval end time. */
  endTime?: Date;
  /** Total number of machines. */
  total?: number;
  /** Number of live machines. */
  live?: number;
  /** Machine counts by operating system. */
  os?: MachineCountsByOperatingSystem;
}

/** Specifies the computation of a one hope dependency map for a list of machines. The resulting map includes all direct dependencies for the specified machines. */
export interface MachineListMapRequest extends MultipleMachinesMapRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "map:machine-list-dependency";
  /** a list of URIs of machine resources for which to generate the map. */
  machineIds: string[];
}

/** Specifies the computation of a machine group dependency map. A machine group dependency map includes all direct dependencies the machines in the group. */
export interface MachineGroupMapRequest extends MultipleMachinesMapRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "map:machine-group-dependency";
  /** URI of machine group resource for which to generate the map. */
  machineGroupId: string;
}

/** Known values of {@link CoreResourceKind} that the service accepts. */
export enum KnownCoreResourceKind {
  /** Machine */
  Machine = "machine",
  /** Process */
  Process = "process",
  /** Port */
  Port = "port",
  /** ClientGroup */
  ClientGroup = "clientGroup",
  /** MachineGroup */
  MachineGroup = "machineGroup"
}

/**
 * Defines values for CoreResourceKind. \
 * {@link KnownCoreResourceKind} can be used interchangeably with CoreResourceKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **machine** \
 * **process** \
 * **port** \
 * **clientGroup** \
 * **machineGroup**
 */
export type CoreResourceKind = string;

/** Known values of {@link ResourceReferenceKind} that the service accepts. */
export enum KnownResourceReferenceKind {
  /** RefMachine */
  RefMachine = "ref:machine",
  /** RefMachinewithhints */
  RefMachinewithhints = "ref:machinewithhints",
  /** RefProcess */
  RefProcess = "ref:process",
  /** RefPort */
  RefPort = "ref:port",
  /** RefOnmachine */
  RefOnmachine = "ref:onmachine",
  /** RefClientgroup */
  RefClientgroup = "ref:clientgroup"
}

/**
 * Defines values for ResourceReferenceKind. \
 * {@link KnownResourceReferenceKind} can be used interchangeably with ResourceReferenceKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ref:machine** \
 * **ref:machinewithhints** \
 * **ref:process** \
 * **ref:port** \
 * **ref:onmachine** \
 * **ref:clientgroup**
 */
export type ResourceReferenceKind = string;

/** Known values of {@link RelationshipKind} that the service accepts. */
export enum KnownRelationshipKind {
  /** RelConnection */
  RelConnection = "rel:connection",
  /** RelAcceptor */
  RelAcceptor = "rel:acceptor"
}

/**
 * Defines values for RelationshipKind. \
 * {@link KnownRelationshipKind} can be used interchangeably with RelationshipKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **rel:connection** \
 * **rel:acceptor**
 */
export type RelationshipKind = string;

/** Known values of {@link ProcessRole} that the service accepts. */
export enum KnownProcessRole {
  /** WebServer */
  WebServer = "webServer",
  /** AppServer */
  AppServer = "appServer",
  /** DatabaseServer */
  DatabaseServer = "databaseServer",
  /** LdapServer */
  LdapServer = "ldapServer",
  /** SmbServer */
  SmbServer = "smbServer"
}

/**
 * Defines values for ProcessRole. \
 * {@link KnownProcessRole} can be used interchangeably with ProcessRole,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **webServer** \
 * **appServer** \
 * **databaseServer** \
 * **ldapServer** \
 * **smbServer**
 */
export type ProcessRole = string;

/** Known values of {@link MachineGroupType} that the service accepts. */
export enum KnownMachineGroupType {
  /** Unknown */
  Unknown = "unknown",
  /** AzureCs */
  AzureCs = "azure-cs",
  /** AzureSf */
  AzureSf = "azure-sf",
  /** AzureVmss */
  AzureVmss = "azure-vmss",
  /** UserStatic */
  UserStatic = "user-static"
}

/**
 * Defines values for MachineGroupType. \
 * {@link KnownMachineGroupType} can be used interchangeably with MachineGroupType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **unknown** \
 * **azure-cs** \
 * **azure-sf** \
 * **azure-vmss** \
 * **user-static**
 */
export type MachineGroupType = string;

/** Known values of {@link MapRequestKind} that the service accepts. */
export enum KnownMapRequestKind {
  /** MapSingleMachineDependency */
  MapSingleMachineDependency = "map:single-machine-dependency",
  /** MapMachineGroupDependency */
  MapMachineGroupDependency = "map:machine-group-dependency",
  /** MapMachineListDependency */
  MapMachineListDependency = "map:machine-list-dependency"
}

/**
 * Defines values for MapRequestKind. \
 * {@link KnownMapRequestKind} can be used interchangeably with MapRequestKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **map:single-machine-dependency** \
 * **map:machine-group-dependency** \
 * **map:machine-list-dependency**
 */
export type MapRequestKind = string;
/** Defines values for MonitoringState. */
export type MonitoringState = "monitored" | "discovered";
/** Defines values for VirtualizationState. */
export type VirtualizationState =
  | "unknown"
  | "physical"
  | "virtual"
  | "hypervisor";
/** Defines values for MachineRebootStatus. */
export type MachineRebootStatus = "unknown" | "rebooted" | "notRebooted";
/** Defines values for Accuracy. */
export type Accuracy = "actual" | "estimated";
/** Defines values for OperatingSystemFamily. */
export type OperatingSystemFamily =
  | "unknown"
  | "windows"
  | "linux"
  | "solaris"
  | "aix";
/** Defines values for Bitness. */
export type Bitness = "32bit" | "64bit";
/** Defines values for VirtualMachineType. */
export type VirtualMachineType =
  | "unknown"
  | "hyperv"
  | "ldom"
  | "lpar"
  | "vmware"
  | "virtualPc"
  | "xen";
/** Defines values for HypervisorType. */
export type HypervisorType = "unknown" | "hyperv";
/** Defines values for ConnectionFailureState. */
export type ConnectionFailureState = "ok" | "failed" | "mixed";
/** Defines values for AzureCloudServiceRoleType. */
export type AzureCloudServiceRoleType = "unknown" | "worker" | "web";

/** Optional parameters. */
export interface MachinesListByWorkspaceOptionalParams
  extends coreClient.OperationOptions {
  /** Specifies whether to return live resources (true) or inventory resources (false). Defaults to **true**. When retrieving live resources, the start time (`startTime`) and end time (`endTime`) of the desired interval should be included. When retrieving inventory resources, an optional timestamp (`timestamp`) parameter can be specified to return the version of each resource closest (not-after) that timestamp. */
  live?: boolean;
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
  /** UTC date and time specifying a time instance relative to which to evaluate each machine resource. Only applies when `live=false`. When not specified, the service uses DateTime.UtcNow. */
  timestamp?: Date;
  /** Page size to use. When not specified, the default page size is 100 records. */
  top?: number;
}

/** Contains response data for the listByWorkspace operation. */
export type MachinesListByWorkspaceResponse = MachineCollection;

/** Optional parameters. */
export interface MachinesGetOptionalParams extends coreClient.OperationOptions {
  /** UTC date and time specifying a time instance relative to which to evaluate the machine resource. When not specified, the service uses DateTime.UtcNow. */
  timestamp?: Date;
}

/** Contains response data for the get operation. */
export type MachinesGetResponse = Machine;

/** Optional parameters. */
export interface MachinesGetLivenessOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the getLiveness operation. */
export type MachinesGetLivenessResponse = Liveness;

/** Optional parameters. */
export interface MachinesListConnectionsOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the listConnections operation. */
export type MachinesListConnectionsResponse = ConnectionCollection;

/** Optional parameters. */
export interface MachinesListProcessesOptionalParams
  extends coreClient.OperationOptions {
  /** Specifies whether to return live resources (true) or inventory resources (false). Defaults to **true**. When retrieving live resources, the start time (`startTime`) and end time (`endTime`) of the desired interval should be included. When retrieving inventory resources, an optional timestamp (`timestamp`) parameter can be specified to return the version of each resource closest (not-after) that timestamp. */
  live?: boolean;
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
  /** UTC date and time specifying a time instance relative to which to evaluate all process resource. Only applies when `live=false`. When not specified, the service uses DateTime.UtcNow. */
  timestamp?: Date;
}

/** Contains response data for the listProcesses operation. */
export type MachinesListProcessesResponse = ProcessCollection;

/** Optional parameters. */
export interface MachinesListPortsOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the listPorts operation. */
export type MachinesListPortsResponse = PortCollection;

/** Optional parameters. */
export interface MachinesListMachineGroupMembershipOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the listMachineGroupMembership operation. */
export type MachinesListMachineGroupMembershipResponse = MachineGroupCollection;

/** Optional parameters. */
export interface MachinesListByWorkspaceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByWorkspaceNext operation. */
export type MachinesListByWorkspaceNextResponse = MachineCollection;

/** Optional parameters. */
export interface MachinesListConnectionsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listConnectionsNext operation. */
export type MachinesListConnectionsNextResponse = ConnectionCollection;

/** Optional parameters. */
export interface MachinesListProcessesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listProcessesNext operation. */
export type MachinesListProcessesNextResponse = ProcessCollection;

/** Optional parameters. */
export interface MachinesListPortsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listPortsNext operation. */
export type MachinesListPortsNextResponse = PortCollection;

/** Optional parameters. */
export interface MachinesListMachineGroupMembershipNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMachineGroupMembershipNext operation. */
export type MachinesListMachineGroupMembershipNextResponse = MachineGroupCollection;

/** Optional parameters. */
export interface ProcessesGetOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying a time instance relative to which to evaluate a resource. When not specified, the service uses DateTime.UtcNow. */
  timestamp?: Date;
}

/** Contains response data for the get operation. */
export type ProcessesGetResponse = Process;

/** Optional parameters. */
export interface ProcessesGetLivenessOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the getLiveness operation. */
export type ProcessesGetLivenessResponse = Liveness;

/** Optional parameters. */
export interface ProcessesListAcceptingPortsOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the listAcceptingPorts operation. */
export type ProcessesListAcceptingPortsResponse = PortCollection;

/** Optional parameters. */
export interface ProcessesListConnectionsOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the listConnections operation. */
export type ProcessesListConnectionsResponse = ConnectionCollection;

/** Optional parameters. */
export interface ProcessesListAcceptingPortsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAcceptingPortsNext operation. */
export type ProcessesListAcceptingPortsNextResponse = PortCollection;

/** Optional parameters. */
export interface ProcessesListConnectionsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listConnectionsNext operation. */
export type ProcessesListConnectionsNextResponse = ConnectionCollection;

/** Optional parameters. */
export interface PortsGetOptionalParams extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the get operation. */
export type PortsGetResponse = Port;

/** Optional parameters. */
export interface PortsGetLivenessOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the getLiveness operation. */
export type PortsGetLivenessResponse = Liveness;

/** Optional parameters. */
export interface PortsListAcceptingProcessesOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the listAcceptingProcesses operation. */
export type PortsListAcceptingProcessesResponse = ProcessCollection;

/** Optional parameters. */
export interface PortsListConnectionsOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the listConnections operation. */
export type PortsListConnectionsResponse = ConnectionCollection;

/** Optional parameters. */
export interface PortsListAcceptingProcessesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAcceptingProcessesNext operation. */
export type PortsListAcceptingProcessesNextResponse = ProcessCollection;

/** Optional parameters. */
export interface PortsListConnectionsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listConnectionsNext operation. */
export type PortsListConnectionsNextResponse = ConnectionCollection;

/** Optional parameters. */
export interface ClientGroupsGetOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the get operation. */
export type ClientGroupsGetResponse = ClientGroup;

/** Optional parameters. */
export interface ClientGroupsGetMembersCountOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the getMembersCount operation. */
export type ClientGroupsGetMembersCountResponse = ClientGroupMembersCount;

/** Optional parameters. */
export interface ClientGroupsListMembersOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
  /** Page size to use. When not specified, the default page size is 100 records. */
  top?: number;
}

/** Contains response data for the listMembers operation. */
export type ClientGroupsListMembersResponse = ClientGroupMembersCollection;

/** Optional parameters. */
export interface ClientGroupsListMembersNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMembersNext operation. */
export type ClientGroupsListMembersNextResponse = ClientGroupMembersCollection;

/** Optional parameters. */
export interface MapsGenerateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the generate operation. */
export type MapsGenerateResponse = MapResponse;

/** Optional parameters. */
export interface SummariesGetMachinesOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the getMachines operation. */
export type SummariesGetMachinesResponse = MachinesSummary;

/** Optional parameters. */
export interface MachineGroupsListByWorkspaceOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the listByWorkspace operation. */
export type MachineGroupsListByWorkspaceResponse = MachineGroupCollection;

/** Optional parameters. */
export interface MachineGroupsCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type MachineGroupsCreateResponse = MachineGroup;

/** Optional parameters. */
export interface MachineGroupsGetOptionalParams
  extends coreClient.OperationOptions {
  /** UTC date and time specifying the start time of an interval. When not specified the service uses DateTime.UtcNow - 10m */
  startTime?: Date;
  /** UTC date and time specifying the end time of an interval. When not specified the service uses DateTime.UtcNow */
  endTime?: Date;
}

/** Contains response data for the get operation. */
export type MachineGroupsGetResponse = MachineGroup;

/** Optional parameters. */
export interface MachineGroupsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type MachineGroupsUpdateResponse = MachineGroup;

/** Optional parameters. */
export interface MachineGroupsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface MachineGroupsListByWorkspaceNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByWorkspaceNext operation. */
export type MachineGroupsListByWorkspaceNextResponse = MachineGroupCollection;

/** Optional parameters. */
export interface ServiceMapOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
