/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ClientGroups } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ServiceMap } from "../serviceMap";
import {
  ClientGroupMember,
  ClientGroupsListMembersNextOptionalParams,
  ClientGroupsListMembersOptionalParams,
  ClientGroupsListMembersResponse,
  ClientGroupsGetOptionalParams,
  ClientGroupsGetResponse,
  ClientGroupsGetMembersCountOptionalParams,
  ClientGroupsGetMembersCountResponse,
  ClientGroupsListMembersNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ClientGroups operations. */
export class ClientGroupsImpl implements ClientGroups {
  private readonly client: ServiceMap;

  /**
   * Initialize a new instance of the class ClientGroups class.
   * @param client Reference to the service client
   */
  constructor(client: ServiceMap) {
    this.client = client;
  }

  /**
   * Returns the members of the client group during the specified time interval.
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param clientGroupName Client Group resource name.
   * @param options The options parameters.
   */
  public listMembers(
    resourceGroupName: string,
    workspaceName: string,
    clientGroupName: string,
    options?: ClientGroupsListMembersOptionalParams
  ): PagedAsyncIterableIterator<ClientGroupMember> {
    const iter = this.listMembersPagingAll(
      resourceGroupName,
      workspaceName,
      clientGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listMembersPagingPage(
          resourceGroupName,
          workspaceName,
          clientGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listMembersPagingPage(
    resourceGroupName: string,
    workspaceName: string,
    clientGroupName: string,
    options?: ClientGroupsListMembersOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ClientGroupMember[]> {
    let result: ClientGroupsListMembersResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listMembers(
        resourceGroupName,
        workspaceName,
        clientGroupName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listMembersNext(
        resourceGroupName,
        workspaceName,
        clientGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listMembersPagingAll(
    resourceGroupName: string,
    workspaceName: string,
    clientGroupName: string,
    options?: ClientGroupsListMembersOptionalParams
  ): AsyncIterableIterator<ClientGroupMember> {
    for await (const page of this.listMembersPagingPage(
      resourceGroupName,
      workspaceName,
      clientGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Retrieves the specified client group
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param clientGroupName Client Group resource name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    clientGroupName: string,
    options?: ClientGroupsGetOptionalParams
  ): Promise<ClientGroupsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, clientGroupName, options },
      getOperationSpec
    );
  }

  /**
   * Returns the approximate number of members in the client group.
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param clientGroupName Client Group resource name.
   * @param options The options parameters.
   */
  getMembersCount(
    resourceGroupName: string,
    workspaceName: string,
    clientGroupName: string,
    options?: ClientGroupsGetMembersCountOptionalParams
  ): Promise<ClientGroupsGetMembersCountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, clientGroupName, options },
      getMembersCountOperationSpec
    );
  }

  /**
   * Returns the members of the client group during the specified time interval.
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param clientGroupName Client Group resource name.
   * @param options The options parameters.
   */
  private _listMembers(
    resourceGroupName: string,
    workspaceName: string,
    clientGroupName: string,
    options?: ClientGroupsListMembersOptionalParams
  ): Promise<ClientGroupsListMembersResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, clientGroupName, options },
      listMembersOperationSpec
    );
  }

  /**
   * ListMembersNext
   * @param resourceGroupName Resource group name within the specified subscriptionId.
   * @param workspaceName OMS workspace containing the resources of interest.
   * @param clientGroupName Client Group resource name.
   * @param nextLink The nextLink from the previous successful call to the ListMembers method.
   * @param options The options parameters.
   */
  private _listMembersNext(
    resourceGroupName: string,
    workspaceName: string,
    clientGroupName: string,
    nextLink: string,
    options?: ClientGroupsListMembersNextOptionalParams
  ): Promise<ClientGroupsListMembersNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, clientGroupName, nextLink, options },
      listMembersNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/clientGroups/{clientGroupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClientGroup
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.clientGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getMembersCountOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/clientGroups/{clientGroupName}/membersCount",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClientGroupMembersCount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.clientGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMembersOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/features/serviceMap/clientGroups/{clientGroupName}/members",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClientGroupMembersCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime,
    Parameters.top
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.clientGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMembersNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClientGroupMembersCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.nextLink,
    Parameters.clientGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
