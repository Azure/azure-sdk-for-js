/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  Identity,
  UserAssignedIdentitiesListBySubscriptionOptionalParams,
  UserAssignedIdentitiesListByResourceGroupOptionalParams,
  UserAssignedIdentitiesCreateOrUpdateOptionalParams,
  UserAssignedIdentitiesCreateOrUpdateResponse,
  IdentityUpdate,
  UserAssignedIdentitiesUpdateOptionalParams,
  UserAssignedIdentitiesUpdateResponse,
  UserAssignedIdentitiesGetOptionalParams,
  UserAssignedIdentitiesGetResponse,
  UserAssignedIdentitiesDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a UserAssignedIdentities. */
export interface UserAssignedIdentities {
  /**
   * Lists all the userAssignedIdentities available under the specified subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: UserAssignedIdentitiesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Identity>;
  /**
   * Lists all the userAssignedIdentities available under the specified ResourceGroup.
   * @param resourceGroupName The name of the Resource Group to which the identity belongs.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: UserAssignedIdentitiesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Identity>;
  /**
   * Create or update an identity in the specified subscription and resource group.
   * @param resourceGroupName The name of the Resource Group to which the identity belongs.
   * @param resourceName The name of the identity resource.
   * @param parameters Parameters to create or update the identity
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    resourceName: string,
    parameters: Identity,
    options?: UserAssignedIdentitiesCreateOrUpdateOptionalParams
  ): Promise<UserAssignedIdentitiesCreateOrUpdateResponse>;
  /**
   * Update an identity in the specified subscription and resource group.
   * @param resourceGroupName The name of the Resource Group to which the identity belongs.
   * @param resourceName The name of the identity resource.
   * @param parameters Parameters to update the identity
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    resourceName: string,
    parameters: IdentityUpdate,
    options?: UserAssignedIdentitiesUpdateOptionalParams
  ): Promise<UserAssignedIdentitiesUpdateResponse>;
  /**
   * Gets the identity.
   * @param resourceGroupName The name of the Resource Group to which the identity belongs.
   * @param resourceName The name of the identity resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    options?: UserAssignedIdentitiesGetOptionalParams
  ): Promise<UserAssignedIdentitiesGetResponse>;
  /**
   * Deletes the identity.
   * @param resourceGroupName The name of the Resource Group to which the identity belongs.
   * @param resourceName The name of the identity resource.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    resourceName: string,
    options?: UserAssignedIdentitiesDeleteOptionalParams
  ): Promise<void>;
}
