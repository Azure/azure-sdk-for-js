/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SavingsPlan } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingBenefitsRP } from "../billingBenefitsRP";
import {
  SavingsPlanModel,
  SavingsPlanListNextOptionalParams,
  SavingsPlanListOptionalParams,
  SavingsPlanListResponse,
  SavingsPlanListAllNextOptionalParams,
  SavingsPlanListAllOptionalParams,
  SavingsPlanListAllResponse,
  SavingsPlanGetOptionalParams,
  SavingsPlanGetResponse,
  SavingsPlanUpdateRequest,
  SavingsPlanUpdateOptionalParams,
  SavingsPlanUpdateResponse,
  SavingsPlanUpdateValidateRequest,
  SavingsPlanValidateUpdateOptionalParams,
  SavingsPlanValidateUpdateResponse,
  SavingsPlanListNextResponse,
  SavingsPlanListAllNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SavingsPlan operations. */
export class SavingsPlanImpl implements SavingsPlan {
  private readonly client: BillingBenefitsRP;

  /**
   * Initialize a new instance of the class SavingsPlan class.
   * @param client Reference to the service client
   */
  constructor(client: BillingBenefitsRP) {
    this.client = client;
  }

  /**
   * List savings plans in an order.
   * @param savingsPlanOrderId Order ID of the savings plan
   * @param options The options parameters.
   */
  public list(
    savingsPlanOrderId: string,
    options?: SavingsPlanListOptionalParams
  ): PagedAsyncIterableIterator<SavingsPlanModel> {
    const iter = this.listPagingAll(savingsPlanOrderId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(savingsPlanOrderId, options, settings);
      }
    };
  }

  private async *listPagingPage(
    savingsPlanOrderId: string,
    options?: SavingsPlanListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SavingsPlanModel[]> {
    let result: SavingsPlanListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(savingsPlanOrderId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        savingsPlanOrderId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    savingsPlanOrderId: string,
    options?: SavingsPlanListOptionalParams
  ): AsyncIterableIterator<SavingsPlanModel> {
    for await (const page of this.listPagingPage(savingsPlanOrderId, options)) {
      yield* page;
    }
  }

  /**
   * List savings plans.
   * @param options The options parameters.
   */
  public listAll(
    options?: SavingsPlanListAllOptionalParams
  ): PagedAsyncIterableIterator<SavingsPlanModel> {
    const iter = this.listAllPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAllPagingPage(options, settings);
      }
    };
  }

  private async *listAllPagingPage(
    options?: SavingsPlanListAllOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SavingsPlanModel[]> {
    let result: SavingsPlanListAllResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAll(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAllNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAllPagingAll(
    options?: SavingsPlanListAllOptionalParams
  ): AsyncIterableIterator<SavingsPlanModel> {
    for await (const page of this.listAllPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List savings plans in an order.
   * @param savingsPlanOrderId Order ID of the savings plan
   * @param options The options parameters.
   */
  private _list(
    savingsPlanOrderId: string,
    options?: SavingsPlanListOptionalParams
  ): Promise<SavingsPlanListResponse> {
    return this.client.sendOperationRequest(
      { savingsPlanOrderId, options },
      listOperationSpec
    );
  }

  /**
   * List savings plans.
   * @param options The options parameters.
   */
  private _listAll(
    options?: SavingsPlanListAllOptionalParams
  ): Promise<SavingsPlanListAllResponse> {
    return this.client.sendOperationRequest({ options }, listAllOperationSpec);
  }

  /**
   * Get savings plan.
   * @param savingsPlanOrderId Order ID of the savings plan
   * @param savingsPlanId ID of the savings plan
   * @param options The options parameters.
   */
  get(
    savingsPlanOrderId: string,
    savingsPlanId: string,
    options?: SavingsPlanGetOptionalParams
  ): Promise<SavingsPlanGetResponse> {
    return this.client.sendOperationRequest(
      { savingsPlanOrderId, savingsPlanId, options },
      getOperationSpec
    );
  }

  /**
   * Update savings plan.
   * @param savingsPlanOrderId Order ID of the savings plan
   * @param savingsPlanId ID of the savings plan
   * @param body Request body for patching a savings plan order alias
   * @param options The options parameters.
   */
  update(
    savingsPlanOrderId: string,
    savingsPlanId: string,
    body: SavingsPlanUpdateRequest,
    options?: SavingsPlanUpdateOptionalParams
  ): Promise<SavingsPlanUpdateResponse> {
    return this.client.sendOperationRequest(
      { savingsPlanOrderId, savingsPlanId, body, options },
      updateOperationSpec
    );
  }

  /**
   * Validate savings plan patch.
   * @param savingsPlanOrderId Order ID of the savings plan
   * @param savingsPlanId ID of the savings plan
   * @param body Request body for validating a savings plan patch request
   * @param options The options parameters.
   */
  validateUpdate(
    savingsPlanOrderId: string,
    savingsPlanId: string,
    body: SavingsPlanUpdateValidateRequest,
    options?: SavingsPlanValidateUpdateOptionalParams
  ): Promise<SavingsPlanValidateUpdateResponse> {
    return this.client.sendOperationRequest(
      { savingsPlanOrderId, savingsPlanId, body, options },
      validateUpdateOperationSpec
    );
  }

  /**
   * ListNext
   * @param savingsPlanOrderId Order ID of the savings plan
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    savingsPlanOrderId: string,
    nextLink: string,
    options?: SavingsPlanListNextOptionalParams
  ): Promise<SavingsPlanListNextResponse> {
    return this.client.sendOperationRequest(
      { savingsPlanOrderId, nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListAllNext
   * @param nextLink The nextLink from the previous successful call to the ListAll method.
   * @param options The options parameters.
   */
  private _listAllNext(
    nextLink: string,
    options?: SavingsPlanListAllNextOptionalParams
  ): Promise<SavingsPlanListAllNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listAllNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SavingsPlanModelList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.savingsPlanOrderId],
  headerParameters: [Parameters.accept],
  serializer
};
const listAllOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.BillingBenefits/savingsPlans",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SavingsPlanModelListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.orderby,
    Parameters.refreshSummary,
    Parameters.skiptoken,
    Parameters.selectedState,
    Parameters.take
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SavingsPlanModel
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.savingsPlanOrderId,
    Parameters.savingsPlanId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SavingsPlanModel
    },
    202: {
      headersMapper: Mappers.SavingsPlanUpdateHeaders
    },
    404: {
      isError: true
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.savingsPlanOrderId,
    Parameters.savingsPlanId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SavingsPlanValidateResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.savingsPlanOrderId,
    Parameters.savingsPlanId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SavingsPlanModelList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.savingsPlanOrderId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAllNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SavingsPlanModelListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
