/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SimOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MobileNetworkManagementClient } from "../mobileNetworkManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  SimUploadList,
  SimBulkUploadOptionalParams,
  SimBulkUploadResponse,
  SimDeleteList,
  SimBulkDeleteOptionalParams,
  SimBulkDeleteResponse,
  EncryptedSimUploadList,
  SimBulkUploadEncryptedOptionalParams,
  SimBulkUploadEncryptedResponse
} from "../models";

/** Class containing SimOperations operations. */
export class SimOperationsImpl implements SimOperations {
  private readonly client: MobileNetworkManagementClient;

  /**
   * Initialize a new instance of the class SimOperations class.
   * @param client Reference to the service client
   */
  constructor(client: MobileNetworkManagementClient) {
    this.client = client;
  }

  /**
   * Bulk upload SIMs to a SIM group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param simGroupName The name of the SIM Group.
   * @param parameters Parameters supplied to the bulk SIM upload operation.
   * @param options The options parameters.
   */
  async beginBulkUpload(
    resourceGroupName: string,
    simGroupName: string,
    parameters: SimUploadList,
    options?: SimBulkUploadOptionalParams
  ): Promise<
    PollerLike<PollOperationState<SimBulkUploadResponse>, SimBulkUploadResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<SimBulkUploadResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, simGroupName, parameters, options },
      bulkUploadOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Bulk upload SIMs to a SIM group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param simGroupName The name of the SIM Group.
   * @param parameters Parameters supplied to the bulk SIM upload operation.
   * @param options The options parameters.
   */
  async beginBulkUploadAndWait(
    resourceGroupName: string,
    simGroupName: string,
    parameters: SimUploadList,
    options?: SimBulkUploadOptionalParams
  ): Promise<SimBulkUploadResponse> {
    const poller = await this.beginBulkUpload(
      resourceGroupName,
      simGroupName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Bulk delete SIMs from a SIM group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param simGroupName The name of the SIM Group.
   * @param parameters Parameters supplied to the bulk SIM delete operation.
   * @param options The options parameters.
   */
  async beginBulkDelete(
    resourceGroupName: string,
    simGroupName: string,
    parameters: SimDeleteList,
    options?: SimBulkDeleteOptionalParams
  ): Promise<
    PollerLike<PollOperationState<SimBulkDeleteResponse>, SimBulkDeleteResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<SimBulkDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, simGroupName, parameters, options },
      bulkDeleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Bulk delete SIMs from a SIM group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param simGroupName The name of the SIM Group.
   * @param parameters Parameters supplied to the bulk SIM delete operation.
   * @param options The options parameters.
   */
  async beginBulkDeleteAndWait(
    resourceGroupName: string,
    simGroupName: string,
    parameters: SimDeleteList,
    options?: SimBulkDeleteOptionalParams
  ): Promise<SimBulkDeleteResponse> {
    const poller = await this.beginBulkDelete(
      resourceGroupName,
      simGroupName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Bulk upload SIMs in encrypted form to a SIM group. The SIM credentials must be encrypted.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param simGroupName The name of the SIM Group.
   * @param parameters Parameters supplied to the encrypted SIMs upload operation.
   * @param options The options parameters.
   */
  async beginBulkUploadEncrypted(
    resourceGroupName: string,
    simGroupName: string,
    parameters: EncryptedSimUploadList,
    options?: SimBulkUploadEncryptedOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<SimBulkUploadEncryptedResponse>,
      SimBulkUploadEncryptedResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<SimBulkUploadEncryptedResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, simGroupName, parameters, options },
      bulkUploadEncryptedOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Bulk upload SIMs in encrypted form to a SIM group. The SIM credentials must be encrypted.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param simGroupName The name of the SIM Group.
   * @param parameters Parameters supplied to the encrypted SIMs upload operation.
   * @param options The options parameters.
   */
  async beginBulkUploadEncryptedAndWait(
    resourceGroupName: string,
    simGroupName: string,
    parameters: EncryptedSimUploadList,
    options?: SimBulkUploadEncryptedOptionalParams
  ): Promise<SimBulkUploadEncryptedResponse> {
    const poller = await this.beginBulkUploadEncrypted(
      resourceGroupName,
      simGroupName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const bulkUploadOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/uploadSims",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    201: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    202: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    204: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.simGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const bulkDeleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/deleteSims",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    201: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    202: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    204: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.simGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const bulkUploadEncryptedOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/uploadEncryptedSims",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    201: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    202: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    204: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.simGroupName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
