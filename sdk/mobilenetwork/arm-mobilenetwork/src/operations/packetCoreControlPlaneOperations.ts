/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PacketCoreControlPlaneOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MobileNetworkManagementClient } from "../mobileNetworkManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  PacketCoreControlPlaneRollbackOptionalParams,
  PacketCoreControlPlaneRollbackResponse,
  PacketCoreControlPlaneReinstallOptionalParams,
  PacketCoreControlPlaneReinstallResponse,
  PacketCoreControlPlaneCollectDiagnosticsPackage,
  PacketCoreControlPlaneCollectDiagnosticsPackageOptionalParams,
  PacketCoreControlPlaneCollectDiagnosticsPackageResponse
} from "../models";

/** Class containing PacketCoreControlPlaneOperations operations. */
export class PacketCoreControlPlaneOperationsImpl
  implements PacketCoreControlPlaneOperations {
  private readonly client: MobileNetworkManagementClient;

  /**
   * Initialize a new instance of the class PacketCoreControlPlaneOperations class.
   * @param client Reference to the service client
   */
  constructor(client: MobileNetworkManagementClient) {
    this.client = client;
  }

  /**
   * Roll back the specified packet core control plane to the previous version, "rollbackVersion".
   * Multiple consecutive rollbacks are not possible. This action may cause a service outage.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param options The options parameters.
   */
  async beginRollback(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    options?: PacketCoreControlPlaneRollbackOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<PacketCoreControlPlaneRollbackResponse>,
      PacketCoreControlPlaneRollbackResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PacketCoreControlPlaneRollbackResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, packetCoreControlPlaneName, options },
      rollbackOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Roll back the specified packet core control plane to the previous version, "rollbackVersion".
   * Multiple consecutive rollbacks are not possible. This action may cause a service outage.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param options The options parameters.
   */
  async beginRollbackAndWait(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    options?: PacketCoreControlPlaneRollbackOptionalParams
  ): Promise<PacketCoreControlPlaneRollbackResponse> {
    const poller = await this.beginRollback(
      resourceGroupName,
      packetCoreControlPlaneName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Reinstall the specified packet core control plane. This action will remove any transaction state
   * from the packet core to return it to a known state. This action will cause a service outage.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param options The options parameters.
   */
  async beginReinstall(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    options?: PacketCoreControlPlaneReinstallOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<PacketCoreControlPlaneReinstallResponse>,
      PacketCoreControlPlaneReinstallResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PacketCoreControlPlaneReinstallResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, packetCoreControlPlaneName, options },
      reinstallOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Reinstall the specified packet core control plane. This action will remove any transaction state
   * from the packet core to return it to a known state. This action will cause a service outage.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param options The options parameters.
   */
  async beginReinstallAndWait(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    options?: PacketCoreControlPlaneReinstallOptionalParams
  ): Promise<PacketCoreControlPlaneReinstallResponse> {
    const poller = await this.beginReinstall(
      resourceGroupName,
      packetCoreControlPlaneName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Collect a diagnostics package for the specified packet core control plane. This action will upload
   * the diagnostics to a storage account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param parameters Parameters supplied to the packet core control plane collect diagnostics package
   *                   operation.
   * @param options The options parameters.
   */
  async beginCollectDiagnosticsPackage(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    parameters: PacketCoreControlPlaneCollectDiagnosticsPackage,
    options?: PacketCoreControlPlaneCollectDiagnosticsPackageOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        PacketCoreControlPlaneCollectDiagnosticsPackageResponse
      >,
      PacketCoreControlPlaneCollectDiagnosticsPackageResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PacketCoreControlPlaneCollectDiagnosticsPackageResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, packetCoreControlPlaneName, parameters, options },
      collectDiagnosticsPackageOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Collect a diagnostics package for the specified packet core control plane. This action will upload
   * the diagnostics to a storage account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param parameters Parameters supplied to the packet core control plane collect diagnostics package
   *                   operation.
   * @param options The options parameters.
   */
  async beginCollectDiagnosticsPackageAndWait(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    parameters: PacketCoreControlPlaneCollectDiagnosticsPackage,
    options?: PacketCoreControlPlaneCollectDiagnosticsPackageOptionalParams
  ): Promise<PacketCoreControlPlaneCollectDiagnosticsPackageResponse> {
    const poller = await this.beginCollectDiagnosticsPackage(
      resourceGroupName,
      packetCoreControlPlaneName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const rollbackOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/rollback",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    201: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    202: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    204: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.packetCoreControlPlaneName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const reinstallOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/reinstall",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    201: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    202: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    204: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.packetCoreControlPlaneName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const collectDiagnosticsPackageOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/collectDiagnosticsPackage",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    201: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    202: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    204: {
      bodyMapper: Mappers.AsyncOperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.packetCoreControlPlaneName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
