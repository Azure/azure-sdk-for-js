/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PacketCoreControlPlaneVersions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MobileNetworkManagementClient } from "../mobileNetworkManagementClient";
import {
  PacketCoreControlPlaneVersion,
  PacketCoreControlPlaneVersionsListByResourceGroupNextOptionalParams,
  PacketCoreControlPlaneVersionsListByResourceGroupOptionalParams,
  PacketCoreControlPlaneVersionsGetOptionalParams,
  PacketCoreControlPlaneVersionsGetResponse,
  PacketCoreControlPlaneVersionsListByResourceGroupResponse,
  PacketCoreControlPlaneVersionsListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PacketCoreControlPlaneVersions operations. */
export class PacketCoreControlPlaneVersionsImpl
  implements PacketCoreControlPlaneVersions {
  private readonly client: MobileNetworkManagementClient;

  /**
   * Initialize a new instance of the class PacketCoreControlPlaneVersions class.
   * @param client Reference to the service client
   */
  constructor(client: MobileNetworkManagementClient) {
    this.client = client;
  }

  /**
   * Lists all supported packet core control planes versions.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    options?: PacketCoreControlPlaneVersionsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PacketCoreControlPlaneVersion> {
    const iter = this.listByResourceGroupPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    options?: PacketCoreControlPlaneVersionsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<PacketCoreControlPlaneVersion[]> {
    let result = await this._listByResourceGroup(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    options?: PacketCoreControlPlaneVersionsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<PacketCoreControlPlaneVersion> {
    for await (const page of this.listByResourceGroupPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets information about the specified packet core control plane version.
   * @param versionName The name of the packet core control plane version.
   * @param options The options parameters.
   */
  get(
    versionName: string,
    options?: PacketCoreControlPlaneVersionsGetOptionalParams
  ): Promise<PacketCoreControlPlaneVersionsGetResponse> {
    return this.client.sendOperationRequest(
      { versionName, options },
      getOperationSpec
    );
  }

  /**
   * Lists all supported packet core control planes versions.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    options?: PacketCoreControlPlaneVersionsListByResourceGroupOptionalParams
  ): Promise<PacketCoreControlPlaneVersionsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    nextLink: string,
    options?: PacketCoreControlPlaneVersionsListByResourceGroupNextOptionalParams
  ): Promise<PacketCoreControlPlaneVersionsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.MobileNetwork/packetCoreControlPlaneVersions/{versionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PacketCoreControlPlaneVersion
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.versionName],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.MobileNetwork/packetCoreControlPlaneVersions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PacketCoreControlPlaneVersionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PacketCoreControlPlaneVersionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
