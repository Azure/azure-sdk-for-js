/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ExtendedUeInformation } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MobileNetworkManagementClient } from "../mobileNetworkManagementClient";
import {
  ExtendedUeInformationGetOptionalParams,
  ExtendedUeInformationGetResponse,
} from "../models";

/** Class containing ExtendedUeInformation operations. */
export class ExtendedUeInformationImpl implements ExtendedUeInformation {
  private readonly client: MobileNetworkManagementClient;

  /**
   * Initialize a new instance of the class ExtendedUeInformation class.
   * @param client Reference to the service client
   */
  constructor(client: MobileNetworkManagementClient) {
    this.client = client;
  }

  /**
   * Gets extended information about the specified UE from the packet core.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param ueId IMSI of a UE.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    ueId: string,
    options?: ExtendedUeInformationGetOptionalParams,
  ): Promise<ExtendedUeInformationGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, packetCoreControlPlaneName, ueId, options },
      getOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}/ues/{ueId}/extendedInformation/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExtendedUeInfo,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.packetCoreControlPlaneName,
    Parameters.ueId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
