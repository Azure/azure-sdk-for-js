/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const InterfaceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InterfaceProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      ipv4Address: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "ipv4Address",
        type: {
          name: "String"
        }
      },
      ipv4Subnet: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
          )
        },
        serializedName: "ipv4Subnet",
        type: {
          name: "String"
        }
      },
      ipv4Gateway: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "ipv4Gateway",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NaptConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NaptConfiguration",
    modelProperties: {
      enabled: {
        defaultValue: "Enabled",
        serializedName: "enabled",
        type: {
          name: "String"
        }
      },
      portRange: {
        serializedName: "portRange",
        type: {
          name: "Composite",
          className: "PortRange"
        }
      },
      portReuseHoldTime: {
        serializedName: "portReuseHoldTime",
        type: {
          name: "Composite",
          className: "PortReuseHoldTimes"
        }
      },
      pinholeLimits: {
        defaultValue: 65536,
        constraints: {
          InclusiveMaximum: 65536,
          InclusiveMinimum: 1
        },
        serializedName: "pinholeLimits",
        type: {
          name: "Number"
        }
      },
      pinholeTimeouts: {
        serializedName: "pinholeTimeouts",
        type: {
          name: "Composite",
          className: "PinholeTimeouts"
        }
      }
    }
  }
};

export const PortRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PortRange",
    modelProperties: {
      minPort: {
        defaultValue: 1024,
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1024
        },
        serializedName: "minPort",
        type: {
          name: "Number"
        }
      },
      maxPort: {
        defaultValue: 49999,
        constraints: {
          InclusiveMaximum: 65535,
          InclusiveMinimum: 1024
        },
        serializedName: "maxPort",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PortReuseHoldTimes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PortReuseHoldTimes",
    modelProperties: {
      tcp: {
        defaultValue: 120,
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "tcp",
        type: {
          name: "Number"
        }
      },
      udp: {
        defaultValue: 60,
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "udp",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PinholeTimeouts: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PinholeTimeouts",
    modelProperties: {
      tcp: {
        defaultValue: 180,
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "tcp",
        type: {
          name: "Number"
        }
      },
      udp: {
        defaultValue: 30,
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "udp",
        type: {
          name: "Number"
        }
      },
      icmp: {
        defaultValue: 30,
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "icmp",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const TagsObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsObject",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AttachedDataNetworkListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttachedDataNetworkListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AttachedDataNetwork"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataNetworkListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataNetworkListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataNetwork"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PlmnId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlmnId",
    modelProperties: {
      mcc: {
        constraints: {
          Pattern: new RegExp("^\\d{3}$")
        },
        serializedName: "mcc",
        required: true,
        type: {
          name: "String"
        }
      },
      mnc: {
        constraints: {
          Pattern: new RegExp("^\\d{2,3}$")
        },
        serializedName: "mnc",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MobileNetworkListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MobileNetworkListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MobileNetwork"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SimIdListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SimIdListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SiteListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Site"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultKey",
    modelProperties: {
      keyUrl: {
        serializedName: "keyUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MobileNetworkResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MobileNetworkResourceId",
    modelProperties: {
      id: {
        constraints: {
          Pattern: new RegExp(
            "^\\/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]\\/[^/?#]+\\/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]\\/[^/?#]+\\/[pP][rR][oO][vV][iI][dD][eE][rR][sS]\\/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\\.[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK]\\/[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK][sS]\\/[^/?#]+$"
          )
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const SimGroupListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SimGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SimGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SimPolicyResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SimPolicyResourceId",
    modelProperties: {
      id: {
        constraints: {
          Pattern: new RegExp(
            "^\\/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]\\/[^/?#]+\\/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]\\/[^/?#]+\\/[pP][rR][oO][vV][iI][dD][eE][rR][sS]\\/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\\.[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK]\\/[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK][sS]\\/[^/?#]+\\/[sS][iI][mM][pP][oO][lL][iI][cC][iI][eE][sS]\\/[^/?#]+$"
          )
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SimStaticIpProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SimStaticIpProperties",
    modelProperties: {
      attachedDataNetwork: {
        serializedName: "attachedDataNetwork",
        type: {
          name: "Composite",
          className: "AttachedDataNetworkResourceId"
        }
      },
      slice: {
        serializedName: "slice",
        type: {
          name: "Composite",
          className: "SliceResourceId"
        }
      },
      staticIp: {
        serializedName: "staticIp",
        type: {
          name: "Composite",
          className: "SimStaticIpPropertiesStaticIp"
        }
      }
    }
  }
};

export const AttachedDataNetworkResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttachedDataNetworkResourceId",
    modelProperties: {
      id: {
        constraints: {
          Pattern: new RegExp(
            "^\\/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]\\/[^/?#]+\\/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]\\/[^/?#]+\\/[pP][rR][oO][vV][iI][dD][eE][rR][sS]\\/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\\.[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK]\\/[pP][aA][cC][kK][eE][tT][cC][oO][rR][eE][cC][oO][nN][tT][rR][oO][lL][pP][lL][aA][nN][eE][sS]\\/[^/?#]+\\/[pP][aA][cC][kK][eE][tT][cC][oO][rR][eE][dD][aA][tT][aA][pP][lL][aA][nN][eE][sS]\\/[^/?#]+\\/[aA][tT][tT][aA][cC][hH][eE][dD][dD][aA][tT][aA][nN][eE][tT][wW][oO][rR][kK][sS]\\/[^/?#]+$"
          )
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SliceResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SliceResourceId",
    modelProperties: {
      id: {
        constraints: {
          Pattern: new RegExp(
            "^\\/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]\\/[^/?#]+\\/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]\\/[^/?#]+\\/[pP][rR][oO][vV][iI][dD][eE][rR][sS]\\/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\\.[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK]\\/[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK][sS]\\/[^/?#]+\\/[sS][lL][iI][cC][eE][sS]\\/[^/?#]+$"
          )
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SimStaticIpPropertiesStaticIp: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SimStaticIpPropertiesStaticIp",
    modelProperties: {
      ipv4Address: {
        constraints: {
          Pattern: new RegExp(
            "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"
          )
        },
        serializedName: "ipv4Address",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SimListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SimListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Sim"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PlatformConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlatformConfiguration",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      azureStackEdgeDevice: {
        serializedName: "azureStackEdgeDevice",
        type: {
          name: "Composite",
          className: "AzureStackEdgeDeviceResourceId"
        }
      },
      connectedCluster: {
        serializedName: "connectedCluster",
        type: {
          name: "Composite",
          className: "ConnectedClusterResourceId"
        }
      },
      customLocation: {
        serializedName: "customLocation",
        type: {
          name: "Composite",
          className: "CustomLocationResourceId"
        }
      }
    }
  }
};

export const AzureStackEdgeDeviceResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureStackEdgeDeviceResourceId",
    modelProperties: {
      id: {
        constraints: {
          Pattern: new RegExp(
            "^\\/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]\\/[^/?#]+\\/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]\\/[^/?#]+\\/[pP][rR][oO][vV][iI][dD][eE][rR][sS]\\/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\\.[dD][aA][tT][aA][bB][oO][xX][eE][dD][gG][eE]\\/[dD][aA][tT][aA][bB][oO][xX][eE][dD][gG][eE][dD][eE][vV][iI][cC][eE][sS]\\/[^/?#]+$"
          )
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectedClusterResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedClusterResourceId",
    modelProperties: {
      id: {
        constraints: {
          Pattern: new RegExp(
            "^\\/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]\\/[^/?#]+\\/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]\\/[^/?#]+\\/[pP][rR][oO][vV][iI][dD][eE][rR][sS]\\/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\\.[kK][uU][bB][eE][rR][nN][eE][tT][eE][sS]\\/[cC][oO][nN][nN][eE][cC][tT][eE][dD][cC][lL][uU][sS][tT][eE][rR][sS]\\/[^/?#]+$"
          )
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomLocationResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomLocationResourceId",
    modelProperties: {
      id: {
        constraints: {
          Pattern: new RegExp(
            "^\\/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]\\/[^/?#]+\\/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]\\/[^/?#]+\\/[pP][rR][oO][vV][iI][dD][eE][rR][sS]\\/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\\.[eE][xX][tT][eE][nN][dD][eE][dD][lL][oO][cC][aA][tT][iI][oO][nN]\\/[cC][uU][sS][tT][oO][mM][lL][oO][cC][aA][tT][iI][oO][nN][sS]\\/[^/?#]+$"
          )
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocalDiagnosticsAccessConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LocalDiagnosticsAccessConfiguration",
    modelProperties: {
      httpsServerCertificate: {
        serializedName: "httpsServerCertificate",
        type: {
          name: "Composite",
          className: "KeyVaultCertificate"
        }
      }
    }
  }
};

export const KeyVaultCertificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultCertificate",
    modelProperties: {
      certificateUrl: {
        serializedName: "certificateUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PacketCoreControlPlaneListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCoreControlPlaneListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PacketCoreControlPlane"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PacketCoreControlPlaneVersionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCoreControlPlaneVersionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PacketCoreControlPlaneVersion"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PacketCoreDataPlaneListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCoreDataPlaneListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PacketCoreDataPlane"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QosPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QosPolicy",
    modelProperties: {
      fiveQi: {
        constraints: {
          InclusiveMaximum: 127,
          InclusiveMinimum: 1
        },
        serializedName: "5qi",
        type: {
          name: "Number"
        }
      },
      allocationAndRetentionPriorityLevel: {
        constraints: {
          InclusiveMaximum: 15,
          InclusiveMinimum: 1
        },
        serializedName: "allocationAndRetentionPriorityLevel",
        type: {
          name: "Number"
        }
      },
      preemptionCapability: {
        serializedName: "preemptionCapability",
        type: {
          name: "String"
        }
      },
      preemptionVulnerability: {
        serializedName: "preemptionVulnerability",
        type: {
          name: "String"
        }
      },
      maximumBitRate: {
        serializedName: "maximumBitRate",
        type: {
          name: "Composite",
          className: "Ambr"
        }
      }
    }
  }
};

export const Ambr: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Ambr",
    modelProperties: {
      uplink: {
        constraints: {
          Pattern: new RegExp("^\\d+(\\.\\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$")
        },
        serializedName: "uplink",
        required: true,
        type: {
          name: "String"
        }
      },
      downlink: {
        constraints: {
          Pattern: new RegExp("^\\d+(\\.\\d+)? (bps|Kbps|Mbps|Gbps|Tbps)$")
        },
        serializedName: "downlink",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PccRuleConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PccRuleConfiguration",
    modelProperties: {
      ruleName: {
        constraints: {
          Pattern: new RegExp(
            "^(?!(default|requested|service)$)[a-zA-Z0-9][a-zA-Z0-9_-]*$"
          ),
          MaxLength: 64
        },
        serializedName: "ruleName",
        required: true,
        type: {
          name: "String"
        }
      },
      rulePrecedence: {
        constraints: {
          InclusiveMaximum: 255,
          InclusiveMinimum: 0
        },
        serializedName: "rulePrecedence",
        required: true,
        type: {
          name: "Number"
        }
      },
      ruleQosPolicy: {
        serializedName: "ruleQosPolicy",
        type: {
          name: "Composite",
          className: "PccRuleQosPolicy"
        }
      },
      trafficControl: {
        serializedName: "trafficControl",
        type: {
          name: "String"
        }
      },
      serviceDataFlowTemplates: {
        constraints: {
          MinItems: 1,
          UniqueItems: true
        },
        serializedName: "serviceDataFlowTemplates",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceDataFlowTemplate"
            }
          }
        }
      }
    }
  }
};

export const ServiceDataFlowTemplate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceDataFlowTemplate",
    modelProperties: {
      templateName: {
        constraints: {
          Pattern: new RegExp(
            "^(?!(default|requested|service)$)[a-zA-Z0-9][a-zA-Z0-9_-]*$"
          ),
          MaxLength: 64
        },
        serializedName: "templateName",
        required: true,
        type: {
          name: "String"
        }
      },
      direction: {
        serializedName: "direction",
        required: true,
        type: {
          name: "String"
        }
      },
      protocol: {
        constraints: {
          MinItems: 1,
          UniqueItems: true
        },
        serializedName: "protocol",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp(
                "^(ip|[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"
              )
            },
            type: {
              name: "String"
            }
          }
        }
      },
      remoteIpList: {
        constraints: {
          MinItems: 1,
          UniqueItems: true
        },
        serializedName: "remoteIpList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp(
                "^(any|(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2])))$"
              )
            },
            type: {
              name: "String"
            }
          }
        }
      },
      ports: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "ports",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp(
                "^([1-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])(-([1-9]|[1-9][0-9]{1,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]))?$"
              )
            },
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ServiceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Service"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SliceConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SliceConfiguration",
    modelProperties: {
      slice: {
        serializedName: "slice",
        type: {
          name: "Composite",
          className: "SliceResourceId"
        }
      },
      defaultDataNetwork: {
        serializedName: "defaultDataNetwork",
        type: {
          name: "Composite",
          className: "DataNetworkResourceId"
        }
      },
      dataNetworkConfigurations: {
        constraints: {
          MinItems: 1,
          UniqueItems: true
        },
        serializedName: "dataNetworkConfigurations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataNetworkConfiguration"
            }
          }
        }
      }
    }
  }
};

export const DataNetworkResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataNetworkResourceId",
    modelProperties: {
      id: {
        constraints: {
          Pattern: new RegExp(
            "^\\/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]\\/[^/?#]+\\/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]\\/[^/?#]+\\/[pP][rR][oO][vV][iI][dD][eE][rR][sS]\\/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\\.[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK]\\/[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK][sS]\\/[^/?#]+\\/[dD][aA][tT][aA][nN][eE][tT][wW][oO][rR][kK][sS]\\/[^/?#]+$"
          )
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataNetworkConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataNetworkConfiguration",
    modelProperties: {
      dataNetwork: {
        serializedName: "dataNetwork",
        type: {
          name: "Composite",
          className: "DataNetworkResourceId"
        }
      },
      sessionAmbr: {
        serializedName: "sessionAmbr",
        type: {
          name: "Composite",
          className: "Ambr"
        }
      },
      fiveQi: {
        constraints: {
          InclusiveMaximum: 127,
          InclusiveMinimum: 1
        },
        serializedName: "5qi",
        type: {
          name: "Number"
        }
      },
      allocationAndRetentionPriorityLevel: {
        constraints: {
          InclusiveMaximum: 15,
          InclusiveMinimum: 1
        },
        serializedName: "allocationAndRetentionPriorityLevel",
        type: {
          name: "Number"
        }
      },
      preemptionCapability: {
        serializedName: "preemptionCapability",
        type: {
          name: "String"
        }
      },
      preemptionVulnerability: {
        serializedName: "preemptionVulnerability",
        type: {
          name: "String"
        }
      },
      defaultSessionType: {
        serializedName: "defaultSessionType",
        type: {
          name: "String"
        }
      },
      additionalAllowedSessionTypes: {
        constraints: {
          MaxItems: 1
        },
        serializedName: "additionalAllowedSessionTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      allowedServices: {
        constraints: {
          MinItems: 1,
          UniqueItems: true
        },
        serializedName: "allowedServices",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceResourceId"
            }
          }
        }
      }
    }
  }
};

export const ServiceResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResourceId",
    modelProperties: {
      id: {
        constraints: {
          Pattern: new RegExp(
            "^\\/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]\\/[^/?#]+\\/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]\\/[^/?#]+\\/[pP][rR][oO][vV][iI][dD][eE][rR][sS]\\/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\\.[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK]\\/[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK][sS]\\/[^/?#]+\\/[sS][eE][rR][vV][iI][cC][eE][sS]\\/[^/?#]+$"
          )
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SimPolicyListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SimPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SimPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Snssai: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Snssai",
    modelProperties: {
      sst: {
        constraints: {
          InclusiveMaximum: 255,
          InclusiveMinimum: 0
        },
        serializedName: "sst",
        required: true,
        type: {
          name: "Number"
        }
      },
      sd: {
        constraints: {
          Pattern: new RegExp("^[A-Fa-f0-9]{6}$")
        },
        serializedName: "sd",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SliceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SliceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Slice"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SimGroupResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SimGroupResourceId",
    modelProperties: {
      id: {
        constraints: {
          Pattern: new RegExp(
            "^\\/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]\\/[^/?#]+\\/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]\\/[^/?#]+\\/[pP][rR][oO][vV][iI][dD][eE][rR][sS]\\/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\\.[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK]\\/[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK][sS]\\/[^/?#]+\\/[sS][iI][mM][gG][rR][oO][uU][pP][sS]\\/[^/?#]+$"
          )
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Arp: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Arp",
    modelProperties: {
      priorityLevel: {
        constraints: {
          InclusiveMaximum: 15,
          InclusiveMinimum: 1
        },
        serializedName: "priorityLevel",
        required: true,
        type: {
          name: "Number"
        }
      },
      preemptCap: {
        serializedName: "preemptCap",
        required: true,
        type: {
          name: "String"
        }
      },
      preemptVuln: {
        serializedName: "preemptVuln",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const PccRuleQosPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PccRuleQosPolicy",
    modelProperties: {
      ...QosPolicy.type.modelProperties,
      guaranteedBitRate: {
        serializedName: "guaranteedBitRate",
        type: {
          name: "Composite",
          className: "Ambr"
        }
      }
    }
  }
};

export const AttachedDataNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttachedDataNetwork",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userPlaneDataInterface: {
        serializedName: "properties.userPlaneDataInterface",
        type: {
          name: "Composite",
          className: "InterfaceProperties"
        }
      },
      dnsAddresses: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "properties.dnsAddresses",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp(
                "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"
              )
            },
            type: {
              name: "String"
            }
          }
        }
      },
      naptConfiguration: {
        serializedName: "properties.naptConfiguration",
        type: {
          name: "Composite",
          className: "NaptConfiguration"
        }
      },
      userEquipmentAddressPoolPrefix: {
        constraints: {
          MinItems: 1,
          UniqueItems: true
        },
        serializedName: "properties.userEquipmentAddressPoolPrefix",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp(
                "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
              )
            },
            type: {
              name: "String"
            }
          }
        }
      },
      userEquipmentStaticAddressPoolPrefix: {
        constraints: {
          MinItems: 1,
          UniqueItems: true
        },
        serializedName: "properties.userEquipmentStaticAddressPoolPrefix",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp(
                "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
              )
            },
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DataNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataNetwork",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MobileNetwork: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MobileNetwork",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicLandMobileNetworkIdentifier: {
        serializedName: "properties.publicLandMobileNetworkIdentifier",
        type: {
          name: "Composite",
          className: "PlmnId"
        }
      },
      serviceKey: {
        serializedName: "properties.serviceKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Site: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Site",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkFunctions: {
        serializedName: "properties.networkFunctions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubResource"
            }
          }
        }
      }
    }
  }
};

export const SimGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SimGroup",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      encryptionKey: {
        serializedName: "properties.encryptionKey",
        type: {
          name: "Composite",
          className: "KeyVaultKey"
        }
      },
      mobileNetwork: {
        serializedName: "properties.mobileNetwork",
        type: {
          name: "Composite",
          className: "MobileNetworkResourceId"
        }
      }
    }
  }
};

export const PacketCoreControlPlane: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCoreControlPlane",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      mobileNetwork: {
        serializedName: "properties.mobileNetwork",
        type: {
          name: "Composite",
          className: "MobileNetworkResourceId"
        }
      },
      platform: {
        serializedName: "properties.platform",
        type: {
          name: "Composite",
          className: "PlatformConfiguration"
        }
      },
      coreNetworkTechnology: {
        serializedName: "properties.coreNetworkTechnology",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      controlPlaneAccessInterface: {
        serializedName: "properties.controlPlaneAccessInterface",
        type: {
          name: "Composite",
          className: "InterfaceProperties"
        }
      },
      sku: {
        serializedName: "properties.sku",
        required: true,
        type: {
          name: "String"
        }
      },
      localDiagnosticsAccess: {
        serializedName: "properties.localDiagnosticsAccess",
        type: {
          name: "Composite",
          className: "LocalDiagnosticsAccessConfiguration"
        }
      },
      interopSettings: {
        serializedName: "properties.interopSettings",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const PacketCoreDataPlane: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCoreDataPlane",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userPlaneAccessInterface: {
        serializedName: "properties.userPlaneAccessInterface",
        type: {
          name: "Composite",
          className: "InterfaceProperties"
        }
      }
    }
  }
};

export const Service: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Service",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      servicePrecedence: {
        constraints: {
          InclusiveMaximum: 255,
          InclusiveMinimum: 0
        },
        serializedName: "properties.servicePrecedence",
        required: true,
        type: {
          name: "Number"
        }
      },
      serviceQosPolicy: {
        serializedName: "properties.serviceQosPolicy",
        type: {
          name: "Composite",
          className: "QosPolicy"
        }
      },
      pccRules: {
        constraints: {
          MinItems: 1,
          UniqueItems: true
        },
        serializedName: "properties.pccRules",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PccRuleConfiguration"
            }
          }
        }
      }
    }
  }
};

export const SimPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SimPolicy",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ueAmbr: {
        serializedName: "properties.ueAmbr",
        type: {
          name: "Composite",
          className: "Ambr"
        }
      },
      defaultSlice: {
        serializedName: "properties.defaultSlice",
        type: {
          name: "Composite",
          className: "SliceResourceId"
        }
      },
      rfspIndex: {
        constraints: {
          InclusiveMaximum: 256,
          InclusiveMinimum: 1
        },
        serializedName: "properties.rfspIndex",
        type: {
          name: "Number"
        }
      },
      registrationTimer: {
        defaultValue: 3240,
        constraints: {
          InclusiveMinimum: 30
        },
        serializedName: "properties.registrationTimer",
        type: {
          name: "Number"
        }
      },
      sliceConfigurations: {
        constraints: {
          MinItems: 1,
          UniqueItems: true
        },
        serializedName: "properties.sliceConfigurations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SliceConfiguration"
            }
          }
        }
      }
    }
  }
};

export const Slice: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Slice",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      snssai: {
        serializedName: "properties.snssai",
        type: {
          name: "Composite",
          className: "Snssai"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sim: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sim",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      simState: {
        serializedName: "properties.simState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      internationalMobileSubscriberIdentity: {
        constraints: {
          Pattern: new RegExp("^[0-9]{5,15}$")
        },
        serializedName: "properties.internationalMobileSubscriberIdentity",
        required: true,
        type: {
          name: "String"
        }
      },
      integratedCircuitCardIdentifier: {
        constraints: {
          Pattern: new RegExp("^89[0-9]{17,18}$")
        },
        serializedName: "properties.integratedCircuitCardIdentifier",
        type: {
          name: "String"
        }
      },
      authenticationKey: {
        constraints: {
          Pattern: new RegExp("^[0-9a-fA-F]{32}$")
        },
        serializedName: "properties.authenticationKey",
        type: {
          name: "String"
        }
      },
      operatorKeyCode: {
        constraints: {
          Pattern: new RegExp("^[0-9a-fA-F]{32}$")
        },
        serializedName: "properties.operatorKeyCode",
        type: {
          name: "String"
        }
      },
      deviceType: {
        serializedName: "properties.deviceType",
        type: {
          name: "String"
        }
      },
      simPolicy: {
        serializedName: "properties.simPolicy",
        type: {
          name: "Composite",
          className: "SimPolicyResourceId"
        }
      },
      staticIpConfiguration: {
        constraints: {
          MinItems: 1,
          UniqueItems: true
        },
        serializedName: "properties.staticIpConfiguration",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SimStaticIpProperties"
            }
          }
        }
      }
    }
  }
};

export const PacketCoreControlPlaneVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PacketCoreControlPlaneVersion",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      versionState: {
        serializedName: "properties.versionState",
        type: {
          name: "String"
        }
      },
      recommendedVersion: {
        serializedName: "properties.recommendedVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};
