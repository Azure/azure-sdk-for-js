/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Interface properties */
export interface InterfaceProperties {
  /** The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device. */
  name?: string;
  /** The IPv4 address. */
  ipv4Address?: string;
  /** The IPv4 subnet. */
  ipv4Subnet?: string;
  /** The default IPv4 gateway (router). */
  ipv4Gateway?: string;
}

/** The network address and port translation settings to use for the attached data network. */
export interface NaptConfiguration {
  /** Whether NAPT is enabled for connections to this attached data network. */
  enabled?: NaptEnabled;
  /**
   * Range of port numbers to use as translated ports on each translated address.
   * If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
   * (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and above are reserved for non-NAPT use.)
   */
  portRange?: PortRange;
  /** The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by another pinhole. All hold times must be minimum 1 second. */
  portReuseHoldTime?: PortReuseHoldTimes;
  /** Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface. For 5G networks, this is the N6 interface. For 4G networks, this is the SGi interface. */
  pinholeLimits?: number;
  /** Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second. */
  pinholeTimeouts?: PinholeTimeouts;
}

/**
 * Range of port numbers to use as translated ports on each translated address.
 * If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
 * (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and above are reserved for non-NAPT use.)
 */
export interface PortRange {
  /** The minimum port number */
  minPort?: number;
  /** The maximum port number */
  maxPort?: number;
}

/** The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by another pinhole. All hold times must be minimum 1 second. */
export interface PortReuseHoldTimes {
  /** Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused. Default for TCP is 2 minutes. */
  tcp?: number;
  /** Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused. Default for UDP is 1 minute. */
  udp?: number;
}

/** Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second. */
export interface PinholeTimeouts {
  /** Pinhole timeout for TCP pinholes in seconds. Default for TCP is 2 hours 4 minutes, as per RFC 5382 section 5. */
  tcp?: number;
  /** Pinhole timeout for UDP pinholes in seconds. Default for UDP is 5 minutes, as per RFC 4787 section 4.3. */
  udp?: number;
  /** Pinhole timeout for ICMP pinholes in seconds. Default for ICMP Echo is 60 seconds, as per RFC 5508 section 3.2. */
  icmp?: number;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Tags object for patch operations. */
export interface TagsObject {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** Response for attached data network API service call. */
export interface AttachedDataNetworkListResult {
  /** A list of data networks in a resource group. */
  value?: AttachedDataNetwork[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for data network API service call. */
export interface DataNetworkListResult {
  /** A list of data networks. */
  value?: DataNetwork[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Public land mobile network (PLMN) ID. */
export interface PlmnId {
  /** Mobile country code (MCC). */
  mcc: string;
  /** Mobile network code (MNC). */
  mnc: string;
}

/** Response for mobile networks API service call. */
export interface MobileNetworkListResult {
  /** A list of mobile networks in a resource group. */
  value?: MobileNetwork[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for list SIM IDs API service call. */
export interface SimIdListResult {
  /** A list of SIM IDs. */
  value?: SubResource[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Reference to another sub resource. */
export interface SubResource {
  /** Resource ID. */
  id: string;
}

/** Response for sites API service call. */
export interface SiteListResult {
  /** A list of sites in a mobile network. */
  value?: Site[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** An Azure key vault key. */
export interface KeyVaultKey {
  /** The key URL, unversioned. For example: https://contosovault.vault.azure.net/keys/azureKey. */
  keyUrl?: string;
}

/** Reference to a mobile network resource. */
export interface MobileNetworkResourceId {
  /** Mobile network resource ID. */
  id: string;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export interface ManagedServiceIdentity {
  /**
   * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
  type: ManagedServiceIdentityType;
  /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Response for list SIM groups API service call. */
export interface SimGroupListResult {
  /** A list of SIM groups in a resource group. */
  value?: SimGroup[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Reference to a SIM policy resource. */
export interface SimPolicyResourceId {
  /** SIM policy resource ID. */
  id: string;
}

/** Static IP configuration for a SIM, scoped to a particular attached data network and slice. */
export interface SimStaticIpProperties {
  /** The attached data network on which the static IP address will be used. The combination of attached data network and slice defines the network scope of the IP address. */
  attachedDataNetwork?: AttachedDataNetworkResourceId;
  /** The network slice on which the static IP address will be used. The combination of attached data network and slice defines the network scope of the IP address. */
  slice?: SliceResourceId;
  /** The static IP configuration for the SIM to use at the defined network scope. */
  staticIp?: SimStaticIpPropertiesStaticIp;
}

/** Reference to an attached data network resource. */
export interface AttachedDataNetworkResourceId {
  /** Attached data network resource ID. */
  id: string;
}

/** Reference to a slice resource. */
export interface SliceResourceId {
  /** Slice resource ID. */
  id: string;
}

/** The static IP configuration for the SIM to use at the defined network scope. */
export interface SimStaticIpPropertiesStaticIp {
  /** The IPv4 address assigned to the SIM at this network scope. This address must be in the userEquipmentStaticAddressPoolPrefix defined in the attached data network. */
  ipv4Address?: string;
}

/** Response for list SIMs API service call. */
export interface SimListResult {
  /** A list of SIMs in a resource group. */
  value?: Sim[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** List of the operations. */
export interface OperationList {
  /**
   * List of Microsoft.MobileNetwork operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Object that describes a single Microsoft.MobileNetwork operation. */
export interface Operation {
  /** Indicates whether the operation applies to data-plane. */
  isDataAction?: boolean;
  /**
   * Operation name: {provider}/{resource}/{operation}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The object that represents the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly display?: OperationDisplay;
}

/** The object that represents the operation. */
export interface OperationDisplay {
  /** Service provider: Microsoft.MobileNetwork */
  provider?: string;
  /** Resource on which the operation is performed: Registration definition, registration assignment etc. */
  resource?: string;
  /** Operation type: Read, write, delete, etc. */
  operation?: string;
  /** Description of the operation. */
  description?: string;
}

/** The platform where the packet core is deployed. */
export interface PlatformConfiguration {
  /** The platform type where packet core is deployed. */
  type: PlatformType;
  /** The Azure Stack Edge device where where the packet core is deployed. If the device is part of a fault tolerant pair, either device in the pair can be specified. */
  azureStackEdgeDevice?: AzureStackEdgeDeviceResourceId;
  /** Azure Arc connected cluster where the packet core is deployed. */
  connectedCluster?: ConnectedClusterResourceId;
  /** Azure Arc custom location where the packet core is deployed. */
  customLocation?: CustomLocationResourceId;
}

/** Reference to an Azure Arc custom location resource. */
export interface AzureStackEdgeDeviceResourceId {
  /** Azure Stack Edge device resource ID. */
  id: string;
}

/** Reference to an Azure Arc custom location resource. */
export interface ConnectedClusterResourceId {
  /** Azure Arc connected cluster resource ID. */
  id: string;
}

/** Reference to an Azure Arc custom location resource. */
export interface CustomLocationResourceId {
  /** Azure Arc custom location resource ID. */
  id: string;
}

/** The kubernetes ingress configuration to control access to packet core diagnostics over local APIs. */
export interface LocalDiagnosticsAccessConfiguration {
  /** The HTTPS server TLS certificate used to secure local access to diagnostics. */
  httpsServerCertificate?: KeyVaultCertificate;
}

/** An Azure key vault certificate. */
export interface KeyVaultCertificate {
  /** The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress. */
  certificateUrl?: string;
}

/** Response for packet core control planes API service call. */
export interface PacketCoreControlPlaneListResult {
  /** A list of packet core control planes in a resource group. */
  value?: PacketCoreControlPlane[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for packet core control plane version API service call. */
export interface PacketCoreControlPlaneVersionListResult {
  /** A list of supported packet core control plane versions. */
  value?: PacketCoreControlPlaneVersion[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Response for packet core data planes API service call. */
export interface PacketCoreDataPlaneListResult {
  /** A list of packet core data planes in a resource group. */
  value?: PacketCoreDataPlane[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** QoS policy */
export interface QosPolicy {
  /** QoS Flow 5G QoS Indicator value. The 5QI identifies a specific QoS forwarding treatment to be provided to a flow. This must not be a standardized 5QI value corresponding to a GBR (guaranteed bit rate) QoS Flow. The illegal GBR 5QI values are: 1, 2, 3, 4, 65, 66, 67, 71, 72, 73, 74, 75, 76, 82, 83, 84, and 85. See 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table 5.7.4-1 for the definition of which are the GBR 5QI values. */
  fiveQi?: number;
  /** QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemptionCapability` and `preemptionVulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `5qi` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
  allocationAndRetentionPriorityLevel?: number;
  /** QoS Flow preemption capability. The preemption capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
  preemptionCapability?: PreemptionCapability;
  /** QoS Flow preemption vulnerability. The preemption vulnerability of a QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
  preemptionVulnerability?: PreemptionVulnerability;
  /** The maximum bit rate (MBR) for all service data flows that use this data flow policy rule or service. */
  maximumBitRate: Ambr;
}

/** Aggregate maximum bit rate. */
export interface Ambr {
  /** Uplink bit rate. */
  uplink: string;
  /** Downlink bit rate. */
  downlink: string;
}

/** Data flow policy rule configuration */
export interface PccRuleConfiguration {
  /** The name of the rule. This must be unique within the parent service. You must not use any of the following reserved strings - `default`, `requested` or `service`. */
  ruleName: string;
  /** A precedence value that is used to decide between data flow policy rules when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all data flow policy rules configured in the mobile network. */
  rulePrecedence: number;
  /** The QoS policy to use for packets matching this rule. If this field is null then the parent service will define the QoS settings. */
  ruleQosPolicy?: PccRuleQosPolicy;
  /** Determines whether flows that match this data flow policy rule are permitted. */
  trafficControl?: TrafficControlPermission;
  /** The set of data flow templates to use for this data flow policy rule. */
  serviceDataFlowTemplates: ServiceDataFlowTemplate[];
}

/** Data flow template */
export interface ServiceDataFlowTemplate {
  /** The name of the data flow template. This must be unique within the parent data flow policy rule. You must not use any of the following reserved strings - `default`, `requested` or `service`. */
  templateName: string;
  /** The direction of this flow. */
  direction: SdfDirection;
  /** A list of the allowed protocol(s) for this flow. If you want this flow to be able to use any protocol within the internet protocol suite, use the value `ip`. If you only want to allow a selection of protocols, you must use the corresponding IANA Assigned Internet Protocol Number for each protocol, as described in https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml. For example, for UDP, you must use 17. If you use the value `ip` then you must leave the field `port` unspecified. */
  protocol: string[];
  /** The remote IP address(es) to which UEs will connect for this flow. If you want to allow connections on any IP address, use the value `any`. Otherwise, you must provide each of the remote IP addresses to which the packet core instance will connect for this flow. You must provide each IP address in CIDR notation, including the netmask (for example, 192.0.2.54/24). */
  remoteIpList: string[];
  /** The port(s) to which UEs will connect for this flow. You can specify zero or more ports or port ranges. If you specify one or more ports or port ranges then you must specify a value other than `ip` in the `protocol` field. This is an optional setting. If you do not specify it then connections will be allowed on all ports. Port ranges must be specified as <FirstPort>-<LastPort>. For example: [`8080`, `8082-8085`]. */
  ports?: string[];
}

/** Response for services API service call. */
export interface ServiceListResult {
  /** A list of services. */
  value?: Service[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Per-slice settings */
export interface SliceConfiguration {
  /** A reference to the slice that these settings apply to */
  slice: SliceResourceId;
  /** The default data network to use if the UE does not explicitly specify it. Configuration for this object must exist in the `dataNetworkConfigurations` map. */
  defaultDataNetwork: DataNetworkResourceId;
  /** The allowed data networks and the settings to use for them. The list must not contain duplicate items and must contain at least one item. */
  dataNetworkConfigurations: DataNetworkConfiguration[];
}

/** Reference to a data network resource. */
export interface DataNetworkResourceId {
  /** Data network resource ID. */
  id: string;
}

/** Settings controlling data network use */
export interface DataNetworkConfiguration {
  /** A reference to the data network that these settings apply to */
  dataNetwork: DataNetworkResourceId;
  /** Aggregate maximum bit rate across all non-GBR QoS flows of a given PDU session. See 3GPP TS23.501 section 5.7.2.6 for a full description of the Session-AMBR. */
  sessionAmbr: Ambr;
  /** Default QoS Flow 5G QoS Indicator value. The 5QI identifies a specific QoS forwarding treatment to be provided to a flow. This must not be a standardized 5QI value corresponding to a GBR (guaranteed bit rate) QoS Flow. The illegal GBR 5QI values are: 1, 2, 3, 4, 65, 66, 67, 71, 72, 73, 74, 75, 76, 82, 83, 84, and 85. See 3GPP TS23.501 section 5.7.2.1 for a full description of the 5QI parameter, and table 5.7.4-1 for the definition of which are the GBR 5QI values. */
  fiveQi?: number;
  /** Default QoS Flow allocation and retention priority (ARP) level. Flows with higher priority preempt flows with lower priority, if the settings of `preemptionCapability` and `preemptionVulnerability` allow it. 1 is the highest level of priority. If this field is not specified then `5qi` is used to derive the ARP value. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
  allocationAndRetentionPriorityLevel?: number;
  /** Default QoS Flow preemption capability. The preemption capability of a QoS Flow controls whether it can preempt another QoS Flow with a lower priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
  preemptionCapability?: PreemptionCapability;
  /** Default QoS Flow preemption vulnerability. The preemption vulnerability of a QoS Flow controls whether it can be preempted by a QoS Flow with a higher priority level. See 3GPP TS23.501 section 5.7.2.2 for a full description of the ARP parameters. */
  preemptionVulnerability?: PreemptionVulnerability;
  /** The default PDU session type, which is used if the UE does not request a specific session type. */
  defaultSessionType?: PduSessionType;
  /** Allowed session types in addition to the default session type. Must not duplicate the default session type. */
  additionalAllowedSessionTypes?: PduSessionType[];
  /** List of services that can be used as part of this SIM policy. The list must not contain duplicate items and must contain at least one item. */
  allowedServices: ServiceResourceId[];
}

/** Reference to a service resource. */
export interface ServiceResourceId {
  /** Service resource ID. */
  id: string;
}

/** Response for SIM policies API service call. */
export interface SimPolicyListResult {
  /** A list of SIM policies. */
  value?: SimPolicy[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Single-network slice selection assistance information (S-NSSAI). */
export interface Snssai {
  /** Slice/service type (SST). */
  sst: number;
  /** Slice differentiator (SD). */
  sd?: string;
}

/** Response for network slice API service call. */
export interface SliceListResult {
  /** A list of network slices in a mobile network. */
  value?: Slice[];
  /**
   * The URL to get the next set of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Reference to a SIM group resource. */
export interface SimGroupResourceId {
  /** SIM group resource ID. */
  id: string;
}

/** Allocation and Retention Priority (ARP) parameters. */
export interface Arp {
  /** ARP priority level. */
  priorityLevel: number;
  /** ARP preemption capability. */
  preemptCap: PreemptionCapability;
  /** ARP preemption vulnerability */
  preemptVuln: PreemptionVulnerability;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** Data flow policy rule QoS policy */
export interface PccRuleQosPolicy extends QosPolicy {
  /** The guaranteed bit rate (GBR) for all service data flows that use this data flow policy rule. This is an optional setting. If you do not provide a value, there will be no GBR set for the data flow policy rule that uses this QoS definition. */
  guaranteedBitRate?: Ambr;
}

/** Attached data network resource. */
export interface AttachedDataNetwork extends TrackedResource {
  /**
   * The provisioning state of the attached data network resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The user plane interface on the data network. For 5G networks, this is the N6 interface. For 4G networks, this is the SGi interface. */
  userPlaneDataInterface: InterfaceProperties;
  /** The DNS servers to signal to UEs to use for this attached data network. */
  dnsAddresses?: string[];
  /**
   * The network address and port translation (NAPT) configuration.
   * If this is not specified, the attached data network will use a default NAPT configuration with NAPT enabled.
   */
  naptConfiguration?: NaptConfiguration;
  /**
   * The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs.
   * The packet core instance assigns an IP address to a UE when the UE sets up a PDU session.
   *  You must define at least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix. If you define both, they must be of the same size.
   */
  userEquipmentAddressPoolPrefix?: string[];
  /**
   * The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs.
   * The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource.
   * At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined, they must be of the same size.
   */
  userEquipmentStaticAddressPoolPrefix?: string[];
}

/** Data network resource. */
export interface DataNetwork extends TrackedResource {
  /**
   * The provisioning state of the data network resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** An optional description for this data network. */
  description?: string;
}

/** Mobile network resource. */
export interface MobileNetwork extends TrackedResource {
  /**
   * The provisioning state of the mobile network resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The unique public land mobile network identifier for the network. This is made up of the mobile country code and mobile network code, as defined in https://www.itu.int/rec/T-REC-E.212. The values 001-01 and 001-001 can be used for testing and the values 999-99 and 999-999 can be used on internal private networks. */
  publicLandMobileNetworkIdentifier: PlmnId;
  /**
   * The mobile network resource identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serviceKey?: string;
}

/** Site resource. */
export interface Site extends TrackedResource {
  /**
   * The provisioning state of the site resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** An array of IDs of the network functions deployed on the site, maintained by the user. */
  networkFunctions?: SubResource[];
}

/** SIM group resource. */
export interface SimGroup extends TrackedResource {
  /** The identity used to retrieve the encryption key from Azure key vault. */
  identity?: ManagedServiceIdentity;
  /**
   * The provisioning state of the SIM group resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** A key to encrypt the SIM data that belongs to this SIM group. */
  encryptionKey?: KeyVaultKey;
  /** Mobile network that this SIM belongs to */
  mobileNetwork?: MobileNetworkResourceId;
}

/** Packet core control plane resource. */
export interface PacketCoreControlPlane extends TrackedResource {
  /** The identity used to retrieve the ingress certificate from Azure key vault. */
  identity?: ManagedServiceIdentity;
  /**
   * The provisioning state of the packet core control plane resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Mobile network in which this packet core control plane is deployed. */
  mobileNetwork: MobileNetworkResourceId;
  /** The platform where the packet core is deployed. */
  platform?: PlatformConfiguration;
  /** The core network technology generation (5G core or EPC / 4G core). */
  coreNetworkTechnology?: CoreNetworkType;
  /** The version of the packet core software that is deployed. */
  version?: string;
  /** The control plane interface on the access network. For 5G networks, this is the N2 interface. For 4G networks, this is the S1-MME interface. */
  controlPlaneAccessInterface: InterfaceProperties;
  /** The SKU defining the throughput and SIM allowances for this packet core control plane deployment. */
  sku: BillingSku;
  /** The kubernetes ingress configuration to control access to packet core diagnostics over local APIs. */
  localDiagnosticsAccess?: LocalDiagnosticsAccessConfiguration;
  /** Settings to allow interoperability with third party components e.g. RANs and UEs. */
  interopSettings?: Record<string, unknown>;
}

/** Packet core data plane resource. */
export interface PacketCoreDataPlane extends TrackedResource {
  /**
   * The provisioning state of the packet core data plane resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The user plane interface on the access network. For 5G networks, this is the N3 interface. For 4G networks, this is the S1-U interface. */
  userPlaneAccessInterface: InterfaceProperties;
}

/** Service resource. */
export interface Service extends TrackedResource {
  /**
   * The provisioning state of the service resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** A precedence value that is used to decide between services when identifying the QoS values to use for a particular SIM. A lower value means a higher priority. This value should be unique among all services configured in the mobile network. */
  servicePrecedence: number;
  /** The QoS policy to use for packets matching this service. This can be overridden for particular flows using the ruleQosPolicy field in a PccRuleConfiguration. If this field is null then the UE's SIM policy will define the QoS settings. */
  serviceQosPolicy?: QosPolicy;
  /** The set of data flow policy rules that make up this service. */
  pccRules: PccRuleConfiguration[];
}

/** SIM policy resource. */
export interface SimPolicy extends TrackedResource {
  /**
   * The provisioning state of the SIM policy resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Aggregate maximum bit rate across all non-GBR QoS flows of all PDU sessions of a given UE. See 3GPP TS23.501 section 5.7.2.6 for a full description of the UE-AMBR. */
  ueAmbr: Ambr;
  /** The default slice to use if the UE does not explicitly specify it. This slice must exist in the `sliceConfigurations` map. */
  defaultSlice: SliceResourceId;
  /** RAT/Frequency Selection Priority Index, defined in 3GPP TS 36.413. This is an optional setting and by default is unspecified. */
  rfspIndex?: number;
  /** Interval for the UE periodic registration update procedure, in seconds. */
  registrationTimer?: number;
  /** The allowed slices and the settings to use for them. The list must not contain duplicate items and must contain at least one item. */
  sliceConfigurations: SliceConfiguration[];
}

/** Network slice resource. */
export interface Slice extends TrackedResource {
  /**
   * The provisioning state of the network slice resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** Single-network slice selection assistance information (S-NSSAI). Unique at the scope of a mobile network. */
  snssai: Snssai;
  /** An optional description for this network slice. */
  description?: string;
}

/** SIM resource. */
export interface Sim extends ProxyResource {
  /**
   * The provisioning state of the SIM resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The state of the SIM resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly simState?: SimState;
  /** The international mobile subscriber identity (IMSI) for the SIM. */
  internationalMobileSubscriberIdentity: string;
  /** The integrated circuit card ID (ICCID) for the SIM. */
  integratedCircuitCardIdentifier?: string;
  /** The Ki value for the SIM. */
  authenticationKey?: string;
  /** The Opc value for the SIM. */
  operatorKeyCode?: string;
  /** An optional free-form text field that can be used to record the device type this SIM is associated with, for example 'Video camera'. The Azure portal allows SIMs to be grouped and filtered based on this value. */
  deviceType?: string;
  /** The SIM policy used by this SIM. */
  simPolicy?: SimPolicyResourceId;
  /** A list of static IP addresses assigned to this SIM. Each address is assigned at a defined network scope, made up of {attached data network, slice}. */
  staticIpConfiguration?: SimStaticIpProperties[];
}

/** Packet core control plane version resource. */
export interface PacketCoreControlPlaneVersion extends ProxyResource {
  /**
   * The provisioning state of the packet core control plane version resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The state of this packet core control plane version. */
  versionState?: VersionState;
  /** Indicates whether this is the recommended version to use for new packet core control plane deployments. */
  recommendedVersion?: RecommendedVersion;
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Unknown */
  Unknown = "Unknown",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Accepted */
  Accepted = "Accepted",
  /** Deleting */
  Deleting = "Deleting",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Deleted */
  Deleted = "Deleted"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Succeeded** \
 * **Accepted** \
 * **Deleting** \
 * **Failed** \
 * **Canceled** \
 * **Deleted**
 */
export type ProvisioningState = string;

/** Known values of {@link NaptEnabled} that the service accepts. */
export enum KnownNaptEnabled {
  /** NAPT is enabled */
  Enabled = "Enabled",
  /** NAPT is disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for NaptEnabled. \
 * {@link KnownNaptEnabled} can be used interchangeably with NaptEnabled,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: NAPT is enabled \
 * **Disabled**: NAPT is disabled
 */
export type NaptEnabled = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link SimState} that the service accepts. */
export enum KnownSimState {
  /** The SIM is disabled because not all configuration required for enabling is present. */
  Disabled = "Disabled",
  /** The SIM is enabled. */
  Enabled = "Enabled",
  /** The SIM cannot be enabled because some of the associated configuration is invalid. */
  Invalid = "Invalid"
}

/**
 * Defines values for SimState. \
 * {@link KnownSimState} can be used interchangeably with SimState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled**: The SIM is disabled because not all configuration required for enabling is present. \
 * **Enabled**: The SIM is enabled. \
 * **Invalid**: The SIM cannot be enabled because some of the associated configuration is invalid.
 */
export type SimState = string;

/** Known values of {@link PlatformType} that the service accepts. */
export enum KnownPlatformType {
  /** If this option is chosen, you must set one of "azureStackEdgeDevice", "connectedCluster" or "customLocation". If multiple are set then "customLocation" will take precedence over "connectedCluster" which takes precedence over "azureStackEdgeDevice". */
  AKSHCI = "AKS-HCI",
  /** If this option is chosen, you must set one of "connectedCluster" or "customLocation". If multiple are set then "customLocation" will take precedence over "connectedCluster". */
  BaseVM = "BaseVM"
}

/**
 * Defines values for PlatformType. \
 * {@link KnownPlatformType} can be used interchangeably with PlatformType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AKS-HCI**: If this option is chosen, you must set one of "azureStackEdgeDevice", "connectedCluster" or "customLocation". If multiple are set then "customLocation" will take precedence over "connectedCluster" which takes precedence over "azureStackEdgeDevice". \
 * **BaseVM**: If this option is chosen, you must set one of "connectedCluster" or "customLocation". If multiple are set then "customLocation" will take precedence over "connectedCluster".
 */
export type PlatformType = string;

/** Known values of {@link CoreNetworkType} that the service accepts. */
export enum KnownCoreNetworkType {
  /** 5G core */
  FiveGC = "5GC",
  /** EPC / 4G core */
  EPC = "EPC"
}

/**
 * Defines values for CoreNetworkType. \
 * {@link KnownCoreNetworkType} can be used interchangeably with CoreNetworkType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **5GC**: 5G core \
 * **EPC**: EPC \/ 4G core
 */
export type CoreNetworkType = string;

/** Known values of {@link BillingSku} that the service accepts. */
export enum KnownBillingSku {
  /** Evaluation package plan */
  EvaluationPackage = "EvaluationPackage",
  /** Flagship starter package plan */
  FlagshipStarterPackage = "FlagshipStarterPackage",
  /** Edge site 2Gbps plan */
  EdgeSite2Gbps = "EdgeSite2GBPS",
  /** Edge site 3Gbps plan */
  EdgeSite3Gbps = "EdgeSite3GBPS",
  /** Edge site 4Gbps plan */
  EdgeSite4Gbps = "EdgeSite4GBPS",
  /** Medium package plan */
  MediumPackage = "MediumPackage",
  /** Large package plan */
  LargePackage = "LargePackage"
}

/**
 * Defines values for BillingSku. \
 * {@link KnownBillingSku} can be used interchangeably with BillingSku,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EvaluationPackage**: Evaluation package plan \
 * **FlagshipStarterPackage**: Flagship starter package plan \
 * **EdgeSite2GBPS**: Edge site 2Gbps plan \
 * **EdgeSite3GBPS**: Edge site 3Gbps plan \
 * **EdgeSite4GBPS**: Edge site 4Gbps plan \
 * **MediumPackage**: Medium package plan \
 * **LargePackage**: Large package plan
 */
export type BillingSku = string;

/** Known values of {@link VersionState} that the service accepts. */
export enum KnownVersionState {
  /** The state of this version is unknown. */
  Unknown = "Unknown",
  /** This version is a preview and is not suitable for production use. */
  Preview = "Preview",
  /** This version is currently being validated. */
  Validating = "Validating",
  /** This version failed validation. */
  ValidationFailed = "ValidationFailed",
  /** This version is active and suitable for production use. */
  Active = "Active",
  /** This version is deprecated and is no longer supported. */
  Deprecated = "Deprecated"
}

/**
 * Defines values for VersionState. \
 * {@link KnownVersionState} can be used interchangeably with VersionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: The state of this version is unknown. \
 * **Preview**: This version is a preview and is not suitable for production use. \
 * **Validating**: This version is currently being validated. \
 * **ValidationFailed**: This version failed validation. \
 * **Active**: This version is active and suitable for production use. \
 * **Deprecated**: This version is deprecated and is no longer supported.
 */
export type VersionState = string;

/** Known values of {@link RecommendedVersion} that the service accepts. */
export enum KnownRecommendedVersion {
  /** This is the recommended version to use for new packet core control plane deployments. */
  Recommended = "Recommended",
  /** This is not the recommended version to use for new packet core control plane deployments. */
  NotRecommended = "NotRecommended"
}

/**
 * Defines values for RecommendedVersion. \
 * {@link KnownRecommendedVersion} can be used interchangeably with RecommendedVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Recommended**: This is the recommended version to use for new packet core control plane deployments. \
 * **NotRecommended**: This is not the recommended version to use for new packet core control plane deployments.
 */
export type RecommendedVersion = string;

/** Known values of {@link PreemptionCapability} that the service accepts. */
export enum KnownPreemptionCapability {
  /** Cannot preempt */
  NotPreempt = "NotPreempt",
  /** May preempt */
  MayPreempt = "MayPreempt"
}

/**
 * Defines values for PreemptionCapability. \
 * {@link KnownPreemptionCapability} can be used interchangeably with PreemptionCapability,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotPreempt**: Cannot preempt \
 * **MayPreempt**: May preempt
 */
export type PreemptionCapability = string;

/** Known values of {@link PreemptionVulnerability} that the service accepts. */
export enum KnownPreemptionVulnerability {
  /** Cannot be preempted */
  NotPreemptable = "NotPreemptable",
  /** May be preempted */
  Preemptable = "Preemptable"
}

/**
 * Defines values for PreemptionVulnerability. \
 * {@link KnownPreemptionVulnerability} can be used interchangeably with PreemptionVulnerability,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotPreemptable**: Cannot be preempted \
 * **Preemptable**: May be preempted
 */
export type PreemptionVulnerability = string;

/** Known values of {@link TrafficControlPermission} that the service accepts. */
export enum KnownTrafficControlPermission {
  /** Traffic matching this rule is allowed to flow. */
  Enabled = "Enabled",
  /** Traffic matching this rule is not allowed to flow. */
  Blocked = "Blocked"
}

/**
 * Defines values for TrafficControlPermission. \
 * {@link KnownTrafficControlPermission} can be used interchangeably with TrafficControlPermission,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: Traffic matching this rule is allowed to flow. \
 * **Blocked**: Traffic matching this rule is not allowed to flow.
 */
export type TrafficControlPermission = string;

/** Known values of {@link SdfDirection} that the service accepts. */
export enum KnownSdfDirection {
  /** Traffic flowing from the UE to the data network. */
  Uplink = "Uplink",
  /** Traffic flowing from the data network to the UE. */
  Downlink = "Downlink",
  /** Traffic flowing both to and from the UE. */
  Bidirectional = "Bidirectional"
}

/**
 * Defines values for SdfDirection. \
 * {@link KnownSdfDirection} can be used interchangeably with SdfDirection,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Uplink**: Traffic flowing from the UE to the data network. \
 * **Downlink**: Traffic flowing from the data network to the UE. \
 * **Bidirectional**: Traffic flowing both to and from the UE.
 */
export type SdfDirection = string;

/** Known values of {@link PduSessionType} that the service accepts. */
export enum KnownPduSessionType {
  /** IPv4 */
  IPv4 = "IPv4",
  /** IPv6 */
  IPv6 = "IPv6"
}

/**
 * Defines values for PduSessionType. \
 * {@link KnownPduSessionType} can be used interchangeably with PduSessionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPv4** \
 * **IPv6**
 */
export type PduSessionType = string;

/** Optional parameters. */
export interface AttachedDataNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface AttachedDataNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AttachedDataNetworksGetResponse = AttachedDataNetwork;

/** Optional parameters. */
export interface AttachedDataNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AttachedDataNetworksCreateOrUpdateResponse = AttachedDataNetwork;

/** Optional parameters. */
export interface AttachedDataNetworksUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type AttachedDataNetworksUpdateTagsResponse = AttachedDataNetwork;

/** Optional parameters. */
export interface AttachedDataNetworksListByPacketCoreDataPlaneOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreDataPlane operation. */
export type AttachedDataNetworksListByPacketCoreDataPlaneResponse = AttachedDataNetworkListResult;

/** Optional parameters. */
export interface AttachedDataNetworksListByPacketCoreDataPlaneNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreDataPlaneNext operation. */
export type AttachedDataNetworksListByPacketCoreDataPlaneNextResponse = AttachedDataNetworkListResult;

/** Optional parameters. */
export interface DataNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DataNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DataNetworksGetResponse = DataNetwork;

/** Optional parameters. */
export interface DataNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DataNetworksCreateOrUpdateResponse = DataNetwork;

/** Optional parameters. */
export interface DataNetworksUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type DataNetworksUpdateTagsResponse = DataNetwork;

/** Optional parameters. */
export interface DataNetworksListByMobileNetworkOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetwork operation. */
export type DataNetworksListByMobileNetworkResponse = DataNetworkListResult;

/** Optional parameters. */
export interface DataNetworksListByMobileNetworkNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetworkNext operation. */
export type DataNetworksListByMobileNetworkNextResponse = DataNetworkListResult;

/** Optional parameters. */
export interface MobileNetworksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface MobileNetworksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MobileNetworksGetResponse = MobileNetwork;

/** Optional parameters. */
export interface MobileNetworksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type MobileNetworksCreateOrUpdateResponse = MobileNetwork;

/** Optional parameters. */
export interface MobileNetworksUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type MobileNetworksUpdateTagsResponse = MobileNetwork;

/** Optional parameters. */
export interface MobileNetworksListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type MobileNetworksListBySubscriptionResponse = MobileNetworkListResult;

/** Optional parameters. */
export interface MobileNetworksListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type MobileNetworksListByResourceGroupResponse = MobileNetworkListResult;

/** Optional parameters. */
export interface MobileNetworksListSimIdsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the listSimIds operation. */
export type MobileNetworksListSimIdsResponse = SimIdListResult;

/** Optional parameters. */
export interface MobileNetworksListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type MobileNetworksListBySubscriptionNextResponse = MobileNetworkListResult;

/** Optional parameters. */
export interface MobileNetworksListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type MobileNetworksListByResourceGroupNextResponse = MobileNetworkListResult;

/** Optional parameters. */
export interface SitesDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SitesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SitesGetResponse = Site;

/** Optional parameters. */
export interface SitesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SitesCreateOrUpdateResponse = Site;

/** Optional parameters. */
export interface SitesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type SitesUpdateTagsResponse = Site;

/** Optional parameters. */
export interface SitesListByMobileNetworkOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetwork operation. */
export type SitesListByMobileNetworkResponse = SiteListResult;

/** Optional parameters. */
export interface SitesListByMobileNetworkNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetworkNext operation. */
export type SitesListByMobileNetworkNextResponse = SiteListResult;

/** Optional parameters. */
export interface SimGroupsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SimGroupsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SimGroupsGetResponse = SimGroup;

/** Optional parameters. */
export interface SimGroupsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SimGroupsCreateOrUpdateResponse = SimGroup;

/** Optional parameters. */
export interface SimGroupsUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type SimGroupsUpdateTagsResponse = SimGroup;

/** Optional parameters. */
export interface SimGroupsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type SimGroupsListBySubscriptionResponse = SimGroupListResult;

/** Optional parameters. */
export interface SimGroupsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type SimGroupsListByResourceGroupResponse = SimGroupListResult;

/** Optional parameters. */
export interface SimGroupsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type SimGroupsListBySubscriptionNextResponse = SimGroupListResult;

/** Optional parameters. */
export interface SimGroupsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type SimGroupsListByResourceGroupNextResponse = SimGroupListResult;

/** Optional parameters. */
export interface SimsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SimsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SimsGetResponse = Sim;

/** Optional parameters. */
export interface SimsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SimsCreateOrUpdateResponse = Sim;

/** Optional parameters. */
export interface SimsListBySimGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySimGroup operation. */
export type SimsListBySimGroupResponse = SimListResult;

/** Optional parameters. */
export interface SimsListBySimGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySimGroupNext operation. */
export type SimsListBySimGroupNextResponse = SimListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationList;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationList;

/** Optional parameters. */
export interface PacketCoreControlPlanesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PacketCoreControlPlanesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PacketCoreControlPlanesGetResponse = PacketCoreControlPlane;

/** Optional parameters. */
export interface PacketCoreControlPlanesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PacketCoreControlPlanesCreateOrUpdateResponse = PacketCoreControlPlane;

/** Optional parameters. */
export interface PacketCoreControlPlanesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type PacketCoreControlPlanesUpdateTagsResponse = PacketCoreControlPlane;

/** Optional parameters. */
export interface PacketCoreControlPlanesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type PacketCoreControlPlanesListBySubscriptionResponse = PacketCoreControlPlaneListResult;

/** Optional parameters. */
export interface PacketCoreControlPlanesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type PacketCoreControlPlanesListByResourceGroupResponse = PacketCoreControlPlaneListResult;

/** Optional parameters. */
export interface PacketCoreControlPlanesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type PacketCoreControlPlanesListBySubscriptionNextResponse = PacketCoreControlPlaneListResult;

/** Optional parameters. */
export interface PacketCoreControlPlanesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type PacketCoreControlPlanesListByResourceGroupNextResponse = PacketCoreControlPlaneListResult;

/** Optional parameters. */
export interface PacketCoreControlPlaneVersionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PacketCoreControlPlaneVersionsGetResponse = PacketCoreControlPlaneVersion;

/** Optional parameters. */
export interface PacketCoreControlPlaneVersionsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type PacketCoreControlPlaneVersionsListByResourceGroupResponse = PacketCoreControlPlaneVersionListResult;

/** Optional parameters. */
export interface PacketCoreControlPlaneVersionsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type PacketCoreControlPlaneVersionsListByResourceGroupNextResponse = PacketCoreControlPlaneVersionListResult;

/** Optional parameters. */
export interface PacketCoreDataPlanesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PacketCoreDataPlanesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PacketCoreDataPlanesGetResponse = PacketCoreDataPlane;

/** Optional parameters. */
export interface PacketCoreDataPlanesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PacketCoreDataPlanesCreateOrUpdateResponse = PacketCoreDataPlane;

/** Optional parameters. */
export interface PacketCoreDataPlanesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type PacketCoreDataPlanesUpdateTagsResponse = PacketCoreDataPlane;

/** Optional parameters. */
export interface PacketCoreDataPlanesListByPacketCoreControlPlaneOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreControlPlane operation. */
export type PacketCoreDataPlanesListByPacketCoreControlPlaneResponse = PacketCoreDataPlaneListResult;

/** Optional parameters. */
export interface PacketCoreDataPlanesListByPacketCoreControlPlaneNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByPacketCoreControlPlaneNext operation. */
export type PacketCoreDataPlanesListByPacketCoreControlPlaneNextResponse = PacketCoreDataPlaneListResult;

/** Optional parameters. */
export interface ServicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServicesGetResponse = Service;

/** Optional parameters. */
export interface ServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ServicesCreateOrUpdateResponse = Service;

/** Optional parameters. */
export interface ServicesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type ServicesUpdateTagsResponse = Service;

/** Optional parameters. */
export interface ServicesListByMobileNetworkOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetwork operation. */
export type ServicesListByMobileNetworkResponse = ServiceListResult;

/** Optional parameters. */
export interface ServicesListByMobileNetworkNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetworkNext operation. */
export type ServicesListByMobileNetworkNextResponse = ServiceListResult;

/** Optional parameters. */
export interface SimPoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SimPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SimPoliciesGetResponse = SimPolicy;

/** Optional parameters. */
export interface SimPoliciesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SimPoliciesCreateOrUpdateResponse = SimPolicy;

/** Optional parameters. */
export interface SimPoliciesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type SimPoliciesUpdateTagsResponse = SimPolicy;

/** Optional parameters. */
export interface SimPoliciesListByMobileNetworkOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetwork operation. */
export type SimPoliciesListByMobileNetworkResponse = SimPolicyListResult;

/** Optional parameters. */
export interface SimPoliciesListByMobileNetworkNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetworkNext operation. */
export type SimPoliciesListByMobileNetworkNextResponse = SimPolicyListResult;

/** Optional parameters. */
export interface SlicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SlicesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SlicesGetResponse = Slice;

/** Optional parameters. */
export interface SlicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SlicesCreateOrUpdateResponse = Slice;

/** Optional parameters. */
export interface SlicesUpdateTagsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateTags operation. */
export type SlicesUpdateTagsResponse = Slice;

/** Optional parameters. */
export interface SlicesListByMobileNetworkOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetwork operation. */
export type SlicesListByMobileNetworkResponse = SliceListResult;

/** Optional parameters. */
export interface SlicesListByMobileNetworkNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByMobileNetworkNext operation. */
export type SlicesListByMobileNetworkNextResponse = SliceListResult;

/** Optional parameters. */
export interface MobileNetworkManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
