/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  PacketCoreControlPlaneRollbackOptionalParams,
  PacketCoreControlPlaneRollbackResponse,
  PacketCoreControlPlaneReinstallOptionalParams,
  PacketCoreControlPlaneReinstallResponse,
  PacketCoreControlPlaneCollectDiagnosticsPackage,
  PacketCoreControlPlaneCollectDiagnosticsPackageOptionalParams,
  PacketCoreControlPlaneCollectDiagnosticsPackageResponse
} from "../models";

/** Interface representing a PacketCoreControlPlaneOperations. */
export interface PacketCoreControlPlaneOperations {
  /**
   * Roll back the specified packet core control plane to the previous version, "rollbackVersion".
   * Multiple consecutive rollbacks are not possible. This action may cause a service outage.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param options The options parameters.
   */
  beginRollback(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    options?: PacketCoreControlPlaneRollbackOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<PacketCoreControlPlaneRollbackResponse>,
      PacketCoreControlPlaneRollbackResponse
    >
  >;
  /**
   * Roll back the specified packet core control plane to the previous version, "rollbackVersion".
   * Multiple consecutive rollbacks are not possible. This action may cause a service outage.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param options The options parameters.
   */
  beginRollbackAndWait(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    options?: PacketCoreControlPlaneRollbackOptionalParams
  ): Promise<PacketCoreControlPlaneRollbackResponse>;
  /**
   * Reinstall the specified packet core control plane. This action will remove any transaction state
   * from the packet core to return it to a known state. This action will cause a service outage.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param options The options parameters.
   */
  beginReinstall(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    options?: PacketCoreControlPlaneReinstallOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<PacketCoreControlPlaneReinstallResponse>,
      PacketCoreControlPlaneReinstallResponse
    >
  >;
  /**
   * Reinstall the specified packet core control plane. This action will remove any transaction state
   * from the packet core to return it to a known state. This action will cause a service outage.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param options The options parameters.
   */
  beginReinstallAndWait(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    options?: PacketCoreControlPlaneReinstallOptionalParams
  ): Promise<PacketCoreControlPlaneReinstallResponse>;
  /**
   * Collect a diagnostics package for the specified packet core control plane. This action will upload
   * the diagnostics to a storage account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param parameters Parameters supplied to the packet core control plane collect diagnostics package
   *                   operation.
   * @param options The options parameters.
   */
  beginCollectDiagnosticsPackage(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    parameters: PacketCoreControlPlaneCollectDiagnosticsPackage,
    options?: PacketCoreControlPlaneCollectDiagnosticsPackageOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        PacketCoreControlPlaneCollectDiagnosticsPackageResponse
      >,
      PacketCoreControlPlaneCollectDiagnosticsPackageResponse
    >
  >;
  /**
   * Collect a diagnostics package for the specified packet core control plane. This action will upload
   * the diagnostics to a storage account.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param packetCoreControlPlaneName The name of the packet core control plane.
   * @param parameters Parameters supplied to the packet core control plane collect diagnostics package
   *                   operation.
   * @param options The options parameters.
   */
  beginCollectDiagnosticsPackageAndWait(
    resourceGroupName: string,
    packetCoreControlPlaneName: string,
    parameters: PacketCoreControlPlaneCollectDiagnosticsPackage,
    options?: PacketCoreControlPlaneCollectDiagnosticsPackageOptionalParams
  ): Promise<PacketCoreControlPlaneCollectDiagnosticsPackageResponse>;
}
