/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  RecorderStartOptions,
  delay,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { Context } from "mocha";
import { MobileNetworkManagementClient } from "../src/mobileNetworkManagementClient";

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "88888888-8888-8888-8888-888888888888"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("MobileNetwork test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: MobileNetworkManagementClient;
  let location: string;
  let resourceGroup: string;
  let resourcename: string;

  beforeEach(async function (this: Context) {
    recorder = new Recorder(this.currentTest);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new MobileNetworkManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
    location = "eastus";
    resourceGroup = "myjstest";
    resourcename = "resourcetest";

  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("mobileNetworks create test", async function () {
    const res = await client.mobileNetworks.beginCreateOrUpdateAndWait(
      resourceGroup,
      resourcename,
      {
        location,
        publicLandMobileNetworkIdentifier: { mcc: "001", mnc: "01" }
      },
      testPollingOptions);
    assert.equal(res.name, resourcename);
  });

  it("mobileNetworks get test", async function () {
    const res = await client.mobileNetworks.get(resourceGroup,
      resourcename);
    assert.equal(res.name, resourcename);
  });

  it("mobileNetworks list test", async function () {
    const resArray = new Array();
    for await (let item of client.mobileNetworks.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("mobileNetworks delete test", async function () {
    const resArray = new Array();
    const res = await client.mobileNetworks.beginDeleteAndWait(resourceGroup, resourcename
    )
    for await (let item of client.mobileNetworks.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("operation list test", async function () {
    const resArray = new Array();
    for await (let item of client.operations.list()) {
      resArray.push(item);
    }
    assert.notEqual(resArray.length, 0);
  });
})
