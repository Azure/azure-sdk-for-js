/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/sqlManagedInstancesMappers";
import * as Parameters from "../models/parameters";
import { AzureArcDataManagementClientContext } from "../azureArcDataManagementClientContext";

/** Class representing a SqlManagedInstances. */
export class SqlManagedInstances {
  private readonly client: AzureArcDataManagementClientContext;

  /**
   * Create a SqlManagedInstances.
   * @param {AzureArcDataManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureArcDataManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary List sqlManagedInstance resources in the subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlManagedInstancesListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.SqlManagedInstancesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.SqlManagedInstanceListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlManagedInstanceListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlManagedInstanceListResult>, callback?: msRest.ServiceCallback<Models.SqlManagedInstanceListResult>): Promise<Models.SqlManagedInstancesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SqlManagedInstancesListResponse>;
  }

  /**
   * Gets all sqlManagedInstances in a resource group.
   * @summary List sqlManagedInstance resources in the resource group
   * @param resourceGroupName The name of the Azure resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlManagedInstancesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.SqlManagedInstancesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.SqlManagedInstanceListResult>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlManagedInstanceListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlManagedInstanceListResult>, callback?: msRest.ServiceCallback<Models.SqlManagedInstanceListResult>): Promise<Models.SqlManagedInstancesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.SqlManagedInstancesListByResourceGroupResponse>;
  }

  /**
   * Retrieves a SQL Managed Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlManagedInstanceName Name of SQL Managed Instance
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlManagedInstancesGetResponse>
   */
  get(resourceGroupName: string, sqlManagedInstanceName: string, options?: msRest.RequestOptionsBase): Promise<Models.SqlManagedInstancesGetResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlManagedInstanceName Name of SQL Managed Instance
   * @param callback The callback
   */
  get(resourceGroupName: string, sqlManagedInstanceName: string, callback: msRest.ServiceCallback<Models.SqlManagedInstance>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlManagedInstanceName Name of SQL Managed Instance
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, sqlManagedInstanceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlManagedInstance>): void;
  get(resourceGroupName: string, sqlManagedInstanceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlManagedInstance>, callback?: msRest.ServiceCallback<Models.SqlManagedInstance>): Promise<Models.SqlManagedInstancesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlManagedInstanceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SqlManagedInstancesGetResponse>;
  }

  /**
   * Creates or replaces a SQL Managed Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlManagedInstanceName The name of SQL Managed Instances
   * @param sqlManagedInstance The SQL Managed Instance to be created or updated.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlManagedInstancesCreateResponse>
   */
  create(resourceGroupName: string, sqlManagedInstanceName: string, sqlManagedInstance: Models.SqlManagedInstance, options?: msRest.RequestOptionsBase): Promise<Models.SqlManagedInstancesCreateResponse> {
    return this.beginCreate(resourceGroupName,sqlManagedInstanceName,sqlManagedInstance,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SqlManagedInstancesCreateResponse>;
  }

  /**
   * Deletes a SQL Managed Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlManagedInstanceName The name of Sql Managed Instances
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, sqlManagedInstanceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlManagedInstanceName The name of Sql Managed Instances
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, sqlManagedInstanceName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlManagedInstanceName The name of Sql Managed Instances
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, sqlManagedInstanceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, sqlManagedInstanceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlManagedInstanceName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates a SQL Managed Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlManagedInstanceName Name of sqlManagedInstance
   * @param parameters The SQL Managed Instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlManagedInstancesUpdateResponse>
   */
  update(resourceGroupName: string, sqlManagedInstanceName: string, parameters: Models.SqlManagedInstanceUpdate, options?: msRest.RequestOptionsBase): Promise<Models.SqlManagedInstancesUpdateResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlManagedInstanceName Name of sqlManagedInstance
   * @param parameters The SQL Managed Instance.
   * @param callback The callback
   */
  update(resourceGroupName: string, sqlManagedInstanceName: string, parameters: Models.SqlManagedInstanceUpdate, callback: msRest.ServiceCallback<Models.SqlManagedInstance>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlManagedInstanceName Name of sqlManagedInstance
   * @param parameters The SQL Managed Instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, sqlManagedInstanceName: string, parameters: Models.SqlManagedInstanceUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlManagedInstance>): void;
  update(resourceGroupName: string, sqlManagedInstanceName: string, parameters: Models.SqlManagedInstanceUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlManagedInstance>, callback?: msRest.ServiceCallback<Models.SqlManagedInstance>): Promise<Models.SqlManagedInstancesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlManagedInstanceName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.SqlManagedInstancesUpdateResponse>;
  }

  /**
   * Creates or replaces a SQL Managed Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlManagedInstanceName The name of SQL Managed Instances
   * @param sqlManagedInstance The SQL Managed Instance to be created or updated.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, sqlManagedInstanceName: string, sqlManagedInstance: Models.SqlManagedInstance, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        sqlManagedInstanceName,
        sqlManagedInstance,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * @summary List sqlManagedInstance resources in the subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlManagedInstancesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SqlManagedInstancesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SqlManagedInstanceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlManagedInstanceListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlManagedInstanceListResult>, callback?: msRest.ServiceCallback<Models.SqlManagedInstanceListResult>): Promise<Models.SqlManagedInstancesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.SqlManagedInstancesListNextResponse>;
  }

  /**
   * Gets all sqlManagedInstances in a resource group.
   * @summary List sqlManagedInstance resources in the resource group
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlManagedInstancesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SqlManagedInstancesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SqlManagedInstanceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlManagedInstanceListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlManagedInstanceListResult>, callback?: msRest.ServiceCallback<Models.SqlManagedInstanceListResult>): Promise<Models.SqlManagedInstancesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.SqlManagedInstancesListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/sqlManagedInstances",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlManagedInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlManagedInstances",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlManagedInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlManagedInstances/{sqlManagedInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlManagedInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlManagedInstance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlManagedInstances/{sqlManagedInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlManagedInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlManagedInstances/{sqlManagedInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlManagedInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SqlManagedInstanceUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlManagedInstance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlManagedInstances/{sqlManagedInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlManagedInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "sqlManagedInstance",
    mapper: {
      ...Mappers.SqlManagedInstance,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlManagedInstance
    },
    201: {
      bodyMapper: Mappers.SqlManagedInstance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlManagedInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlManagedInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
