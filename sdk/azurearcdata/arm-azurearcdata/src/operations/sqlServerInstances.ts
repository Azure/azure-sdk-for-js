/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/sqlServerInstancesMappers";
import * as Parameters from "../models/parameters";
import { AzureArcDataManagementClientContext } from "../azureArcDataManagementClientContext";

/** Class representing a SqlServerInstances. */
export class SqlServerInstances {
  private readonly client: AzureArcDataManagementClientContext;

  /**
   * Create a SqlServerInstances.
   * @param {AzureArcDataManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureArcDataManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary List sqlServerInstance resources in the subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlServerInstancesListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.SqlServerInstancesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.SqlServerInstanceListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlServerInstanceListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlServerInstanceListResult>, callback?: msRest.ServiceCallback<Models.SqlServerInstanceListResult>): Promise<Models.SqlServerInstancesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SqlServerInstancesListResponse>;
  }

  /**
   * Gets all sqlServerInstances in a resource group.
   * @summary List sqlServerInstance resources in the resource group
   * @param resourceGroupName The name of the Azure resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlServerInstancesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.SqlServerInstancesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.SqlServerInstanceListResult>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlServerInstanceListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlServerInstanceListResult>, callback?: msRest.ServiceCallback<Models.SqlServerInstanceListResult>): Promise<Models.SqlServerInstancesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.SqlServerInstancesListByResourceGroupResponse>;
  }

  /**
   * Retrieves a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlServerInstancesGetResponse>
   */
  get(resourceGroupName: string, sqlServerInstanceName: string, options?: msRest.RequestOptionsBase): Promise<Models.SqlServerInstancesGetResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param callback The callback
   */
  get(resourceGroupName: string, sqlServerInstanceName: string, callback: msRest.ServiceCallback<Models.SqlServerInstance>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of SQL Server Instance
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, sqlServerInstanceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlServerInstance>): void;
  get(resourceGroupName: string, sqlServerInstanceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlServerInstance>, callback?: msRest.ServiceCallback<Models.SqlServerInstance>): Promise<Models.SqlServerInstancesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SqlServerInstancesGetResponse>;
  }

  /**
   * Creates or replaces a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName The name of SQL Server Instance
   * @param sqlServerInstance The SQL Server Instance to be created or updated.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlServerInstancesCreateResponse>
   */
  create(resourceGroupName: string, sqlServerInstanceName: string, sqlServerInstance: Models.SqlServerInstance, options?: msRest.RequestOptionsBase): Promise<Models.SqlServerInstancesCreateResponse> {
    return this.beginCreate(resourceGroupName,sqlServerInstanceName,sqlServerInstance,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SqlServerInstancesCreateResponse>;
  }

  /**
   * Deletes a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName The name of SQL Server Instance
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, sqlServerInstanceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName The name of SQL Server Instance
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, sqlServerInstanceName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName The name of SQL Server Instance
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, sqlServerInstanceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, sqlServerInstanceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of sqlServerInstance
   * @param parameters The SQL Server Instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlServerInstancesUpdateResponse>
   */
  update(resourceGroupName: string, sqlServerInstanceName: string, parameters: Models.SqlServerInstanceUpdate, options?: msRest.RequestOptionsBase): Promise<Models.SqlServerInstancesUpdateResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of sqlServerInstance
   * @param parameters The SQL Server Instance.
   * @param callback The callback
   */
  update(resourceGroupName: string, sqlServerInstanceName: string, parameters: Models.SqlServerInstanceUpdate, callback: msRest.ServiceCallback<Models.SqlServerInstance>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName Name of sqlServerInstance
   * @param parameters The SQL Server Instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, sqlServerInstanceName: string, parameters: Models.SqlServerInstanceUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlServerInstance>): void;
  update(resourceGroupName: string, sqlServerInstanceName: string, parameters: Models.SqlServerInstanceUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlServerInstance>, callback?: msRest.ServiceCallback<Models.SqlServerInstance>): Promise<Models.SqlServerInstancesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.SqlServerInstancesUpdateResponse>;
  }

  /**
   * Creates or replaces a SQL Server Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param sqlServerInstanceName The name of SQL Server Instance
   * @param sqlServerInstance The SQL Server Instance to be created or updated.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, sqlServerInstanceName: string, sqlServerInstance: Models.SqlServerInstance, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        sqlServerInstanceName,
        sqlServerInstance,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * @summary List sqlServerInstance resources in the subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlServerInstancesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SqlServerInstancesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SqlServerInstanceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlServerInstanceListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlServerInstanceListResult>, callback?: msRest.ServiceCallback<Models.SqlServerInstanceListResult>): Promise<Models.SqlServerInstancesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.SqlServerInstancesListNextResponse>;
  }

  /**
   * Gets all sqlServerInstances in a resource group.
   * @summary List sqlServerInstance resources in the resource group
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SqlServerInstancesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SqlServerInstancesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SqlServerInstanceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SqlServerInstanceListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SqlServerInstanceListResult>, callback?: msRest.ServiceCallback<Models.SqlServerInstanceListResult>): Promise<Models.SqlServerInstancesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.SqlServerInstancesListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/sqlServerInstances",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SqlServerInstanceUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/sqlServerInstances/{sqlServerInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.sqlServerInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "sqlServerInstance",
    mapper: {
      ...Mappers.SqlServerInstance,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstance
    },
    201: {
      bodyMapper: Mappers.SqlServerInstance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SqlServerInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
