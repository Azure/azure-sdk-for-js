/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/postgresInstancesMappers";
import * as Parameters from "../models/parameters";
import { AzureArcDataManagementClientContext } from "../azureArcDataManagementClientContext";

/** Class representing a PostgresInstances. */
export class PostgresInstances {
  private readonly client: AzureArcDataManagementClientContext;

  /**
   * Create a PostgresInstances.
   * @param {AzureArcDataManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureArcDataManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary List postgres Instance resources in the subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.PostgresInstancesListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.PostgresInstancesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.PostgresInstanceListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PostgresInstanceListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PostgresInstanceListResult>, callback?: msRest.ServiceCallback<Models.PostgresInstanceListResult>): Promise<Models.PostgresInstancesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PostgresInstancesListResponse>;
  }

  /**
   * Get a postgres Instances list by Resource group name.
   * @summary List postgres Instance resources in the resource group
   * @param resourceGroupName The name of the Azure resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.PostgresInstancesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.PostgresInstancesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PostgresInstanceListResult>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PostgresInstanceListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PostgresInstanceListResult>, callback?: msRest.ServiceCallback<Models.PostgresInstanceListResult>): Promise<Models.PostgresInstancesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.PostgresInstancesListByResourceGroupResponse>;
  }

  /**
   * Retrieves a postgres Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of Postgres Instance
   * @param [options] The optional parameters
   * @returns Promise<Models.PostgresInstancesGetResponse>
   */
  get(resourceGroupName: string, postgresInstanceName: string, options?: msRest.RequestOptionsBase): Promise<Models.PostgresInstancesGetResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of Postgres Instance
   * @param callback The callback
   */
  get(resourceGroupName: string, postgresInstanceName: string, callback: msRest.ServiceCallback<Models.PostgresInstance>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of Postgres Instance
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, postgresInstanceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PostgresInstance>): void;
  get(resourceGroupName: string, postgresInstanceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PostgresInstance>, callback?: msRest.ServiceCallback<Models.PostgresInstance>): Promise<Models.PostgresInstancesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        postgresInstanceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PostgresInstancesGetResponse>;
  }

  /**
   * Creates or replaces a postgres Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of PostgresInstance
   * @param resource The postgres instance
   * @param [options] The optional parameters
   * @returns Promise<Models.PostgresInstancesCreateResponse>
   */
  create(resourceGroupName: string, postgresInstanceName: string, resource: Models.PostgresInstance, options?: msRest.RequestOptionsBase): Promise<Models.PostgresInstancesCreateResponse> {
    return this.beginCreate(resourceGroupName,postgresInstanceName,resource,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PostgresInstancesCreateResponse>;
  }

  /**
   * Deletes a postgres Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of Postgres Instance
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, postgresInstanceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of Postgres Instance
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, postgresInstanceName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of Postgres Instance
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, postgresInstanceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, postgresInstanceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        postgresInstanceName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates a postgres Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of Postgres Instance
   * @param parameters The Postgres Instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.PostgresInstancesUpdateResponse>
   */
  update(resourceGroupName: string, postgresInstanceName: string, parameters: Models.PostgresInstanceUpdate, options?: msRest.RequestOptionsBase): Promise<Models.PostgresInstancesUpdateResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of Postgres Instance
   * @param parameters The Postgres Instance.
   * @param callback The callback
   */
  update(resourceGroupName: string, postgresInstanceName: string, parameters: Models.PostgresInstanceUpdate, callback: msRest.ServiceCallback<Models.PostgresInstance>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of Postgres Instance
   * @param parameters The Postgres Instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, postgresInstanceName: string, parameters: Models.PostgresInstanceUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PostgresInstance>): void;
  update(resourceGroupName: string, postgresInstanceName: string, parameters: Models.PostgresInstanceUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PostgresInstance>, callback?: msRest.ServiceCallback<Models.PostgresInstance>): Promise<Models.PostgresInstancesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        postgresInstanceName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.PostgresInstancesUpdateResponse>;
  }

  /**
   * Creates or replaces a postgres Instance resource
   * @param resourceGroupName The name of the Azure resource group
   * @param postgresInstanceName Name of PostgresInstance
   * @param resource The postgres instance
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, postgresInstanceName: string, resource: Models.PostgresInstance, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        postgresInstanceName,
        resource,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * @summary List postgres Instance resources in the subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PostgresInstancesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PostgresInstancesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PostgresInstanceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PostgresInstanceListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PostgresInstanceListResult>, callback?: msRest.ServiceCallback<Models.PostgresInstanceListResult>): Promise<Models.PostgresInstancesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.PostgresInstancesListNextResponse>;
  }

  /**
   * Get a postgres Instances list by Resource group name.
   * @summary List postgres Instance resources in the resource group
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PostgresInstancesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PostgresInstancesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PostgresInstanceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PostgresInstanceListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PostgresInstanceListResult>, callback?: msRest.ServiceCallback<Models.PostgresInstanceListResult>): Promise<Models.PostgresInstancesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.PostgresInstancesListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/postgresInstances",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PostgresInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/postgresInstances",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PostgresInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/postgresInstances/{postgresInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.postgresInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PostgresInstance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/postgresInstances/{postgresInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.postgresInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/postgresInstances/{postgresInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.postgresInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PostgresInstanceUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PostgresInstance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/postgresInstances/{postgresInstanceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.postgresInstanceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "resource",
    mapper: {
      ...Mappers.PostgresInstance,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PostgresInstance
    },
    201: {
      bodyMapper: Mappers.PostgresInstance
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PostgresInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PostgresInstanceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
