/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DataControllers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureArcDataManagementClient } from "../azureArcDataManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  DataControllerResource,
  DataControllersListInSubscriptionNextOptionalParams,
  DataControllersListInSubscriptionOptionalParams,
  DataControllersListInGroupNextOptionalParams,
  DataControllersListInGroupOptionalParams,
  DataControllersListInSubscriptionResponse,
  DataControllersListInGroupResponse,
  DataControllersPutDataControllerOptionalParams,
  DataControllersPutDataControllerResponse,
  DataControllersDeleteDataControllerOptionalParams,
  DataControllersGetDataControllerOptionalParams,
  DataControllersGetDataControllerResponse,
  DataControllerUpdate,
  DataControllersPatchDataControllerOptionalParams,
  DataControllersPatchDataControllerResponse,
  DataControllersListInSubscriptionNextResponse,
  DataControllersListInGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DataControllers operations. */
export class DataControllersImpl implements DataControllers {
  private readonly client: AzureArcDataManagementClient;

  /**
   * Initialize a new instance of the class DataControllers class.
   * @param client Reference to the service client
   */
  constructor(client: AzureArcDataManagementClient) {
    this.client = client;
  }

  /**
   * List dataController resources in the subscription
   * @param options The options parameters.
   */
  public listInSubscription(
    options?: DataControllersListInSubscriptionOptionalParams
  ): PagedAsyncIterableIterator<DataControllerResource> {
    const iter = this.listInSubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listInSubscriptionPagingPage(options);
      }
    };
  }

  private async *listInSubscriptionPagingPage(
    options?: DataControllersListInSubscriptionOptionalParams
  ): AsyncIterableIterator<DataControllerResource[]> {
    let result = await this._listInSubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listInSubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listInSubscriptionPagingAll(
    options?: DataControllersListInSubscriptionOptionalParams
  ): AsyncIterableIterator<DataControllerResource> {
    for await (const page of this.listInSubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List dataController resources in the resource group
   * @param resourceGroupName The name of the Azure resource group
   * @param options The options parameters.
   */
  public listInGroup(
    resourceGroupName: string,
    options?: DataControllersListInGroupOptionalParams
  ): PagedAsyncIterableIterator<DataControllerResource> {
    const iter = this.listInGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listInGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listInGroupPagingPage(
    resourceGroupName: string,
    options?: DataControllersListInGroupOptionalParams
  ): AsyncIterableIterator<DataControllerResource[]> {
    let result = await this._listInGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listInGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listInGroupPagingAll(
    resourceGroupName: string,
    options?: DataControllersListInGroupOptionalParams
  ): AsyncIterableIterator<DataControllerResource> {
    for await (const page of this.listInGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List dataController resources in the subscription
   * @param options The options parameters.
   */
  private _listInSubscription(
    options?: DataControllersListInSubscriptionOptionalParams
  ): Promise<DataControllersListInSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listInSubscriptionOperationSpec
    );
  }

  /**
   * List dataController resources in the resource group
   * @param resourceGroupName The name of the Azure resource group
   * @param options The options parameters.
   */
  private _listInGroup(
    resourceGroupName: string,
    options?: DataControllersListInGroupOptionalParams
  ): Promise<DataControllersListInGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listInGroupOperationSpec
    );
  }

  /**
   * Creates or replaces a dataController resource
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param dataControllerResource desc
   * @param options The options parameters.
   */
  async beginPutDataController(
    resourceGroupName: string,
    dataControllerName: string,
    dataControllerResource: DataControllerResource,
    options?: DataControllersPutDataControllerOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DataControllersPutDataControllerResponse>,
      DataControllersPutDataControllerResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DataControllersPutDataControllerResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        dataControllerName,
        dataControllerResource,
        options
      },
      putDataControllerOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
  }

  /**
   * Creates or replaces a dataController resource
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param dataControllerResource desc
   * @param options The options parameters.
   */
  async beginPutDataControllerAndWait(
    resourceGroupName: string,
    dataControllerName: string,
    dataControllerResource: DataControllerResource,
    options?: DataControllersPutDataControllerOptionalParams
  ): Promise<DataControllersPutDataControllerResponse> {
    const poller = await this.beginPutDataController(
      resourceGroupName,
      dataControllerName,
      dataControllerResource,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a dataController resource
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param options The options parameters.
   */
  async beginDeleteDataController(
    resourceGroupName: string,
    dataControllerName: string,
    options?: DataControllersDeleteDataControllerOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, dataControllerName, options },
      deleteDataControllerOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Deletes a dataController resource
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param options The options parameters.
   */
  async beginDeleteDataControllerAndWait(
    resourceGroupName: string,
    dataControllerName: string,
    options?: DataControllersDeleteDataControllerOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeleteDataController(
      resourceGroupName,
      dataControllerName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Retrieves a dataController resource
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param options The options parameters.
   */
  getDataController(
    resourceGroupName: string,
    dataControllerName: string,
    options?: DataControllersGetDataControllerOptionalParams
  ): Promise<DataControllersGetDataControllerResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, dataControllerName, options },
      getDataControllerOperationSpec
    );
  }

  /**
   * Updates a dataController resource
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param dataControllerResource The update data controller resource
   * @param options The options parameters.
   */
  patchDataController(
    resourceGroupName: string,
    dataControllerName: string,
    dataControllerResource: DataControllerUpdate,
    options?: DataControllersPatchDataControllerOptionalParams
  ): Promise<DataControllersPatchDataControllerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataControllerName,
        dataControllerResource,
        options
      },
      patchDataControllerOperationSpec
    );
  }

  /**
   * ListInSubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListInSubscription method.
   * @param options The options parameters.
   */
  private _listInSubscriptionNext(
    nextLink: string,
    options?: DataControllersListInSubscriptionNextOptionalParams
  ): Promise<DataControllersListInSubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listInSubscriptionNextOperationSpec
    );
  }

  /**
   * ListInGroupNext
   * @param resourceGroupName The name of the Azure resource group
   * @param nextLink The nextLink from the previous successful call to the ListInGroup method.
   * @param options The options parameters.
   */
  private _listInGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DataControllersListInGroupNextOptionalParams
  ): Promise<DataControllersListInGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listInGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listInSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/dataControllers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageOfDataControllerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listInGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageOfDataControllerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const putDataControllerOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DataControllerResource
    },
    201: {
      bodyMapper: Mappers.DataControllerResource
    },
    202: {
      bodyMapper: Mappers.DataControllerResource
    },
    204: {
      bodyMapper: Mappers.DataControllerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.dataControllerResource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataControllerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteDataControllerOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataControllerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDataControllerOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataControllerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataControllerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const patchDataControllerOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DataControllerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.dataControllerResource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataControllerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listInSubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageOfDataControllerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listInGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PageOfDataControllerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
