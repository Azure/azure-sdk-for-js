/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/dataControllersMappers";
import * as Parameters from "../models/parameters";
import { AzureArcDataManagementClientContext } from "../azureArcDataManagementClientContext";

/** Class representing a DataControllers. */
export class DataControllers {
  private readonly client: AzureArcDataManagementClientContext;

  /**
   * Create a DataControllers.
   * @param {AzureArcDataManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureArcDataManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary List dataController resources in the subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.DataControllersListInSubscriptionResponse>
   */
  listInSubscription(options?: msRest.RequestOptionsBase): Promise<Models.DataControllersListInSubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listInSubscription(callback: msRest.ServiceCallback<Models.PageOfDataControllerResource>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listInSubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PageOfDataControllerResource>): void;
  listInSubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PageOfDataControllerResource>, callback?: msRest.ServiceCallback<Models.PageOfDataControllerResource>): Promise<Models.DataControllersListInSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listInSubscriptionOperationSpec,
      callback) as Promise<Models.DataControllersListInSubscriptionResponse>;
  }

  /**
   * @summary List dataController resources in the resource group
   * @param resourceGroupName The name of the Azure resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.DataControllersListInGroupResponse>
   */
  listInGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DataControllersListInGroupResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param callback The callback
   */
  listInGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PageOfDataControllerResource>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  listInGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PageOfDataControllerResource>): void;
  listInGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PageOfDataControllerResource>, callback?: msRest.ServiceCallback<Models.PageOfDataControllerResource>): Promise<Models.DataControllersListInGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listInGroupOperationSpec,
      callback) as Promise<Models.DataControllersListInGroupResponse>;
  }

  /**
   * Creates or replaces a dataController resource
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerResource desc
   * @param dataControllerName
   * @param [options] The optional parameters
   * @returns Promise<Models.DataControllersPutDataControllerResponse>
   */
  putDataController(resourceGroupName: string, dataControllerResource: Models.DataControllerResource, dataControllerName: string, options?: msRest.RequestOptionsBase): Promise<Models.DataControllersPutDataControllerResponse> {
    return this.beginPutDataController(resourceGroupName,dataControllerResource,dataControllerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DataControllersPutDataControllerResponse>;
  }

  /**
   * Deletes a dataController resource
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteDataController(resourceGroupName: string, dataControllerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param callback The callback
   */
  deleteDataController(resourceGroupName: string, dataControllerName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteDataController(resourceGroupName: string, dataControllerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteDataController(resourceGroupName: string, dataControllerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataControllerName,
        options
      },
      deleteDataControllerOperationSpec,
      callback);
  }

  /**
   * Retrieves a dataController resource
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param [options] The optional parameters
   * @returns Promise<Models.DataControllersGetDataControllerResponse>
   */
  getDataController(resourceGroupName: string, dataControllerName: string, options?: msRest.RequestOptionsBase): Promise<Models.DataControllersGetDataControllerResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param callback The callback
   */
  getDataController(resourceGroupName: string, dataControllerName: string, callback: msRest.ServiceCallback<Models.DataControllerResource>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param options The optional parameters
   * @param callback The callback
   */
  getDataController(resourceGroupName: string, dataControllerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataControllerResource>): void;
  getDataController(resourceGroupName: string, dataControllerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataControllerResource>, callback?: msRest.ServiceCallback<Models.DataControllerResource>): Promise<Models.DataControllersGetDataControllerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataControllerName,
        options
      },
      getDataControllerOperationSpec,
      callback) as Promise<Models.DataControllersGetDataControllerResponse>;
  }

  /**
   * Updates a dataController resource
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param dataControllerResource The update data controller resource
   * @param [options] The optional parameters
   * @returns Promise<Models.DataControllersPatchDataControllerResponse>
   */
  patchDataController(resourceGroupName: string, dataControllerName: string, dataControllerResource: Models.DataControllerUpdate, options?: msRest.RequestOptionsBase): Promise<Models.DataControllersPatchDataControllerResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param dataControllerResource The update data controller resource
   * @param callback The callback
   */
  patchDataController(resourceGroupName: string, dataControllerName: string, dataControllerResource: Models.DataControllerUpdate, callback: msRest.ServiceCallback<Models.DataControllerResource>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerName
   * @param dataControllerResource The update data controller resource
   * @param options The optional parameters
   * @param callback The callback
   */
  patchDataController(resourceGroupName: string, dataControllerName: string, dataControllerResource: Models.DataControllerUpdate, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataControllerResource>): void;
  patchDataController(resourceGroupName: string, dataControllerName: string, dataControllerResource: Models.DataControllerUpdate, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataControllerResource>, callback?: msRest.ServiceCallback<Models.DataControllerResource>): Promise<Models.DataControllersPatchDataControllerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        dataControllerName,
        dataControllerResource,
        options
      },
      patchDataControllerOperationSpec,
      callback) as Promise<Models.DataControllersPatchDataControllerResponse>;
  }

  /**
   * Creates or replaces a dataController resource
   * @param resourceGroupName The name of the Azure resource group
   * @param dataControllerResource desc
   * @param dataControllerName
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPutDataController(resourceGroupName: string, dataControllerResource: Models.DataControllerResource, dataControllerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        dataControllerResource,
        dataControllerName,
        options
      },
      beginPutDataControllerOperationSpec,
      options);
  }

  /**
   * @summary List dataController resources in the subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DataControllersListInSubscriptionNextResponse>
   */
  listInSubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DataControllersListInSubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listInSubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PageOfDataControllerResource>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInSubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PageOfDataControllerResource>): void;
  listInSubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PageOfDataControllerResource>, callback?: msRest.ServiceCallback<Models.PageOfDataControllerResource>): Promise<Models.DataControllersListInSubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listInSubscriptionNextOperationSpec,
      callback) as Promise<Models.DataControllersListInSubscriptionNextResponse>;
  }

  /**
   * @summary List dataController resources in the resource group
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DataControllersListInGroupNextResponse>
   */
  listInGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DataControllersListInGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listInGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PageOfDataControllerResource>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listInGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PageOfDataControllerResource>): void;
  listInGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PageOfDataControllerResource>, callback?: msRest.ServiceCallback<Models.PageOfDataControllerResource>): Promise<Models.DataControllersListInGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listInGroupNextOperationSpec,
      callback) as Promise<Models.DataControllersListInGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listInSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.AzureArcData/dataControllers",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PageOfDataControllerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listInGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PageOfDataControllerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteDataControllerOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataControllerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getDataControllerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataControllerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataControllerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const patchDataControllerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataControllerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "dataControllerResource",
    mapper: {
      ...Mappers.DataControllerUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DataControllerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginPutDataControllerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureArcData/dataControllers/{dataControllerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.dataControllerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "dataControllerResource",
    mapper: {
      ...Mappers.DataControllerResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DataControllerResource
    },
    201: {
      bodyMapper: Mappers.DataControllerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listInSubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PageOfDataControllerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listInGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PageOfDataControllerResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
