/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type DigitalTwinsEndpointResourcePropertiesUnion =
  | DigitalTwinsEndpointResourceProperties
  | ServiceBus
  | EventHub
  | EventGrid;
export type TimeSeriesDatabaseConnectionPropertiesUnion =
  | TimeSeriesDatabaseConnectionProperties
  | AzureDataExplorerConnectionProperties;

/** The private endpoint connection of a Digital Twin. */
export interface PrivateEndpointConnection {
  /**
   * The resource identifier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The connection properties. */
  properties: ConnectionProperties;
  /**
   * Metadata pertaining to creation and last modification of the private endpoint connection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** The properties of a private endpoint connection. */
export interface ConnectionProperties {
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ConnectionPropertiesProvisioningState;
  /** The private endpoint. */
  privateEndpoint?: PrivateEndpoint;
  /** The list of group ids for the private endpoint connection. */
  groupIds?: string[];
  /** The connection state. */
  privateLinkServiceConnectionState?: ConnectionPropertiesPrivateLinkServiceConnectionState;
}

/** The private endpoint property of a private endpoint connection. */
export interface PrivateEndpoint {
  /**
   * The resource identifier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** The current state of a private endpoint connection. */
export interface ConnectionState {
  /** The status of a private endpoint connection. */
  status: PrivateLinkServiceConnectionStatus;
  /** The description for the current state of a private endpoint connection. */
  description: string;
  /** Actions required for a private endpoint connection. */
  actionsRequired?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The common properties of a DigitalTwinsInstance. */
export interface DigitalTwinsResource {
  /**
   * The resource identifier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The resource location. */
  location: string;
  /** The resource tags. */
  tags?: { [propertyName: string]: string };
  /** The managed identity for the DigitalTwinsInstance. */
  identity?: DigitalTwinsIdentity;
  /**
   * Metadata pertaining to creation and last modification of the DigitalTwinsInstance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** The managed identity for the DigitalTwinsInstance. */
export interface DigitalTwinsIdentity {
  /** The type of Managed Identity used by the DigitalTwinsInstance. */
  type?: DigitalTwinsIdentityType;
  /**
   * The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   * .
   */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** The information about the user assigned identity. */
export interface UserAssignedIdentity {
  /**
   * The client id of the User Assigned Identity Resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
  /**
   * The object id of the User Assigned Identity Resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
}

/** Error response. */
export interface ErrorResponse {
  /** Error description */
  error?: ErrorDefinition;
}

/** Error definition. */
export interface ErrorDefinition {
  /**
   * Service specific error code which serves as the substatus for the HTTP error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Description of the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Internal error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDefinition[];
}

/** The description of the DigitalTwins service. */
export interface DigitalTwinsPatchDescription {
  /** Instance patch properties */
  tags?: { [propertyName: string]: string };
  /** The managed identity for the DigitalTwinsInstance. */
  identity?: DigitalTwinsIdentity;
  /** Properties for the DigitalTwinsInstance. */
  properties?: DigitalTwinsPatchProperties;
}

/** The properties of a DigitalTwinsInstance. */
export interface DigitalTwinsPatchProperties {
  /** Public network access for the DigitalTwinsInstance. */
  publicNetworkAccess?: PublicNetworkAccess;
}

/** A list of DigitalTwinsInstance Endpoints with a next link. */
export interface DigitalTwinsEndpointResourceListResult {
  /** The link used to get the next page of DigitalTwinsInstance Endpoints. */
  nextLink?: string;
  /** A list of DigitalTwinsInstance Endpoints. */
  value?: DigitalTwinsEndpointResource[];
}

/** Properties related to Digital Twins Endpoint */
export interface DigitalTwinsEndpointResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  endpointType: "ServiceBus" | "EventHub" | "EventGrid";
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: EndpointProvisioningState;
  /**
   * Time when the Endpoint was added to DigitalTwinsInstance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /** Specifies the authentication type being used for connecting to the endpoint. Defaults to 'KeyBased'. If 'KeyBased' is selected, a connection string must be specified (at least the primary connection string). If 'IdentityBased' is select, the endpointUri and entityPath properties must be specified. */
  authenticationType?: AuthenticationType;
  /** Dead letter storage secret for key-based authentication. Will be obfuscated during read. */
  deadLetterSecret?: string;
  /** Dead letter storage URL for identity-based authentication. */
  deadLetterUri?: string;
  /** Managed identity properties for the endpoint. */
  identity?: ManagedIdentityReference;
}

/** The properties of the Managed Identity. */
export interface ManagedIdentityReference {
  /** The type of managed identity used. */
  type?: IdentityType;
  /** The user identity ARM resource id if the managed identity type is 'UserAssigned'. */
  userAssignedIdentity?: string;
}

/** Definition of a resource. */
export interface ExternalResource {
  /**
   * The resource identifier.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Extension resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** A list of DigitalTwins description objects with a next link. */
export interface DigitalTwinsDescriptionListResult {
  /** The link used to get the next page of DigitalTwins description objects. */
  nextLink?: string;
  /** A list of DigitalTwins description objects. */
  value?: DigitalTwinsDescription[];
}

/** A list of DigitalTwins service operations. It contains a list of operations and a URL link to get the next set of results. */
export interface OperationListResult {
  /** The link used to get the next page of DigitalTwins description objects. */
  nextLink?: string;
  /**
   * A list of DigitalTwins operations supported by the Microsoft.DigitalTwins resource provider.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
}

/** DigitalTwins service REST API operation */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{read | write | action | delete}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /** Operation properties display */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: string;
  /**
   * If the operation is a data action (for data plane rbac).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /**
   * Operation properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: { [propertyName: string]: Record<string, unknown> };
}

/** The object that represents the operation. */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft DigitalTwins.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * Resource Type: DigitalTwinsInstances.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * Name of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * Friendly description for the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** The result returned from a database check name availability request. */
export interface CheckNameRequest {
  /** Resource name. */
  name: string;
  /** The type of resource, for instance Microsoft.DigitalTwins/digitalTwinsInstances. */
  type: "Microsoft.DigitalTwins/digitalTwinsInstances";
}

/** The result returned from a check name availability request. */
export interface CheckNameResult {
  /** Specifies a Boolean value that indicates if the name is available. */
  nameAvailable?: boolean;
  /** Message indicating an unavailable name due to a conflict, or a description of the naming rules that are violated. */
  message?: string;
  /** Message providing the reason why the given name is invalid. */
  reason?: Reason;
}

/** The available private link resources for a Digital Twin. */
export interface GroupIdInformationResponse {
  /** The list of available private link resources for a Digital Twin. */
  value?: GroupIdInformation[];
}

/** The group information for creating a private endpoint on Digital Twin. */
export interface GroupIdInformation {
  /** The group information properties. */
  properties: GroupIdInformationProperties;
  /** The resource identifier. */
  id?: string;
  /**
   * The resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** The properties for a group information object. */
export interface GroupIdInformationProperties {
  /** The group id. */
  groupId?: string;
  /** The required members for a specific group id. */
  requiredMembers?: string[];
  /** The required DNS zones for a specific group id. */
  requiredZoneNames?: string[];
}

/** The available private link connections for a Digital Twin. */
export interface PrivateEndpointConnectionsResponse {
  /** The list of available private link connections for a Digital Twin. */
  value?: PrivateEndpointConnection[];
}

/** A pageable list of time series database connection resources. */
export interface TimeSeriesDatabaseConnectionListResult {
  /** The link used to get the next page of results. */
  nextLink?: string;
  /** A list of time series database connection resources. */
  value?: TimeSeriesDatabaseConnection[];
}

/** Properties of a time series database connection resource. */
export interface TimeSeriesDatabaseConnectionProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  connectionType: "AzureDataExplorer";
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: TimeSeriesDatabaseConnectionState;
  /** Managed identity properties for the time series database connection resource. */
  identity?: ManagedIdentityReference;
}

/** The connection state. */
export interface ConnectionPropertiesPrivateLinkServiceConnectionState
  extends ConnectionState {}

/** The description of the DigitalTwins service. */
export interface DigitalTwinsDescription extends DigitalTwinsResource {
  /**
   * Time when DigitalTwinsInstance was created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /**
   * Time when DigitalTwinsInstance was updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdatedTime?: Date;
  /**
   * The provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Api endpoint to work with DigitalTwinsInstance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hostName?: string;
  /** The private endpoint connections. */
  privateEndpointConnections?: PrivateEndpointConnection[];
  /** Public network access for the DigitalTwinsInstance. */
  publicNetworkAccess?: PublicNetworkAccess;
}

/** Properties related to ServiceBus. */
export interface ServiceBus extends DigitalTwinsEndpointResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  endpointType: "ServiceBus";
  /** PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read. */
  primaryConnectionString?: string;
  /** SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read. */
  secondaryConnectionString?: string;
  /** The URL of the ServiceBus namespace for identity-based authentication. It must include the protocol 'sb://'. */
  endpointUri?: string;
  /** The ServiceBus Topic name for identity-based authentication. */
  entityPath?: string;
}

/** Properties related to EventHub. */
export interface EventHub extends DigitalTwinsEndpointResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  endpointType: "EventHub";
  /** PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read. */
  connectionStringPrimaryKey?: string;
  /** SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read. */
  connectionStringSecondaryKey?: string;
  /** The URL of the EventHub namespace for identity-based authentication. It must include the protocol 'sb://'. */
  endpointUri?: string;
  /** The EventHub name in the EventHub namespace for identity-based authentication. */
  entityPath?: string;
}

/** Properties related to EventGrid. */
export interface EventGrid extends DigitalTwinsEndpointResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  endpointType: "EventGrid";
  /** EventGrid Topic Endpoint. */
  topicEndpoint: string;
  /** EventGrid secondary accesskey. Will be obfuscated during read. */
  accessKey1: string | null;
  /** EventGrid secondary accesskey. Will be obfuscated during read. */
  accessKey2?: string;
}

/** DigitalTwinsInstance endpoint resource. */
export interface DigitalTwinsEndpointResource extends ExternalResource {
  /** DigitalTwinsInstance endpoint resource properties. */
  properties: DigitalTwinsEndpointResourcePropertiesUnion;
}

/** Describes a time series database connection resource. */
export interface TimeSeriesDatabaseConnection extends ExternalResource {
  /** Properties of a specific time series database connection. */
  properties?: TimeSeriesDatabaseConnectionPropertiesUnion;
}

/** Properties of a time series database connection to Azure Data Explorer with data being sent via an EventHub. */
export interface AzureDataExplorerConnectionProperties
  extends TimeSeriesDatabaseConnectionProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  connectionType: "AzureDataExplorer";
  /** The resource ID of the Azure Data Explorer cluster. */
  adxResourceId: string;
  /** The URI of the Azure Data Explorer endpoint. */
  adxEndpointUri: string;
  /** The name of the Azure Data Explorer database. */
  adxDatabaseName: string;
  /** The name of the Azure Data Explorer table used for storing updates to properties of twins and relationships. Defaults to AdtPropertyEvents. */
  adxTableName?: string;
  /** The name of the Azure Data Explorer table used for recording twin lifecycle events. The table will not be created if this property is left unspecified. */
  adxTwinLifecycleEventsTableName?: string;
  /** The name of the Azure Data Explorer table used for recording relationship lifecycle events. The table will not be created if this property is left unspecified. */
  adxRelationshipLifecycleEventsTableName?: string;
  /** The URL of the EventHub namespace for identity-based authentication. It must include the protocol sb:// */
  eventHubEndpointUri: string;
  /** The EventHub name in the EventHub namespace for identity-based authentication. */
  eventHubEntityPath: string;
  /** The resource ID of the EventHub namespace. */
  eventHubNamespaceResourceId: string;
  /** The EventHub consumer group to use when ADX reads from EventHub. Defaults to $Default. */
  eventHubConsumerGroup?: string;
  /** Specifies whether or not to record twin / relationship property and item removals, including removals of indexed or keyed values (such as map entries, array elements, etc.). This feature is de-activated unless explicitly set to 'true'. Setting this property to 'true' will generate an additional column in the property events table in ADX. */
  recordPropertyAndItemRemovals?: RecordPropertyAndItemRemovals;
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Deleting */
  Deleting = "Deleting",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Deleted */
  Deleted = "Deleted",
  /** Warning */
  Warning = "Warning",
  /** Suspending */
  Suspending = "Suspending",
  /** Restoring */
  Restoring = "Restoring",
  /** Moving */
  Moving = "Moving"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Provisioning** \
 * **Deleting** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleted** \
 * **Warning** \
 * **Suspending** \
 * **Restoring** \
 * **Moving**
 */
export type ProvisioningState = string;

/** Known values of {@link ConnectionPropertiesProvisioningState} that the service accepts. */
export enum KnownConnectionPropertiesProvisioningState {
  /** Pending */
  Pending = "Pending",
  /** Approved */
  Approved = "Approved",
  /** Rejected */
  Rejected = "Rejected",
  /** Disconnected */
  Disconnected = "Disconnected"
}

/**
 * Defines values for ConnectionPropertiesProvisioningState. \
 * {@link KnownConnectionPropertiesProvisioningState} can be used interchangeably with ConnectionPropertiesProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected**
 */
export type ConnectionPropertiesProvisioningState = string;

/** Known values of {@link PrivateLinkServiceConnectionStatus} that the service accepts. */
export enum KnownPrivateLinkServiceConnectionStatus {
  /** Pending */
  Pending = "Pending",
  /** Approved */
  Approved = "Approved",
  /** Rejected */
  Rejected = "Rejected",
  /** Disconnected */
  Disconnected = "Disconnected"
}

/**
 * Defines values for PrivateLinkServiceConnectionStatus. \
 * {@link KnownPrivateLinkServiceConnectionStatus} can be used interchangeably with PrivateLinkServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected**
 */
export type PrivateLinkServiceConnectionStatus = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export enum KnownPublicNetworkAccess {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type PublicNetworkAccess = string;

/** Known values of {@link DigitalTwinsIdentityType} that the service accepts. */
export enum KnownDigitalTwinsIdentityType {
  /** None */
  None = "None",
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAssignedUserAssigned */
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/**
 * Defines values for DigitalTwinsIdentityType. \
 * {@link KnownDigitalTwinsIdentityType} can be used interchangeably with DigitalTwinsIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type DigitalTwinsIdentityType = string;

/** Known values of {@link EndpointType} that the service accepts. */
export enum KnownEndpointType {
  /** EventHub */
  EventHub = "EventHub",
  /** EventGrid */
  EventGrid = "EventGrid",
  /** ServiceBus */
  ServiceBus = "ServiceBus"
}

/**
 * Defines values for EndpointType. \
 * {@link KnownEndpointType} can be used interchangeably with EndpointType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EventHub** \
 * **EventGrid** \
 * **ServiceBus**
 */
export type EndpointType = string;

/** Known values of {@link EndpointProvisioningState} that the service accepts. */
export enum KnownEndpointProvisioningState {
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Deleting */
  Deleting = "Deleting",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Deleted */
  Deleted = "Deleted",
  /** Warning */
  Warning = "Warning",
  /** Suspending */
  Suspending = "Suspending",
  /** Restoring */
  Restoring = "Restoring",
  /** Moving */
  Moving = "Moving",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for EndpointProvisioningState. \
 * {@link KnownEndpointProvisioningState} can be used interchangeably with EndpointProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Provisioning** \
 * **Deleting** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleted** \
 * **Warning** \
 * **Suspending** \
 * **Restoring** \
 * **Moving** \
 * **Disabled**
 */
export type EndpointProvisioningState = string;

/** Known values of {@link AuthenticationType} that the service accepts. */
export enum KnownAuthenticationType {
  /** KeyBased */
  KeyBased = "KeyBased",
  /** IdentityBased */
  IdentityBased = "IdentityBased"
}

/**
 * Defines values for AuthenticationType. \
 * {@link KnownAuthenticationType} can be used interchangeably with AuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **KeyBased** \
 * **IdentityBased**
 */
export type AuthenticationType = string;

/** Known values of {@link IdentityType} that the service accepts. */
export enum KnownIdentityType {
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned"
}

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **UserAssigned**
 */
export type IdentityType = string;

/** Known values of {@link Reason} that the service accepts. */
export enum KnownReason {
  /** Invalid */
  Invalid = "Invalid",
  /** AlreadyExists */
  AlreadyExists = "AlreadyExists"
}

/**
 * Defines values for Reason. \
 * {@link KnownReason} can be used interchangeably with Reason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export type Reason = string;

/** Known values of {@link ConnectionType} that the service accepts. */
export enum KnownConnectionType {
  /** AzureDataExplorer */
  AzureDataExplorer = "AzureDataExplorer"
}

/**
 * Defines values for ConnectionType. \
 * {@link KnownConnectionType} can be used interchangeably with ConnectionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureDataExplorer**
 */
export type ConnectionType = string;

/** Known values of {@link TimeSeriesDatabaseConnectionState} that the service accepts. */
export enum KnownTimeSeriesDatabaseConnectionState {
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Deleting */
  Deleting = "Deleting",
  /** Updating */
  Updating = "Updating",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Deleted */
  Deleted = "Deleted",
  /** Warning */
  Warning = "Warning",
  /** Suspending */
  Suspending = "Suspending",
  /** Restoring */
  Restoring = "Restoring",
  /** Moving */
  Moving = "Moving",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for TimeSeriesDatabaseConnectionState. \
 * {@link KnownTimeSeriesDatabaseConnectionState} can be used interchangeably with TimeSeriesDatabaseConnectionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Provisioning** \
 * **Deleting** \
 * **Updating** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleted** \
 * **Warning** \
 * **Suspending** \
 * **Restoring** \
 * **Moving** \
 * **Disabled**
 */
export type TimeSeriesDatabaseConnectionState = string;

/** Known values of {@link CleanupConnectionArtifacts} that the service accepts. */
export enum KnownCleanupConnectionArtifacts {
  /** True */
  True = "true",
  /** False */
  False = "false"
}

/**
 * Defines values for CleanupConnectionArtifacts. \
 * {@link KnownCleanupConnectionArtifacts} can be used interchangeably with CleanupConnectionArtifacts,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true** \
 * **false**
 */
export type CleanupConnectionArtifacts = string;

/** Known values of {@link RecordPropertyAndItemRemovals} that the service accepts. */
export enum KnownRecordPropertyAndItemRemovals {
  /** True */
  True = "true",
  /** False */
  False = "false"
}

/**
 * Defines values for RecordPropertyAndItemRemovals. \
 * {@link KnownRecordPropertyAndItemRemovals} can be used interchangeably with RecordPropertyAndItemRemovals,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true** \
 * **false**
 */
export type RecordPropertyAndItemRemovals = string;

/** Optional parameters. */
export interface DigitalTwinsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DigitalTwinsGetResponse = DigitalTwinsDescription;

/** Optional parameters. */
export interface DigitalTwinsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DigitalTwinsCreateOrUpdateResponse = DigitalTwinsDescription;

/** Optional parameters. */
export interface DigitalTwinsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DigitalTwinsUpdateResponse = DigitalTwinsDescription;

/** Optional parameters. */
export interface DigitalTwinsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type DigitalTwinsDeleteResponse = DigitalTwinsDescription;

/** Optional parameters. */
export interface DigitalTwinsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DigitalTwinsListResponse = DigitalTwinsDescriptionListResult;

/** Optional parameters. */
export interface DigitalTwinsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type DigitalTwinsListByResourceGroupResponse = DigitalTwinsDescriptionListResult;

/** Optional parameters. */
export interface DigitalTwinsCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type DigitalTwinsCheckNameAvailabilityResponse = CheckNameResult;

/** Optional parameters. */
export interface DigitalTwinsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DigitalTwinsListNextResponse = DigitalTwinsDescriptionListResult;

/** Optional parameters. */
export interface DigitalTwinsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type DigitalTwinsListByResourceGroupNextResponse = DigitalTwinsDescriptionListResult;

/** Optional parameters. */
export interface DigitalTwinsEndpointListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DigitalTwinsEndpointListResponse = DigitalTwinsEndpointResourceListResult;

/** Optional parameters. */
export interface DigitalTwinsEndpointGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DigitalTwinsEndpointGetResponse = DigitalTwinsEndpointResource;

/** Optional parameters. */
export interface DigitalTwinsEndpointCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DigitalTwinsEndpointCreateOrUpdateResponse = DigitalTwinsEndpointResource;

/** Optional parameters. */
export interface DigitalTwinsEndpointDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type DigitalTwinsEndpointDeleteResponse = DigitalTwinsEndpointResource;

/** Optional parameters. */
export interface DigitalTwinsEndpointListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DigitalTwinsEndpointListNextResponse = DigitalTwinsEndpointResourceListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface PrivateLinkResourcesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PrivateLinkResourcesListResponse = GroupIdInformationResponse;

/** Optional parameters. */
export interface PrivateLinkResourcesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateLinkResourcesGetResponse = GroupIdInformation;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionsResponse;

/** Optional parameters. */
export interface PrivateEndpointConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface TimeSeriesDatabaseConnectionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TimeSeriesDatabaseConnectionsListResponse = TimeSeriesDatabaseConnectionListResult;

/** Optional parameters. */
export interface TimeSeriesDatabaseConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TimeSeriesDatabaseConnectionsGetResponse = TimeSeriesDatabaseConnection;

/** Optional parameters. */
export interface TimeSeriesDatabaseConnectionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type TimeSeriesDatabaseConnectionsCreateOrUpdateResponse = TimeSeriesDatabaseConnection;

/** Optional parameters. */
export interface TimeSeriesDatabaseConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Specifies whether or not to attempt to clean up artifacts that were created in order to establish a connection to the time series database. This is a best-effort attempt that will fail if appropriate permissions are not in place. Setting this to 'true' does not delete any recorded data. */
  cleanupConnectionArtifacts?: CleanupConnectionArtifacts;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type TimeSeriesDatabaseConnectionsDeleteResponse = TimeSeriesDatabaseConnection;

/** Optional parameters. */
export interface TimeSeriesDatabaseConnectionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TimeSeriesDatabaseConnectionsListNextResponse = TimeSeriesDatabaseConnectionListResult;

/** Optional parameters. */
export interface AzureDigitalTwinsManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
