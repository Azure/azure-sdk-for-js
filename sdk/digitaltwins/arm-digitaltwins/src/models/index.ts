/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * The common properties of a DigitalTwinsInstance.
 */
export interface DigitalTwinsResource extends BaseResource {
  /**
   * The resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The resource location.
   */
  location: string;
  /**
   * The resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The description of the DigitalTwins service.
 */
export interface DigitalTwinsDescription extends DigitalTwinsResource {
  /**
   * Time when DigitalTwinsInstance was created.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTime?: Date;
  /**
   * Time when DigitalTwinsInstance was updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastUpdatedTime?: Date;
  /**
   * The provisioning state. Possible values include: 'Provisioning', 'Deleting', 'Succeeded',
   * 'Failed', 'Canceled', 'Deleted', 'Warning', 'Suspending', 'Restoring', 'Moving'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Api endpoint to work with DigitalTwinsInstance.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostName?: string;
}

/**
 * The description of the DigitalTwins service.
 */
export interface DigitalTwinsPatchDescription {
  /**
   * Instance tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Error definition.
 */
export interface ErrorDefinition {
  /**
   * Service specific error code which serves as the substatus for the HTTP error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * Description of the error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Internal error details.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly details?: ErrorDefinition[];
}

/**
 * Error response.
 */
export interface ErrorResponse {
  /**
   * Error description
   */
  error?: ErrorDefinition;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft DigitalTwins
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: string;
  /**
   * Resource Type: DigitalTwinsInstances
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resource?: string;
  /**
   * Name of the operation
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
  /**
   * Friendly description for the operation,
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
}

/**
 * DigitalTwins service REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{read | write | action | delete}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Operation properties display
   */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly origin?: string;
  /**
   * If the operation is a data action (for data plane rbac).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isDataAction?: boolean;
}

/**
 * The result returned from a database check name availability request.
 */
export interface CheckNameRequest {
  /**
   * Resource name.
   */
  name: string;
}

/**
 * The result returned from a check name availability request.
 */
export interface CheckNameResult {
  /**
   * Specifies a Boolean value that indicates if the name is available.
   */
  nameAvailable?: boolean;
  /**
   * Message indicating an unavailable name due to a conflict, or a description of the naming rules
   * that are violated.
   */
  message?: string;
  /**
   * Message providing the reason why the given name is invalid. Possible values include:
   * 'Invalid', 'AlreadyExists'
   */
  reason?: Reason;
}

/**
 * Definition of a resource.
 */
export interface ExternalResource extends BaseResource {
  /**
   * The resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Extension resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * Contains the possible cases for DigitalTwinsEndpointResourceProperties.
 */
export type DigitalTwinsEndpointResourcePropertiesUnion = DigitalTwinsEndpointResourceProperties | ServiceBus | EventHub | EventGrid;

/**
 * Properties related to Digital Twins Endpoint
 */
export interface DigitalTwinsEndpointResourceProperties {
  /**
   * Polymorphic Discriminator
   */
  endpointType: "DigitalTwinsEndpointResourceProperties";
  /**
   * The provisioning state. Possible values include: 'Provisioning', 'Deleting', 'Succeeded',
   * 'Failed', 'Canceled', 'Deleted', 'Warning', 'Suspending', 'Restoring', 'Moving', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: EndpointProvisioningState;
  /**
   * Time when the Endpoint was added to DigitalTwinsInstance.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTime?: Date;
  /**
   * Dead letter storage secret. Will be obfuscated during read.
   */
  deadLetterSecret?: string;
}

/**
 * DigitalTwinsInstance endpoint resource.
 */
export interface DigitalTwinsEndpointResource extends ExternalResource {
  /**
   * DigitalTwinsInstance endpoint resource properties.
   */
  properties?: DigitalTwinsEndpointResourcePropertiesUnion;
}

/**
 * Properties related to ServiceBus.
 */
export interface ServiceBus {
  /**
   * Polymorphic Discriminator
   */
  endpointType: "ServiceBus";
  /**
   * The provisioning state. Possible values include: 'Provisioning', 'Deleting', 'Succeeded',
   * 'Failed', 'Canceled', 'Deleted', 'Warning', 'Suspending', 'Restoring', 'Moving', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: EndpointProvisioningState;
  /**
   * Time when the Endpoint was added to DigitalTwinsInstance.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTime?: Date;
  /**
   * Dead letter storage secret. Will be obfuscated during read.
   */
  deadLetterSecret?: string;
  /**
   * PrimaryConnectionString of the endpoint. Will be obfuscated during read.
   */
  primaryConnectionString: string;
  /**
   * SecondaryConnectionString of the endpoint. Will be obfuscated during read.
   */
  secondaryConnectionString?: string;
}

/**
 * Properties related to EventHub.
 */
export interface EventHub {
  /**
   * Polymorphic Discriminator
   */
  endpointType: "EventHub";
  /**
   * The provisioning state. Possible values include: 'Provisioning', 'Deleting', 'Succeeded',
   * 'Failed', 'Canceled', 'Deleted', 'Warning', 'Suspending', 'Restoring', 'Moving', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: EndpointProvisioningState;
  /**
   * Time when the Endpoint was added to DigitalTwinsInstance.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTime?: Date;
  /**
   * Dead letter storage secret. Will be obfuscated during read.
   */
  deadLetterSecret?: string;
  /**
   * PrimaryConnectionString of the endpoint. Will be obfuscated during read.
   */
  connectionStringPrimaryKey: string;
  /**
   * SecondaryConnectionString of the endpoint. Will be obfuscated during read.
   */
  connectionStringSecondaryKey?: string;
}

/**
 * Properties related to EventGrid.
 */
export interface EventGrid {
  /**
   * Polymorphic Discriminator
   */
  endpointType: "EventGrid";
  /**
   * The provisioning state. Possible values include: 'Provisioning', 'Deleting', 'Succeeded',
   * 'Failed', 'Canceled', 'Deleted', 'Warning', 'Suspending', 'Restoring', 'Moving', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: EndpointProvisioningState;
  /**
   * Time when the Endpoint was added to DigitalTwinsInstance.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdTime?: Date;
  /**
   * Dead letter storage secret. Will be obfuscated during read.
   */
  deadLetterSecret?: string;
  /**
   * EventGrid Topic Endpoint
   */
  topicEndpoint: string;
  /**
   * EventGrid secondary accesskey. Will be obfuscated during read.
   */
  accessKey1: string;
  /**
   * EventGrid secondary accesskey. Will be obfuscated during read.
   */
  accessKey2?: string;
}

/**
 * Optional Parameters.
 */
export interface DigitalTwinsUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Instance tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface DigitalTwinsBeginUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Instance tags
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Optional Parameters.
 */
export interface DigitalTwinsEndpointCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * DigitalTwinsInstance endpoint resource properties.
   */
  properties?: DigitalTwinsEndpointResourcePropertiesUnion;
}

/**
 * Optional Parameters.
 */
export interface DigitalTwinsEndpointBeginCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * DigitalTwinsInstance endpoint resource properties.
   */
  properties?: DigitalTwinsEndpointResourcePropertiesUnion;
}

/**
 * An interface representing AzureDigitalTwinsManagementClientOptions.
 */
export interface AzureDigitalTwinsManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * A list of DigitalTwins description objects with a next link.
 * @extends Array<DigitalTwinsDescription>
 */
export interface DigitalTwinsDescriptionListResult extends Array<DigitalTwinsDescription> {
  /**
   * The link used to get the next page of DigitalTwins description objects.
   */
  nextLink?: string;
}

/**
 * @interface
 * A list of DigitalTwinsInstance Endpoints with a next link.
 * @extends Array<DigitalTwinsEndpointResource>
 */
export interface DigitalTwinsEndpointResourceListResult extends Array<DigitalTwinsEndpointResource> {
  /**
   * The link used to get the next page of DigitalTwinsInstance Endpoints.
   */
  nextLink?: string;
}

/**
 * @interface
 * A list of DigitalTwins service operations. It contains a list of operations and a URL link to
 * get the next set of results.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * The link used to get the next page of DigitalTwins description objects.
   */
  nextLink?: string;
}

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Provisioning', 'Deleting', 'Succeeded', 'Failed', 'Canceled',
 * 'Deleted', 'Warning', 'Suspending', 'Restoring', 'Moving'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState = 'Provisioning' | 'Deleting' | 'Succeeded' | 'Failed' | 'Canceled' | 'Deleted' | 'Warning' | 'Suspending' | 'Restoring' | 'Moving';

/**
 * Defines values for Reason.
 * Possible values include: 'Invalid', 'AlreadyExists'
 * @readonly
 * @enum {string}
 */
export type Reason = 'Invalid' | 'AlreadyExists';

/**
 * Defines values for EndpointProvisioningState.
 * Possible values include: 'Provisioning', 'Deleting', 'Succeeded', 'Failed', 'Canceled',
 * 'Deleted', 'Warning', 'Suspending', 'Restoring', 'Moving', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type EndpointProvisioningState = 'Provisioning' | 'Deleting' | 'Succeeded' | 'Failed' | 'Canceled' | 'Deleted' | 'Warning' | 'Suspending' | 'Restoring' | 'Moving' | 'Disabled';

/**
 * Contains response data for the get operation.
 */
export type DigitalTwinsGetResponse = DigitalTwinsDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsDescription;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DigitalTwinsCreateOrUpdateResponse = DigitalTwinsDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsDescription;
    };
};

/**
 * Contains response data for the update operation.
 */
export type DigitalTwinsUpdateResponse = DigitalTwinsDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsDescription;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type DigitalTwinsDeleteMethodResponse = DigitalTwinsDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsDescription;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DigitalTwinsListResponse = DigitalTwinsDescriptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsDescriptionListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DigitalTwinsListByResourceGroupResponse = DigitalTwinsDescriptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsDescriptionListResult;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type DigitalTwinsCheckNameAvailabilityResponse = CheckNameResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckNameResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DigitalTwinsBeginCreateOrUpdateResponse = DigitalTwinsDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsDescription;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type DigitalTwinsBeginUpdateResponse = DigitalTwinsDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsDescription;
    };
};

/**
 * Contains response data for the beginDeleteMethod operation.
 */
export type DigitalTwinsBeginDeleteMethodResponse = DigitalTwinsDescription & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsDescription;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type DigitalTwinsListNextResponse = DigitalTwinsDescriptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsDescriptionListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type DigitalTwinsListByResourceGroupNextResponse = DigitalTwinsDescriptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsDescriptionListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DigitalTwinsEndpointListResponse = DigitalTwinsEndpointResourceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsEndpointResourceListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DigitalTwinsEndpointGetResponse = DigitalTwinsEndpointResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsEndpointResource;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DigitalTwinsEndpointCreateOrUpdateResponse = DigitalTwinsEndpointResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsEndpointResource;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type DigitalTwinsEndpointDeleteMethodResponse = DigitalTwinsEndpointResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsEndpointResource;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DigitalTwinsEndpointBeginCreateOrUpdateResponse = DigitalTwinsEndpointResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsEndpointResource;
    };
};

/**
 * Contains response data for the beginDeleteMethod operation.
 */
export type DigitalTwinsEndpointBeginDeleteMethodResponse = DigitalTwinsEndpointResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsEndpointResource;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type DigitalTwinsEndpointListNextResponse = DigitalTwinsEndpointResourceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinsEndpointResourceListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};
