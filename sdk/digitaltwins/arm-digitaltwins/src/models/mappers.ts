/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          Pattern: new RegExp("^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$")
        },
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionProperties"
        }
      }
    }
  }
};

export const ConnectionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "ConnectionPropertiesPrivateEndpoint"
        }
      },
      groupIds: {
        serializedName: "groupIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "ConnectionPropertiesPrivateLinkServiceConnectionState"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        required: true,
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DigitalTwinsResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DigitalTwinsResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          Pattern: new RegExp("^(?!-)[A-Za-z0-9-]{3,63}(?<!-)$")
        },
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "DigitalTwinsIdentity"
        }
      }
    }
  }
};

export const DigitalTwinsIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DigitalTwinsIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDefinition"
        }
      }
    }
  }
};

export const ErrorDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDefinition",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDefinition"
            }
          }
        }
      }
    }
  }
};

export const DigitalTwinsPatchDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DigitalTwinsPatchDescription",
    modelProperties: {
      tags: {
        serializedName: "tags",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "DigitalTwinsIdentity"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DigitalTwinsPatchProperties"
        }
      }
    }
  }
};

export const DigitalTwinsPatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DigitalTwinsPatchProperties",
    modelProperties: {
      publicNetworkAccess: {
        serializedName: "publicNetworkAccess",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DigitalTwinsEndpointResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DigitalTwinsEndpointResourceListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        nullable: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DigitalTwinsEndpointResource"
            }
          }
        }
      }
    }
  }
};

export const DigitalTwinsEndpointResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DigitalTwinsEndpointResourceProperties",
    uberParent: "DigitalTwinsEndpointResourceProperties",
    polymorphicDiscriminator: {
      serializedName: "endpointType",
      clientName: "endpointType"
    },
    modelProperties: {
      endpointType: {
        serializedName: "endpointType",
        required: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      createdTime: {
        serializedName: "createdTime",
        readOnly: true,
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      authenticationType: {
        serializedName: "authenticationType",
        type: {
          name: "String"
        }
      },
      deadLetterSecret: {
        serializedName: "deadLetterSecret",
        nullable: true,
        type: {
          name: "String"
        }
      },
      deadLetterUri: {
        serializedName: "deadLetterUri",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          Pattern: new RegExp("^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$")
        },
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DigitalTwinsDescriptionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DigitalTwinsDescriptionListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        nullable: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DigitalTwinsDescription"
            }
          }
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        nullable: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.DigitalTwins/digitalTwinsInstances",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      message: {
        serializedName: "message",
        nullable: true,
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupIdInformationResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GroupIdInformationResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GroupIdInformation"
            }
          }
        }
      }
    }
  }
};

export const GroupIdInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GroupIdInformation",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "GroupIdInformationProperties"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          Pattern: new RegExp("^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$")
        },
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GroupIdInformationPropertiesAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GroupIdInformationPropertiesAutoGenerated",
    modelProperties: {
      groupId: {
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionsResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionProperties",
    modelProperties: {
      ...ConnectionProperties.type.modelProperties
    }
  }
};

export const ConnectionPropertiesPrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionPropertiesPrivateEndpoint",
    modelProperties: {
      ...PrivateEndpoint.type.modelProperties
    }
  }
};

export const ConnectionPropertiesPrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectionPropertiesPrivateLinkServiceConnectionState",
    modelProperties: {
      ...ConnectionState.type.modelProperties
    }
  }
};

export const DigitalTwinsDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DigitalTwinsDescription",
    modelProperties: {
      ...DigitalTwinsResource.type.modelProperties,
      createdTime: {
        serializedName: "properties.createdTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdatedTime: {
        serializedName: "properties.lastUpdatedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "properties.hostName",
        readOnly: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceBus: coreClient.CompositeMapper = {
  serializedName: "ServiceBus",
  type: {
    name: "Composite",
    className: "ServiceBus",
    uberParent: "DigitalTwinsEndpointResourceProperties",
    polymorphicDiscriminator:
      DigitalTwinsEndpointResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...DigitalTwinsEndpointResourceProperties.type.modelProperties,
      primaryConnectionString: {
        serializedName: "primaryConnectionString",
        nullable: true,
        type: {
          name: "String"
        }
      },
      secondaryConnectionString: {
        serializedName: "secondaryConnectionString",
        nullable: true,
        type: {
          name: "String"
        }
      },
      endpointUri: {
        serializedName: "endpointUri",
        nullable: true,
        type: {
          name: "String"
        }
      },
      entityPath: {
        serializedName: "entityPath",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHub: coreClient.CompositeMapper = {
  serializedName: "EventHub",
  type: {
    name: "Composite",
    className: "EventHub",
    uberParent: "DigitalTwinsEndpointResourceProperties",
    polymorphicDiscriminator:
      DigitalTwinsEndpointResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...DigitalTwinsEndpointResourceProperties.type.modelProperties,
      connectionStringPrimaryKey: {
        serializedName: "connectionStringPrimaryKey",
        nullable: true,
        type: {
          name: "String"
        }
      },
      connectionStringSecondaryKey: {
        serializedName: "connectionStringSecondaryKey",
        nullable: true,
        type: {
          name: "String"
        }
      },
      endpointUri: {
        serializedName: "endpointUri",
        nullable: true,
        type: {
          name: "String"
        }
      },
      entityPath: {
        serializedName: "entityPath",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventGrid: coreClient.CompositeMapper = {
  serializedName: "EventGrid",
  type: {
    name: "Composite",
    className: "EventGrid",
    uberParent: "DigitalTwinsEndpointResourceProperties",
    polymorphicDiscriminator:
      DigitalTwinsEndpointResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...DigitalTwinsEndpointResourceProperties.type.modelProperties,
      topicEndpoint: {
        serializedName: "TopicEndpoint",
        required: true,
        type: {
          name: "String"
        }
      },
      accessKey1: {
        serializedName: "accessKey1",
        required: true,
        nullable: true,
        type: {
          name: "String"
        }
      },
      accessKey2: {
        serializedName: "accessKey2",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DigitalTwinsEndpointResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DigitalTwinsEndpointResource",
    modelProperties: {
      ...ExternalResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DigitalTwinsEndpointResourceProperties"
        }
      }
    }
  }
};

export const GroupIdInformationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GroupIdInformationProperties",
    modelProperties: {
      ...GroupIdInformationPropertiesAutoGenerated.type.modelProperties
    }
  }
};

export let discriminators = {
  DigitalTwinsEndpointResourceProperties: DigitalTwinsEndpointResourceProperties,
  "DigitalTwinsEndpointResourceProperties.ServiceBus": ServiceBus,
  "DigitalTwinsEndpointResourceProperties.EventHub": EventHub,
  "DigitalTwinsEndpointResourceProperties.EventGrid": EventGrid
};
