/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/digitalTwinsMappers";
import * as Parameters from "../models/parameters";
import { AzureDigitalTwinsManagementClientContext } from "../azureDigitalTwinsManagementClientContext";

/** Class representing a DigitalTwins. */
export class DigitalTwins {
  private readonly client: AzureDigitalTwinsManagementClientContext;

  /**
   * Create a DigitalTwins.
   * @param {AzureDigitalTwinsManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureDigitalTwinsManagementClientContext) {
    this.client = client;
  }

  /**
   * Get DigitalTwinsInstances resource.
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsGetResponse>
   */
  get(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.DigitalTwinsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<Models.DigitalTwinsDescription>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DigitalTwinsDescription>): void;
  get(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DigitalTwinsDescription>, callback?: msRest.ServiceCallback<Models.DigitalTwinsDescription>): Promise<Models.DigitalTwinsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DigitalTwinsGetResponse>;
  }

  /**
   * Create or update the metadata of a DigitalTwinsInstance. The usual pattern to modify a property
   * is to retrieve the DigitalTwinsInstance and security metadata, and then combine them with the
   * modified values in a new body to update the DigitalTwinsInstance.
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param digitalTwinsCreate The DigitalTwinsInstance and security metadata.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, resourceName: string, digitalTwinsCreate: Models.DigitalTwinsDescription, options?: msRest.RequestOptionsBase): Promise<Models.DigitalTwinsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,resourceName,digitalTwinsCreate,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DigitalTwinsCreateOrUpdateResponse>;
  }

  /**
   * Update metadata of DigitalTwinsInstance.
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param digitalTwinsPatchDescription The DigitalTwinsInstance and security metadata.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsUpdateResponse>
   */
  update(resourceGroupName: string, resourceName: string, digitalTwinsPatchDescription: Models.DigitalTwinsPatchDescription, options?: msRest.RequestOptionsBase): Promise<Models.DigitalTwinsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,resourceName,digitalTwinsPatchDescription,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DigitalTwinsUpdateResponse>;
  }

  /**
   * Delete a DigitalTwinsInstance.
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsDeleteMethodResponse>
   */
  deleteMethod(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.DigitalTwinsDeleteMethodResponse> {
    return this.beginDeleteMethod(resourceGroupName,resourceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DigitalTwinsDeleteMethodResponse>;
  }

  /**
   * Get all the DigitalTwinsInstances in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.DigitalTwinsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>, callback?: msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>): Promise<Models.DigitalTwinsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DigitalTwinsListResponse>;
  }

  /**
   * Get all the DigitalTwinsInstances in a resource group.
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.DigitalTwinsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>, callback?: msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>): Promise<Models.DigitalTwinsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.DigitalTwinsListByResourceGroupResponse>;
  }

  /**
   * Check if a DigitalTwinsInstance name is available.
   * @param location Location of DigitalTwinsInstance.
   * @param name Resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsCheckNameAvailabilityResponse>
   */
  checkNameAvailability(location: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.DigitalTwinsCheckNameAvailabilityResponse>;
  /**
   * @param location Location of DigitalTwinsInstance.
   * @param name Resource name.
   * @param callback The callback
   */
  checkNameAvailability(location: string, name: string, callback: msRest.ServiceCallback<Models.CheckNameResult>): void;
  /**
   * @param location Location of DigitalTwinsInstance.
   * @param name Resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(location: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameResult>): void;
  checkNameAvailability(location: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckNameResult>, callback?: msRest.ServiceCallback<Models.CheckNameResult>): Promise<Models.DigitalTwinsCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        name,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.DigitalTwinsCheckNameAvailabilityResponse>;
  }

  /**
   * Create or update the metadata of a DigitalTwinsInstance. The usual pattern to modify a property
   * is to retrieve the DigitalTwinsInstance and security metadata, and then combine them with the
   * modified values in a new body to update the DigitalTwinsInstance.
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param digitalTwinsCreate The DigitalTwinsInstance and security metadata.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, resourceName: string, digitalTwinsCreate: Models.DigitalTwinsDescription, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        digitalTwinsCreate,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Update metadata of DigitalTwinsInstance.
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param digitalTwinsPatchDescription The DigitalTwinsInstance and security metadata.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, resourceName: string, digitalTwinsPatchDescription: Models.DigitalTwinsPatchDescription, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        digitalTwinsPatchDescription,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Delete a DigitalTwinsInstance.
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Get all the DigitalTwinsInstances in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DigitalTwinsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>, callback?: msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>): Promise<Models.DigitalTwinsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.DigitalTwinsListNextResponse>;
  }

  /**
   * Get all the DigitalTwinsInstances in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DigitalTwinsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>, callback?: msRest.ServiceCallback<Models.DigitalTwinsDescriptionListResult>): Promise<Models.DigitalTwinsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.DigitalTwinsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DigitalTwinsDescription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DigitalTwins/digitalTwinsInstances",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DigitalTwinsDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DigitalTwinsDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DigitalTwins/locations/{location}/checkNameAvailability",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      name: "name"
    },
    mapper: {
      ...Mappers.CheckNameRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "digitalTwinsCreate",
    mapper: {
      ...Mappers.DigitalTwinsDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DigitalTwinsDescription
    },
    201: {
      bodyMapper: Mappers.DigitalTwinsDescription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "digitalTwinsPatchDescription",
    mapper: {
      ...Mappers.DigitalTwinsPatchDescription,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DigitalTwinsDescription
    },
    202: {
      bodyMapper: Mappers.DigitalTwinsDescription
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DigitalTwinsDescription
    },
    202: {
      bodyMapper: Mappers.DigitalTwinsDescription
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DigitalTwinsDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DigitalTwinsDescriptionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
