/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/digitalTwinsEndpointMappers";
import * as Parameters from "../models/parameters";
import { AzureDigitalTwinsManagementClientContext } from "../azureDigitalTwinsManagementClientContext";

/** Class representing a DigitalTwinsEndpoint. */
export class DigitalTwinsEndpoint {
  private readonly client: AzureDigitalTwinsManagementClientContext;

  /**
   * Create a DigitalTwinsEndpoint.
   * @param {AzureDigitalTwinsManagementClientContext} client Reference to the service client.
   */
  constructor(client: AzureDigitalTwinsManagementClientContext) {
    this.client = client;
  }

  /**
   * Get DigitalTwinsInstance Endpoints.
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsEndpointListResponse>
   */
  list(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.DigitalTwinsEndpointListResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param callback The callback
   */
  list(resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<Models.DigitalTwinsEndpointResourceListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DigitalTwinsEndpointResourceListResult>): void;
  list(resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DigitalTwinsEndpointResourceListResult>, callback?: msRest.ServiceCallback<Models.DigitalTwinsEndpointResourceListResult>): Promise<Models.DigitalTwinsEndpointListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DigitalTwinsEndpointListResponse>;
  }

  /**
   * Get DigitalTwinsInstances Endpoint.
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param endpointName Name of Endpoint Resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsEndpointGetResponse>
   */
  get(resourceGroupName: string, resourceName: string, endpointName: string, options?: msRest.RequestOptionsBase): Promise<Models.DigitalTwinsEndpointGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param endpointName Name of Endpoint Resource.
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, endpointName: string, callback: msRest.ServiceCallback<Models.DigitalTwinsEndpointResource>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param endpointName Name of Endpoint Resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, resourceName: string, endpointName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DigitalTwinsEndpointResource>): void;
  get(resourceGroupName: string, resourceName: string, endpointName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DigitalTwinsEndpointResource>, callback?: msRest.ServiceCallback<Models.DigitalTwinsEndpointResource>): Promise<Models.DigitalTwinsEndpointGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        endpointName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DigitalTwinsEndpointGetResponse>;
  }

  /**
   * Create or update DigitalTwinsInstance endpoint.
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param endpointName Name of Endpoint Resource.
   * @param properties DigitalTwinsInstance endpoint resource properties.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsEndpointCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, resourceName: string, endpointName: string, properties: Models.DigitalTwinsEndpointResourcePropertiesUnion, options?: msRest.RequestOptionsBase): Promise<Models.DigitalTwinsEndpointCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,resourceName,endpointName,properties,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DigitalTwinsEndpointCreateOrUpdateResponse>;
  }

  /**
   * Delete a DigitalTwinsInstance endpoint.
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param endpointName Name of Endpoint Resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsEndpointDeleteMethodResponse>
   */
  deleteMethod(resourceGroupName: string, resourceName: string, endpointName: string, options?: msRest.RequestOptionsBase): Promise<Models.DigitalTwinsEndpointDeleteMethodResponse> {
    return this.beginDeleteMethod(resourceGroupName,resourceName,endpointName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DigitalTwinsEndpointDeleteMethodResponse>;
  }

  /**
   * Create or update DigitalTwinsInstance endpoint.
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param endpointName Name of Endpoint Resource.
   * @param properties DigitalTwinsInstance endpoint resource properties.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, resourceName: string, endpointName: string, properties: Models.DigitalTwinsEndpointResourcePropertiesUnion, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        endpointName,
        properties,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Delete a DigitalTwinsInstance endpoint.
   * @param resourceGroupName The name of the resource group that contains the DigitalTwinsInstance.
   * @param resourceName The name of the DigitalTwinsInstance.
   * @param endpointName Name of Endpoint Resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, resourceName: string, endpointName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        endpointName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Get DigitalTwinsInstance Endpoints.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsEndpointListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DigitalTwinsEndpointListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DigitalTwinsEndpointResourceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DigitalTwinsEndpointResourceListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DigitalTwinsEndpointResourceListResult>, callback?: msRest.ServiceCallback<Models.DigitalTwinsEndpointResourceListResult>): Promise<Models.DigitalTwinsEndpointListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.DigitalTwinsEndpointListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}/endpoints",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DigitalTwinsEndpointResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}/endpoints/{endpointName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.endpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DigitalTwinsEndpointResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}/endpoints/{endpointName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.endpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      properties: "properties"
    },
    mapper: {
      ...Mappers.DigitalTwinsEndpointResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DigitalTwinsEndpointResource
    },
    201: {
      bodyMapper: Mappers.DigitalTwinsEndpointResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DigitalTwins/digitalTwinsInstances/{resourceName}/endpoints/{endpointName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName,
    Parameters.endpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DigitalTwinsEndpointResource
    },
    202: {
      bodyMapper: Mappers.DigitalTwinsEndpointResource
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DigitalTwinsEndpointResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
