/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

/**
 * A model definition and metadata for that model.
 */
export interface ModelData {
  /**
   * A language map that contains the localized display names as specified in the model definition.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * A language map that contains the localized descriptions as specified in the model definition.
   */
  description?: { [propertyName: string]: string };
  /**
   * The id of the model as specified in the model definition.
   */
  id: string;
  /**
   * The time the model was uploaded to the service.
   */
  uploadTime?: Date;
  /**
   * Indicates if the model is decommissioned. Decommissioned models cannot be referenced by newly created digital twins.
   */
  decommissioned?: boolean;
  /**
   * The model definition.
   */
  model?: any;
}

/**
 * Error response.
 */
export interface ErrorResponse {
  /**
   * The error details.
   */
  error?: ErrorModel;
}

/**
 * Error definition.
 */
export interface ErrorModel {
  /**
   * Service specific error code which serves as the substatus for the HTTP error code.
   */
  readonly code?: string;
  /**
   * A human-readable representation of the error.
   */
  readonly message?: string;
  /**
   * Internal error details.
   */
  readonly details?: ErrorModel[];
  /**
   * An object containing more specific information than the current object about the error.
   */
  innererror?: InnerError;
}

/**
 * A more specific error description than was provided by the containing error.
 */
export interface InnerError {
  /**
   * A more specific error code than was provided by the containing error.
   */
  code?: string;
  /**
   * An object containing more specific information than the current object about the error.
   */
  innererror?: InnerError;
}

/**
 * A collection of ModelData objects.
 */
export interface PagedModelDataCollection {
  /**
   * The ModelData objects.
   */
  value?: ModelData[];
  /**
   * A URI to retrieve the next page of objects.
   */
  nextLink?: string;
}

/**
 * A query specification containing either a query statement or a continuation token from a previous query result.
 */
export interface QuerySpecification {
  /**
   * The query to execute. This value is ignored if a continuation token is provided.
   */
  query?: string;
  /**
   * A token which is used to retrieve the next set of results from a previous query.
   */
  continuationToken?: string;
}

/**
 * The results of a query operation and an optional continuation token.
 */
export interface QueryResult {
  /**
   * The query results.
   */
  items?: any[];
  /**
   * A token which can be used to construct a new QuerySpecification to retrieve the next set of results.
   */
  continuationToken?: string;
}

/**
 * A collection of relationships which relate digital twins together.
 */
export interface RelationshipCollection {
  /**
   * The relationship objects.
   */
  value?: any[];
  /**
   * A URI to retrieve the next page of objects.
   */
  nextLink?: string;
}

/**
 * A collection of incoming relationships which relate digital twins together.
 */
export interface IncomingRelationshipCollection {
  value?: IncomingRelationship[];
  /**
   * A URI to retrieve the next page of objects.
   */
  nextLink?: string;
}

/**
 * An incoming relationship.
 */
export interface IncomingRelationship {
  /**
   * A user-provided string representing the id of this relationship, unique in the context of the source digital twin, i.e. sourceId + relationshipId is unique in the context of the service.
   */
  relationshipId?: string;
  /**
   * The id of the source digital twin.
   */
  sourceId?: string;
  /**
   * The name of the relationship.
   */
  relationshipName?: string;
  /**
   * Link to the relationship, to be used for deletion.
   */
  relationshipLink?: string;
}

/**
 * A collection of EventRoute objects.
 */
export interface EventRouteCollection {
  /**
   * The EventRoute objects.
   */
  value?: EventRoute[];
  /**
   * A URI to retrieve the next page of results.
   */
  nextLink?: string;
}

/**
 * A route which directs notification and telemetry events to an endpoint. Endpoints are a destination outside of Azure Digital Twins such as an EventHub.
 */
export interface EventRoute {
  /**
   * The id of the event route.
   */
  readonly id?: string;
  /**
   * The name of the endpoint this event route is bound to.
   */
  endpointName: string;
  /**
   * An expression which describes the events which are routed to the endpoint.
   */
  filter?: string;
}

/**
 * Defines headers for Query_queryTwins operation.
 */
export interface QueryQueryTwinsHeaders {
  /**
   * The query charge.
   */
  queryCharge?: number;
}

/**
 * Defines headers for DigitalTwins_getById operation.
 */
export interface DigitalTwinsGetByIdHeaders {
  /**
   * Weak Etag.
   */
  etag?: string;
}

/**
 * Defines headers for DigitalTwins_add operation.
 */
export interface DigitalTwinsAddHeaders {
  /**
   * Weak Etag.
   */
  etag?: string;
}

/**
 * Defines headers for DigitalTwins_update operation.
 */
export interface DigitalTwinsUpdateHeaders {
  /**
   * Weak Etag.
   */
  etag?: string;
}

/**
 * Defines headers for DigitalTwins_getRelationshipById operation.
 */
export interface DigitalTwinsGetRelationshipByIdHeaders {
  /**
   * Weak Etag.
   */
  etag?: string;
}

/**
 * Defines headers for DigitalTwins_addRelationship operation.
 */
export interface DigitalTwinsAddRelationshipHeaders {
  /**
   * Weak Etag.
   */
  etag?: string;
}

/**
 * Defines headers for DigitalTwins_updateRelationship operation.
 */
export interface DigitalTwinsUpdateRelationshipHeaders {
  /**
   * Weak Etag.
   */
  etag?: string;
}

/**
 * Defines headers for DigitalTwins_getComponent operation.
 */
export interface DigitalTwinsGetComponentHeaders {
  /**
   * Weak Etag.
   */
  etag?: string;
}

/**
 * Defines headers for DigitalTwins_updateComponent operation.
 */
export interface DigitalTwinsUpdateComponentHeaders {
  /**
   * Weak Etag.
   */
  etag?: string;
}

/**
 * Parameter group
 */
export interface DigitalTwinModelsListOptions {
  /**
   * The maximum number of items to retrieve per request. The server may choose to return less than the requested max.
   */
  maxItemCount?: number;
}

/**
 * Parameter group
 */
export interface EventRoutesListOptions {
  /**
   * The maximum number of items to retrieve per request. The server may choose to return less than the requested max.
   */
  maxItemCount?: number;
}

/**
 * Optional parameters.
 */
export interface DigitalTwinModelsAddOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An array of models to add.
   */
  models?: any[];
}

/**
 * Contains response data for the add operation.
 */
export type DigitalTwinModelsAddResponse = ModelData[] & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ModelData[];
  };
};

/**
 * Optional parameters.
 */
export interface DigitalTwinModelsListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  digitalTwinModelsListOptions?: DigitalTwinModelsListOptions;
  /**
   * The set of the models which will have their dependencies retrieved. If omitted, all models are retrieved.
   */
  dependenciesFor?: string[];
  /**
   * When true the model definition will be returned as part of the result.
   */
  includeModelDefinition?: boolean;
}

/**
 * Contains response data for the list operation.
 */
export type DigitalTwinModelsListResponse = PagedModelDataCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PagedModelDataCollection;
  };
};

/**
 * Optional parameters.
 */
export interface DigitalTwinModelsGetByIdOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * When true the model definition will be returned as part of the result.
   */
  includeModelDefinition?: boolean;
}

/**
 * Contains response data for the getById operation.
 */
export type DigitalTwinModelsGetByIdResponse = ModelData & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ModelData;
  };
};

/**
 * Optional parameters.
 */
export interface DigitalTwinModelsListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  digitalTwinModelsListOptions?: DigitalTwinModelsListOptions;
  /**
   * The set of the models which will have their dependencies retrieved. If omitted, all models are retrieved.
   */
  dependenciesFor?: string[];
  /**
   * When true the model definition will be returned as part of the result.
   */
  includeModelDefinition?: boolean;
}

/**
 * Contains response data for the listNext operation.
 */
export type DigitalTwinModelsListNextResponse = PagedModelDataCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PagedModelDataCollection;
  };
};

/**
 * Contains response data for the queryTwins operation.
 */
export type QueryQueryTwinsResponse = QueryQueryTwinsHeaders &
  QueryResult & {
    /**
     * The underlying HTTP response.
     */
    _response: coreHttp.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QueryResult;
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: QueryQueryTwinsHeaders;
    };
  };

/**
 * Contains response data for the getById operation.
 */
export type DigitalTwinsGetByIdResponse = DigitalTwinsGetByIdHeaders & {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: DigitalTwinsGetByIdHeaders;
  };
};

/**
 * Contains response data for the add operation.
 */
export type DigitalTwinsAddResponse = DigitalTwinsAddHeaders & {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: DigitalTwinsAddHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface DigitalTwinsDeleteOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
   */
  ifMatch?: string;
}

/**
 * Optional parameters.
 */
export interface DigitalTwinsUpdateOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
   */
  ifMatch?: string;
}

/**
 * Contains response data for the update operation.
 */
export type DigitalTwinsUpdateResponse = DigitalTwinsUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: DigitalTwinsUpdateHeaders;
  };
};

/**
 * Contains response data for the getRelationshipById operation.
 */
export type DigitalTwinsGetRelationshipByIdResponse = DigitalTwinsGetRelationshipByIdHeaders & {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: DigitalTwinsGetRelationshipByIdHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface DigitalTwinsAddRelationshipOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The data for the relationship.
   */
  relationship?: any;
}

/**
 * Contains response data for the addRelationship operation.
 */
export type DigitalTwinsAddRelationshipResponse = DigitalTwinsAddRelationshipHeaders & {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: DigitalTwinsAddRelationshipHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface DigitalTwinsDeleteRelationshipOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
   */
  ifMatch?: string;
}

/**
 * Optional parameters.
 */
export interface DigitalTwinsUpdateRelationshipOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
   */
  ifMatch?: string;
  /**
   * JSON Patch description of the update to the relationship properties.
   */
  patchDocument?: any[];
}

/**
 * Contains response data for the updateRelationship operation.
 */
export type DigitalTwinsUpdateRelationshipResponse = DigitalTwinsUpdateRelationshipHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: DigitalTwinsUpdateRelationshipHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface DigitalTwinsListRelationshipsOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The name of the relationship.
   */
  relationshipName?: string;
}

/**
 * Contains response data for the listRelationships operation.
 */
export type DigitalTwinsListRelationshipsResponse = RelationshipCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelationshipCollection;
  };
};

/**
 * Contains response data for the listIncomingRelationships operation.
 */
export type DigitalTwinsListIncomingRelationshipsResponse = IncomingRelationshipCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IncomingRelationshipCollection;
  };
};

/**
 * Optional parameters.
 */
export interface DigitalTwinsSendTelemetryOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An RFC 3339 timestamp that identifies the time the telemetry was measured.
   */
  timestamp?: string;
}

/**
 * Optional parameters.
 */
export interface DigitalTwinsSendComponentTelemetryOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * An RFC 3339 timestamp that identifies the time the telemetry was measured.
   */
  timestamp?: string;
}

/**
 * Contains response data for the getComponent operation.
 */
export type DigitalTwinsGetComponentResponse = DigitalTwinsGetComponentHeaders & {
  /**
   * The parsed response body.
   */
  body: any;

  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: any;
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: DigitalTwinsGetComponentHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface DigitalTwinsUpdateComponentOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Only perform the operation if the entity's etag matches one of the etags provided or * is provided.
   */
  ifMatch?: string;
  /**
   * An update specification described by JSON Patch. Updates to property values and $model elements may happen in the same request. Operations are limited to add, replace and remove.
   */
  patchDocument?: any[];
}

/**
 * Contains response data for the updateComponent operation.
 */
export type DigitalTwinsUpdateComponentResponse = DigitalTwinsUpdateComponentHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The parsed HTTP response headers.
     */
    parsedHeaders: DigitalTwinsUpdateComponentHeaders;
  };
};

/**
 * Optional parameters.
 */
export interface DigitalTwinsListRelationshipsNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The name of the relationship.
   */
  relationshipName?: string;
}

/**
 * Contains response data for the listRelationshipsNext operation.
 */
export type DigitalTwinsListRelationshipsNextResponse = RelationshipCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: RelationshipCollection;
  };
};

/**
 * Contains response data for the listIncomingRelationshipsNext operation.
 */
export type DigitalTwinsListIncomingRelationshipsNextResponse = IncomingRelationshipCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: IncomingRelationshipCollection;
  };
};

/**
 * Optional parameters.
 */
export interface EventRoutesListOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  eventRoutesListOptions?: EventRoutesListOptions;
}

/**
 * Contains response data for the list operation.
 */
export type EventRoutesListResponse = EventRouteCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventRouteCollection;
  };
};

/**
 * Contains response data for the getById operation.
 */
export type EventRoutesGetByIdResponse = EventRoute & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventRoute;
  };
};

/**
 * Optional parameters.
 */
export interface EventRoutesAddOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * The event route data
   */
  eventRoute?: EventRoute;
}

/**
 * Optional parameters.
 */
export interface EventRoutesListNextOptionalParams
  extends coreHttp.OperationOptions {
  /**
   * Parameter group
   */
  eventRoutesListOptions?: EventRoutesListOptions;
}

/**
 * Contains response data for the listNext operation.
 */
export type EventRoutesListNextResponse = EventRouteCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: EventRouteCollection;
  };
};

/**
 * Optional parameters.
 */
export interface AzureDigitalTwinsAPIOptionalParams
  extends coreHttp.ServiceClientOptions {
  /**
   * server parameter
   */
  $host?: string;
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
