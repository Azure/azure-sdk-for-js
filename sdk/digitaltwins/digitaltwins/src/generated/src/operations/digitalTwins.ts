/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/digitalTwinsMappers";
import * as Parameters from "../models/parameters";
import { AzureDigitalTwinsAPIContext } from "../azureDigitalTwinsAPIContext";

/** Class representing a DigitalTwins. */
export class DigitalTwins {
  private readonly client: AzureDigitalTwinsAPIContext;

  /**
   * Create a DigitalTwins.
   * @param {AzureDigitalTwinsAPIContext} client Reference to the service client.
   */
  constructor(client: AzureDigitalTwinsAPIContext) {
    this.client = client;
  }

  /**
   * Retrieves a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 404 (Not Found): There is no digital twin with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsGetByIdResponse>
   */
  getById(id: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DigitalTwinsGetByIdResponse>;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param callback The callback
   */
  getById(id: string, callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  getById(id: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<any>): void;
  getById(id: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<any>, callback?: coreHttp.ServiceCallback<any>): Promise<Models.DigitalTwinsGetByIdResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      getByIdOperationSpec,
      callback) as Promise<Models.DigitalTwinsGetByIdResponse>;
  }

  /**
   * Adds or replaces a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 412 (Precondition Failed): The model is decommissioned or the digital twin already exists (when
   * using If-None-Match: *).
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsAddResponse>
   */
  add(id: string, twin: any, options?: Models.DigitalTwinsAddOptionalParams): Promise<Models.DigitalTwinsAddResponse>;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.
   * @param callback The callback
   */
  add(id: string, twin: any, callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.
   * @param options The optional parameters
   * @param callback The callback
   */
  add(id: string, twin: any, options: Models.DigitalTwinsAddOptionalParams, callback: coreHttp.ServiceCallback<any>): void;
  add(id: string, twin: any, options?: Models.DigitalTwinsAddOptionalParams | coreHttp.ServiceCallback<any>, callback?: coreHttp.ServiceCallback<any>): Promise<Models.DigitalTwinsAddResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        twin,
        options
      },
      addOperationSpec,
      callback) as Promise<Models.DigitalTwinsAddResponse>;
  }

  /**
   * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is no digital twin with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteMethod(id: string, options?: Models.DigitalTwinsDeleteMethodOptionalParams): Promise<coreHttp.RestResponse>;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param callback The callback
   */
  deleteMethod(id: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(id: string, options: Models.DigitalTwinsDeleteMethodOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  deleteMethod(id: string, options?: Models.DigitalTwinsDeleteMethodOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is no digital twin with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param patchDocument An update specification described by JSON Patch. Updates to property values
   * and $model elements may happen in the same request. Operations are limited to add, replace and
   * remove.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsUpdateResponse>
   */
  update(id: string, patchDocument: any[], options?: Models.DigitalTwinsUpdateOptionalParams): Promise<Models.DigitalTwinsUpdateResponse>;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param patchDocument An update specification described by JSON Patch. Updates to property values
   * and $model elements may happen in the same request. Operations are limited to add, replace and
   * remove.
   * @param callback The callback
   */
  update(id: string, patchDocument: any[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param patchDocument An update specification described by JSON Patch. Updates to property values
   * and $model elements may happen in the same request. Operations are limited to add, replace and
   * remove.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(id: string, patchDocument: any[], options: Models.DigitalTwinsUpdateOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  update(id: string, patchDocument: any[], options?: Models.DigitalTwinsUpdateOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DigitalTwinsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        patchDocument,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.DigitalTwinsUpdateResponse>;
  }

  /**
   * Retrieves a relationship between two digital twins.
   * Status codes:
   * 200 (OK): Success.
   * 404 (Not Found): There is either no digital twin or relationship with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and
   * case sensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsGetRelationshipByIdResponse>
   */
  getRelationshipById(id: string, relationshipId: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DigitalTwinsGetRelationshipByIdResponse>;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and
   * case sensitive.
   * @param callback The callback
   */
  getRelationshipById(id: string, relationshipId: string, callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and
   * case sensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  getRelationshipById(id: string, relationshipId: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<any>): void;
  getRelationshipById(id: string, relationshipId: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<any>, callback?: coreHttp.ServiceCallback<any>): Promise<Models.DigitalTwinsGetRelationshipByIdResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        relationshipId,
        options
      },
      getRelationshipByIdOperationSpec,
      callback) as Promise<Models.DigitalTwinsGetRelationshipByIdResponse>;
  }

  /**
   * Adds a relationship between two digital twins.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is either no digital twin, target digital twin, or relationship with the
   * provided id.
   * 409 (Conflict): A relationship with the provided id already exists.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and
   * case sensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsAddRelationshipResponse>
   */
  addRelationship(id: string, relationshipId: string, options?: Models.DigitalTwinsAddRelationshipOptionalParams): Promise<Models.DigitalTwinsAddRelationshipResponse>;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and
   * case sensitive.
   * @param callback The callback
   */
  addRelationship(id: string, relationshipId: string, callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and
   * case sensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  addRelationship(id: string, relationshipId: string, options: Models.DigitalTwinsAddRelationshipOptionalParams, callback: coreHttp.ServiceCallback<any>): void;
  addRelationship(id: string, relationshipId: string, options?: Models.DigitalTwinsAddRelationshipOptionalParams | coreHttp.ServiceCallback<any>, callback?: coreHttp.ServiceCallback<any>): Promise<Models.DigitalTwinsAddRelationshipResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        relationshipId,
        options
      },
      addRelationshipOperationSpec,
      callback) as Promise<Models.DigitalTwinsAddRelationshipResponse>;
  }

  /**
   * Deletes a relationship between two digital twins.
   * Status codes:
   * 200 (OK): Success.
   * 404 (Not Found): There is either no digital twin or relationship with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and
   * case sensitive.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteRelationship(id: string, relationshipId: string, options?: Models.DigitalTwinsDeleteRelationshipOptionalParams): Promise<coreHttp.RestResponse>;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and
   * case sensitive.
   * @param callback The callback
   */
  deleteRelationship(id: string, relationshipId: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and
   * case sensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRelationship(id: string, relationshipId: string, options: Models.DigitalTwinsDeleteRelationshipOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  deleteRelationship(id: string, relationshipId: string, options?: Models.DigitalTwinsDeleteRelationshipOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        relationshipId,
        options
      },
      deleteRelationshipOperationSpec,
      callback);
  }

  /**
   * Updates the properties on a relationship between two digital twins.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is either no digital twin or relationship with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and
   * case sensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsUpdateRelationshipResponse>
   */
  updateRelationship(id: string, relationshipId: string, options?: Models.DigitalTwinsUpdateRelationshipOptionalParams): Promise<Models.DigitalTwinsUpdateRelationshipResponse>;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and
   * case sensitive.
   * @param callback The callback
   */
  updateRelationship(id: string, relationshipId: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and
   * case sensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateRelationship(id: string, relationshipId: string, options: Models.DigitalTwinsUpdateRelationshipOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  updateRelationship(id: string, relationshipId: string, options?: Models.DigitalTwinsUpdateRelationshipOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DigitalTwinsUpdateRelationshipResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        relationshipId,
        options
      },
      updateRelationshipOperationSpec,
      callback) as Promise<Models.DigitalTwinsUpdateRelationshipResponse>;
  }

  /**
   * Retrieves the relationships from a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is no digital twin with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsListRelationshipsResponse>
   */
  listRelationships(id: string, options?: Models.DigitalTwinsListRelationshipsOptionalParams): Promise<Models.DigitalTwinsListRelationshipsResponse>;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param callback The callback
   */
  listRelationships(id: string, callback: coreHttp.ServiceCallback<Models.RelationshipCollection>): void;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRelationships(id: string, options: Models.DigitalTwinsListRelationshipsOptionalParams, callback: coreHttp.ServiceCallback<Models.RelationshipCollection>): void;
  listRelationships(id: string, options?: Models.DigitalTwinsListRelationshipsOptionalParams | coreHttp.ServiceCallback<Models.RelationshipCollection>, callback?: coreHttp.ServiceCallback<Models.RelationshipCollection>): Promise<Models.DigitalTwinsListRelationshipsResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      listRelationshipsOperationSpec,
      callback) as Promise<Models.DigitalTwinsListRelationshipsResponse>;
  }

  /**
   * Retrieves all incoming relationship for a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is no digital twin with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsListIncomingRelationshipsResponse>
   */
  listIncomingRelationships(id: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DigitalTwinsListIncomingRelationshipsResponse>;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param callback The callback
   */
  listIncomingRelationships(id: string, callback: coreHttp.ServiceCallback<Models.IncomingRelationshipCollection>): void;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listIncomingRelationships(id: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.IncomingRelationshipCollection>): void;
  listIncomingRelationships(id: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.IncomingRelationshipCollection>, callback?: coreHttp.ServiceCallback<Models.IncomingRelationshipCollection>): Promise<Models.DigitalTwinsListIncomingRelationshipsResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      listIncomingRelationshipsOperationSpec,
      callback) as Promise<Models.DigitalTwinsListIncomingRelationshipsResponse>;
  }

  /**
   * Sends telemetry on behalf of a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is no digital twin with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param telemetry The telemetry measurements to send from the digital twin.
   * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly
   * used for de-duplicating messages.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  sendTelemetry(id: string, telemetry: any, dtId: string, options?: Models.DigitalTwinsSendTelemetryOptionalParams): Promise<coreHttp.RestResponse>;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param telemetry The telemetry measurements to send from the digital twin.
   * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly
   * used for de-duplicating messages.
   * @param callback The callback
   */
  sendTelemetry(id: string, telemetry: any, dtId: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param telemetry The telemetry measurements to send from the digital twin.
   * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly
   * used for de-duplicating messages.
   * @param options The optional parameters
   * @param callback The callback
   */
  sendTelemetry(id: string, telemetry: any, dtId: string, options: Models.DigitalTwinsSendTelemetryOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  sendTelemetry(id: string, telemetry: any, dtId: string, options?: Models.DigitalTwinsSendTelemetryOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        telemetry,
        dtId,
        options
      },
      sendTelemetryOperationSpec,
      callback);
  }

  /**
   * Sends telemetry on behalf of a component in a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is either no digital twin with the provided id or the component path is
   * invalid.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param telemetry The telemetry measurements to send from the digital twin's component.
   * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly
   * used for de-duplicating messages.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  sendComponentTelemetry(id: string, componentPath: string, telemetry: any, dtId: string, options?: Models.DigitalTwinsSendComponentTelemetryOptionalParams): Promise<coreHttp.RestResponse>;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param telemetry The telemetry measurements to send from the digital twin's component.
   * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly
   * used for de-duplicating messages.
   * @param callback The callback
   */
  sendComponentTelemetry(id: string, componentPath: string, telemetry: any, dtId: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param telemetry The telemetry measurements to send from the digital twin's component.
   * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly
   * used for de-duplicating messages.
   * @param options The optional parameters
   * @param callback The callback
   */
  sendComponentTelemetry(id: string, componentPath: string, telemetry: any, dtId: string, options: Models.DigitalTwinsSendComponentTelemetryOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  sendComponentTelemetry(id: string, componentPath: string, telemetry: any, dtId: string, options?: Models.DigitalTwinsSendComponentTelemetryOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        componentPath,
        telemetry,
        dtId,
        options
      },
      sendComponentTelemetryOperationSpec,
      callback);
  }

  /**
   * Retrieves a component from a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 404 (Not Found): There is either no digital twin with the provided id or the component path is
   * invalid.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsGetComponentResponse>
   */
  getComponent(id: string, componentPath: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DigitalTwinsGetComponentResponse>;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param callback The callback
   */
  getComponent(id: string, componentPath: string, callback: coreHttp.ServiceCallback<any>): void;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param options The optional parameters
   * @param callback The callback
   */
  getComponent(id: string, componentPath: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<any>): void;
  getComponent(id: string, componentPath: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<any>, callback?: coreHttp.ServiceCallback<any>): Promise<Models.DigitalTwinsGetComponentResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        componentPath,
        options
      },
      getComponentOperationSpec,
      callback) as Promise<Models.DigitalTwinsGetComponentResponse>;
  }

  /**
   * Updates a component on a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is either no digital twin with the provided id or the component path is
   * invalid.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsUpdateComponentResponse>
   */
  updateComponent(id: string, componentPath: string, options?: Models.DigitalTwinsUpdateComponentOptionalParams): Promise<Models.DigitalTwinsUpdateComponentResponse>;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param callback The callback
   */
  updateComponent(id: string, componentPath: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateComponent(id: string, componentPath: string, options: Models.DigitalTwinsUpdateComponentOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  updateComponent(id: string, componentPath: string, options?: Models.DigitalTwinsUpdateComponentOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.DigitalTwinsUpdateComponentResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        componentPath,
        options
      },
      updateComponentOperationSpec,
      callback) as Promise<Models.DigitalTwinsUpdateComponentResponse>;
  }

  /**
   * Retrieves the relationships from a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is no digital twin with the provided id.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsListRelationshipsNextResponse>
   */
  listRelationshipsNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DigitalTwinsListRelationshipsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listRelationshipsNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.RelationshipCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listRelationshipsNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.RelationshipCollection>): void;
  listRelationshipsNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.RelationshipCollection>, callback?: coreHttp.ServiceCallback<Models.RelationshipCollection>): Promise<Models.DigitalTwinsListRelationshipsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listRelationshipsNextOperationSpec,
      callback) as Promise<Models.DigitalTwinsListRelationshipsNextResponse>;
  }

  /**
   * Retrieves all incoming relationship for a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is no digital twin with the provided id.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DigitalTwinsListIncomingRelationshipsNextResponse>
   */
  listIncomingRelationshipsNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DigitalTwinsListIncomingRelationshipsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listIncomingRelationshipsNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.IncomingRelationshipCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listIncomingRelationshipsNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.IncomingRelationshipCollection>): void;
  listIncomingRelationshipsNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.IncomingRelationshipCollection>, callback?: coreHttp.ServiceCallback<Models.IncomingRelationshipCollection>): Promise<Models.DigitalTwinsListIncomingRelationshipsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listIncomingRelationshipsNextOperationSpec,
      callback) as Promise<Models.DigitalTwinsListIncomingRelationshipsNextResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getByIdOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "digitaltwins/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      },
      headersMapper: Mappers.DigitalTwinsGetByIdHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.DigitalTwinsGetByIdHeaders
    }
  },
  serializer
};

const addOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "digitaltwins/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifNoneMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "twin",
    mapper: {
      required: true,
      serializedName: "twin",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      },
      headersMapper: Mappers.DigitalTwinsAddHeaders
    },
    202: {
      headersMapper: Mappers.DigitalTwinsAddHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.DigitalTwinsAddHeaders
    }
  },
  serializer
};

const deleteMethodOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "digitaltwins/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "digitaltwins/{id}",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "patchDocument",
    mapper: {
      required: true,
      serializedName: "patchDocument",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Object"
          }
        }
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.DigitalTwinsUpdateHeaders
    },
    204: {
      headersMapper: Mappers.DigitalTwinsUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.DigitalTwinsUpdateHeaders
    }
  },
  serializer
};

const getRelationshipByIdOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "digitaltwins/{id}/relationships/{relationshipId}",
  urlParameters: [
    Parameters.id,
    Parameters.relationshipId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      },
      headersMapper: Mappers.DigitalTwinsGetRelationshipByIdHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.DigitalTwinsGetRelationshipByIdHeaders
    }
  },
  serializer
};

const addRelationshipOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "digitaltwins/{id}/relationships/{relationshipId}",
  urlParameters: [
    Parameters.id,
    Parameters.relationshipId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifNoneMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "relationship"
    ],
    mapper: {
      serializedName: "relationship",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      },
      headersMapper: Mappers.DigitalTwinsAddRelationshipHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.DigitalTwinsAddRelationshipHeaders
    }
  },
  serializer
};

const deleteRelationshipOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "digitaltwins/{id}/relationships/{relationshipId}",
  urlParameters: [
    Parameters.id,
    Parameters.relationshipId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateRelationshipOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "digitaltwins/{id}/relationships/{relationshipId}",
  urlParameters: [
    Parameters.id,
    Parameters.relationshipId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "patchDocument"
    ],
    mapper: {
      serializedName: "patchDocument",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Object"
          }
        }
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    204: {
      headersMapper: Mappers.DigitalTwinsUpdateRelationshipHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.DigitalTwinsUpdateRelationshipHeaders
    }
  },
  serializer
};

const listRelationshipsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "digitaltwins/{id}/relationships",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.relationshipName,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RelationshipCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listIncomingRelationshipsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "digitaltwins/{id}/incomingrelationships",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IncomingRelationshipCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const sendTelemetryOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "digitaltwins/{id}/telemetry",
  urlParameters: [
    Parameters.id
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.dtId,
    Parameters.dtTimestamp,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "telemetry",
    mapper: {
      required: true,
      serializedName: "telemetry",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const sendComponentTelemetryOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "digitaltwins/{id}/components/{componentPath}/telemetry",
  urlParameters: [
    Parameters.id,
    Parameters.componentPath
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.dtId,
    Parameters.dtTimestamp,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "telemetry",
    mapper: {
      required: true,
      serializedName: "telemetry",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getComponentOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "digitaltwins/{id}/components/{componentPath}",
  urlParameters: [
    Parameters.id,
    Parameters.componentPath
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      },
      headersMapper: Mappers.DigitalTwinsGetComponentHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.DigitalTwinsGetComponentHeaders
    }
  },
  serializer
};

const updateComponentOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "digitaltwins/{id}/components/{componentPath}",
  urlParameters: [
    Parameters.id,
    Parameters.componentPath
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "patchDocument"
    ],
    mapper: {
      serializedName: "patchDocument",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Object"
          }
        }
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.DigitalTwinsUpdateComponentHeaders
    },
    204: {
      headersMapper: Mappers.DigitalTwinsUpdateComponentHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.DigitalTwinsUpdateComponentHeaders
    }
  },
  serializer
};

const listRelationshipsNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://digitaltwins-name.digitaltwins.azure.net",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RelationshipCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listIncomingRelationshipsNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://digitaltwins-name.digitaltwins.azure.net",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IncomingRelationshipCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
