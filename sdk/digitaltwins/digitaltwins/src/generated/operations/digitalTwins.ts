/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureDigitalTwinsAPI } from "../azureDigitalTwinsAPI";
import {
  DigitalTwinsGetByIdResponse,
  DigitalTwinsAddResponse,
  DigitalTwinsDeleteOptionalParams,
  DigitalTwinsUpdateOptionalParams,
  DigitalTwinsUpdateResponse,
  DigitalTwinsGetRelationshipByIdResponse,
  DigitalTwinsAddRelationshipOptionalParams,
  DigitalTwinsAddRelationshipResponse,
  DigitalTwinsDeleteRelationshipOptionalParams,
  DigitalTwinsUpdateRelationshipOptionalParams,
  DigitalTwinsUpdateRelationshipResponse,
  DigitalTwinsListRelationshipsOptionalParams,
  DigitalTwinsListRelationshipsResponse,
  DigitalTwinsListIncomingRelationshipsResponse,
  DigitalTwinsSendTelemetryOptionalParams,
  DigitalTwinsSendComponentTelemetryOptionalParams,
  DigitalTwinsGetComponentResponse,
  DigitalTwinsUpdateComponentOptionalParams,
  DigitalTwinsUpdateComponentResponse,
  DigitalTwinsListRelationshipsNextOptionalParams,
  DigitalTwinsListRelationshipsNextResponse,
  DigitalTwinsListIncomingRelationshipsNextResponse
} from "../models";

/**
 * Class representing a DigitalTwins.
 */
export class DigitalTwins {
  private readonly client: AzureDigitalTwinsAPI;

  /**
   * Initialize a new instance of the class DigitalTwins class.
   * @param client Reference to the service client
   */
  constructor(client: AzureDigitalTwinsAPI) {
    this.client = client;
  }

  /**
   * Retrieves a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 404 (Not Found): There is no digital twin with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param options The options parameters.
   */
  getById(
    id: string,
    options?: coreHttp.OperationOptions
  ): Promise<DigitalTwinsGetByIdResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, options: operationOptions },
      getByIdOperationSpec
    ) as Promise<DigitalTwinsGetByIdResponse>;
  }

  /**
   * Adds or replaces a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 412 (Precondition Failed): The model is decommissioned or the digital twin already exists (when
   * using If-None-Match: *).
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.
   * @param options The options parameters.
   */
  add(
    id: string,
    twin: any,
    options?: coreHttp.OperationOptions
  ): Promise<DigitalTwinsAddResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, twin, options: operationOptions },
      addOperationSpec
    ) as Promise<DigitalTwinsAddResponse>;
  }

  /**
   * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is no digital twin with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param options The options parameters.
   */
  delete(
    id: string,
    options?: DigitalTwinsDeleteOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, options: operationOptions },
      deleteOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Updates a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is no digital twin with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param patchDocument An update specification described by JSON Patch. Updates to property values and
   *                      $model elements may happen in the same request. Operations are limited to add, replace and remove.
   * @param options The options parameters.
   */
  update(
    id: string,
    patchDocument: any[],
    options?: DigitalTwinsUpdateOptionalParams
  ): Promise<DigitalTwinsUpdateResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, patchDocument, options: operationOptions },
      updateOperationSpec
    ) as Promise<DigitalTwinsUpdateResponse>;
  }

  /**
   * Retrieves a relationship between two digital twins.
   * Status codes:
   * 200 (OK): Success.
   * 404 (Not Found): There is either no digital twin or relationship with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case
   *                       sensitive.
   * @param options The options parameters.
   */
  getRelationshipById(
    id: string,
    relationshipId: string,
    options?: coreHttp.OperationOptions
  ): Promise<DigitalTwinsGetRelationshipByIdResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, relationshipId, options: operationOptions },
      getRelationshipByIdOperationSpec
    ) as Promise<DigitalTwinsGetRelationshipByIdResponse>;
  }

  /**
   * Adds a relationship between two digital twins.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is either no digital twin, target digital twin, or relationship with the
   * provided id.
   * 409 (Conflict): A relationship with the provided id already exists.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case
   *                       sensitive.
   * @param options The options parameters.
   */
  addRelationship(
    id: string,
    relationshipId: string,
    options?: DigitalTwinsAddRelationshipOptionalParams
  ): Promise<DigitalTwinsAddRelationshipResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, relationshipId, options: operationOptions },
      addRelationshipOperationSpec
    ) as Promise<DigitalTwinsAddRelationshipResponse>;
  }

  /**
   * Deletes a relationship between two digital twins.
   * Status codes:
   * 200 (OK): Success.
   * 404 (Not Found): There is either no digital twin or relationship with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case
   *                       sensitive.
   * @param options The options parameters.
   */
  deleteRelationship(
    id: string,
    relationshipId: string,
    options?: DigitalTwinsDeleteRelationshipOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, relationshipId, options: operationOptions },
      deleteRelationshipOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Updates the properties on a relationship between two digital twins.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is either no digital twin or relationship with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case
   *                       sensitive.
   * @param options The options parameters.
   */
  updateRelationship(
    id: string,
    relationshipId: string,
    options?: DigitalTwinsUpdateRelationshipOptionalParams
  ): Promise<DigitalTwinsUpdateRelationshipResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, relationshipId, options: operationOptions },
      updateRelationshipOperationSpec
    ) as Promise<DigitalTwinsUpdateRelationshipResponse>;
  }

  /**
   * Retrieves the relationships from a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is no digital twin with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param options The options parameters.
   */
  listRelationships(
    id: string,
    options?: DigitalTwinsListRelationshipsOptionalParams
  ): Promise<DigitalTwinsListRelationshipsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, options: operationOptions },
      listRelationshipsOperationSpec
    ) as Promise<DigitalTwinsListRelationshipsResponse>;
  }

  /**
   * Retrieves all incoming relationship for a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is no digital twin with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param options The options parameters.
   */
  listIncomingRelationships(
    id: string,
    options?: coreHttp.OperationOptions
  ): Promise<DigitalTwinsListIncomingRelationshipsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, options: operationOptions },
      listIncomingRelationshipsOperationSpec
    ) as Promise<DigitalTwinsListIncomingRelationshipsResponse>;
  }

  /**
   * Sends telemetry on behalf of a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is no digital twin with the provided id.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used
   *             for de-duplicating messages.
   * @param telemetry The telemetry measurements to send from the digital twin.
   * @param options The options parameters.
   */
  sendTelemetry(
    id: string,
    dtId: string,
    telemetry: any,
    options?: DigitalTwinsSendTelemetryOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, dtId, telemetry, options: operationOptions },
      sendTelemetryOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Sends telemetry on behalf of a component in a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is either no digital twin with the provided id or the component path is
   * invalid.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param dtId A unique message identifier (in the scope of the digital twin id) that is commonly used
   *             for de-duplicating messages.
   * @param telemetry The telemetry measurements to send from the digital twin's component.
   * @param options The options parameters.
   */
  sendComponentTelemetry(
    id: string,
    componentPath: string,
    dtId: string,
    telemetry: any,
    options?: DigitalTwinsSendComponentTelemetryOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, componentPath, dtId, telemetry, options: operationOptions },
      sendComponentTelemetryOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Retrieves a component from a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 404 (Not Found): There is either no digital twin with the provided id or the component path is
   * invalid.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param options The options parameters.
   */
  getComponent(
    id: string,
    componentPath: string,
    options?: coreHttp.OperationOptions
  ): Promise<DigitalTwinsGetComponentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, componentPath, options: operationOptions },
      getComponentOperationSpec
    ) as Promise<DigitalTwinsGetComponentResponse>;
  }

  /**
   * Updates a component on a digital twin.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * 404 (Not Found): There is either no digital twin with the provided id or the component path is
   * invalid.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param options The options parameters.
   */
  updateComponent(
    id: string,
    componentPath: string,
    options?: DigitalTwinsUpdateComponentOptionalParams
  ): Promise<DigitalTwinsUpdateComponentResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, componentPath, options: operationOptions },
      updateComponentOperationSpec
    ) as Promise<DigitalTwinsUpdateComponentResponse>;
  }

  /**
   * ListRelationshipsNext
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param nextLink The nextLink from the previous successful call to the ListRelationships method.
   * @param options The options parameters.
   */
  listRelationshipsNext(
    id: string,
    nextLink: string,
    options?: DigitalTwinsListRelationshipsNextOptionalParams
  ): Promise<DigitalTwinsListRelationshipsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, nextLink, options: operationOptions },
      listRelationshipsNextOperationSpec
    ) as Promise<DigitalTwinsListRelationshipsNextResponse>;
  }

  /**
   * ListIncomingRelationshipsNext
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param nextLink The nextLink from the previous successful call to the ListIncomingRelationships
   *                 method.
   * @param options The options parameters.
   */
  listIncomingRelationshipsNext(
    id: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<DigitalTwinsListIncomingRelationshipsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { id, nextLink, options: operationOptions },
      listIncomingRelationshipsNextOperationSpec
    ) as Promise<DigitalTwinsListIncomingRelationshipsNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getByIdOperationSpec: coreHttp.OperationSpec = {
  path: "/digitaltwins/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" } },
      headersMapper: Mappers.DigitalTwinsGetByIdHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  serializer
};
const addOperationSpec: coreHttp.OperationSpec = {
  path: "/digitaltwins/{id}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" } },
      headersMapper: Mappers.DigitalTwinsAddHeaders
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.twin,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.contentType, Parameters.ifNoneMatch],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreHttp.OperationSpec = {
  path: "/digitaltwins/{id}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.ifMatch],
  serializer
};
const updateOperationSpec: coreHttp.OperationSpec = {
  path: "/digitaltwins/{id}",
  httpMethod: "PATCH",
  responses: {
    202: {},
    204: {
      headersMapper: Mappers.DigitalTwinsUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.patchDocument,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.contentType1, Parameters.ifMatch],
  mediaType: "json",
  serializer
};
const getRelationshipByIdOperationSpec: coreHttp.OperationSpec = {
  path: "/digitaltwins/{id}/relationships/{relationshipId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" } },
      headersMapper: Mappers.DigitalTwinsGetRelationshipByIdHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],
  serializer
};
const addRelationshipOperationSpec: coreHttp.OperationSpec = {
  path: "/digitaltwins/{id}/relationships/{relationshipId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" } },
      headersMapper: Mappers.DigitalTwinsAddRelationshipHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.relationship,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],
  headerParameters: [Parameters.contentType, Parameters.ifNoneMatch],
  mediaType: "json",
  serializer
};
const deleteRelationshipOperationSpec: coreHttp.OperationSpec = {
  path: "/digitaltwins/{id}/relationships/{relationshipId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],
  headerParameters: [Parameters.ifMatch],
  serializer
};
const updateRelationshipOperationSpec: coreHttp.OperationSpec = {
  path: "/digitaltwins/{id}/relationships/{relationshipId}",
  httpMethod: "PATCH",
  responses: {
    204: {
      headersMapper: Mappers.DigitalTwinsUpdateRelationshipHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.patchDocument1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],
  headerParameters: [Parameters.contentType1, Parameters.ifMatch],
  mediaType: "json",
  serializer
};
const listRelationshipsOperationSpec: coreHttp.OperationSpec = {
  path: "/digitaltwins/{id}/relationships",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RelationshipCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.relationshipName],
  urlParameters: [Parameters.$host, Parameters.id],
  serializer
};
const listIncomingRelationshipsOperationSpec: coreHttp.OperationSpec = {
  path: "/digitaltwins/{id}/incomingrelationships",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IncomingRelationshipCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  serializer
};
const sendTelemetryOperationSpec: coreHttp.OperationSpec = {
  path: "/digitaltwins/{id}/telemetry",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.telemetry,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [
    Parameters.contentType,
    Parameters.dtId,
    Parameters.timestamp
  ],
  mediaType: "json",
  serializer
};
const sendComponentTelemetryOperationSpec: coreHttp.OperationSpec = {
  path: "/digitaltwins/{id}/components/{componentPath}/telemetry",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.telemetry,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],
  headerParameters: [
    Parameters.contentType,
    Parameters.dtId,
    Parameters.timestamp
  ],
  mediaType: "json",
  serializer
};
const getComponentOperationSpec: coreHttp.OperationSpec = {
  path: "/digitaltwins/{id}/components/{componentPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" } },
      headersMapper: Mappers.DigitalTwinsGetComponentHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],
  serializer
};
const updateComponentOperationSpec: coreHttp.OperationSpec = {
  path: "/digitaltwins/{id}/components/{componentPath}",
  httpMethod: "PATCH",
  responses: {
    202: {},
    204: {
      headersMapper: Mappers.DigitalTwinsUpdateComponentHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.patchDocument1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],
  headerParameters: [Parameters.contentType1, Parameters.ifMatch],
  mediaType: "json",
  serializer
};
const listRelationshipsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RelationshipCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.relationshipName],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.nextLink],
  serializer
};
const listIncomingRelationshipsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IncomingRelationshipCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.nextLink],
  serializer
};
