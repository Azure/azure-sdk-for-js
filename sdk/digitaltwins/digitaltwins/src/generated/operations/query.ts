/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/queryMappers";
import * as Parameters from "../models/parameters";
import { AzureDigitalTwinsAPIContext } from "../azureDigitalTwinsAPIContext";

/** Class representing a Query. */
export class Query {
  private readonly client: AzureDigitalTwinsAPIContext;

  /**
   * Create a Query.
   * @param {AzureDigitalTwinsAPIContext} client Reference to the service client.
   */
  constructor(client: AzureDigitalTwinsAPIContext) {
    this.client = client;
  }

  /**
   * Executes a query that allows traversing relationships and filtering by property values.
   * Status codes:
   * 200 (OK): Success.
   * 400 (Bad Request): The request is invalid.
   * @param querySpecification The query specification to execute.
   * @param [options] The optional parameters
   * @returns Promise<Models.QueryQueryTwinsResponse>
   */
  queryTwins(querySpecification: Models.QuerySpecification, options?: coreHttp.RequestOptionsBase): Promise<Models.QueryQueryTwinsResponse>;
  /**
   * @param querySpecification The query specification to execute.
   * @param callback The callback
   */
  queryTwins(querySpecification: Models.QuerySpecification, callback: coreHttp.ServiceCallback<Models.QueryResult>): void;
  /**
   * @param querySpecification The query specification to execute.
   * @param options The optional parameters
   * @param callback The callback
   */
  queryTwins(querySpecification: Models.QuerySpecification, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.QueryResult>): void;
  queryTwins(querySpecification: Models.QuerySpecification, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.QueryResult>, callback?: coreHttp.ServiceCallback<Models.QueryResult>): Promise<Models.QueryQueryTwinsResponse> {
    return this.client.sendOperationRequest(
      {
        querySpecification,
        options
      },
      queryTwinsOperationSpec,
      callback) as Promise<Models.QueryQueryTwinsResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const queryTwinsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "query",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "querySpecification",
    mapper: {
      ...Mappers.QuerySpecification,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.QueryResult,
      headersMapper: Mappers.QueryQueryTwinsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.QueryQueryTwinsHeaders
    }
  },
  serializer
};
