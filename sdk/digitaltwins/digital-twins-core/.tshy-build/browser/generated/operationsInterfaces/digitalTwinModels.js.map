{"version":3,"file":"digitalTwinModels.js","sourceRoot":"","sources":["../../../../src/generated/operationsInterfaces/digitalTwinModels.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  DigitalTwinsModelData,\n  DigitalTwinModelsListOptionalParams,\n  DigitalTwinModelsAddOptionalParams,\n  DigitalTwinModelsAddResponse,\n  DigitalTwinModelsGetByIdOptionalParams,\n  DigitalTwinModelsGetByIdResponse,\n  DigitalTwinModelsUpdateOptionalParams,\n  DigitalTwinModelsDeleteOptionalParams,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a DigitalTwinModels. */\nexport interface DigitalTwinModels {\n  /**\n   * Retrieves model metadata and, optionally, model definitions.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * LimitExceeded - The maximum number of model ids allowed in 'dependenciesFor' has been reached.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * @param options The options parameters.\n   */\n  list(\n    options?: DigitalTwinModelsListOptionalParams,\n  ): PagedAsyncIterableIterator<DigitalTwinsModelData>;\n  /**\n   * Uploads one or more models. When any error occurs, no models are uploaded.\n   * Status codes:\n   * * 201 Created\n   * * 400 Bad Request\n   *   * DTDLParserError - The models provided are not valid DTDL.\n   *   * InvalidArgument - The model id is invalid.\n   *   * LimitExceeded - The maximum number of model ids allowed in 'dependenciesFor' has been reached.\n   *   * ModelVersionNotSupported - The version of DTDL used is not supported.\n   * * 409 Conflict\n   *   * ModelAlreadyExists - The model provided already exists.\n   * @param models An array of models to add.\n   * @param options The options parameters.\n   */\n  add(\n    models: Record<string, unknown>[],\n    options?: DigitalTwinModelsAddOptionalParams,\n  ): Promise<DigitalTwinModelsAddResponse>;\n  /**\n   * Retrieves model metadata and optionally the model definition.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * MissingArgument - The model id was not provided.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * @param id The id for the model. The id is globally unique and case sensitive.\n   * @param options The options parameters.\n   */\n  getById(\n    id: string,\n    options?: DigitalTwinModelsGetByIdOptionalParams,\n  ): Promise<DigitalTwinModelsGetByIdResponse>;\n  /**\n   * Updates the metadata for a model.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * MissingArgument - The model id was not provided.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * * 409 Conflict\n   *   * ModelReferencesNotDecommissioned - The model refers to models that are not decommissioned.\n   * @param id The id for the model. The id is globally unique and case sensitive.\n   * @param updateModel An update specification described by JSON Patch. Only the decommissioned property\n   *                    can be replaced.\n   * @param options The options parameters.\n   */\n  update(\n    id: string,\n    updateModel: Record<string, unknown>[],\n    options?: DigitalTwinModelsUpdateOptionalParams,\n  ): Promise<void>;\n  /**\n   * Deletes a model. A model can only be deleted if no other models reference it.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The model id is invalid.\n   *   * MissingArgument - The model id was not provided.\n   * * 404 Not Found\n   *   * ModelNotFound - The model was not found.\n   * * 409 Conflict\n   *   * ModelReferencesNotDeleted - The model refers to models that are not deleted.\n   * @param id The id for the model. The id is globally unique and case sensitive.\n   * @param options The options parameters.\n   */\n  delete(\n    id: string,\n    options?: DigitalTwinModelsDeleteOptionalParams,\n  ): Promise<void>;\n}\n"]}