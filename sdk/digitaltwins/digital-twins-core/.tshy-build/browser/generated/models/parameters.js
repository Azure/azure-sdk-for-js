/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { QuerySpecification as QuerySpecificationMapper, EventRoute as EventRouteMapper, ImportJob as ImportJobMapper, } from "../models/mappers.js";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const models = {
    parameterPath: "models",
    mapper: {
        constraints: {
            MinItems: 1,
            UniqueItems: true,
        },
        serializedName: "models",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-10-31",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
export const dependenciesFor = {
    parameterPath: ["options", "dependenciesFor"],
    mapper: {
        serializedName: "dependenciesFor",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String",
                },
            },
        },
    },
    collectionFormat: "Multi",
};
export const includeModelDefinition = {
    parameterPath: ["options", "includeModelDefinition"],
    mapper: {
        defaultValue: false,
        serializedName: "includeModelDefinition",
        type: {
            name: "Boolean",
        },
    },
};
export const resultsPerPage = {
    parameterPath: ["options", "resultsPerPage"],
    mapper: {
        serializedName: "max-items-per-page",
        type: {
            name: "Number",
        },
    },
};
export const id = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json-patch+json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const updateModel = {
    parameterPath: "updateModel",
    mapper: {
        serializedName: "updateModel",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const querySpecification = {
    parameterPath: "querySpecification",
    mapper: QuerySpecificationMapper,
};
export const twin = {
    parameterPath: "twin",
    mapper: {
        serializedName: "twin",
        required: true,
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } },
        },
    },
};
export const ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String",
        },
    },
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String",
        },
    },
};
export const patchDocument = {
    parameterPath: "patchDocument",
    mapper: {
        serializedName: "patchDocument",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
export const relationshipId = {
    parameterPath: "relationshipId",
    mapper: {
        serializedName: "relationshipId",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const relationship = {
    parameterPath: "relationship",
    mapper: {
        serializedName: "relationship",
        required: true,
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } },
        },
    },
};
export const relationshipName = {
    parameterPath: ["options", "relationshipName"],
    mapper: {
        serializedName: "relationshipName",
        type: {
            name: "String",
        },
    },
};
export const telemetry = {
    parameterPath: "telemetry",
    mapper: {
        serializedName: "telemetry",
        required: true,
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } },
        },
    },
};
export const messageId = {
    parameterPath: "messageId",
    mapper: {
        serializedName: "Message-Id",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const telemetrySourceTime = {
    parameterPath: ["options", "telemetrySourceTime"],
    mapper: {
        serializedName: "Telemetry-Source-Time",
        type: {
            name: "String",
        },
    },
};
export const componentPath = {
    parameterPath: "componentPath",
    mapper: {
        serializedName: "componentPath",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const eventRoute = {
    parameterPath: "eventRoute",
    mapper: EventRouteMapper,
};
export const importJob = {
    parameterPath: "importJob",
    mapper: ImportJobMapper,
};
export const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operation-id",
        type: {
            name: "String",
        },
    },
};
export const timeoutInMinutes = {
    parameterPath: "timeoutInMinutes",
    mapper: {
        serializedName: "timeoutInMinutes",
        type: {
            name: "Number",
        },
    },
};
//# sourceMappingURL=parameters.js.map