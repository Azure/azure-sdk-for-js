{"version":3,"file":"importJobs.js","sourceRoot":"","sources":["../../../../src/generated/operationsInterfaces/importJobs.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  ImportJob,\n  ImportJobsListOptionalParams,\n  ImportJobsAddOptionalParams,\n  ImportJobsAddResponse,\n  ImportJobsGetByIdOptionalParams,\n  ImportJobsGetByIdResponse,\n  ImportJobsDeleteOptionalParams,\n  ImportJobsCancelOptionalParams,\n  ImportJobsCancelResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a ImportJobs. */\nexport interface ImportJobs {\n  /**\n   * Retrieves all import jobs.\n   * Status codes:\n   * * 200 OK\n   * @param options The options parameters.\n   */\n  list(\n    options?: ImportJobsListOptionalParams,\n  ): PagedAsyncIterableIterator<ImportJob>;\n  /**\n   * Creates an import job.\n   * Status codes:\n   * * 201 Created\n   * * 400 Bad Request\n   *   * JobLimitReached - The maximum number of import jobs allowed has been reached.\n   *   * ValidationFailed - The import job request is not valid.\n   * @param id The id for the import job. The id is unique within the service and case sensitive.\n   * @param importJob The import job being added.\n   * @param options The options parameters.\n   */\n  add(\n    id: string,\n    importJob: ImportJob,\n    options?: ImportJobsAddOptionalParams,\n  ): Promise<ImportJobsAddResponse>;\n  /**\n   * Retrieves an import job.\n   * Status codes:\n   * * 200 OK\n   * * 404 Not Found\n   *   * ImportJobNotFound - The import job was not found.\n   * @param id The id for the import job. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  getById(\n    id: string,\n    options?: ImportJobsGetByIdOptionalParams,\n  ): Promise<ImportJobsGetByIdResponse>;\n  /**\n   * Deletes an import job. This is simply used to remove a job id, so it may be reused later. It can not\n   * be used to stop entities from being imported.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * ValidationFailed - The import job request is not valid.\n   * @param id The id for the import job. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  delete(id: string, options?: ImportJobsDeleteOptionalParams): Promise<void>;\n  /**\n   * Cancels an import job that is currently running. Service will stop any import operations triggered\n   * by the current import job that are in progress, and go to a cancelled state. Please note that this\n   * will leave your instance in an unknown state as there won't be any rollback operation.\n   * Status codes:\n   * * 200 Request Accepted\n   * * 400 Bad Request\n   *   * ValidationFailed - The import job request is not valid.\n   * @param id The id for the import job. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  cancel(\n    id: string,\n    options?: ImportJobsCancelOptionalParams,\n  ): Promise<ImportJobsCancelResponse>;\n}\n"]}