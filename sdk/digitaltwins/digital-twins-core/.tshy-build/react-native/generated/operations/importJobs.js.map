{"version":3,"file":"importJobs.js","sourceRoot":"","sources":["../../../../src/generated/operations/importJobs.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { ImportJobs } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { AzureDigitalTwinsAPI } from \"../azureDigitalTwinsAPI.js\";\nimport {\n  ImportJob,\n  ImportJobsListNextOptionalParams,\n  ImportJobsListOptionalParams,\n  ImportJobsListResponse,\n  ImportJobsAddOptionalParams,\n  ImportJobsAddResponse,\n  ImportJobsGetByIdOptionalParams,\n  ImportJobsGetByIdResponse,\n  ImportJobsDeleteOptionalParams,\n  ImportJobsCancelOptionalParams,\n  ImportJobsCancelResponse,\n  ImportJobsListNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing ImportJobs operations. */\nexport class ImportJobsImpl implements ImportJobs {\n  private readonly client: AzureDigitalTwinsAPI;\n\n  /**\n   * Initialize a new instance of the class ImportJobs class.\n   * @param client Reference to the service client\n   */\n  constructor(client: AzureDigitalTwinsAPI) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves all import jobs.\n   * Status codes:\n   * * 200 OK\n   * @param options The options parameters.\n   */\n  public list(\n    options?: ImportJobsListOptionalParams,\n  ): PagedAsyncIterableIterator<ImportJob> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *listPagingPage(\n    options?: ImportJobsListOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<ImportJob[]> {\n    let result: ImportJobsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: ImportJobsListOptionalParams,\n  ): AsyncIterableIterator<ImportJob> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves all import jobs.\n   * Status codes:\n   * * 200 OK\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: ImportJobsListOptionalParams,\n  ): Promise<ImportJobsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Creates an import job.\n   * Status codes:\n   * * 201 Created\n   * * 400 Bad Request\n   *   * JobLimitReached - The maximum number of import jobs allowed has been reached.\n   *   * ValidationFailed - The import job request is not valid.\n   * @param id The id for the import job. The id is unique within the service and case sensitive.\n   * @param importJob The import job being added.\n   * @param options The options parameters.\n   */\n  add(\n    id: string,\n    importJob: ImportJob,\n    options?: ImportJobsAddOptionalParams,\n  ): Promise<ImportJobsAddResponse> {\n    return this.client.sendOperationRequest(\n      { id, importJob, options },\n      addOperationSpec,\n    );\n  }\n\n  /**\n   * Retrieves an import job.\n   * Status codes:\n   * * 200 OK\n   * * 404 Not Found\n   *   * ImportJobNotFound - The import job was not found.\n   * @param id The id for the import job. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  getById(\n    id: string,\n    options?: ImportJobsGetByIdOptionalParams,\n  ): Promise<ImportJobsGetByIdResponse> {\n    return this.client.sendOperationRequest(\n      { id, options },\n      getByIdOperationSpec,\n    );\n  }\n\n  /**\n   * Deletes an import job. This is simply used to remove a job id, so it may be reused later. It can not\n   * be used to stop entities from being imported.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * ValidationFailed - The import job request is not valid.\n   * @param id The id for the import job. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  delete(id: string, options?: ImportJobsDeleteOptionalParams): Promise<void> {\n    return this.client.sendOperationRequest(\n      { id, options },\n      deleteOperationSpec,\n    );\n  }\n\n  /**\n   * Cancels an import job that is currently running. Service will stop any import operations triggered\n   * by the current import job that are in progress, and go to a cancelled state. Please note that this\n   * will leave your instance in an unknown state as there won't be any rollback operation.\n   * Status codes:\n   * * 200 Request Accepted\n   * * 400 Bad Request\n   *   * ValidationFailed - The import job request is not valid.\n   * @param id The id for the import job. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  cancel(\n    id: string,\n    options?: ImportJobsCancelOptionalParams,\n  ): Promise<ImportJobsCancelResponse> {\n    return this.client.sendOperationRequest(\n      { id, options },\n      cancelOperationSpec,\n    );\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: ImportJobsListNextOptionalParams,\n  ): Promise<ImportJobsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/jobs/imports\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImportJobCollection,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.ImportJobsListExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept, Parameters.resultsPerPage],\n  serializer,\n};\nconst addOperationSpec: coreClient.OperationSpec = {\n  path: \"/jobs/imports/{id}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.ImportJob,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.ImportJobsAddExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.importJob,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getByIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/jobs/imports/{id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImportJob,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.ImportJobsGetByIdExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/jobs/imports/{id}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.ImportJobsDeleteExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst cancelOperationSpec: coreClient.OperationSpec = {\n  path: \"/jobs/imports/{id}/cancel\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImportJob,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.ImportJobsCancelExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ImportJobCollection,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.ImportJobsListNextExceptionHeaders,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.accept, Parameters.resultsPerPage],\n  serializer,\n};\n"]}