{"version":3,"file":"digitalTwinsClient.js","sourceRoot":"","sources":["../../src/digitalTwinsClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  OperationOptions,\n  InternalClientPipelineOptions,\n  CommonClientOptions,\n} from \"@azure/core-client\";\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport type { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { randomUUID } from \"@azure/core-util\";\nimport { AzureDigitalTwinsAPI as GeneratedClient } from \"./generated/azureDigitalTwinsAPI.js\";\nimport type {\n  DigitalTwinsGetByIdResponse,\n  DigitalTwinsAddOptionalParams,\n  DigitalTwinsAddResponse,\n  DigitalTwinsUpdateOptionalParams,\n  DigitalTwinsUpdateResponse,\n  DigitalTwinsDeleteOptionalParams,\n  DigitalTwinsGetComponentResponse,\n  DigitalTwinsUpdateComponentResponse,\n  DigitalTwinsUpdateComponentOptionalParams,\n  DigitalTwinsAddRelationshipResponse,\n  DigitalTwinsAddRelationshipOptionalParams,\n  DigitalTwinsUpdateRelationshipOptionalParams,\n  DigitalTwinsUpdateRelationshipResponse,\n  DigitalTwinsDeleteRelationshipOptionalParams,\n  IncomingRelationship,\n  DigitalTwinsGetRelationshipByIdResponse,\n  DigitalTwinsModelData,\n  DigitalTwinModelsGetByIdResponse,\n  DigitalTwinModelsAddResponse,\n  EventRoutesGetByIdResponse,\n  EventRoute,\n  QueryQueryTwinsResponse,\n} from \"./generated/models/index.js\";\nimport {\n  DigitalTwinModelsGetByIdOptionalParams as GetModelOptions,\n  DigitalTwinModelsListOptionalParams as ListModelsOptions,\n  QueryQueryTwinsOptionalParams as QueryTwinsOptions,\n  EventRoutesListOptionalParams as ListEventRoutesOptions,\n  DigitalTwinsListRelationshipsOptionalParams as ListRelationshipsOptions,\n  DigitalTwinsListIncomingRelationshipsOptionalParams as ListIncomingRelationshipsOptions,\n} from \"./generated/models/index.js\";\nimport { tracingClient } from \"./tracing.js\";\nimport { logger } from \"./logger.js\";\nexport {\n  GetModelOptions,\n  ListModelsOptions,\n  QueryTwinsOptions,\n  ListEventRoutesOptions,\n  ListIncomingRelationshipsOptions,\n  ListRelationshipsOptions,\n};\n\n/**\n * Options for the DigitalTwinsClient class\n */\nexport interface DigitalTwinsClientOptions extends CommonClientOptions {}\n\nconst DEFAULT_DIGITALTWINS_SCOPE = \"https://digitaltwins.azure.net/.default\";\n\n/**\n * Client for Azure IoT DigitalTwins API.\n */\nexport class DigitalTwinsClient {\n  /**\n   * A reference to the auto-generated AzureDigitalTwinsAPI\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of AzureDigitalTwinsAPI.\n   *\n   * Example usage:\n   * ```ts snippet:ReadmeSampleCreateClient_Node\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DigitalTwinsClient } from \"@azure/digital-twins-core\";\n   *\n   * const url = \"<URL to Azure Digital Twins instance>\";\n   * const credential = new DefaultAzureCredential();\n   * const serviceClient = new DigitalTwinsClient(url, credential);\n   * ```\n   * @param endpointUrl - The endpoint URL of the service.\n   * @param credential - Used to authenticate requests to the service.\n   * @param options - Used to configure the service client.\n   */\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential,\n    options: DigitalTwinsClientOptions = {},\n  ) {\n    const internalPipelineOptions: InternalClientPipelineOptions = {\n      ...options,\n      loggingOptions: {\n        logger: logger.info,\n        additionalAllowedHeaderNames: [\"x-ms-request-id\"],\n      },\n    };\n\n    this.client = new GeneratedClient({\n      endpoint: endpointUrl,\n      credential,\n      credentialScopes: DEFAULT_DIGITALTWINS_SCOPE,\n      ...internalPipelineOptions,\n    });\n  }\n\n  /**\n   * Get a digital twin\n   *\n   * @param digitalTwinId - The Id of the digital twin.\n   * @param options - The operation options\n   * @returns The application/json digital twin.\n   */\n  public getDigitalTwin(\n    digitalTwinId: string,\n    options: OperationOptions = {},\n  ): Promise<DigitalTwinsGetByIdResponse> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.getDigitalTwin\",\n      options,\n      async (updatedOptions) => {\n        return this.client.digitalTwins.getById(digitalTwinId, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Create or update a digital twin\n   *\n   * @param digitalTwinId - The Id of the digital twin to create or update.\n   * @param digitalTwinJson - The application/json digital twin to create.\n   * @param options - Extended operation options including\n   *  ifNoneMatch: Only perform the operation if the entity does not already exist.\n   * @returns The created application/json digital twin.\n   */\n  public upsertDigitalTwin(\n    digitalTwinId: string,\n    digitalTwinJson: string,\n    options: DigitalTwinsAddOptionalParams = {},\n  ): Promise<DigitalTwinsAddResponse> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.upsertDigitalTwin\",\n      options,\n      async (updatedOptions) => {\n        const payload = JSON.parse(digitalTwinJson);\n        return this.client.digitalTwins.add(digitalTwinId, payload, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Update a digital twin using a json patch.\n   *\n   * @param digitalTwinId - The Id of the digital twin.\n   * @param jsonPatch - An update specification described by JSON Patch. Updates to property values\n   * and $model elements may happen in the same request. Operations are limited to add, replace and\n   * remove.\n   * @param options - Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n\n   */\n  public updateDigitalTwin(\n    digitalTwinId: string,\n    jsonPatch: Array<Record<string, unknown>>,\n    options: DigitalTwinsUpdateOptionalParams = {},\n  ): Promise<DigitalTwinsUpdateResponse> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.updateDigitalTwin\",\n      options,\n      async (updatedOptions) => {\n        return this.client.digitalTwins.update(digitalTwinId, jsonPatch, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Delete a digital twin\n   *\n   * @param digitalTwinId - The Id of the digital twin to delete.\n   * @param options - Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n\n   */\n  public deleteDigitalTwin(\n    digitalTwinId: string,\n    options: DigitalTwinsDeleteOptionalParams = {},\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.deleteDigitalTwin\",\n      options,\n      async (updatedOptions) => {\n        return this.client.digitalTwins.delete(digitalTwinId, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Get a component on a digital twin.\n   *\n   * @param digitalTwinId - The Id of the digital twin.\n   * @param componentName - The component being retrieved.\n   * @param options - The operation options\n   * @returns Json string representation of the component corresponding to the provided componentName.\n   */\n  public getComponent(\n    digitalTwinId: string,\n    componentName: string,\n    options: OperationOptions = {},\n  ): Promise<DigitalTwinsGetComponentResponse> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.getComponent\",\n      options,\n      async (updatedOptions) => {\n        return this.client.digitalTwins.getComponent(digitalTwinId, componentName, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Update properties of a component on a digital twin using a JSON patch.\n   *\n   * @param digitalTwinId - The Id of the digital twin.\n   * @param componentName - The component being updated.\n   * @param jsonPatch - The application/json-patch+json operations to be performed on the specified digital twin's component.\n   * @param enableUpdate - If true then update of an existing digital twin is enabled.\n   * @param options - Extended operation options including\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n\n   */\n  public updateComponent(\n    digitalTwinId: string,\n    componentName: string,\n    jsonPatch: Array<Record<string, unknown>>,\n    options: DigitalTwinsUpdateComponentOptionalParams = {},\n  ): Promise<DigitalTwinsUpdateComponentResponse> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.updateComponent\",\n      options,\n      async (updatedOptions) => {\n        return this.client.digitalTwins.updateComponent(\n          digitalTwinId,\n          componentName,\n          jsonPatch,\n          updatedOptions,\n        );\n      },\n    );\n  }\n\n  /**\n   * Get a relationship on a digital twin.\n   *\n   * @param digitalTwinId - The Id of the source digital twin.\n   * @param relationshipId - The Id of the relationship to retrieve.\n   * @param options - The operation options\n   * @returns The pageable list of application/json relationships belonging to the specified digital twin.\n   */\n  public getRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    options: OperationOptions = {},\n  ): Promise<DigitalTwinsGetRelationshipByIdResponse> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.getRelationship\",\n      options,\n      async (updatedOptions) => {\n        return this.client.digitalTwins.getRelationshipById(\n          digitalTwinId,\n          relationshipId,\n          updatedOptions,\n        );\n      },\n    );\n  }\n\n  /**\n   * Create or update a relationship on a digital twin.\n   *\n   * @param digitalTwinId - The Id of the source digital twin.\n   * @param relationshipId - The Id of the relationship to create.\n   * @param relationship - The application/json relationship to be created.\n   * @param options - Extended operation options including\n   *  ifNoneMatch: Only perform the operation if the entity does not already exist.\n   */\n  public upsertRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    relationship: Record<string, unknown>,\n    options: DigitalTwinsAddRelationshipOptionalParams = {},\n  ): Promise<DigitalTwinsAddRelationshipResponse> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.upsertRelationship\",\n      options,\n      async (updatedOptions) => {\n        return this.client.digitalTwins.addRelationship(\n          digitalTwinId,\n          relationshipId,\n          relationship,\n          updatedOptions,\n        );\n      },\n    );\n  }\n\n  /**\n   * Updates the properties of a relationship on a digital twin using a JSON patch.\n   *\n   * @param digitalTwinId - The Id of the digital twin to delete.\n   * @param relationshipId - The Id of the relationship to be updated.\n   * @param jsonPatch - The application/json-patch+json operations to be performed on the specified digital twin's relationship.\n   * @param options - Extended operation options\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is provided.\n   */\n  public updateRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    jsonPatch: Array<Record<string, unknown>>,\n    options: DigitalTwinsUpdateRelationshipOptionalParams = {},\n  ): Promise<DigitalTwinsUpdateRelationshipResponse> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.updateRelationship\",\n      options,\n      async (updatedOptions) => {\n        return this.client.digitalTwins.updateRelationship(\n          digitalTwinId,\n          relationshipId,\n          jsonPatch,\n          updatedOptions,\n        );\n      },\n    );\n  }\n\n  /**\n   * Delete a relationship on a digital twin.\n   *\n   * @param digitalTwinId - The Id of the source digital twin.\n   * @param relationshipId - The Id of the relationship to delete.\n   * @param options - The operation options\n   *   ifMatch: Only perform the operation if the entity's etag matches one of the etags provided or * is\n\n   */\n  public deleteRelationship(\n    digitalTwinId: string,\n    relationshipId: string,\n    options: DigitalTwinsDeleteRelationshipOptionalParams = {},\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.deleteRelationship\",\n      options,\n      async (updatedOptions) => {\n        return this.client.digitalTwins.deleteRelationship(\n          digitalTwinId,\n          relationshipId,\n          updatedOptions,\n        );\n      },\n    );\n  }\n\n  /**\n   * Retrieve relationships for a digital twin.\n   *\n   * @param digitalTwinId - The Id of the digital twin.\n   */\n  public listRelationships(\n    digitalTwinId: string,\n    options?: ListRelationshipsOptions,\n  ): PagedAsyncIterableIterator<Record<string, unknown>> {\n    return this.client.digitalTwins.listRelationships(digitalTwinId, options);\n  }\n\n  /**\n   * Retrieve all incoming relationships for a digital twin.\n   *\n   * @param digitalTwinId - The Id of the digital twin.\n   */\n  public listIncomingRelationships(\n    digitalTwinId: string,\n    options?: ListIncomingRelationshipsOptions,\n  ): PagedAsyncIterableIterator<IncomingRelationship> {\n    return this.client.digitalTwins.listIncomingRelationships(digitalTwinId, options);\n  }\n\n  /**\n   * Publish telemetry from a digital twin, which is then consumed by one or many destination endpoints (subscribers) defined under.\n   *\n   * @param digitalTwinId - The Id of the digital twin to delete.\n   * @param payload - The application/json telemetry payload to be sent.\n   * @param messageId - The message Id.\n   * @param options - The operation options\n\n   */\n  public publishTelemetry(\n    digitalTwinId: string,\n    payload: Record<string, unknown>,\n    messageId: string,\n    options: OperationOptions = {},\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.publishTelemetry\",\n      options,\n      async (updatedOptions) => {\n        return this.client.digitalTwins.sendTelemetry(\n          digitalTwinId,\n          messageId || randomUUID(),\n          payload,\n          {\n            ...updatedOptions,\n            telemetrySourceTime: new Date().toISOString(),\n          },\n        );\n      },\n    );\n  }\n\n  /**\n   * Publish telemetry from a digital twin's component, which is then consumed by one or many destination endpoints (subscribers) defined under.\n   *\n   * @param digitalTwinId - The Id of the digital twin to delete.\n   * @param componentName - The name of the DTDL component.\n   * @param payload - The application/json telemetry payload to be sent.\n   * @param messageId - The message Id.\n   * @param options - The operation options\n\n   */\n  public publishComponentTelemetry(\n    digitalTwinId: string,\n    componentName: string,\n    payload: Record<string, unknown>,\n    messageId: string,\n    options: OperationOptions = {},\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.publishComponentTelemetry\",\n      options,\n      async (updatedOptions) => {\n        return this.client.digitalTwins.sendComponentTelemetry(\n          digitalTwinId,\n          componentName,\n          messageId || randomUUID(),\n          payload,\n          { ...updatedOptions, telemetrySourceTime: new Date().toISOString() },\n        );\n      },\n    );\n  }\n\n  /**\n   * Get a model, including the model metadata and the model definition.\n   *\n   * @param modelId - The Id of the model.\n   * @param options - Options for this operation\n   * @returns The application/json model.\n   */\n  public getModel(\n    modelId: string,\n    options: GetModelOptions = {},\n  ): Promise<DigitalTwinModelsGetByIdResponse> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.getModel\",\n      {\n        ...options,\n        includeModelDefinition: options?.includeModelDefinition ?? false,\n      },\n      async (updatedOptions) => {\n        return this.client.digitalTwinModels.getById(modelId, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Get the list of models\n   *\n   * @param options - Options for listing models.\n   * @returns A pageable set of application/json models.\n   */\n  public listModels(\n    options: ListModelsOptions = {},\n  ): PagedAsyncIterableIterator<DigitalTwinsModelData> {\n    return this.client.digitalTwinModels.list({\n      ...options,\n      includeModelDefinition: options?.includeModelDefinition ?? false,\n    });\n  }\n\n  /**\n   * Create one or many\n   *\n   * @param dtdlModels - The set of models to create. Each string corresponds to exactly one model.\n   * @param options - The operation options\n   * @returns The created application/json models.\n   */\n  public createModels(\n    dtdlModels: Array<Record<string, unknown>>,\n    options: OperationOptions = {},\n  ): Promise<DigitalTwinModelsAddResponse> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.createModels\",\n      {\n        ...options,\n        models: dtdlModels,\n      },\n      async (updatedOptions) => {\n        return this.client.digitalTwinModels.add(dtdlModels, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Decommission a model using a json patch.\n   * When a model is decommissioned, new digital twins will no longer be able to be\n   * defined by this model. However, existing digital twins may continue to use this model.\n   * Once a model is decommissioned, it may not be recommissioned.\n   *\n   * @param modelId - The Id of the model to decommission.\n   * property can be replaced.\n   * @param options - The operation options\n\n   *\n   */\n  public decomissionModel(modelId: string, options: OperationOptions = {}): Promise<void> {\n    const jsonPatch = [{ op: \"replace\", path: \"/decommissioned\", value: true }];\n\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.decomissionModel\",\n      options,\n      async (updatedOptions) => {\n        return this.client.digitalTwinModels.update(modelId, jsonPatch, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Delete a model.\n   *\n   * @param modelId - The Id of the model to delete.\n   * @param options - The operation options\n\n   */\n  public deleteModel(modelId: string, options: OperationOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.deleteModel\",\n      options,\n      async (updatedOptions) => {\n        return this.client.digitalTwinModels.delete(modelId, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Get an event route.\n   *\n   * @param modelId - The Id of the event route.\n   * @param options - The operation options\n   * @returns The application/json event route.\n   */\n  public getEventRoute(\n    eventRouteId: string,\n    options: OperationOptions = {},\n  ): Promise<EventRoutesGetByIdResponse> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.getEventRoute\",\n      options,\n      async (updatedOptions) => {\n        return this.client.eventRoutes.getById(eventRouteId, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * List the event routes in a digital twins instance.\n   *\n   * @param options - Options for listEventRoutes.\n   * @returns The application/json event route.\n   */\n  public listEventRoutes(options?: ListEventRoutesOptions): PagedAsyncIterableIterator<EventRoute> {\n    return this.client.eventRoutes.list(options);\n  }\n\n  /**\n   * Create or update an event route.\n   *\n   * @param eventRouteId - The Id of the event route to create or update.\n   * @param endpointId - The id of the endpoint this event route is bound to.\n   * @param filter - An expression which describes the events which are routed to the endpoint.\n   * @param options - The operation options\n\n   */\n  public upsertEventRoute(\n    eventRouteId: string,\n    endpointId: string,\n    filter: string,\n    options: OperationOptions = {},\n  ): Promise<void> {\n    const eventRoute = {\n      endpointName: endpointId,\n      filter,\n    };\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.upsertEventRoute\",\n      {\n        eventRoute,\n        ...options,\n      },\n      async (updatedOptions) => {\n        return this.client.eventRoutes.add(eventRouteId, eventRoute, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Delete an event route.\n   *\n   * @param eventRouteId - The Id of the eventRoute to delete.\n   * @param options - The operation options\n\n   */\n  public deleteEventRoute(eventRouteId: string, options: OperationOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"DigitalTwinsClient.deleteEventRoute\",\n      options,\n      async (updatedOptions) => {\n        return this.client.eventRoutes.delete(eventRouteId, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Deals with the pagination of {@link query}.\n   *\n   * @param query - The query string, in SQL-like syntax.\n   * @param options - Common options for the iterative endpoints.\n   * @param continuationState - An object that indicates the position of the paginated request.\n   *\n   */\n  private async *queryTwinsPage(\n    query: string,\n    options: QueryTwinsOptions,\n    continuationState?: PageSettings,\n  ): AsyncIterableIterator<QueryQueryTwinsResponse> {\n    let { continuationToken } = continuationState ?? {};\n    if (!continuationToken) {\n      const queryResult = await this.client.query.queryTwins({ query }, options);\n      continuationToken = queryResult.continuationToken;\n      yield queryResult;\n    }\n    while (continuationToken) {\n      const queryResult = await this.client.query.queryTwins({ query, continuationToken }, options);\n      continuationToken = queryResult.continuationToken;\n      yield queryResult;\n    }\n  }\n\n  /**\n   * Deals with the iteration of all the available results of {@link query}.\n   * @param query - The query string, in SQL-like syntax.\n   * @param options - Common options for the iterative endpoints.\n   */\n  private async *queryTwinsAll(\n    query: string,\n    options: QueryTwinsOptions,\n  ): AsyncIterableIterator<Record<string, unknown>> {\n    for await (const page of this.queryTwinsPage(query, options)) {\n      if (page.value) {\n        yield* page.value;\n      }\n    }\n  }\n\n  /**\n   * Query for digital twins.\n   *\n   * @param query - The query string, in SQL-like syntax.\n   * @param options - Options for the query operation.\n   * @returns The pageable list of query results.\n   */\n  public queryTwins(\n    query: string,\n    options: QueryTwinsOptions = {},\n  ): PagedAsyncIterableIterator<Record<string, unknown>, QueryQueryTwinsResponse> {\n    const iter = this.queryTwinsAll(query, options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => this.queryTwinsPage(query, options, settings),\n    };\n  }\n}\n"]}