"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.timeoutInMinutes = exports.operationId = exports.importJob = exports.eventRoute = exports.componentPath = exports.telemetrySourceTime = exports.messageId = exports.telemetry = exports.relationshipName = exports.relationship = exports.relationshipId = exports.patchDocument = exports.ifMatch = exports.ifNoneMatch = exports.twin = exports.querySpecification = exports.nextLink = exports.updateModel = exports.contentType1 = exports.id = exports.resultsPerPage = exports.includeModelDefinition = exports.dependenciesFor = exports.apiVersion = exports.$host = exports.accept = exports.models = exports.contentType = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
exports.models = {
    parameterPath: "models",
    mapper: {
        constraints: {
            MinItems: 1,
            UniqueItems: true,
        },
        serializedName: "models",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
exports.$host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-10-31",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.dependenciesFor = {
    parameterPath: ["options", "dependenciesFor"],
    mapper: {
        serializedName: "dependenciesFor",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String",
                },
            },
        },
    },
    collectionFormat: "Multi",
};
exports.includeModelDefinition = {
    parameterPath: ["options", "includeModelDefinition"],
    mapper: {
        defaultValue: false,
        serializedName: "includeModelDefinition",
        type: {
            name: "Boolean",
        },
    },
};
exports.resultsPerPage = {
    parameterPath: ["options", "resultsPerPage"],
    mapper: {
        serializedName: "max-items-per-page",
        type: {
            name: "Number",
        },
    },
};
exports.id = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json-patch+json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
exports.updateModel = {
    parameterPath: "updateModel",
    mapper: {
        serializedName: "updateModel",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.querySpecification = {
    parameterPath: "querySpecification",
    mapper: mappers_js_1.QuerySpecification,
};
exports.twin = {
    parameterPath: "twin",
    mapper: {
        serializedName: "twin",
        required: true,
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } },
        },
    },
};
exports.ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String",
        },
    },
};
exports.ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String",
        },
    },
};
exports.patchDocument = {
    parameterPath: "patchDocument",
    mapper: {
        serializedName: "patchDocument",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
exports.relationshipId = {
    parameterPath: "relationshipId",
    mapper: {
        serializedName: "relationshipId",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.relationship = {
    parameterPath: "relationship",
    mapper: {
        serializedName: "relationship",
        required: true,
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } },
        },
    },
};
exports.relationshipName = {
    parameterPath: ["options", "relationshipName"],
    mapper: {
        serializedName: "relationshipName",
        type: {
            name: "String",
        },
    },
};
exports.telemetry = {
    parameterPath: "telemetry",
    mapper: {
        serializedName: "telemetry",
        required: true,
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } },
        },
    },
};
exports.messageId = {
    parameterPath: "messageId",
    mapper: {
        serializedName: "Message-Id",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.telemetrySourceTime = {
    parameterPath: ["options", "telemetrySourceTime"],
    mapper: {
        serializedName: "Telemetry-Source-Time",
        type: {
            name: "String",
        },
    },
};
exports.componentPath = {
    parameterPath: "componentPath",
    mapper: {
        serializedName: "componentPath",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.eventRoute = {
    parameterPath: "eventRoute",
    mapper: mappers_js_1.EventRoute,
};
exports.importJob = {
    parameterPath: "importJob",
    mapper: mappers_js_1.ImportJob,
};
exports.operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operation-id",
        type: {
            name: "String",
        },
    },
};
exports.timeoutInMinutes = {
    parameterPath: "timeoutInMinutes",
    mapper: {
        serializedName: "timeoutInMinutes",
        type: {
            name: "Number",
        },
    },
};
//# sourceMappingURL=parameters.js.map