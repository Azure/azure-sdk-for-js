{"version":3,"file":"digitalTwins.js","sourceRoot":"","sources":["../../../../src/generated/operations/digitalTwins.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { DigitalTwins } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { AzureDigitalTwinsAPI } from \"../azureDigitalTwinsAPI.js\";\nimport {\n  DigitalTwinsListRelationshipsNextOptionalParams,\n  DigitalTwinsListRelationshipsOptionalParams,\n  DigitalTwinsListRelationshipsResponse,\n  IncomingRelationship,\n  DigitalTwinsListIncomingRelationshipsNextOptionalParams,\n  DigitalTwinsListIncomingRelationshipsOptionalParams,\n  DigitalTwinsListIncomingRelationshipsResponse,\n  DigitalTwinsGetByIdOptionalParams,\n  DigitalTwinsGetByIdResponse,\n  DigitalTwinsAddOptionalParams,\n  DigitalTwinsAddResponse,\n  DigitalTwinsDeleteOptionalParams,\n  DigitalTwinsUpdateOptionalParams,\n  DigitalTwinsUpdateResponse,\n  DigitalTwinsGetRelationshipByIdOptionalParams,\n  DigitalTwinsGetRelationshipByIdResponse,\n  DigitalTwinsAddRelationshipOptionalParams,\n  DigitalTwinsAddRelationshipResponse,\n  DigitalTwinsDeleteRelationshipOptionalParams,\n  DigitalTwinsUpdateRelationshipOptionalParams,\n  DigitalTwinsUpdateRelationshipResponse,\n  DigitalTwinsSendTelemetryOptionalParams,\n  DigitalTwinsSendComponentTelemetryOptionalParams,\n  DigitalTwinsGetComponentOptionalParams,\n  DigitalTwinsGetComponentResponse,\n  DigitalTwinsUpdateComponentOptionalParams,\n  DigitalTwinsUpdateComponentResponse,\n  DigitalTwinsListRelationshipsNextResponse,\n  DigitalTwinsListIncomingRelationshipsNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing DigitalTwins operations. */\nexport class DigitalTwinsImpl implements DigitalTwins {\n  private readonly client: AzureDigitalTwinsAPI;\n\n  /**\n   * Initialize a new instance of the class DigitalTwins class.\n   * @param client Reference to the service client\n   */\n  constructor(client: AzureDigitalTwinsAPI) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the relationships from a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  public listRelationships(\n    id: string,\n    options?: DigitalTwinsListRelationshipsOptionalParams,\n  ): PagedAsyncIterableIterator<Record<string, unknown>> {\n    const iter = this.listRelationshipsPagingAll(id, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listRelationshipsPagingPage(id, options, settings);\n      },\n    };\n  }\n\n  private async *listRelationshipsPagingPage(\n    id: string,\n    options?: DigitalTwinsListRelationshipsOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<Record<string, unknown>[]> {\n    let result: DigitalTwinsListRelationshipsResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listRelationships(id, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listRelationshipsNext(\n        id,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listRelationshipsPagingAll(\n    id: string,\n    options?: DigitalTwinsListRelationshipsOptionalParams,\n  ): AsyncIterableIterator<Record<string, unknown>> {\n    for await (const page of this.listRelationshipsPagingPage(id, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves all incoming relationship for a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  public listIncomingRelationships(\n    id: string,\n    options?: DigitalTwinsListIncomingRelationshipsOptionalParams,\n  ): PagedAsyncIterableIterator<IncomingRelationship> {\n    const iter = this.listIncomingRelationshipsPagingAll(id, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listIncomingRelationshipsPagingPage(id, options, settings);\n      },\n    };\n  }\n\n  private async *listIncomingRelationshipsPagingPage(\n    id: string,\n    options?: DigitalTwinsListIncomingRelationshipsOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<IncomingRelationship[]> {\n    let result: DigitalTwinsListIncomingRelationshipsResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listIncomingRelationships(id, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listIncomingRelationshipsNext(\n        id,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listIncomingRelationshipsPagingAll(\n    id: string,\n    options?: DigitalTwinsListIncomingRelationshipsOptionalParams,\n  ): AsyncIterableIterator<IncomingRelationship> {\n    for await (const page of this.listIncomingRelationshipsPagingPage(\n      id,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Retrieves a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  getById(\n    id: string,\n    options?: DigitalTwinsGetByIdOptionalParams,\n  ): Promise<DigitalTwinsGetByIdResponse> {\n    return this.client.sendOperationRequest(\n      { id, options },\n      getByIdOperationSpec,\n    );\n  }\n\n  /**\n   * Adds or replaces a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or payload is invalid.\n   *   * ModelDecommissioned - The model for the digital twin is decommissioned.\n   *   * TwinLimitReached - The maximum number of digital twins allowed has been reached.\n   *   * ValidationFailed - The digital twin payload is not valid.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.\n   * @param options The options parameters.\n   */\n  add(\n    id: string,\n    twin: Record<string, unknown>,\n    options?: DigitalTwinsAddOptionalParams,\n  ): Promise<DigitalTwinsAddResponse> {\n    return this.client.sendOperationRequest(\n      { id, twin, options },\n      addOperationSpec,\n    );\n  }\n\n  /**\n   * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   *   * RelationshipsNotDeleted - The digital twin contains relationships.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  delete(\n    id: string,\n    options?: DigitalTwinsDeleteOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { id, options },\n      deleteOperationSpec,\n    );\n  }\n\n  /**\n   * Updates a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or payload is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * ValidationFailed - Applying the patch results in an invalid digital twin.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param patchDocument An update specification described by JSON Patch. Updates to property values and\n   *                      $model elements may happen in the same request. Operations are limited to add, replace and remove.\n   * @param options The options parameters.\n   */\n  update(\n    id: string,\n    patchDocument: Record<string, unknown>[],\n    options?: DigitalTwinsUpdateOptionalParams,\n  ): Promise<DigitalTwinsUpdateResponse> {\n    return this.client.sendOperationRequest(\n      { id, patchDocument, options },\n      updateOperationSpec,\n    );\n  }\n\n  /**\n   * Retrieves a relationship between two digital twins.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or relationship id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * RelationshipNotFound - The relationship was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param options The options parameters.\n   */\n  getRelationshipById(\n    id: string,\n    relationshipId: string,\n    options?: DigitalTwinsGetRelationshipByIdOptionalParams,\n  ): Promise<DigitalTwinsGetRelationshipByIdResponse> {\n    return this.client.sendOperationRequest(\n      { id, relationshipId, options },\n      getRelationshipByIdOperationSpec,\n    );\n  }\n\n  /**\n   * Adds a relationship between two digital twins.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id, relationship id, or payload is invalid.\n   *   * InvalidRelationship - The relationship is invalid.\n   *   * OperationNotAllowed - The relationship cannot connect to the same digital twin.\n   *   * ValidationFailed - The relationship content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * TargetTwinNotFound - The digital twin target of the relationship was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param relationship The data for the relationship.\n   * @param options The options parameters.\n   */\n  addRelationship(\n    id: string,\n    relationshipId: string,\n    relationship: Record<string, unknown>,\n    options?: DigitalTwinsAddRelationshipOptionalParams,\n  ): Promise<DigitalTwinsAddRelationshipResponse> {\n    return this.client.sendOperationRequest(\n      { id, relationshipId, relationship, options },\n      addRelationshipOperationSpec,\n    );\n  }\n\n  /**\n   * Deletes a relationship between two digital twins.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or relationship id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * RelationshipNotFound - The relationship was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param options The options parameters.\n   */\n  deleteRelationship(\n    id: string,\n    relationshipId: string,\n    options?: DigitalTwinsDeleteRelationshipOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { id, relationshipId, options },\n      deleteRelationshipOperationSpec,\n    );\n  }\n\n  /**\n   * Updates the properties on a relationship between two digital twins.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or relationship id is invalid.\n   *   * InvalidRelationship - The relationship is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * ValidationFailed - The relationship content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * RelationshipNotFound - The relationship was not found.\n   * * 409 Conflict\n   *   * RelationshipAlreadyExists - The relationship already exists.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case\n   *                       sensitive.\n   * @param patchDocument JSON Patch description of the update to the relationship properties.\n   * @param options The options parameters.\n   */\n  updateRelationship(\n    id: string,\n    relationshipId: string,\n    patchDocument: Record<string, unknown>[],\n    options?: DigitalTwinsUpdateRelationshipOptionalParams,\n  ): Promise<DigitalTwinsUpdateRelationshipResponse> {\n    return this.client.sendOperationRequest(\n      { id, relationshipId, patchDocument, options },\n      updateRelationshipOperationSpec,\n    );\n  }\n\n  /**\n   * Retrieves the relationships from a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  private _listRelationships(\n    id: string,\n    options?: DigitalTwinsListRelationshipsOptionalParams,\n  ): Promise<DigitalTwinsListRelationshipsResponse> {\n    return this.client.sendOperationRequest(\n      { id, options },\n      listRelationshipsOperationSpec,\n    );\n  }\n\n  /**\n   * Retrieves all incoming relationship for a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param options The options parameters.\n   */\n  private _listIncomingRelationships(\n    id: string,\n    options?: DigitalTwinsListIncomingRelationshipsOptionalParams,\n  ): Promise<DigitalTwinsListIncomingRelationshipsResponse> {\n    return this.client.sendOperationRequest(\n      { id, options },\n      listIncomingRelationshipsOperationSpec,\n    );\n  }\n\n  /**\n   * Sends telemetry on behalf of a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or message id is invalid.\n   *   * ValidationFailed - The telemetry content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param messageId A unique message identifier (in the scope of the digital twin id) that is commonly\n   *                  used for de-duplicating messages.\n   * @param telemetry The telemetry measurements to send from the digital twin.\n   * @param options The options parameters.\n   */\n  sendTelemetry(\n    id: string,\n    messageId: string,\n    telemetry: Record<string, unknown>,\n    options?: DigitalTwinsSendTelemetryOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { id, messageId, telemetry, options },\n      sendTelemetryOperationSpec,\n    );\n  }\n\n  /**\n   * Sends telemetry on behalf of a component in a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id, message id, or component path is invalid.\n   *   * ValidationFailed - The telemetry content is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * ComponentNotFound - The component path was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param componentPath The name of the DTDL component.\n   * @param messageId A unique message identifier (in the scope of the digital twin id) that is commonly\n   *                  used for de-duplicating messages.\n   * @param telemetry The telemetry measurements to send from the digital twin's component.\n   * @param options The options parameters.\n   */\n  sendComponentTelemetry(\n    id: string,\n    componentPath: string,\n    messageId: string,\n    telemetry: Record<string, unknown>,\n    options?: DigitalTwinsSendComponentTelemetryOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { id, componentPath, messageId, telemetry, options },\n      sendComponentTelemetryOperationSpec,\n    );\n  }\n\n  /**\n   * Retrieves a component from a digital twin.\n   * Status codes:\n   * * 200 OK\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id or component path is invalid.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   *   * ComponentNotFound - The component path was not found.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param componentPath The name of the DTDL component.\n   * @param options The options parameters.\n   */\n  getComponent(\n    id: string,\n    componentPath: string,\n    options?: DigitalTwinsGetComponentOptionalParams,\n  ): Promise<DigitalTwinsGetComponentResponse> {\n    return this.client.sendOperationRequest(\n      { id, componentPath, options },\n      getComponentOperationSpec,\n    );\n  }\n\n  /**\n   * Updates a component on a digital twin.\n   * Status codes:\n   * * 204 No Content\n   * * 400 Bad Request\n   *   * InvalidArgument - The digital twin id, component path, or payload is invalid.\n   *   * JsonPatchInvalid - The JSON Patch provided is invalid.\n   *   * ValidationFailed - Applying the patch results in an invalid digital twin.\n   * * 404 Not Found\n   *   * DigitalTwinNotFound - The digital twin was not found.\n   * * 412 Precondition Failed\n   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param componentPath The name of the DTDL component.\n   * @param patchDocument An update specification described by JSON Patch. Updates to property values and\n   *                      $model elements may happen in the same request. Operations are limited to add, replace and remove.\n   * @param options The options parameters.\n   */\n  updateComponent(\n    id: string,\n    componentPath: string,\n    patchDocument: Record<string, unknown>[],\n    options?: DigitalTwinsUpdateComponentOptionalParams,\n  ): Promise<DigitalTwinsUpdateComponentResponse> {\n    return this.client.sendOperationRequest(\n      { id, componentPath, patchDocument, options },\n      updateComponentOperationSpec,\n    );\n  }\n\n  /**\n   * ListRelationshipsNext\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param nextLink The nextLink from the previous successful call to the ListRelationships method.\n   * @param options The options parameters.\n   */\n  private _listRelationshipsNext(\n    id: string,\n    nextLink: string,\n    options?: DigitalTwinsListRelationshipsNextOptionalParams,\n  ): Promise<DigitalTwinsListRelationshipsNextResponse> {\n    return this.client.sendOperationRequest(\n      { id, nextLink, options },\n      listRelationshipsNextOperationSpec,\n    );\n  }\n\n  /**\n   * ListIncomingRelationshipsNext\n   * @param id The id of the digital twin. The id is unique within the service and case sensitive.\n   * @param nextLink The nextLink from the previous successful call to the ListIncomingRelationships\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _listIncomingRelationshipsNext(\n    id: string,\n    nextLink: string,\n    options?: DigitalTwinsListIncomingRelationshipsNextOptionalParams,\n  ): Promise<DigitalTwinsListIncomingRelationshipsNextResponse> {\n    return this.client.sendOperationRequest(\n      { id, nextLink, options },\n      listIncomingRelationshipsNextOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getByIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n      headersMapper: Mappers.DigitalTwinsGetByIdHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.DigitalTwinsGetByIdExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst addOperationSpec: coreClient.OperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n      headersMapper: Mappers.DigitalTwinsAddHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.DigitalTwinsAddExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.twin,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.ifNoneMatch,\n  ],\n  mediaType: \"json\",\n  serializer,\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.DigitalTwinsDeleteExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.accept, Parameters.ifMatch],\n  serializer,\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path: \"/digitaltwins/{id}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {\n      headersMapper: Mappers.DigitalTwinsUpdateHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.DigitalTwinsUpdateExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.patchDocument,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.contentType1,\n    Parameters.ifMatch,\n  ],\n  mediaType: \"json\",\n  serializer,\n};\nconst getRelationshipByIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n      headersMapper: Mappers.DigitalTwinsGetRelationshipByIdHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.DigitalTwinsGetRelationshipByIdExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst addRelationshipOperationSpec: coreClient.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n      headersMapper: Mappers.DigitalTwinsAddRelationshipHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.DigitalTwinsAddRelationshipExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.relationship,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.ifNoneMatch,\n  ],\n  mediaType: \"json\",\n  serializer,\n};\nconst deleteRelationshipOperationSpec: coreClient.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.DigitalTwinsDeleteRelationshipExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [Parameters.accept, Parameters.ifMatch],\n  serializer,\n};\nconst updateRelationshipOperationSpec: coreClient.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships/{relationshipId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {\n      headersMapper: Mappers.DigitalTwinsUpdateRelationshipHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.DigitalTwinsUpdateRelationshipExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.patchDocument,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.contentType1,\n    Parameters.ifMatch,\n  ],\n  mediaType: \"json\",\n  serializer,\n};\nconst listRelationshipsOperationSpec: coreClient.OperationSpec = {\n  path: \"/digitaltwins/{id}/relationships\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RelationshipCollection,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.DigitalTwinsListRelationshipsExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.relationshipName],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listIncomingRelationshipsOperationSpec: coreClient.OperationSpec = {\n  path: \"/digitaltwins/{id}/incomingrelationships\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IncomingRelationshipCollection,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper:\n        Mappers.DigitalTwinsListIncomingRelationshipsExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst sendTelemetryOperationSpec: coreClient.OperationSpec = {\n  path: \"/digitaltwins/{id}/telemetry\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.DigitalTwinsSendTelemetryExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.telemetry,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.messageId,\n    Parameters.telemetrySourceTime,\n  ],\n  mediaType: \"json\",\n  serializer,\n};\nconst sendComponentTelemetryOperationSpec: coreClient.OperationSpec = {\n  path: \"/digitaltwins/{id}/components/{componentPath}/telemetry\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.DigitalTwinsSendComponentTelemetryExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.telemetry,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.messageId,\n    Parameters.telemetrySourceTime,\n  ],\n  mediaType: \"json\",\n  serializer,\n};\nconst getComponentOperationSpec: coreClient.OperationSpec = {\n  path: \"/digitaltwins/{id}/components/{componentPath}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Dictionary\", value: { type: { name: \"any\" } } },\n      },\n      headersMapper: Mappers.DigitalTwinsGetComponentHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.DigitalTwinsGetComponentExceptionHeaders,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst updateComponentOperationSpec: coreClient.OperationSpec = {\n  path: \"/digitaltwins/{id}/components/{componentPath}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {\n      headersMapper: Mappers.DigitalTwinsUpdateComponentHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.DigitalTwinsUpdateComponentExceptionHeaders,\n    },\n  },\n  requestBody: Parameters.patchDocument,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.contentType1,\n    Parameters.ifMatch,\n  ],\n  mediaType: \"json\",\n  serializer,\n};\nconst listRelationshipsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RelationshipCollection,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.DigitalTwinsListRelationshipsNextExceptionHeaders,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listIncomingRelationshipsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.IncomingRelationshipCollection,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper:\n        Mappers.DigitalTwinsListIncomingRelationshipsNextExceptionHeaders,\n    },\n  },\n  urlParameters: [Parameters.$host, Parameters.id, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}