/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { DeleteJobs } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { AzureDigitalTwinsAPI } from "../azureDigitalTwinsAPI.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  DeleteJob,
  DeleteJobsListNextOptionalParams,
  DeleteJobsListOptionalParams,
  DeleteJobsListResponse,
  DeleteJobsAddOptionalParams,
  DeleteJobsAddResponse,
  DeleteJobsGetByIdOptionalParams,
  DeleteJobsGetByIdResponse,
  DeleteJobsListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing DeleteJobs operations. */
export class DeleteJobsImpl implements DeleteJobs {
  private readonly client: AzureDigitalTwinsAPI;

  /**
   * Initialize a new instance of the class DeleteJobs class.
   * @param client Reference to the service client
   */
  constructor(client: AzureDigitalTwinsAPI) {
    this.client = client;
  }

  /**
   * Retrieves all deletion jobs. This may be useful to find a delete job that was previously requested,
   * or to view a history of delete jobs that have run or are currently running on the instance.
   * Status codes:
   * * 200 OK
   * @param options The options parameters.
   */
  public list(
    options?: DeleteJobsListOptionalParams,
  ): PagedAsyncIterableIterator<DeleteJob> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: DeleteJobsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DeleteJob[]> {
    let result: DeleteJobsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: DeleteJobsListOptionalParams,
  ): AsyncIterableIterator<DeleteJob> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Initiates a job which deletes all models, twins, and relationships on the instance. Does not delete
   * any other types of entities.
   * Status codes:
   * * 202 Created
   * * 400 Bad Request
   *   * JobLimitReached - The maximum number of delete jobs allowed has been reached.
   *   * ValidationFailed - Operation-Id already exists.
   * @param options The options parameters.
   */
  async beginAdd(
    options?: DeleteJobsAddOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<DeleteJobsAddResponse>,
      DeleteJobsAddResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<DeleteJobsAddResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { options },
      spec: addOperationSpec,
    });
    const poller = await createHttpPoller<
      DeleteJobsAddResponse,
      OperationState<DeleteJobsAddResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Initiates a job which deletes all models, twins, and relationships on the instance. Does not delete
   * any other types of entities.
   * Status codes:
   * * 202 Created
   * * 400 Bad Request
   *   * JobLimitReached - The maximum number of delete jobs allowed has been reached.
   *   * ValidationFailed - Operation-Id already exists.
   * @param options The options parameters.
   */
  async beginAddAndWait(
    options?: DeleteJobsAddOptionalParams,
  ): Promise<DeleteJobsAddResponse> {
    const poller = await this.beginAdd(options);
    return poller.pollUntilDone();
  }

  /**
   * Retrieves all deletion jobs. This may be useful to find a delete job that was previously requested,
   * or to view a history of delete jobs that have run or are currently running on the instance.
   * Status codes:
   * * 200 OK
   * @param options The options parameters.
   */
  private _list(
    options?: DeleteJobsListOptionalParams,
  ): Promise<DeleteJobsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Retrieves a delete job.
   * Status codes:
   * * 200 OK
   * * 404 Not Found
   *   * DeleteJobNotFound - The delete job was not found.
   * @param id The id for the delete job. The id is unique within the service and case sensitive.
   * @param options The options parameters.
   */
  getById(
    id: string,
    options?: DeleteJobsGetByIdOptionalParams,
  ): Promise<DeleteJobsGetByIdResponse> {
    return this.client.sendOperationRequest(
      { id, options },
      getByIdOperationSpec,
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: DeleteJobsListNextOptionalParams,
  ): Promise<DeleteJobsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const addOperationSpec: coreClient.OperationSpec = {
  path: "/jobs/deletions",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeleteJob,
      headersMapper: Mappers.DeleteJobsAddHeaders,
    },
    201: {
      bodyMapper: Mappers.DeleteJob,
      headersMapper: Mappers.DeleteJobsAddHeaders,
    },
    202: {
      bodyMapper: Mappers.DeleteJob,
      headersMapper: Mappers.DeleteJobsAddHeaders,
    },
    204: {
      bodyMapper: Mappers.DeleteJob,
      headersMapper: Mappers.DeleteJobsAddHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.DeleteJobsAddExceptionHeaders,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeoutInMinutes],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.operationId],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/jobs/deletions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeleteJobCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.DeleteJobsListExceptionHeaders,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.resultsPerPage],
  serializer,
};
const getByIdOperationSpec: coreClient.OperationSpec = {
  path: "/jobs/deletions/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeleteJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.DeleteJobsGetByIdExceptionHeaders,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeleteJobCollection,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.DeleteJobsListNextExceptionHeaders,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.resultsPerPage],
  serializer,
};
