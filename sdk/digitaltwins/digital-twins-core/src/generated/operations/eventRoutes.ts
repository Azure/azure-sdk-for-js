/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { EventRoutes } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureDigitalTwinsAPI } from "../azureDigitalTwinsAPI";
import {
  EventRoute,
  EventRoutesListNextOptionalParams,
  EventRoutesListOptionalParams,
  EventRoutesListResponse,
  EventRoutesGetByIdOptionalParams,
  EventRoutesGetByIdResponse,
  EventRoutesAddOptionalParams,
  EventRoutesDeleteOptionalParams,
  EventRoutesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing EventRoutes operations. */
export class EventRoutesImpl implements EventRoutes {
  private readonly client: AzureDigitalTwinsAPI;

  /**
   * Initialize a new instance of the class EventRoutes class.
   * @param client Reference to the service client
   */
  constructor(client: AzureDigitalTwinsAPI) {
    this.client = client;
  }

  /**
   * Retrieves all event routes.
   * Status codes:
   * * 200 OK
   * @param options The options parameters.
   */
  public list(
    options?: EventRoutesListOptionalParams
  ): PagedAsyncIterableIterator<EventRoute> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: EventRoutesListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<EventRoute[]> {
    let result: EventRoutesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: EventRoutesListOptionalParams
  ): AsyncIterableIterator<EventRoute> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Retrieves all event routes.
   * Status codes:
   * * 200 OK
   * @param options The options parameters.
   */
  private _list(
    options?: EventRoutesListOptionalParams
  ): Promise<EventRoutesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Retrieves an event route.
   * Status codes:
   * * 200 OK
   * * 404 Not Found
   *   * EventRouteNotFound - The event route was not found.
   * @param id The id for an event route. The id is unique within event routes and case sensitive.
   * @param options The options parameters.
   */
  getById(
    id: string,
    options?: EventRoutesGetByIdOptionalParams
  ): Promise<EventRoutesGetByIdResponse> {
    return this.client.sendOperationRequest(
      { id, options },
      getByIdOperationSpec
    );
  }

  /**
   * Adds or replaces an event route.
   * Status codes:
   * * 204 No Content
   * * 400 Bad Request
   *   * EventRouteEndpointInvalid - The endpoint provided does not exist or is not active.
   *   * EventRouteFilterInvalid - The event route filter is invalid.
   *   * EventRouteIdInvalid - The event route id is invalid.
   *   * LimitExceeded - The maximum number of event routes allowed has been reached.
   * @param id The id for an event route. The id is unique within event routes and case sensitive.
   * @param options The options parameters.
   */
  add(id: string, options?: EventRoutesAddOptionalParams): Promise<void> {
    return this.client.sendOperationRequest({ id, options }, addOperationSpec);
  }

  /**
   * Deletes an event route.
   * Status codes:
   * * 204 No Content
   * * 404 Not Found
   *   * EventRouteNotFound - The event route was not found.
   * @param id The id for an event route. The id is unique within event routes and case sensitive.
   * @param options The options parameters.
   */
  delete(id: string, options?: EventRoutesDeleteOptionalParams): Promise<void> {
    return this.client.sendOperationRequest(
      { id, options },
      deleteOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: EventRoutesListNextOptionalParams
  ): Promise<EventRoutesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/eventroutes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventRouteCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.resultsPerPage],
  serializer
};
const getByIdOperationSpec: coreClient.OperationSpec = {
  path: "/eventroutes/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventRoute
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const addOperationSpec: coreClient.OperationSpec = {
  path: "/eventroutes/{id}",
  httpMethod: "PUT",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.eventRoute,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/eventroutes/{id}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EventRouteCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.resultsPerPage],
  serializer
};
