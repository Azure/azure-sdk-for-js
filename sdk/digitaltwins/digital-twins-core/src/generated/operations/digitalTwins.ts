/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { DigitalTwins } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureDigitalTwinsAPI } from "../azureDigitalTwinsAPI";
import {
  DigitalTwinsListRelationshipsNextOptionalParams,
  DigitalTwinsListRelationshipsOptionalParams,
  DigitalTwinsListRelationshipsResponse,
  IncomingRelationship,
  DigitalTwinsListIncomingRelationshipsNextOptionalParams,
  DigitalTwinsListIncomingRelationshipsOptionalParams,
  DigitalTwinsListIncomingRelationshipsResponse,
  DigitalTwinsGetByIdOptionalParams,
  DigitalTwinsGetByIdResponse,
  DigitalTwinsAddOptionalParams,
  DigitalTwinsAddResponse,
  DigitalTwinsDeleteOptionalParams,
  DigitalTwinsUpdateOptionalParams,
  DigitalTwinsUpdateResponse,
  DigitalTwinsGetRelationshipByIdOptionalParams,
  DigitalTwinsGetRelationshipByIdResponse,
  DigitalTwinsAddRelationshipOptionalParams,
  DigitalTwinsAddRelationshipResponse,
  DigitalTwinsDeleteRelationshipOptionalParams,
  DigitalTwinsUpdateRelationshipOptionalParams,
  DigitalTwinsUpdateRelationshipResponse,
  DigitalTwinsSendTelemetryOptionalParams,
  DigitalTwinsSendComponentTelemetryOptionalParams,
  DigitalTwinsGetComponentOptionalParams,
  DigitalTwinsGetComponentResponse,
  DigitalTwinsUpdateComponentOptionalParams,
  DigitalTwinsUpdateComponentResponse,
  DigitalTwinsListRelationshipsNextResponse,
  DigitalTwinsListIncomingRelationshipsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DigitalTwins operations. */
export class DigitalTwinsImpl implements DigitalTwins {
  private readonly client: AzureDigitalTwinsAPI;

  /**
   * Initialize a new instance of the class DigitalTwins class.
   * @param client Reference to the service client
   */
  constructor(client: AzureDigitalTwinsAPI) {
    this.client = client;
  }

  /**
   * Retrieves the relationships from a digital twin.
   * Status codes:
   * * 200 OK
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id is invalid.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param options The options parameters.
   */
  public listRelationships(
    id: string,
    options?: DigitalTwinsListRelationshipsOptionalParams
  ): PagedAsyncIterableIterator<Record<string, unknown>> {
    const iter = this.listRelationshipsPagingAll(id, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listRelationshipsPagingPage(id, options, settings);
      }
    };
  }

  private async *listRelationshipsPagingPage(
    id: string,
    options?: DigitalTwinsListRelationshipsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Record<string, unknown>[]> {
    let result: DigitalTwinsListRelationshipsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listRelationships(id, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listRelationshipsNext(
        id,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listRelationshipsPagingAll(
    id: string,
    options?: DigitalTwinsListRelationshipsOptionalParams
  ): AsyncIterableIterator<Record<string, unknown>> {
    for await (const page of this.listRelationshipsPagingPage(id, options)) {
      yield* page;
    }
  }

  /**
   * Retrieves all incoming relationship for a digital twin.
   * Status codes:
   * * 200 OK
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id is invalid.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param options The options parameters.
   */
  public listIncomingRelationships(
    id: string,
    options?: DigitalTwinsListIncomingRelationshipsOptionalParams
  ): PagedAsyncIterableIterator<IncomingRelationship> {
    const iter = this.listIncomingRelationshipsPagingAll(id, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listIncomingRelationshipsPagingPage(id, options, settings);
      }
    };
  }

  private async *listIncomingRelationshipsPagingPage(
    id: string,
    options?: DigitalTwinsListIncomingRelationshipsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<IncomingRelationship[]> {
    let result: DigitalTwinsListIncomingRelationshipsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listIncomingRelationships(id, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listIncomingRelationshipsNext(
        id,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listIncomingRelationshipsPagingAll(
    id: string,
    options?: DigitalTwinsListIncomingRelationshipsOptionalParams
  ): AsyncIterableIterator<IncomingRelationship> {
    for await (const page of this.listIncomingRelationshipsPagingPage(
      id,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Retrieves a digital twin.
   * Status codes:
   * * 200 OK
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id is invalid.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param options The options parameters.
   */
  getById(
    id: string,
    options?: DigitalTwinsGetByIdOptionalParams
  ): Promise<DigitalTwinsGetByIdResponse> {
    return this.client.sendOperationRequest(
      { id, options },
      getByIdOperationSpec
    );
  }

  /**
   * Adds or replaces a digital twin.
   * Status codes:
   * * 200 OK
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id or payload is invalid.
   *   * ModelDecommissioned - The model for the digital twin is decommissioned.
   *   * TwinLimitReached - The maximum number of digital twins allowed has been reached.
   *   * ValidationFailed - The digital twin payload is not valid.
   * * 412 Precondition Failed
   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param twin The digital twin instance being added. If provided, the $dtId property is ignored.
   * @param options The options parameters.
   */
  add(
    id: string,
    twin: Record<string, unknown>,
    options?: DigitalTwinsAddOptionalParams
  ): Promise<DigitalTwinsAddResponse> {
    return this.client.sendOperationRequest(
      { id, twin, options },
      addOperationSpec
    );
  }

  /**
   * Deletes a digital twin. All relationships referencing the digital twin must already be deleted.
   * Status codes:
   * * 204 No Content
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id is invalid.
   *   * RelationshipsNotDeleted - The digital twin contains relationships.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   * * 412 Precondition Failed
   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param options The options parameters.
   */
  delete(
    id: string,
    options?: DigitalTwinsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { id, options },
      deleteOperationSpec
    );
  }

  /**
   * Updates a digital twin.
   * Status codes:
   * * 204 No Content
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id or payload is invalid.
   *   * JsonPatchInvalid - The JSON Patch provided is invalid.
   *   * ValidationFailed - Applying the patch results in an invalid digital twin.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   * * 412 Precondition Failed
   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param patchDocument An update specification described by JSON Patch. Updates to property values and
   *                      $model elements may happen in the same request. Operations are limited to add, replace and remove.
   * @param options The options parameters.
   */
  update(
    id: string,
    patchDocument: Record<string, unknown>[],
    options?: DigitalTwinsUpdateOptionalParams
  ): Promise<DigitalTwinsUpdateResponse> {
    return this.client.sendOperationRequest(
      { id, patchDocument, options },
      updateOperationSpec
    );
  }

  /**
   * Retrieves a relationship between two digital twins.
   * Status codes:
   * * 200 OK
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id or relationship id is invalid.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   *   * RelationshipNotFound - The relationship was not found.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case
   *                       sensitive.
   * @param options The options parameters.
   */
  getRelationshipById(
    id: string,
    relationshipId: string,
    options?: DigitalTwinsGetRelationshipByIdOptionalParams
  ): Promise<DigitalTwinsGetRelationshipByIdResponse> {
    return this.client.sendOperationRequest(
      { id, relationshipId, options },
      getRelationshipByIdOperationSpec
    );
  }

  /**
   * Adds a relationship between two digital twins.
   * Status codes:
   * * 200 OK
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id, relationship id, or payload is invalid.
   *   * InvalidRelationship - The relationship is invalid.
   *   * OperationNotAllowed - The relationship cannot connect to the same digital twin.
   *   * ValidationFailed - The relationship content is invalid.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   *   * TargetTwinNotFound - The digital twin target of the relationship was not found.
   * * 412 Precondition Failed
   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case
   *                       sensitive.
   * @param relationship The data for the relationship.
   * @param options The options parameters.
   */
  addRelationship(
    id: string,
    relationshipId: string,
    relationship: Record<string, unknown>,
    options?: DigitalTwinsAddRelationshipOptionalParams
  ): Promise<DigitalTwinsAddRelationshipResponse> {
    return this.client.sendOperationRequest(
      { id, relationshipId, relationship, options },
      addRelationshipOperationSpec
    );
  }

  /**
   * Deletes a relationship between two digital twins.
   * Status codes:
   * * 204 No Content
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id or relationship id is invalid.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   *   * RelationshipNotFound - The relationship was not found.
   * * 412 Precondition Failed
   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case
   *                       sensitive.
   * @param options The options parameters.
   */
  deleteRelationship(
    id: string,
    relationshipId: string,
    options?: DigitalTwinsDeleteRelationshipOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { id, relationshipId, options },
      deleteRelationshipOperationSpec
    );
  }

  /**
   * Updates the properties on a relationship between two digital twins.
   * Status codes:
   * * 204 No Content
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id or relationship id is invalid.
   *   * InvalidRelationship - The relationship is invalid.
   *   * JsonPatchInvalid - The JSON Patch provided is invalid.
   *   * ValidationFailed - The relationship content is invalid.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   *   * RelationshipNotFound - The relationship was not found.
   * * 409 Conflict
   *   * RelationshipAlreadyExists - The relationship already exists.
   * * 412 Precondition Failed
   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param relationshipId The id of the relationship. The id is unique within the digital twin and case
   *                       sensitive.
   * @param patchDocument JSON Patch description of the update to the relationship properties.
   * @param options The options parameters.
   */
  updateRelationship(
    id: string,
    relationshipId: string,
    patchDocument: Record<string, unknown>[],
    options?: DigitalTwinsUpdateRelationshipOptionalParams
  ): Promise<DigitalTwinsUpdateRelationshipResponse> {
    return this.client.sendOperationRequest(
      { id, relationshipId, patchDocument, options },
      updateRelationshipOperationSpec
    );
  }

  /**
   * Retrieves the relationships from a digital twin.
   * Status codes:
   * * 200 OK
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id is invalid.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param options The options parameters.
   */
  private _listRelationships(
    id: string,
    options?: DigitalTwinsListRelationshipsOptionalParams
  ): Promise<DigitalTwinsListRelationshipsResponse> {
    return this.client.sendOperationRequest(
      { id, options },
      listRelationshipsOperationSpec
    );
  }

  /**
   * Retrieves all incoming relationship for a digital twin.
   * Status codes:
   * * 200 OK
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id is invalid.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param options The options parameters.
   */
  private _listIncomingRelationships(
    id: string,
    options?: DigitalTwinsListIncomingRelationshipsOptionalParams
  ): Promise<DigitalTwinsListIncomingRelationshipsResponse> {
    return this.client.sendOperationRequest(
      { id, options },
      listIncomingRelationshipsOperationSpec
    );
  }

  /**
   * Sends telemetry on behalf of a digital twin.
   * Status codes:
   * * 204 No Content
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id or message id is invalid.
   *   * ValidationFailed - The telemetry content is invalid.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param messageId A unique message identifier (in the scope of the digital twin id) that is commonly
   *                  used for de-duplicating messages.
   * @param telemetry The telemetry measurements to send from the digital twin.
   * @param options The options parameters.
   */
  sendTelemetry(
    id: string,
    messageId: string,
    telemetry: Record<string, unknown>,
    options?: DigitalTwinsSendTelemetryOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { id, messageId, telemetry, options },
      sendTelemetryOperationSpec
    );
  }

  /**
   * Sends telemetry on behalf of a component in a digital twin.
   * Status codes:
   * * 204 No Content
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id, message id, or component path is invalid.
   *   * ValidationFailed - The telemetry content is invalid.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   *   * ComponentNotFound - The component path was not found.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param messageId A unique message identifier (in the scope of the digital twin id) that is commonly
   *                  used for de-duplicating messages.
   * @param telemetry The telemetry measurements to send from the digital twin's component.
   * @param options The options parameters.
   */
  sendComponentTelemetry(
    id: string,
    componentPath: string,
    messageId: string,
    telemetry: Record<string, unknown>,
    options?: DigitalTwinsSendComponentTelemetryOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { id, componentPath, messageId, telemetry, options },
      sendComponentTelemetryOperationSpec
    );
  }

  /**
   * Retrieves a component from a digital twin.
   * Status codes:
   * * 200 OK
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id or component path is invalid.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   *   * ComponentNotFound - The component path was not found.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param options The options parameters.
   */
  getComponent(
    id: string,
    componentPath: string,
    options?: DigitalTwinsGetComponentOptionalParams
  ): Promise<DigitalTwinsGetComponentResponse> {
    return this.client.sendOperationRequest(
      { id, componentPath, options },
      getComponentOperationSpec
    );
  }

  /**
   * Updates a component on a digital twin.
   * Status codes:
   * * 204 No Content
   * * 400 Bad Request
   *   * InvalidArgument - The digital twin id, component path, or payload is invalid.
   *   * JsonPatchInvalid - The JSON Patch provided is invalid.
   *   * ValidationFailed - Applying the patch results in an invalid digital twin.
   * * 404 Not Found
   *   * DigitalTwinNotFound - The digital twin was not found.
   * * 412 Precondition Failed
   *   * PreconditionFailed - The precondition check (If-Match or If-None-Match) failed.
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param componentPath The name of the DTDL component.
   * @param patchDocument An update specification described by JSON Patch. Updates to property values and
   *                      $model elements may happen in the same request. Operations are limited to add, replace and remove.
   * @param options The options parameters.
   */
  updateComponent(
    id: string,
    componentPath: string,
    patchDocument: Record<string, unknown>[],
    options?: DigitalTwinsUpdateComponentOptionalParams
  ): Promise<DigitalTwinsUpdateComponentResponse> {
    return this.client.sendOperationRequest(
      { id, componentPath, patchDocument, options },
      updateComponentOperationSpec
    );
  }

  /**
   * ListRelationshipsNext
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param nextLink The nextLink from the previous successful call to the ListRelationships method.
   * @param options The options parameters.
   */
  private _listRelationshipsNext(
    id: string,
    nextLink: string,
    options?: DigitalTwinsListRelationshipsNextOptionalParams
  ): Promise<DigitalTwinsListRelationshipsNextResponse> {
    return this.client.sendOperationRequest(
      { id, nextLink, options },
      listRelationshipsNextOperationSpec
    );
  }

  /**
   * ListIncomingRelationshipsNext
   * @param id The id of the digital twin. The id is unique within the service and case sensitive.
   * @param nextLink The nextLink from the previous successful call to the ListIncomingRelationships
   *                 method.
   * @param options The options parameters.
   */
  private _listIncomingRelationshipsNext(
    id: string,
    nextLink: string,
    options?: DigitalTwinsListIncomingRelationshipsNextOptionalParams
  ): Promise<DigitalTwinsListIncomingRelationshipsNextResponse> {
    return this.client.sendOperationRequest(
      { id, nextLink, options },
      listIncomingRelationshipsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getByIdOperationSpec: coreClient.OperationSpec = {
  path: "/digitaltwins/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      },
      headersMapper: Mappers.DigitalTwinsGetByIdHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const addOperationSpec: coreClient.OperationSpec = {
  path: "/digitaltwins/{id}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      },
      headersMapper: Mappers.DigitalTwinsAddHeaders
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.twin,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.ifNoneMatch
  ],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/digitaltwins/{id}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept, Parameters.ifMatch],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/digitaltwins/{id}",
  httpMethod: "PATCH",
  responses: {
    202: {},
    204: {
      headersMapper: Mappers.DigitalTwinsUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.patchDocument,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType1,
    Parameters.ifMatch
  ],
  mediaType: "json",
  serializer
};
const getRelationshipByIdOperationSpec: coreClient.OperationSpec = {
  path: "/digitaltwins/{id}/relationships/{relationshipId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      },
      headersMapper: Mappers.DigitalTwinsGetRelationshipByIdHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],
  headerParameters: [Parameters.accept],
  serializer
};
const addRelationshipOperationSpec: coreClient.OperationSpec = {
  path: "/digitaltwins/{id}/relationships/{relationshipId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      },
      headersMapper: Mappers.DigitalTwinsAddRelationshipHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.relationship,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.ifNoneMatch
  ],
  mediaType: "json",
  serializer
};
const deleteRelationshipOperationSpec: coreClient.OperationSpec = {
  path: "/digitaltwins/{id}/relationships/{relationshipId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],
  headerParameters: [Parameters.accept, Parameters.ifMatch],
  serializer
};
const updateRelationshipOperationSpec: coreClient.OperationSpec = {
  path: "/digitaltwins/{id}/relationships/{relationshipId}",
  httpMethod: "PATCH",
  responses: {
    204: {
      headersMapper: Mappers.DigitalTwinsUpdateRelationshipHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.patchDocument,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.relationshipId],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType1,
    Parameters.ifMatch
  ],
  mediaType: "json",
  serializer
};
const listRelationshipsOperationSpec: coreClient.OperationSpec = {
  path: "/digitaltwins/{id}/relationships",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RelationshipCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.relationshipName],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const listIncomingRelationshipsOperationSpec: coreClient.OperationSpec = {
  path: "/digitaltwins/{id}/incomingrelationships",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IncomingRelationshipCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const sendTelemetryOperationSpec: coreClient.OperationSpec = {
  path: "/digitaltwins/{id}/telemetry",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.telemetry,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.messageId,
    Parameters.telemetrySourceTime
  ],
  mediaType: "json",
  serializer
};
const sendComponentTelemetryOperationSpec: coreClient.OperationSpec = {
  path: "/digitaltwins/{id}/components/{componentPath}/telemetry",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.telemetry,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.messageId,
    Parameters.telemetrySourceTime
  ],
  mediaType: "json",
  serializer
};
const getComponentOperationSpec: coreClient.OperationSpec = {
  path: "/digitaltwins/{id}/components/{componentPath}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      },
      headersMapper: Mappers.DigitalTwinsGetComponentHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],
  headerParameters: [Parameters.accept],
  serializer
};
const updateComponentOperationSpec: coreClient.OperationSpec = {
  path: "/digitaltwins/{id}/components/{componentPath}",
  httpMethod: "PATCH",
  responses: {
    202: {},
    204: {
      headersMapper: Mappers.DigitalTwinsUpdateComponentHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.patchDocument,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id, Parameters.componentPath],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType1,
    Parameters.ifMatch
  ],
  mediaType: "json",
  serializer
};
const listRelationshipsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RelationshipCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.id, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listIncomingRelationshipsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IncomingRelationshipCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.id, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
