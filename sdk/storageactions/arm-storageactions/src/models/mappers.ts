/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean",
        },
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay",
        },
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" },
          },
        },
      },
    },
  },
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid",
        },
      },
    },
  },
};

export const StorageTaskProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskProperties",
    modelProperties: {
      taskVersion: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 1,
        },
        serializedName: "taskVersion",
        readOnly: true,
        type: {
          name: "Number",
        },
      },
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      description: {
        serializedName: "description",
        required: true,
        type: {
          name: "String",
        },
      },
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "StorageTaskAction",
        },
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "ValidateSubscriptionQuotaBegin",
            "ValidateSubscriptionQuotaEnd",
            "Creating",
            "Succeeded",
            "Deleting",
            "Canceled",
            "Failed",
          ],
        },
      },
      creationTimeInUtc: {
        serializedName: "creationTimeInUtc",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const StorageTaskAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskAction",
    modelProperties: {
      if: {
        serializedName: "if",
        type: {
          name: "Composite",
          className: "IfCondition",
        },
      },
      else: {
        serializedName: "else",
        type: {
          name: "Composite",
          className: "ElseCondition",
        },
      },
    },
  },
};

export const IfCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IfCondition",
    modelProperties: {
      condition: {
        serializedName: "condition",
        required: true,
        type: {
          name: "String",
        },
      },
      operations: {
        serializedName: "operations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageTaskOperation",
            },
          },
        },
      },
    },
  },
};

export const StorageTaskOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskOperation",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      onSuccess: {
        defaultValue: "continue",
        isConstant: true,
        serializedName: "onSuccess",
        type: {
          name: "String",
        },
      },
      onFailure: {
        defaultValue: "break",
        isConstant: true,
        serializedName: "onFailure",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ElseCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ElseCondition",
    modelProperties: {
      operations: {
        serializedName: "operations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageTaskOperation",
            },
          },
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const StorageTaskUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskUpdateParameters",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageTaskProperties",
        },
      },
    },
  },
};

export const StorageTasksListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTasksListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageTask",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageTaskAssignmentsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskAssignmentsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageTaskAssignment",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageTaskAssignment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskAssignment",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageTaskReportSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskReportSummary",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageTaskReportInstance",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageTaskReportProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskReportProperties",
    modelProperties: {
      taskAssignmentId: {
        serializedName: "taskAssignmentId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      finishTime: {
        serializedName: "finishTime",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      objectsTargetedCount: {
        serializedName: "objectsTargetedCount",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      objectsOperatedOnCount: {
        serializedName: "objectsOperatedOnCount",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      objectFailedCount: {
        serializedName: "objectFailedCount",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      objectsSucceededCount: {
        serializedName: "objectsSucceededCount",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      runStatusError: {
        serializedName: "runStatusError",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      runStatusEnum: {
        serializedName: "runStatusEnum",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      summaryReportPath: {
        serializedName: "summaryReportPath",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      taskId: {
        serializedName: "taskId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      taskVersion: {
        serializedName: "taskVersion",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      runResult: {
        serializedName: "runResult",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageTaskPreviewAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskPreviewAction",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageTaskPreviewActionProperties",
        },
      },
    },
  },
};

export const StorageTaskPreviewActionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskPreviewActionProperties",
    modelProperties: {
      container: {
        serializedName: "container",
        type: {
          name: "Composite",
          className: "StorageTaskPreviewContainerProperties",
        },
      },
      blobs: {
        serializedName: "blobs",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageTaskPreviewBlobProperties",
            },
          },
        },
      },
      action: {
        serializedName: "action",
        type: {
          name: "Composite",
          className: "StorageTaskPreviewActionCondition",
        },
      },
    },
  },
};

export const StorageTaskPreviewContainerProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "StorageTaskPreviewContainerProperties",
      modelProperties: {
        name: {
          serializedName: "name",
          type: {
            name: "String",
          },
        },
        metadata: {
          serializedName: "metadata",
          type: {
            name: "Sequence",
            element: {
              type: {
                name: "Composite",
                className: "StorageTaskPreviewKeyValueProperties",
              },
            },
          },
        },
      },
    },
  };

export const StorageTaskPreviewKeyValueProperties: coreClient.CompositeMapper =
  {
    type: {
      name: "Composite",
      className: "StorageTaskPreviewKeyValueProperties",
      modelProperties: {
        key: {
          serializedName: "key",
          type: {
            name: "String",
          },
        },
        value: {
          serializedName: "value",
          type: {
            name: "String",
          },
        },
      },
    },
  };

export const StorageTaskPreviewBlobProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskPreviewBlobProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageTaskPreviewKeyValueProperties",
            },
          },
        },
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageTaskPreviewKeyValueProperties",
            },
          },
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageTaskPreviewKeyValueProperties",
            },
          },
        },
      },
      matchedBlock: {
        serializedName: "matchedBlock",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageTaskPreviewActionCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskPreviewActionCondition",
    modelProperties: {
      if: {
        serializedName: "if",
        type: {
          name: "Composite",
          className: "StorageTaskPreviewActionIfCondition",
        },
      },
      elseBlockExists: {
        serializedName: "elseBlockExists",
        required: true,
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const StorageTaskPreviewActionIfCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskPreviewActionIfCondition",
    modelProperties: {
      condition: {
        serializedName: "condition",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const StorageTask: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTask",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity",
        },
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageTaskProperties",
        },
      },
    },
  },
};

export const StorageTaskReportInstance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTaskReportInstance",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StorageTaskReportProperties",
        },
      },
    },
  },
};

export const StorageTasksCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTasksCreateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageTasksDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTasksDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const StorageTasksUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageTasksUpdateHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
    },
  },
};
