/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  record,
  RecorderEnvironmentSetup,
  Recorder
} from "@azure-tools/test-recorder";
import * as assert from "assert";
import { ClientSecretCredential } from "@azure/identity";
import { ConsumptionManagementClient } from "../src/consumptionManagementClient";
// import { ComputeManagementClient,VirtualMachine } from "@azure/arm-compute";
import { NetworkManagementClient,NetworkInterface,VirtualNetwork } from "@azure/arm-network";

const recorderEnvSetup: RecorderEnvironmentSetup = {
  replaceableVariables: {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
  },
  customizationsOnRecordings: [
    (recording: any): any =>
      recording.replace(
        /"access_token":"[^"]*"/g,
        `"access_token":"access_token"`
      )
  ],
  queryParametersToSkip: []
};

describe("My test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: ConsumptionManagementClient;
  // let compute_client: ComputeManagementClient;
  let network_client: NetworkManagementClient;
  let location: string;
  let resourceGroup: string;
  let subnet_name: string;
  let interface_name: string;
  let budgetName: string;
  let vmName: string;
  let network_name: string;
  let scope: string;

  beforeEach(async function() {
    recorder = record(this, recorderEnvSetup);
    subscriptionId = env.SUBSCRIPTION_ID;
    // This is an example of how the environment variables are used
    const credential = new ClientSecretCredential(
      env.AZURE_TENANT_ID,
      env.AZURE_CLIENT_ID,
      env.AZURE_CLIENT_SECRET
    );
    client = new ConsumptionManagementClient(credential, subscriptionId);
    // compute_client = new ComputeManagementClient(credential,subscriptionId);
    network_client = new NetworkManagementClient(credential,subscriptionId);
    location = "eastus";
    resourceGroup = "myjstest";
    subnet_name = "subnetxxx";
    interface_name = "myinterfacexxx";
    interface_name = "myinterfacexxx";
    budgetName = "mybudgetxxxy";
    vmName = "myvmxxx";
    network_name = "mynetworkxxy";
    scope = "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup;
  });

  afterEach(async function() {
    await recorder.stop();
  });

  // //network_client.virtualNetworks.createOrUpdate
  // async function createVirtualNetwork() {
  //     const parameter: VirtualNetwork = {
  //       location: location,
  //       addressSpace: {
  //         addressPrefixes: ["10.0.0.0/16"],
  //       },
  //     };
  //     const virtualNetworks_create_info = await network_client.virtualNetworks.beginCreateOrUpdateAndWait(resourceGroup,network_name,parameter);
  //     console.log(virtualNetworks_create_info);
    
  //     //
  //     const subnet__create_info = await network_client.subnets.beginCreateOrUpdateAndWait(resourceGroup,network_name,subnet_name,{addressPrefix: "10.0.0.0/24"});
  // }
  
  // //network_client.networkInterfaces.createOrUpdate
  // async function createNetworkInterface(group_name: any,location: any,nic_name: any) {
  //     const parameter: NetworkInterface = {
  //         location: location,
  //         ipConfigurations: [
  //             {
  //                 name: "MyIpConfig",
  //                 subnet: {
  //                 id: "/subscriptions/" +subscriptionId +"/resourceGroups/" +resourceGroup +"/providers/Microsoft.Network/virtualNetworks/" +network_name +"/subnets/" +subnet_name,
  //                 }
  //             }
  //         ]
  //     }
  //     const nic_info = await network_client.networkInterfaces.beginCreateOrUpdateAndWait(group_name,nic_name,parameter);
  // }

  // //virtualMachines.createOrUpdate
  // async function virtualMachines_createOrUpdate() {
  //     await createVirtualNetwork();
  //     await createNetworkInterface(resourceGroup, location, interface_name);
  //     const parameter: VirtualMachine = {
  //         location: location,
  //         hardwareProfile: {
  //         vmSize: "Standard_D2_v2",
  //         },
  //         storageProfile: {
  //         imageReference: {
  //             sku: "2016-Datacenter",
  //             publisher: "MicrosoftWindowsServer",
  //             version: "latest",
  //             offer: "WindowsServer",
  //         },
  //         osDisk: {
  //             caching: "ReadWrite",
  //             managedDisk: {
  //             storageAccountType: "Standard_LRS",
  //             },
  //             name: "myVMosdisk",
  //             createOption: "FromImage",
  //         },
  //         dataDisks: [
  //             {
  //             diskSizeGB: 1023,
  //             createOption: "Empty",
  //             lun: 0,
  //             },
  //             {
  //             diskSizeGB: 1023,
  //             createOption: "Empty",
  //             lun: 1,
  //             },
  //         ],
  //         },
  //         osProfile: {
  //         adminUsername: "testuser",
  //         computerName: "myVM",
  //         adminPassword: "Aa!1()-xyz",
  //         windowsConfiguration: {
  //             enableAutomaticUpdates: true, // need automatic update for reimage
  //         },
  //         },
  //         networkProfile: {
  //         networkInterfaces: [
  //             {
  //             id:
  //                 "/subscriptions/" +subscriptionId +"/resourceGroups/" +resourceGroup +"/providers/Microsoft.Network/networkInterfaces/" +interface_name,
  //                 primary: true,
  //             },
  //         ],
  //         },
  //     };
  //     const res = await compute_client.virtualMachines.beginCreateOrUpdateAndWait(resourceGroup,vmName,parameter);
  //     console.log(res);
  // }

  it("budgets create test", async function() {
    const res = await client.budgets.createOrUpdate(scope,budgetName,{
      category: "Cost",
        amount: 100,
        timeGrain: "Monthly",
        timePeriod: {
            startDate: new Date("2021-11-01T00:00:00Z"),
            endDate: new Date("2021-11-31T00:00:00Z")
        },
        filter: {
            and: [
                {
                    dimensions: {
                        name: "ResourceId",
                        operator: "In",
                        values: [
                            "/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroup+"/providers/Microsoft.Compute/virtualMachines/"+vmName
                        ]
                    }
                },
                {
                    tags: {
                        name: "category",
                        operator: "In",
                        values: [
                            "Dev",
                            "Prod"
                        ]
                    }
                }
            ]
        },
        notifications: {
            Actual_GreaterThan_80_Percent: {
                enabled: true,
                operator: "GreaterThan",
                threshold: 80,
                contactEmails: [
                    "johndoe@contoso.com",
                    "janesmith@contoso.com"
                ],
                contactRoles: [
                    "Contributor",
                    "Reader"
                ],
                thresholdType: "Actual"
            }
        }
    });
    assert.equal(res.name,budgetName);
  });

  it("budgets get test", async function() {
    const res = await client.budgets.get(scope,budgetName);
    assert.equal(res.name,budgetName);
  });

  it("budgets delete test", async function() {
    const res = await client.budgets.delete(scope,budgetName);
  });
});
