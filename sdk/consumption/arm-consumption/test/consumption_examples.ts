/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  RecorderStartOptions,
  delay,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { Context } from "mocha";
import { ConsumptionManagementClient } from "../src/consumptionManagementClient";

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("Consumption test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: ConsumptionManagementClient;
  let location: string;
  let resourceGroup: string;
  let budgetName: string;
  let vmName: string;
  let scope: string;

  beforeEach(async function (this: Context) {
    recorder = new Recorder(this.currentTest);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new ConsumptionManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
    location = "eastus";
    resourceGroup = "myjstest";
    budgetName = "mybudgetxxxy";
    vmName = "myvmxxx";
    scope = "subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup;
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("budgets create test", async function () {
    const res = await client.budgets.createOrUpdate(scope, budgetName, {
      category: "Cost",
      amount: 100,
      timeGrain: "Monthly",
      timePeriod: {
        startDate: new Date("2022-09-01T00:00:00Z"),
        endDate: new Date("2022-09-31T00:00:00Z")
      },
      filter: {
        and: [
          {
            dimensions: {
              name: "ResourceId",
              operator: "In",
              values: [
                "subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.Compute/virtualMachines/" + vmName
              ]
            }
          },
          {
            tags: {
              name: "category",
              operator: "In",
              values: [
                "Dev",
                "Prod"
              ]
            }
          }
        ]
      },
      notifications: {
        Actual_GreaterThan_80_Percent: {
          enabled: true,
          operator: "GreaterThan",
          threshold: 80,
          contactEmails: [
            "johndoe@contoso.com",
            "janesmith@contoso.com"
          ],
          contactRoles: [
            "Contributor",
            "Reader"
          ],
          thresholdType: "Actual"
        }
      }
    });
    assert.equal(res.name, budgetName);
  });

  it("budgets get test", async function () {
    const res = await client.budgets.get(scope, budgetName);
    assert.equal(res.name, budgetName);
  });

  it("budgets delete test", async function () {
    const res = await client.budgets.delete(scope, budgetName);
  });
});
