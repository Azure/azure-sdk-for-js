/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  record,
  RecorderEnvironmentSetup,
  Recorder,
  delay,
  isPlaybackMode
} from "@azure-tools/test-recorder";
import * as assert from "assert";
import { ClientSecretCredential } from "@azure/identity";
import { ConsumptionManagementClient } from "../src/consumptionManagementClient";

const recorderEnvSetup: RecorderEnvironmentSetup = {
  replaceableVariables: {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
  },
  customizationsOnRecordings: [
    (recording: any): any =>
      recording.replace(
        /"access_token":"[^"]*"/g,
        `"access_token":"access_token"`
      )
  ],
  queryParametersToSkip: []
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("Consumption test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: ConsumptionManagementClient;
  let location: string;
  let resourceGroup: string;
  let budgetName: string;
  let vmName: string;
  let scope: string;

  beforeEach(async function() {
    recorder = record(this, recorderEnvSetup);
    subscriptionId = env.SUBSCRIPTION_ID;
    // This is an example of how the environment variables are used
    const credential = new ClientSecretCredential(
      env.AZURE_TENANT_ID,
      env.AZURE_CLIENT_ID,
      env.AZURE_CLIENT_SECRET
    );
    client = new ConsumptionManagementClient(credential, subscriptionId);
    location = "eastus";
    resourceGroup = "myjstest";
    budgetName = "mybudgetxxxy";
    vmName = "myvmxxx";
    scope = "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup;
  });

  afterEach(async function() {
    await recorder.stop();
  });

  it("budgets create test", async function() {
    const res = await client.budgets.createOrUpdate(scope,budgetName,{
      category: "Cost",
        amount: 100,
        timeGrain: "Monthly",
        timePeriod: {
            startDate: new Date("2021-12-01T00:00:00Z"),
            endDate: new Date("2021-12-31T00:00:00Z")
        },
        filter: {
            and: [
                {
                    dimensions: {
                        name: "ResourceId",
                        operator: "In",
                        values: [
                            "/subscriptions/"+subscriptionId+"/resourceGroups/"+resourceGroup+"/providers/Microsoft.Compute/virtualMachines/"+vmName
                        ]
                    }
                },
                {
                    tags: {
                        name: "category",
                        operator: "In",
                        values: [
                            "Dev",
                            "Prod"
                        ]
                    }
                }
            ]
        },
        notifications: {
            Actual_GreaterThan_80_Percent: {
                enabled: true,
                operator: "GreaterThan",
                threshold: 80,
                contactEmails: [
                    "johndoe@contoso.com",
                    "janesmith@contoso.com"
                ],
                contactRoles: [
                    "Contributor",
                    "Reader"
                ],
                thresholdType: "Actual"
            }
        }
    });
    assert.equal(res.name,budgetName);
  });

  it("budgets get test", async function() {
    const res = await client.budgets.get(scope,budgetName);
    assert.equal(res.name,budgetName);
  });

  it("budgets delete test", async function() {
    const res = await client.budgets.delete(scope,budgetName);
  });
});
