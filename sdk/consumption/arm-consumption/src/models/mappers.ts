/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const UsageDetailsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageDetailsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UsageDetail"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      }
    }
  }
};

export const ErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MarketplacesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarketplacesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Marketplace"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BudgetsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BudgetsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Budget"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BudgetTimePeriod: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BudgetTimePeriod",
    modelProperties: {
      startDate: {
        serializedName: "startDate",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endDate: {
        serializedName: "endDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const BudgetFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BudgetFilter",
    modelProperties: {
      and: {
        serializedName: "and",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BudgetFilterProperties"
            }
          }
        }
      },
      not: {
        serializedName: "not",
        type: {
          name: "Composite",
          className: "BudgetFilterProperties"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Composite",
          className: "BudgetComparisonExpression"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Composite",
          className: "BudgetComparisonExpression"
        }
      }
    }
  }
};

export const BudgetFilterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BudgetFilterProperties",
    modelProperties: {
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Composite",
          className: "BudgetComparisonExpression"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Composite",
          className: "BudgetComparisonExpression"
        }
      }
    }
  }
};

export const BudgetComparisonExpression: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BudgetComparisonExpression",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CurrentSpend: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CurrentSpend",
    modelProperties: {
      amount: {
        serializedName: "amount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Notification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Notification",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      threshold: {
        serializedName: "threshold",
        required: true,
        type: {
          name: "Number"
        }
      },
      contactEmails: {
        constraints: {
          MaxItems: 50
        },
        serializedName: "contactEmails",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      contactRoles: {
        serializedName: "contactRoles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      contactGroups: {
        constraints: {
          MaxItems: 50
        },
        serializedName: "contactGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      thresholdType: {
        defaultValue: "Actual",
        serializedName: "thresholdType",
        type: {
          name: "String"
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ForecastSpend: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForecastSpend",
    modelProperties: {
      amount: {
        serializedName: "amount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Tag: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Tag",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ChargesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChargesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ChargeSummary"
            }
          }
        }
      }
    }
  }
};

export const BalancePropertiesNewPurchasesDetailsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BalancePropertiesNewPurchasesDetailsItem",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BalancePropertiesAdjustmentDetailsItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BalancePropertiesAdjustmentDetailsItem",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ReservationSummariesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReservationSummariesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReservationSummary"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationDetailsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReservationDetailsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReservationDetail"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationRecommendationsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReservationRecommendationsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReservationRecommendation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      previousLink: {
        serializedName: "previousLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceAttributes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceAttributes",
    modelProperties: {
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationRecommendationDetailsResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReservationRecommendationDetailsResourceProperties",
    modelProperties: {
      appliedScopes: {
        serializedName: "appliedScopes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      onDemandRate: {
        serializedName: "onDemandRate",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      product: {
        serializedName: "product",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      region: {
        serializedName: "region",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationRate: {
        serializedName: "reservationRate",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationRecommendationDetailsSavingsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReservationRecommendationDetailsSavingsProperties",
    modelProperties: {
      calculatedSavings: {
        serializedName: "calculatedSavings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className:
                "ReservationRecommendationDetailsCalculatedSavingsProperties"
            }
          }
        }
      },
      lookBackPeriod: {
        serializedName: "lookBackPeriod",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      recommendedQuantity: {
        serializedName: "recommendedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      reservationOrderTerm: {
        serializedName: "reservationOrderTerm",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      savingsType: {
        serializedName: "savingsType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unitOfMeasure: {
        serializedName: "unitOfMeasure",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationRecommendationDetailsCalculatedSavingsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReservationRecommendationDetailsCalculatedSavingsProperties",
    modelProperties: {
      onDemandCost: {
        serializedName: "onDemandCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      overageCost: {
        serializedName: "overageCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      quantity: {
        serializedName: "quantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      reservationCost: {
        serializedName: "reservationCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalReservationCost: {
        serializedName: "totalReservationCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      reservedUnitCount: {
        serializedName: "reservedUnitCount",
        type: {
          name: "Number"
        }
      },
      savings: {
        serializedName: "savings",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ReservationRecommendationDetailsUsageProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReservationRecommendationDetailsUsageProperties",
    modelProperties: {
      firstConsumptionDate: {
        serializedName: "firstConsumptionDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastConsumptionDate: {
        serializedName: "lastConsumptionDate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lookBackUnitType: {
        serializedName: "lookBackUnitType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageData: {
        serializedName: "usageData",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      usageGrain: {
        serializedName: "usageGrain",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HighCasedErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HighCasedErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "HighCasedErrorDetails"
        }
      }
    }
  }
};

export const HighCasedErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HighCasedErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationTransactionsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReservationTransactionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReservationTransaction"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationTransactionResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReservationTransactionResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ModernReservationTransactionsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ModernReservationTransactionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModernReservationTransaction"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PriceSheetProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PriceSheetProperties",
    modelProperties: {
      billingPeriodId: {
        serializedName: "billingPeriodId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterId: {
        serializedName: "meterId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      meterDetails: {
        serializedName: "meterDetails",
        type: {
          name: "Composite",
          className: "MeterDetails"
        }
      },
      unitOfMeasure: {
        serializedName: "unitOfMeasure",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      includedQuantity: {
        serializedName: "includedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      partNumber: {
        serializedName: "partNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unitPrice: {
        serializedName: "unitPrice",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currencyCode: {
        serializedName: "currencyCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      offerId: {
        serializedName: "offerId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MeterDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MeterDetails",
    modelProperties: {
      meterName: {
        serializedName: "meterName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterCategory: {
        serializedName: "meterCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterSubCategory: {
        serializedName: "meterSubCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterLocation: {
        serializedName: "meterLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      totalIncludedQuantity: {
        serializedName: "totalIncludedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      pretaxStandardRate: {
        serializedName: "pretaxStandardRate",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      serviceName: {
        serializedName: "serviceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceTier: {
        serializedName: "serviceTier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Events: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Events",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EventSummary"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Amount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Amount",
    modelProperties: {
      currency: {
        serializedName: "currency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Reseller: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Reseller",
    modelProperties: {
      resellerId: {
        serializedName: "resellerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resellerDescription: {
        serializedName: "resellerDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Lots: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Lots",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LotSummary"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreditBalanceSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreditBalanceSummary",
    modelProperties: {
      estimatedBalance: {
        serializedName: "estimatedBalance",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      currentBalance: {
        serializedName: "currentBalance",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      estimatedBalanceInBillingCurrency: {
        serializedName: "estimatedBalanceInBillingCurrency",
        type: {
          name: "Composite",
          className: "AmountWithExchangeRate"
        }
      }
    }
  }
};

export const MeterDetailsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MeterDetailsResponse",
    modelProperties: {
      meterName: {
        serializedName: "meterName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterCategory: {
        serializedName: "meterCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterSubCategory: {
        serializedName: "meterSubCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unitOfMeasure: {
        serializedName: "unitOfMeasure",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceFamily: {
        serializedName: "serviceFamily",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LegacyReservationRecommendationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LegacyReservationRecommendationProperties",
    uberParent: "LegacyReservationRecommendationProperties",
    polymorphicDiscriminator: {
      serializedName: "scope",
      clientName: "scope"
    },
    modelProperties: {
      lookBackPeriod: {
        serializedName: "lookBackPeriod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceFlexibilityRatio: {
        serializedName: "instanceFlexibilityRatio",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      instanceFlexibilityGroup: {
        serializedName: "instanceFlexibilityGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      normalizedSize: {
        serializedName: "normalizedSize",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedQuantityNormalized: {
        serializedName: "recommendedQuantityNormalized",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      meterId: {
        serializedName: "meterId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      term: {
        serializedName: "term",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costWithNoReservedInstances: {
        serializedName: "costWithNoReservedInstances",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      recommendedQuantity: {
        serializedName: "recommendedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalCostWithReservedInstances: {
        serializedName: "totalCostWithReservedInstances",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      netSavings: {
        serializedName: "netSavings",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      firstUsageDate: {
        serializedName: "firstUsageDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      scope: {
        serializedName: "scope",
        required: true,
        type: {
          name: "String"
        }
      },
      skuProperties: {
        serializedName: "skuProperties",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuProperty"
            }
          }
        }
      }
    }
  }
};

export const SkuProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuProperty",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DownloadProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DownloadProperties",
    modelProperties: {
      downloadUrl: {
        serializedName: "downloadUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      validTill: {
        serializedName: "validTill",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageDetail: coreClient.CompositeMapper = {
  serializedName: "UsageDetail",
  type: {
    name: "Composite",
    className: "UsageDetail",
    uberParent: "Resource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Marketplace: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Marketplace",
    modelProperties: {
      ...Resource.type.modelProperties,
      billingPeriodId: {
        serializedName: "properties.billingPeriodId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageStart: {
        serializedName: "properties.usageStart",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      usageEnd: {
        serializedName: "properties.usageEnd",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      resourceRate: {
        serializedName: "properties.resourceRate",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      offerName: {
        serializedName: "properties.offerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      additionalInfo: {
        serializedName: "properties.additionalInfo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      orderNumber: {
        serializedName: "properties.orderNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceName: {
        serializedName: "properties.instanceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceId: {
        serializedName: "properties.instanceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currency: {
        serializedName: "properties.currency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      consumedQuantity: {
        serializedName: "properties.consumedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unitOfMeasure: {
        serializedName: "properties.unitOfMeasure",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      pretaxCost: {
        serializedName: "properties.pretaxCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      isEstimated: {
        serializedName: "properties.isEstimated",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      meterId: {
        serializedName: "properties.meterId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      subscriptionGuid: {
        serializedName: "properties.subscriptionGuid",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      subscriptionName: {
        serializedName: "properties.subscriptionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountName: {
        serializedName: "properties.accountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      departmentName: {
        serializedName: "properties.departmentName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      consumedService: {
        serializedName: "properties.consumedService",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costCenter: {
        serializedName: "properties.costCenter",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      additionalProperties: {
        serializedName: "properties.additionalProperties",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherName: {
        serializedName: "properties.publisherName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      planName: {
        serializedName: "properties.planName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isRecurringCharge: {
        serializedName: "properties.isRecurringCharge",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Balance: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Balance",
    modelProperties: {
      ...Resource.type.modelProperties,
      currency: {
        serializedName: "properties.currency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      beginningBalance: {
        serializedName: "properties.beginningBalance",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      endingBalance: {
        serializedName: "properties.endingBalance",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      newPurchases: {
        serializedName: "properties.newPurchases",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      adjustments: {
        serializedName: "properties.adjustments",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      utilized: {
        serializedName: "properties.utilized",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      serviceOverage: {
        serializedName: "properties.serviceOverage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      chargesBilledSeparately: {
        serializedName: "properties.chargesBilledSeparately",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalOverage: {
        serializedName: "properties.totalOverage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalUsage: {
        serializedName: "properties.totalUsage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      azureMarketplaceServiceCharges: {
        serializedName: "properties.azureMarketplaceServiceCharges",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      billingFrequency: {
        serializedName: "properties.billingFrequency",
        type: {
          name: "String"
        }
      },
      priceHidden: {
        serializedName: "properties.priceHidden",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      newPurchasesDetails: {
        serializedName: "properties.newPurchasesDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BalancePropertiesNewPurchasesDetailsItem"
            }
          }
        }
      },
      adjustmentDetails: {
        serializedName: "properties.adjustmentDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BalancePropertiesAdjustmentDetailsItem"
            }
          }
        }
      }
    }
  }
};

export const ReservationSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReservationSummary",
    modelProperties: {
      ...Resource.type.modelProperties,
      reservationOrderId: {
        serializedName: "properties.reservationOrderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationId: {
        serializedName: "properties.reservationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      skuName: {
        serializedName: "properties.skuName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservedHours: {
        serializedName: "properties.reservedHours",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      usageDate: {
        serializedName: "properties.usageDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      usedHours: {
        serializedName: "properties.usedHours",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minUtilizationPercentage: {
        serializedName: "properties.minUtilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      avgUtilizationPercentage: {
        serializedName: "properties.avgUtilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxUtilizationPercentage: {
        serializedName: "properties.maxUtilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      kind: {
        serializedName: "properties.kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      purchasedQuantity: {
        serializedName: "properties.purchasedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      remainingQuantity: {
        serializedName: "properties.remainingQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalReservedQuantity: {
        serializedName: "properties.totalReservedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      usedQuantity: {
        serializedName: "properties.usedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      utilizedPercentage: {
        serializedName: "properties.utilizedPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ReservationDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReservationDetail",
    modelProperties: {
      ...Resource.type.modelProperties,
      reservationOrderId: {
        serializedName: "properties.reservationOrderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceFlexibilityRatio: {
        serializedName: "properties.instanceFlexibilityRatio",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceFlexibilityGroup: {
        serializedName: "properties.instanceFlexibilityGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationId: {
        serializedName: "properties.reservationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      skuName: {
        serializedName: "properties.skuName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservedHours: {
        serializedName: "properties.reservedHours",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      usageDate: {
        serializedName: "properties.usageDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      usedHours: {
        serializedName: "properties.usedHours",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      instanceId: {
        serializedName: "properties.instanceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      totalReservedQuantity: {
        serializedName: "properties.totalReservedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      kind: {
        serializedName: "properties.kind",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationRecommendation: coreClient.CompositeMapper = {
  serializedName: "ReservationRecommendation",
  type: {
    name: "Composite",
    className: "ReservationRecommendation",
    uberParent: "Resource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...Resource.type.modelProperties,
      ...ResourceAttributes.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationRecommendationDetailsModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReservationRecommendationDetailsModel",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      currency: {
        serializedName: "properties.currency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "properties.resource",
        type: {
          name: "Composite",
          className: "ReservationRecommendationDetailsResourceProperties"
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      savings: {
        serializedName: "properties.savings",
        type: {
          name: "Composite",
          className: "ReservationRecommendationDetailsSavingsProperties"
        }
      },
      scope: {
        serializedName: "properties.scope",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usage: {
        serializedName: "properties.usage",
        type: {
          name: "Composite",
          className: "ReservationRecommendationDetailsUsageProperties"
        }
      }
    }
  }
};

export const PriceSheetResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PriceSheetResult",
    modelProperties: {
      ...Resource.type.modelProperties,
      pricesheets: {
        serializedName: "properties.pricesheets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PriceSheetProperties"
            }
          }
        }
      },
      nextLink: {
        serializedName: "properties.nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      download: {
        serializedName: "properties.download",
        type: {
          name: "Composite",
          className: "MeterDetails"
        }
      }
    }
  }
};

export const ManagementGroupAggregatedCostResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagementGroupAggregatedCostResult",
    modelProperties: {
      ...Resource.type.modelProperties,
      billingPeriodId: {
        serializedName: "properties.billingPeriodId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageStart: {
        serializedName: "properties.usageStart",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      usageEnd: {
        serializedName: "properties.usageEnd",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      azureCharges: {
        serializedName: "properties.azureCharges",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      marketplaceCharges: {
        serializedName: "properties.marketplaceCharges",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      chargesBilledSeparately: {
        serializedName: "properties.chargesBilledSeparately",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currency: {
        serializedName: "properties.currency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      children: {
        serializedName: "properties.children",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagementGroupAggregatedCostResult"
            }
          }
        }
      },
      includedSubscriptions: {
        serializedName: "properties.includedSubscriptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      excludedSubscriptions: {
        serializedName: "properties.excludedSubscriptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CreditSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreditSummary",
    modelProperties: {
      ...Resource.type.modelProperties,
      balanceSummary: {
        serializedName: "properties.balanceSummary",
        type: {
          name: "Composite",
          className: "CreditBalanceSummary"
        }
      },
      pendingCreditAdjustments: {
        serializedName: "properties.pendingCreditAdjustments",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      expiredCredit: {
        serializedName: "properties.expiredCredit",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      pendingEligibleCharges: {
        serializedName: "properties.pendingEligibleCharges",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      creditCurrency: {
        serializedName: "properties.creditCurrency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingCurrency: {
        serializedName: "properties.billingCurrency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reseller: {
        serializedName: "properties.reseller",
        type: {
          name: "Composite",
          className: "Reseller"
        }
      },
      eTag: {
        serializedName: "properties.eTag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Budget: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Budget",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      category: {
        serializedName: "properties.category",
        type: {
          name: "String"
        }
      },
      amount: {
        serializedName: "properties.amount",
        type: {
          name: "Number"
        }
      },
      timeGrain: {
        serializedName: "properties.timeGrain",
        type: {
          name: "String"
        }
      },
      timePeriod: {
        serializedName: "properties.timePeriod",
        type: {
          name: "Composite",
          className: "BudgetTimePeriod"
        }
      },
      filter: {
        serializedName: "properties.filter",
        type: {
          name: "Composite",
          className: "BudgetFilter"
        }
      },
      currentSpend: {
        serializedName: "properties.currentSpend",
        type: {
          name: "Composite",
          className: "CurrentSpend"
        }
      },
      notifications: {
        serializedName: "properties.notifications",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "Notification" } }
        }
      },
      forecastSpend: {
        serializedName: "properties.forecastSpend",
        type: {
          name: "Composite",
          className: "ForecastSpend"
        }
      }
    }
  }
};

export const TagsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TagsResult",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      tags: {
        serializedName: "properties.tags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Tag"
            }
          }
        }
      },
      nextLink: {
        serializedName: "properties.nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      previousLink: {
        serializedName: "properties.previousLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ChargeSummary: coreClient.CompositeMapper = {
  serializedName: "ChargeSummary",
  type: {
    name: "Composite",
    className: "ChargeSummary",
    uberParent: "ProxyResource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventSummary",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      transactionDate: {
        serializedName: "properties.transactionDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      newCredit: {
        serializedName: "properties.newCredit",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      adjustments: {
        serializedName: "properties.adjustments",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      creditExpired: {
        serializedName: "properties.creditExpired",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      charges: {
        serializedName: "properties.charges",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      closedBalance: {
        serializedName: "properties.closedBalance",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      eventType: {
        serializedName: "properties.eventType",
        type: {
          name: "String"
        }
      },
      invoiceNumber: {
        serializedName: "properties.invoiceNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingProfileId: {
        serializedName: "properties.billingProfileId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingProfileDisplayName: {
        serializedName: "properties.billingProfileDisplayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lotId: {
        serializedName: "properties.lotId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lotSource: {
        serializedName: "properties.lotSource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      canceledCredit: {
        serializedName: "properties.canceledCredit",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      creditCurrency: {
        serializedName: "properties.creditCurrency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingCurrency: {
        serializedName: "properties.billingCurrency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reseller: {
        serializedName: "properties.reseller",
        type: {
          name: "Composite",
          className: "Reseller"
        }
      },
      creditExpiredInBillingCurrency: {
        serializedName: "properties.creditExpiredInBillingCurrency",
        type: {
          name: "Composite",
          className: "AmountWithExchangeRate"
        }
      },
      newCreditInBillingCurrency: {
        serializedName: "properties.newCreditInBillingCurrency",
        type: {
          name: "Composite",
          className: "AmountWithExchangeRate"
        }
      },
      adjustmentsInBillingCurrency: {
        serializedName: "properties.adjustmentsInBillingCurrency",
        type: {
          name: "Composite",
          className: "AmountWithExchangeRate"
        }
      },
      chargesInBillingCurrency: {
        serializedName: "properties.chargesInBillingCurrency",
        type: {
          name: "Composite",
          className: "AmountWithExchangeRate"
        }
      },
      closedBalanceInBillingCurrency: {
        serializedName: "properties.closedBalanceInBillingCurrency",
        type: {
          name: "Composite",
          className: "AmountWithExchangeRate"
        }
      },
      eTagPropertiesETag: {
        serializedName: "properties.eTag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LotSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LotSummary",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      originalAmount: {
        serializedName: "properties.originalAmount",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      closedBalance: {
        serializedName: "properties.closedBalance",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      source: {
        serializedName: "properties.source",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startDate: {
        serializedName: "properties.startDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      expirationDate: {
        serializedName: "properties.expirationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      poNumber: {
        serializedName: "properties.poNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      purchasedDate: {
        serializedName: "properties.purchasedDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creditCurrency: {
        serializedName: "properties.creditCurrency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingCurrency: {
        serializedName: "properties.billingCurrency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      originalAmountInBillingCurrency: {
        serializedName: "properties.originalAmountInBillingCurrency",
        type: {
          name: "Composite",
          className: "AmountWithExchangeRate"
        }
      },
      closedBalanceInBillingCurrency: {
        serializedName: "properties.closedBalanceInBillingCurrency",
        type: {
          name: "Composite",
          className: "AmountWithExchangeRate"
        }
      },
      reseller: {
        serializedName: "properties.reseller",
        type: {
          name: "Composite",
          className: "Reseller"
        }
      },
      eTagPropertiesETag: {
        serializedName: "properties.eTag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReservationTransaction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReservationTransaction",
    modelProperties: {
      ...ReservationTransactionResource.type.modelProperties,
      eventDate: {
        serializedName: "properties.eventDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      reservationOrderId: {
        serializedName: "properties.reservationOrderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventType: {
        serializedName: "properties.eventType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "properties.quantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      amount: {
        serializedName: "properties.amount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currency: {
        serializedName: "properties.currency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationOrderName: {
        serializedName: "properties.reservationOrderName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      purchasingEnrollment: {
        serializedName: "properties.purchasingEnrollment",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      purchasingSubscriptionGuid: {
        serializedName: "properties.purchasingSubscriptionGuid",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      purchasingSubscriptionName: {
        serializedName: "properties.purchasingSubscriptionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      armSkuName: {
        serializedName: "properties.armSkuName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      term: {
        serializedName: "properties.term",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      region: {
        serializedName: "properties.region",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountName: {
        serializedName: "properties.accountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountOwnerEmail: {
        serializedName: "properties.accountOwnerEmail",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      departmentName: {
        serializedName: "properties.departmentName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costCenter: {
        serializedName: "properties.costCenter",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentEnrollment: {
        serializedName: "properties.currentEnrollment",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingFrequency: {
        serializedName: "properties.billingFrequency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingMonth: {
        serializedName: "properties.billingMonth",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      monetaryCommitment: {
        serializedName: "properties.monetaryCommitment",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      overage: {
        serializedName: "properties.overage",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ModernReservationTransaction: coreClient.CompositeMapper = {
  serializedName: "Modern",
  type: {
    name: "Composite",
    className: "ModernReservationTransaction",
    modelProperties: {
      ...ReservationTransactionResource.type.modelProperties,
      amount: {
        serializedName: "properties.amount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      armSkuName: {
        serializedName: "properties.armSkuName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingFrequency: {
        serializedName: "properties.billingFrequency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingProfileId: {
        serializedName: "properties.billingProfileId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingProfileName: {
        serializedName: "properties.billingProfileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currency: {
        serializedName: "properties.currency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventDate: {
        serializedName: "properties.eventDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      eventType: {
        serializedName: "properties.eventType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      invoice: {
        serializedName: "properties.invoice",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      invoiceId: {
        serializedName: "properties.invoiceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      invoiceSectionId: {
        serializedName: "properties.invoiceSectionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      invoiceSectionName: {
        serializedName: "properties.invoiceSectionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      purchasingSubscriptionGuid: {
        serializedName: "properties.purchasingSubscriptionGuid",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      purchasingSubscriptionName: {
        serializedName: "properties.purchasingSubscriptionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "properties.quantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      region: {
        serializedName: "properties.region",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationOrderId: {
        serializedName: "properties.reservationOrderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationOrderName: {
        serializedName: "properties.reservationOrderName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      term: {
        serializedName: "properties.term",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AmountWithExchangeRate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AmountWithExchangeRate",
    modelProperties: {
      ...Amount.type.modelProperties,
      exchangeRate: {
        serializedName: "exchangeRate",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      exchangeRateMonth: {
        serializedName: "exchangeRateMonth",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LegacySingleScopeReservationRecommendationProperties: coreClient.CompositeMapper = {
  serializedName: "Single",
  type: {
    name: "Composite",
    className: "LegacySingleScopeReservationRecommendationProperties",
    uberParent: "LegacyReservationRecommendationProperties",
    polymorphicDiscriminator:
      LegacyReservationRecommendationProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...LegacyReservationRecommendationProperties.type.modelProperties,
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const LegacySharedScopeReservationRecommendationProperties: coreClient.CompositeMapper = {
  serializedName: "Shared",
  type: {
    name: "Composite",
    className: "LegacySharedScopeReservationRecommendationProperties",
    uberParent: "LegacyReservationRecommendationProperties",
    polymorphicDiscriminator:
      LegacyReservationRecommendationProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...LegacyReservationRecommendationProperties.type.modelProperties
    }
  }
};

export const LegacyUsageDetail: coreClient.CompositeMapper = {
  serializedName: "legacy",
  type: {
    name: "Composite",
    className: "LegacyUsageDetail",
    uberParent: "UsageDetail",
    polymorphicDiscriminator: UsageDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...UsageDetail.type.modelProperties,
      billingAccountId: {
        serializedName: "properties.billingAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingAccountName: {
        serializedName: "properties.billingAccountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingPeriodStartDate: {
        serializedName: "properties.billingPeriodStartDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      billingPeriodEndDate: {
        serializedName: "properties.billingPeriodEndDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      billingProfileId: {
        serializedName: "properties.billingProfileId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingProfileName: {
        serializedName: "properties.billingProfileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountOwnerId: {
        serializedName: "properties.accountOwnerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountName: {
        serializedName: "properties.accountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "properties.subscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionName: {
        serializedName: "properties.subscriptionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "properties.date",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      product: {
        serializedName: "properties.product",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partNumber: {
        serializedName: "properties.partNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterId: {
        serializedName: "properties.meterId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      meterDetails: {
        serializedName: "properties.meterDetails",
        type: {
          name: "Composite",
          className: "MeterDetailsResponse"
        }
      },
      quantity: {
        serializedName: "properties.quantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      effectivePrice: {
        serializedName: "properties.effectivePrice",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      cost: {
        serializedName: "properties.cost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unitPrice: {
        serializedName: "properties.unitPrice",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      billingCurrency: {
        serializedName: "properties.billingCurrency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "properties.resourceLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      consumedService: {
        serializedName: "properties.consumedService",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "properties.resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "properties.resourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceInfo1: {
        serializedName: "properties.serviceInfo1",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceInfo2: {
        serializedName: "properties.serviceInfo2",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      additionalInfo: {
        serializedName: "properties.additionalInfo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      invoiceSection: {
        serializedName: "properties.invoiceSection",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costCenter: {
        serializedName: "properties.costCenter",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationId: {
        serializedName: "properties.reservationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationName: {
        serializedName: "properties.reservationName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      productOrderId: {
        serializedName: "properties.productOrderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      productOrderName: {
        serializedName: "properties.productOrderName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      offerId: {
        serializedName: "properties.offerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isAzureCreditEligible: {
        serializedName: "properties.isAzureCreditEligible",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      term: {
        serializedName: "properties.term",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherName: {
        serializedName: "properties.publisherName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherType: {
        serializedName: "properties.publisherType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      planName: {
        serializedName: "properties.planName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      chargeType: {
        serializedName: "properties.chargeType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      frequency: {
        serializedName: "properties.frequency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      payGPrice: {
        serializedName: "properties.payGPrice",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      pricingModel: {
        serializedName: "properties.pricingModel",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModernUsageDetail: coreClient.CompositeMapper = {
  serializedName: "modern",
  type: {
    name: "Composite",
    className: "ModernUsageDetail",
    uberParent: "UsageDetail",
    polymorphicDiscriminator: UsageDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...UsageDetail.type.modelProperties,
      billingAccountId: {
        serializedName: "properties.billingAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      effectivePrice: {
        serializedName: "properties.effectivePrice",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      pricingModel: {
        serializedName: "properties.pricingModel",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingAccountName: {
        serializedName: "properties.billingAccountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingPeriodStartDate: {
        serializedName: "properties.billingPeriodStartDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      billingPeriodEndDate: {
        serializedName: "properties.billingPeriodEndDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      billingProfileId: {
        serializedName: "properties.billingProfileId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingProfileName: {
        serializedName: "properties.billingProfileName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionGuid: {
        serializedName: "properties.subscriptionGuid",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionName: {
        serializedName: "properties.subscriptionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      date: {
        serializedName: "properties.date",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      product: {
        serializedName: "properties.product",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterId: {
        serializedName: "properties.meterId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      meterName: {
        serializedName: "properties.meterName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterRegion: {
        serializedName: "properties.meterRegion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterCategory: {
        serializedName: "properties.meterCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterSubCategory: {
        serializedName: "properties.meterSubCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceFamily: {
        serializedName: "properties.serviceFamily",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      quantity: {
        serializedName: "properties.quantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unitOfMeasure: {
        serializedName: "properties.unitOfMeasure",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceName: {
        serializedName: "properties.instanceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costInUSD: {
        serializedName: "properties.costInUSD",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unitPrice: {
        serializedName: "properties.unitPrice",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      billingCurrencyCode: {
        serializedName: "properties.billingCurrencyCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "properties.resourceLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      consumedService: {
        serializedName: "properties.consumedService",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceInfo1: {
        serializedName: "properties.serviceInfo1",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceInfo2: {
        serializedName: "properties.serviceInfo2",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      additionalInfo: {
        serializedName: "properties.additionalInfo",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      invoiceSectionId: {
        serializedName: "properties.invoiceSectionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      invoiceSectionName: {
        serializedName: "properties.invoiceSectionName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costCenter: {
        serializedName: "properties.costCenter",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationId: {
        serializedName: "properties.reservationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      reservationName: {
        serializedName: "properties.reservationName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      productOrderId: {
        serializedName: "properties.productOrderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      productOrderName: {
        serializedName: "properties.productOrderName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isAzureCreditEligible: {
        serializedName: "properties.isAzureCreditEligible",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      term: {
        serializedName: "properties.term",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherName: {
        serializedName: "properties.publisherName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherType: {
        serializedName: "properties.publisherType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      chargeType: {
        serializedName: "properties.chargeType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      frequency: {
        serializedName: "properties.frequency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costInBillingCurrency: {
        serializedName: "properties.costInBillingCurrency",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      costInPricingCurrency: {
        serializedName: "properties.costInPricingCurrency",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      exchangeRate: {
        serializedName: "properties.exchangeRate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      exchangeRateDate: {
        serializedName: "properties.exchangeRateDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      invoiceId: {
        serializedName: "properties.invoiceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      previousInvoiceId: {
        serializedName: "properties.previousInvoiceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      pricingCurrencyCode: {
        serializedName: "properties.pricingCurrencyCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      productIdentifier: {
        serializedName: "properties.productIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceLocationNormalized: {
        serializedName: "properties.resourceLocationNormalized",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      servicePeriodStartDate: {
        serializedName: "properties.servicePeriodStartDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      servicePeriodEndDate: {
        serializedName: "properties.servicePeriodEndDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      customerTenantId: {
        serializedName: "properties.customerTenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customerName: {
        serializedName: "properties.customerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerTenantId: {
        serializedName: "properties.partnerTenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerName: {
        serializedName: "properties.partnerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resellerMpnId: {
        serializedName: "properties.resellerMpnId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resellerName: {
        serializedName: "properties.resellerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisherId: {
        serializedName: "properties.publisherId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      marketPrice: {
        serializedName: "properties.marketPrice",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      exchangeRatePricingToBilling: {
        serializedName: "properties.exchangeRatePricingToBilling",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      paygCostInBillingCurrency: {
        serializedName: "properties.paygCostInBillingCurrency",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      paygCostInUSD: {
        serializedName: "properties.paygCostInUSD",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      partnerEarnedCreditRate: {
        serializedName: "properties.partnerEarnedCreditRate",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      partnerEarnedCreditApplied: {
        serializedName: "properties.partnerEarnedCreditApplied",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      payGPrice: {
        serializedName: "properties.payGPrice",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      benefitId: {
        serializedName: "properties.benefitId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      benefitName: {
        serializedName: "properties.benefitName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "properties.provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costAllocationRuleName: {
        serializedName: "properties.costAllocationRuleName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LegacyReservationRecommendation: coreClient.CompositeMapper = {
  serializedName: "legacy",
  type: {
    name: "Composite",
    className: "LegacyReservationRecommendation",
    uberParent: "ReservationRecommendation",
    polymorphicDiscriminator:
      ReservationRecommendation.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReservationRecommendation.type.modelProperties,
      lookBackPeriod: {
        serializedName: "properties.lookBackPeriod",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      instanceFlexibilityRatio: {
        serializedName: "properties.instanceFlexibilityRatio",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      instanceFlexibilityGroup: {
        serializedName: "properties.instanceFlexibilityGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      normalizedSize: {
        serializedName: "properties.normalizedSize",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedQuantityNormalized: {
        serializedName: "properties.recommendedQuantityNormalized",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      meterId: {
        serializedName: "properties.meterId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      resourceType: {
        serializedName: "properties.resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      term: {
        serializedName: "properties.term",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costWithNoReservedInstances: {
        serializedName: "properties.costWithNoReservedInstances",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      recommendedQuantity: {
        serializedName: "properties.recommendedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalCostWithReservedInstances: {
        serializedName: "properties.totalCostWithReservedInstances",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      netSavings: {
        serializedName: "properties.netSavings",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      firstUsageDate: {
        serializedName: "properties.firstUsageDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      scope: {
        serializedName: "properties.scope",
        required: true,
        type: {
          name: "String"
        }
      },
      skuProperties: {
        serializedName: "properties.skuProperties",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuProperty"
            }
          }
        }
      }
    }
  }
};

export const ModernReservationRecommendation: coreClient.CompositeMapper = {
  serializedName: "modern",
  type: {
    name: "Composite",
    className: "ModernReservationRecommendation",
    uberParent: "ReservationRecommendation",
    polymorphicDiscriminator:
      ReservationRecommendation.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReservationRecommendation.type.modelProperties,
      locationPropertiesLocation: {
        serializedName: "properties.location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lookBackPeriod: {
        serializedName: "properties.lookBackPeriod",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      instanceFlexibilityRatio: {
        serializedName: "properties.instanceFlexibilityRatio",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      instanceFlexibilityGroup: {
        serializedName: "properties.instanceFlexibilityGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      normalizedSize: {
        serializedName: "properties.normalizedSize",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedQuantityNormalized: {
        serializedName: "properties.recommendedQuantityNormalized",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      meterId: {
        serializedName: "properties.meterId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      term: {
        serializedName: "properties.term",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costWithNoReservedInstances: {
        serializedName: "properties.costWithNoReservedInstances",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      recommendedQuantity: {
        serializedName: "properties.recommendedQuantity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalCostWithReservedInstances: {
        serializedName: "properties.totalCostWithReservedInstances",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      netSavings: {
        serializedName: "properties.netSavings",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      firstUsageDate: {
        serializedName: "properties.firstUsageDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      scope: {
        serializedName: "properties.scope",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      skuProperties: {
        serializedName: "properties.skuProperties",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuProperty"
            }
          }
        }
      },
      skuName: {
        serializedName: "properties.skuName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LegacyChargeSummary: coreClient.CompositeMapper = {
  serializedName: "legacy",
  type: {
    name: "Composite",
    className: "LegacyChargeSummary",
    uberParent: "ChargeSummary",
    polymorphicDiscriminator: ChargeSummary.type.polymorphicDiscriminator,
    modelProperties: {
      ...ChargeSummary.type.modelProperties,
      billingPeriodId: {
        serializedName: "properties.billingPeriodId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageStart: {
        serializedName: "properties.usageStart",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageEnd: {
        serializedName: "properties.usageEnd",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azureCharges: {
        serializedName: "properties.azureCharges",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      chargesBilledSeparately: {
        serializedName: "properties.chargesBilledSeparately",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      marketplaceCharges: {
        serializedName: "properties.marketplaceCharges",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      currency: {
        serializedName: "properties.currency",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModernChargeSummary: coreClient.CompositeMapper = {
  serializedName: "modern",
  type: {
    name: "Composite",
    className: "ModernChargeSummary",
    uberParent: "ChargeSummary",
    polymorphicDiscriminator: ChargeSummary.type.polymorphicDiscriminator,
    modelProperties: {
      ...ChargeSummary.type.modelProperties,
      billingPeriodId: {
        serializedName: "properties.billingPeriodId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageStart: {
        serializedName: "properties.usageStart",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageEnd: {
        serializedName: "properties.usageEnd",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azureCharges: {
        serializedName: "properties.azureCharges",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      chargesBilledSeparately: {
        serializedName: "properties.chargesBilledSeparately",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      marketplaceCharges: {
        serializedName: "properties.marketplaceCharges",
        type: {
          name: "Composite",
          className: "Amount"
        }
      },
      billingAccountId: {
        serializedName: "properties.billingAccountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      billingProfileId: {
        serializedName: "properties.billingProfileId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      invoiceSectionId: {
        serializedName: "properties.invoiceSectionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customerId: {
        serializedName: "properties.customerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isInvoiced: {
        serializedName: "properties.isInvoiced",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const LegacyReservationTransaction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LegacyReservationTransaction",
    modelProperties: {
      ...ReservationTransaction.type.modelProperties
    }
  }
};

export let discriminators = {
  LegacyReservationRecommendationProperties: LegacyReservationRecommendationProperties,
  "Resource.UsageDetail": UsageDetail,
  "Resource.ReservationRecommendation": ReservationRecommendation,
  "ProxyResource.ChargeSummary": ChargeSummary,
  "LegacyReservationRecommendationProperties.Single": LegacySingleScopeReservationRecommendationProperties,
  "LegacyReservationRecommendationProperties.Shared": LegacySharedScopeReservationRecommendationProperties,
  "UsageDetail.legacy": LegacyUsageDetail,
  "UsageDetail.modern": ModernUsageDetail,
  "ReservationRecommendation.legacy": LegacyReservationRecommendation,
  "ReservationRecommendation.modern": ModernReservationRecommendation,
  "ChargeSummary.legacy": LegacyChargeSummary,
  "ChargeSummary.modern": ModernChargeSummary
};
