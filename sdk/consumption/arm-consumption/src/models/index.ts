/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * The properties of the meter detail.
 */
export interface MeterDetails {
  /**
   * The name of the meter, within the given meter category
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly meterName?: string;
  /**
   * The category of the meter, for example, 'Cloud services', 'Networking', etc..
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly meterCategory?: string;
  /**
   * The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly meterSubCategory?: string;
  /**
   * The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unit?: string;
  /**
   * The location in which the Azure service is available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly meterLocation?: string;
  /**
   * The total included quantity associated with the offer.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalIncludedQuantity?: number;
  /**
   * The pretax listing price.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly pretaxStandardRate?: number;
  /**
   * The name of the service.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceName?: string;
  /**
   * The service tier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceTier?: string;
}

/**
 * The properties of the meter detail.
 */
export interface MeterDetailsResponse {
  /**
   * The name of the meter, within the given meter category
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly meterName?: string;
  /**
   * The category of the meter, for example, 'Cloud services', 'Networking', etc..
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly meterCategory?: string;
  /**
   * The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly meterSubCategory?: string;
  /**
   * The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unitOfMeasure?: string;
  /**
   * The service family.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceFamily?: string;
}

/**
 * The Resource model definition.
 */
export interface Resource extends BaseResource {
  /**
   * Resource Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * An usage detail resource.
 */
export interface UsageDetail extends Resource {
  /**
   * Billing Account identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly billingAccountId?: string;
  /**
   * Billing Account Name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly billingAccountName?: string;
  /**
   * The billing period start date.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly billingPeriodStartDate?: Date;
  /**
   * The billing period end date.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly billingPeriodEndDate?: Date;
  /**
   * Billing Profile identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly billingProfileId?: string;
  /**
   * Billing Profile Name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly billingProfileName?: string;
  /**
   * Account Owner Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly accountOwnerId?: string;
  /**
   * Account Name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly accountName?: string;
  /**
   * Subscription guid.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subscriptionId?: string;
  /**
   * Subscription name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subscriptionName?: string;
  /**
   * Date for the usage record.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly date?: Date;
  /**
   * Product name for the consumed service or purchase. Not available for Marketplace.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly product?: string;
  /**
   * Part Number of the service used. Can be used to join with the price sheet. Not available for
   * marketplace.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly partNumber?: string;
  /**
   * The meter id (GUID). Not available for marketplace. For reserved instance this represents the
   * primary meter for which the reservation was purchased. For the actual VM Size for which the
   * reservation is purchased see productOrderName.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly meterId?: string;
  /**
   * The details about the meter. By default this is not populated, unless it's specified in
   * $expand.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly meterDetails?: MeterDetailsResponse;
  /**
   * The usage quantity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly quantity?: number;
  /**
   * Effective Price thatâ€™s charged for the usage.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly effectivePrice?: number;
  /**
   * The amount of cost before tax.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cost?: number;
  /**
   * Unit Price is the price applicable to you. (your EA or other contract price).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unitPrice?: number;
  /**
   * Billing Currency.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly billingCurrency?: string;
  /**
   * Resource Location.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceLocation?: string;
  /**
   * Consumed service name. Name of the azure resource provider that emits the usage or was
   * purchased. This value is not provided for marketplace usage.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly consumedService?: string;
  /**
   * Azure resource manager resource identifier.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceId?: string;
  /**
   * Resource Name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceName?: string;
  /**
   * Service Info 1.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceInfo1?: string;
  /**
   * Service Info 2.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceInfo2?: string;
  /**
   * Additional details of this usage item. By default this is not populated, unless it's specified
   * in $expand. Use this field to get usage line item specific details such as the actual VM Size
   * (ServiceType) or the ratio in which the reservation discount is applied.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly additionalInfo?: string;
  /**
   * Invoice Section Name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly invoiceSection?: string;
  /**
   * The cost center of this department if it is a department and a cost center is provided.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly costCenter?: string;
  /**
   * Resource Group Name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceGroup?: string;
  /**
   * ARM resource id of the reservation. Only applies to records relevant to reservations.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reservationId?: string;
  /**
   * User provided display name of the reservation. Last known name for a particular day is
   * populated in the daily data. Only applies to records relevant to reservations.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reservationName?: string;
  /**
   * Product Order Id. For reservations this is the Reservation Order ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly productOrderId?: string;
  /**
   * Product Order Name. For reservations this is the SKU that was purchased.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly productOrderName?: string;
  /**
   * Offer Id. Ex: MS-AZR-0017P, MS-AZR-0148P.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly offerId?: string;
  /**
   * Is Azure Credit Eligible.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isAzureCreditEligible?: boolean;
  /**
   * Term (in months). 1 month for monthly recurring purchase. 12 months for a 1 year reservation.
   * 36 months for a 3 year reservation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly term?: string;
  /**
   * Publisher Name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly publisherName?: string;
  /**
   * Publisher Type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly publisherType?: string;
  /**
   * Plan Name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly planName?: string;
  /**
   * Indicates a charge represents credits, usage, a Marketplace purchase, a reservation fee, or a
   * refund.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly chargeType?: string;
  /**
   * Indicates how frequently this charge will occur. OneTime for purchases which only happen once,
   * Monthly for fees which recur every month, and UsageBased for charges based on how much a
   * service is used.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly frequency?: string;
}

/**
 * Download response of Usage Details.
 */
export interface UsageDetailsDownloadResponse extends Resource {
  /**
   * The URL to the csv file.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly downloadUrl?: string;
  /**
   * The time in UTC at which this download URL will expire.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validTill?: string;
}

/**
 * An marketplace resource.
 */
export interface Marketplace extends Resource {
  /**
   * The id of the billing period resource that the usage belongs to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly billingPeriodId?: string;
  /**
   * The start of the date time range covered by the usage detail.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usageStart?: Date;
  /**
   * The end of the date time range covered by the usage detail.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usageEnd?: Date;
  /**
   * The marketplace resource rate.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceRate?: number;
  /**
   * The type of offer.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly offerName?: string;
  /**
   * The name of resource group.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceGroup?: string;
  /**
   * The order number.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly orderNumber?: string;
  /**
   * The name of the resource instance that the usage is about.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly instanceName?: string;
  /**
   * The uri of the resource instance that the usage is about.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly instanceId?: string;
  /**
   * The ISO currency in which the meter is charged, for example, USD.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currency?: string;
  /**
   * The quantity of usage.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly consumedQuantity?: number;
  /**
   * The unit of measure.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unitOfMeasure?: string;
  /**
   * The amount of cost before tax.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly pretaxCost?: number;
  /**
   * The estimated usage is subject to change.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isEstimated?: boolean;
  /**
   * The meter id (GUID).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly meterId?: string;
  /**
   * Subscription guid.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subscriptionGuid?: string;
  /**
   * Subscription name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly subscriptionName?: string;
  /**
   * Account name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly accountName?: string;
  /**
   * Department name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly departmentName?: string;
  /**
   * Consumed service name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly consumedService?: string;
  /**
   * The cost center of this department if it is a department and a costcenter exists
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly costCenter?: string;
  /**
   * Additional details of this usage item. By default this is not populated, unless it's specified
   * in $expand.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly additionalProperties?: string;
  /**
   * The name of publisher.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly publisherName?: string;
  /**
   * The name of plan.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly planName?: string;
  /**
   * Flag indicating whether this is a recurring charge or not.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isRecurringCharge?: boolean;
}

/**
 * An interface representing BalancePropertiesNewPurchasesDetailsItem.
 */
export interface BalancePropertiesNewPurchasesDetailsItem {
  /**
   * the name of new purchase.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * the value of new purchase.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: number;
}

/**
 * An interface representing BalancePropertiesAdjustmentDetailsItem.
 */
export interface BalancePropertiesAdjustmentDetailsItem {
  /**
   * the name of new adjustment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * the value of new adjustment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: number;
}

/**
 * A balance resource.
 */
export interface Balance extends Resource {
  /**
   * The ISO currency in which the meter is charged, for example, USD.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currency?: string;
  /**
   * The beginning balance for the billing period.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly beginningBalance?: number;
  /**
   * The ending balance for the billing period (for open periods this will be updated daily).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endingBalance?: number;
  /**
   * Total new purchase amount.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly newPurchases?: number;
  /**
   * Total adjustment amount.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adjustments?: number;
  /**
   * Total Commitment usage.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly utilized?: number;
  /**
   * Overage for Azure services.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serviceOverage?: number;
  /**
   * Charges Billed separately.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly chargesBilledSeparately?: number;
  /**
   * serviceOverage + chargesBilledSeparately.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalOverage?: number;
  /**
   * Azure service commitment + total Overage.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalUsage?: number;
  /**
   * Total charges for Azure Marketplace.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly azureMarketplaceServiceCharges?: number;
  /**
   * The billing frequency. Possible values include: 'Month', 'Quarter', 'Year'
   */
  billingFrequency?: BillingFrequency;
  /**
   * Price is hidden or not.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly priceHidden?: boolean;
  /**
   * List of new purchases.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly newPurchasesDetails?: BalancePropertiesNewPurchasesDetailsItem[];
  /**
   * List of Adjustments (Promo credit, SIE credit etc.).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adjustmentDetails?: BalancePropertiesAdjustmentDetailsItem[];
}

/**
 * reservation summary resource.
 */
export interface ReservationSummary extends Resource {
  /**
   * The reservation order ID is the identifier for a reservation purchase. Each reservation order
   * ID represents a single purchase transaction. A reservation order contains reservations. The
   * reservation order specifies the VM size and region for the reservations.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reservationOrderId?: string;
  /**
   * The reservation ID is the identifier of a reservation within a reservation order. Each
   * reservation is the grouping for applying the benefit scope and also specifies the number of
   * instances to which the reservation benefit can be applied to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reservationId?: string;
  /**
   * This is the ARM Sku name. It can be used to join with the serviceType field in additional info
   * in usage records.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly skuName?: string;
  /**
   * This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this
   * will be 11 hours for that day and 24 hours from subsequent days
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reservedHours?: number;
  /**
   * Data corresponding to the utilization record. If the grain of data is monthly, it will be
   * first day of month.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usageDate?: Date;
  /**
   * Total used hours by the reservation
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usedHours?: number;
  /**
   * This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record
   * corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will
   * return 10% for that day
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly minUtilizationPercentage?: number;
  /**
   * This is average utilization for the entire time range. (day or month depending on the grain)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly avgUtilizationPercentage?: number;
  /**
   * This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record
   * corresponds to 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will
   * return 100% for that day.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maxUtilizationPercentage?: number;
}

/**
 * reservation detail resource.
 */
export interface ReservationDetail extends Resource {
  /**
   * The reservation order ID is the identifier for a reservation purchase. Each reservation order
   * ID represents a single purchase transaction. A reservation order contains reservations. The
   * reservation order specifies the VM size and region for the reservations.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reservationOrderId?: string;
  /**
   * The reservation ID is the identifier of a reservation within a reservation order. Each
   * reservation is the grouping for applying the benefit scope and also specifies the number of
   * instances to which the reservation benefit can be applied to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reservationId?: string;
  /**
   * This is the ARM Sku name. It can be used to join with the serviceType field in additional info
   * in usage records.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly skuName?: string;
  /**
   * This is the total hours reserved for the day. E.g. if reservation for 1 instance was made on 1
   * PM, this will be 11 hours for that day and 24 hours from subsequent days.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reservedHours?: number;
  /**
   * The date on which consumption occurred.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usageDate?: Date;
  /**
   * This is the total hours used by the instance.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usedHours?: number;
  /**
   * This identifier is the name of the resource or the fully qualified Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly instanceId?: string;
  /**
   * This is the total count of instances that are reserved for the reservationId.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalReservedQuantity?: number;
}

/**
 * Reservation recommendation resource.
 */
export interface ReservationRecommendation {
  /**
   * Resource Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tags?: { [propertyName: string]: string };
  /**
   * Resource location
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * Resource sku
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sku?: string;
  /**
   * The number of days of usage to look back for recommendation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lookBackPeriod?: string;
  /**
   * The meter id (GUID)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly meterId?: string;
  /**
   * RI recommendations in one or three year terms.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly term?: string;
  /**
   * The total amount of cost without reserved instances.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly costWithNoReservedInstances?: number;
  /**
   * Recommended quality for reserved instances.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly recommendedQuantity?: number;
  /**
   * The total amount of cost with reserved instances.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalCostWithReservedInstances?: number;
  /**
   * Total estimated savings with reserved instances.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly netSavings?: number;
  /**
   * The usage date for looking back.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly firstUsageDate?: Date;
  /**
   * Shared or single recommendation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scope?: string;
}

/**
 * The tag resource.
 */
export interface Tag {
  /**
   * Tag key.
   */
  key?: string;
}

/**
 * The Resource model definition.
 */
export interface ProxyResource extends BaseResource {
  /**
   * Resource Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * eTag of the resource. To handle concurrent update scenario, this field will be used to
   * determine whether the user is updating the latest version or not.
   */
  eTag?: string;
}

/**
 * A resource listing all tags.
 */
export interface TagsResult extends ProxyResource {
  /**
   * A list of Tag.
   */
  tags?: Tag[];
}

/**
 * The start and end date for a budget.
 */
export interface BudgetTimePeriod {
  /**
   * The start date for the budget.
   */
  startDate: Date;
  /**
   * The end date for the budget. If not provided, we default this to 10 years from the start date.
   */
  endDate?: Date;
}

/**
 * May be used to filter budgets by resource group, resource, or meter.
 */
export interface Filters {
  /**
   * The list of filters on resource groups, allowed at subscription level only.
   */
  resourceGroups?: string[];
  /**
   * The list of filters on resources.
   */
  resources?: string[];
  /**
   * The list of filters on meters (GUID), mandatory for budgets of usage category.
   */
  meters?: string[];
  /**
   * The dictionary of filters on tags.
   */
  tags?: { [propertyName: string]: string[] };
}

/**
 * The current amount of cost which is being tracked for a budget.
 */
export interface CurrentSpend {
  /**
   * The total amount of cost which is being tracked by the budget.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly amount?: number;
  /**
   * The unit of measure for the budget amount.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unit?: string;
}

/**
 * The notification associated with a budget.
 */
export interface Notification {
  /**
   * The notification is enabled or not.
   */
  enabled: boolean;
  /**
   * The comparison operator. Possible values include: 'EqualTo', 'GreaterThan',
   * 'GreaterThanOrEqualTo'
   */
  operator: OperatorType;
  /**
   * Threshold value associated with a notification. Notification is sent when the cost exceeded
   * the threshold. It is always percent and has to be between 0 and 1000.
   */
  threshold: number;
  /**
   * Email addresses to send the budget notification to when the threshold is exceeded.
   */
  contactEmails: string[];
  /**
   * Contact roles to send the budget notification to when the threshold is exceeded.
   */
  contactRoles?: string[];
  /**
   * Action groups to send the budget notification to when the threshold is exceeded.
   */
  contactGroups?: string[];
}

/**
 * A budget resource.
 */
export interface Budget extends ProxyResource {
  /**
   * The category of the budget, whether the budget tracks cost or usage. Possible values include:
   * 'Cost', 'Usage'
   */
  category: CategoryType;
  /**
   * The total amount of cost to track with the budget
   */
  amount: number;
  /**
   * The time covered by a budget. Tracking of the amount will be reset based on the time grain.
   * Possible values include: 'Monthly', 'Quarterly', 'Annually'
   */
  timeGrain: TimeGrainType;
  /**
   * Has start and end date of the budget. The start date must be first of the month and should be
   * less than the end date. Budget start date must be on or after June 1, 2017. Future start date
   * should not be more than three months. Past start date should  be selected within the timegrain
   * period. There are no restrictions on the end date.
   */
  timePeriod: BudgetTimePeriod;
  /**
   * May be used to filter budgets by resource group, resource, or meter.
   */
  filters?: Filters;
  /**
   * The current amount of cost which is being tracked for a budget.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currentSpend?: CurrentSpend;
  /**
   * Dictionary of notifications associated with the budget. Budget can have up to five
   * notifications.
   */
  notifications?: { [propertyName: string]: Notification };
}

/**
 * The properties of the price sheet.
 */
export interface PriceSheetProperties {
  /**
   * The id of the billing period resource that the usage belongs to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly billingPeriodId?: string;
  /**
   * The meter id (GUID)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly meterId?: string;
  /**
   * The details about the meter. By default this is not populated, unless it's specified in
   * $expand.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly meterDetails?: MeterDetails;
  /**
   * Unit of measure
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unitOfMeasure?: string;
  /**
   * Included quality for an offer
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly includedQuantity?: number;
  /**
   * Part Number
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly partNumber?: string;
  /**
   * Unit Price
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly unitPrice?: number;
  /**
   * Currency Code
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currencyCode?: string;
  /**
   * Offer Id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly offerId?: string;
}

/**
 * An pricesheet resource.
 */
export interface PriceSheetResult extends Resource {
  /**
   * Price sheet
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly pricesheets?: PriceSheetProperties[];
  /**
   * The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * An interface representing ForecastPropertiesConfidenceLevelsItem.
 */
export interface ForecastPropertiesConfidenceLevelsItem {
  /**
   * The percentage level of the confidence
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly percentage?: number;
  /**
   * The boundary of the percentage, values could be 'Upper' or 'Lower'. Possible values include:
   * 'Upper', 'Lower'
   */
  bound?: Bound;
  /**
   * The amount of forecast within the percentage level
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: number;
}

/**
 * A forecast resource.
 */
export interface Forecast extends Resource {
  /**
   * The usage date of the forecast.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usageDate?: string;
  /**
   * The granularity of forecast. Possible values include: 'Daily', 'Monthly', 'Yearly'
   */
  grain?: Grain;
  /**
   * The amount of charge
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly charge?: number;
  /**
   * The ISO currency in which the meter is charged, for example, USD.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currency?: string;
  /**
   * The type of the charge. Could be actual or forecast. Possible values include: 'Actual',
   * 'Forecast'
   */
  chargeType?: ChargeType;
  /**
   * The details about the forecast confidence levels. This is populated only when chargeType is
   * Forecast.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly confidenceLevels?: ForecastPropertiesConfidenceLevelsItem[];
}

/**
 * A management group aggregated cost resource.
 */
export interface ManagementGroupAggregatedCostResult extends Resource {
  /**
   * The id of the billing period resource that the aggregated cost belongs to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly billingPeriodId?: string;
  /**
   * The start of the date time range covered by aggregated cost.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usageStart?: Date;
  /**
   * The end of the date time range covered by the aggregated cost.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usageEnd?: Date;
  /**
   * Azure Charges.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly azureCharges?: number;
  /**
   * Marketplace Charges.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly marketplaceCharges?: number;
  /**
   * Charges Billed Separately.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly chargesBilledSeparately?: number;
  /**
   * The ISO currency in which the meter is charged, for example, USD.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currency?: string;
  /**
   * Children of a management group
   */
  children?: ManagementGroupAggregatedCostResult[];
  /**
   * List of subscription Guids included in the calculation of aggregated cost
   */
  includedSubscriptions?: string[];
  /**
   * List of subscription Guids excluded from the calculation of aggregated cost
   */
  excludedSubscriptions?: string[];
}

/**
 * A charge summary resource.
 */
export interface ChargeSummary extends Resource {
  /**
   * The id of the billing period resource that the charge belongs to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly billingPeriodId?: string;
  /**
   * Usage start date.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usageStart?: string;
  /**
   * Usage end date.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usageEnd?: string;
  /**
   * Azure Charges.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly azureCharges?: number;
  /**
   * Charges Billed separately.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly chargesBilledSeparately?: number;
  /**
   * Marketplace Charges.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly marketplaceCharges?: number;
  /**
   * Currency Code
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currency?: string;
}

/**
 * Result of listing charge summary.
 */
export interface ChargesListResult {
  /**
   * The list of charge summary
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: ChargeSummary[];
}

/**
 * The details of the error.
 */
export interface ErrorDetails {
  /**
   * Error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * Error message indicating why the operation failed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
}

/**
 * Error response indicates that the service is not able to process the incoming request. The
 * reason is provided in the error message.
 */
export interface ErrorResponse {
  /**
   * The details of the error.
   */
  error?: ErrorDetails;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.Consumption.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: string;
  /**
   * Resource on which the operation is performed: UsageDetail, etc.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
}

/**
 * A Consumption REST API operation.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * The Resource model definition.
 */
export interface ResourceAttributes {
  /**
   * Resource location
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * Resource sku
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sku?: string;
}

/**
 * Optional Parameters.
 */
export interface UsageDetailsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * May be used to expand the properties/additionalInfo or properties/meterDetails within a list
   * of usage details. By default, these fields are not included when listing usage details.
   */
  expand?: string;
  /**
   * May be used to filter usageDetails by properties/resourceGroup, properties/resourceName,
   * properties/resourceId, properties/chargeType, properties/reservationId or tags. The filter
   * supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or
   * 'not'. Tag filter is a key value pair string where key and value is separated by a colon (:).
   */
  filter?: string;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous
   * response contains a nextLink element, the value of the nextLink element will include a
   * skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
  /**
   * May be used to limit the number of results to the most recent N usageDetails.
   */
  top?: number;
  /**
   * Allows to select different type of cost/usage records. Possible values include:
   * 'ActualCostMetricType', 'AmortizedCostMetricType', 'UsageMetricType'
   */
  metric?: Metrictype;
}

/**
 * Optional Parameters.
 */
export interface UsageDetailsDownloadOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Allows to select different type of cost/usage records. Possible values include:
   * 'ActualCostMetricType', 'AmortizedCostMetricType', 'UsageMetricType'
   */
  metric?: Metrictype;
}

/**
 * Optional Parameters.
 */
export interface UsageDetailsBeginDownloadOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Allows to select different type of cost/usage records. Possible values include:
   * 'ActualCostMetricType', 'AmortizedCostMetricType', 'UsageMetricType'
   */
  metric?: Metrictype;
}

/**
 * Optional Parameters.
 */
export interface MarketplacesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * May be used to filter marketplaces by properties/usageEnd (Utc time), properties/usageStart
   * (Utc time), properties/resourceGroup, properties/instanceName or properties/instanceId. The
   * filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne',
   * 'or', or 'not'.
   */
  filter?: string;
  /**
   * May be used to limit the number of results to the most recent N marketplaces.
   */
  top?: number;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous
   * response contains a nextLink element, the value of the nextLink element will include a
   * skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
}

/**
 * Optional Parameters.
 */
export interface ChargesListByScopeOptionalParams extends msRest.RequestOptionsBase {
  /**
   * May be used to filter charges by properties/usageEnd (Utc time), properties/usageStart (Utc
   * time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently
   * support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is
   * separated by a colon (:).
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface ReservationsSummariesListByReservationOrderOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Required only for daily grain. The properties/UsageDate for start date and end date. The
   * filter supports 'le' and  'ge'
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface ReservationsSummariesListByReservationOrderAndReservationOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Required only for daily grain. The properties/UsageDate for start date and end date. The
   * filter supports 'le' and  'ge'
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface ReservationRecommendationsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * May be used to filter reservationRecommendations by properties/scope and
   * properties/lookBackPeriod.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface PriceSheetGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * May be used to expand the properties/meterDetails within a price sheet. By default, these
   * fields are not included when returning price sheet.
   */
  expand?: string;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous
   * response contains a nextLink element, the value of the nextLink element will include a
   * skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
  /**
   * May be used to limit the number of results to the top N results.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PriceSheetGetByBillingPeriodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * May be used to expand the properties/meterDetails within a price sheet. By default, these
   * fields are not included when returning price sheet.
   */
  expand?: string;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous
   * response contains a nextLink element, the value of the nextLink element will include a
   * skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
  /**
   * May be used to limit the number of results to the top N results.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface ForecastsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * May be used to filter forecasts by properties/usageDate (Utc time), properties/chargeType or
   * properties/grain. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
   * currently support 'ne', 'or', or 'not'.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface AggregatedCostGetByManagementGroupOptionalParams extends msRest.RequestOptionsBase {
  /**
   * May be used to filter aggregated cost by properties/usageStart (Utc time), properties/usageEnd
   * (Utc time). The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently
   * support 'ne', 'or', or 'not'. Tag filter is a key value pair string where key and value is
   * separated by a colon (:).
   */
  filter?: string;
}

/**
 * An interface representing ConsumptionManagementClientOptions.
 */
export interface ConsumptionManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * Defines headers for Download operation.
 */
export interface UsageDetailsDownloadHeaders {
  /**
   * GET this URL to retrieve the status of the asynchronous operation.
   */
  location: string;
  /**
   * The amount of delay to use while the status of the operation is checked. The value is
   * expressed in seconds.
   */
  retryAfter: string;
  /**
   * To get the progress of the operation, call GET operation on the URL in Azure-AsyncOperation
   * header field.
   */
  azureAsyncOperation: string;
}

/**
 * @interface
 * Result of listing usage details. It contains a list of available usage details in reverse
 * chronological order by billing period.
 * @extends Array<UsageDetail>
 */
export interface UsageDetailsListResult extends Array<UsageDetail> {
  /**
   * The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Result of listing marketplaces. It contains a list of available marketplaces in reverse
 * chronological order by billing period.
 * @extends Array<Marketplace>
 */
export interface MarketplacesListResult extends Array<Marketplace> {
  /**
   * The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Result of listing budgets. It contains a list of available budgets in the scope provided.
 * @extends Array<Budget>
 */
export interface BudgetsListResult extends Array<Budget> {
  /**
   * The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Result of listing reservation summaries.
 * @extends Array<ReservationSummary>
 */
export interface ReservationSummariesListResult extends Array<ReservationSummary> {
  /**
   * The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Result of listing reservation details.
 * @extends Array<ReservationDetail>
 */
export interface ReservationDetailsListResult extends Array<ReservationDetail> {
  /**
   * The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Result of listing reservation recommendations.
 * @extends Array<ReservationRecommendation>
 */
export interface ReservationRecommendationsListResult extends Array<ReservationRecommendation> {
  /**
   * The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Result of listing forecasts. It contains a list of available forecasts.
 * @extends Array<Forecast>
 */
export interface ForecastsListResult extends Array<Forecast> {
}

/**
 * @interface
 * Result of listing consumption operations. It contains a list of operations and a URL link to get
 * the next set of results.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * URL to get the next set of operation list results if there are any.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for BillingFrequency.
 * Possible values include: 'Month', 'Quarter', 'Year'
 * @readonly
 * @enum {string}
 */
export type BillingFrequency = 'Month' | 'Quarter' | 'Year';

/**
 * Defines values for CategoryType.
 * Possible values include: 'Cost', 'Usage'
 * @readonly
 * @enum {string}
 */
export type CategoryType = 'Cost' | 'Usage';

/**
 * Defines values for TimeGrainType.
 * Possible values include: 'Monthly', 'Quarterly', 'Annually'
 * @readonly
 * @enum {string}
 */
export type TimeGrainType = 'Monthly' | 'Quarterly' | 'Annually';

/**
 * Defines values for OperatorType.
 * Possible values include: 'EqualTo', 'GreaterThan', 'GreaterThanOrEqualTo'
 * @readonly
 * @enum {string}
 */
export type OperatorType = 'EqualTo' | 'GreaterThan' | 'GreaterThanOrEqualTo';

/**
 * Defines values for Grain.
 * Possible values include: 'Daily', 'Monthly', 'Yearly'
 * @readonly
 * @enum {string}
 */
export type Grain = 'Daily' | 'Monthly' | 'Yearly';

/**
 * Defines values for ChargeType.
 * Possible values include: 'Actual', 'Forecast'
 * @readonly
 * @enum {string}
 */
export type ChargeType = 'Actual' | 'Forecast';

/**
 * Defines values for Bound.
 * Possible values include: 'Upper', 'Lower'
 * @readonly
 * @enum {string}
 */
export type Bound = 'Upper' | 'Lower';

/**
 * Defines values for Datagrain.
 * Possible values include: 'DailyGrain', 'MonthlyGrain'
 * @readonly
 * @enum {string}
 */
export type Datagrain = 'daily' | 'monthly';

/**
 * Defines values for Metrictype.
 * Possible values include: 'ActualCostMetricType', 'AmortizedCostMetricType', 'UsageMetricType'
 * @readonly
 * @enum {string}
 */
export type Metrictype = 'actualcost' | 'amortizedcost' | 'usage';

/**
 * Contains response data for the list operation.
 */
export type UsageDetailsListResponse = UsageDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsageDetailsListResult;
    };
};

/**
 * Contains response data for the download operation.
 */
export type UsageDetailsDownloadResponse2 = UsageDetailsDownloadResponse & UsageDetailsDownloadHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: UsageDetailsDownloadHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsageDetailsDownloadResponse;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type UsageDetailsListNextResponse = UsageDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UsageDetailsListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type MarketplacesListResponse = MarketplacesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MarketplacesListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type MarketplacesListNextResponse = MarketplacesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: MarketplacesListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type BudgetsListResponse = BudgetsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BudgetsListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type BudgetsGetResponse = Budget & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Budget;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type BudgetsCreateOrUpdateResponse = Budget & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Budget;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type BudgetsListNextResponse = BudgetsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: BudgetsListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TagsGetResponse = TagsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TagsResult;
    };
};

/**
 * Contains response data for the listByScope operation.
 */
export type ChargesListByScopeResponse = ChargeSummary & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ChargeSummary;
    };
};

/**
 * Contains response data for the getByBillingAccount operation.
 */
export type BalancesGetByBillingAccountResponse = Balance & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Balance;
    };
};

/**
 * Contains response data for the getForBillingPeriodByBillingAccount operation.
 */
export type BalancesGetForBillingPeriodByBillingAccountResponse = Balance & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Balance;
    };
};

/**
 * Contains response data for the listByReservationOrder operation.
 */
export type ReservationsSummariesListByReservationOrderResponse = ReservationSummariesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationSummariesListResult;
    };
};

/**
 * Contains response data for the listByReservationOrderAndReservation operation.
 */
export type ReservationsSummariesListByReservationOrderAndReservationResponse = ReservationSummariesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationSummariesListResult;
    };
};

/**
 * Contains response data for the listByReservationOrderNext operation.
 */
export type ReservationsSummariesListByReservationOrderNextResponse = ReservationSummariesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationSummariesListResult;
    };
};

/**
 * Contains response data for the listByReservationOrderAndReservationNext operation.
 */
export type ReservationsSummariesListByReservationOrderAndReservationNextResponse = ReservationSummariesListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationSummariesListResult;
    };
};

/**
 * Contains response data for the listByReservationOrder operation.
 */
export type ReservationsDetailsListByReservationOrderResponse = ReservationDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationDetailsListResult;
    };
};

/**
 * Contains response data for the listByReservationOrderAndReservation operation.
 */
export type ReservationsDetailsListByReservationOrderAndReservationResponse = ReservationDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationDetailsListResult;
    };
};

/**
 * Contains response data for the listByReservationOrderNext operation.
 */
export type ReservationsDetailsListByReservationOrderNextResponse = ReservationDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationDetailsListResult;
    };
};

/**
 * Contains response data for the listByReservationOrderAndReservationNext operation.
 */
export type ReservationsDetailsListByReservationOrderAndReservationNextResponse = ReservationDetailsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationDetailsListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ReservationRecommendationsListResponse = ReservationRecommendationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationRecommendationsListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ReservationRecommendationsListNextResponse = ReservationRecommendationsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReservationRecommendationsListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PriceSheetGetResponse = PriceSheetResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PriceSheetResult;
    };
};

/**
 * Contains response data for the getByBillingPeriod operation.
 */
export type PriceSheetGetByBillingPeriodResponse = PriceSheetResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PriceSheetResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ForecastsListResponse = ForecastsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ForecastsListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the getByManagementGroup operation.
 */
export type AggregatedCostGetByManagementGroupResponse = ManagementGroupAggregatedCostResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagementGroupAggregatedCostResult;
    };
};

/**
 * Contains response data for the getForBillingPeriodByManagementGroup operation.
 */
export type AggregatedCostGetForBillingPeriodByManagementGroupResponse = ManagementGroupAggregatedCostResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ManagementGroupAggregatedCostResult;
    };
};
