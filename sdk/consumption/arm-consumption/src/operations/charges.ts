/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/chargesMappers";
import * as Parameters from "../models/parameters";
import { ConsumptionManagementClientContext } from "../consumptionManagementClientContext";

/** Class representing a Charges. */
export class Charges {
  private readonly client: ConsumptionManagementClientContext;

  /**
   * Create a Charges.
   * @param {ConsumptionManagementClientContext} client Reference to the service client.
   */
  constructor(client: ConsumptionManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists the charges based for the defined scope.
   * @param scope The scope associated with charges operations. This includes
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope, and
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope. For department and enrollment accounts, you can also add billing
   * period to the scope using '/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'. For
   * e.g. to specify billing period at department scope use
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'.
   * Also, Modern Commerce Account scopes are
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for billingAccount scope,
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for billingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
   * for invoiceSection scope, and
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific
   * for partners.
   * @param [options] The optional parameters
   * @returns Promise<Models.ChargesListResponse>
   */
  list(scope: string, options?: Models.ChargesListOptionalParams): Promise<Models.ChargesListResponse>;
  /**
   * @param scope The scope associated with charges operations. This includes
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope, and
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope. For department and enrollment accounts, you can also add billing
   * period to the scope using '/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'. For
   * e.g. to specify billing period at department scope use
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'.
   * Also, Modern Commerce Account scopes are
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for billingAccount scope,
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for billingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
   * for invoiceSection scope, and
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific
   * for partners.
   * @param callback The callback
   */
  list(scope: string, callback: msRest.ServiceCallback<Models.ChargesListResult>): void;
  /**
   * @param scope The scope associated with charges operations. This includes
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope, and
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope. For department and enrollment accounts, you can also add billing
   * period to the scope using '/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'. For
   * e.g. to specify billing period at department scope use
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}/providers/Microsoft.Billing/billingPeriods/{billingPeriodName}'.
   * Also, Modern Commerce Account scopes are
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for billingAccount scope,
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for billingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
   * for invoiceSection scope, and
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific
   * for partners.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(scope: string, options: Models.ChargesListOptionalParams, callback: msRest.ServiceCallback<Models.ChargesListResult>): void;
  list(scope: string, options?: Models.ChargesListOptionalParams | msRest.ServiceCallback<Models.ChargesListResult>, callback?: msRest.ServiceCallback<Models.ChargesListResult>): Promise<Models.ChargesListResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ChargesListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Consumption/charges",
  urlParameters: [
    Parameters.scope0
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startDate0,
    Parameters.endDate0,
    Parameters.filter0,
    Parameters.apply
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ChargesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
