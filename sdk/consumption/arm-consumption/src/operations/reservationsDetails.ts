/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/reservationsDetailsMappers";
import * as Parameters from "../models/parameters";
import { ConsumptionManagementClientContext } from "../consumptionManagementClientContext";

/** Class representing a ReservationsDetails. */
export class ReservationsDetails {
  private readonly client: ConsumptionManagementClientContext;

  /**
   * Create a ReservationsDetails.
   * @param {ConsumptionManagementClientContext} client Reference to the service client.
   */
  constructor(client: ConsumptionManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists the reservations details for provided date range.
   * @param reservationOrderId Order Id of the reservation
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date
   * and end date. The filter supports 'le' and  'ge'
   * @param [options] The optional parameters
   * @returns Promise<Models.ReservationsDetailsListByReservationOrderResponse>
   */
  listByReservationOrder(
    reservationOrderId: string,
    filter: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.ReservationsDetailsListByReservationOrderResponse>;
  /**
   * @param reservationOrderId Order Id of the reservation
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date
   * and end date. The filter supports 'le' and  'ge'
   * @param callback The callback
   */
  listByReservationOrder(
    reservationOrderId: string,
    filter: string,
    callback: msRest.ServiceCallback<Models.ReservationDetailsListResult>
  ): void;
  /**
   * @param reservationOrderId Order Id of the reservation
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date
   * and end date. The filter supports 'le' and  'ge'
   * @param options The optional parameters
   * @param callback The callback
   */
  listByReservationOrder(
    reservationOrderId: string,
    filter: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.ReservationDetailsListResult>
  ): void;
  listByReservationOrder(
    reservationOrderId: string,
    filter: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.ReservationDetailsListResult>,
    callback?: msRest.ServiceCallback<Models.ReservationDetailsListResult>
  ): Promise<Models.ReservationsDetailsListByReservationOrderResponse> {
    return this.client.sendOperationRequest(
      {
        reservationOrderId,
        filter,
        options
      },
      listByReservationOrderOperationSpec,
      callback
    ) as Promise<Models.ReservationsDetailsListByReservationOrderResponse>;
  }

  /**
   * Lists the reservations details for provided date range.
   * @param reservationOrderId Order Id of the reservation
   * @param reservationId Id of the reservation
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date
   * and end date. The filter supports 'le' and  'ge'
   * @param [options] The optional parameters
   * @returns Promise<Models.ReservationsDetailsListByReservationOrderAndReservationResponse>
   */
  listByReservationOrderAndReservation(
    reservationOrderId: string,
    reservationId: string,
    filter: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.ReservationsDetailsListByReservationOrderAndReservationResponse>;
  /**
   * @param reservationOrderId Order Id of the reservation
   * @param reservationId Id of the reservation
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date
   * and end date. The filter supports 'le' and  'ge'
   * @param callback The callback
   */
  listByReservationOrderAndReservation(
    reservationOrderId: string,
    reservationId: string,
    filter: string,
    callback: msRest.ServiceCallback<Models.ReservationDetailsListResult>
  ): void;
  /**
   * @param reservationOrderId Order Id of the reservation
   * @param reservationId Id of the reservation
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date
   * and end date. The filter supports 'le' and  'ge'
   * @param options The optional parameters
   * @param callback The callback
   */
  listByReservationOrderAndReservation(
    reservationOrderId: string,
    reservationId: string,
    filter: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.ReservationDetailsListResult>
  ): void;
  listByReservationOrderAndReservation(
    reservationOrderId: string,
    reservationId: string,
    filter: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.ReservationDetailsListResult>,
    callback?: msRest.ServiceCallback<Models.ReservationDetailsListResult>
  ): Promise<Models.ReservationsDetailsListByReservationOrderAndReservationResponse> {
    return this.client.sendOperationRequest(
      {
        reservationOrderId,
        reservationId,
        filter,
        options
      },
      listByReservationOrderAndReservationOperationSpec,
      callback
    ) as Promise<Models.ReservationsDetailsListByReservationOrderAndReservationResponse>;
  }

  /**
   * Lists the reservations details for provided date range.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date
   * and end date. The filter supports 'le' and  'ge'
   * @param [options] The optional parameters
   * @returns Promise<Models.ReservationsDetailsListByReservationOrderNextResponse>
   */
  listByReservationOrderNext(
    nextPageLink: string,
    filter: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.ReservationsDetailsListByReservationOrderNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date
   * and end date. The filter supports 'le' and  'ge'
   * @param callback The callback
   */
  listByReservationOrderNext(
    nextPageLink: string,
    filter: string,
    callback: msRest.ServiceCallback<Models.ReservationDetailsListResult>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date
   * and end date. The filter supports 'le' and  'ge'
   * @param options The optional parameters
   * @param callback The callback
   */
  listByReservationOrderNext(
    nextPageLink: string,
    filter: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.ReservationDetailsListResult>
  ): void;
  listByReservationOrderNext(
    nextPageLink: string,
    filter: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.ReservationDetailsListResult>,
    callback?: msRest.ServiceCallback<Models.ReservationDetailsListResult>
  ): Promise<Models.ReservationsDetailsListByReservationOrderNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        filter,
        options
      },
      listByReservationOrderNextOperationSpec,
      callback
    ) as Promise<Models.ReservationsDetailsListByReservationOrderNextResponse>;
  }

  /**
   * Lists the reservations details for provided date range.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date
   * and end date. The filter supports 'le' and  'ge'
   * @param [options] The optional parameters
   * @returns Promise<Models.ReservationsDetailsListByReservationOrderAndReservationNextResponse>
   */
  listByReservationOrderAndReservationNext(
    nextPageLink: string,
    filter: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.ReservationsDetailsListByReservationOrderAndReservationNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date
   * and end date. The filter supports 'le' and  'ge'
   * @param callback The callback
   */
  listByReservationOrderAndReservationNext(
    nextPageLink: string,
    filter: string,
    callback: msRest.ServiceCallback<Models.ReservationDetailsListResult>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param filter Filter reservation details by date range. The properties/UsageDate for start date
   * and end date. The filter supports 'le' and  'ge'
   * @param options The optional parameters
   * @param callback The callback
   */
  listByReservationOrderAndReservationNext(
    nextPageLink: string,
    filter: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.ReservationDetailsListResult>
  ): void;
  listByReservationOrderAndReservationNext(
    nextPageLink: string,
    filter: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.ReservationDetailsListResult>,
    callback?: msRest.ServiceCallback<Models.ReservationDetailsListResult>
  ): Promise<Models.ReservationsDetailsListByReservationOrderAndReservationNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        filter,
        options
      },
      listByReservationOrderAndReservationNextOperationSpec,
      callback
    ) as Promise<Models.ReservationsDetailsListByReservationOrderAndReservationNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByReservationOrderOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/providers/Microsoft.Consumption/reservationDetails",
  urlParameters: [Parameters.reservationOrderId],
  queryParameters: [Parameters.filter1, Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ReservationDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByReservationOrderAndReservationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "providers/Microsoft.Capacity/reservationorders/{reservationOrderId}/reservations/{reservationId}/providers/Microsoft.Consumption/reservationDetails",
  urlParameters: [Parameters.reservationOrderId, Parameters.reservationId],
  queryParameters: [Parameters.filter1, Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ReservationDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByReservationOrderNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.filter1, Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ReservationDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByReservationOrderAndReservationNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.filter1, Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ReservationDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
