/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/tagsMappers";
import * as Parameters from "../models/parameters";
import { ConsumptionManagementClientContext } from "../consumptionManagementClientContext";

/** Class representing a Tags. */
export class Tags {
  private readonly client: ConsumptionManagementClientContext;

  /**
   * Create a Tags.
   * @param {ConsumptionManagementClientContext} client Reference to the service client.
   */
  constructor(client: ConsumptionManagementClientContext) {
    this.client = client;
  }

  /**
   * Get all available tag keys for the defined scope
   * @param scope The scope associated with tags operations. This includes
   * '/subscriptions/{subscriptionId}/' for subscription scope,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope and
   * '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group
   * scope..
   * @param [options] The optional parameters
   * @returns Promise<Models.TagsGetResponse>
   */
  get(scope: string, options?: msRest.RequestOptionsBase): Promise<Models.TagsGetResponse>;
  /**
   * @param scope The scope associated with tags operations. This includes
   * '/subscriptions/{subscriptionId}/' for subscription scope,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope and
   * '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group
   * scope..
   * @param callback The callback
   */
  get(scope: string, callback: msRest.ServiceCallback<Models.TagsResult>): void;
  /**
   * @param scope The scope associated with tags operations. This includes
   * '/subscriptions/{subscriptionId}/' for subscription scope,
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope and
   * '/providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group
   * scope..
   * @param options The optional parameters
   * @param callback The callback
   */
  get(scope: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TagsResult>): void;
  get(scope: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TagsResult>, callback?: msRest.ServiceCallback<Models.TagsResult>): Promise<Models.TagsGetResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.TagsGetResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Consumption/tags",
  urlParameters: [
    Parameters.scope
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TagsResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
