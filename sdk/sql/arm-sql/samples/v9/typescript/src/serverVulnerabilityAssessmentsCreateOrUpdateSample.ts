/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import {
  ServerVulnerabilityAssessment,
  SqlManagementClient
} from "@azure/arm-sql";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to Creates or updates the server's vulnerability assessment. Learn more about setting SQL vulnerability assessment with managed identity - https://docs.microsoft.com/azure/azure-sql/database/sql-database-vulnerability-assessment-storage
 *
 * @summary Creates or updates the server's vulnerability assessment. Learn more about setting SQL vulnerability assessment with managed identity - https://docs.microsoft.com/azure/azure-sql/database/sql-database-vulnerability-assessment-storage
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentCreateMax.json
 */
async function createAServerVulnerabilityAssessmentWithAllParameters() {
  const subscriptionId = "00000000-1111-2222-3333-444444444444";
  const resourceGroupName = "vulnerabilityaseessmenttest-4799";
  const serverName = "vulnerabilityaseessmenttest-6440";
  const vulnerabilityAssessmentName = "default";
  const parameters: ServerVulnerabilityAssessment = {
    recurringScans: {
      emailSubscriptionAdmins: true,
      emails: ["email1@mail.com", "email2@mail.com"],
      isEnabled: true
    },
    storageAccountAccessKey:
      "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    storageContainerPath:
      "https://myStorage.blob.core.windows.net/vulnerability-assessment/",
    storageContainerSasKey:
      "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
  };
  const credential = new DefaultAzureCredential();
  const client = new SqlManagementClient(credential, subscriptionId);
  const result = await client.serverVulnerabilityAssessments.createOrUpdate(
    resourceGroupName,
    serverName,
    vulnerabilityAssessmentName,
    parameters
  );
  console.log(result);
}

createAServerVulnerabilityAssessmentWithAllParameters().catch(console.error);

/**
 * This sample demonstrates how to Creates or updates the server's vulnerability assessment. Learn more about setting SQL vulnerability assessment with managed identity - https://docs.microsoft.com/azure/azure-sql/database/sql-database-vulnerability-assessment-storage
 *
 * @summary Creates or updates the server's vulnerability assessment. Learn more about setting SQL vulnerability assessment with managed identity - https://docs.microsoft.com/azure/azure-sql/database/sql-database-vulnerability-assessment-storage
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentCreateStorageAccessKeyMin.json
 */
async function createAServerVulnerabilityAssessmentWithMinimalParametersWhenStorageAccountAccessKeyIsSpecified() {
  const subscriptionId = "00000000-1111-2222-3333-444444444444";
  const resourceGroupName = "vulnerabilityaseessmenttest-4799";
  const serverName = "vulnerabilityaseessmenttest-6440";
  const vulnerabilityAssessmentName = "default";
  const parameters: ServerVulnerabilityAssessment = {
    storageAccountAccessKey:
      "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    storageContainerPath:
      "https://myStorage.blob.core.windows.net/vulnerability-assessment/"
  };
  const credential = new DefaultAzureCredential();
  const client = new SqlManagementClient(credential, subscriptionId);
  const result = await client.serverVulnerabilityAssessments.createOrUpdate(
    resourceGroupName,
    serverName,
    vulnerabilityAssessmentName,
    parameters
  );
  console.log(result);
}

createAServerVulnerabilityAssessmentWithMinimalParametersWhenStorageAccountAccessKeyIsSpecified().catch(
  console.error
);

/**
 * This sample demonstrates how to Creates or updates the server's vulnerability assessment. Learn more about setting SQL vulnerability assessment with managed identity - https://docs.microsoft.com/azure/azure-sql/database/sql-database-vulnerability-assessment-storage
 *
 * @summary Creates or updates the server's vulnerability assessment. Learn more about setting SQL vulnerability assessment with managed identity - https://docs.microsoft.com/azure/azure-sql/database/sql-database-vulnerability-assessment-storage
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/ServerVulnerabilityAssessmentCreateContainerSasKeyMin.json
 */
async function createAServerVulnerabilityAssessmentWithMinimalParametersWhenStorageContainerSasKeyIsSpecified() {
  const subscriptionId = "00000000-1111-2222-3333-444444444444";
  const resourceGroupName = "vulnerabilityaseessmenttest-4799";
  const serverName = "vulnerabilityaseessmenttest-6440";
  const vulnerabilityAssessmentName = "default";
  const parameters: ServerVulnerabilityAssessment = {
    storageContainerPath:
      "https://myStorage.blob.core.windows.net/vulnerability-assessment/",
    storageContainerSasKey:
      "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
  };
  const credential = new DefaultAzureCredential();
  const client = new SqlManagementClient(credential, subscriptionId);
  const result = await client.serverVulnerabilityAssessments.createOrUpdate(
    resourceGroupName,
    serverName,
    vulnerabilityAssessmentName,
    parameters
  );
  console.log(result);
}

createAServerVulnerabilityAssessmentWithMinimalParametersWhenStorageContainerSasKeyIsSpecified().catch(
  console.error
);
