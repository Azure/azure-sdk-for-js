/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import {
  DatabaseVulnerabilityAssessment,
  SqlManagementClient
} from "@azure/arm-sql";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";

dotenv.config();

/**
 * This sample demonstrates how to Creates or updates the database's vulnerability assessment.
 *
 * @summary Creates or updates the database's vulnerability assessment.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentCreateMax.json
 */
async function createADatabaseVulnerabilityAssessmentWithAllParameters() {
  const subscriptionId =
    process.env["SQL_SUBSCRIPTION_ID"] ||
    "00000000-1111-2222-3333-444444444444";
  const resourceGroupName =
    process.env["SQL_RESOURCE_GROUP"] || "vulnerabilityaseessmenttest-4799";
  const serverName = "vulnerabilityaseessmenttest-6440";
  const databaseName = "testdb";
  const vulnerabilityAssessmentName = "default";
  const parameters: DatabaseVulnerabilityAssessment = {
    recurringScans: {
      emailSubscriptionAdmins: true,
      emails: ["email1@mail.com", "email2@mail.com"],
      isEnabled: true
    },
    storageAccountAccessKey:
      "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    storageContainerPath:
      "https://myStorage.blob.core.windows.net/vulnerability-assessment/",
    storageContainerSasKey:
      "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
  };
  const credential = new DefaultAzureCredential();
  const client = new SqlManagementClient(credential, subscriptionId);
  const result = await client.databaseVulnerabilityAssessments.createOrUpdate(
    resourceGroupName,
    serverName,
    databaseName,
    vulnerabilityAssessmentName,
    parameters
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Creates or updates the database's vulnerability assessment.
 *
 * @summary Creates or updates the database's vulnerability assessment.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentCreateStorageAccessKeyMin.json
 */
async function createADatabaseVulnerabilityAssessmentWithMinimalParametersWhenStorageAccountAccessKeyIsSpecified() {
  const subscriptionId =
    process.env["SQL_SUBSCRIPTION_ID"] ||
    "00000000-1111-2222-3333-444444444444";
  const resourceGroupName =
    process.env["SQL_RESOURCE_GROUP"] || "vulnerabilityaseessmenttest-4799";
  const serverName = "vulnerabilityaseessmenttest-6440";
  const databaseName = "testdb";
  const vulnerabilityAssessmentName = "default";
  const parameters: DatabaseVulnerabilityAssessment = {
    storageAccountAccessKey:
      "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    storageContainerPath:
      "https://myStorage.blob.core.windows.net/vulnerability-assessment/"
  };
  const credential = new DefaultAzureCredential();
  const client = new SqlManagementClient(credential, subscriptionId);
  const result = await client.databaseVulnerabilityAssessments.createOrUpdate(
    resourceGroupName,
    serverName,
    databaseName,
    vulnerabilityAssessmentName,
    parameters
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Creates or updates the database's vulnerability assessment.
 *
 * @summary Creates or updates the database's vulnerability assessment.
 * x-ms-original-file: specification/sql/resource-manager/Microsoft.Sql/preview/2020-11-01-preview/examples/DatabaseVulnerabilityAssessmentCreateContainerSasKeyMin.json
 */
async function createADatabaseVulnerabilityAssessmentWithMinimalParametersWhenStorageContainerSasKeyIsSpecified() {
  const subscriptionId =
    process.env["SQL_SUBSCRIPTION_ID"] ||
    "00000000-1111-2222-3333-444444444444";
  const resourceGroupName =
    process.env["SQL_RESOURCE_GROUP"] || "vulnerabilityaseessmenttest-4799";
  const serverName = "vulnerabilityaseessmenttest-6440";
  const databaseName = "testdb";
  const vulnerabilityAssessmentName = "default";
  const parameters: DatabaseVulnerabilityAssessment = {
    storageContainerPath:
      "https://myStorage.blob.core.windows.net/vulnerability-assessment/",
    storageContainerSasKey:
      "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
  };
  const credential = new DefaultAzureCredential();
  const client = new SqlManagementClient(credential, subscriptionId);
  const result = await client.databaseVulnerabilityAssessments.createOrUpdate(
    resourceGroupName,
    serverName,
    databaseName,
    vulnerabilityAssessmentName,
    parameters
  );
  console.log(result);
}

async function main() {
  createADatabaseVulnerabilityAssessmentWithAllParameters();
  createADatabaseVulnerabilityAssessmentWithMinimalParametersWhenStorageAccountAccessKeyIsSpecified();
  createADatabaseVulnerabilityAssessmentWithMinimalParametersWhenStorageContainerSasKeyIsSpecified();
}

main().catch(console.error);
