/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const RecoverableDatabase: msRest.CompositeMapper = {
  serializedName: "RecoverableDatabase",
  type: {
    name: "Composite",
    className: "RecoverableDatabase",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      edition: {
        readOnly: true,
        serializedName: "properties.edition",
        type: {
          name: "String"
        }
      },
      serviceLevelObjective: {
        readOnly: true,
        serializedName: "properties.serviceLevelObjective",
        type: {
          name: "String"
        }
      },
      elasticPoolName: {
        readOnly: true,
        serializedName: "properties.elasticPoolName",
        type: {
          name: "String"
        }
      },
      lastAvailableBackupDate: {
        readOnly: true,
        serializedName: "properties.lastAvailableBackupDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RestorableDroppedDatabase: msRest.CompositeMapper = {
  serializedName: "RestorableDroppedDatabase",
  type: {
    name: "Composite",
    className: "RestorableDroppedDatabase",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      edition: {
        readOnly: true,
        serializedName: "properties.edition",
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        readOnly: true,
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "String"
        }
      },
      serviceLevelObjective: {
        readOnly: true,
        serializedName: "properties.serviceLevelObjective",
        type: {
          name: "String"
        }
      },
      elasticPoolName: {
        readOnly: true,
        serializedName: "properties.elasticPoolName",
        type: {
          name: "String"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      deletionDate: {
        readOnly: true,
        serializedName: "properties.deletionDate",
        type: {
          name: "DateTime"
        }
      },
      earliestRestoreDate: {
        readOnly: true,
        serializedName: "properties.earliestRestoreDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequest: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityRequest",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'Microsoft.Sql/servers',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResponse: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResponse",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponse",
    modelProperties: {
      available: {
        readOnly: true,
        serializedName: "available",
        type: {
          name: "Boolean"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "Enum",
          allowedValues: [
            "Invalid",
            "AlreadyExists"
          ]
        }
      }
    }
  }
};

export const ServerConnectionPolicy: msRest.CompositeMapper = {
  serializedName: "ServerConnectionPolicy",
  type: {
    name: "Composite",
    className: "ServerConnectionPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      connectionType: {
        required: true,
        serializedName: "properties.connectionType",
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "Proxy",
            "Redirect"
          ]
        }
      }
    }
  }
};

export const DatabaseSecurityAlertPolicy: msRest.CompositeMapper = {
  serializedName: "DatabaseSecurityAlertPolicy",
  type: {
    name: "Composite",
    className: "DatabaseSecurityAlertPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "New",
            "Enabled",
            "Disabled"
          ]
        }
      },
      disabledAlerts: {
        serializedName: "properties.disabledAlerts",
        type: {
          name: "String"
        }
      },
      emailAddresses: {
        serializedName: "properties.emailAddresses",
        type: {
          name: "String"
        }
      },
      emailAccountAdmins: {
        serializedName: "properties.emailAccountAdmins",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      useServerDefault: {
        serializedName: "properties.useServerDefault",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      }
    }
  }
};

export const DataMaskingPolicy: msRest.CompositeMapper = {
  serializedName: "DataMaskingPolicy",
  type: {
    name: "Composite",
    className: "DataMaskingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      dataMaskingState: {
        required: true,
        serializedName: "properties.dataMaskingState",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "Enabled"
          ]
        }
      },
      exemptPrincipals: {
        serializedName: "properties.exemptPrincipals",
        type: {
          name: "String"
        }
      },
      applicationPrincipals: {
        readOnly: true,
        serializedName: "properties.applicationPrincipals",
        type: {
          name: "String"
        }
      },
      maskingLevel: {
        readOnly: true,
        serializedName: "properties.maskingLevel",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataMaskingRule: msRest.CompositeMapper = {
  serializedName: "DataMaskingRule",
  type: {
    name: "Composite",
    className: "DataMaskingRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      dataMaskingRuleId: {
        readOnly: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      aliasName: {
        serializedName: "properties.aliasName",
        type: {
          name: "String"
        }
      },
      ruleState: {
        serializedName: "properties.ruleState",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "Enabled"
          ]
        }
      },
      schemaName: {
        required: true,
        serializedName: "properties.schemaName",
        type: {
          name: "String"
        }
      },
      tableName: {
        required: true,
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      columnName: {
        required: true,
        serializedName: "properties.columnName",
        type: {
          name: "String"
        }
      },
      maskingFunction: {
        required: true,
        serializedName: "properties.maskingFunction",
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "CCN",
            "Email",
            "Number",
            "SSN",
            "Text"
          ]
        }
      },
      numberFrom: {
        serializedName: "properties.numberFrom",
        type: {
          name: "String"
        }
      },
      numberTo: {
        serializedName: "properties.numberTo",
        type: {
          name: "String"
        }
      },
      prefixSize: {
        serializedName: "properties.prefixSize",
        type: {
          name: "String"
        }
      },
      suffixSize: {
        serializedName: "properties.suffixSize",
        type: {
          name: "String"
        }
      },
      replacementString: {
        serializedName: "properties.replacementString",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRule: msRest.CompositeMapper = {
  serializedName: "FirewallRule",
  type: {
    name: "Composite",
    className: "FirewallRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        required: true,
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        required: true,
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoBackupPolicy: msRest.CompositeMapper = {
  serializedName: "GeoBackupPolicy",
  type: {
    name: "Composite",
    className: "GeoBackupPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "Enabled"
          ]
        }
      },
      storageType: {
        readOnly: true,
        serializedName: "properties.storageType",
        type: {
          name: "String"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportExtensionRequest: msRest.CompositeMapper = {
  serializedName: "ImportExtensionRequest",
  type: {
    name: "Composite",
    className: "ImportExtensionRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      storageKeyType: {
        required: true,
        serializedName: "properties.storageKeyType",
        type: {
          name: "Enum",
          allowedValues: [
            "StorageAccessKey",
            "SharedAccessKey"
          ]
        }
      },
      storageKey: {
        required: true,
        serializedName: "properties.storageKey",
        type: {
          name: "String"
        }
      },
      storageUri: {
        required: true,
        serializedName: "properties.storageUri",
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        required: true,
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        required: true,
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      authenticationType: {
        serializedName: "properties.authenticationType",
        defaultValue: 'SQL',
        type: {
          name: "Enum",
          allowedValues: [
            "SQL",
            "ADPassword"
          ]
        }
      },
      operationMode: {
        required: true,
        isConstant: true,
        serializedName: "properties.operationMode",
        defaultValue: 'Import',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportExportResponse: msRest.CompositeMapper = {
  serializedName: "ImportExportResponse",
  type: {
    name: "Composite",
    className: "ImportExportResponse",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      requestType: {
        readOnly: true,
        serializedName: "properties.requestType",
        type: {
          name: "String"
        }
      },
      requestId: {
        readOnly: true,
        serializedName: "properties.requestId",
        type: {
          name: "Uuid"
        }
      },
      serverName: {
        readOnly: true,
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      lastModifiedTime: {
        readOnly: true,
        serializedName: "properties.lastModifiedTime",
        type: {
          name: "String"
        }
      },
      queuedTime: {
        readOnly: true,
        serializedName: "properties.queuedTime",
        type: {
          name: "String"
        }
      },
      blobUri: {
        readOnly: true,
        serializedName: "properties.blobUri",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        readOnly: true,
        serializedName: "properties.errorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExportRequest: msRest.CompositeMapper = {
  serializedName: "ExportRequest",
  type: {
    name: "Composite",
    className: "ExportRequest",
    modelProperties: {
      storageKeyType: {
        required: true,
        serializedName: "storageKeyType",
        type: {
          name: "Enum",
          allowedValues: [
            "StorageAccessKey",
            "SharedAccessKey"
          ]
        }
      },
      storageKey: {
        required: true,
        serializedName: "storageKey",
        type: {
          name: "String"
        }
      },
      storageUri: {
        required: true,
        serializedName: "storageUri",
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        required: true,
        serializedName: "administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        required: true,
        serializedName: "administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      authenticationType: {
        serializedName: "authenticationType",
        defaultValue: 'SQL',
        type: {
          name: "Enum",
          allowedValues: [
            "SQL",
            "ADPassword"
          ]
        }
      }
    }
  }
};

export const ImportRequest: msRest.CompositeMapper = {
  serializedName: "ImportRequest",
  type: {
    name: "Composite",
    className: "ImportRequest",
    modelProperties: {
      ...ExportRequest.type.modelProperties,
      databaseName: {
        required: true,
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      },
      edition: {
        required: true,
        serializedName: "edition",
        type: {
          name: "String"
        }
      },
      serviceObjectiveName: {
        required: true,
        serializedName: "serviceObjectiveName",
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        required: true,
        serializedName: "maxSizeBytes",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricValue: msRest.CompositeMapper = {
  serializedName: "MetricValue",
  type: {
    name: "Composite",
    className: "MetricValue",
    modelProperties: {
      count: {
        readOnly: true,
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      average: {
        readOnly: true,
        serializedName: "average",
        type: {
          name: "Number"
        }
      },
      maximum: {
        readOnly: true,
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      minimum: {
        readOnly: true,
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      timestamp: {
        readOnly: true,
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      total: {
        readOnly: true,
        serializedName: "total",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MetricName: msRest.CompositeMapper = {
  serializedName: "MetricName",
  type: {
    name: "Composite",
    className: "MetricName",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        readOnly: true,
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Metric: msRest.CompositeMapper = {
  serializedName: "Metric",
  type: {
    name: "Composite",
    className: "Metric",
    modelProperties: {
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      metricValues: {
        readOnly: true,
        serializedName: "metricValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricValue"
            }
          }
        }
      }
    }
  }
};

export const MetricAvailability: msRest.CompositeMapper = {
  serializedName: "MetricAvailability",
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      retention: {
        readOnly: true,
        serializedName: "retention",
        type: {
          name: "String"
        }
      },
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricDefinition: msRest.CompositeMapper = {
  serializedName: "MetricDefinition",
  type: {
    name: "Composite",
    className: "MetricDefinition",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "MetricName"
        }
      },
      primaryAggregationType: {
        readOnly: true,
        serializedName: "primaryAggregationType",
        type: {
          name: "String"
        }
      },
      resourceUri: {
        readOnly: true,
        serializedName: "resourceUri",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      metricAvailabilities: {
        readOnly: true,
        serializedName: "metricAvailabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailability"
            }
          }
        }
      }
    }
  }
};

export const RecommendedElasticPoolMetric: msRest.CompositeMapper = {
  serializedName: "RecommendedElasticPoolMetric",
  type: {
    name: "Composite",
    className: "RecommendedElasticPoolMetric",
    modelProperties: {
      dateTime: {
        serializedName: "dateTime",
        type: {
          name: "DateTime"
        }
      },
      dtu: {
        serializedName: "dtu",
        type: {
          name: "Number"
        }
      },
      sizeGB: {
        serializedName: "sizeGB",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RecommendedElasticPool: msRest.CompositeMapper = {
  serializedName: "RecommendedElasticPool",
  type: {
    name: "Composite",
    className: "RecommendedElasticPool",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      databaseEdition: {
        readOnly: true,
        serializedName: "properties.databaseEdition",
        type: {
          name: "String"
        }
      },
      dtu: {
        serializedName: "properties.dtu",
        type: {
          name: "Number"
        }
      },
      databaseDtuMin: {
        serializedName: "properties.databaseDtuMin",
        type: {
          name: "Number"
        }
      },
      databaseDtuMax: {
        serializedName: "properties.databaseDtuMax",
        type: {
          name: "Number"
        }
      },
      storageMB: {
        serializedName: "properties.storageMB",
        type: {
          name: "Number"
        }
      },
      observationPeriodStart: {
        readOnly: true,
        serializedName: "properties.observationPeriodStart",
        type: {
          name: "DateTime"
        }
      },
      observationPeriodEnd: {
        readOnly: true,
        serializedName: "properties.observationPeriodEnd",
        type: {
          name: "DateTime"
        }
      },
      maxObservedDtu: {
        readOnly: true,
        serializedName: "properties.maxObservedDtu",
        type: {
          name: "Number"
        }
      },
      maxObservedStorageMB: {
        readOnly: true,
        serializedName: "properties.maxObservedStorageMB",
        type: {
          name: "Number"
        }
      },
      databases: {
        readOnly: true,
        serializedName: "properties.databases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrackedResource"
            }
          }
        }
      },
      metrics: {
        readOnly: true,
        serializedName: "properties.metrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedElasticPoolMetric"
            }
          }
        }
      }
    }
  }
};

export const ReplicationLink: msRest.CompositeMapper = {
  serializedName: "ReplicationLink",
  type: {
    name: "Composite",
    className: "ReplicationLink",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      isTerminationAllowed: {
        readOnly: true,
        serializedName: "properties.isTerminationAllowed",
        type: {
          name: "Boolean"
        }
      },
      replicationMode: {
        readOnly: true,
        serializedName: "properties.replicationMode",
        type: {
          name: "String"
        }
      },
      partnerServer: {
        readOnly: true,
        serializedName: "properties.partnerServer",
        type: {
          name: "String"
        }
      },
      partnerDatabase: {
        readOnly: true,
        serializedName: "properties.partnerDatabase",
        type: {
          name: "String"
        }
      },
      partnerLocation: {
        readOnly: true,
        serializedName: "properties.partnerLocation",
        type: {
          name: "String"
        }
      },
      role: {
        readOnly: true,
        serializedName: "properties.role",
        type: {
          name: "Enum",
          allowedValues: [
            "Primary",
            "Secondary",
            "NonReadableSecondary",
            "Source",
            "Copy"
          ]
        }
      },
      partnerRole: {
        readOnly: true,
        serializedName: "properties.partnerRole",
        type: {
          name: "Enum",
          allowedValues: [
            "Primary",
            "Secondary",
            "NonReadableSecondary",
            "Source",
            "Copy"
          ]
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      },
      replicationState: {
        readOnly: true,
        serializedName: "properties.replicationState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerAzureADAdministrator: msRest.CompositeMapper = {
  serializedName: "ServerAzureADAdministrator",
  type: {
    name: "Composite",
    className: "ServerAzureADAdministrator",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      administratorType: {
        required: true,
        isConstant: true,
        serializedName: "properties.administratorType",
        defaultValue: 'ActiveDirectory',
        type: {
          name: "String"
        }
      },
      login: {
        required: true,
        serializedName: "properties.login",
        type: {
          name: "String"
        }
      },
      sid: {
        required: true,
        serializedName: "properties.sid",
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        required: true,
        serializedName: "properties.tenantId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const ServerCommunicationLink: msRest.CompositeMapper = {
  serializedName: "ServerCommunicationLink",
  type: {
    name: "Composite",
    className: "ServerCommunicationLink",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      partnerServer: {
        required: true,
        serializedName: "properties.partnerServer",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceObjective: msRest.CompositeMapper = {
  serializedName: "ServiceObjective",
  type: {
    name: "Composite",
    className: "ServiceObjective",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      serviceObjectiveName: {
        readOnly: true,
        serializedName: "properties.serviceObjectiveName",
        type: {
          name: "String"
        }
      },
      isDefault: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.isDefault",
        type: {
          name: "Boolean"
        }
      },
      isSystem: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.isSystem",
        type: {
          name: "Boolean"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      enabled: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ElasticPoolActivity: msRest.CompositeMapper = {
  serializedName: "ElasticPoolActivity",
  type: {
    name: "Composite",
    className: "ElasticPoolActivity",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      errorCode: {
        readOnly: true,
        serializedName: "properties.errorCode",
        type: {
          name: "Number"
        }
      },
      errorMessage: {
        readOnly: true,
        serializedName: "properties.errorMessage",
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        readOnly: true,
        serializedName: "properties.errorSeverity",
        type: {
          name: "Number"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "properties.operation",
        type: {
          name: "String"
        }
      },
      operationId: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.operationId",
        type: {
          name: "Uuid"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      },
      requestedDatabaseDtuMax: {
        readOnly: true,
        serializedName: "properties.requestedDatabaseDtuMax",
        type: {
          name: "Number"
        }
      },
      requestedDatabaseDtuMin: {
        readOnly: true,
        serializedName: "properties.requestedDatabaseDtuMin",
        type: {
          name: "Number"
        }
      },
      requestedDtu: {
        readOnly: true,
        serializedName: "properties.requestedDtu",
        type: {
          name: "Number"
        }
      },
      requestedElasticPoolName: {
        readOnly: true,
        serializedName: "properties.requestedElasticPoolName",
        type: {
          name: "String"
        }
      },
      requestedStorageLimitInGB: {
        readOnly: true,
        serializedName: "properties.requestedStorageLimitInGB",
        type: {
          name: "Number"
        }
      },
      elasticPoolName: {
        readOnly: true,
        serializedName: "properties.elasticPoolName",
        type: {
          name: "String"
        }
      },
      serverName: {
        readOnly: true,
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      requestedStorageLimitInMB: {
        readOnly: true,
        serializedName: "properties.requestedStorageLimitInMB",
        type: {
          name: "Number"
        }
      },
      requestedDatabaseDtuGuarantee: {
        readOnly: true,
        serializedName: "properties.requestedDatabaseDtuGuarantee",
        type: {
          name: "Number"
        }
      },
      requestedDatabaseDtuCap: {
        readOnly: true,
        serializedName: "properties.requestedDatabaseDtuCap",
        type: {
          name: "Number"
        }
      },
      requestedDtuGuarantee: {
        readOnly: true,
        serializedName: "properties.requestedDtuGuarantee",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ElasticPoolDatabaseActivity: msRest.CompositeMapper = {
  serializedName: "ElasticPoolDatabaseActivity",
  type: {
    name: "Composite",
    className: "ElasticPoolDatabaseActivity",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      errorCode: {
        readOnly: true,
        serializedName: "properties.errorCode",
        type: {
          name: "Number"
        }
      },
      errorMessage: {
        readOnly: true,
        serializedName: "properties.errorMessage",
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        readOnly: true,
        serializedName: "properties.errorSeverity",
        type: {
          name: "Number"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "properties.operation",
        type: {
          name: "String"
        }
      },
      operationId: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.operationId",
        type: {
          name: "Uuid"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      },
      requestedElasticPoolName: {
        readOnly: true,
        serializedName: "properties.requestedElasticPoolName",
        type: {
          name: "String"
        }
      },
      currentElasticPoolName: {
        readOnly: true,
        serializedName: "properties.currentElasticPoolName",
        type: {
          name: "String"
        }
      },
      currentServiceObjective: {
        readOnly: true,
        serializedName: "properties.currentServiceObjective",
        type: {
          name: "String"
        }
      },
      requestedServiceObjective: {
        readOnly: true,
        serializedName: "properties.requestedServiceObjective",
        type: {
          name: "String"
        }
      },
      serverName: {
        readOnly: true,
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationImpact: msRest.CompositeMapper = {
  serializedName: "OperationImpact",
  type: {
    name: "Composite",
    className: "OperationImpact",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      changeValueAbsolute: {
        readOnly: true,
        serializedName: "changeValueAbsolute",
        type: {
          name: "Number"
        }
      },
      changeValueRelative: {
        readOnly: true,
        serializedName: "changeValueRelative",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RecommendedIndex: msRest.CompositeMapper = {
  serializedName: "RecommendedIndex",
  type: {
    name: "Composite",
    className: "RecommendedIndex",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      action: {
        readOnly: true,
        serializedName: "properties.action",
        type: {
          name: "Enum",
          allowedValues: [
            "Create",
            "Drop",
            "Rebuild"
          ]
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Active",
            "Pending",
            "Executing",
            "Verifying",
            "Pending Revert",
            "Reverting",
            "Reverted",
            "Ignored",
            "Expired",
            "Blocked",
            "Success"
          ]
        }
      },
      created: {
        readOnly: true,
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      lastModified: {
        readOnly: true,
        serializedName: "properties.lastModified",
        type: {
          name: "DateTime"
        }
      },
      indexType: {
        readOnly: true,
        serializedName: "properties.indexType",
        type: {
          name: "Enum",
          allowedValues: [
            "CLUSTERED",
            "NONCLUSTERED",
            "COLUMNSTORE",
            "CLUSTERED COLUMNSTORE"
          ]
        }
      },
      schema: {
        readOnly: true,
        serializedName: "properties.schema",
        type: {
          name: "String"
        }
      },
      table: {
        readOnly: true,
        serializedName: "properties.table",
        type: {
          name: "String"
        }
      },
      columns: {
        readOnly: true,
        serializedName: "properties.columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      includedColumns: {
        readOnly: true,
        serializedName: "properties.includedColumns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      indexScript: {
        readOnly: true,
        serializedName: "properties.indexScript",
        type: {
          name: "String"
        }
      },
      estimatedImpact: {
        readOnly: true,
        serializedName: "properties.estimatedImpact",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationImpact"
            }
          }
        }
      },
      reportedImpact: {
        readOnly: true,
        serializedName: "properties.reportedImpact",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationImpact"
            }
          }
        }
      }
    }
  }
};

export const TransparentDataEncryption: msRest.CompositeMapper = {
  serializedName: "TransparentDataEncryption",
  type: {
    name: "Composite",
    className: "TransparentDataEncryption",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      }
    }
  }
};

export const SloUsageMetric: msRest.CompositeMapper = {
  serializedName: "SloUsageMetric",
  type: {
    name: "Composite",
    className: "SloUsageMetric",
    modelProperties: {
      serviceLevelObjective: {
        readOnly: true,
        serializedName: "serviceLevelObjective",
        type: {
          name: "String"
        }
      },
      serviceLevelObjectiveId: {
        nullable: false,
        readOnly: true,
        serializedName: "serviceLevelObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      inRangeTimeRatio: {
        nullable: false,
        readOnly: true,
        serializedName: "inRangeTimeRatio",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServiceTierAdvisor: msRest.CompositeMapper = {
  serializedName: "ServiceTierAdvisor",
  type: {
    name: "Composite",
    className: "ServiceTierAdvisor",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      observationPeriodStart: {
        readOnly: true,
        serializedName: "properties.observationPeriodStart",
        type: {
          name: "DateTime"
        }
      },
      observationPeriodEnd: {
        readOnly: true,
        serializedName: "properties.observationPeriodEnd",
        type: {
          name: "DateTime"
        }
      },
      activeTimeRatio: {
        readOnly: true,
        serializedName: "properties.activeTimeRatio",
        type: {
          name: "Number"
        }
      },
      minDtu: {
        readOnly: true,
        serializedName: "properties.minDtu",
        type: {
          name: "Number"
        }
      },
      avgDtu: {
        readOnly: true,
        serializedName: "properties.avgDtu",
        type: {
          name: "Number"
        }
      },
      maxDtu: {
        readOnly: true,
        serializedName: "properties.maxDtu",
        type: {
          name: "Number"
        }
      },
      maxSizeInGB: {
        readOnly: true,
        serializedName: "properties.maxSizeInGB",
        type: {
          name: "Number"
        }
      },
      serviceLevelObjectiveUsageMetrics: {
        readOnly: true,
        serializedName: "properties.serviceLevelObjectiveUsageMetrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SloUsageMetric"
            }
          }
        }
      },
      currentServiceLevelObjective: {
        readOnly: true,
        serializedName: "properties.currentServiceLevelObjective",
        type: {
          name: "String"
        }
      },
      currentServiceLevelObjectiveId: {
        readOnly: true,
        serializedName: "properties.currentServiceLevelObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      usageBasedRecommendationServiceLevelObjective: {
        readOnly: true,
        serializedName: "properties.usageBasedRecommendationServiceLevelObjective",
        type: {
          name: "String"
        }
      },
      usageBasedRecommendationServiceLevelObjectiveId: {
        readOnly: true,
        serializedName: "properties.usageBasedRecommendationServiceLevelObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      databaseSizeBasedRecommendationServiceLevelObjective: {
        readOnly: true,
        serializedName: "properties.databaseSizeBasedRecommendationServiceLevelObjective",
        type: {
          name: "String"
        }
      },
      databaseSizeBasedRecommendationServiceLevelObjectiveId: {
        readOnly: true,
        serializedName: "properties.databaseSizeBasedRecommendationServiceLevelObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      disasterPlanBasedRecommendationServiceLevelObjective: {
        readOnly: true,
        serializedName: "properties.disasterPlanBasedRecommendationServiceLevelObjective",
        type: {
          name: "String"
        }
      },
      disasterPlanBasedRecommendationServiceLevelObjectiveId: {
        readOnly: true,
        serializedName: "properties.disasterPlanBasedRecommendationServiceLevelObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      overallRecommendationServiceLevelObjective: {
        readOnly: true,
        serializedName: "properties.overallRecommendationServiceLevelObjective",
        type: {
          name: "String"
        }
      },
      overallRecommendationServiceLevelObjectiveId: {
        readOnly: true,
        serializedName: "properties.overallRecommendationServiceLevelObjectiveId",
        type: {
          name: "Uuid"
        }
      },
      confidence: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.confidence",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TransparentDataEncryptionActivity: msRest.CompositeMapper = {
  serializedName: "TransparentDataEncryptionActivity",
  type: {
    name: "Composite",
    className: "TransparentDataEncryptionActivity",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServerUsage: msRest.CompositeMapper = {
  serializedName: "ServerUsage",
  type: {
    name: "Composite",
    className: "ServerUsage",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      resourceName: {
        readOnly: true,
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        readOnly: true,
        serializedName: "nextResetTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DatabaseUsage: msRest.CompositeMapper = {
  serializedName: "DatabaseUsage",
  type: {
    name: "Composite",
    className: "DatabaseUsage",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      resourceName: {
        readOnly: true,
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        readOnly: true,
        serializedName: "nextResetTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AutomaticTuningOptions: msRest.CompositeMapper = {
  serializedName: "AutomaticTuningOptions",
  type: {
    name: "Composite",
    className: "AutomaticTuningOptions",
    modelProperties: {
      desiredState: {
        serializedName: "desiredState",
        type: {
          name: "Enum",
          allowedValues: [
            "Off",
            "On",
            "Default"
          ]
        }
      },
      actualState: {
        readOnly: true,
        serializedName: "actualState",
        type: {
          name: "Enum",
          allowedValues: [
            "Off",
            "On"
          ]
        }
      },
      reasonCode: {
        readOnly: true,
        serializedName: "reasonCode",
        type: {
          name: "Number"
        }
      },
      reasonDesc: {
        readOnly: true,
        serializedName: "reasonDesc",
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "Disabled",
            "AutoConfigured",
            "InheritedFromServer",
            "QueryStoreOff",
            "QueryStoreReadOnly",
            "NotSupported"
          ]
        }
      }
    }
  }
};

export const DatabaseAutomaticTuning: msRest.CompositeMapper = {
  serializedName: "DatabaseAutomaticTuning",
  type: {
    name: "Composite",
    className: "DatabaseAutomaticTuning",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      desiredState: {
        serializedName: "properties.desiredState",
        type: {
          name: "Enum",
          allowedValues: [
            "Inherit",
            "Custom",
            "Auto",
            "Unspecified"
          ]
        }
      },
      actualState: {
        readOnly: true,
        serializedName: "properties.actualState",
        type: {
          name: "Enum",
          allowedValues: [
            "Inherit",
            "Custom",
            "Auto",
            "Unspecified"
          ]
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "AutomaticTuningOptions"
            }
          }
        }
      }
    }
  }
};

export const EncryptionProtector: msRest.CompositeMapper = {
  serializedName: "EncryptionProtector",
  type: {
    name: "Composite",
    className: "EncryptionProtector",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      subregion: {
        readOnly: true,
        serializedName: "properties.subregion",
        type: {
          name: "String"
        }
      },
      serverKeyName: {
        serializedName: "properties.serverKeyName",
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        required: true,
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        readOnly: true,
        serializedName: "properties.uri",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        readOnly: true,
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverGroupReadWriteEndpoint: msRest.CompositeMapper = {
  serializedName: "FailoverGroupReadWriteEndpoint",
  type: {
    name: "Composite",
    className: "FailoverGroupReadWriteEndpoint",
    modelProperties: {
      failoverPolicy: {
        required: true,
        serializedName: "failoverPolicy",
        type: {
          name: "String"
        }
      },
      failoverWithDataLossGracePeriodMinutes: {
        serializedName: "failoverWithDataLossGracePeriodMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FailoverGroupReadOnlyEndpoint: msRest.CompositeMapper = {
  serializedName: "FailoverGroupReadOnlyEndpoint",
  type: {
    name: "Composite",
    className: "FailoverGroupReadOnlyEndpoint",
    modelProperties: {
      failoverPolicy: {
        serializedName: "failoverPolicy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartnerInfo: msRest.CompositeMapper = {
  serializedName: "PartnerInfo",
  type: {
    name: "Composite",
    className: "PartnerInfo",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      replicationRole: {
        readOnly: true,
        serializedName: "replicationRole",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverGroup: msRest.CompositeMapper = {
  serializedName: "FailoverGroup",
  type: {
    name: "Composite",
    className: "FailoverGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      readWriteEndpoint: {
        required: true,
        serializedName: "properties.readWriteEndpoint",
        type: {
          name: "Composite",
          className: "FailoverGroupReadWriteEndpoint"
        }
      },
      readOnlyEndpoint: {
        serializedName: "properties.readOnlyEndpoint",
        type: {
          name: "Composite",
          className: "FailoverGroupReadOnlyEndpoint"
        }
      },
      replicationRole: {
        readOnly: true,
        serializedName: "properties.replicationRole",
        type: {
          name: "String"
        }
      },
      replicationState: {
        readOnly: true,
        serializedName: "properties.replicationState",
        type: {
          name: "String"
        }
      },
      partnerServers: {
        required: true,
        serializedName: "properties.partnerServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartnerInfo"
            }
          }
        }
      },
      databases: {
        serializedName: "properties.databases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const FailoverGroupUpdate: msRest.CompositeMapper = {
  serializedName: "FailoverGroupUpdate",
  type: {
    name: "Composite",
    className: "FailoverGroupUpdate",
    modelProperties: {
      readWriteEndpoint: {
        serializedName: "properties.readWriteEndpoint",
        type: {
          name: "Composite",
          className: "FailoverGroupReadWriteEndpoint"
        }
      },
      readOnlyEndpoint: {
        serializedName: "properties.readOnlyEndpoint",
        type: {
          name: "Composite",
          className: "FailoverGroupReadOnlyEndpoint"
        }
      },
      databases: {
        serializedName: "properties.databases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        readOnly: true,
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        readOnly: true,
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        readOnly: true,
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        readOnly: true,
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const ServerKey: msRest.CompositeMapper = {
  serializedName: "ServerKey",
  type: {
    name: "Composite",
    className: "ServerKey",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      subregion: {
        readOnly: true,
        serializedName: "properties.subregion",
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        required: true,
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ResourceIdentity: msRest.CompositeMapper = {
  serializedName: "ResourceIdentity",
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "Uuid"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const Server: msRest.CompositeMapper = {
  serializedName: "Server",
  type: {
    name: "Composite",
    className: "Server",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        readOnly: true,
        serializedName: "properties.fullyQualifiedDomainName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerUpdate: msRest.CompositeMapper = {
  serializedName: "ServerUpdate",
  type: {
    name: "Composite",
    className: "ServerUpdate",
    modelProperties: {
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        readOnly: true,
        serializedName: "properties.fullyQualifiedDomainName",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SyncAgent: msRest.CompositeMapper = {
  serializedName: "SyncAgent",
  type: {
    name: "Composite",
    className: "SyncAgent",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      syncAgentName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      syncDatabaseId: {
        serializedName: "properties.syncDatabaseId",
        type: {
          name: "String"
        }
      },
      lastAliveTime: {
        readOnly: true,
        serializedName: "properties.lastAliveTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      isUpToDate: {
        readOnly: true,
        serializedName: "properties.isUpToDate",
        type: {
          name: "Boolean"
        }
      },
      expiryTime: {
        readOnly: true,
        serializedName: "properties.expiryTime",
        type: {
          name: "DateTime"
        }
      },
      version: {
        readOnly: true,
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncAgentKeyProperties: msRest.CompositeMapper = {
  serializedName: "SyncAgentKeyProperties",
  type: {
    name: "Composite",
    className: "SyncAgentKeyProperties",
    modelProperties: {
      syncAgentKey: {
        readOnly: true,
        serializedName: "syncAgentKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncAgentLinkedDatabase: msRest.CompositeMapper = {
  serializedName: "SyncAgentLinkedDatabase",
  type: {
    name: "Composite",
    className: "SyncAgentLinkedDatabase",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      databaseType: {
        readOnly: true,
        serializedName: "properties.databaseType",
        type: {
          name: "String"
        }
      },
      databaseId: {
        readOnly: true,
        serializedName: "properties.databaseId",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      serverName: {
        readOnly: true,
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      userName: {
        readOnly: true,
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncDatabaseIdProperties: msRest.CompositeMapper = {
  serializedName: "SyncDatabaseIdProperties",
  type: {
    name: "Composite",
    className: "SyncDatabaseIdProperties",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncFullSchemaTableColumn: msRest.CompositeMapper = {
  serializedName: "SyncFullSchemaTableColumn",
  type: {
    name: "Composite",
    className: "SyncFullSchemaTableColumn",
    modelProperties: {
      dataSize: {
        readOnly: true,
        serializedName: "dataSize",
        type: {
          name: "String"
        }
      },
      dataType: {
        readOnly: true,
        serializedName: "dataType",
        type: {
          name: "String"
        }
      },
      errorId: {
        readOnly: true,
        serializedName: "errorId",
        type: {
          name: "String"
        }
      },
      hasError: {
        readOnly: true,
        serializedName: "hasError",
        type: {
          name: "Boolean"
        }
      },
      isPrimaryKey: {
        readOnly: true,
        serializedName: "isPrimaryKey",
        type: {
          name: "Boolean"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      quotedName: {
        readOnly: true,
        serializedName: "quotedName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncFullSchemaTable: msRest.CompositeMapper = {
  serializedName: "SyncFullSchemaTable",
  type: {
    name: "Composite",
    className: "SyncFullSchemaTable",
    modelProperties: {
      columns: {
        readOnly: true,
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncFullSchemaTableColumn"
            }
          }
        }
      },
      errorId: {
        readOnly: true,
        serializedName: "errorId",
        type: {
          name: "String"
        }
      },
      hasError: {
        readOnly: true,
        serializedName: "hasError",
        type: {
          name: "Boolean"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      quotedName: {
        readOnly: true,
        serializedName: "quotedName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncFullSchemaProperties: msRest.CompositeMapper = {
  serializedName: "SyncFullSchemaProperties",
  type: {
    name: "Composite",
    className: "SyncFullSchemaProperties",
    modelProperties: {
      tables: {
        readOnly: true,
        serializedName: "tables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncFullSchemaTable"
            }
          }
        }
      },
      lastUpdateTime: {
        readOnly: true,
        serializedName: "lastUpdateTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SyncGroupLogProperties: msRest.CompositeMapper = {
  serializedName: "SyncGroupLogProperties",
  type: {
    name: "Composite",
    className: "SyncGroupLogProperties",
    modelProperties: {
      timestamp: {
        readOnly: true,
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      source: {
        readOnly: true,
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      details: {
        readOnly: true,
        serializedName: "details",
        type: {
          name: "String"
        }
      },
      tracingId: {
        readOnly: true,
        serializedName: "tracingId",
        type: {
          name: "Uuid"
        }
      },
      operationStatus: {
        readOnly: true,
        serializedName: "operationStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupSchemaTableColumn: msRest.CompositeMapper = {
  serializedName: "SyncGroupSchemaTableColumn",
  type: {
    name: "Composite",
    className: "SyncGroupSchemaTableColumn",
    modelProperties: {
      quotedName: {
        serializedName: "quotedName",
        type: {
          name: "String"
        }
      },
      dataSize: {
        serializedName: "dataSize",
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupSchemaTable: msRest.CompositeMapper = {
  serializedName: "SyncGroupSchemaTable",
  type: {
    name: "Composite",
    className: "SyncGroupSchemaTable",
    modelProperties: {
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncGroupSchemaTableColumn"
            }
          }
        }
      },
      quotedName: {
        serializedName: "quotedName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupSchema: msRest.CompositeMapper = {
  serializedName: "SyncGroupSchema",
  type: {
    name: "Composite",
    className: "SyncGroupSchema",
    modelProperties: {
      tables: {
        serializedName: "tables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncGroupSchemaTable"
            }
          }
        }
      },
      masterSyncMemberName: {
        serializedName: "masterSyncMemberName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroup: msRest.CompositeMapper = {
  serializedName: "SyncGroup",
  type: {
    name: "Composite",
    className: "SyncGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      interval: {
        serializedName: "properties.interval",
        type: {
          name: "Number"
        }
      },
      lastSyncTime: {
        readOnly: true,
        serializedName: "properties.lastSyncTime",
        type: {
          name: "DateTime"
        }
      },
      conflictResolutionPolicy: {
        serializedName: "properties.conflictResolutionPolicy",
        type: {
          name: "String"
        }
      },
      syncDatabaseId: {
        serializedName: "properties.syncDatabaseId",
        type: {
          name: "String"
        }
      },
      hubDatabaseUserName: {
        serializedName: "properties.hubDatabaseUserName",
        type: {
          name: "String"
        }
      },
      hubDatabasePassword: {
        serializedName: "properties.hubDatabasePassword",
        type: {
          name: "String"
        }
      },
      syncState: {
        readOnly: true,
        serializedName: "properties.syncState",
        type: {
          name: "String"
        }
      },
      schema: {
        serializedName: "properties.schema",
        type: {
          name: "Composite",
          className: "SyncGroupSchema"
        }
      }
    }
  }
};

export const SyncMember: msRest.CompositeMapper = {
  serializedName: "SyncMember",
  type: {
    name: "Composite",
    className: "SyncMember",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      databaseType: {
        serializedName: "properties.databaseType",
        type: {
          name: "String"
        }
      },
      syncAgentId: {
        serializedName: "properties.syncAgentId",
        type: {
          name: "String"
        }
      },
      sqlServerDatabaseId: {
        serializedName: "properties.sqlServerDatabaseId",
        type: {
          name: "Uuid"
        }
      },
      serverName: {
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      syncDirection: {
        serializedName: "properties.syncDirection",
        type: {
          name: "String"
        }
      },
      syncState: {
        readOnly: true,
        serializedName: "properties.syncState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionUsage: msRest.CompositeMapper = {
  serializedName: "SubscriptionUsage",
  type: {
    name: "Composite",
    className: "SubscriptionUsage",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      displayName: {
        readOnly: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "properties.currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "properties.limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "properties.unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualCluster: msRest.CompositeMapper = {
  serializedName: "VirtualCluster",
  type: {
    name: "Composite",
    className: "VirtualCluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      subnetId: {
        readOnly: true,
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "properties.family",
        type: {
          name: "String"
        }
      },
      childResources: {
        readOnly: true,
        serializedName: "properties.childResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VirtualClusterUpdate: msRest.CompositeMapper = {
  serializedName: "VirtualClusterUpdate",
  type: {
    name: "Composite",
    className: "VirtualClusterUpdate",
    modelProperties: {
      subnetId: {
        readOnly: true,
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "properties.family",
        type: {
          name: "String"
        }
      },
      childResources: {
        readOnly: true,
        serializedName: "properties.childResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VirtualNetworkRule: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRule",
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      virtualNetworkSubnetId: {
        required: true,
        serializedName: "properties.virtualNetworkSubnetId",
        type: {
          name: "String"
        }
      },
      ignoreMissingVnetServiceEndpoint: {
        serializedName: "properties.ignoreMissingVnetServiceEndpoint",
        type: {
          name: "Boolean"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedDatabaseBlobAuditingPolicy: msRest.CompositeMapper = {
  serializedName: "ExtendedDatabaseBlobAuditingPolicy",
  type: {
    name: "Composite",
    className: "ExtendedDatabaseBlobAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      predicateExpression: {
        serializedName: "properties.predicateExpression",
        type: {
          name: "String"
        }
      },
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ExtendedServerBlobAuditingPolicy: msRest.CompositeMapper = {
  serializedName: "ExtendedServerBlobAuditingPolicy",
  type: {
    name: "Composite",
    className: "ExtendedServerBlobAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      predicateExpression: {
        serializedName: "properties.predicateExpression",
        type: {
          name: "String"
        }
      },
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ServerBlobAuditingPolicy: msRest.CompositeMapper = {
  serializedName: "ServerBlobAuditingPolicy",
  type: {
    name: "Composite",
    className: "ServerBlobAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DatabaseBlobAuditingPolicy: msRest.CompositeMapper = {
  serializedName: "DatabaseBlobAuditingPolicy",
  type: {
    name: "Composite",
    className: "DatabaseBlobAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessmentRuleBaselineItem: msRest.CompositeMapper = {
  serializedName: "DatabaseVulnerabilityAssessmentRuleBaselineItem",
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessmentRuleBaselineItem",
    modelProperties: {
      result: {
        required: true,
        serializedName: "result",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessmentRuleBaseline: msRest.CompositeMapper = {
  serializedName: "DatabaseVulnerabilityAssessmentRuleBaseline",
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessmentRuleBaseline",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      baselineResults: {
        required: true,
        serializedName: "properties.baselineResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseVulnerabilityAssessmentRuleBaselineItem"
            }
          }
        }
      }
    }
  }
};

export const VulnerabilityAssessmentRecurringScansProperties: msRest.CompositeMapper = {
  serializedName: "VulnerabilityAssessmentRecurringScansProperties",
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentRecurringScansProperties",
    modelProperties: {
      isEnabled: {
        serializedName: "isEnabled",
        type: {
          name: "Boolean"
        }
      },
      emailSubscriptionAdmins: {
        serializedName: "emailSubscriptionAdmins",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      emails: {
        serializedName: "emails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessment: msRest.CompositeMapper = {
  serializedName: "DatabaseVulnerabilityAssessment",
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      storageContainerPath: {
        serializedName: "properties.storageContainerPath",
        type: {
          name: "String"
        }
      },
      storageContainerSasKey: {
        serializedName: "properties.storageContainerSasKey",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      recurringScans: {
        serializedName: "properties.recurringScans",
        type: {
          name: "Composite",
          className: "VulnerabilityAssessmentRecurringScansProperties"
        }
      }
    }
  }
};

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobAgent: msRest.CompositeMapper = {
  serializedName: "JobAgent",
  type: {
    name: "Composite",
    className: "JobAgent",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      databaseId: {
        required: true,
        serializedName: "properties.databaseId",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobAgentUpdate: msRest.CompositeMapper = {
  serializedName: "JobAgentUpdate",
  type: {
    name: "Composite",
    className: "JobAgentUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const JobCredential: msRest.CompositeMapper = {
  serializedName: "JobCredential",
  type: {
    name: "Composite",
    className: "JobCredential",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      username: {
        required: true,
        serializedName: "properties.username",
        type: {
          name: "String"
        }
      },
      password: {
        required: true,
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobExecutionTarget: msRest.CompositeMapper = {
  serializedName: "JobExecutionTarget",
  type: {
    name: "Composite",
    className: "JobExecutionTarget",
    modelProperties: {
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      serverName: {
        readOnly: true,
        serializedName: "serverName",
        type: {
          name: "String"
        }
      },
      databaseName: {
        readOnly: true,
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobExecution: msRest.CompositeMapper = {
  serializedName: "JobExecution",
  type: {
    name: "Composite",
    className: "JobExecution",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      jobVersion: {
        readOnly: true,
        serializedName: "properties.jobVersion",
        type: {
          name: "Number"
        }
      },
      stepName: {
        readOnly: true,
        serializedName: "properties.stepName",
        type: {
          name: "String"
        }
      },
      stepId: {
        readOnly: true,
        serializedName: "properties.stepId",
        type: {
          name: "Number"
        }
      },
      jobExecutionId: {
        readOnly: true,
        serializedName: "properties.jobExecutionId",
        type: {
          name: "Uuid"
        }
      },
      lifecycle: {
        readOnly: true,
        serializedName: "properties.lifecycle",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      createTime: {
        readOnly: true,
        serializedName: "properties.createTime",
        type: {
          name: "DateTime"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      currentAttempts: {
        serializedName: "properties.currentAttempts",
        type: {
          name: "Number"
        }
      },
      currentAttemptStartTime: {
        readOnly: true,
        serializedName: "properties.currentAttemptStartTime",
        type: {
          name: "DateTime"
        }
      },
      lastMessage: {
        readOnly: true,
        serializedName: "properties.lastMessage",
        type: {
          name: "String"
        }
      },
      target: {
        readOnly: true,
        serializedName: "properties.target",
        type: {
          name: "Composite",
          className: "JobExecutionTarget"
        }
      }
    }
  }
};

export const JobSchedule: msRest.CompositeMapper = {
  serializedName: "JobSchedule",
  type: {
    name: "Composite",
    className: "JobSchedule",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        defaultValue: new Date('0001-01-01T00:00:00Z'),
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        defaultValue: new Date('9999-12-31T11:59:59Z'),
        type: {
          name: "DateTime"
        }
      },
      type: {
        serializedName: "type",
        defaultValue: 'Once',
        type: {
          name: "Enum",
          allowedValues: [
            "Once",
            "Recurring"
          ]
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      interval: {
        serializedName: "interval",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Job: msRest.CompositeMapper = {
  serializedName: "Job",
  type: {
    name: "Composite",
    className: "Job",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        defaultValue: '',
        type: {
          name: "String"
        }
      },
      version: {
        readOnly: true,
        serializedName: "properties.version",
        type: {
          name: "Number"
        }
      },
      schedule: {
        serializedName: "properties.schedule",
        type: {
          name: "Composite",
          className: "JobSchedule"
        }
      }
    }
  }
};

export const JobStepAction: msRest.CompositeMapper = {
  serializedName: "JobStepAction",
  type: {
    name: "Composite",
    className: "JobStepAction",
    modelProperties: {
      type: {
        serializedName: "type",
        defaultValue: 'TSql',
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        defaultValue: 'Inline',
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobStepOutput: msRest.CompositeMapper = {
  serializedName: "JobStepOutput",
  type: {
    name: "Composite",
    className: "JobStepOutput",
    modelProperties: {
      type: {
        serializedName: "type",
        defaultValue: 'SqlDatabase',
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "Uuid"
        }
      },
      resourceGroupName: {
        serializedName: "resourceGroupName",
        type: {
          name: "String"
        }
      },
      serverName: {
        required: true,
        serializedName: "serverName",
        type: {
          name: "String"
        }
      },
      databaseName: {
        required: true,
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      },
      schemaName: {
        serializedName: "schemaName",
        defaultValue: 'dbo',
        type: {
          name: "String"
        }
      },
      tableName: {
        required: true,
        serializedName: "tableName",
        type: {
          name: "String"
        }
      },
      credential: {
        required: true,
        serializedName: "credential",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobStepExecutionOptions: msRest.CompositeMapper = {
  serializedName: "JobStepExecutionOptions",
  type: {
    name: "Composite",
    className: "JobStepExecutionOptions",
    modelProperties: {
      timeoutSeconds: {
        serializedName: "timeoutSeconds",
        defaultValue: 43200,
        type: {
          name: "Number"
        }
      },
      retryAttempts: {
        serializedName: "retryAttempts",
        defaultValue: 10,
        type: {
          name: "Number"
        }
      },
      initialRetryIntervalSeconds: {
        serializedName: "initialRetryIntervalSeconds",
        defaultValue: 1,
        type: {
          name: "Number"
        }
      },
      maximumRetryIntervalSeconds: {
        serializedName: "maximumRetryIntervalSeconds",
        defaultValue: 120,
        type: {
          name: "Number"
        }
      },
      retryIntervalBackoffMultiplier: {
        serializedName: "retryIntervalBackoffMultiplier",
        defaultValue: 2,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobStep: msRest.CompositeMapper = {
  serializedName: "JobStep",
  type: {
    name: "Composite",
    className: "JobStep",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      stepId: {
        serializedName: "properties.stepId",
        type: {
          name: "Number"
        }
      },
      targetGroup: {
        required: true,
        serializedName: "properties.targetGroup",
        type: {
          name: "String"
        }
      },
      credential: {
        required: true,
        serializedName: "properties.credential",
        type: {
          name: "String"
        }
      },
      action: {
        required: true,
        serializedName: "properties.action",
        type: {
          name: "Composite",
          className: "JobStepAction"
        }
      },
      output: {
        serializedName: "properties.output",
        type: {
          name: "Composite",
          className: "JobStepOutput"
        }
      },
      executionOptions: {
        serializedName: "properties.executionOptions",
        type: {
          name: "Composite",
          className: "JobStepExecutionOptions"
        }
      }
    }
  }
};

export const JobTarget: msRest.CompositeMapper = {
  serializedName: "JobTarget",
  type: {
    name: "Composite",
    className: "JobTarget",
    modelProperties: {
      membershipType: {
        serializedName: "membershipType",
        defaultValue: 'Include',
        type: {
          name: "Enum",
          allowedValues: [
            "Include",
            "Exclude"
          ]
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      serverName: {
        serializedName: "serverName",
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "databaseName",
        type: {
          name: "String"
        }
      },
      elasticPoolName: {
        serializedName: "elasticPoolName",
        type: {
          name: "String"
        }
      },
      shardMapName: {
        serializedName: "shardMapName",
        type: {
          name: "String"
        }
      },
      refreshCredential: {
        serializedName: "refreshCredential",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobTargetGroup: msRest.CompositeMapper = {
  serializedName: "JobTargetGroup",
  type: {
    name: "Composite",
    className: "JobTargetGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      members: {
        required: true,
        serializedName: "properties.members",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobTarget"
            }
          }
        }
      }
    }
  }
};

export const JobVersion: msRest.CompositeMapper = {
  serializedName: "JobVersion",
  type: {
    name: "Composite",
    className: "JobVersion",
    modelProperties: {
      ...ProxyResource.type.modelProperties
    }
  }
};

export const LongTermRetentionBackup: msRest.CompositeMapper = {
  serializedName: "LongTermRetentionBackup",
  type: {
    name: "Composite",
    className: "LongTermRetentionBackup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      serverName: {
        readOnly: true,
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      serverCreateTime: {
        readOnly: true,
        serializedName: "properties.serverCreateTime",
        type: {
          name: "DateTime"
        }
      },
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      databaseDeletionTime: {
        readOnly: true,
        serializedName: "properties.databaseDeletionTime",
        type: {
          name: "DateTime"
        }
      },
      backupTime: {
        readOnly: true,
        serializedName: "properties.backupTime",
        type: {
          name: "DateTime"
        }
      },
      backupExpirationTime: {
        readOnly: true,
        serializedName: "properties.backupExpirationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const BackupLongTermRetentionPolicy: msRest.CompositeMapper = {
  serializedName: "BackupLongTermRetentionPolicy",
  type: {
    name: "Composite",
    className: "BackupLongTermRetentionPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      weeklyRetention: {
        serializedName: "properties.weeklyRetention",
        type: {
          name: "String"
        }
      },
      monthlyRetention: {
        serializedName: "properties.monthlyRetention",
        type: {
          name: "String"
        }
      },
      yearlyRetention: {
        serializedName: "properties.yearlyRetention",
        type: {
          name: "String"
        }
      },
      weekOfYear: {
        serializedName: "properties.weekOfYear",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedBackupShortTermRetentionPolicy: msRest.CompositeMapper = {
  serializedName: "ManagedBackupShortTermRetentionPolicy",
  type: {
    name: "Composite",
    className: "ManagedBackupShortTermRetentionPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AutomaticTuningServerOptions: msRest.CompositeMapper = {
  serializedName: "AutomaticTuningServerOptions",
  type: {
    name: "Composite",
    className: "AutomaticTuningServerOptions",
    modelProperties: {
      desiredState: {
        serializedName: "desiredState",
        type: {
          name: "Enum",
          allowedValues: [
            "Off",
            "On",
            "Default"
          ]
        }
      },
      actualState: {
        readOnly: true,
        serializedName: "actualState",
        type: {
          name: "Enum",
          allowedValues: [
            "Off",
            "On"
          ]
        }
      },
      reasonCode: {
        readOnly: true,
        serializedName: "reasonCode",
        type: {
          name: "Number"
        }
      },
      reasonDesc: {
        readOnly: true,
        serializedName: "reasonDesc",
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "Disabled",
            "AutoConfigured"
          ]
        }
      }
    }
  }
};

export const ServerAutomaticTuning: msRest.CompositeMapper = {
  serializedName: "ServerAutomaticTuning",
  type: {
    name: "Composite",
    className: "ServerAutomaticTuning",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      desiredState: {
        serializedName: "properties.desiredState",
        type: {
          name: "Enum",
          allowedValues: [
            "Custom",
            "Auto",
            "Unspecified"
          ]
        }
      },
      actualState: {
        readOnly: true,
        serializedName: "properties.actualState",
        type: {
          name: "Enum",
          allowedValues: [
            "Custom",
            "Auto",
            "Unspecified"
          ]
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "AutomaticTuningServerOptions"
            }
          }
        }
      }
    }
  }
};

export const ServerDnsAlias: msRest.CompositeMapper = {
  serializedName: "ServerDnsAlias",
  type: {
    name: "Composite",
    className: "ServerDnsAlias",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      azureDnsRecord: {
        readOnly: true,
        serializedName: "properties.azureDnsRecord",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerDnsAliasAcquisition: msRest.CompositeMapper = {
  serializedName: "ServerDnsAliasAcquisition",
  type: {
    name: "Composite",
    className: "ServerDnsAliasAcquisition",
    modelProperties: {
      oldServerDnsAliasId: {
        serializedName: "oldServerDnsAliasId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerSecurityAlertPolicy: msRest.CompositeMapper = {
  serializedName: "ServerSecurityAlertPolicy",
  type: {
    name: "Composite",
    className: "ServerSecurityAlertPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "New",
            "Enabled",
            "Disabled"
          ]
        }
      },
      disabledAlerts: {
        serializedName: "properties.disabledAlerts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAddresses: {
        serializedName: "properties.emailAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAccountAdmins: {
        serializedName: "properties.emailAccountAdmins",
        type: {
          name: "Boolean"
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RestorableDroppedManagedDatabase: msRest.CompositeMapper = {
  serializedName: "RestorableDroppedManagedDatabase",
  type: {
    name: "Composite",
    className: "RestorableDroppedManagedDatabase",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      deletionDate: {
        readOnly: true,
        serializedName: "properties.deletionDate",
        type: {
          name: "DateTime"
        }
      },
      earliestRestoreDate: {
        readOnly: true,
        serializedName: "properties.earliestRestoreDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RestorePoint: msRest.CompositeMapper = {
  serializedName: "RestorePoint",
  type: {
    name: "Composite",
    className: "RestorePoint",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      restorePointType: {
        readOnly: true,
        serializedName: "properties.restorePointType",
        type: {
          name: "Enum",
          allowedValues: [
            "CONTINUOUS",
            "DISCRETE"
          ]
        }
      },
      earliestRestoreDate: {
        readOnly: true,
        serializedName: "properties.earliestRestoreDate",
        type: {
          name: "DateTime"
        }
      },
      restorePointCreationDate: {
        readOnly: true,
        serializedName: "properties.restorePointCreationDate",
        type: {
          name: "DateTime"
        }
      },
      restorePointLabel: {
        readOnly: true,
        serializedName: "properties.restorePointLabel",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateDatabaseRestorePointDefinition: msRest.CompositeMapper = {
  serializedName: "CreateDatabaseRestorePointDefinition",
  type: {
    name: "Composite",
    className: "CreateDatabaseRestorePointDefinition",
    modelProperties: {
      restorePointLabel: {
        required: true,
        serializedName: "restorePointLabel",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedDatabaseSecurityAlertPolicy: msRest.CompositeMapper = {
  serializedName: "ManagedDatabaseSecurityAlertPolicy",
  type: {
    name: "Composite",
    className: "ManagedDatabaseSecurityAlertPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "New",
            "Enabled",
            "Disabled"
          ]
        }
      },
      disabledAlerts: {
        serializedName: "properties.disabledAlerts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAddresses: {
        serializedName: "properties.emailAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAccountAdmins: {
        serializedName: "properties.emailAccountAdmins",
        type: {
          name: "Boolean"
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ManagedServerSecurityAlertPolicy: msRest.CompositeMapper = {
  serializedName: "ManagedServerSecurityAlertPolicy",
  type: {
    name: "Composite",
    className: "ManagedServerSecurityAlertPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "New",
            "Enabled",
            "Disabled"
          ]
        }
      },
      disabledAlerts: {
        serializedName: "properties.disabledAlerts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAddresses: {
        serializedName: "properties.emailAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAccountAdmins: {
        serializedName: "properties.emailAccountAdmins",
        type: {
          name: "Boolean"
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SensitivityLabel: msRest.CompositeMapper = {
  serializedName: "SensitivityLabel",
  type: {
    name: "Composite",
    className: "SensitivityLabel",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      labelName: {
        serializedName: "properties.labelName",
        type: {
          name: "String"
        }
      },
      labelId: {
        serializedName: "properties.labelId",
        type: {
          name: "String"
        }
      },
      informationType: {
        serializedName: "properties.informationType",
        type: {
          name: "String"
        }
      },
      informationTypeId: {
        serializedName: "properties.informationTypeId",
        type: {
          name: "String"
        }
      },
      isDisabled: {
        readOnly: true,
        serializedName: "properties.isDisabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ManagedInstanceAdministrator: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceAdministrator",
  type: {
    name: "Composite",
    className: "ManagedInstanceAdministrator",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      administratorType: {
        required: true,
        isConstant: true,
        serializedName: "properties.administratorType",
        defaultValue: 'ActiveDirectory',
        type: {
          name: "String"
        }
      },
      login: {
        required: true,
        serializedName: "properties.login",
        type: {
          name: "String"
        }
      },
      sid: {
        required: true,
        serializedName: "properties.sid",
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const DatabaseOperation: msRest.CompositeMapper = {
  serializedName: "DatabaseOperation",
  type: {
    name: "Composite",
    className: "DatabaseOperation",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "properties.operation",
        type: {
          name: "String"
        }
      },
      operationFriendlyName: {
        readOnly: true,
        serializedName: "properties.operationFriendlyName",
        type: {
          name: "String"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      },
      serverName: {
        readOnly: true,
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      errorCode: {
        readOnly: true,
        serializedName: "properties.errorCode",
        type: {
          name: "Number"
        }
      },
      errorDescription: {
        readOnly: true,
        serializedName: "properties.errorDescription",
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        readOnly: true,
        serializedName: "properties.errorSeverity",
        type: {
          name: "Number"
        }
      },
      isUserError: {
        readOnly: true,
        serializedName: "properties.isUserError",
        type: {
          name: "Boolean"
        }
      },
      estimatedCompletionTime: {
        readOnly: true,
        serializedName: "properties.estimatedCompletionTime",
        type: {
          name: "DateTime"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      isCancellable: {
        readOnly: true,
        serializedName: "properties.isCancellable",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ElasticPoolOperation: msRest.CompositeMapper = {
  serializedName: "ElasticPoolOperation",
  type: {
    name: "Composite",
    className: "ElasticPoolOperation",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      elasticPoolName: {
        readOnly: true,
        serializedName: "properties.elasticPoolName",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "properties.operation",
        type: {
          name: "String"
        }
      },
      operationFriendlyName: {
        readOnly: true,
        serializedName: "properties.operationFriendlyName",
        type: {
          name: "String"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      },
      serverName: {
        readOnly: true,
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      errorCode: {
        readOnly: true,
        serializedName: "properties.errorCode",
        type: {
          name: "Number"
        }
      },
      errorDescription: {
        readOnly: true,
        serializedName: "properties.errorDescription",
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        readOnly: true,
        serializedName: "properties.errorSeverity",
        type: {
          name: "Number"
        }
      },
      isUserError: {
        readOnly: true,
        serializedName: "properties.isUserError",
        type: {
          name: "Boolean"
        }
      },
      estimatedCompletionTime: {
        readOnly: true,
        serializedName: "properties.estimatedCompletionTime",
        type: {
          name: "DateTime"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      isCancellable: {
        readOnly: true,
        serializedName: "properties.isCancellable",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MaxSizeCapability: msRest.CompositeMapper = {
  serializedName: "MaxSizeCapability",
  type: {
    name: "Composite",
    className: "MaxSizeCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogSizeCapability: msRest.CompositeMapper = {
  serializedName: "LogSizeCapability",
  type: {
    name: "Composite",
    className: "LogSizeCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MaxSizeRangeCapability: msRest.CompositeMapper = {
  serializedName: "MaxSizeRangeCapability",
  type: {
    name: "Composite",
    className: "MaxSizeRangeCapability",
    modelProperties: {
      minValue: {
        readOnly: true,
        serializedName: "minValue",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      maxValue: {
        readOnly: true,
        serializedName: "maxValue",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      scaleSize: {
        readOnly: true,
        serializedName: "scaleSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      logSize: {
        readOnly: true,
        serializedName: "logSize",
        type: {
          name: "Composite",
          className: "LogSizeCapability"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PerformanceLevelCapability: msRest.CompositeMapper = {
  serializedName: "PerformanceLevelCapability",
  type: {
    name: "Composite",
    className: "PerformanceLevelCapability",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LicenseTypeCapability: msRest.CompositeMapper = {
  serializedName: "LicenseTypeCapability",
  type: {
    name: "Composite",
    className: "LicenseTypeCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceObjectiveCapability: msRest.CompositeMapper = {
  serializedName: "ServiceObjectiveCapability",
  type: {
    name: "Composite",
    className: "ServiceObjectiveCapability",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedMaxSizes: {
        readOnly: true,
        serializedName: "supportedMaxSizes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaxSizeRangeCapability"
            }
          }
        }
      },
      performanceLevel: {
        readOnly: true,
        serializedName: "performanceLevel",
        type: {
          name: "Composite",
          className: "PerformanceLevelCapability"
        }
      },
      sku: {
        readOnly: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      supportedLicenseTypes: {
        readOnly: true,
        serializedName: "supportedLicenseTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LicenseTypeCapability"
            }
          }
        }
      },
      includedMaxSize: {
        readOnly: true,
        serializedName: "includedMaxSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EditionCapability: msRest.CompositeMapper = {
  serializedName: "EditionCapability",
  type: {
    name: "Composite",
    className: "EditionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedServiceLevelObjectives: {
        readOnly: true,
        serializedName: "supportedServiceLevelObjectives",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceObjectiveCapability"
            }
          }
        }
      },
      zoneRedundant: {
        readOnly: true,
        serializedName: "zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolPerDatabaseMinPerformanceLevelCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolPerDatabaseMinPerformanceLevelCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolPerDatabaseMinPerformanceLevelCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolPerDatabaseMaxPerformanceLevelCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolPerDatabaseMaxPerformanceLevelCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolPerDatabaseMaxPerformanceLevelCapability",
    modelProperties: {
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      supportedPerDatabaseMinPerformanceLevels: {
        readOnly: true,
        serializedName: "supportedPerDatabaseMinPerformanceLevels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolPerDatabaseMinPerformanceLevelCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolPerformanceLevelCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolPerformanceLevelCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolPerformanceLevelCapability",
    modelProperties: {
      performanceLevel: {
        readOnly: true,
        serializedName: "performanceLevel",
        type: {
          name: "Composite",
          className: "PerformanceLevelCapability"
        }
      },
      sku: {
        readOnly: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      supportedLicenseTypes: {
        readOnly: true,
        serializedName: "supportedLicenseTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LicenseTypeCapability"
            }
          }
        }
      },
      maxDatabaseCount: {
        readOnly: true,
        serializedName: "maxDatabaseCount",
        type: {
          name: "Number"
        }
      },
      includedMaxSize: {
        readOnly: true,
        serializedName: "includedMaxSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      supportedMaxSizes: {
        readOnly: true,
        serializedName: "supportedMaxSizes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaxSizeRangeCapability"
            }
          }
        }
      },
      supportedPerDatabaseMaxSizes: {
        readOnly: true,
        serializedName: "supportedPerDatabaseMaxSizes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaxSizeRangeCapability"
            }
          }
        }
      },
      supportedPerDatabaseMaxPerformanceLevels: {
        readOnly: true,
        serializedName: "supportedPerDatabaseMaxPerformanceLevels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolPerDatabaseMaxPerformanceLevelCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolEditionCapability: msRest.CompositeMapper = {
  serializedName: "ElasticPoolEditionCapability",
  type: {
    name: "Composite",
    className: "ElasticPoolEditionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedElasticPoolPerformanceLevels: {
        readOnly: true,
        serializedName: "supportedElasticPoolPerformanceLevels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolPerformanceLevelCapability"
            }
          }
        }
      },
      zoneRedundant: {
        readOnly: true,
        serializedName: "zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerVersionCapability: msRest.CompositeMapper = {
  serializedName: "ServerVersionCapability",
  type: {
    name: "Composite",
    className: "ServerVersionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedEditions: {
        readOnly: true,
        serializedName: "supportedEditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EditionCapability"
            }
          }
        }
      },
      supportedElasticPoolEditions: {
        readOnly: true,
        serializedName: "supportedElasticPoolEditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolEditionCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceVcoresCapability: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceVcoresCapability",
  type: {
    name: "Composite",
    className: "ManagedInstanceVcoresCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Number"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceFamilyCapability: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceFamilyCapability",
  type: {
    name: "Composite",
    className: "ManagedInstanceFamilyCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      sku: {
        readOnly: true,
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      supportedLicenseTypes: {
        readOnly: true,
        serializedName: "supportedLicenseTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LicenseTypeCapability"
            }
          }
        }
      },
      supportedVcoresValues: {
        readOnly: true,
        serializedName: "supportedVcoresValues",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceVcoresCapability"
            }
          }
        }
      },
      includedMaxSize: {
        readOnly: true,
        serializedName: "includedMaxSize",
        type: {
          name: "Composite",
          className: "MaxSizeCapability"
        }
      },
      supportedStorageSizes: {
        readOnly: true,
        serializedName: "supportedStorageSizes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaxSizeRangeCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceEditionCapability: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceEditionCapability",
  type: {
    name: "Composite",
    className: "ManagedInstanceEditionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedFamilies: {
        readOnly: true,
        serializedName: "supportedFamilies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceFamilyCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceVersionCapability: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceVersionCapability",
  type: {
    name: "Composite",
    className: "ManagedInstanceVersionCapability",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedEditions: {
        readOnly: true,
        serializedName: "supportedEditions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceEditionCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocationCapabilities: msRest.CompositeMapper = {
  serializedName: "LocationCapabilities",
  type: {
    name: "Composite",
    className: "LocationCapabilities",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      supportedServerVersions: {
        readOnly: true,
        serializedName: "supportedServerVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerVersionCapability"
            }
          }
        }
      },
      supportedManagedInstanceVersions: {
        readOnly: true,
        serializedName: "supportedManagedInstanceVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceVersionCapability"
            }
          }
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Visible",
            "Available",
            "Default",
            "Disabled"
          ]
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Database: msRest.CompositeMapper = {
  serializedName: "Database",
  type: {
    name: "Composite",
    className: "Database",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      managedBy: {
        readOnly: true,
        serializedName: "managedBy",
        type: {
          name: "String"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      sampleName: {
        serializedName: "properties.sampleName",
        type: {
          name: "String"
        }
      },
      elasticPoolId: {
        serializedName: "properties.elasticPoolId",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      databaseId: {
        readOnly: true,
        serializedName: "properties.databaseId",
        type: {
          name: "Uuid"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      currentServiceObjectiveName: {
        readOnly: true,
        serializedName: "properties.currentServiceObjectiveName",
        type: {
          name: "String"
        }
      },
      requestedServiceObjectiveName: {
        readOnly: true,
        serializedName: "properties.requestedServiceObjectiveName",
        type: {
          name: "String"
        }
      },
      defaultSecondaryLocation: {
        readOnly: true,
        serializedName: "properties.defaultSecondaryLocation",
        type: {
          name: "String"
        }
      },
      failoverGroupId: {
        readOnly: true,
        serializedName: "properties.failoverGroupId",
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      sourceDatabaseDeletionDate: {
        serializedName: "properties.sourceDatabaseDeletionDate",
        type: {
          name: "DateTime"
        }
      },
      recoveryServicesRecoveryPointId: {
        serializedName: "properties.recoveryServicesRecoveryPointId",
        type: {
          name: "String"
        }
      },
      longTermRetentionBackupResourceId: {
        serializedName: "properties.longTermRetentionBackupResourceId",
        type: {
          name: "String"
        }
      },
      recoverableDatabaseId: {
        serializedName: "properties.recoverableDatabaseId",
        type: {
          name: "String"
        }
      },
      restorableDroppedDatabaseId: {
        serializedName: "properties.restorableDroppedDatabaseId",
        type: {
          name: "String"
        }
      },
      catalogCollation: {
        serializedName: "properties.catalogCollation",
        type: {
          name: "String"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      maxLogSizeBytes: {
        readOnly: true,
        serializedName: "properties.maxLogSizeBytes",
        type: {
          name: "Number"
        }
      },
      earliestRestoreDate: {
        readOnly: true,
        serializedName: "properties.earliestRestoreDate",
        type: {
          name: "DateTime"
        }
      },
      readScale: {
        serializedName: "properties.readScale",
        type: {
          name: "String"
        }
      },
      readReplicaCount: {
        serializedName: "properties.readReplicaCount",
        type: {
          name: "Number"
        }
      },
      currentSku: {
        readOnly: true,
        serializedName: "properties.currentSku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      autoPauseDelay: {
        serializedName: "properties.autoPauseDelay",
        type: {
          name: "Number"
        }
      },
      minCapacity: {
        serializedName: "properties.minCapacity",
        type: {
          name: "Number"
        }
      },
      pausedDate: {
        readOnly: true,
        serializedName: "properties.pausedDate",
        type: {
          name: "DateTime"
        }
      },
      resumedDate: {
        readOnly: true,
        serializedName: "properties.resumedDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DatabaseUpdate: msRest.CompositeMapper = {
  serializedName: "DatabaseUpdate",
  type: {
    name: "Composite",
    className: "DatabaseUpdate",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      sampleName: {
        serializedName: "properties.sampleName",
        type: {
          name: "String"
        }
      },
      elasticPoolId: {
        serializedName: "properties.elasticPoolId",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      databaseId: {
        readOnly: true,
        serializedName: "properties.databaseId",
        type: {
          name: "Uuid"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      currentServiceObjectiveName: {
        readOnly: true,
        serializedName: "properties.currentServiceObjectiveName",
        type: {
          name: "String"
        }
      },
      requestedServiceObjectiveName: {
        readOnly: true,
        serializedName: "properties.requestedServiceObjectiveName",
        type: {
          name: "String"
        }
      },
      defaultSecondaryLocation: {
        readOnly: true,
        serializedName: "properties.defaultSecondaryLocation",
        type: {
          name: "String"
        }
      },
      failoverGroupId: {
        readOnly: true,
        serializedName: "properties.failoverGroupId",
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      sourceDatabaseDeletionDate: {
        serializedName: "properties.sourceDatabaseDeletionDate",
        type: {
          name: "DateTime"
        }
      },
      recoveryServicesRecoveryPointId: {
        serializedName: "properties.recoveryServicesRecoveryPointId",
        type: {
          name: "String"
        }
      },
      longTermRetentionBackupResourceId: {
        serializedName: "properties.longTermRetentionBackupResourceId",
        type: {
          name: "String"
        }
      },
      recoverableDatabaseId: {
        serializedName: "properties.recoverableDatabaseId",
        type: {
          name: "String"
        }
      },
      restorableDroppedDatabaseId: {
        serializedName: "properties.restorableDroppedDatabaseId",
        type: {
          name: "String"
        }
      },
      catalogCollation: {
        serializedName: "properties.catalogCollation",
        type: {
          name: "String"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      maxLogSizeBytes: {
        readOnly: true,
        serializedName: "properties.maxLogSizeBytes",
        type: {
          name: "Number"
        }
      },
      earliestRestoreDate: {
        readOnly: true,
        serializedName: "properties.earliestRestoreDate",
        type: {
          name: "DateTime"
        }
      },
      readScale: {
        serializedName: "properties.readScale",
        type: {
          name: "String"
        }
      },
      readReplicaCount: {
        serializedName: "properties.readReplicaCount",
        type: {
          name: "Number"
        }
      },
      currentSku: {
        readOnly: true,
        serializedName: "properties.currentSku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      autoPauseDelay: {
        serializedName: "properties.autoPauseDelay",
        type: {
          name: "Number"
        }
      },
      minCapacity: {
        serializedName: "properties.minCapacity",
        type: {
          name: "Number"
        }
      },
      pausedDate: {
        readOnly: true,
        serializedName: "properties.pausedDate",
        type: {
          name: "DateTime"
        }
      },
      resumedDate: {
        readOnly: true,
        serializedName: "properties.resumedDate",
        type: {
          name: "DateTime"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ResourceMoveDefinition: msRest.CompositeMapper = {
  serializedName: "ResourceMoveDefinition",
  type: {
    name: "Composite",
    className: "ResourceMoveDefinition",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolPerDatabaseSettings: msRest.CompositeMapper = {
  serializedName: "ElasticPoolPerDatabaseSettings",
  type: {
    name: "Composite",
    className: "ElasticPoolPerDatabaseSettings",
    modelProperties: {
      minCapacity: {
        serializedName: "minCapacity",
        type: {
          name: "Number"
        }
      },
      maxCapacity: {
        serializedName: "maxCapacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ElasticPool: msRest.CompositeMapper = {
  serializedName: "ElasticPool",
  type: {
    name: "Composite",
    className: "ElasticPool",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      perDatabaseSettings: {
        serializedName: "properties.perDatabaseSettings",
        type: {
          name: "Composite",
          className: "ElasticPoolPerDatabaseSettings"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolUpdate: msRest.CompositeMapper = {
  serializedName: "ElasticPoolUpdate",
  type: {
    name: "Composite",
    className: "ElasticPoolUpdate",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      perDatabaseSettings: {
        serializedName: "properties.perDatabaseSettings",
        type: {
          name: "Composite",
          className: "ElasticPoolPerDatabaseSettings"
        }
      },
      zoneRedundant: {
        serializedName: "properties.zoneRedundant",
        type: {
          name: "Boolean"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanError: msRest.CompositeMapper = {
  serializedName: "VulnerabilityAssessmentScanError",
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanError",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanRecord: msRest.CompositeMapper = {
  serializedName: "VulnerabilityAssessmentScanRecord",
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanRecord",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      scanId: {
        readOnly: true,
        serializedName: "properties.scanId",
        type: {
          name: "String"
        }
      },
      triggerType: {
        readOnly: true,
        serializedName: "properties.triggerType",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      errors: {
        readOnly: true,
        serializedName: "properties.errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VulnerabilityAssessmentScanError"
            }
          }
        }
      },
      storageContainerPath: {
        readOnly: true,
        serializedName: "properties.storageContainerPath",
        type: {
          name: "String"
        }
      },
      numberOfFailedSecurityChecks: {
        readOnly: true,
        serializedName: "properties.numberOfFailedSecurityChecks",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessmentScansExport: msRest.CompositeMapper = {
  serializedName: "DatabaseVulnerabilityAssessmentScansExport",
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessmentScansExport",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      exportedReportLocation: {
        readOnly: true,
        serializedName: "properties.exportedReportLocation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstanceFailoverGroupReadWriteEndpoint: msRest.CompositeMapper = {
  serializedName: "InstanceFailoverGroupReadWriteEndpoint",
  type: {
    name: "Composite",
    className: "InstanceFailoverGroupReadWriteEndpoint",
    modelProperties: {
      failoverPolicy: {
        required: true,
        serializedName: "failoverPolicy",
        type: {
          name: "String"
        }
      },
      failoverWithDataLossGracePeriodMinutes: {
        serializedName: "failoverWithDataLossGracePeriodMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const InstanceFailoverGroupReadOnlyEndpoint: msRest.CompositeMapper = {
  serializedName: "InstanceFailoverGroupReadOnlyEndpoint",
  type: {
    name: "Composite",
    className: "InstanceFailoverGroupReadOnlyEndpoint",
    modelProperties: {
      failoverPolicy: {
        serializedName: "failoverPolicy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PartnerRegionInfo: msRest.CompositeMapper = {
  serializedName: "PartnerRegionInfo",
  type: {
    name: "Composite",
    className: "PartnerRegionInfo",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      replicationRole: {
        readOnly: true,
        serializedName: "replicationRole",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstancePairInfo: msRest.CompositeMapper = {
  serializedName: "ManagedInstancePairInfo",
  type: {
    name: "Composite",
    className: "ManagedInstancePairInfo",
    modelProperties: {
      primaryManagedInstanceId: {
        serializedName: "primaryManagedInstanceId",
        type: {
          name: "String"
        }
      },
      partnerManagedInstanceId: {
        serializedName: "partnerManagedInstanceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstanceFailoverGroup: msRest.CompositeMapper = {
  serializedName: "InstanceFailoverGroup",
  type: {
    name: "Composite",
    className: "InstanceFailoverGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      readWriteEndpoint: {
        required: true,
        serializedName: "properties.readWriteEndpoint",
        type: {
          name: "Composite",
          className: "InstanceFailoverGroupReadWriteEndpoint"
        }
      },
      readOnlyEndpoint: {
        serializedName: "properties.readOnlyEndpoint",
        type: {
          name: "Composite",
          className: "InstanceFailoverGroupReadOnlyEndpoint"
        }
      },
      replicationRole: {
        readOnly: true,
        serializedName: "properties.replicationRole",
        type: {
          name: "String"
        }
      },
      replicationState: {
        readOnly: true,
        serializedName: "properties.replicationState",
        type: {
          name: "String"
        }
      },
      partnerRegions: {
        required: true,
        serializedName: "properties.partnerRegions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PartnerRegionInfo"
            }
          }
        }
      },
      managedInstancePairs: {
        required: true,
        serializedName: "properties.managedInstancePairs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstancePairInfo"
            }
          }
        }
      }
    }
  }
};

export const BackupShortTermRetentionPolicy: msRest.CompositeMapper = {
  serializedName: "BackupShortTermRetentionPolicy",
  type: {
    name: "Composite",
    className: "BackupShortTermRetentionPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TdeCertificate: msRest.CompositeMapper = {
  serializedName: "TdeCertificate",
  type: {
    name: "Composite",
    className: "TdeCertificate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      privateBlob: {
        required: true,
        serializedName: "properties.privateBlob",
        type: {
          name: "String"
        }
      },
      certPassword: {
        serializedName: "properties.certPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceKey: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceKey",
  type: {
    name: "Composite",
    className: "ManagedInstanceKey",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        required: true,
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        readOnly: true,
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ManagedInstanceEncryptionProtector: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceEncryptionProtector",
  type: {
    name: "Composite",
    className: "ManagedInstanceEncryptionProtector",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      serverKeyName: {
        serializedName: "properties.serverKeyName",
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        required: true,
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        readOnly: true,
        serializedName: "properties.uri",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        readOnly: true,
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoverableManagedDatabase: msRest.CompositeMapper = {
  serializedName: "RecoverableManagedDatabase",
  type: {
    name: "Composite",
    className: "RecoverableManagedDatabase",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      lastAvailableBackupDate: {
        readOnly: true,
        serializedName: "properties.lastAvailableBackupDate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceVulnerabilityAssessment: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceVulnerabilityAssessment",
  type: {
    name: "Composite",
    className: "ManagedInstanceVulnerabilityAssessment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      storageContainerPath: {
        required: true,
        serializedName: "properties.storageContainerPath",
        type: {
          name: "String"
        }
      },
      storageContainerSasKey: {
        serializedName: "properties.storageContainerSasKey",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      recurringScans: {
        serializedName: "properties.recurringScans",
        type: {
          name: "Composite",
          className: "VulnerabilityAssessmentRecurringScansProperties"
        }
      }
    }
  }
};

export const ServerVulnerabilityAssessment: msRest.CompositeMapper = {
  serializedName: "ServerVulnerabilityAssessment",
  type: {
    name: "Composite",
    className: "ServerVulnerabilityAssessment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      storageContainerPath: {
        required: true,
        serializedName: "properties.storageContainerPath",
        type: {
          name: "String"
        }
      },
      storageContainerSasKey: {
        serializedName: "properties.storageContainerSasKey",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      recurringScans: {
        serializedName: "properties.recurringScans",
        type: {
          name: "Composite",
          className: "VulnerabilityAssessmentRecurringScansProperties"
        }
      }
    }
  }
};

export const InstancePool: msRest.CompositeMapper = {
  serializedName: "InstancePool",
  type: {
    name: "Composite",
    className: "InstancePool",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      subnetId: {
        required: true,
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      vCores: {
        required: true,
        serializedName: "properties.vCores",
        type: {
          name: "Number"
        }
      },
      licenseType: {
        required: true,
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstancePoolUpdate: msRest.CompositeMapper = {
  serializedName: "InstancePoolUpdate",
  type: {
    name: "Composite",
    className: "InstancePoolUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Name: msRest.CompositeMapper = {
  serializedName: "Name",
  type: {
    name: "Composite",
    className: "Name",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: msRest.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "Name"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      requestedLimit: {
        readOnly: true,
        serializedName: "requestedLimit",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedInstance: msRest.CompositeMapper = {
  serializedName: "ManagedInstance",
  type: {
    name: "Composite",
    className: "ManagedInstance",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      managedInstanceCreateMode: {
        serializedName: "properties.managedInstanceCreateMode",
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        readOnly: true,
        serializedName: "properties.fullyQualifiedDomainName",
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      vCores: {
        serializedName: "properties.vCores",
        type: {
          name: "Number"
        }
      },
      storageSizeInGB: {
        serializedName: "properties.storageSizeInGB",
        type: {
          name: "Number"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      dnsZone: {
        readOnly: true,
        serializedName: "properties.dnsZone",
        type: {
          name: "String"
        }
      },
      dnsZonePartner: {
        serializedName: "properties.dnsZonePartner",
        type: {
          name: "String"
        }
      },
      publicDataEndpointEnabled: {
        serializedName: "properties.publicDataEndpointEnabled",
        type: {
          name: "Boolean"
        }
      },
      sourceManagedInstanceId: {
        serializedName: "properties.sourceManagedInstanceId",
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      proxyOverride: {
        serializedName: "properties.proxyOverride",
        type: {
          name: "String"
        }
      },
      timezoneId: {
        serializedName: "properties.timezoneId",
        type: {
          name: "String"
        }
      },
      instancePoolId: {
        serializedName: "properties.instancePoolId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceUpdate: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceUpdate",
  type: {
    name: "Composite",
    className: "ManagedInstanceUpdate",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      managedInstanceCreateMode: {
        serializedName: "properties.managedInstanceCreateMode",
        type: {
          name: "String"
        }
      },
      fullyQualifiedDomainName: {
        readOnly: true,
        serializedName: "properties.fullyQualifiedDomainName",
        type: {
          name: "String"
        }
      },
      administratorLogin: {
        serializedName: "properties.administratorLogin",
        type: {
          name: "String"
        }
      },
      administratorLoginPassword: {
        serializedName: "properties.administratorLoginPassword",
        type: {
          name: "String"
        }
      },
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      vCores: {
        serializedName: "properties.vCores",
        type: {
          name: "Number"
        }
      },
      storageSizeInGB: {
        serializedName: "properties.storageSizeInGB",
        type: {
          name: "Number"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      dnsZone: {
        readOnly: true,
        serializedName: "properties.dnsZone",
        type: {
          name: "String"
        }
      },
      dnsZonePartner: {
        serializedName: "properties.dnsZonePartner",
        type: {
          name: "String"
        }
      },
      publicDataEndpointEnabled: {
        serializedName: "properties.publicDataEndpointEnabled",
        type: {
          name: "Boolean"
        }
      },
      sourceManagedInstanceId: {
        serializedName: "properties.sourceManagedInstanceId",
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      proxyOverride: {
        serializedName: "properties.proxyOverride",
        type: {
          name: "String"
        }
      },
      timezoneId: {
        serializedName: "properties.timezoneId",
        type: {
          name: "String"
        }
      },
      instancePoolId: {
        serializedName: "properties.instancePoolId",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ManagedDatabaseRestoreDetailsResult: msRest.CompositeMapper = {
  serializedName: "ManagedDatabaseRestoreDetailsResult",
  type: {
    name: "Composite",
    className: "ManagedDatabaseRestoreDetailsResult",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      currentRestoringFileName: {
        readOnly: true,
        serializedName: "properties.currentRestoringFileName",
        type: {
          name: "String"
        }
      },
      lastRestoredFileName: {
        readOnly: true,
        serializedName: "properties.lastRestoredFileName",
        type: {
          name: "String"
        }
      },
      lastRestoredFileTime: {
        readOnly: true,
        serializedName: "properties.lastRestoredFileTime",
        type: {
          name: "DateTime"
        }
      },
      percentCompleted: {
        readOnly: true,
        serializedName: "properties.percentCompleted",
        type: {
          name: "Number"
        }
      },
      unrestorableFiles: {
        readOnly: true,
        serializedName: "properties.unrestorableFiles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      numberOfFilesDetected: {
        readOnly: true,
        serializedName: "properties.numberOfFilesDetected",
        type: {
          name: "Number"
        }
      },
      lastUploadedFileName: {
        readOnly: true,
        serializedName: "properties.lastUploadedFileName",
        type: {
          name: "String"
        }
      },
      lastUploadedFileTime: {
        readOnly: true,
        serializedName: "properties.lastUploadedFileTime",
        type: {
          name: "DateTime"
        }
      },
      blockReason: {
        readOnly: true,
        serializedName: "properties.blockReason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedDatabase: msRest.CompositeMapper = {
  serializedName: "ManagedDatabase",
  type: {
    name: "Composite",
    className: "ManagedDatabase",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      earliestRestorePoint: {
        readOnly: true,
        serializedName: "properties.earliestRestorePoint",
        type: {
          name: "DateTime"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      defaultSecondaryLocation: {
        readOnly: true,
        serializedName: "properties.defaultSecondaryLocation",
        type: {
          name: "String"
        }
      },
      catalogCollation: {
        serializedName: "properties.catalogCollation",
        type: {
          name: "String"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      storageContainerUri: {
        serializedName: "properties.storageContainerUri",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      restorableDroppedDatabaseId: {
        serializedName: "properties.restorableDroppedDatabaseId",
        type: {
          name: "String"
        }
      },
      storageContainerSasToken: {
        serializedName: "properties.storageContainerSasToken",
        type: {
          name: "String"
        }
      },
      failoverGroupId: {
        readOnly: true,
        serializedName: "properties.failoverGroupId",
        type: {
          name: "String"
        }
      },
      recoverableDatabaseId: {
        serializedName: "properties.recoverableDatabaseId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedDatabaseUpdate: msRest.CompositeMapper = {
  serializedName: "ManagedDatabaseUpdate",
  type: {
    name: "Composite",
    className: "ManagedDatabaseUpdate",
    modelProperties: {
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      earliestRestorePoint: {
        readOnly: true,
        serializedName: "properties.earliestRestorePoint",
        type: {
          name: "DateTime"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      defaultSecondaryLocation: {
        readOnly: true,
        serializedName: "properties.defaultSecondaryLocation",
        type: {
          name: "String"
        }
      },
      catalogCollation: {
        serializedName: "properties.catalogCollation",
        type: {
          name: "String"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      storageContainerUri: {
        serializedName: "properties.storageContainerUri",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      restorableDroppedDatabaseId: {
        serializedName: "properties.restorableDroppedDatabaseId",
        type: {
          name: "String"
        }
      },
      storageContainerSasToken: {
        serializedName: "properties.storageContainerSasToken",
        type: {
          name: "String"
        }
      },
      failoverGroupId: {
        readOnly: true,
        serializedName: "properties.failoverGroupId",
        type: {
          name: "String"
        }
      },
      recoverableDatabaseId: {
        serializedName: "properties.recoverableDatabaseId",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CompleteDatabaseRestoreDefinition: msRest.CompositeMapper = {
  serializedName: "CompleteDatabaseRestoreDefinition",
  type: {
    name: "Composite",
    className: "CompleteDatabaseRestoreDefinition",
    modelProperties: {
      lastBackupName: {
        required: true,
        serializedName: "lastBackupName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointProperty: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointProperty",
  type: {
    name: "Composite",
    className: "PrivateEndpointProperty",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionStateProperty: msRest.CompositeMapper = {
  serializedName: "PrivateLinkServiceConnectionStateProperty",
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionStateProperty",
    modelProperties: {
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        required: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        readOnly: true,
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnection",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpointProperty"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionStateProperty"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceProperties: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResourceProperties",
  type: {
    name: "Composite",
    className: "PrivateLinkResourceProperties",
    modelProperties: {
      groupId: {
        readOnly: true,
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        readOnly: true,
        serializedName: "requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResource: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResource",
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        readOnly: true,
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateLinkResourceProperties"
        }
      }
    }
  }
};

export const RecoverableDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "RecoverableDatabaseListResult",
  type: {
    name: "Composite",
    className: "RecoverableDatabaseListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoverableDatabase"
            }
          }
        }
      }
    }
  }
};

export const RestorableDroppedDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "RestorableDroppedDatabaseListResult",
  type: {
    name: "Composite",
    className: "RestorableDroppedDatabaseListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableDroppedDatabase"
            }
          }
        }
      }
    }
  }
};

export const ServerListResult: msRest.CompositeMapper = {
  serializedName: "ServerListResult",
  type: {
    name: "Composite",
    className: "ServerListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Server"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataMaskingRuleListResult: msRest.CompositeMapper = {
  serializedName: "DataMaskingRuleListResult",
  type: {
    name: "Composite",
    className: "DataMaskingRuleListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataMaskingRule"
            }
          }
        }
      }
    }
  }
};

export const FirewallRuleListResult: msRest.CompositeMapper = {
  serializedName: "FirewallRuleListResult",
  type: {
    name: "Composite",
    className: "FirewallRuleListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      }
    }
  }
};

export const GeoBackupPolicyListResult: msRest.CompositeMapper = {
  serializedName: "GeoBackupPolicyListResult",
  type: {
    name: "Composite",
    className: "GeoBackupPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoBackupPolicy"
            }
          }
        }
      }
    }
  }
};

export const MetricListResult: msRest.CompositeMapper = {
  serializedName: "MetricListResult",
  type: {
    name: "Composite",
    className: "MetricListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Metric"
            }
          }
        }
      }
    }
  }
};

export const MetricDefinitionListResult: msRest.CompositeMapper = {
  serializedName: "MetricDefinitionListResult",
  type: {
    name: "Composite",
    className: "MetricDefinitionListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDefinition"
            }
          }
        }
      }
    }
  }
};

export const DatabaseListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseListResult",
  type: {
    name: "Composite",
    className: "DatabaseListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Database"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolListResult: msRest.CompositeMapper = {
  serializedName: "ElasticPoolListResult",
  type: {
    name: "Composite",
    className: "ElasticPoolListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPool"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecommendedElasticPoolListResult: msRest.CompositeMapper = {
  serializedName: "RecommendedElasticPoolListResult",
  type: {
    name: "Composite",
    className: "RecommendedElasticPoolListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedElasticPool"
            }
          }
        }
      }
    }
  }
};

export const RecommendedElasticPoolListMetricsResult: msRest.CompositeMapper = {
  serializedName: "RecommendedElasticPoolListMetricsResult",
  type: {
    name: "Composite",
    className: "RecommendedElasticPoolListMetricsResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedElasticPoolMetric"
            }
          }
        }
      }
    }
  }
};

export const ReplicationLinkListResult: msRest.CompositeMapper = {
  serializedName: "ReplicationLinkListResult",
  type: {
    name: "Composite",
    className: "ReplicationLinkListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationLink"
            }
          }
        }
      }
    }
  }
};

export const ServerAdministratorListResult: msRest.CompositeMapper = {
  serializedName: "ServerAdministratorListResult",
  type: {
    name: "Composite",
    className: "ServerAdministratorListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerAzureADAdministrator"
            }
          }
        }
      }
    }
  }
};

export const ServerCommunicationLinkListResult: msRest.CompositeMapper = {
  serializedName: "ServerCommunicationLinkListResult",
  type: {
    name: "Composite",
    className: "ServerCommunicationLinkListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerCommunicationLink"
            }
          }
        }
      }
    }
  }
};

export const ServiceObjectiveListResult: msRest.CompositeMapper = {
  serializedName: "ServiceObjectiveListResult",
  type: {
    name: "Composite",
    className: "ServiceObjectiveListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceObjective"
            }
          }
        }
      }
    }
  }
};

export const ElasticPoolActivityListResult: msRest.CompositeMapper = {
  serializedName: "ElasticPoolActivityListResult",
  type: {
    name: "Composite",
    className: "ElasticPoolActivityListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolActivity"
            }
          }
        }
      }
    }
  }
};

export const ElasticPoolDatabaseActivityListResult: msRest.CompositeMapper = {
  serializedName: "ElasticPoolDatabaseActivityListResult",
  type: {
    name: "Composite",
    className: "ElasticPoolDatabaseActivityListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolDatabaseActivity"
            }
          }
        }
      }
    }
  }
};

export const ServiceTierAdvisorListResult: msRest.CompositeMapper = {
  serializedName: "ServiceTierAdvisorListResult",
  type: {
    name: "Composite",
    className: "ServiceTierAdvisorListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceTierAdvisor"
            }
          }
        }
      }
    }
  }
};

export const TransparentDataEncryptionActivityListResult: msRest.CompositeMapper = {
  serializedName: "TransparentDataEncryptionActivityListResult",
  type: {
    name: "Composite",
    className: "TransparentDataEncryptionActivityListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TransparentDataEncryptionActivity"
            }
          }
        }
      }
    }
  }
};

export const ServerUsageListResult: msRest.CompositeMapper = {
  serializedName: "ServerUsageListResult",
  type: {
    name: "Composite",
    className: "ServerUsageListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerUsage"
            }
          }
        }
      }
    }
  }
};

export const DatabaseUsageListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseUsageListResult",
  type: {
    name: "Composite",
    className: "DatabaseUsageListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseUsage"
            }
          }
        }
      }
    }
  }
};

export const EncryptionProtectorListResult: msRest.CompositeMapper = {
  serializedName: "EncryptionProtectorListResult",
  type: {
    name: "Composite",
    className: "EncryptionProtectorListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EncryptionProtector"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverGroupListResult: msRest.CompositeMapper = {
  serializedName: "FailoverGroupListResult",
  type: {
    name: "Composite",
    className: "FailoverGroupListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverGroup"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerKeyListResult: msRest.CompositeMapper = {
  serializedName: "ServerKeyListResult",
  type: {
    name: "Composite",
    className: "ServerKeyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerKey"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncAgentListResult: msRest.CompositeMapper = {
  serializedName: "SyncAgentListResult",
  type: {
    name: "Composite",
    className: "SyncAgentListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncAgent"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncAgentLinkedDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "SyncAgentLinkedDatabaseListResult",
  type: {
    name: "Composite",
    className: "SyncAgentLinkedDatabaseListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncAgentLinkedDatabase"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncDatabaseIdListResult: msRest.CompositeMapper = {
  serializedName: "SyncDatabaseIdListResult",
  type: {
    name: "Composite",
    className: "SyncDatabaseIdListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncDatabaseIdProperties"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncFullSchemaPropertiesListResult: msRest.CompositeMapper = {
  serializedName: "SyncFullSchemaPropertiesListResult",
  type: {
    name: "Composite",
    className: "SyncFullSchemaPropertiesListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncFullSchemaProperties"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupLogListResult: msRest.CompositeMapper = {
  serializedName: "SyncGroupLogListResult",
  type: {
    name: "Composite",
    className: "SyncGroupLogListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncGroupLogProperties"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncGroupListResult: msRest.CompositeMapper = {
  serializedName: "SyncGroupListResult",
  type: {
    name: "Composite",
    className: "SyncGroupListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncGroup"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncMemberListResult: msRest.CompositeMapper = {
  serializedName: "SyncMemberListResult",
  type: {
    name: "Composite",
    className: "SyncMemberListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SyncMember"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionUsageListResult: msRest.CompositeMapper = {
  serializedName: "SubscriptionUsageListResult",
  type: {
    name: "Composite",
    className: "SubscriptionUsageListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SubscriptionUsage"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualClusterListResult: msRest.CompositeMapper = {
  serializedName: "VirtualClusterListResult",
  type: {
    name: "Composite",
    className: "VirtualClusterListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualCluster"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRuleListResult: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRuleListResult",
  type: {
    name: "Composite",
    className: "VirtualNetworkRuleListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerBlobAuditingPolicyListResult: msRest.CompositeMapper = {
  serializedName: "ServerBlobAuditingPolicyListResult",
  type: {
    name: "Composite",
    className: "ServerBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerBlobAuditingPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseBlobAuditingPolicyListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseBlobAuditingPolicyListResult",
  type: {
    name: "Composite",
    className: "DatabaseBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseBlobAuditingPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseVulnerabilityAssessmentListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseVulnerabilityAssessmentListResult",
  type: {
    name: "Composite",
    className: "DatabaseVulnerabilityAssessmentListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseVulnerabilityAssessment"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobAgentListResult: msRest.CompositeMapper = {
  serializedName: "JobAgentListResult",
  type: {
    name: "Composite",
    className: "JobAgentListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobAgent"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobCredentialListResult: msRest.CompositeMapper = {
  serializedName: "JobCredentialListResult",
  type: {
    name: "Composite",
    className: "JobCredentialListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobCredential"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobExecutionListResult: msRest.CompositeMapper = {
  serializedName: "JobExecutionListResult",
  type: {
    name: "Composite",
    className: "JobExecutionListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobExecution"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobListResult: msRest.CompositeMapper = {
  serializedName: "JobListResult",
  type: {
    name: "Composite",
    className: "JobListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Job"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobStepListResult: msRest.CompositeMapper = {
  serializedName: "JobStepListResult",
  type: {
    name: "Composite",
    className: "JobStepListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobStep"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobTargetGroupListResult: msRest.CompositeMapper = {
  serializedName: "JobTargetGroupListResult",
  type: {
    name: "Composite",
    className: "JobTargetGroupListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobTargetGroup"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobVersionListResult: msRest.CompositeMapper = {
  serializedName: "JobVersionListResult",
  type: {
    name: "Composite",
    className: "JobVersionListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobVersion"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LongTermRetentionBackupListResult: msRest.CompositeMapper = {
  serializedName: "LongTermRetentionBackupListResult",
  type: {
    name: "Composite",
    className: "LongTermRetentionBackupListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LongTermRetentionBackup"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedBackupShortTermRetentionPolicyListResult: msRest.CompositeMapper = {
  serializedName: "ManagedBackupShortTermRetentionPolicyListResult",
  type: {
    name: "Composite",
    className: "ManagedBackupShortTermRetentionPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedBackupShortTermRetentionPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerDnsAliasListResult: msRest.CompositeMapper = {
  serializedName: "ServerDnsAliasListResult",
  type: {
    name: "Composite",
    className: "ServerDnsAliasListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerDnsAlias"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogicalServerSecurityAlertPolicyListResult: msRest.CompositeMapper = {
  serializedName: "LogicalServerSecurityAlertPolicyListResult",
  type: {
    name: "Composite",
    className: "LogicalServerSecurityAlertPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerSecurityAlertPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableDroppedManagedDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "RestorableDroppedManagedDatabaseListResult",
  type: {
    name: "Composite",
    className: "RestorableDroppedManagedDatabaseListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableDroppedManagedDatabase"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorePointListResult: msRest.CompositeMapper = {
  serializedName: "RestorePointListResult",
  type: {
    name: "Composite",
    className: "RestorePointListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorePoint"
            }
          }
        }
      }
    }
  }
};

export const ManagedDatabaseSecurityAlertPolicyListResult: msRest.CompositeMapper = {
  serializedName: "ManagedDatabaseSecurityAlertPolicyListResult",
  type: {
    name: "Composite",
    className: "ManagedDatabaseSecurityAlertPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedDatabaseSecurityAlertPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServerSecurityAlertPolicyListResult: msRest.CompositeMapper = {
  serializedName: "ManagedServerSecurityAlertPolicyListResult",
  type: {
    name: "Composite",
    className: "ManagedServerSecurityAlertPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedServerSecurityAlertPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SensitivityLabelListResult: msRest.CompositeMapper = {
  serializedName: "SensitivityLabelListResult",
  type: {
    name: "Composite",
    className: "SensitivityLabelListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SensitivityLabel"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceAdministratorListResult: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceAdministratorListResult",
  type: {
    name: "Composite",
    className: "ManagedInstanceAdministratorListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceAdministrator"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseOperationListResult: msRest.CompositeMapper = {
  serializedName: "DatabaseOperationListResult",
  type: {
    name: "Composite",
    className: "DatabaseOperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseOperation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ElasticPoolOperationListResult: msRest.CompositeMapper = {
  serializedName: "ElasticPoolOperationListResult",
  type: {
    name: "Composite",
    className: "ElasticPoolOperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ElasticPoolOperation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanRecordListResult: msRest.CompositeMapper = {
  serializedName: "VulnerabilityAssessmentScanRecordListResult",
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanRecordListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VulnerabilityAssessmentScanRecord"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstanceFailoverGroupListResult: msRest.CompositeMapper = {
  serializedName: "InstanceFailoverGroupListResult",
  type: {
    name: "Composite",
    className: "InstanceFailoverGroupListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstanceFailoverGroup"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupShortTermRetentionPolicyListResult: msRest.CompositeMapper = {
  serializedName: "BackupShortTermRetentionPolicyListResult",
  type: {
    name: "Composite",
    className: "BackupShortTermRetentionPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupShortTermRetentionPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceKeyListResult: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceKeyListResult",
  type: {
    name: "Composite",
    className: "ManagedInstanceKeyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceKey"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceEncryptionProtectorListResult: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceEncryptionProtectorListResult",
  type: {
    name: "Composite",
    className: "ManagedInstanceEncryptionProtectorListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceEncryptionProtector"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoverableManagedDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "RecoverableManagedDatabaseListResult",
  type: {
    name: "Composite",
    className: "RecoverableManagedDatabaseListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoverableManagedDatabase"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceVulnerabilityAssessmentListResult: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceVulnerabilityAssessmentListResult",
  type: {
    name: "Composite",
    className: "ManagedInstanceVulnerabilityAssessmentListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstanceVulnerabilityAssessment"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerVulnerabilityAssessmentListResult: msRest.CompositeMapper = {
  serializedName: "ServerVulnerabilityAssessmentListResult",
  type: {
    name: "Composite",
    className: "ServerVulnerabilityAssessmentListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerVulnerabilityAssessment"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InstancePoolListResult: msRest.CompositeMapper = {
  serializedName: "InstancePoolListResult",
  type: {
    name: "Composite",
    className: "InstancePoolListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InstancePool"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageListResult: msRest.CompositeMapper = {
  serializedName: "UsageListResult",
  type: {
    name: "Composite",
    className: "UsageListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedInstanceListResult: msRest.CompositeMapper = {
  serializedName: "ManagedInstanceListResult",
  type: {
    name: "Composite",
    className: "ManagedInstanceListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedInstance"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedDatabaseListResult: msRest.CompositeMapper = {
  serializedName: "ManagedDatabaseListResult",
  type: {
    name: "Composite",
    className: "ManagedDatabaseListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedDatabase"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionListResult",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResourceListResult",
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
