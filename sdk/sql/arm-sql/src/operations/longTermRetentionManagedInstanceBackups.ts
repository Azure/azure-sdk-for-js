/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/longTermRetentionManagedInstanceBackupsMappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClientContext } from "../sqlManagementClientContext";

/** Class representing a LongTermRetentionManagedInstanceBackups. */
export class LongTermRetentionManagedInstanceBackups {
  private readonly client: SqlManagementClientContext;

  /**
   * Create a LongTermRetentionManagedInstanceBackups.
   * @param {SqlManagementClientContext} client Reference to the service client.
   */
  constructor(client: SqlManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a long term retention backup for a managed database.
   * @param locationName The location of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param backupName The backup name.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionManagedInstanceBackupsGetResponse>
   */
  get(locationName: string, managedInstanceName: string, databaseName: string, backupName: string, options?: msRest.RequestOptionsBase): Promise<Models.LongTermRetentionManagedInstanceBackupsGetResponse>;
  /**
   * @param locationName The location of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param backupName The backup name.
   * @param callback The callback
   */
  get(locationName: string, managedInstanceName: string, databaseName: string, backupName: string, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackup>): void;
  /**
   * @param locationName The location of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param backupName The backup name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(locationName: string, managedInstanceName: string, databaseName: string, backupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackup>): void;
  get(locationName: string, managedInstanceName: string, databaseName: string, backupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackup>, callback?: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackup>): Promise<Models.LongTermRetentionManagedInstanceBackupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        managedInstanceName,
        databaseName,
        backupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LongTermRetentionManagedInstanceBackupsGetResponse>;
  }

  /**
   * Deletes a long term retention backup.
   * @param locationName The location of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param backupName The backup name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(locationName: string, managedInstanceName: string, databaseName: string, backupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(locationName,managedInstanceName,databaseName,backupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists all long term retention backups for a managed database.
   * @param locationName The location of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionManagedInstanceBackupsListByDatabaseResponse>
   */
  listByDatabase(locationName: string, managedInstanceName: string, databaseName: string, options?: Models.LongTermRetentionManagedInstanceBackupsListByDatabaseOptionalParams): Promise<Models.LongTermRetentionManagedInstanceBackupsListByDatabaseResponse>;
  /**
   * @param locationName The location of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param callback The callback
   */
  listByDatabase(locationName: string, managedInstanceName: string, databaseName: string, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  /**
   * @param locationName The location of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDatabase(locationName: string, managedInstanceName: string, databaseName: string, options: Models.LongTermRetentionManagedInstanceBackupsListByDatabaseOptionalParams, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  listByDatabase(locationName: string, managedInstanceName: string, databaseName: string, options?: Models.LongTermRetentionManagedInstanceBackupsListByDatabaseOptionalParams | msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionManagedInstanceBackupsListByDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        managedInstanceName,
        databaseName,
        options
      },
      listByDatabaseOperationSpec,
      callback) as Promise<Models.LongTermRetentionManagedInstanceBackupsListByDatabaseResponse>;
  }

  /**
   * Lists the long term retention backups for a given managed instance.
   * @param locationName The location of the database
   * @param managedInstanceName The name of the managed instance.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionManagedInstanceBackupsListByInstanceResponse>
   */
  listByInstance(locationName: string, managedInstanceName: string, options?: Models.LongTermRetentionManagedInstanceBackupsListByInstanceOptionalParams): Promise<Models.LongTermRetentionManagedInstanceBackupsListByInstanceResponse>;
  /**
   * @param locationName The location of the database
   * @param managedInstanceName The name of the managed instance.
   * @param callback The callback
   */
  listByInstance(locationName: string, managedInstanceName: string, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  /**
   * @param locationName The location of the database
   * @param managedInstanceName The name of the managed instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByInstance(locationName: string, managedInstanceName: string, options: Models.LongTermRetentionManagedInstanceBackupsListByInstanceOptionalParams, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  listByInstance(locationName: string, managedInstanceName: string, options?: Models.LongTermRetentionManagedInstanceBackupsListByInstanceOptionalParams | msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionManagedInstanceBackupsListByInstanceResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        managedInstanceName,
        options
      },
      listByInstanceOperationSpec,
      callback) as Promise<Models.LongTermRetentionManagedInstanceBackupsListByInstanceResponse>;
  }

  /**
   * Lists the long term retention backups for managed databases in a given location.
   * @param locationName The location of the database.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionManagedInstanceBackupsListByLocationResponse>
   */
  listByLocation(locationName: string, options?: Models.LongTermRetentionManagedInstanceBackupsListByLocationOptionalParams): Promise<Models.LongTermRetentionManagedInstanceBackupsListByLocationResponse>;
  /**
   * @param locationName The location of the database.
   * @param callback The callback
   */
  listByLocation(locationName: string, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  /**
   * @param locationName The location of the database.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByLocation(locationName: string, options: Models.LongTermRetentionManagedInstanceBackupsListByLocationOptionalParams, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  listByLocation(locationName: string, options?: Models.LongTermRetentionManagedInstanceBackupsListByLocationOptionalParams | msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionManagedInstanceBackupsListByLocationResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        options
      },
      listByLocationOperationSpec,
      callback) as Promise<Models.LongTermRetentionManagedInstanceBackupsListByLocationResponse>;
  }

  /**
   * Gets a long term retention backup for a managed database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param backupName The backup name.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionManagedInstanceBackupsGetByResourceGroupResponse>
   */
  getByResourceGroup(resourceGroupName: string, locationName: string, managedInstanceName: string, databaseName: string, backupName: string, options?: msRest.RequestOptionsBase): Promise<Models.LongTermRetentionManagedInstanceBackupsGetByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param backupName The backup name.
   * @param callback The callback
   */
  getByResourceGroup(resourceGroupName: string, locationName: string, managedInstanceName: string, databaseName: string, backupName: string, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackup>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param backupName The backup name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getByResourceGroup(resourceGroupName: string, locationName: string, managedInstanceName: string, databaseName: string, backupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackup>): void;
  getByResourceGroup(resourceGroupName: string, locationName: string, managedInstanceName: string, databaseName: string, backupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackup>, callback?: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackup>): Promise<Models.LongTermRetentionManagedInstanceBackupsGetByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        locationName,
        managedInstanceName,
        databaseName,
        backupName,
        options
      },
      getByResourceGroupOperationSpec,
      callback) as Promise<Models.LongTermRetentionManagedInstanceBackupsGetByResourceGroupResponse>;
  }

  /**
   * Deletes a long term retention backup.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param backupName The backup name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteByResourceGroup(resourceGroupName: string, locationName: string, managedInstanceName: string, databaseName: string, backupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteByResourceGroup(resourceGroupName,locationName,managedInstanceName,databaseName,backupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists all long term retention backups for a managed database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseResponse>
   */
  listByResourceGroupDatabase(resourceGroupName: string, locationName: string, managedInstanceName: string, databaseName: string, options?: Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseOptionalParams): Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param callback The callback
   */
  listByResourceGroupDatabase(resourceGroupName: string, locationName: string, managedInstanceName: string, databaseName: string, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupDatabase(resourceGroupName: string, locationName: string, managedInstanceName: string, databaseName: string, options: Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseOptionalParams, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  listByResourceGroupDatabase(resourceGroupName: string, locationName: string, managedInstanceName: string, databaseName: string, options?: Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseOptionalParams | msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        locationName,
        managedInstanceName,
        databaseName,
        options
      },
      listByResourceGroupDatabaseOperationSpec,
      callback) as Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseResponse>;
  }

  /**
   * Lists the long term retention backups for a given managed instance.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceResponse>
   */
  listByResourceGroupInstance(resourceGroupName: string, locationName: string, managedInstanceName: string, options?: Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceOptionalParams): Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param callback The callback
   */
  listByResourceGroupInstance(resourceGroupName: string, locationName: string, managedInstanceName: string, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupInstance(resourceGroupName: string, locationName: string, managedInstanceName: string, options: Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceOptionalParams, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  listByResourceGroupInstance(resourceGroupName: string, locationName: string, managedInstanceName: string, options?: Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceOptionalParams | msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        locationName,
        managedInstanceName,
        options
      },
      listByResourceGroupInstanceOperationSpec,
      callback) as Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceResponse>;
  }

  /**
   * Lists the long term retention backups for managed databases in a given location.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationResponse>
   */
  listByResourceGroupLocation(resourceGroupName: string, locationName: string, options?: Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationOptionalParams): Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param callback The callback
   */
  listByResourceGroupLocation(resourceGroupName: string, locationName: string, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupLocation(resourceGroupName: string, locationName: string, options: Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationOptionalParams, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  listByResourceGroupLocation(resourceGroupName: string, locationName: string, options?: Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationOptionalParams | msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        locationName,
        options
      },
      listByResourceGroupLocationOperationSpec,
      callback) as Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationResponse>;
  }

  /**
   * Deletes a long term retention backup.
   * @param locationName The location of the database.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param backupName The backup name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(locationName: string, managedInstanceName: string, databaseName: string, backupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        locationName,
        managedInstanceName,
        databaseName,
        backupName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Deletes a long term retention backup.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the managed database.
   * @param backupName The backup name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteByResourceGroup(resourceGroupName: string, locationName: string, managedInstanceName: string, databaseName: string, backupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        locationName,
        managedInstanceName,
        databaseName,
        backupName,
        options
      },
      beginDeleteByResourceGroupOperationSpec,
      options);
  }

  /**
   * Lists all long term retention backups for a managed database.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionManagedInstanceBackupsListByDatabaseNextResponse>
   */
  listByDatabaseNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LongTermRetentionManagedInstanceBackupsListByDatabaseNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByDatabaseNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDatabaseNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  listByDatabaseNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionManagedInstanceBackupsListByDatabaseNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByDatabaseNextOperationSpec,
      callback) as Promise<Models.LongTermRetentionManagedInstanceBackupsListByDatabaseNextResponse>;
  }

  /**
   * Lists the long term retention backups for a given managed instance.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionManagedInstanceBackupsListByInstanceNextResponse>
   */
  listByInstanceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LongTermRetentionManagedInstanceBackupsListByInstanceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByInstanceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByInstanceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  listByInstanceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionManagedInstanceBackupsListByInstanceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByInstanceNextOperationSpec,
      callback) as Promise<Models.LongTermRetentionManagedInstanceBackupsListByInstanceNextResponse>;
  }

  /**
   * Lists the long term retention backups for managed databases in a given location.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionManagedInstanceBackupsListByLocationNextResponse>
   */
  listByLocationNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LongTermRetentionManagedInstanceBackupsListByLocationNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByLocationNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByLocationNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  listByLocationNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionManagedInstanceBackupsListByLocationNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByLocationNextOperationSpec,
      callback) as Promise<Models.LongTermRetentionManagedInstanceBackupsListByLocationNextResponse>;
  }

  /**
   * Lists all long term retention backups for a managed database.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseNextResponse>
   */
  listByResourceGroupDatabaseNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupDatabaseNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupDatabaseNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  listByResourceGroupDatabaseNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupDatabaseNextOperationSpec,
      callback) as Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupDatabaseNextResponse>;
  }

  /**
   * Lists the long term retention backups for a given managed instance.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceNextResponse>
   */
  listByResourceGroupInstanceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupInstanceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupInstanceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  listByResourceGroupInstanceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupInstanceNextOperationSpec,
      callback) as Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupInstanceNextResponse>;
  }

  /**
   * Lists the long term retention backups for managed databases in a given location.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationNextResponse>
   */
  listByResourceGroupLocationNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupLocationNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupLocationNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): void;
  listByResourceGroupLocationNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.ManagedInstanceLongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupLocationNextOperationSpec,
      callback) as Promise<Models.LongTermRetentionManagedInstanceBackupsListByResourceGroupLocationNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups/{backupName}",
  urlParameters: [
    Parameters.locationName,
    Parameters.managedInstanceName,
    Parameters.databaseName,
    Parameters.backupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceLongTermRetentionBackup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups",
  urlParameters: [
    Parameters.locationName,
    Parameters.managedInstanceName,
    Parameters.databaseName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceLongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionManagedInstanceBackups",
  urlParameters: [
    Parameters.locationName,
    Parameters.managedInstanceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceLongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByLocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstanceBackups",
  urlParameters: [
    Parameters.locationName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceLongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups/{backupName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.locationName,
    Parameters.managedInstanceName,
    Parameters.databaseName,
    Parameters.backupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceLongTermRetentionBackup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.locationName,
    Parameters.managedInstanceName,
    Parameters.databaseName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceLongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupInstanceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionManagedInstanceBackups",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.locationName,
    Parameters.managedInstanceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceLongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupLocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstanceBackups",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.locationName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceLongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups/{backupName}",
  urlParameters: [
    Parameters.locationName,
    Parameters.managedInstanceName,
    Parameters.databaseName,
    Parameters.backupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups/{backupName}",
  urlParameters: [
    Parameters.resourceGroupName0,
    Parameters.locationName,
    Parameters.managedInstanceName,
    Parameters.databaseName,
    Parameters.backupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDatabaseNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceLongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByInstanceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceLongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByLocationNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceLongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupDatabaseNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceLongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupInstanceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceLongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupLocationNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceLongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
