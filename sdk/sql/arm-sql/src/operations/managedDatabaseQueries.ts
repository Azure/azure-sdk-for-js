/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/managedDatabaseQueriesMappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClientContext } from "../sqlManagementClientContext";

/** Class representing a ManagedDatabaseQueries. */
export class ManagedDatabaseQueries {
  private readonly client: SqlManagementClientContext;

  /**
   * Create a ManagedDatabaseQueries.
   * @param {SqlManagementClientContext} client Reference to the service client.
   */
  constructor(client: SqlManagementClientContext) {
    this.client = client;
  }

  /**
   * Get query by query id.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the database.
   * @param queryId
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedDatabaseQueriesGetResponse>
   */
  get(resourceGroupName: string, managedInstanceName: string, databaseName: string, queryId: string, options?: msRest.RequestOptionsBase): Promise<Models.ManagedDatabaseQueriesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the database.
   * @param queryId
   * @param callback The callback
   */
  get(resourceGroupName: string, managedInstanceName: string, databaseName: string, queryId: string, callback: msRest.ServiceCallback<Models.ManagedInstanceQuery>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the database.
   * @param queryId
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, managedInstanceName: string, databaseName: string, queryId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedInstanceQuery>): void;
  get(resourceGroupName: string, managedInstanceName: string, databaseName: string, queryId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedInstanceQuery>, callback?: msRest.ServiceCallback<Models.ManagedInstanceQuery>): Promise<Models.ManagedDatabaseQueriesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managedInstanceName,
        databaseName,
        queryId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ManagedDatabaseQueriesGetResponse>;
  }

  /**
   * Get query execution statistics by query id.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the database.
   * @param queryId
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedDatabaseQueriesListByQueryResponse>
   */
  listByQuery(resourceGroupName: string, managedInstanceName: string, databaseName: string, queryId: string, options?: Models.ManagedDatabaseQueriesListByQueryOptionalParams): Promise<Models.ManagedDatabaseQueriesListByQueryResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the database.
   * @param queryId
   * @param callback The callback
   */
  listByQuery(resourceGroupName: string, managedInstanceName: string, databaseName: string, queryId: string, callback: msRest.ServiceCallback<Models.ManagedInstanceQueryStatistics>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param databaseName The name of the database.
   * @param queryId
   * @param options The optional parameters
   * @param callback The callback
   */
  listByQuery(resourceGroupName: string, managedInstanceName: string, databaseName: string, queryId: string, options: Models.ManagedDatabaseQueriesListByQueryOptionalParams, callback: msRest.ServiceCallback<Models.ManagedInstanceQueryStatistics>): void;
  listByQuery(resourceGroupName: string, managedInstanceName: string, databaseName: string, queryId: string, options?: Models.ManagedDatabaseQueriesListByQueryOptionalParams | msRest.ServiceCallback<Models.ManagedInstanceQueryStatistics>, callback?: msRest.ServiceCallback<Models.ManagedInstanceQueryStatistics>): Promise<Models.ManagedDatabaseQueriesListByQueryResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        managedInstanceName,
        databaseName,
        queryId,
        options
      },
      listByQueryOperationSpec,
      callback) as Promise<Models.ManagedDatabaseQueriesListByQueryResponse>;
  }

  /**
   * Get query execution statistics by query id.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ManagedDatabaseQueriesListByQueryNextResponse>
   */
  listByQueryNext(nextPageLink: string, options?: Models.ManagedDatabaseQueriesListByQueryNextOptionalParams): Promise<Models.ManagedDatabaseQueriesListByQueryNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByQueryNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ManagedInstanceQueryStatistics>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByQueryNext(nextPageLink: string, options: Models.ManagedDatabaseQueriesListByQueryNextOptionalParams, callback: msRest.ServiceCallback<Models.ManagedInstanceQueryStatistics>): void;
  listByQueryNext(nextPageLink: string, options?: Models.ManagedDatabaseQueriesListByQueryNextOptionalParams | msRest.ServiceCallback<Models.ManagedInstanceQueryStatistics>, callback?: msRest.ServiceCallback<Models.ManagedInstanceQueryStatistics>): Promise<Models.ManagedDatabaseQueriesListByQueryNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByQueryNextOperationSpec,
      callback) as Promise<Models.ManagedDatabaseQueriesListByQueryNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/queries/{queryId}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.managedInstanceName,
    Parameters.databaseName,
    Parameters.queryId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceQuery
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByQueryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/queries/{queryId}/statistics",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.managedInstanceName,
    Parameters.databaseName,
    Parameters.queryId,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.startTime0,
    Parameters.endTime0,
    Parameters.interval,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceQueryStatistics
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByQueryNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.startTime0,
    Parameters.endTime0,
    Parameters.interval,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedInstanceQueryStatistics
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
