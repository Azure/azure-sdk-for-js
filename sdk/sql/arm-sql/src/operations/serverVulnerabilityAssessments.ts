/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ServerVulnerabilityAssessments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import {
  ServerVulnerabilityAssessment,
  ServerVulnerabilityAssessmentsListByServerNextOptionalParams,
  ServerVulnerabilityAssessmentsListByServerOptionalParams,
  ServerVulnerabilityAssessmentsListByServerResponse,
  VulnerabilityAssessmentName,
  ServerVulnerabilityAssessmentsGetOptionalParams,
  ServerVulnerabilityAssessmentsGetResponse,
  ServerVulnerabilityAssessmentsCreateOrUpdateOptionalParams,
  ServerVulnerabilityAssessmentsCreateOrUpdateResponse,
  ServerVulnerabilityAssessmentsDeleteOptionalParams,
  ServerVulnerabilityAssessmentsListByServerNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ServerVulnerabilityAssessments operations. */
export class ServerVulnerabilityAssessmentsImpl
  implements ServerVulnerabilityAssessments {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class ServerVulnerabilityAssessments class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Lists the vulnerability assessment policies associated with a server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param options The options parameters.
   */
  public listByServer(
    resourceGroupName: string,
    serverName: string,
    options?: ServerVulnerabilityAssessmentsListByServerOptionalParams
  ): PagedAsyncIterableIterator<ServerVulnerabilityAssessment> {
    const iter = this.listByServerPagingAll(
      resourceGroupName,
      serverName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByServerPagingPage(
          resourceGroupName,
          serverName,
          options,
          settings
        );
      }
    };
  }

  private async *listByServerPagingPage(
    resourceGroupName: string,
    serverName: string,
    options?: ServerVulnerabilityAssessmentsListByServerOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ServerVulnerabilityAssessment[]> {
    let result: ServerVulnerabilityAssessmentsListByServerResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByServer(resourceGroupName, serverName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByServerNext(
        resourceGroupName,
        serverName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByServerPagingAll(
    resourceGroupName: string,
    serverName: string,
    options?: ServerVulnerabilityAssessmentsListByServerOptionalParams
  ): AsyncIterableIterator<ServerVulnerabilityAssessment> {
    for await (const page of this.listByServerPagingPage(
      resourceGroupName,
      serverName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the server's vulnerability assessment.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server for which the vulnerability assessment is defined.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serverName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: ServerVulnerabilityAssessmentsGetOptionalParams
  ): Promise<ServerVulnerabilityAssessmentsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, vulnerabilityAssessmentName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates the server's vulnerability assessment. Learn more about setting SQL vulnerability
   * assessment with managed identity -
   * https://docs.microsoft.com/azure/azure-sql/database/sql-database-vulnerability-assessment-storage
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server for which the vulnerability assessment is defined.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param parameters The requested resource.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    serverName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    parameters: ServerVulnerabilityAssessment,
    options?: ServerVulnerabilityAssessmentsCreateOrUpdateOptionalParams
  ): Promise<ServerVulnerabilityAssessmentsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        vulnerabilityAssessmentName,
        parameters,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Removes the server's vulnerability assessment.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server for which the vulnerability assessment is defined.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serverName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: ServerVulnerabilityAssessmentsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, vulnerabilityAssessmentName, options },
      deleteOperationSpec
    );
  }

  /**
   * Lists the vulnerability assessment policies associated with a server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param options The options parameters.
   */
  private _listByServer(
    resourceGroupName: string,
    serverName: string,
    options?: ServerVulnerabilityAssessmentsListByServerOptionalParams
  ): Promise<ServerVulnerabilityAssessmentsListByServerResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, options },
      listByServerOperationSpec
    );
  }

  /**
   * ListByServerNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param nextLink The nextLink from the previous successful call to the ListByServer method.
   * @param options The options parameters.
   */
  private _listByServerNext(
    resourceGroupName: string,
    serverName: string,
    nextLink: string,
    options?: ServerVulnerabilityAssessmentsListByServerNextOptionalParams
  ): Promise<ServerVulnerabilityAssessmentsListByServerNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serverName, nextLink, options },
      listByServerNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerVulnerabilityAssessment
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.vulnerabilityAssessmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ServerVulnerabilityAssessment
    },
    201: {
      bodyMapper: Mappers.ServerVulnerabilityAssessment
    },
    default: {}
  },
  requestBody: Parameters.parameters66,
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.vulnerabilityAssessmentName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}",
  httpMethod: "DELETE",
  responses: { 200: {}, default: {} },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.vulnerabilityAssessmentName
  ],
  serializer
};
const listByServerOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/vulnerabilityAssessments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerVulnerabilityAssessmentListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByServerNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServerVulnerabilityAssessmentListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
