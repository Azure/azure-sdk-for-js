/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SqlVulnerabilityAssessmentScanResult } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import {
  SqlVulnerabilityAssessmentScanResults,
  SQLVulnerabilityAssessmentName,
  SqlVulnerabilityAssessmentScanResultListByScanNextOptionalParams,
  SqlVulnerabilityAssessmentScanResultListByScanOptionalParams,
  SqlVulnerabilityAssessmentScanResultListByScanResponse,
  SqlVulnerabilityAssessmentScanResultGetOptionalParams,
  SqlVulnerabilityAssessmentScanResultGetResponse,
  SqlVulnerabilityAssessmentScanResultListByScanNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SqlVulnerabilityAssessmentScanResult operations. */
export class SqlVulnerabilityAssessmentScanResultImpl
  implements SqlVulnerabilityAssessmentScanResult {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class SqlVulnerabilityAssessmentScanResult class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Gets a vulnerability assessment scan record of a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param vulnerabilityAssessmentName The name of the SQL Vulnerability Assessment.
   * @param scanId The scan id of the SQL Vulnerability Assessment scan to retrieve result from.
   * @param options The options parameters.
   */
  public listByScan(
    resourceGroupName: string,
    serverName: string,
    vulnerabilityAssessmentName: SQLVulnerabilityAssessmentName,
    scanId: string,
    options?: SqlVulnerabilityAssessmentScanResultListByScanOptionalParams
  ): PagedAsyncIterableIterator<SqlVulnerabilityAssessmentScanResults> {
    const iter = this.listByScanPagingAll(
      resourceGroupName,
      serverName,
      vulnerabilityAssessmentName,
      scanId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByScanPagingPage(
          resourceGroupName,
          serverName,
          vulnerabilityAssessmentName,
          scanId,
          options,
          settings
        );
      }
    };
  }

  private async *listByScanPagingPage(
    resourceGroupName: string,
    serverName: string,
    vulnerabilityAssessmentName: SQLVulnerabilityAssessmentName,
    scanId: string,
    options?: SqlVulnerabilityAssessmentScanResultListByScanOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SqlVulnerabilityAssessmentScanResults[]> {
    let result: SqlVulnerabilityAssessmentScanResultListByScanResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByScan(
        resourceGroupName,
        serverName,
        vulnerabilityAssessmentName,
        scanId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByScanNext(
        resourceGroupName,
        serverName,
        vulnerabilityAssessmentName,
        scanId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByScanPagingAll(
    resourceGroupName: string,
    serverName: string,
    vulnerabilityAssessmentName: SQLVulnerabilityAssessmentName,
    scanId: string,
    options?: SqlVulnerabilityAssessmentScanResultListByScanOptionalParams
  ): AsyncIterableIterator<SqlVulnerabilityAssessmentScanResults> {
    for await (const page of this.listByScanPagingPage(
      resourceGroupName,
      serverName,
      vulnerabilityAssessmentName,
      scanId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a vulnerability assessment scan record of a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param vulnerabilityAssessmentName The name of the SQL Vulnerability Assessment.
   * @param scanId The scan id of the SQL Vulnerability Assessment scan to retrieve result from.
   * @param options The options parameters.
   */
  private _listByScan(
    resourceGroupName: string,
    serverName: string,
    vulnerabilityAssessmentName: SQLVulnerabilityAssessmentName,
    scanId: string,
    options?: SqlVulnerabilityAssessmentScanResultListByScanOptionalParams
  ): Promise<SqlVulnerabilityAssessmentScanResultListByScanResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        vulnerabilityAssessmentName,
        scanId,
        options
      },
      listByScanOperationSpec
    );
  }

  /**
   * Gets a vulnerability assessment scan record of a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param vulnerabilityAssessmentName The name of the SQL Vulnerability Assessment.
   * @param scanId The scan id of the SQL Vulnerability Assessment scan to retrieve result from.
   * @param scanResultId The scan result id of the specific result to retrieve.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serverName: string,
    vulnerabilityAssessmentName: SQLVulnerabilityAssessmentName,
    scanId: string,
    scanResultId: string,
    options?: SqlVulnerabilityAssessmentScanResultGetOptionalParams
  ): Promise<SqlVulnerabilityAssessmentScanResultGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        vulnerabilityAssessmentName,
        scanId,
        scanResultId,
        options
      },
      getOperationSpec
    );
  }

  /**
   * ListByScanNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param vulnerabilityAssessmentName The name of the SQL Vulnerability Assessment.
   * @param scanId The scan id of the SQL Vulnerability Assessment scan to retrieve result from.
   * @param nextLink The nextLink from the previous successful call to the ListByScan method.
   * @param options The options parameters.
   */
  private _listByScanNext(
    resourceGroupName: string,
    serverName: string,
    vulnerabilityAssessmentName: SQLVulnerabilityAssessmentName,
    scanId: string,
    nextLink: string,
    options?: SqlVulnerabilityAssessmentScanResultListByScanNextOptionalParams
  ): Promise<SqlVulnerabilityAssessmentScanResultListByScanNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        vulnerabilityAssessmentName,
        scanId,
        nextLink,
        options
      },
      listByScanNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByScanOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/scanResults",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SQLVulnerabilityAssessmentScanListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion8, Parameters.systemDatabaseName],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.scanId,
    Parameters.vulnerabilityAssessmentName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/scanResults/{scanResultId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlVulnerabilityAssessmentScanResults
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion8, Parameters.systemDatabaseName],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.scanId,
    Parameters.vulnerabilityAssessmentName1,
    Parameters.scanResultId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByScanNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SQLVulnerabilityAssessmentScanListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.nextLink,
    Parameters.scanId,
    Parameters.vulnerabilityAssessmentName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
