/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/deletedServersMappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClientContext } from "../sqlManagementClientContext";

/** Class representing a DeletedServers. */
export class DeletedServers {
  private readonly client: SqlManagementClientContext;

  /**
   * Create a DeletedServers.
   * @param {SqlManagementClientContext} client Reference to the service client.
   */
  constructor(client: SqlManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a list of all deleted servers in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeletedServersListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.DeletedServersListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.DeletedServerListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeletedServerListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeletedServerListResult>, callback?: msRest.ServiceCallback<Models.DeletedServerListResult>): Promise<Models.DeletedServersListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DeletedServersListResponse>;
  }

  /**
   * Gets a deleted server.
   * @param locationName The name of the region where the resource is located.
   * @param deletedServerName The name of the deleted server.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeletedServersGetResponse>
   */
  get(locationName: string, deletedServerName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeletedServersGetResponse>;
  /**
   * @param locationName The name of the region where the resource is located.
   * @param deletedServerName The name of the deleted server.
   * @param callback The callback
   */
  get(locationName: string, deletedServerName: string, callback: msRest.ServiceCallback<Models.DeletedServer>): void;
  /**
   * @param locationName The name of the region where the resource is located.
   * @param deletedServerName The name of the deleted server.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(locationName: string, deletedServerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeletedServer>): void;
  get(locationName: string, deletedServerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeletedServer>, callback?: msRest.ServiceCallback<Models.DeletedServer>): Promise<Models.DeletedServersGetResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        deletedServerName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DeletedServersGetResponse>;
  }

  /**
   * Gets a list of deleted servers for a location.
   * @param locationName The name of the region where the resource is located.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeletedServersListByLocationResponse>
   */
  listByLocation(locationName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeletedServersListByLocationResponse>;
  /**
   * @param locationName The name of the region where the resource is located.
   * @param callback The callback
   */
  listByLocation(locationName: string, callback: msRest.ServiceCallback<Models.DeletedServerListResult>): void;
  /**
   * @param locationName The name of the region where the resource is located.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByLocation(locationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeletedServerListResult>): void;
  listByLocation(locationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeletedServerListResult>, callback?: msRest.ServiceCallback<Models.DeletedServerListResult>): Promise<Models.DeletedServersListByLocationResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        options
      },
      listByLocationOperationSpec,
      callback) as Promise<Models.DeletedServersListByLocationResponse>;
  }

  /**
   * Recovers a deleted server.
   * @param locationName The name of the region where the resource is located.
   * @param deletedServerName The name of the deleted server.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeletedServersRecoverResponse>
   */
  recover(locationName: string, deletedServerName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeletedServersRecoverResponse> {
    return this.beginRecover(locationName,deletedServerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.DeletedServersRecoverResponse>;
  }

  /**
   * Recovers a deleted server.
   * @param locationName The name of the region where the resource is located.
   * @param deletedServerName The name of the deleted server.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRecover(locationName: string, deletedServerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        locationName,
        deletedServerName,
        options
      },
      beginRecoverOperationSpec,
      options);
  }

  /**
   * Gets a list of all deleted servers in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeletedServersListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DeletedServersListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeletedServerListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeletedServerListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeletedServerListResult>, callback?: msRest.ServiceCallback<Models.DeletedServerListResult>): Promise<Models.DeletedServersListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.DeletedServersListNextResponse>;
  }

  /**
   * Gets a list of deleted servers for a location.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DeletedServersListByLocationNextResponse>
   */
  listByLocationNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DeletedServersListByLocationNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByLocationNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeletedServerListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByLocationNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeletedServerListResult>): void;
  listByLocationNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeletedServerListResult>, callback?: msRest.ServiceCallback<Models.DeletedServerListResult>): Promise<Models.DeletedServersListByLocationNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByLocationNextOperationSpec,
      callback) as Promise<Models.DeletedServersListByLocationNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/deletedServers",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeletedServerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/deletedServers/{deletedServerName}",
  urlParameters: [
    Parameters.locationName,
    Parameters.deletedServerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeletedServer
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByLocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/deletedServers",
  urlParameters: [
    Parameters.locationName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeletedServerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginRecoverOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/deletedServers/{deletedServerName}/recover",
  urlParameters: [
    Parameters.locationName,
    Parameters.deletedServerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeletedServer
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeletedServerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByLocationNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeletedServerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
