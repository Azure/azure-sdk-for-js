/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/maintenanceWindowsOperationsMappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClientContext } from "../sqlManagementClientContext";

/** Class representing a MaintenanceWindowsOperations. */
export class MaintenanceWindowsOperations {
  private readonly client: SqlManagementClientContext;

  /**
   * Create a MaintenanceWindowsOperations.
   * @param {SqlManagementClientContext} client Reference to the service client.
   */
  constructor(client: SqlManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets maintenance windows settings for a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database to get maintenance windows for.
   * @param maintenanceWindowName Maintenance window name.
   * @param [options] The optional parameters
   * @returns Promise<Models.MaintenanceWindowsGetResponse>
   */
  get(resourceGroupName: string, serverName: string, databaseName: string, maintenanceWindowName: string, options?: msRest.RequestOptionsBase): Promise<Models.MaintenanceWindowsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database to get maintenance windows for.
   * @param maintenanceWindowName Maintenance window name.
   * @param callback The callback
   */
  get(resourceGroupName: string, serverName: string, databaseName: string, maintenanceWindowName: string, callback: msRest.ServiceCallback<Models.MaintenanceWindows>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database to get maintenance windows for.
   * @param maintenanceWindowName Maintenance window name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serverName: string, databaseName: string, maintenanceWindowName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.MaintenanceWindows>): void;
  get(resourceGroupName: string, serverName: string, databaseName: string, maintenanceWindowName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.MaintenanceWindows>, callback?: msRest.ServiceCallback<Models.MaintenanceWindows>): Promise<Models.MaintenanceWindowsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        databaseName,
        maintenanceWindowName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.MaintenanceWindowsGetResponse>;
  }

  /**
   * Sets maintenance windows settings for a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database to set maintenance windows for.
   * @param maintenanceWindowName Maintenance window name.
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, maintenanceWindowName: string, parameters: Models.MaintenanceWindows, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database to set maintenance windows for.
   * @param maintenanceWindowName Maintenance window name.
   * @param parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, maintenanceWindowName: string, parameters: Models.MaintenanceWindows, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database to set maintenance windows for.
   * @param maintenanceWindowName Maintenance window name.
   * @param parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, maintenanceWindowName: string, parameters: Models.MaintenanceWindows, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  createOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, maintenanceWindowName: string, parameters: Models.MaintenanceWindows, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        databaseName,
        maintenanceWindowName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/maintenanceWindows/current",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.maintenanceWindowName,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.MaintenanceWindows
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/maintenanceWindows/current",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.maintenanceWindowName,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.MaintenanceWindows,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
