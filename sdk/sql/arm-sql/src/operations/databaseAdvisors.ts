/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/databaseAdvisorsMappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClientContext } from "../sqlManagementClientContext";

/** Class representing a DatabaseAdvisors. */
export class DatabaseAdvisors {
  private readonly client: SqlManagementClientContext;

  /**
   * Create a DatabaseAdvisors.
   * @param {SqlManagementClientContext} client Reference to the service client.
   */
  constructor(client: SqlManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets a list of database advisors.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAdvisorsListByDatabaseResponse>
   */
  listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: Models.DatabaseAdvisorsListByDatabaseOptionalParams): Promise<Models.DatabaseAdvisorsListByDatabaseResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param callback The callback
   */
  listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, callback: msRest.ServiceCallback<Models.Advisor[]>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options: Models.DatabaseAdvisorsListByDatabaseOptionalParams, callback: msRest.ServiceCallback<Models.Advisor[]>): void;
  listByDatabase(resourceGroupName: string, serverName: string, databaseName: string, options?: Models.DatabaseAdvisorsListByDatabaseOptionalParams | msRest.ServiceCallback<Models.Advisor[]>, callback?: msRest.ServiceCallback<Models.Advisor[]>): Promise<Models.DatabaseAdvisorsListByDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        databaseName,
        options
      },
      listByDatabaseOperationSpec,
      callback) as Promise<Models.DatabaseAdvisorsListByDatabaseResponse>;
  }

  /**
   * Gets a database advisor.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param advisorName The name of the Database Advisor.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAdvisorsGetResponse>
   */
  get(resourceGroupName: string, serverName: string, databaseName: string, advisorName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAdvisorsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param advisorName The name of the Database Advisor.
   * @param callback The callback
   */
  get(resourceGroupName: string, serverName: string, databaseName: string, advisorName: string, callback: msRest.ServiceCallback<Models.Advisor>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param advisorName The name of the Database Advisor.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serverName: string, databaseName: string, advisorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Advisor>): void;
  get(resourceGroupName: string, serverName: string, databaseName: string, advisorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Advisor>, callback?: msRest.ServiceCallback<Models.Advisor>): Promise<Models.DatabaseAdvisorsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        databaseName,
        advisorName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DatabaseAdvisorsGetResponse>;
  }

  /**
   * Updates a database advisor.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param advisorName The name of the Database Advisor.
   * @param parameters The requested advisor resource state.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatabaseAdvisorsUpdateResponse>
   */
  update(resourceGroupName: string, serverName: string, databaseName: string, advisorName: string, parameters: Models.Advisor, options?: msRest.RequestOptionsBase): Promise<Models.DatabaseAdvisorsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param advisorName The name of the Database Advisor.
   * @param parameters The requested advisor resource state.
   * @param callback The callback
   */
  update(resourceGroupName: string, serverName: string, databaseName: string, advisorName: string, parameters: Models.Advisor, callback: msRest.ServiceCallback<Models.Advisor>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param advisorName The name of the Database Advisor.
   * @param parameters The requested advisor resource state.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, serverName: string, databaseName: string, advisorName: string, parameters: Models.Advisor, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Advisor>): void;
  update(resourceGroupName: string, serverName: string, databaseName: string, advisorName: string, parameters: Models.Advisor, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Advisor>, callback?: msRest.ServiceCallback<Models.Advisor>): Promise<Models.DatabaseAdvisorsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        databaseName,
        advisorName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.DatabaseAdvisorsUpdateResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.expand,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Advisor"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.advisorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Advisor
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.advisorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Advisor,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Advisor
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
