/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/longTermRetentionBackupsMappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClientContext } from "../sqlManagementClientContext";

/** Class representing a LongTermRetentionBackups. */
export class LongTermRetentionBackups {
  private readonly client: SqlManagementClientContext;

  /**
   * Create a LongTermRetentionBackups.
   * @param {SqlManagementClientContext} client Reference to the service client.
   */
  constructor(client: SqlManagementClientContext) {
    this.client = client;
  }

  /**
   * Copy an existing long term retention backup.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param parameters The parameters needed for long term retention copy request
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsCopyResponse>
   */
  copy(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, parameters: Models.CopyLongTermRetentionBackupParameters, options?: msRest.RequestOptionsBase): Promise<Models.LongTermRetentionBackupsCopyResponse> {
    return this.beginCopy(locationName,longTermRetentionServerName,longTermRetentionDatabaseName,backupName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LongTermRetentionBackupsCopyResponse>;
  }

  /**
   * Updates an existing long term retention backup.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param parameters The requested backup resource state
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsUpdateResponse>
   */
  update(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, parameters: Models.UpdateLongTermRetentionBackupParameters, options?: msRest.RequestOptionsBase): Promise<Models.LongTermRetentionBackupsUpdateResponse> {
    return this.beginUpdate(locationName,longTermRetentionServerName,longTermRetentionDatabaseName,backupName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LongTermRetentionBackupsUpdateResponse>;
  }

  /**
   * Gets a long term retention backup.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsGetResponse>
   */
  get(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options?: msRest.RequestOptionsBase): Promise<Models.LongTermRetentionBackupsGetResponse>;
  /**
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param callback The callback
   */
  get(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, callback: msRest.ServiceCallback<Models.LongTermRetentionBackup>): void;
  /**
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LongTermRetentionBackup>): void;
  get(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LongTermRetentionBackup>, callback?: msRest.ServiceCallback<Models.LongTermRetentionBackup>): Promise<Models.LongTermRetentionBackupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LongTermRetentionBackupsGetResponse>;
  }

  /**
   * Deletes a long term retention backup.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(locationName,longTermRetentionServerName,longTermRetentionDatabaseName,backupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists all long term retention backups for a database.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsListByDatabaseResponse>
   */
  listByDatabase(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, options?: Models.LongTermRetentionBackupsListByDatabaseOptionalParams): Promise<Models.LongTermRetentionBackupsListByDatabaseResponse>;
  /**
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param callback The callback
   */
  listByDatabase(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  /**
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDatabase(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, options: Models.LongTermRetentionBackupsListByDatabaseOptionalParams, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  listByDatabase(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, options?: Models.LongTermRetentionBackupsListByDatabaseOptionalParams | msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionBackupsListByDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        options
      },
      listByDatabaseOperationSpec,
      callback) as Promise<Models.LongTermRetentionBackupsListByDatabaseResponse>;
  }

  /**
   * Lists the long term retention backups for a given location.
   * @param locationName The location of the database
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsListByLocationResponse>
   */
  listByLocation(locationName: string, options?: Models.LongTermRetentionBackupsListByLocationOptionalParams): Promise<Models.LongTermRetentionBackupsListByLocationResponse>;
  /**
   * @param locationName The location of the database
   * @param callback The callback
   */
  listByLocation(locationName: string, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  /**
   * @param locationName The location of the database
   * @param options The optional parameters
   * @param callback The callback
   */
  listByLocation(locationName: string, options: Models.LongTermRetentionBackupsListByLocationOptionalParams, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  listByLocation(locationName: string, options?: Models.LongTermRetentionBackupsListByLocationOptionalParams | msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionBackupsListByLocationResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        options
      },
      listByLocationOperationSpec,
      callback) as Promise<Models.LongTermRetentionBackupsListByLocationResponse>;
  }

  /**
   * Lists the long term retention backups for a given server.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsListByServerResponse>
   */
  listByServer(locationName: string, longTermRetentionServerName: string, options?: Models.LongTermRetentionBackupsListByServerOptionalParams): Promise<Models.LongTermRetentionBackupsListByServerResponse>;
  /**
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param callback The callback
   */
  listByServer(locationName: string, longTermRetentionServerName: string, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  /**
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param options The optional parameters
   * @param callback The callback
   */
  listByServer(locationName: string, longTermRetentionServerName: string, options: Models.LongTermRetentionBackupsListByServerOptionalParams, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  listByServer(locationName: string, longTermRetentionServerName: string, options?: Models.LongTermRetentionBackupsListByServerOptionalParams | msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionBackupsListByServerResponse> {
    return this.client.sendOperationRequest(
      {
        locationName,
        longTermRetentionServerName,
        options
      },
      listByServerOperationSpec,
      callback) as Promise<Models.LongTermRetentionBackupsListByServerResponse>;
  }

  /**
   * Copy an existing long term retention backup to a different server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param parameters The parameters needed for long term retention copy request
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsCopyByResourceGroupResponse>
   */
  copyByResourceGroup(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, parameters: Models.CopyLongTermRetentionBackupParameters, options?: msRest.RequestOptionsBase): Promise<Models.LongTermRetentionBackupsCopyByResourceGroupResponse> {
    return this.beginCopyByResourceGroup(resourceGroupName,locationName,longTermRetentionServerName,longTermRetentionDatabaseName,backupName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LongTermRetentionBackupsCopyByResourceGroupResponse>;
  }

  /**
   * Updates an existing long term retention backup.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param parameters The requested backup resource state
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsUpdateByResourceGroupResponse>
   */
  updateByResourceGroup(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, parameters: Models.UpdateLongTermRetentionBackupParameters, options?: msRest.RequestOptionsBase): Promise<Models.LongTermRetentionBackupsUpdateByResourceGroupResponse> {
    return this.beginUpdateByResourceGroup(resourceGroupName,locationName,longTermRetentionServerName,longTermRetentionDatabaseName,backupName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LongTermRetentionBackupsUpdateByResourceGroupResponse>;
  }

  /**
   * Gets a long term retention backup.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsGetByResourceGroupResponse>
   */
  getByResourceGroup(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options?: msRest.RequestOptionsBase): Promise<Models.LongTermRetentionBackupsGetByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param callback The callback
   */
  getByResourceGroup(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, callback: msRest.ServiceCallback<Models.LongTermRetentionBackup>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getByResourceGroup(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LongTermRetentionBackup>): void;
  getByResourceGroup(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LongTermRetentionBackup>, callback?: msRest.ServiceCallback<Models.LongTermRetentionBackup>): Promise<Models.LongTermRetentionBackupsGetByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        options
      },
      getByResourceGroupOperationSpec,
      callback) as Promise<Models.LongTermRetentionBackupsGetByResourceGroupResponse>;
  }

  /**
   * Deletes a long term retention backup.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteByResourceGroup(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteByResourceGroup(resourceGroupName,locationName,longTermRetentionServerName,longTermRetentionDatabaseName,backupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists all long term retention backups for a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsListByResourceGroupDatabaseResponse>
   */
  listByResourceGroupDatabase(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, options?: Models.LongTermRetentionBackupsListByResourceGroupDatabaseOptionalParams): Promise<Models.LongTermRetentionBackupsListByResourceGroupDatabaseResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param callback The callback
   */
  listByResourceGroupDatabase(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupDatabase(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, options: Models.LongTermRetentionBackupsListByResourceGroupDatabaseOptionalParams, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  listByResourceGroupDatabase(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, options?: Models.LongTermRetentionBackupsListByResourceGroupDatabaseOptionalParams | msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionBackupsListByResourceGroupDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        options
      },
      listByResourceGroupDatabaseOperationSpec,
      callback) as Promise<Models.LongTermRetentionBackupsListByResourceGroupDatabaseResponse>;
  }

  /**
   * Lists the long term retention backups for a given location.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsListByResourceGroupLocationResponse>
   */
  listByResourceGroupLocation(resourceGroupName: string, locationName: string, options?: Models.LongTermRetentionBackupsListByResourceGroupLocationOptionalParams): Promise<Models.LongTermRetentionBackupsListByResourceGroupLocationResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param callback The callback
   */
  listByResourceGroupLocation(resourceGroupName: string, locationName: string, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupLocation(resourceGroupName: string, locationName: string, options: Models.LongTermRetentionBackupsListByResourceGroupLocationOptionalParams, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  listByResourceGroupLocation(resourceGroupName: string, locationName: string, options?: Models.LongTermRetentionBackupsListByResourceGroupLocationOptionalParams | msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionBackupsListByResourceGroupLocationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        locationName,
        options
      },
      listByResourceGroupLocationOperationSpec,
      callback) as Promise<Models.LongTermRetentionBackupsListByResourceGroupLocationResponse>;
  }

  /**
   * Lists the long term retention backups for a given server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsListByResourceGroupServerResponse>
   */
  listByResourceGroupServer(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, options?: Models.LongTermRetentionBackupsListByResourceGroupServerOptionalParams): Promise<Models.LongTermRetentionBackupsListByResourceGroupServerResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param callback The callback
   */
  listByResourceGroupServer(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupServer(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, options: Models.LongTermRetentionBackupsListByResourceGroupServerOptionalParams, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  listByResourceGroupServer(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, options?: Models.LongTermRetentionBackupsListByResourceGroupServerOptionalParams | msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionBackupsListByResourceGroupServerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        options
      },
      listByResourceGroupServerOperationSpec,
      callback) as Promise<Models.LongTermRetentionBackupsListByResourceGroupServerResponse>;
  }

  /**
   * Copy an existing long term retention backup.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param parameters The parameters needed for long term retention copy request
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCopy(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, parameters: Models.CopyLongTermRetentionBackupParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        parameters,
        options
      },
      beginCopyOperationSpec,
      options);
  }

  /**
   * Updates an existing long term retention backup.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param parameters The requested backup resource state
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, parameters: Models.UpdateLongTermRetentionBackupParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a long term retention backup.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Copy an existing long term retention backup to a different server.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param parameters The parameters needed for long term retention copy request
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCopyByResourceGroup(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, parameters: Models.CopyLongTermRetentionBackupParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        parameters,
        options
      },
      beginCopyByResourceGroupOperationSpec,
      options);
  }

  /**
   * Updates an existing long term retention backup.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database.
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param parameters The requested backup resource state
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdateByResourceGroup(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, parameters: Models.UpdateLongTermRetentionBackupParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        parameters,
        options
      },
      beginUpdateByResourceGroupOperationSpec,
      options);
  }

  /**
   * Deletes a long term retention backup.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param locationName The location of the database
   * @param longTermRetentionServerName The name of the server
   * @param longTermRetentionDatabaseName The name of the database
   * @param backupName The backup name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteByResourceGroup(resourceGroupName: string, locationName: string, longTermRetentionServerName: string, longTermRetentionDatabaseName: string, backupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        locationName,
        longTermRetentionServerName,
        longTermRetentionDatabaseName,
        backupName,
        options
      },
      beginDeleteByResourceGroupOperationSpec,
      options);
  }

  /**
   * Lists all long term retention backups for a database.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsListByDatabaseNextResponse>
   */
  listByDatabaseNext(nextPageLink: string, options?: Models.LongTermRetentionBackupsListByDatabaseNextOptionalParams): Promise<Models.LongTermRetentionBackupsListByDatabaseNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByDatabaseNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDatabaseNext(nextPageLink: string, options: Models.LongTermRetentionBackupsListByDatabaseNextOptionalParams, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  listByDatabaseNext(nextPageLink: string, options?: Models.LongTermRetentionBackupsListByDatabaseNextOptionalParams | msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionBackupsListByDatabaseNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByDatabaseNextOperationSpec,
      callback) as Promise<Models.LongTermRetentionBackupsListByDatabaseNextResponse>;
  }

  /**
   * Lists the long term retention backups for a given location.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsListByLocationNextResponse>
   */
  listByLocationNext(nextPageLink: string, options?: Models.LongTermRetentionBackupsListByLocationNextOptionalParams): Promise<Models.LongTermRetentionBackupsListByLocationNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByLocationNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByLocationNext(nextPageLink: string, options: Models.LongTermRetentionBackupsListByLocationNextOptionalParams, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  listByLocationNext(nextPageLink: string, options?: Models.LongTermRetentionBackupsListByLocationNextOptionalParams | msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionBackupsListByLocationNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByLocationNextOperationSpec,
      callback) as Promise<Models.LongTermRetentionBackupsListByLocationNextResponse>;
  }

  /**
   * Lists the long term retention backups for a given server.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsListByServerNextResponse>
   */
  listByServerNext(nextPageLink: string, options?: Models.LongTermRetentionBackupsListByServerNextOptionalParams): Promise<Models.LongTermRetentionBackupsListByServerNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByServerNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByServerNext(nextPageLink: string, options: Models.LongTermRetentionBackupsListByServerNextOptionalParams, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  listByServerNext(nextPageLink: string, options?: Models.LongTermRetentionBackupsListByServerNextOptionalParams | msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionBackupsListByServerNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByServerNextOperationSpec,
      callback) as Promise<Models.LongTermRetentionBackupsListByServerNextResponse>;
  }

  /**
   * Lists all long term retention backups for a database.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsListByResourceGroupDatabaseNextResponse>
   */
  listByResourceGroupDatabaseNext(nextPageLink: string, options?: Models.LongTermRetentionBackupsListByResourceGroupDatabaseNextOptionalParams): Promise<Models.LongTermRetentionBackupsListByResourceGroupDatabaseNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupDatabaseNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupDatabaseNext(nextPageLink: string, options: Models.LongTermRetentionBackupsListByResourceGroupDatabaseNextOptionalParams, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  listByResourceGroupDatabaseNext(nextPageLink: string, options?: Models.LongTermRetentionBackupsListByResourceGroupDatabaseNextOptionalParams | msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionBackupsListByResourceGroupDatabaseNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupDatabaseNextOperationSpec,
      callback) as Promise<Models.LongTermRetentionBackupsListByResourceGroupDatabaseNextResponse>;
  }

  /**
   * Lists the long term retention backups for a given location.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsListByResourceGroupLocationNextResponse>
   */
  listByResourceGroupLocationNext(nextPageLink: string, options?: Models.LongTermRetentionBackupsListByResourceGroupLocationNextOptionalParams): Promise<Models.LongTermRetentionBackupsListByResourceGroupLocationNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupLocationNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupLocationNext(nextPageLink: string, options: Models.LongTermRetentionBackupsListByResourceGroupLocationNextOptionalParams, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  listByResourceGroupLocationNext(nextPageLink: string, options?: Models.LongTermRetentionBackupsListByResourceGroupLocationNextOptionalParams | msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionBackupsListByResourceGroupLocationNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupLocationNextOperationSpec,
      callback) as Promise<Models.LongTermRetentionBackupsListByResourceGroupLocationNextResponse>;
  }

  /**
   * Lists the long term retention backups for a given server.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LongTermRetentionBackupsListByResourceGroupServerNextResponse>
   */
  listByResourceGroupServerNext(nextPageLink: string, options?: Models.LongTermRetentionBackupsListByResourceGroupServerNextOptionalParams): Promise<Models.LongTermRetentionBackupsListByResourceGroupServerNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupServerNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupServerNext(nextPageLink: string, options: Models.LongTermRetentionBackupsListByResourceGroupServerNextOptionalParams, callback: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): void;
  listByResourceGroupServerNext(nextPageLink: string, options?: Models.LongTermRetentionBackupsListByResourceGroupServerNextOptionalParams | msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>, callback?: msRest.ServiceCallback<Models.LongTermRetentionBackupListResult>): Promise<Models.LongTermRetentionBackupsListByResourceGroupServerNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupServerNextOperationSpec,
      callback) as Promise<Models.LongTermRetentionBackupsListByResourceGroupServerNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
  urlParameters: [
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups",
  urlParameters: [
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByLocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups",
  urlParameters: [
    Parameters.locationName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByServerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups",
  urlParameters: [
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackup
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupLocationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupServerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCopyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/copy",
  urlParameters: [
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CopyLongTermRetentionBackupParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/update",
  urlParameters: [
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.UpdateLongTermRetentionBackupParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
  urlParameters: [
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCopyByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/copy",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CopyLongTermRetentionBackupParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/update",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.UpdateLongTermRetentionBackupParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupOperationResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.locationName,
    Parameters.longTermRetentionServerName,
    Parameters.longTermRetentionDatabaseName,
    Parameters.backupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByDatabaseNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByLocationNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByServerNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupDatabaseNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupLocationNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupServerNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.onlyLatestPerDatabase,
    Parameters.databaseState,
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LongTermRetentionBackupListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
