/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { DatabaseVulnerabilityAssessmentScans } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SqlManagementClient } from "../sqlManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  VulnerabilityAssessmentScanRecord,
  VulnerabilityAssessmentName,
  DatabaseVulnerabilityAssessmentScansListByDatabaseNextOptionalParams,
  DatabaseVulnerabilityAssessmentScansListByDatabaseOptionalParams,
  DatabaseVulnerabilityAssessmentScansListByDatabaseResponse,
  DatabaseVulnerabilityAssessmentScansInitiateScanOptionalParams,
  DatabaseVulnerabilityAssessmentScansGetOptionalParams,
  DatabaseVulnerabilityAssessmentScansGetResponse,
  DatabaseVulnerabilityAssessmentScansExportOptionalParams,
  DatabaseVulnerabilityAssessmentScansExportResponse,
  DatabaseVulnerabilityAssessmentScansListByDatabaseNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DatabaseVulnerabilityAssessmentScans operations. */
export class DatabaseVulnerabilityAssessmentScansImpl
  implements DatabaseVulnerabilityAssessmentScans {
  private readonly client: SqlManagementClient;

  /**
   * Initialize a new instance of the class DatabaseVulnerabilityAssessmentScans class.
   * @param client Reference to the service client
   */
  constructor(client: SqlManagementClient) {
    this.client = client;
  }

  /**
   * Lists the vulnerability assessment scans of a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param options The options parameters.
   */
  public listByDatabase(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: DatabaseVulnerabilityAssessmentScansListByDatabaseOptionalParams
  ): PagedAsyncIterableIterator<VulnerabilityAssessmentScanRecord> {
    const iter = this.listByDatabasePagingAll(
      resourceGroupName,
      serverName,
      databaseName,
      vulnerabilityAssessmentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByDatabasePagingPage(
          resourceGroupName,
          serverName,
          databaseName,
          vulnerabilityAssessmentName,
          options,
          settings
        );
      }
    };
  }

  private async *listByDatabasePagingPage(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: DatabaseVulnerabilityAssessmentScansListByDatabaseOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<VulnerabilityAssessmentScanRecord[]> {
    let result: DatabaseVulnerabilityAssessmentScansListByDatabaseResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByDatabase(
        resourceGroupName,
        serverName,
        databaseName,
        vulnerabilityAssessmentName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByDatabaseNext(
        resourceGroupName,
        serverName,
        databaseName,
        vulnerabilityAssessmentName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByDatabasePagingAll(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: DatabaseVulnerabilityAssessmentScansListByDatabaseOptionalParams
  ): AsyncIterableIterator<VulnerabilityAssessmentScanRecord> {
    for await (const page of this.listByDatabasePagingPage(
      resourceGroupName,
      serverName,
      databaseName,
      vulnerabilityAssessmentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Executes a Vulnerability Assessment database scan.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param options The options parameters.
   */
  async beginInitiateScan(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    scanId: string,
    options?: DatabaseVulnerabilityAssessmentScansInitiateScanOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        serverName,
        databaseName,
        vulnerabilityAssessmentName,
        scanId,
        options
      },
      initiateScanOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Executes a Vulnerability Assessment database scan.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param options The options parameters.
   */
  async beginInitiateScanAndWait(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    scanId: string,
    options?: DatabaseVulnerabilityAssessmentScansInitiateScanOptionalParams
  ): Promise<void> {
    const poller = await this.beginInitiateScan(
      resourceGroupName,
      serverName,
      databaseName,
      vulnerabilityAssessmentName,
      scanId,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists the vulnerability assessment scans of a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param options The options parameters.
   */
  private _listByDatabase(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: DatabaseVulnerabilityAssessmentScansListByDatabaseOptionalParams
  ): Promise<DatabaseVulnerabilityAssessmentScansListByDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        databaseName,
        vulnerabilityAssessmentName,
        options
      },
      listByDatabaseOperationSpec
    );
  }

  /**
   * Gets a vulnerability assessment scan record of a database.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    scanId: string,
    options?: DatabaseVulnerabilityAssessmentScansGetOptionalParams
  ): Promise<DatabaseVulnerabilityAssessmentScansGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        databaseName,
        vulnerabilityAssessmentName,
        scanId,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Convert an existing scan result to a human readable format. If already exists nothing happens
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the scanned database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param scanId The vulnerability assessment scan Id.
   * @param options The options parameters.
   */
  export(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    scanId: string,
    options?: DatabaseVulnerabilityAssessmentScansExportOptionalParams
  ): Promise<DatabaseVulnerabilityAssessmentScansExportResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        databaseName,
        vulnerabilityAssessmentName,
        scanId,
        options
      },
      exportOperationSpec
    );
  }

  /**
   * ListByDatabaseNext
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param nextLink The nextLink from the previous successful call to the ListByDatabase method.
   * @param options The options parameters.
   */
  private _listByDatabaseNext(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    nextLink: string,
    options?: DatabaseVulnerabilityAssessmentScansListByDatabaseNextOptionalParams
  ): Promise<DatabaseVulnerabilityAssessmentScansListByDatabaseNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serverName,
        databaseName,
        vulnerabilityAssessmentName,
        nextLink,
        options
      },
      listByDatabaseNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const initiateScanOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.scanId
  ],
  serializer
};
const listByDatabaseOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VulnerabilityAssessmentScanRecordListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.vulnerabilityAssessmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VulnerabilityAssessmentScanRecord
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.scanId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const exportOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseVulnerabilityAssessmentScansExport
    },
    201: {
      bodyMapper: Mappers.DatabaseVulnerabilityAssessmentScansExport
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.scanId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByDatabaseNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VulnerabilityAssessmentScanRecordListResult
    },
    default: {}
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serverName,
    Parameters.databaseName,
    Parameters.nextLink,
    Parameters.vulnerabilityAssessmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
