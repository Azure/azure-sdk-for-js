/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  ServerTrustCertificate,
  ServerTrustCertificatesListByInstanceOptionalParams,
  ServerTrustCertificatesGetOptionalParams,
  ServerTrustCertificatesGetResponse,
  ServerTrustCertificatesCreateOrUpdateOptionalParams,
  ServerTrustCertificatesCreateOrUpdateResponse,
  ServerTrustCertificatesDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ServerTrustCertificates. */
export interface ServerTrustCertificates {
  /**
   * Gets a list of server trust certificates that were uploaded from box to the given Sql Managed
   * Instance.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param options The options parameters.
   */
  listByInstance(
    resourceGroupName: string,
    managedInstanceName: string,
    options?: ServerTrustCertificatesListByInstanceOptionalParams
  ): PagedAsyncIterableIterator<ServerTrustCertificate>;
  /**
   * Gets a server trust certificate that was uploaded from box to Sql Managed Instance.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param certificateName Name of of the certificate to get.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    managedInstanceName: string,
    certificateName: string,
    options?: ServerTrustCertificatesGetOptionalParams
  ): Promise<ServerTrustCertificatesGetResponse>;
  /**
   * Uploads a server trust certificate from box to Sql Managed Instance.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param certificateName Name of of the certificate to upload.
   * @param parameters The server trust certificate info.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    managedInstanceName: string,
    certificateName: string,
    parameters: ServerTrustCertificate,
    options?: ServerTrustCertificatesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ServerTrustCertificatesCreateOrUpdateResponse>,
      ServerTrustCertificatesCreateOrUpdateResponse
    >
  >;
  /**
   * Uploads a server trust certificate from box to Sql Managed Instance.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param certificateName Name of of the certificate to upload.
   * @param parameters The server trust certificate info.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    managedInstanceName: string,
    certificateName: string,
    parameters: ServerTrustCertificate,
    options?: ServerTrustCertificatesCreateOrUpdateOptionalParams
  ): Promise<ServerTrustCertificatesCreateOrUpdateResponse>;
  /**
   * Deletes a server trust certificate that was uploaded from box to Sql Managed Instance.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param certificateName Name of of the certificate to delete.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    managedInstanceName: string,
    certificateName: string,
    options?: ServerTrustCertificatesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a server trust certificate that was uploaded from box to Sql Managed Instance.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param managedInstanceName The name of the managed instance.
   * @param certificateName Name of of the certificate to delete.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    managedInstanceName: string,
    certificateName: string,
    options?: ServerTrustCertificatesDeleteOptionalParams
  ): Promise<void>;
}
