/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  ImportExportExtensionsOperationResult,
  DatabaseExtensionsListByDatabaseOptionalParams,
  DatabaseExtensionsGetOptionalParams,
  DatabaseExtensions,
  DatabaseExtensionsCreateOrUpdateOptionalParams,
  DatabaseExtensionsCreateOrUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a DatabaseExtensionsOperations. */
export interface DatabaseExtensionsOperations {
  /**
   * List database extension. This will return an empty list as it is not supported.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param options The options parameters.
   */
  listByDatabase(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    options?: DatabaseExtensionsListByDatabaseOptionalParams
  ): PagedAsyncIterableIterator<ImportExportExtensionsOperationResult>;
  /**
   * Gets a database extension. This will return resource not found as it is not supported.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param extensionName
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    extensionName: string,
    options?: DatabaseExtensionsGetOptionalParams
  ): Promise<void>;
  /**
   * Perform a database extension operation, like polybase import
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param extensionName
   * @param parameters The database import request parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    extensionName: string,
    parameters: DatabaseExtensions,
    options?: DatabaseExtensionsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DatabaseExtensionsCreateOrUpdateResponse>,
      DatabaseExtensionsCreateOrUpdateResponse
    >
  >;
  /**
   * Perform a database extension operation, like polybase import
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the database.
   * @param extensionName
   * @param parameters The database import request parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    extensionName: string,
    parameters: DatabaseExtensions,
    options?: DatabaseExtensionsCreateOrUpdateOptionalParams
  ): Promise<DatabaseExtensionsCreateOrUpdateResponse>;
}
