/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  LogicalDatabaseTransparentDataEncryption,
  TransparentDataEncryptionsListByDatabaseOptionalParams,
  TransparentDataEncryptionName,
  TransparentDataEncryptionsGetOptionalParams,
  TransparentDataEncryptionsGetResponse,
  TransparentDataEncryptionsCreateOrUpdateOptionalParams,
  TransparentDataEncryptionsCreateOrUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a TransparentDataEncryptions. */
export interface TransparentDataEncryptions {
  /**
   * Gets a list of the logical database's transparent data encryption.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the logical database for which the transparent data encryption is
   *                     defined.
   * @param options The options parameters.
   */
  listByDatabase(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    options?: TransparentDataEncryptionsListByDatabaseOptionalParams
  ): PagedAsyncIterableIterator<LogicalDatabaseTransparentDataEncryption>;
  /**
   * Gets a logical database's transparent data encryption.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the logical database for which the transparent data encryption is
   *                     defined.
   * @param tdeName The name of the transparent data encryption configuration.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    tdeName: TransparentDataEncryptionName,
    options?: TransparentDataEncryptionsGetOptionalParams
  ): Promise<TransparentDataEncryptionsGetResponse>;
  /**
   * Updates a logical database's transparent data encryption configuration.
   * @param resourceGroupName The name of the resource group that contains the resource. You can obtain
   *                          this value from the Azure Resource Manager API or the portal.
   * @param serverName The name of the server.
   * @param databaseName The name of the logical database for which the security alert policy is defined.
   * @param tdeName The name of the transparent data encryption configuration.
   * @param parameters The database transparent data encryption.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    serverName: string,
    databaseName: string,
    tdeName: TransparentDataEncryptionName,
    parameters: LogicalDatabaseTransparentDataEncryption,
    options?: TransparentDataEncryptionsCreateOrUpdateOptionalParams
  ): Promise<TransparentDataEncryptionsCreateOrUpdateResponse>;
}
