/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  DataConnectorUnion,
  DataConnectorsListOptionalParams,
  DataConnectorsGetOptionalParams,
  DataConnectorsGetResponse,
  DataConnectorsCreateOrUpdateOptionalParams,
  DataConnectorsCreateOrUpdateResponse,
  DataConnectorsDeleteOptionalParams,
  DataConnectorConnectBody,
  DataConnectorsConnectOptionalParams,
  DataConnectorsDisconnectOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a DataConnectors. */
export interface DataConnectors {
  /**
   * Gets all data connectors.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    workspaceName: string,
    options?: DataConnectorsListOptionalParams
  ): PagedAsyncIterableIterator<DataConnectorUnion>;
  /**
   * Gets a data connector.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataConnectorId Connector ID
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    dataConnectorId: string,
    options?: DataConnectorsGetOptionalParams
  ): Promise<DataConnectorsGetResponse>;
  /**
   * Creates or updates the data connector.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataConnectorId Connector ID
   * @param dataConnector The data connector
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    workspaceName: string,
    dataConnectorId: string,
    dataConnector: DataConnectorUnion,
    options?: DataConnectorsCreateOrUpdateOptionalParams
  ): Promise<DataConnectorsCreateOrUpdateResponse>;
  /**
   * Delete the data connector.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataConnectorId Connector ID
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    workspaceName: string,
    dataConnectorId: string,
    options?: DataConnectorsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Connects a data connector.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataConnectorId Connector ID
   * @param connectBody The data connector
   * @param options The options parameters.
   */
  connect(
    resourceGroupName: string,
    workspaceName: string,
    dataConnectorId: string,
    connectBody: DataConnectorConnectBody,
    options?: DataConnectorsConnectOptionalParams
  ): Promise<void>;
  /**
   * Disconnect a data connector.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataConnectorId Connector ID
   * @param options The options parameters.
   */
  disconnect(
    resourceGroupName: string,
    workspaceName: string,
    dataConnectorId: string,
    options?: DataConnectorsDisconnectOptionalParams
  ): Promise<void>;
}
