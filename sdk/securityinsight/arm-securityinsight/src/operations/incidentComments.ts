/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/incidentCommentsMappers";
import * as Parameters from "../models/parameters";
import { SecurityInsightsContext } from "../securityInsightsContext";

/** Class representing a IncidentComments. */
export class IncidentComments {
  private readonly client: SecurityInsightsContext;

  /**
   * Create a IncidentComments.
   * @param {SecurityInsightsContext} client Reference to the service client.
   */
  constructor(client: SecurityInsightsContext) {
    this.client = client;
  }

  /**
   * Gets all incident comments.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param [options] The optional parameters
   * @returns Promise<Models.IncidentCommentsListByIncidentResponse>
   */
  listByIncident(resourceGroupName: string, workspaceName: string, incidentId: string, options?: Models.IncidentCommentsListByIncidentOptionalParams): Promise<Models.IncidentCommentsListByIncidentResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param callback The callback
   */
  listByIncident(resourceGroupName: string, workspaceName: string, incidentId: string, callback: msRest.ServiceCallback<Models.IncidentCommentList>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param options The optional parameters
   * @param callback The callback
   */
  listByIncident(resourceGroupName: string, workspaceName: string, incidentId: string, options: Models.IncidentCommentsListByIncidentOptionalParams, callback: msRest.ServiceCallback<Models.IncidentCommentList>): void;
  listByIncident(resourceGroupName: string, workspaceName: string, incidentId: string, options?: Models.IncidentCommentsListByIncidentOptionalParams | msRest.ServiceCallback<Models.IncidentCommentList>, callback?: msRest.ServiceCallback<Models.IncidentCommentList>): Promise<Models.IncidentCommentsListByIncidentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        incidentId,
        options
      },
      listByIncidentOperationSpec,
      callback) as Promise<Models.IncidentCommentsListByIncidentResponse>;
  }

  /**
   * Gets an incident comment.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param incidentCommentId Incident comment ID
   * @param [options] The optional parameters
   * @returns Promise<Models.IncidentCommentsGetResponse>
   */
  get(resourceGroupName: string, workspaceName: string, incidentId: string, incidentCommentId: string, options?: msRest.RequestOptionsBase): Promise<Models.IncidentCommentsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param incidentCommentId Incident comment ID
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, incidentId: string, incidentCommentId: string, callback: msRest.ServiceCallback<Models.IncidentComment>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param incidentCommentId Incident comment ID
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, incidentId: string, incidentCommentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IncidentComment>): void;
  get(resourceGroupName: string, workspaceName: string, incidentId: string, incidentCommentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IncidentComment>, callback?: msRest.ServiceCallback<Models.IncidentComment>): Promise<Models.IncidentCommentsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        incidentId,
        incidentCommentId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.IncidentCommentsGetResponse>;
  }

  /**
   * Creates the incident comment.
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param incidentCommentId Incident comment ID
   * @param incidentComment The incident comment
   * @param [options] The optional parameters
   * @returns Promise<Models.IncidentCommentsCreateCommentResponse>
   */
  createComment(resourceGroupName: string, workspaceName: string, incidentId: string, incidentCommentId: string, incidentComment: Models.IncidentComment, options?: msRest.RequestOptionsBase): Promise<Models.IncidentCommentsCreateCommentResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param incidentCommentId Incident comment ID
   * @param incidentComment The incident comment
   * @param callback The callback
   */
  createComment(resourceGroupName: string, workspaceName: string, incidentId: string, incidentCommentId: string, incidentComment: Models.IncidentComment, callback: msRest.ServiceCallback<Models.IncidentComment>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param incidentId Incident ID
   * @param incidentCommentId Incident comment ID
   * @param incidentComment The incident comment
   * @param options The optional parameters
   * @param callback The callback
   */
  createComment(resourceGroupName: string, workspaceName: string, incidentId: string, incidentCommentId: string, incidentComment: Models.IncidentComment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IncidentComment>): void;
  createComment(resourceGroupName: string, workspaceName: string, incidentId: string, incidentCommentId: string, incidentComment: Models.IncidentComment, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IncidentComment>, callback?: msRest.ServiceCallback<Models.IncidentComment>): Promise<Models.IncidentCommentsCreateCommentResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        incidentId,
        incidentCommentId,
        incidentComment,
        options
      },
      createCommentOperationSpec,
      callback) as Promise<Models.IncidentCommentsCreateCommentResponse>;
  }

  /**
   * Gets all incident comments.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IncidentCommentsListByIncidentNextResponse>
   */
  listByIncidentNext(nextPageLink: string, options?: Models.IncidentCommentsListByIncidentNextOptionalParams): Promise<Models.IncidentCommentsListByIncidentNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByIncidentNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IncidentCommentList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByIncidentNext(nextPageLink: string, options: Models.IncidentCommentsListByIncidentNextOptionalParams, callback: msRest.ServiceCallback<Models.IncidentCommentList>): void;
  listByIncidentNext(nextPageLink: string, options?: Models.IncidentCommentsListByIncidentNextOptionalParams | msRest.ServiceCallback<Models.IncidentCommentList>, callback?: msRest.ServiceCallback<Models.IncidentCommentList>): Promise<Models.IncidentCommentsListByIncidentNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByIncidentNextOperationSpec,
      callback) as Promise<Models.IncidentCommentsListByIncidentNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByIncidentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/comments",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.incidentId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.orderby,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IncidentCommentList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/comments/{incidentCommentId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.incidentId,
    Parameters.incidentCommentId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IncidentComment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createCommentOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}/comments/{incidentCommentId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.incidentId,
    Parameters.incidentCommentId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "incidentComment",
    mapper: {
      ...Mappers.IncidentComment,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.IncidentComment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByIncidentNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.orderby,
    Parameters.top,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IncidentCommentList
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
