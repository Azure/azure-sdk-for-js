/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { DataConnectorsCheckRequirementsOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SecurityInsights } from "../securityInsights";
import {
  DataConnectorsCheckRequirementsUnion,
  DataConnectorsCheckRequirementsPostOptionalParams,
  DataConnectorsCheckRequirementsPostResponse
} from "../models";

/** Class containing DataConnectorsCheckRequirementsOperations operations. */
export class DataConnectorsCheckRequirementsOperationsImpl
  implements DataConnectorsCheckRequirementsOperations {
  private readonly client: SecurityInsights;

  /**
   * Initialize a new instance of the class DataConnectorsCheckRequirementsOperations class.
   * @param client Reference to the service client
   */
  constructor(client: SecurityInsights) {
    this.client = client;
  }

  /**
   * Get requirements state for a data connector type.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param dataConnectorsCheckRequirements The parameters for requirements check message
   * @param options The options parameters.
   */
  post(
    resourceGroupName: string,
    workspaceName: string,
    dataConnectorsCheckRequirements: DataConnectorsCheckRequirementsUnion,
    options?: DataConnectorsCheckRequirementsPostOptionalParams
  ): Promise<DataConnectorsCheckRequirementsPostResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        dataConnectorsCheckRequirements,
        options
      },
      postOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const postOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectorsCheckRequirements",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DataConnectorRequirementsState
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.dataConnectorsCheckRequirements,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
