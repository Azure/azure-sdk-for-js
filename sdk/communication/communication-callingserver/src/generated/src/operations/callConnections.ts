/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CallingServerApiClientContext } from "../callingServerApiClientContext";
import {
  CreateCallRequest,
  CallConnectionsCreateCallResponse,
  PlayAudioRequest,
  CallConnectionsPlayAudioResponse,
  CancelAllMediaOperationsRequest,
  CallConnectionsCancelAllMediaOperationsResponse,
  AddParticipantRequest,
  CallConnectionsAddParticipantResponse
} from "../models";

/** Class representing a CallConnections. */
export class CallConnections {
  private readonly client: CallingServerApiClientContext;

  /**
   * Initialize a new instance of the class CallConnections class.
   * @param client Reference to the service client
   */
  constructor(client: CallingServerApiClientContext) {
    this.client = client;
  }

  /**
   * Create a new call.
   * @param callRequest Create call request.
   * @param options The options parameters.
   */
  createCall(
    callRequest: CreateCallRequest,
    options?: coreHttp.OperationOptions
  ): Promise<CallConnectionsCreateCallResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      callRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createCallOperationSpec
    ) as Promise<CallConnectionsCreateCallResponse>;
  }

  /**
   * Hangup the call.
   * @param callConnectionId The call connection id.
   * @param options The options parameters.
   */
  hangupCall(
    callConnectionId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      callConnectionId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      hangupCallOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Play audio in the call.
   * @param callConnectionId The call connection id.
   * @param request Play audio request.
   * @param options The options parameters.
   */
  playAudio(
    callConnectionId: string,
    request: PlayAudioRequest,
    options?: coreHttp.OperationOptions
  ): Promise<CallConnectionsPlayAudioResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      callConnectionId,
      request,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      playAudioOperationSpec
    ) as Promise<CallConnectionsPlayAudioResponse>;
  }

  /**
   * Cancel all media operations.
   * @param callConnectionId The call connection id
   * @param cancelAllMediaOperationRequest The cancel all media operations context.
   * @param options The options parameters.
   */
  cancelAllMediaOperations(
    callConnectionId: string,
    cancelAllMediaOperationRequest: CancelAllMediaOperationsRequest,
    options?: coreHttp.OperationOptions
  ): Promise<CallConnectionsCancelAllMediaOperationsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      callConnectionId,
      cancelAllMediaOperationRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      cancelAllMediaOperationsOperationSpec
    ) as Promise<CallConnectionsCancelAllMediaOperationsResponse>;
  }

  /**
   * Add a participant to the call.
   * @param callConnectionId The call connection id.
   * @param addParticipantRequest Add participant request.
   * @param options The options parameters.
   */
  addParticipant(
    callConnectionId: string,
    addParticipantRequest: AddParticipantRequest,
    options?: coreHttp.OperationOptions
  ): Promise<CallConnectionsAddParticipantResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      callConnectionId,
      addParticipantRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      addParticipantOperationSpec
    ) as Promise<CallConnectionsAddParticipantResponse>;
  }

  /**
   * Remove a participant from the call.
   * @param callConnectionId The call connection id.
   * @param participantId The participant id.
   * @param options The options parameters.
   */
  removeParticipant(
    callConnectionId: string,
    participantId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      callConnectionId,
      participantId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      removeParticipantOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createCallOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/callConnections",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.CreateCallResult
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.callRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const hangupCallOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/callConnections/{callConnectionId}/:hangup",
  httpMethod: "POST",
  responses: {
    202: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
  headerParameters: [Parameters.accept],
  serializer
};
const playAudioOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/callConnections/{callConnectionId}/:playAudio",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.PlayAudioResult
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.request,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const cancelAllMediaOperationsOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/callConnections/{callConnectionId}/:cancelAllMediaOperations",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CancelAllMediaOperationsResult
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.cancelAllMediaOperationRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const addParticipantOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/callConnections/{callConnectionId}/participants",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.AddParticipantResult
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.addParticipantRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const removeParticipantOperationSpec: coreHttp.OperationSpec = {
  path:
    "/calling/callConnections/{callConnectionId}/participants/{participantId}",
  httpMethod: "DELETE",
  responses: {
    202: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.callConnectionId,
    Parameters.participantId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
