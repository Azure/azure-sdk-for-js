/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CallingServerApiClientContext } from "../callingServerApiClientContext";
import {
  AddParticipantRequest,
  ServerCallsAddParticipantResponse,
  StartCallRecordingRequest,
  ServerCallsStartRecordingResponse,
  ServerCallsGetRecordingPropertiesResponse,
  JoinCallRequest,
  ServerCallsJoinCallResponse,
  PlayAudioRequest,
  ServerCallsPlayAudioResponse
} from "../models";

/** Class representing a ServerCalls. */
export class ServerCalls {
  private readonly client: CallingServerApiClientContext;

  /**
   * Initialize a new instance of the class ServerCalls class.
   * @param client Reference to the service client
   */
  constructor(client: CallingServerApiClientContext) {
    this.client = client;
  }

  /**
   * Add a participant to the call.
   * @param serverCallId The server call id.
   * @param addParticipantRequest The add participant request.
   * @param options The options parameters.
   */
  addParticipant(
    serverCallId: string,
    addParticipantRequest: AddParticipantRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ServerCallsAddParticipantResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      serverCallId,
      addParticipantRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      addParticipantOperationSpec
    ) as Promise<ServerCallsAddParticipantResponse>;
  }

  /**
   * Remove participant from the call.
   * @param serverCallId Server call id.
   * @param participantId Participant id.
   * @param options The options parameters.
   */
  removeParticipant(
    serverCallId: string,
    participantId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      serverCallId,
      participantId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      removeParticipantOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Start recording of the call.
   * @param serverCallId The server call id.
   * @param request The request body of start call recording request.
   * @param options The options parameters.
   */
  startRecording(
    serverCallId: string,
    request: StartCallRecordingRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ServerCallsStartRecordingResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      serverCallId,
      request,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      startRecordingOperationSpec
    ) as Promise<ServerCallsStartRecordingResponse>;
  }

  /**
   * Get call recording properties.
   * @param serverCallId The server call id.
   * @param recordingId The recording id.
   * @param options The options parameters.
   */
  getRecordingProperties(
    serverCallId: string,
    recordingId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServerCallsGetRecordingPropertiesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      serverCallId,
      recordingId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getRecordingPropertiesOperationSpec
    ) as Promise<ServerCallsGetRecordingPropertiesResponse>;
  }

  /**
   * Stop recording the call.
   * @param serverCallId The server call id.
   * @param recordingId The recording id.
   * @param options The options parameters.
   */
  stopRecording(
    serverCallId: string,
    recordingId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      serverCallId,
      recordingId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      stopRecordingOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Pause recording the call.
   * @param serverCallId The server call id.
   * @param recordingId The recording id.
   * @param options The options parameters.
   */
  pauseRecording(
    serverCallId: string,
    recordingId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      serverCallId,
      recordingId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      pauseRecordingOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Resume recording the call.
   * @param serverCallId The server call id.
   * @param recordingId The recording id.
   * @param options The options parameters.
   */
  resumeRecording(
    serverCallId: string,
    recordingId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      serverCallId,
      recordingId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      resumeRecordingOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Join a call.
   * @param serverCallId The server call id.
   * @param callRequest The join call request.
   * @param options The options parameters.
   */
  joinCall(
    serverCallId: string,
    callRequest: JoinCallRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ServerCallsJoinCallResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      serverCallId,
      callRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      joinCallOperationSpec
    ) as Promise<ServerCallsJoinCallResponse>;
  }

  /**
   * Play audio in the call.
   * @param serverCallId The server call id.
   * @param request Play audio request.
   * @param options The options parameters.
   */
  playAudio(
    serverCallId: string,
    request: PlayAudioRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ServerCallsPlayAudioResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      serverCallId,
      request,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      playAudioOperationSpec
    ) as Promise<ServerCallsPlayAudioResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const addParticipantOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/serverCalls/{serverCallId}/participants",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.AddParticipantResult
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.addParticipantRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.serverCallId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const removeParticipantOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/serverCalls/{serverCallId}/participants/{participantId}",
  httpMethod: "DELETE",
  responses: {
    202: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.participantId,
    Parameters.serverCallId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const startRecordingOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/serverCalls/{serverCallId}/recordings",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StartCallRecordingResult
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.request1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.serverCallId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getRecordingPropertiesOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/serverCalls/{serverCallId}/recordings/{recordingId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CallRecordingProperties
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.serverCallId,
    Parameters.recordingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const stopRecordingOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/serverCalls/{serverCallId}/recordings/{recordingId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.serverCallId,
    Parameters.recordingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const pauseRecordingOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/serverCalls/{serverCallId}/recordings/{recordingId}/:pause",
  httpMethod: "POST",
  responses: {
    200: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.serverCallId,
    Parameters.recordingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const resumeRecordingOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/serverCalls/{serverCallId}/recordings/{recordingId}/:resume",
  httpMethod: "POST",
  responses: {
    200: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.serverCallId,
    Parameters.recordingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const joinCallOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/serverCalls/{serverCallId}/:join",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.JoinCallResult
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.callRequest1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.serverCallId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const playAudioOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/serverCalls/{serverCallId}/:playAudio",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.PlayAudioResult
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.request,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.serverCallId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
