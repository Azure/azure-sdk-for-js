/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/communicationIdentityOperationsMappers";
import * as Parameters from "../models/parameters";
import { GeneratedCommunicationIdentityClientContext } from "../generatedCommunicationIdentityClientContext";

/** Class representing a CommunicationIdentityOperations. */
export class CommunicationIdentityOperations {
  private readonly client: GeneratedCommunicationIdentityClientContext;

  /**
   * Create a CommunicationIdentityOperations.
   * @param {GeneratedCommunicationIdentityClientContext} client Reference to the service client.
   */
  constructor(client: GeneratedCommunicationIdentityClientContext) {
    this.client = client;
  }

  /**
   * @summary Create a new identity.
   * @param endpoint Auth and Identity endpoint
   * @param [options] The optional parameters
   * @returns Promise<Models.CommunicationIdentityCreateResponse>
   */
  create(
    endpoint: string,
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.CommunicationIdentityCreateResponse>;
  /**
   * @param endpoint Auth and Identity endpoint
   * @param callback The callback
   */
  create(endpoint: string, callback: coreHttp.ServiceCallback<Models.CommunicationIdentity>): void;
  /**
   * @param endpoint Auth and Identity endpoint
   * @param options The optional parameters
   * @param callback The callback
   */
  create(
    endpoint: string,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<Models.CommunicationIdentity>
  ): void;
  create(
    endpoint: string,
    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.CommunicationIdentity>,
    callback?: coreHttp.ServiceCallback<Models.CommunicationIdentity>
  ): Promise<Models.CommunicationIdentityCreateResponse> {
    return this.client.sendOperationRequest(
      {
        endpoint,
        options
      },
      createOperationSpec,
      callback
    ) as Promise<Models.CommunicationIdentityCreateResponse>;
  }

  /**
   * @summary Delete the identity, revoke all tokens of the identity and delete all associated data.
   * @param endpoint Auth and Identity endpoint
   * @param id Identifier of the identity to be deleted.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteMethod(
    endpoint: string,
    id: string,
    options?: coreHttp.RequestOptionsBase
  ): Promise<coreHttp.RestResponse>;
  /**
   * @param endpoint Auth and Identity endpoint
   * @param id Identifier of the identity to be deleted.
   * @param callback The callback
   */
  deleteMethod(endpoint: string, id: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param endpoint Auth and Identity endpoint
   * @param id Identifier of the identity to be deleted.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(
    endpoint: string,
    id: string,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<void>
  ): void;
  deleteMethod(
    endpoint: string,
    id: string,
    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,
    callback?: coreHttp.ServiceCallback<void>
  ): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        endpoint,
        id,
        options
      },
      deleteMethodOperationSpec,
      callback
    );
  }

  /**
   * @summary Update an Identity.
   * @param endpoint Auth and Identity endpoint
   * @param id Identifier of the identity.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  update(
    endpoint: string,
    id: string,
    options?: Models.CommunicationIdentityUpdateOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * @param endpoint Auth and Identity endpoint
   * @param id Identifier of the identity.
   * @param callback The callback
   */
  update(endpoint: string, id: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param endpoint Auth and Identity endpoint
   * @param id Identifier of the identity.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(
    endpoint: string,
    id: string,
    options: Models.CommunicationIdentityUpdateOptionalParams,
    callback: coreHttp.ServiceCallback<void>
  ): void;
  update(
    endpoint: string,
    id: string,
    options?: Models.CommunicationIdentityUpdateOptionalParams | coreHttp.ServiceCallback<void>,
    callback?: coreHttp.ServiceCallback<void>
  ): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        endpoint,
        id,
        options
      },
      updateOperationSpec,
      callback
    );
  }

  /**
   * @summary Generate a new token for an identity.
   * @param endpoint Auth and Identity endpoint
   * @param id Identifier of the identity to issue token for.
   * @param scopes List of scopes attached to the token.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommunicationIdentityIssueTokenResponse>
   */
  issueToken(
    endpoint: string,
    id: string,
    scopes: string[],
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.CommunicationIdentityIssueTokenResponse>;
  /**
   * @param endpoint Auth and Identity endpoint
   * @param id Identifier of the identity to issue token for.
   * @param scopes List of scopes attached to the token.
   * @param callback The callback
   */
  issueToken(
    endpoint: string,
    id: string,
    scopes: string[],
    callback: coreHttp.ServiceCallback<Models.CommunicationIdentityToken>
  ): void;
  /**
   * @param endpoint Auth and Identity endpoint
   * @param id Identifier of the identity to issue token for.
   * @param scopes List of scopes attached to the token.
   * @param options The optional parameters
   * @param callback The callback
   */
  issueToken(
    endpoint: string,
    id: string,
    scopes: string[],
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<Models.CommunicationIdentityToken>
  ): void;
  issueToken(
    endpoint: string,
    id: string,
    scopes: string[],
    options?:
      | coreHttp.RequestOptionsBase
      | coreHttp.ServiceCallback<Models.CommunicationIdentityToken>,
    callback?: coreHttp.ServiceCallback<Models.CommunicationIdentityToken>
  ): Promise<Models.CommunicationIdentityIssueTokenResponse> {
    return this.client.sendOperationRequest(
      {
        endpoint,
        id,
        scopes,
        options
      },
      issueTokenOperationSpec,
      callback
    ) as Promise<Models.CommunicationIdentityIssueTokenResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const createOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "identities",
  urlParameters: [Parameters.endpoint],
  queryParameters: [Parameters.apiVersion],
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationIdentity
    },
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "identities/{id}",
  urlParameters: [Parameters.endpoint, Parameters.id],
  queryParameters: [Parameters.apiVersion],
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const updateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "identities/{id}",
  urlParameters: [Parameters.endpoint, Parameters.id],
  queryParameters: [Parameters.apiVersion],
  requestBody: {
    parameterPath: {
      tokensValidFrom: ["options", "tokensValidFrom"]
    },
    mapper: {
      ...Mappers.CommunicationIdentityUpdateRequest,
      required: true
    }
  },
  contentType: "application/merge-patch+json",
  responses: {
    204: {},
    default: {}
  },
  serializer
};

const issueTokenOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "identities/{id}/token",
  urlParameters: [Parameters.endpoint, Parameters.id],
  queryParameters: [Parameters.apiVersion],
  requestBody: {
    parameterPath: {
      scopes: "scopes"
    },
    mapper: {
      ...Mappers.CommunicationTokenRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationIdentityToken
    },
    default: {}
  },
  serializer
};
