/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const CommunicationIdentity: coreHttp.CompositeMapper = {
  serializedName: "CommunicationIdentity",
  type: {
    name: "Composite",
    className: "CommunicationIdentity",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CommunicationIdentityUpdateRequest: coreHttp.CompositeMapper = {
  serializedName: "CommunicationIdentityUpdateRequest",
  type: {
    name: "Composite",
    className: "CommunicationIdentityUpdateRequest",
    modelProperties: {
      tokensValidFrom: {
        serializedName: "tokensValidFrom",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CommunicationTokenRequest: coreHttp.CompositeMapper = {
  serializedName: "CommunicationTokenRequest",
  type: {
    name: "Composite",
    className: "CommunicationTokenRequest",
    modelProperties: {
      scopes: {
        required: true,
        serializedName: "scopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CommunicationIdentityToken: coreHttp.CompositeMapper = {
  serializedName: "CommunicationIdentityToken",
  type: {
    name: "Composite",
    className: "CommunicationIdentityToken",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      token: {
        required: true,
        serializedName: "token",
        type: {
          name: "String"
        }
      },
      expiresOn: {
        required: true,
        serializedName: "expiresOn",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};
