/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PhoneNumberRestClient } from "../phoneNumberRestClient";
import { LROPoller, shouldDeserializeLRO } from "../lro";
import {
  SearchRequest,
  PhoneNumberAdministrationSearchAvailablePhoneNumbersResponse,
  PhoneNumberAdministrationGetSearchResultResponse,
  PurchaseRequest,
  PhoneNumberAdministrationPurchasePhoneNumbersResponse,
  PhoneNumberAdministrationGetOperationResponse,
  PhoneNumberAdministrationListPhoneNumbersResponse,
  PhoneNumberAdministrationGetPhoneNumberResponse,
  AcquiredPhoneNumberUpdate,
  PhoneNumberAdministrationUpdatePhoneNumberResponse,
  PhoneNumberAdministrationReleasePhoneNumberResponse,
  PhoneNumberAdministrationListPhoneNumbersNextResponse
} from "../models";

/**
 * Class representing a PhoneNumberAdministration.
 */
export class PhoneNumberAdministration {
  private readonly client: PhoneNumberRestClient;

  /**
   * Initialize a new instance of the class PhoneNumberAdministration class.
   * @param client Reference to the service client
   */
  constructor(client: PhoneNumberRestClient) {
    this.client = client;
  }

  /**
   * Search for available phone numbers to purchase.
   * @param countryCode The ISO 3166-2 country code.
   * @param search The search request.
   * @param options The options parameters.
   */
  async searchAvailablePhoneNumbers(
    countryCode: string,
    search: SearchRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<PhoneNumberAdministrationSearchAvailablePhoneNumbersResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(options);

    const args: coreHttp.OperationArguments = {
      countryCode,
      search,
      options: operationOptions
    };
    const sendOperation = (args: coreHttp.OperationArguments, spec: coreHttp.OperationSpec) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        PhoneNumberAdministrationSearchAvailablePhoneNumbersResponse
      >;
    const initialOperationResult = await sendOperation(
      args,
      searchAvailablePhoneNumbersOperationSpec
    );

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: searchAvailablePhoneNumbersOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Get a search result by its id.
   * @param searchId The search Id.
   * @param options The options parameters.
   */
  getSearchResult(
    searchId: string,
    options?: coreHttp.OperationOptions
  ): Promise<PhoneNumberAdministrationGetSearchResultResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { searchId, options: operationOptions },
      getSearchResultOperationSpec
    ) as Promise<PhoneNumberAdministrationGetSearchResultResponse>;
  }

  /**
   * Purchase phone numbers.
   * @param purchase The purchase.
   * @param options The options parameters.
   */
  async purchasePhoneNumbers(
    purchase: PurchaseRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<PhoneNumberAdministrationPurchasePhoneNumbersResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(options);

    const args: coreHttp.OperationArguments = {
      purchase,
      options: operationOptions
    };
    const sendOperation = (args: coreHttp.OperationArguments, spec: coreHttp.OperationSpec) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        PhoneNumberAdministrationPurchasePhoneNumbersResponse
      >;
    const initialOperationResult = await sendOperation(args, purchasePhoneNumbersOperationSpec);

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: purchasePhoneNumbersOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Get an operation by its id.
   * @param operationId The operation Id.
   * @param options The options parameters.
   */
  getOperation(
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<PhoneNumberAdministrationGetOperationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { operationId, options: operationOptions },
      getOperationOperationSpec
    ) as Promise<PhoneNumberAdministrationGetOperationResponse>;
  }

  /**
   * Cancels the operation if cancellation is supported for the operation type.
   * @param operationId The operation Id.
   * @param options The options parameters.
   */
  cancelOperation(
    operationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { operationId, options: operationOptions },
      cancelOperationOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Lists acquired phone numbers.
   * @param options The options parameters.
   */
  listPhoneNumbers(
    options?: coreHttp.OperationOptions
  ): Promise<PhoneNumberAdministrationListPhoneNumbersResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { options: operationOptions },
      listPhoneNumbersOperationSpec
    ) as Promise<PhoneNumberAdministrationListPhoneNumbersResponse>;
  }

  /**
   * Gets information about an acquired phone number.
   * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded
   *                    as %2B.
   * @param options The options parameters.
   */
  getPhoneNumber(
    phoneNumber: string,
    options?: coreHttp.OperationOptions
  ): Promise<PhoneNumberAdministrationGetPhoneNumberResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { phoneNumber, options: operationOptions },
      getPhoneNumberOperationSpec
    ) as Promise<PhoneNumberAdministrationGetPhoneNumberResponse>;
  }

  /**
   * Update an acquired phone number.
   * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded
   *                    as %2B.
   * @param update Update to an acquired phone number.
   * @param options The options parameters.
   */
  async updatePhoneNumber(
    phoneNumber: string,
    update: AcquiredPhoneNumberUpdate,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<PhoneNumberAdministrationUpdatePhoneNumberResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(options);

    const args: coreHttp.OperationArguments = {
      phoneNumber,
      update,
      options: operationOptions
    };
    const sendOperation = (args: coreHttp.OperationArguments, spec: coreHttp.OperationSpec) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        PhoneNumberAdministrationUpdatePhoneNumberResponse
      >;
    const initialOperationResult = await sendOperation(args, updatePhoneNumberOperationSpec);

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: updatePhoneNumberOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * Releases an acquired phone number.
   * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded
   *                    as %2B.
   * @param options The options parameters.
   */
  async releasePhoneNumber(
    phoneNumber: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<PhoneNumberAdministrationReleasePhoneNumberResponse>> {
    const operationOptions: coreHttp.RequestOptionsBase = this.getOperationOptions(options);

    const args: coreHttp.OperationArguments = {
      phoneNumber,
      options: operationOptions
    };
    const sendOperation = (args: coreHttp.OperationArguments, spec: coreHttp.OperationSpec) =>
      this.client.sendOperationRequest(args, spec) as Promise<
        PhoneNumberAdministrationReleasePhoneNumberResponse
      >;
    const initialOperationResult = await sendOperation(args, releasePhoneNumberOperationSpec);

    return new LROPoller({
      initialOperationArguments: args,
      initialOperationSpec: releasePhoneNumberOperationSpec,
      initialOperationResult,
      sendOperation
    });
  }

  /**
   * ListPhoneNumbersNext
   * @param nextLink The nextLink from the previous successful call to the ListPhoneNumbers method.
   * @param options The options parameters.
   */
  listPhoneNumbersNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<PhoneNumberAdministrationListPhoneNumbersNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { nextLink, options: operationOptions },
      listPhoneNumbersNextOperationSpec
    ) as Promise<PhoneNumberAdministrationListPhoneNumbersNextResponse>;
  }

  private getOperationOptions<TOptions extends coreHttp.OperationOptions>(
    options: TOptions | undefined,
    finalStateVia?: string
  ): coreHttp.RequestOptionsBase {
    const operationOptions: coreHttp.OperationOptions = options || {};
    operationOptions.requestOptions = {
      ...operationOptions.requestOptions,
      shouldDeserialize: shouldDeserializeLRO(finalStateVia)
    };
    return coreHttp.operationOptionsToRequestOptionsBase(operationOptions);
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const searchAvailablePhoneNumbersOperationSpec: coreHttp.OperationSpec = {
  path: "/availablePhoneNumbers/countries/{countryCode}/~search",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.PhoneNumberAdministrationSearchAvailablePhoneNumbersHeaders
    },
    201: {
      headersMapper: Mappers.PhoneNumberAdministrationSearchAvailablePhoneNumbersHeaders
    },
    202: {
      headersMapper: Mappers.PhoneNumberAdministrationSearchAvailablePhoneNumbersHeaders
    },
    204: {
      headersMapper: Mappers.PhoneNumberAdministrationSearchAvailablePhoneNumbersHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.search,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.countryCode],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getSearchResultOperationSpec: coreHttp.OperationSpec = {
  path: "/availablePhoneNumbers/searchResults/{searchId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SearchResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.searchId],
  serializer
};
const purchasePhoneNumbersOperationSpec: coreHttp.OperationSpec = {
  path: "/availablePhoneNumbers/~purchase",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.PhoneNumberAdministrationPurchasePhoneNumbersHeaders
    },
    201: {
      headersMapper: Mappers.PhoneNumberAdministrationPurchasePhoneNumbersHeaders
    },
    202: {
      headersMapper: Mappers.PhoneNumberAdministrationPurchasePhoneNumbersHeaders
    },
    204: {
      headersMapper: Mappers.PhoneNumberAdministrationPurchasePhoneNumbersHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.purchase,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationOperationSpec: coreHttp.OperationSpec = {
  path: "/phoneNumbers/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Operation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.operationId],
  serializer
};
const cancelOperationOperationSpec: coreHttp.OperationSpec = {
  path: "/phoneNumbers/operations/{operationId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.operationId],
  serializer
};
const listPhoneNumbersOperationSpec: coreHttp.OperationSpec = {
  path: "/phoneNumbers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AcquiredPhoneNumbers
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  serializer
};
const getPhoneNumberOperationSpec: coreHttp.OperationSpec = {
  path: "/phoneNumbers/{phoneNumber}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AcquiredPhoneNumber
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.phoneNumber],
  serializer
};
const updatePhoneNumberOperationSpec: coreHttp.OperationSpec = {
  path: "/phoneNumbers/{phoneNumber}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AcquiredPhoneNumber,
      headersMapper: Mappers.PhoneNumberAdministrationUpdatePhoneNumberHeaders
    },
    201: {
      bodyMapper: Mappers.AcquiredPhoneNumber,
      headersMapper: Mappers.PhoneNumberAdministrationUpdatePhoneNumberHeaders
    },
    202: {
      bodyMapper: Mappers.AcquiredPhoneNumber,
      headersMapper: Mappers.PhoneNumberAdministrationUpdatePhoneNumberHeaders
    },
    204: {
      bodyMapper: Mappers.AcquiredPhoneNumber,
      headersMapper: Mappers.PhoneNumberAdministrationUpdatePhoneNumberHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.update,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.phoneNumber],
  headerParameters: [Parameters.contentType1],
  mediaType: "json",
  serializer
};
const releasePhoneNumberOperationSpec: coreHttp.OperationSpec = {
  path: "/phoneNumbers/{phoneNumber}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.PhoneNumberAdministrationReleasePhoneNumberHeaders
    },
    201: {
      headersMapper: Mappers.PhoneNumberAdministrationReleasePhoneNumberHeaders
    },
    202: {
      headersMapper: Mappers.PhoneNumberAdministrationReleasePhoneNumberHeaders
    },
    204: {
      headersMapper: Mappers.PhoneNumberAdministrationReleasePhoneNumberHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.phoneNumber],
  serializer
};
const listPhoneNumbersNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AcquiredPhoneNumbers
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  serializer
};
