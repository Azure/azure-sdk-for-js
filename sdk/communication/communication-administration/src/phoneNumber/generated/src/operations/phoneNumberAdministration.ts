/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/phoneNumberAdministrationMappers";
import * as Parameters from "../models/parameters";
import { PhoneNumberRestClientContext } from "../phoneNumberRestClientContext";

/** Class representing a PhoneNumberAdministration. */
export class PhoneNumberAdministration {
  private readonly client: PhoneNumberRestClientContext;

  /**
   * Create a PhoneNumberAdministration.
   * @param {PhoneNumberRestClientContext} client Reference to the service client.
   */
  constructor(client: PhoneNumberRestClientContext) {
    this.client = client;
  }

  /**
   * @summary Gets the list of the acquired phone numbers.
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationGetAllPhoneNumbersResponse>
   */
  getAllPhoneNumbers(
    options?: Models.PhoneNumberAdministrationGetAllPhoneNumbersOptionalParams
  ): Promise<Models.PhoneNumberAdministrationGetAllPhoneNumbersResponse>;
  /**
   * @param callback The callback
   */
  getAllPhoneNumbers(callback: coreHttp.ServiceCallback<Models.AcquiredPhoneNumbers>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllPhoneNumbers(
    options: Models.PhoneNumberAdministrationGetAllPhoneNumbersOptionalParams,
    callback: coreHttp.ServiceCallback<Models.AcquiredPhoneNumbers>
  ): void;
  getAllPhoneNumbers(
    options?:
      | Models.PhoneNumberAdministrationGetAllPhoneNumbersOptionalParams
      | coreHttp.ServiceCallback<Models.AcquiredPhoneNumbers>,
    callback?: coreHttp.ServiceCallback<Models.AcquiredPhoneNumbers>
  ): Promise<Models.PhoneNumberAdministrationGetAllPhoneNumbersResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllPhoneNumbersOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationGetAllPhoneNumbersResponse>;
  }

  /**
   * @summary Gets a list of the supported area codes
   * @param locationType The type of location information required by the plan.
   * @param countryCode The ISO 3166-2 country code
   * @param phonePlanId The plan id from which to search area codes.
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationGetAllAreaCodesResponse>
   */
  getAllAreaCodes(
    locationType: string,
    countryCode: string,
    phonePlanId: string,
    options?: Models.PhoneNumberAdministrationGetAllAreaCodesOptionalParams
  ): Promise<Models.PhoneNumberAdministrationGetAllAreaCodesResponse>;
  /**
   * @param locationType The type of location information required by the plan.
   * @param countryCode The ISO 3166-2 country code
   * @param phonePlanId The plan id from which to search area codes.
   * @param callback The callback
   */
  getAllAreaCodes(
    locationType: string,
    countryCode: string,
    phonePlanId: string,
    callback: coreHttp.ServiceCallback<Models.AreaCodes>
  ): void;
  /**
   * @param locationType The type of location information required by the plan.
   * @param countryCode The ISO 3166-2 country code
   * @param phonePlanId The plan id from which to search area codes.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllAreaCodes(
    locationType: string,
    countryCode: string,
    phonePlanId: string,
    options: Models.PhoneNumberAdministrationGetAllAreaCodesOptionalParams,
    callback: coreHttp.ServiceCallback<Models.AreaCodes>
  ): void;
  getAllAreaCodes(
    locationType: string,
    countryCode: string,
    phonePlanId: string,
    options?:
      | Models.PhoneNumberAdministrationGetAllAreaCodesOptionalParams
      | coreHttp.ServiceCallback<Models.AreaCodes>,
    callback?: coreHttp.ServiceCallback<Models.AreaCodes>
  ): Promise<Models.PhoneNumberAdministrationGetAllAreaCodesResponse> {
    return this.client.sendOperationRequest(
      {
        locationType,
        countryCode,
        phonePlanId,
        options
      },
      getAllAreaCodesOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationGetAllAreaCodesResponse>;
  }

  /**
   * @summary Get capabilities by capabilities update id.
   * @param capabilitiesUpdateId
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationGetCapabilitiesUpdateResponse>
   */
  getCapabilitiesUpdate(
    capabilitiesUpdateId: string,
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.PhoneNumberAdministrationGetCapabilitiesUpdateResponse>;
  /**
   * @param capabilitiesUpdateId
   * @param callback The callback
   */
  getCapabilitiesUpdate(
    capabilitiesUpdateId: string,
    callback: coreHttp.ServiceCallback<Models.UpdatePhoneNumberCapabilitiesResponse>
  ): void;
  /**
   * @param capabilitiesUpdateId
   * @param options The optional parameters
   * @param callback The callback
   */
  getCapabilitiesUpdate(
    capabilitiesUpdateId: string,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<Models.UpdatePhoneNumberCapabilitiesResponse>
  ): void;
  getCapabilitiesUpdate(
    capabilitiesUpdateId: string,
    options?:
      | coreHttp.RequestOptionsBase
      | coreHttp.ServiceCallback<Models.UpdatePhoneNumberCapabilitiesResponse>,
    callback?: coreHttp.ServiceCallback<Models.UpdatePhoneNumberCapabilitiesResponse>
  ): Promise<Models.PhoneNumberAdministrationGetCapabilitiesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        capabilitiesUpdateId,
        options
      },
      getCapabilitiesUpdateOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationGetCapabilitiesUpdateResponse>;
  }

  /**
   * @summary Adds or removes phone number capabilities
   * @param phoneNumberCapabilitiesUpdate The map of phone numbers to the capabilities update applied
   * to the phone number.
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationUpdateCapabilitiesResponse>
   */
  updateCapabilities(
    phoneNumberCapabilitiesUpdate: { [propertyName: string]: Models.NumberUpdateCapabilities },
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.PhoneNumberAdministrationUpdateCapabilitiesResponse>;
  /**
   * @param phoneNumberCapabilitiesUpdate The map of phone numbers to the capabilities update applied
   * to the phone number.
   * @param callback The callback
   */
  updateCapabilities(
    phoneNumberCapabilitiesUpdate: { [propertyName: string]: Models.NumberUpdateCapabilities },
    callback: coreHttp.ServiceCallback<Models.UpdateNumberCapabilitiesResponse>
  ): void;
  /**
   * @param phoneNumberCapabilitiesUpdate The map of phone numbers to the capabilities update applied
   * to the phone number.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCapabilities(
    phoneNumberCapabilitiesUpdate: { [propertyName: string]: Models.NumberUpdateCapabilities },
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<Models.UpdateNumberCapabilitiesResponse>
  ): void;
  updateCapabilities(
    phoneNumberCapabilitiesUpdate: { [propertyName: string]: Models.NumberUpdateCapabilities },
    options?:
      | coreHttp.RequestOptionsBase
      | coreHttp.ServiceCallback<Models.UpdateNumberCapabilitiesResponse>,
    callback?: coreHttp.ServiceCallback<Models.UpdateNumberCapabilitiesResponse>
  ): Promise<Models.PhoneNumberAdministrationUpdateCapabilitiesResponse> {
    return this.client.sendOperationRequest(
      {
        phoneNumberCapabilitiesUpdate,
        options
      },
      updateCapabilitiesOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationUpdateCapabilitiesResponse>;
  }

  /**
   * @summary Gets a list of supported countries
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationGetAllSupportedCountriesResponse>
   */
  getAllSupportedCountries(
    options?: Models.PhoneNumberAdministrationGetAllSupportedCountriesOptionalParams
  ): Promise<Models.PhoneNumberAdministrationGetAllSupportedCountriesResponse>;
  /**
   * @param callback The callback
   */
  getAllSupportedCountries(callback: coreHttp.ServiceCallback<Models.PhoneNumberCountries>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllSupportedCountries(
    options: Models.PhoneNumberAdministrationGetAllSupportedCountriesOptionalParams,
    callback: coreHttp.ServiceCallback<Models.PhoneNumberCountries>
  ): void;
  getAllSupportedCountries(
    options?:
      | Models.PhoneNumberAdministrationGetAllSupportedCountriesOptionalParams
      | coreHttp.ServiceCallback<Models.PhoneNumberCountries>,
    callback?: coreHttp.ServiceCallback<Models.PhoneNumberCountries>
  ): Promise<Models.PhoneNumberAdministrationGetAllSupportedCountriesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllSupportedCountriesOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationGetAllSupportedCountriesResponse>;
  }

  /**
   * @summary Endpoint for getting number configurations
   * @param phoneNumber The phone number in the E.164 format
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationGetNumberConfigurationResponse>
   */
  getNumberConfiguration(
    phoneNumber: string,
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.PhoneNumberAdministrationGetNumberConfigurationResponse>;
  /**
   * @param phoneNumber The phone number in the E.164 format
   * @param callback The callback
   */
  getNumberConfiguration(
    phoneNumber: string,
    callback: coreHttp.ServiceCallback<Models.NumberConfigurationResponse>
  ): void;
  /**
   * @param phoneNumber The phone number in the E.164 format
   * @param options The optional parameters
   * @param callback The callback
   */
  getNumberConfiguration(
    phoneNumber: string,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<Models.NumberConfigurationResponse>
  ): void;
  getNumberConfiguration(
    phoneNumber: string,
    options?:
      | coreHttp.RequestOptionsBase
      | coreHttp.ServiceCallback<Models.NumberConfigurationResponse>,
    callback?: coreHttp.ServiceCallback<Models.NumberConfigurationResponse>
  ): Promise<Models.PhoneNumberAdministrationGetNumberConfigurationResponse> {
    return this.client.sendOperationRequest(
      {
        phoneNumber,
        options
      },
      getNumberConfigurationOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationGetNumberConfigurationResponse>;
  }

  /**
   * @summary Endpoint for configuring a pstn number
   * @param pstnConfiguration
   * @param phoneNumber The phone number to configure
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  configureNumber(
    pstnConfiguration: Models.PstnConfiguration,
    phoneNumber: string,
    options?: coreHttp.RequestOptionsBase
  ): Promise<coreHttp.RestResponse>;
  /**
   * @param pstnConfiguration
   * @param phoneNumber The phone number to configure
   * @param callback The callback
   */
  configureNumber(
    pstnConfiguration: Models.PstnConfiguration,
    phoneNumber: string,
    callback: coreHttp.ServiceCallback<void>
  ): void;
  /**
   * @param pstnConfiguration
   * @param phoneNumber The phone number to configure
   * @param options The optional parameters
   * @param callback The callback
   */
  configureNumber(
    pstnConfiguration: Models.PstnConfiguration,
    phoneNumber: string,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<void>
  ): void;
  configureNumber(
    pstnConfiguration: Models.PstnConfiguration,
    phoneNumber: string,
    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,
    callback?: coreHttp.ServiceCallback<void>
  ): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        pstnConfiguration,
        phoneNumber,
        options
      },
      configureNumberOperationSpec,
      callback
    );
  }

  /**
   * @summary Endpoint for unconfiguring a pstn number by removing the configuration
   * @param phoneNumber The phone number in the E.164 format
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  unconfigureNumber(
    phoneNumber: string,
    options?: coreHttp.RequestOptionsBase
  ): Promise<coreHttp.RestResponse>;
  /**
   * @param phoneNumber The phone number in the E.164 format
   * @param callback The callback
   */
  unconfigureNumber(phoneNumber: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param phoneNumber The phone number in the E.164 format
   * @param options The optional parameters
   * @param callback The callback
   */
  unconfigureNumber(
    phoneNumber: string,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<void>
  ): void;
  unconfigureNumber(
    phoneNumber: string,
    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,
    callback?: coreHttp.ServiceCallback<void>
  ): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        phoneNumber,
        options
      },
      unconfigureNumberOperationSpec,
      callback
    );
  }

  /**
   * @summary Gets a list of phone plan groups for the given country
   * @param countryCode The ISO 3166-2 country code.
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationGetPhonePlanGroupsResponse>
   */
  getPhonePlanGroups(
    countryCode: string,
    options?: Models.PhoneNumberAdministrationGetPhonePlanGroupsOptionalParams
  ): Promise<Models.PhoneNumberAdministrationGetPhonePlanGroupsResponse>;
  /**
   * @param countryCode The ISO 3166-2 country code.
   * @param callback The callback
   */
  getPhonePlanGroups(
    countryCode: string,
    callback: coreHttp.ServiceCallback<Models.PhonePlanGroups>
  ): void;
  /**
   * @param countryCode The ISO 3166-2 country code.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPhonePlanGroups(
    countryCode: string,
    options: Models.PhoneNumberAdministrationGetPhonePlanGroupsOptionalParams,
    callback: coreHttp.ServiceCallback<Models.PhonePlanGroups>
  ): void;
  getPhonePlanGroups(
    countryCode: string,
    options?:
      | Models.PhoneNumberAdministrationGetPhonePlanGroupsOptionalParams
      | coreHttp.ServiceCallback<Models.PhonePlanGroups>,
    callback?: coreHttp.ServiceCallback<Models.PhonePlanGroups>
  ): Promise<Models.PhoneNumberAdministrationGetPhonePlanGroupsResponse> {
    return this.client.sendOperationRequest(
      {
        countryCode,
        options
      },
      getPhonePlanGroupsOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationGetPhonePlanGroupsResponse>;
  }

  /**
   * @summary Gets a list of phone plans for a phone plan group
   * @param countryCode The ISO 3166-2 country code.
   * @param phonePlanGroupId
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationGetPhonePlansResponse>
   */
  getPhonePlans(
    countryCode: string,
    phonePlanGroupId: string,
    options?: Models.PhoneNumberAdministrationGetPhonePlansOptionalParams
  ): Promise<Models.PhoneNumberAdministrationGetPhonePlansResponse>;
  /**
   * @param countryCode The ISO 3166-2 country code.
   * @param phonePlanGroupId
   * @param callback The callback
   */
  getPhonePlans(
    countryCode: string,
    phonePlanGroupId: string,
    callback: coreHttp.ServiceCallback<Models.PhonePlansResponse>
  ): void;
  /**
   * @param countryCode The ISO 3166-2 country code.
   * @param phonePlanGroupId
   * @param options The optional parameters
   * @param callback The callback
   */
  getPhonePlans(
    countryCode: string,
    phonePlanGroupId: string,
    options: Models.PhoneNumberAdministrationGetPhonePlansOptionalParams,
    callback: coreHttp.ServiceCallback<Models.PhonePlansResponse>
  ): void;
  getPhonePlans(
    countryCode: string,
    phonePlanGroupId: string,
    options?:
      | Models.PhoneNumberAdministrationGetPhonePlansOptionalParams
      | coreHttp.ServiceCallback<Models.PhonePlansResponse>,
    callback?: coreHttp.ServiceCallback<Models.PhonePlansResponse>
  ): Promise<Models.PhoneNumberAdministrationGetPhonePlansResponse> {
    return this.client.sendOperationRequest(
      {
        countryCode,
        phonePlanGroupId,
        options
      },
      getPhonePlansOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationGetPhonePlansResponse>;
  }

  /**
   * @summary Gets a list of location options for a phone plan
   * @param countryCode The ISO 3166-2 country code.
   * @param phonePlanGroupId
   * @param phonePlanId
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationGetPhonePlanLocationOptionsResponse>
   */
  getPhonePlanLocationOptions(
    countryCode: string,
    phonePlanGroupId: string,
    phonePlanId: string,
    options?: Models.PhoneNumberAdministrationGetPhonePlanLocationOptionsOptionalParams
  ): Promise<Models.PhoneNumberAdministrationGetPhonePlanLocationOptionsResponse>;
  /**
   * @param countryCode The ISO 3166-2 country code.
   * @param phonePlanGroupId
   * @param phonePlanId
   * @param callback The callback
   */
  getPhonePlanLocationOptions(
    countryCode: string,
    phonePlanGroupId: string,
    phonePlanId: string,
    callback: coreHttp.ServiceCallback<Models.LocationOptionsResponse>
  ): void;
  /**
   * @param countryCode The ISO 3166-2 country code.
   * @param phonePlanGroupId
   * @param phonePlanId
   * @param options The optional parameters
   * @param callback The callback
   */
  getPhonePlanLocationOptions(
    countryCode: string,
    phonePlanGroupId: string,
    phonePlanId: string,
    options: Models.PhoneNumberAdministrationGetPhonePlanLocationOptionsOptionalParams,
    callback: coreHttp.ServiceCallback<Models.LocationOptionsResponse>
  ): void;
  getPhonePlanLocationOptions(
    countryCode: string,
    phonePlanGroupId: string,
    phonePlanId: string,
    options?:
      | Models.PhoneNumberAdministrationGetPhonePlanLocationOptionsOptionalParams
      | coreHttp.ServiceCallback<Models.LocationOptionsResponse>,
    callback?: coreHttp.ServiceCallback<Models.LocationOptionsResponse>
  ): Promise<Models.PhoneNumberAdministrationGetPhonePlanLocationOptionsResponse> {
    return this.client.sendOperationRequest(
      {
        countryCode,
        phonePlanGroupId,
        phonePlanId,
        options
      },
      getPhonePlanLocationOptionsOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationGetPhonePlanLocationOptionsResponse>;
  }

  /**
   * @summary Gets a release by a release id
   * @param releaseId Represents the release id
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationGetReleaseByIdResponse>
   */
  getReleaseById(
    releaseId: string,
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.PhoneNumberAdministrationGetReleaseByIdResponse>;
  /**
   * @param releaseId Represents the release id
   * @param callback The callback
   */
  getReleaseById(
    releaseId: string,
    callback: coreHttp.ServiceCallback<Models.PhoneNumberRelease>
  ): void;
  /**
   * @param releaseId Represents the release id
   * @param options The optional parameters
   * @param callback The callback
   */
  getReleaseById(
    releaseId: string,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<Models.PhoneNumberRelease>
  ): void;
  getReleaseById(
    releaseId: string,
    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.PhoneNumberRelease>,
    callback?: coreHttp.ServiceCallback<Models.PhoneNumberRelease>
  ): Promise<Models.PhoneNumberAdministrationGetReleaseByIdResponse> {
    return this.client.sendOperationRequest(
      {
        releaseId,
        options
      },
      getReleaseByIdOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationGetReleaseByIdResponse>;
  }

  /**
   * @summary Creates a release for the given phone numbers
   * @param phoneNumbers The list of phone numbers in the release request.
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationReleasePhoneNumbersResponse>
   */
  releasePhoneNumbers(
    phoneNumbers: string[],
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.PhoneNumberAdministrationReleasePhoneNumbersResponse>;
  /**
   * @param phoneNumbers The list of phone numbers in the release request.
   * @param callback The callback
   */
  releasePhoneNumbers(
    phoneNumbers: string[],
    callback: coreHttp.ServiceCallback<Models.ReleaseResponse>
  ): void;
  /**
   * @param phoneNumbers The list of phone numbers in the release request.
   * @param options The optional parameters
   * @param callback The callback
   */
  releasePhoneNumbers(
    phoneNumbers: string[],
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<Models.ReleaseResponse>
  ): void;
  releasePhoneNumbers(
    phoneNumbers: string[],
    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.ReleaseResponse>,
    callback?: coreHttp.ServiceCallback<Models.ReleaseResponse>
  ): Promise<Models.PhoneNumberAdministrationReleasePhoneNumbersResponse> {
    return this.client.sendOperationRequest(
      {
        phoneNumbers,
        options
      },
      releasePhoneNumbersOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationReleasePhoneNumbersResponse>;
  }

  /**
   * @summary Gets a list of all releases
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationGetAllReleasesResponse>
   */
  getAllReleases(
    options?: Models.PhoneNumberAdministrationGetAllReleasesOptionalParams
  ): Promise<Models.PhoneNumberAdministrationGetAllReleasesResponse>;
  /**
   * @param callback The callback
   */
  getAllReleases(callback: coreHttp.ServiceCallback<Models.PhoneNumberEntities>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllReleases(
    options: Models.PhoneNumberAdministrationGetAllReleasesOptionalParams,
    callback: coreHttp.ServiceCallback<Models.PhoneNumberEntities>
  ): void;
  getAllReleases(
    options?:
      | Models.PhoneNumberAdministrationGetAllReleasesOptionalParams
      | coreHttp.ServiceCallback<Models.PhoneNumberEntities>,
    callback?: coreHttp.ServiceCallback<Models.PhoneNumberEntities>
  ): Promise<Models.PhoneNumberAdministrationGetAllReleasesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllReleasesOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationGetAllReleasesResponse>;
  }

  /**
   * @summary Get search by search id
   * @param searchId The search id to be searched for
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationGetSearchByIdResponse>
   */
  getSearchById(
    searchId: string,
    options?: coreHttp.RequestOptionsBase
  ): Promise<Models.PhoneNumberAdministrationGetSearchByIdResponse>;
  /**
   * @param searchId The search id to be searched for
   * @param callback The callback
   */
  getSearchById(
    searchId: string,
    callback: coreHttp.ServiceCallback<Models.PhoneNumberReservation>
  ): void;
  /**
   * @param searchId The search id to be searched for
   * @param options The optional parameters
   * @param callback The callback
   */
  getSearchById(
    searchId: string,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<Models.PhoneNumberReservation>
  ): void;
  getSearchById(
    searchId: string,
    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.PhoneNumberReservation>,
    callback?: coreHttp.ServiceCallback<Models.PhoneNumberReservation>
  ): Promise<Models.PhoneNumberAdministrationGetSearchByIdResponse> {
    return this.client.sendOperationRequest(
      {
        searchId,
        options
      },
      getSearchByIdOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationGetSearchByIdResponse>;
  }

  /**
   * @summary Creates a phone number search
   * @param displayName Display name of the search.
   * @param description Description of the search.
   * @param phonePlanIds The plan subtype ids from which to create the search.
   * @param areaCode The area code from which to create the search.
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationCreateSearchResponse>
   */
  createSearch(
    displayName: string,
    description: string,
    phonePlanIds: string[],
    areaCode: string,
    options?: Models.PhoneNumberAdministrationCreateSearchOptionalParams
  ): Promise<Models.PhoneNumberAdministrationCreateSearchResponse>;
  /**
   * @param displayName Display name of the search.
   * @param description Description of the search.
   * @param phonePlanIds The plan subtype ids from which to create the search.
   * @param areaCode The area code from which to create the search.
   * @param callback The callback
   */
  createSearch(
    displayName: string,
    description: string,
    phonePlanIds: string[],
    areaCode: string,
    callback: coreHttp.ServiceCallback<Models.CreateSearchResponse>
  ): void;
  /**
   * @param displayName Display name of the search.
   * @param description Description of the search.
   * @param phonePlanIds The plan subtype ids from which to create the search.
   * @param areaCode The area code from which to create the search.
   * @param options The optional parameters
   * @param callback The callback
   */
  createSearch(
    displayName: string,
    description: string,
    phonePlanIds: string[],
    areaCode: string,
    options: Models.PhoneNumberAdministrationCreateSearchOptionalParams,
    callback: coreHttp.ServiceCallback<Models.CreateSearchResponse>
  ): void;
  createSearch(
    displayName: string,
    description: string,
    phonePlanIds: string[],
    areaCode: string,
    options?:
      | Models.PhoneNumberAdministrationCreateSearchOptionalParams
      | coreHttp.ServiceCallback<Models.CreateSearchResponse>,
    callback?: coreHttp.ServiceCallback<Models.CreateSearchResponse>
  ): Promise<Models.PhoneNumberAdministrationCreateSearchResponse> {
    return this.client.sendOperationRequest(
      {
        displayName,
        description,
        phonePlanIds,
        areaCode,
        options
      },
      createSearchOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationCreateSearchResponse>;
  }

  /**
   * @summary Gets a list of all searches
   * @param [options] The optional parameters
   * @returns Promise<Models.PhoneNumberAdministrationGetAllSearchesResponse>
   */
  getAllSearches(
    options?: Models.PhoneNumberAdministrationGetAllSearchesOptionalParams
  ): Promise<Models.PhoneNumberAdministrationGetAllSearchesResponse>;
  /**
   * @param callback The callback
   */
  getAllSearches(callback: coreHttp.ServiceCallback<Models.PhoneNumberEntities>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllSearches(
    options: Models.PhoneNumberAdministrationGetAllSearchesOptionalParams,
    callback: coreHttp.ServiceCallback<Models.PhoneNumberEntities>
  ): void;
  getAllSearches(
    options?:
      | Models.PhoneNumberAdministrationGetAllSearchesOptionalParams
      | coreHttp.ServiceCallback<Models.PhoneNumberEntities>,
    callback?: coreHttp.ServiceCallback<Models.PhoneNumberEntities>
  ): Promise<Models.PhoneNumberAdministrationGetAllSearchesResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllSearchesOperationSpec,
      callback
    ) as Promise<Models.PhoneNumberAdministrationGetAllSearchesResponse>;
  }

  /**
   * @summary Cancels the search. This means existing numbers in the search will be made available.
   * @param searchId The search id to be canceled
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  cancelSearch(
    searchId: string,
    options?: coreHttp.RequestOptionsBase
  ): Promise<coreHttp.RestResponse>;
  /**
   * @param searchId The search id to be canceled
   * @param callback The callback
   */
  cancelSearch(searchId: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param searchId The search id to be canceled
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelSearch(
    searchId: string,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<void>
  ): void;
  cancelSearch(
    searchId: string,
    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,
    callback?: coreHttp.ServiceCallback<void>
  ): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        searchId,
        options
      },
      cancelSearchOperationSpec,
      callback
    );
  }

  /**
   * @summary Purchases the phone number search.
   * @param searchId The search id to be purchased
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  purchaseSearch(
    searchId: string,
    options?: coreHttp.RequestOptionsBase
  ): Promise<coreHttp.RestResponse>;
  /**
   * @param searchId The search id to be purchased
   * @param callback The callback
   */
  purchaseSearch(searchId: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param searchId The search id to be purchased
   * @param options The optional parameters
   * @param callback The callback
   */
  purchaseSearch(
    searchId: string,
    options: coreHttp.RequestOptionsBase,
    callback: coreHttp.ServiceCallback<void>
  ): void;
  purchaseSearch(
    searchId: string,
    options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>,
    callback?: coreHttp.ServiceCallback<void>
  ): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        searchId,
        options
      },
      purchaseSearchOperationSpec,
      callback
    );
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getAllPhoneNumbersOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "administration/phonenumbers/phonenumbers",
  urlParameters: [Parameters.endpoint],
  queryParameters: [Parameters.locale, Parameters.skip, Parameters.take, Parameters.apiVersion],
  responses: {
    200: {
      bodyMapper: Mappers.AcquiredPhoneNumbers
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAllAreaCodesOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "administration/phonenumbers/countries/{countryCode}/areacodes",
  urlParameters: [Parameters.endpoint, Parameters.countryCode],
  queryParameters: [Parameters.locationType, Parameters.phonePlanId, Parameters.apiVersion],
  requestBody: {
    parameterPath: {
      locationOptions: ["options", "locationOptions"]
    },
    mapper: Mappers.LocationOptionsQueries
  },
  responses: {
    200: {
      bodyMapper: Mappers.AreaCodes
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getCapabilitiesUpdateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "administration/phonenumbers/capabilities/{capabilitiesUpdateId}",
  urlParameters: [Parameters.endpoint, Parameters.capabilitiesUpdateId],
  queryParameters: [Parameters.apiVersion],
  responses: {
    200: {
      bodyMapper: Mappers.UpdatePhoneNumberCapabilitiesResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateCapabilitiesOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "administration/phonenumbers/capabilities",
  urlParameters: [Parameters.endpoint],
  queryParameters: [Parameters.apiVersion],
  requestBody: {
    parameterPath: {
      phoneNumberCapabilitiesUpdate: "phoneNumberCapabilitiesUpdate"
    },
    mapper: Mappers.UpdateNumberCapabilitiesRequest
  },
  responses: {
    200: {
      bodyMapper: Mappers.UpdateNumberCapabilitiesResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAllSupportedCountriesOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "administration/phonenumbers/countries",
  urlParameters: [Parameters.endpoint],
  queryParameters: [Parameters.locale, Parameters.skip, Parameters.take, Parameters.apiVersion],
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumberCountries
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getNumberConfigurationOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "administration/phonenumbers/numberconfiguration",
  urlParameters: [Parameters.endpoint],
  queryParameters: [Parameters.apiVersion],
  requestBody: {
    parameterPath: {
      phoneNumber: "phoneNumber"
    },
    mapper: Mappers.NumberConfigurationPhoneNumber
  },
  responses: {
    200: {
      bodyMapper: Mappers.NumberConfigurationResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const configureNumberOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "administration/phonenumbers/numberconfiguration/configure",
  urlParameters: [Parameters.endpoint],
  queryParameters: [Parameters.apiVersion],
  requestBody: {
    parameterPath: {
      pstnConfiguration: "pstnConfiguration",
      phoneNumber: "phoneNumber"
    },
    mapper: Mappers.NumberConfiguration
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const unconfigureNumberOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "administration/phonenumbers/numberconfiguration/unconfigure",
  urlParameters: [Parameters.endpoint],
  queryParameters: [Parameters.apiVersion],
  requestBody: {
    parameterPath: {
      phoneNumber: "phoneNumber"
    },
    mapper: Mappers.NumberConfigurationPhoneNumber
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getPhonePlanGroupsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "administration/phonenumbers/countries/{countryCode}/phoneplangroups",
  urlParameters: [Parameters.endpoint, Parameters.countryCode],
  queryParameters: [
    Parameters.locale,
    Parameters.includeRateInformation,
    Parameters.skip,
    Parameters.take,
    Parameters.apiVersion
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PhonePlanGroups
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getPhonePlansOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path:
    "administration/phonenumbers/countries/{countryCode}/phoneplangroups/{phonePlanGroupId}/phoneplans",
  urlParameters: [Parameters.endpoint, Parameters.countryCode, Parameters.phonePlanGroupId],
  queryParameters: [Parameters.locale, Parameters.skip, Parameters.take, Parameters.apiVersion],
  responses: {
    200: {
      bodyMapper: Mappers.PhonePlansResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getPhonePlanLocationOptionsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path:
    "administration/phonenumbers/countries/{countryCode}/phoneplangroups/{phonePlanGroupId}/phoneplans/{phonePlanId}/locationoptions",
  urlParameters: [
    Parameters.endpoint,
    Parameters.countryCode,
    Parameters.phonePlanGroupId,
    Parameters.phonePlanId
  ],
  queryParameters: [Parameters.locale, Parameters.apiVersion],
  responses: {
    200: {
      bodyMapper: Mappers.LocationOptionsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getReleaseByIdOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "administration/phonenumbers/releases/{releaseId}",
  urlParameters: [Parameters.endpoint, Parameters.releaseId],
  queryParameters: [Parameters.apiVersion],
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumberRelease
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const releasePhoneNumbersOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "administration/phonenumbers/releases",
  urlParameters: [Parameters.endpoint],
  queryParameters: [Parameters.apiVersion],
  requestBody: {
    parameterPath: {
      phoneNumbers: "phoneNumbers"
    },
    mapper: Mappers.ReleaseRequest
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReleaseResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAllReleasesOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "administration/phonenumbers/releases",
  urlParameters: [Parameters.endpoint],
  queryParameters: [Parameters.skip, Parameters.take, Parameters.apiVersion],
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumberEntities
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getSearchByIdOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "administration/phonenumbers/searches/{searchId}",
  urlParameters: [Parameters.endpoint, Parameters.searchId],
  queryParameters: [Parameters.apiVersion],
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumberReservation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createSearchOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "administration/phonenumbers/searches",
  urlParameters: [Parameters.endpoint],
  queryParameters: [Parameters.apiVersion],
  requestBody: {
    parameterPath: {
      displayName: "displayName",
      description: "description",
      phonePlanIds: "phonePlanIds",
      areaCode: "areaCode",
      quantity: ["options", "quantity"],
      locationOptions: ["options", "locationOptions"]
    },
    mapper: Mappers.CreateSearchOptions
  },
  responses: {
    201: {
      bodyMapper: Mappers.CreateSearchResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAllSearchesOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "administration/phonenumbers/searches",
  urlParameters: [Parameters.endpoint],
  queryParameters: [Parameters.skip, Parameters.take, Parameters.apiVersion],
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumberEntities
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const cancelSearchOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "administration/phonenumbers/searches/{searchId}/cancel",
  urlParameters: [Parameters.endpoint, Parameters.searchId],
  queryParameters: [Parameters.apiVersion],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const purchaseSearchOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "administration/phonenumbers/searches/{searchId}/purchase",
  urlParameters: [Parameters.endpoint, Parameters.searchId],
  queryParameters: [Parameters.apiVersion],
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
