/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  ShortCode,
  ShortCodesGetShortCodesOptionalParams,
  ShortCodeCost,
  ShortCodesGetCostsOptionalParams,
  USProgramBrief,
  ShortCodesGetUSProgramBriefsOptionalParams,
  ProgramBriefAttachment,
  ShortCodesGetUSProgramBriefAttachmentsOptionalParams,
  ShortCodesUpsertUSProgramBriefOptionalParams,
  ShortCodesUpsertUSProgramBriefResponse,
  ShortCodesDeleteUSProgramBriefOptionalParams,
  ShortCodesGetUSProgramBriefOptionalParams,
  ShortCodesGetUSProgramBriefResponse,
  ShortCodesSubmitUSProgramBriefOptionalParams,
  ShortCodesSubmitUSProgramBriefResponse,
  AttachmentType,
  FileType,
  ShortCodesCreateOrReplaceUSProgramBriefAttachmentOptionalParams,
  ShortCodesCreateOrReplaceUSProgramBriefAttachmentResponse,
  ShortCodesGetUSProgramBriefAttachmentOptionalParams,
  ShortCodesGetUSProgramBriefAttachmentResponse,
  ShortCodesDeleteUSProgramBriefAttachmentOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ShortCodes. */
export interface ShortCodes {
  /**
   * Gets the list of short codes for the current resource.
   * @param options The options parameters.
   */
  listShortCodes(
    options?: ShortCodesGetShortCodesOptionalParams
  ): PagedAsyncIterableIterator<ShortCode>;
  /**
   * This method supports pagination via the "skip" and "top" query parameters.
   * @param options The options parameters.
   */
  listCosts(
    options?: ShortCodesGetCostsOptionalParams
  ): PagedAsyncIterableIterator<ShortCodeCost>;
  /**
   * Gets the list of US Program Briefs for the current resource.
   * @param options The options parameters.
   */
  listUSProgramBriefs(
    options?: ShortCodesGetUSProgramBriefsOptionalParams
  ): PagedAsyncIterableIterator<USProgramBrief>;
  /**
   * Gets the list of attachments from a US Program Brief.
   * @param programBriefId
   * @param options The options parameters.
   */
  listUSProgramBriefAttachments(
    programBriefId: string,
    options?: ShortCodesGetUSProgramBriefAttachmentsOptionalParams
  ): PagedAsyncIterableIterator<ProgramBriefAttachment>;
  /**
   * Creates or updates a US Program Brief.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param options The options parameters.
   */
  upsertUSProgramBrief(
    programBriefId: string,
    options?: ShortCodesUpsertUSProgramBriefOptionalParams
  ): Promise<ShortCodesUpsertUSProgramBriefResponse>;
  /**
   * Deletes a US Program Brief.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param options The options parameters.
   */
  deleteUSProgramBrief(
    programBriefId: string,
    options?: ShortCodesDeleteUSProgramBriefOptionalParams
  ): Promise<void>;
  /**
   * Get a US Program Brief by id.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param options The options parameters.
   */
  getUSProgramBrief(
    programBriefId: string,
    options?: ShortCodesGetUSProgramBriefOptionalParams
  ): Promise<ShortCodesGetUSProgramBriefResponse>;
  /**
   * Submits a US Program Brief for review.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param options The options parameters.
   */
  submitUSProgramBrief(
    programBriefId: string,
    options?: ShortCodesSubmitUSProgramBriefOptionalParams
  ): Promise<ShortCodesSubmitUSProgramBriefResponse>;
  /**
   * Creates or replace an attachment on a US Program Brief.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param id Program Brief Attachment Id.
   * @param fileName The name of the file being attached
   *                 e.g. 'myFile01'
   * @param fileType The type of file being attached
   *                 e.g. 'pdf', 'jpg', 'png'
   * @param fileContentBase64 File content as base 64 encoded string
   * @param type Attachment type describing the purpose of the attachment
   *             e.g. 'callToAction', 'termsOfService'
   * @param options The options parameters.
   */
  createOrReplaceUSProgramBriefAttachment(
    programBriefId: string,
    attachmentId: string,
    id: string,
    fileName: string,
    fileType: FileType,
    fileContentBase64: string,
    type: AttachmentType,
    options?: ShortCodesCreateOrReplaceUSProgramBriefAttachmentOptionalParams
  ): Promise<ShortCodesCreateOrReplaceUSProgramBriefAttachmentResponse>;
  /**
   * Gets a specific an attachment from a US Program Brief.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param options The options parameters.
   */
  getUSProgramBriefAttachment(
    programBriefId: string,
    attachmentId: string,
    options?: ShortCodesGetUSProgramBriefAttachmentOptionalParams
  ): Promise<ShortCodesGetUSProgramBriefAttachmentResponse>;
  /**
   * Deletes a specific attachment from a US Program Brief.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param options The options parameters.
   */
  deleteUSProgramBriefAttachment(
    programBriefId: string,
    attachmentId: string,
    options?: ShortCodesDeleteUSProgramBriefAttachmentOptionalParams
  ): Promise<void>;
}
