/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ShortCodesOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ShortCodesClientContext } from "../shortCodesClientContext";
import {
  ShortCode,
  ShortCodesGetShortCodesNextOptionalParams,
  ShortCodesGetShortCodesOptionalParams,
  USProgramBrief,
  ShortCodesGetUSProgramBriefsNextOptionalParams,
  ShortCodesGetUSProgramBriefsOptionalParams,
  ProgramBriefAttachment,
  ShortCodesGetUSProgramBriefAttachmentsNextOptionalParams,
  ShortCodesGetUSProgramBriefAttachmentsOptionalParams,
  ShortCodesGetShortCodesResponse,
  ShortCodesUpsertUSProgramBriefOptionalParams,
  ShortCodesUpsertUSProgramBriefResponse,
  ShortCodesDeleteUSProgramBriefOptionalParams,
  ShortCodesGetUSProgramBriefOptionalParams,
  ShortCodesGetUSProgramBriefResponse,
  ShortCodesSubmitUSProgramBriefOptionalParams,
  ShortCodesSubmitUSProgramBriefResponse,
  ShortCodesGetUSProgramBriefsResponse,
  ShortCodesCreateOrReplaceUSProgramBriefAttachmentOptionalParams,
  ShortCodesCreateOrReplaceUSProgramBriefAttachmentResponse,
  ShortCodesGetUSProgramBriefAttachmentOptionalParams,
  ShortCodesGetUSProgramBriefAttachmentResponse,
  ShortCodesDeleteUSProgramBriefAttachmentOptionalParams,
  ShortCodesGetUSProgramBriefAttachmentsResponse,
  ShortCodesGetShortCodesNextResponse,
  ShortCodesGetUSProgramBriefsNextResponse,
  ShortCodesGetUSProgramBriefAttachmentsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ShortCodesOperations operations. */
export class ShortCodesOperationsImpl implements ShortCodesOperations {
  private readonly client: ShortCodesClientContext;

  /**
   * Initialize a new instance of the class ShortCodesOperations class.
   * @param client Reference to the service client
   */
  constructor(client: ShortCodesClientContext) {
    this.client = client;
  }

  /**
   * Gets the list of short codes for the current resource.
   * @param options The options parameters.
   */
  public listShortCodes(
    options?: ShortCodesGetShortCodesOptionalParams
  ): PagedAsyncIterableIterator<ShortCode> {
    const iter = this.getShortCodesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getShortCodesPagingPage(options);
      }
    };
  }

  private async *getShortCodesPagingPage(
    options?: ShortCodesGetShortCodesOptionalParams
  ): AsyncIterableIterator<ShortCode[]> {
    let result = await this._getShortCodes(options);
    yield result.shortCodes || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getShortCodesNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.shortCodes || [];
    }
  }

  private async *getShortCodesPagingAll(
    options?: ShortCodesGetShortCodesOptionalParams
  ): AsyncIterableIterator<ShortCode> {
    for await (const page of this.getShortCodesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets the list of US Program Briefs for the current resource.
   * @param options The options parameters.
   */
  public listUSProgramBriefs(
    options?: ShortCodesGetUSProgramBriefsOptionalParams
  ): PagedAsyncIterableIterator<USProgramBrief> {
    const iter = this.getUSProgramBriefsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getUSProgramBriefsPagingPage(options);
      }
    };
  }

  private async *getUSProgramBriefsPagingPage(
    options?: ShortCodesGetUSProgramBriefsOptionalParams
  ): AsyncIterableIterator<USProgramBrief[]> {
    let result = await this._getUSProgramBriefs(options);
    yield result.programBriefs || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getUSProgramBriefsNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.programBriefs || [];
    }
  }

  private async *getUSProgramBriefsPagingAll(
    options?: ShortCodesGetUSProgramBriefsOptionalParams
  ): AsyncIterableIterator<USProgramBrief> {
    for await (const page of this.getUSProgramBriefsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets the list of attachments from a US Program Brief.
   * @param programBriefId
   * @param options The options parameters.
   */
  public listUSProgramBriefAttachments(
    programBriefId: string,
    options?: ShortCodesGetUSProgramBriefAttachmentsOptionalParams
  ): PagedAsyncIterableIterator<ProgramBriefAttachment> {
    const iter = this.getUSProgramBriefAttachmentsPagingAll(
      programBriefId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getUSProgramBriefAttachmentsPagingPage(
          programBriefId,
          options
        );
      }
    };
  }

  private async *getUSProgramBriefAttachmentsPagingPage(
    programBriefId: string,
    options?: ShortCodesGetUSProgramBriefAttachmentsOptionalParams
  ): AsyncIterableIterator<ProgramBriefAttachment[]> {
    let result = await this._getUSProgramBriefAttachments(
      programBriefId,
      options
    );
    yield result.attachments || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getUSProgramBriefAttachmentsNext(
        programBriefId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.attachments || [];
    }
  }

  private async *getUSProgramBriefAttachmentsPagingAll(
    programBriefId: string,
    options?: ShortCodesGetUSProgramBriefAttachmentsOptionalParams
  ): AsyncIterableIterator<ProgramBriefAttachment> {
    for await (const page of this.getUSProgramBriefAttachmentsPagingPage(
      programBriefId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the list of short codes for the current resource.
   * @param options The options parameters.
   */
  private _getShortCodes(
    options?: ShortCodesGetShortCodesOptionalParams
  ): Promise<ShortCodesGetShortCodesResponse> {
    return this.client.sendOperationRequest(
      { options },
      getShortCodesOperationSpec
    );
  }

  /**
   * Creates or updates a US Program Brief.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param options The options parameters.
   */
  upsertUSProgramBrief(
    programBriefId: string,
    options?: ShortCodesUpsertUSProgramBriefOptionalParams
  ): Promise<ShortCodesUpsertUSProgramBriefResponse> {
    return this.client.sendOperationRequest(
      { programBriefId, options },
      upsertUSProgramBriefOperationSpec
    );
  }

  /**
   * Deletes a US Program Brief.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param options The options parameters.
   */
  deleteUSProgramBrief(
    programBriefId: string,
    options?: ShortCodesDeleteUSProgramBriefOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { programBriefId, options },
      deleteUSProgramBriefOperationSpec
    );
  }

  /**
   * Get a US Program Brief by id.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param options The options parameters.
   */
  getUSProgramBrief(
    programBriefId: string,
    options?: ShortCodesGetUSProgramBriefOptionalParams
  ): Promise<ShortCodesGetUSProgramBriefResponse> {
    return this.client.sendOperationRequest(
      { programBriefId, options },
      getUSProgramBriefOperationSpec
    );
  }

  /**
   * Submits a US Program Brief for review.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param options The options parameters.
   */
  submitUSProgramBrief(
    programBriefId: string,
    options?: ShortCodesSubmitUSProgramBriefOptionalParams
  ): Promise<ShortCodesSubmitUSProgramBriefResponse> {
    return this.client.sendOperationRequest(
      { programBriefId, options },
      submitUSProgramBriefOperationSpec
    );
  }

  /**
   * Gets the list of US Program Briefs for the current resource.
   * @param options The options parameters.
   */
  private _getUSProgramBriefs(
    options?: ShortCodesGetUSProgramBriefsOptionalParams
  ): Promise<ShortCodesGetUSProgramBriefsResponse> {
    return this.client.sendOperationRequest(
      { options },
      getUSProgramBriefsOperationSpec
    );
  }

  /**
   * Creates or replace an attachment on a US Program Brief.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param id Program Brief Attachment Id.
   * @param options The options parameters.
   */
  createOrReplaceUSProgramBriefAttachment(
    programBriefId: string,
    attachmentId: string,
    id: string,
    options?: ShortCodesCreateOrReplaceUSProgramBriefAttachmentOptionalParams
  ): Promise<ShortCodesCreateOrReplaceUSProgramBriefAttachmentResponse> {
    return this.client.sendOperationRequest(
      { programBriefId, attachmentId, id, options },
      createOrReplaceUSProgramBriefAttachmentOperationSpec
    );
  }

  /**
   * Gets a specific an attachment from a US Program Brief.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param options The options parameters.
   */
  getUSProgramBriefAttachment(
    programBriefId: string,
    attachmentId: string,
    options?: ShortCodesGetUSProgramBriefAttachmentOptionalParams
  ): Promise<ShortCodesGetUSProgramBriefAttachmentResponse> {
    return this.client.sendOperationRequest(
      { programBriefId, attachmentId, options },
      getUSProgramBriefAttachmentOperationSpec
    );
  }

  /**
   * Deletes a specific attachment from a US Program Brief.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param options The options parameters.
   */
  deleteUSProgramBriefAttachment(
    programBriefId: string,
    attachmentId: string,
    options?: ShortCodesDeleteUSProgramBriefAttachmentOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { programBriefId, attachmentId, options },
      deleteUSProgramBriefAttachmentOperationSpec
    );
  }

  /**
   * Gets the list of attachments from a US Program Brief.
   * @param programBriefId
   * @param options The options parameters.
   */
  private _getUSProgramBriefAttachments(
    programBriefId: string,
    options?: ShortCodesGetUSProgramBriefAttachmentsOptionalParams
  ): Promise<ShortCodesGetUSProgramBriefAttachmentsResponse> {
    return this.client.sendOperationRequest(
      { programBriefId, options },
      getUSProgramBriefAttachmentsOperationSpec
    );
  }

  /**
   * GetShortCodesNext
   * @param nextLink The nextLink from the previous successful call to the GetShortCodes method.
   * @param options The options parameters.
   */
  private _getShortCodesNext(
    nextLink: string,
    options?: ShortCodesGetShortCodesNextOptionalParams
  ): Promise<ShortCodesGetShortCodesNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      getShortCodesNextOperationSpec
    );
  }

  /**
   * GetUSProgramBriefsNext
   * @param nextLink The nextLink from the previous successful call to the GetUSProgramBriefs method.
   * @param options The options parameters.
   */
  private _getUSProgramBriefsNext(
    nextLink: string,
    options?: ShortCodesGetUSProgramBriefsNextOptionalParams
  ): Promise<ShortCodesGetUSProgramBriefsNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      getUSProgramBriefsNextOperationSpec
    );
  }

  /**
   * GetUSProgramBriefAttachmentsNext
   * @param programBriefId
   * @param nextLink The nextLink from the previous successful call to the GetUSProgramBriefAttachments
   *                 method.
   * @param options The options parameters.
   */
  private _getUSProgramBriefAttachmentsNext(
    programBriefId: string,
    nextLink: string,
    options?: ShortCodesGetUSProgramBriefAttachmentsNextOptionalParams
  ): Promise<ShortCodesGetUSProgramBriefAttachmentsNextResponse> {
    return this.client.sendOperationRequest(
      { programBriefId, nextLink, options },
      getUSProgramBriefAttachmentsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getShortCodesOperationSpec: coreClient.OperationSpec = {
  path: "/shortCodes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ShortCodes
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.skip, Parameters.top, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const upsertUSProgramBriefOperationSpec: coreClient.OperationSpec = {
  path: "/shortCodes/countries/US/programBriefs/{programBriefId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.USProgramBrief
    },
    201: {
      bodyMapper: Mappers.USProgramBrief
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.programBriefId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteUSProgramBriefOperationSpec: coreClient.OperationSpec = {
  path: "/shortCodes/countries/US/programBriefs/{programBriefId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.programBriefId],
  headerParameters: [Parameters.accept],
  serializer
};
const getUSProgramBriefOperationSpec: coreClient.OperationSpec = {
  path: "/shortCodes/countries/US/programBriefs/{programBriefId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USProgramBrief
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.programBriefId],
  headerParameters: [Parameters.accept],
  serializer
};
const submitUSProgramBriefOperationSpec: coreClient.OperationSpec = {
  path: "/shortCodes/countries/US/programBriefs/{programBriefId}/:submit",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.USProgramBrief
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.programBriefId],
  headerParameters: [Parameters.accept],
  serializer
};
const getUSProgramBriefsOperationSpec: coreClient.OperationSpec = {
  path: "/shortCodes/countries/US/programBriefs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USProgramBriefs
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.skip, Parameters.top, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrReplaceUSProgramBriefAttachmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/shortCodes/countries/US/programBriefs/{programBriefId}/attachments/{attachmentId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ProgramBriefAttachment
    },
    201: {
      bodyMapper: Mappers.ProgramBriefAttachment
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: {
    parameterPath: {
      id: ["id"],
      typeParam: ["options", "typeParam"],
      friendlyName: ["options", "friendlyName"],
      fileSize: ["options", "fileSize"],
      fileType: ["options", "fileType"],
      fileContent: ["options", "fileContent"]
    },
    mapper: { ...Mappers.ProgramBriefAttachment, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.programBriefId,
    Parameters.attachmentId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getUSProgramBriefAttachmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/shortCodes/countries/US/programBriefs/{programBriefId}/attachments/{attachmentId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProgramBriefAttachment
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.programBriefId,
    Parameters.attachmentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteUSProgramBriefAttachmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/shortCodes/countries/US/programBriefs/{programBriefId}/attachments/{attachmentId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.programBriefId,
    Parameters.attachmentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getUSProgramBriefAttachmentsOperationSpec: coreClient.OperationSpec = {
  path: "/shortCodes/countries/US/programBriefs/{programBriefId}/attachments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProgramBriefAttachments
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.skip, Parameters.top, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.programBriefId],
  headerParameters: [Parameters.accept],
  serializer
};
const getShortCodesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ShortCodes
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.skip, Parameters.top, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getUSProgramBriefsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USProgramBriefs
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.skip, Parameters.top, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getUSProgramBriefAttachmentsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProgramBriefAttachments
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.skip, Parameters.top, Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.programBriefId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
