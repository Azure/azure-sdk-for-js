/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ShortCodesClientContext } from "../shortCodesClientContext";
import {
  ShortCode,
  ShortCodesGetShortCodesNextOptionalParams,
  ShortCodesGetShortCodesOptionalParams,
  USProgramBrief,
  ShortCodesGetUSProgramBriefsNextOptionalParams,
  ShortCodesGetUSProgramBriefsOptionalParams,
  ShortCodesGetShortCodesResponse,
  ShortCodesUpsertUSProgramBriefOptionalParams,
  ShortCodesUpsertUSProgramBriefResponse,
  ShortCodesGetUSProgramBriefResponse,
  ShortCodesSubmitUSProgramBriefResponse,
  ShortCodesGetUSProgramBriefsResponse,
  ShortCodesGetShortCodesNextResponse,
  ShortCodesGetUSProgramBriefsNextResponse
} from "../models";

/** Class representing a ShortCodes. */
export class ShortCodes {
  private readonly client: ShortCodesClientContext;

  /**
   * Initialize a new instance of the class ShortCodes class.
   * @param client Reference to the service client
   */
  constructor(client: ShortCodesClientContext) {
    this.client = client;
  }

  /**
   * Gets the list of short codes for the current resource.
   * @param options The options parameters.
   */
  public listShortCodes(
    options?: ShortCodesGetShortCodesOptionalParams
  ): PagedAsyncIterableIterator<ShortCode> {
    const iter = this.getShortCodesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getShortCodesPagingPage(options);
      }
    };
  }

  private async *getShortCodesPagingPage(
    options?: ShortCodesGetShortCodesOptionalParams
  ): AsyncIterableIterator<ShortCode[]> {
    let result = await this._getShortCodes(options);
    yield result.shortCodes || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getShortCodesNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.shortCodes || [];
    }
  }

  private async *getShortCodesPagingAll(
    options?: ShortCodesGetShortCodesOptionalParams
  ): AsyncIterableIterator<ShortCode> {
    for await (const page of this.getShortCodesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets the list of US Program Briefs for the current resource.
   * @param options The options parameters.
   */
  public listUSProgramBriefs(
    options?: ShortCodesGetUSProgramBriefsOptionalParams
  ): PagedAsyncIterableIterator<USProgramBrief> {
    const iter = this.getUSProgramBriefsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getUSProgramBriefsPagingPage(options);
      }
    };
  }

  private async *getUSProgramBriefsPagingPage(
    options?: ShortCodesGetUSProgramBriefsOptionalParams
  ): AsyncIterableIterator<USProgramBrief[]> {
    let result = await this._getUSProgramBriefs(options);
    yield result.programBriefs || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getUSProgramBriefsNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.programBriefs || [];
    }
  }

  private async *getUSProgramBriefsPagingAll(
    options?: ShortCodesGetUSProgramBriefsOptionalParams
  ): AsyncIterableIterator<USProgramBrief> {
    for await (const page of this.getUSProgramBriefsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets the list of short codes for the current resource.
   * @param options The options parameters.
   */
  private _getShortCodes(
    options?: ShortCodesGetShortCodesOptionalParams
  ): Promise<ShortCodesGetShortCodesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getShortCodesOperationSpec
    ) as Promise<ShortCodesGetShortCodesResponse>;
  }

  /**
   * Creates or updates a US Program Brief.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param options The options parameters.
   */
  upsertUSProgramBrief(
    programBriefId: string,
    options?: ShortCodesUpsertUSProgramBriefOptionalParams
  ): Promise<ShortCodesUpsertUSProgramBriefResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      programBriefId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      upsertUSProgramBriefOperationSpec
    ) as Promise<ShortCodesUpsertUSProgramBriefResponse>;
  }

  /**
   * Deletes a US Program Brief.
   * @param programBriefId Program Brief Id. Must be a valid GUID
   * @param options The options parameters.
   */
  deleteUSProgramBrief(
    programBriefId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      programBriefId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteUSProgramBriefOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * @param programBriefId
   * @param options The options parameters.
   */
  getUSProgramBrief(
    programBriefId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ShortCodesGetUSProgramBriefResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      programBriefId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getUSProgramBriefOperationSpec
    ) as Promise<ShortCodesGetUSProgramBriefResponse>;
  }

  /**
   * @param programBriefId
   * @param options The options parameters.
   */
  submitUSProgramBrief(
    programBriefId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ShortCodesSubmitUSProgramBriefResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      programBriefId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      submitUSProgramBriefOperationSpec
    ) as Promise<ShortCodesSubmitUSProgramBriefResponse>;
  }

  /**
   * Gets the list of US Program Briefs for the current resource.
   * @param options The options parameters.
   */
  private _getUSProgramBriefs(
    options?: ShortCodesGetUSProgramBriefsOptionalParams
  ): Promise<ShortCodesGetUSProgramBriefsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getUSProgramBriefsOperationSpec
    ) as Promise<ShortCodesGetUSProgramBriefsResponse>;
  }

  /**
   * GetShortCodesNext
   * @param nextLink The nextLink from the previous successful call to the GetShortCodes method.
   * @param options The options parameters.
   */
  private _getShortCodesNext(
    nextLink: string,
    options?: ShortCodesGetShortCodesNextOptionalParams
  ): Promise<ShortCodesGetShortCodesNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getShortCodesNextOperationSpec
    ) as Promise<ShortCodesGetShortCodesNextResponse>;
  }

  /**
   * GetUSProgramBriefsNext
   * @param nextLink The nextLink from the previous successful call to the GetUSProgramBriefs method.
   * @param options The options parameters.
   */
  private _getUSProgramBriefsNext(
    nextLink: string,
    options?: ShortCodesGetUSProgramBriefsNextOptionalParams
  ): Promise<ShortCodesGetUSProgramBriefsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getUSProgramBriefsNextOperationSpec
    ) as Promise<ShortCodesGetUSProgramBriefsNextResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getShortCodesOperationSpec: coreHttp.OperationSpec = {
  path: "/shortCodes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ShortCodes
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.skip, Parameters.top, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const upsertUSProgramBriefOperationSpec: coreHttp.OperationSpec = {
  path: "/shortCodes/countries/US/programBriefs/{programBriefId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.USProgramBrief
    },
    201: {
      bodyMapper: Mappers.USProgramBrief
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.programBriefId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteUSProgramBriefOperationSpec: coreHttp.OperationSpec = {
  path: "/shortCodes/countries/US/programBriefs/{programBriefId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.programBriefId],
  headerParameters: [Parameters.accept],
  serializer
};
const getUSProgramBriefOperationSpec: coreHttp.OperationSpec = {
  path: "/shortCodes/countries/US/programBriefs/{programBriefId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USProgramBrief
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.programBriefId],
  headerParameters: [Parameters.accept],
  serializer
};
const submitUSProgramBriefOperationSpec: coreHttp.OperationSpec = {
  path: "/shortCodes/countries/US/programBriefs/{programBriefId}/:submit",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.USProgramBrief
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.programBriefId],
  headerParameters: [Parameters.accept],
  serializer
};
const getUSProgramBriefsOperationSpec: coreHttp.OperationSpec = {
  path: "/shortCodes/countries/US/programBriefs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USProgramBriefs
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.skip, Parameters.top, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const getShortCodesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ShortCodes
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.skip, Parameters.top, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getUSProgramBriefsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USProgramBriefs
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.skip, Parameters.top, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
