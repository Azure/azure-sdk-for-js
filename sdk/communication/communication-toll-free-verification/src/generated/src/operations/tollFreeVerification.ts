/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { TollFreeVerification } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TollFreeVerificationClient } from "../tollFreeVerificationClient";
import {
  CampaignBrief,
  TollFreeVerificationGetCampaignBriefsNextOptionalParams,
  TollFreeVerificationGetCampaignBriefsOptionalParams,
  CampaignBriefAttachment,
  TollFreeVerificationGetCampaignBriefAttachmentsNextOptionalParams,
  TollFreeVerificationGetCampaignBriefAttachmentsOptionalParams,
  TollFreeVerificationUpsertCampaignBriefOptionalParams,
  TollFreeVerificationUpsertCampaignBriefResponse,
  TollFreeVerificationDeleteCampaignBriefOptionalParams,
  TollFreeVerificationGetCampaignBriefOptionalParams,
  TollFreeVerificationGetCampaignBriefResponse,
  TollFreeVerificationSubmitCampaignBriefOptionalParams,
  TollFreeVerificationSubmitCampaignBriefResponse,
  TollFreeVerificationGetCampaignBriefsResponse,
  FileType,
  TollFreeVerificationCreateOrReplaceCampaignBriefAttachmentOptionalParams,
  TollFreeVerificationCreateOrReplaceCampaignBriefAttachmentResponse,
  TollFreeVerificationDeleteCampaignBriefAttachmentOptionalParams,
  TollFreeVerificationGetCampaignBriefAttachmentOptionalParams,
  TollFreeVerificationGetCampaignBriefAttachmentResponse,
  TollFreeVerificationGetCampaignBriefAttachmentsResponse,
  TollFreeVerificationGetCampaignBriefsNextResponse,
  TollFreeVerificationGetCampaignBriefAttachmentsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing TollFreeVerification operations. */
export class TollFreeVerificationImpl implements TollFreeVerification {
  private readonly client: TollFreeVerificationClient;

  /**
   * Initialize a new instance of the class TollFreeVerification class.
   * @param client Reference to the service client
   */
  constructor(client: TollFreeVerificationClient) {
    this.client = client;
  }

  /**
   * Get a list of Campaign Briefs for the current resource.
   * @param countryCode
   * @param options The options parameters.
   */
  public listCampaignBriefs(
    countryCode: string,
    options?: TollFreeVerificationGetCampaignBriefsOptionalParams
  ): PagedAsyncIterableIterator<CampaignBrief> {
    const iter = this.getCampaignBriefsPagingAll(countryCode, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getCampaignBriefsPagingPage(countryCode, options);
      }
    };
  }

  private async *getCampaignBriefsPagingPage(
    countryCode: string,
    options?: TollFreeVerificationGetCampaignBriefsOptionalParams
  ): AsyncIterableIterator<CampaignBrief[]> {
    let result = await this._getCampaignBriefs(countryCode, options);
    yield result.campaignBriefs || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getCampaignBriefsNext(
        countryCode,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.campaignBriefs || [];
    }
  }

  private async *getCampaignBriefsPagingAll(
    countryCode: string,
    options?: TollFreeVerificationGetCampaignBriefsOptionalParams
  ): AsyncIterableIterator<CampaignBrief> {
    for await (const page of this.getCampaignBriefsPagingPage(
      countryCode,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of attachments from a Campaign Brief.
   * @param countryCode
   * @param campaignBriefId
   * @param options The options parameters.
   */
  public listCampaignBriefAttachments(
    countryCode: string,
    campaignBriefId: string,
    options?: TollFreeVerificationGetCampaignBriefAttachmentsOptionalParams
  ): PagedAsyncIterableIterator<CampaignBriefAttachment> {
    const iter = this.getCampaignBriefAttachmentsPagingAll(
      countryCode,
      campaignBriefId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getCampaignBriefAttachmentsPagingPage(
          countryCode,
          campaignBriefId,
          options
        );
      }
    };
  }

  private async *getCampaignBriefAttachmentsPagingPage(
    countryCode: string,
    campaignBriefId: string,
    options?: TollFreeVerificationGetCampaignBriefAttachmentsOptionalParams
  ): AsyncIterableIterator<CampaignBriefAttachment[]> {
    let result = await this._getCampaignBriefAttachments(
      countryCode,
      campaignBriefId,
      options
    );
    yield result.attachments || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getCampaignBriefAttachmentsNext(
        countryCode,
        campaignBriefId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.attachments || [];
    }
  }

  private async *getCampaignBriefAttachmentsPagingAll(
    countryCode: string,
    campaignBriefId: string,
    options?: TollFreeVerificationGetCampaignBriefAttachmentsOptionalParams
  ): AsyncIterableIterator<CampaignBriefAttachment> {
    for await (const page of this.getCampaignBriefAttachmentsPagingPage(
      countryCode,
      campaignBriefId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates or updates a Campaign Brief.
   * @param campaignBriefId Campaign Brief Id. Must be a valid GUID
   * @param countryCode
   * @param options The options parameters.
   */
  async upsertCampaignBrief(
    campaignBriefId: string,
    countryCode: string,
    options?: TollFreeVerificationUpsertCampaignBriefOptionalParams
  ): Promise<TollFreeVerificationUpsertCampaignBriefResponse> {
    return tracingClient.withSpan(
      "TollFreeVerificationClient.upsertCampaignBrief",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { campaignBriefId, countryCode, options },
          upsertCampaignBriefOperationSpec
        ) as Promise<TollFreeVerificationUpsertCampaignBriefResponse>;
      }
    );
  }

  /**
   * Deletes a Campaign Brief.
   * @param campaignBriefId Campaign Brief Id of brief to be deleted. Must be a valid GUID
   * @param countryCode
   * @param options The options parameters.
   */
  async deleteCampaignBrief(
    campaignBriefId: string,
    countryCode: string,
    options?: TollFreeVerificationDeleteCampaignBriefOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "TollFreeVerificationClient.deleteCampaignBrief",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { campaignBriefId, countryCode, options },
          deleteCampaignBriefOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * Get a Campaign Brief by id.
   * @param campaignBriefId Campaign Brief Id. Must be a valid GUID
   * @param countryCode
   * @param options The options parameters.
   */
  async getCampaignBrief(
    campaignBriefId: string,
    countryCode: string,
    options?: TollFreeVerificationGetCampaignBriefOptionalParams
  ): Promise<TollFreeVerificationGetCampaignBriefResponse> {
    return tracingClient.withSpan(
      "TollFreeVerificationClient.getCampaignBrief",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { campaignBriefId, countryCode, options },
          getCampaignBriefOperationSpec
        ) as Promise<TollFreeVerificationGetCampaignBriefResponse>;
      }
    );
  }

  /**
   * Submits a Campaign Brief.
   * @param campaignBriefId Campaign Brief Id of brief to be submitted. Must be a valid GUID
   * @param countryCode
   * @param options The options parameters.
   */
  async submitCampaignBrief(
    campaignBriefId: string,
    countryCode: string,
    options?: TollFreeVerificationSubmitCampaignBriefOptionalParams
  ): Promise<TollFreeVerificationSubmitCampaignBriefResponse> {
    return tracingClient.withSpan(
      "TollFreeVerificationClient.submitCampaignBrief",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { campaignBriefId, countryCode, options },
          submitCampaignBriefOperationSpec
        ) as Promise<TollFreeVerificationSubmitCampaignBriefResponse>;
      }
    );
  }

  /**
   * Get a list of Campaign Briefs for the current resource.
   * @param countryCode
   * @param options The options parameters.
   */
  private async _getCampaignBriefs(
    countryCode: string,
    options?: TollFreeVerificationGetCampaignBriefsOptionalParams
  ): Promise<TollFreeVerificationGetCampaignBriefsResponse> {
    return tracingClient.withSpan(
      "TollFreeVerificationClient._getCampaignBriefs",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { countryCode, options },
          getCampaignBriefsOperationSpec
        ) as Promise<TollFreeVerificationGetCampaignBriefsResponse>;
      }
    );
  }

  /**
   * Creates or updates an attachment on a Campaign Brief.
   * @param countryCode Country Code Id. Must be a valid country code
   * @param campaignBriefId Campaign Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param id Campaign Brief Attachment Id.
   * @param fileName The name of the file being attached
   *                 e.g. 'myFile01'
   * @param fileType The type of file being attached
   *                 e.g. 'pdf', 'jpg', 'png'
   * @param fileContentBase64 File content as base 64 encoded string
   * @param options The options parameters.
   */
  async createOrReplaceCampaignBriefAttachment(
    countryCode: string,
    campaignBriefId: string,
    attachmentId: string,
    id: string,
    fileName: string,
    fileType: FileType,
    fileContentBase64: string,
    options?: TollFreeVerificationCreateOrReplaceCampaignBriefAttachmentOptionalParams
  ): Promise<
    TollFreeVerificationCreateOrReplaceCampaignBriefAttachmentResponse
  > {
    return tracingClient.withSpan(
      "TollFreeVerificationClient.createOrReplaceCampaignBriefAttachment",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          {
            countryCode,
            campaignBriefId,
            attachmentId,
            id,
            fileName,
            fileType,
            fileContentBase64,
            options
          },
          createOrReplaceCampaignBriefAttachmentOperationSpec
        ) as Promise<
          TollFreeVerificationCreateOrReplaceCampaignBriefAttachmentResponse
        >;
      }
    );
  }

  /**
   * Deletes a specific attachment from a Campaign Brief.
   * @param campaignBriefId Campaign Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param countryCode
   * @param options The options parameters.
   */
  async deleteCampaignBriefAttachment(
    campaignBriefId: string,
    attachmentId: string,
    countryCode: string,
    options?: TollFreeVerificationDeleteCampaignBriefAttachmentOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "TollFreeVerificationClient.deleteCampaignBriefAttachment",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { campaignBriefId, attachmentId, countryCode, options },
          deleteCampaignBriefAttachmentOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * Gets a specific attachment from a Campaign Brief.
   * @param countryCode
   * @param campaignBriefId Campaign Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param options The options parameters.
   */
  async getCampaignBriefAttachment(
    countryCode: string,
    campaignBriefId: string,
    attachmentId: string,
    options?: TollFreeVerificationGetCampaignBriefAttachmentOptionalParams
  ): Promise<TollFreeVerificationGetCampaignBriefAttachmentResponse> {
    return tracingClient.withSpan(
      "TollFreeVerificationClient.getCampaignBriefAttachment",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { countryCode, campaignBriefId, attachmentId, options },
          getCampaignBriefAttachmentOperationSpec
        ) as Promise<TollFreeVerificationGetCampaignBriefAttachmentResponse>;
      }
    );
  }

  /**
   * Gets a list of attachments from a Campaign Brief.
   * @param countryCode
   * @param campaignBriefId
   * @param options The options parameters.
   */
  private async _getCampaignBriefAttachments(
    countryCode: string,
    campaignBriefId: string,
    options?: TollFreeVerificationGetCampaignBriefAttachmentsOptionalParams
  ): Promise<TollFreeVerificationGetCampaignBriefAttachmentsResponse> {
    return tracingClient.withSpan(
      "TollFreeVerificationClient._getCampaignBriefAttachments",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { countryCode, campaignBriefId, options },
          getCampaignBriefAttachmentsOperationSpec
        ) as Promise<TollFreeVerificationGetCampaignBriefAttachmentsResponse>;
      }
    );
  }

  /**
   * GetCampaignBriefsNext
   * @param countryCode
   * @param nextLink The nextLink from the previous successful call to the GetCampaignBriefs method.
   * @param options The options parameters.
   */
  private async _getCampaignBriefsNext(
    countryCode: string,
    nextLink: string,
    options?: TollFreeVerificationGetCampaignBriefsNextOptionalParams
  ): Promise<TollFreeVerificationGetCampaignBriefsNextResponse> {
    return tracingClient.withSpan(
      "TollFreeVerificationClient._getCampaignBriefsNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { countryCode, nextLink, options },
          getCampaignBriefsNextOperationSpec
        ) as Promise<TollFreeVerificationGetCampaignBriefsNextResponse>;
      }
    );
  }

  /**
   * GetCampaignBriefAttachmentsNext
   * @param countryCode
   * @param campaignBriefId
   * @param nextLink The nextLink from the previous successful call to the GetCampaignBriefAttachments
   *                 method.
   * @param options The options parameters.
   */
  private async _getCampaignBriefAttachmentsNext(
    countryCode: string,
    campaignBriefId: string,
    nextLink: string,
    options?: TollFreeVerificationGetCampaignBriefAttachmentsNextOptionalParams
  ): Promise<TollFreeVerificationGetCampaignBriefAttachmentsNextResponse> {
    return tracingClient.withSpan(
      "TollFreeVerificationClient._getCampaignBriefAttachmentsNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { countryCode, campaignBriefId, nextLink, options },
          getCampaignBriefAttachmentsNextOperationSpec
        ) as Promise<
          TollFreeVerificationGetCampaignBriefAttachmentsNextResponse
        >;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const upsertCampaignBriefOperationSpec: coreClient.OperationSpec = {
  path:
    "/tollfreeVerification/countries/{countryCode}/campaignBriefs/{campaignBriefId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CampaignBrief
    },
    201: {
      bodyMapper: Mappers.CampaignBrief
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.campaignBriefId,
    Parameters.countryCode
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteCampaignBriefOperationSpec: coreClient.OperationSpec = {
  path:
    "/tollfreeVerification/countries/{countryCode}/campaignBriefs/{campaignBriefId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.campaignBriefId,
    Parameters.countryCode
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getCampaignBriefOperationSpec: coreClient.OperationSpec = {
  path:
    "/tollfreeVerification/countries/{countryCode}/campaignBriefs/{campaignBriefId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CampaignBrief
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.campaignBriefId,
    Parameters.countryCode
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const submitCampaignBriefOperationSpec: coreClient.OperationSpec = {
  path:
    "/tollfreeVerification/countries/{countryCode}/campaignBriefs/{campaignBriefId}/:submit",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CampaignBrief
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.campaignBriefId,
    Parameters.countryCode
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getCampaignBriefsOperationSpec: coreClient.OperationSpec = {
  path: "/tollfreeVerification/countries/{countryCode}/campaignBriefs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CampaignBriefs
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.countryCode],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrReplaceCampaignBriefAttachmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/tollfreeVerification/countries/{countryCode}/campaignBriefs/{campaignBriefId}/attachments/{attachmentId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CampaignBrief
    },
    201: {
      bodyMapper: Mappers.CampaignBrief
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: {
    parameterPath: {
      id: ["id"],
      typeParam: ["typeParam"],
      fileName: ["fileName"],
      fileSizeInBytes: ["options", "fileSizeInBytes"],
      fileType: ["fileType"],
      fileContentBase64: ["fileContentBase64"]
    },
    mapper: { ...Mappers.CampaignBriefAttachment, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.campaignBriefId,
    Parameters.countryCode,
    Parameters.attachmentId
  ],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const deleteCampaignBriefAttachmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/tollfreeVerification/countries/{countryCode}/campaignBriefs/{campaignBriefId}/attachments/{attachmentId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.campaignBriefId,
    Parameters.countryCode,
    Parameters.attachmentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getCampaignBriefAttachmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/tollfreeVerification/countries/{countryCode}/campaignBriefs/{campaignBriefId}/attachments/{attachmentId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CampaignBriefAttachment
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.campaignBriefId,
    Parameters.countryCode,
    Parameters.attachmentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getCampaignBriefAttachmentsOperationSpec: coreClient.OperationSpec = {
  path:
    "/tollfreeVerification/countries/{countryCode}/campaignBriefs/{campaignBriefId}/attachments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CampaignBriefAttachments
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip, Parameters.top],
  urlParameters: [
    Parameters.endpoint,
    Parameters.campaignBriefId,
    Parameters.countryCode
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getCampaignBriefsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CampaignBriefs
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.countryCode,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getCampaignBriefAttachmentsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CampaignBriefAttachments
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip, Parameters.top],
  urlParameters: [
    Parameters.endpoint,
    Parameters.campaignBriefId,
    Parameters.countryCode,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
