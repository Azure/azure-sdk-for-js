/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  CampaignBrief,
  TollFreeVerificationGetCampaignBriefsOptionalParams,
  CampaignBriefAttachment,
  TollFreeVerificationGetCampaignBriefAttachmentsOptionalParams,
  TollFreeVerificationUpsertCampaignBriefOptionalParams,
  TollFreeVerificationUpsertCampaignBriefResponse,
  TollFreeVerificationDeleteCampaignBriefOptionalParams,
  TollFreeVerificationGetCampaignBriefOptionalParams,
  TollFreeVerificationGetCampaignBriefResponse,
  TollFreeVerificationSubmitCampaignBriefOptionalParams,
  TollFreeVerificationSubmitCampaignBriefResponse,
  FileType,
  TollFreeVerificationCreateOrReplaceCampaignBriefAttachmentOptionalParams,
  TollFreeVerificationCreateOrReplaceCampaignBriefAttachmentResponse,
  TollFreeVerificationDeleteCampaignBriefAttachmentOptionalParams,
  TollFreeVerificationGetCampaignBriefAttachmentOptionalParams,
  TollFreeVerificationGetCampaignBriefAttachmentResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a TollFreeVerification. */
export interface TollFreeVerification {
  /**
   * Get a list of Campaign Briefs for the current resource.
   * @param countryCode
   * @param options The options parameters.
   */
  listCampaignBriefs(
    countryCode: string,
    options?: TollFreeVerificationGetCampaignBriefsOptionalParams
  ): PagedAsyncIterableIterator<CampaignBrief>;
  /**
   * Gets a list of attachments from a Campaign Brief.
   * @param countryCode
   * @param campaignBriefId
   * @param options The options parameters.
   */
  listCampaignBriefAttachments(
    countryCode: string,
    campaignBriefId: string,
    options?: TollFreeVerificationGetCampaignBriefAttachmentsOptionalParams
  ): PagedAsyncIterableIterator<CampaignBriefAttachment>;
  /**
   * Creates or updates a Campaign Brief.
   * @param campaignBriefId Campaign Brief Id. Must be a valid GUID
   * @param countryCode
   * @param options The options parameters.
   */
  upsertCampaignBrief(
    campaignBriefId: string,
    countryCode: string,
    options?: TollFreeVerificationUpsertCampaignBriefOptionalParams
  ): Promise<TollFreeVerificationUpsertCampaignBriefResponse>;
  /**
   * Deletes a Campaign Brief.
   * @param campaignBriefId Campaign Brief Id of brief to be deleted. Must be a valid GUID
   * @param countryCode
   * @param options The options parameters.
   */
  deleteCampaignBrief(
    campaignBriefId: string,
    countryCode: string,
    options?: TollFreeVerificationDeleteCampaignBriefOptionalParams
  ): Promise<void>;
  /**
   * Get a Campaign Brief by id.
   * @param campaignBriefId Campaign Brief Id. Must be a valid GUID
   * @param countryCode
   * @param options The options parameters.
   */
  getCampaignBrief(
    campaignBriefId: string,
    countryCode: string,
    options?: TollFreeVerificationGetCampaignBriefOptionalParams
  ): Promise<TollFreeVerificationGetCampaignBriefResponse>;
  /**
   * Submits a Campaign Brief.
   * @param campaignBriefId Campaign Brief Id of brief to be submitted. Must be a valid GUID
   * @param countryCode
   * @param options The options parameters.
   */
  submitCampaignBrief(
    campaignBriefId: string,
    countryCode: string,
    options?: TollFreeVerificationSubmitCampaignBriefOptionalParams
  ): Promise<TollFreeVerificationSubmitCampaignBriefResponse>;
  /**
   * Creates or updates an attachment on a Campaign Brief.
   * @param countryCode Country Code Id. Must be a valid country code
   * @param campaignBriefId Campaign Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param id Campaign Brief Attachment Id.
   * @param fileName The name of the file being attached
   *                 e.g. 'myFile01'
   * @param fileType The type of file being attached
   *                 e.g. 'pdf', 'jpg', 'png'
   * @param fileContentBase64 File content as base 64 encoded string
   * @param options The options parameters.
   */
  createOrReplaceCampaignBriefAttachment(
    countryCode: string,
    campaignBriefId: string,
    attachmentId: string,
    id: string,
    fileName: string,
    fileType: FileType,
    fileContentBase64: string,
    options?: TollFreeVerificationCreateOrReplaceCampaignBriefAttachmentOptionalParams
  ): Promise<
    TollFreeVerificationCreateOrReplaceCampaignBriefAttachmentResponse
  >;
  /**
   * Deletes a specific attachment from a Campaign Brief.
   * @param campaignBriefId Campaign Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param countryCode
   * @param options The options parameters.
   */
  deleteCampaignBriefAttachment(
    campaignBriefId: string,
    attachmentId: string,
    countryCode: string,
    options?: TollFreeVerificationDeleteCampaignBriefAttachmentOptionalParams
  ): Promise<void>;
  /**
   * Gets a specific attachment from a Campaign Brief.
   * @param countryCode
   * @param campaignBriefId Campaign Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param options The options parameters.
   */
  getCampaignBriefAttachment(
    countryCode: string,
    campaignBriefId: string,
    attachmentId: string,
    options?: TollFreeVerificationGetCampaignBriefAttachmentOptionalParams
  ): Promise<TollFreeVerificationGetCampaignBriefAttachmentResponse>;
}
