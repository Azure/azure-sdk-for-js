/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CallMedia } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CallAutomationApiClient } from "../callAutomationApiClient";
import {
  PlayRequest,
  CallMediaPlayOptionalParams,
  CallMediaCancelAllMediaOperationsOptionalParams,
  RecognizeRequest,
  CallMediaRecognizeOptionalParams
} from "../models";

/** Class containing CallMedia operations. */
export class CallMediaImpl implements CallMedia {
  private readonly client: CallAutomationApiClient;

  /**
   * Initialize a new instance of the class CallMedia class.
   * @param client Reference to the service client
   */
  constructor(client: CallAutomationApiClient) {
    this.client = client;
  }

  /**
   * Plays audio to participants in the call.
   * @param callConnectionId The call connection id.
   * @param playRequest play request payload.
   * @param options The options parameters.
   */
  play(
    callConnectionId: string,
    playRequest: PlayRequest,
    options?: CallMediaPlayOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { callConnectionId, playRequest, options },
      playOperationSpec
    );
  }

  /**
   * Cancel all media operations in a call.
   * @param callConnectionId The call connection id
   * @param options The options parameters.
   */
  cancelAllMediaOperations(
    callConnectionId: string,
    options?: CallMediaCancelAllMediaOperationsOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { callConnectionId, options },
      cancelAllMediaOperationsOperationSpec
    );
  }

  /**
   * Recognize media from call.
   * @param callConnectionId The call connection id
   * @param recognizeRequest The media recognize request
   * @param options The options parameters.
   */
  recognize(
    callConnectionId: string,
    recognizeRequest: RecognizeRequest,
    options?: CallMediaRecognizeOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { callConnectionId, recognizeRequest, options },
      recognizeOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const playOperationSpec: coreClient.OperationSpec = {
  path: "/calling/callConnections/{callConnectionId}:play",
  httpMethod: "POST",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: Parameters.playRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const cancelAllMediaOperationsOperationSpec: coreClient.OperationSpec = {
  path: "/calling/callConnections/{callConnectionId}:cancelAllMediaOperations",
  httpMethod: "POST",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
  headerParameters: [Parameters.accept],
  serializer
};
const recognizeOperationSpec: coreClient.OperationSpec = {
  path: "/calling/callConnections/{callConnectionId}:recognize",
  httpMethod: "POST",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: Parameters.recognizeRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
