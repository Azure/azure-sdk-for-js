/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
/** Class containing CallDialog operations. */
export class CallDialogImpl {
    /**
     * Initialize a new instance of the class CallDialog class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Start a dialog.
     * @param callConnectionId The call connection id
     * @param dialogId The dialog id
     * @param startDialogRequest The start dialog request
     * @param options The options parameters.
     */
    startDialog(callConnectionId, dialogId, startDialogRequest, options) {
        return this.client.sendOperationRequest({ callConnectionId, dialogId, startDialogRequest, options }, startDialogOperationSpec);
    }
    /**
     * @param callConnectionId
     * @param dialogId
     * @param options The options parameters.
     */
    stopDialog(callConnectionId, dialogId, options) {
        return this.client.sendOperationRequest({ callConnectionId, dialogId, options }, stopDialogOperationSpec);
    }
    /**
     * Update a dialog.
     * @param callConnectionId The call connection id
     * @param dialogId The dialog id
     * @param updateDialogRequest The update dialog request
     * @param options The options parameters.
     */
    updateDialog(callConnectionId, dialogId, updateDialogRequest, options) {
        return this.client.sendOperationRequest({ callConnectionId, dialogId, updateDialogRequest, options }, updateDialogOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const startDialogOperationSpec = {
    path: "/calling/callConnections/{callConnectionId}/dialogs/{dialogId}",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: Mappers.DialogStateResponse,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: Parameters.startDialogRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.endpoint,
        Parameters.callConnectionId,
        Parameters.dialogId,
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const stopDialogOperationSpec = {
    path: "/calling/callConnections/{callConnectionId}/dialogs/{dialogId}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion, Parameters.operationCallbackUri],
    urlParameters: [
        Parameters.endpoint,
        Parameters.callConnectionId,
        Parameters.dialogId,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const updateDialogOperationSpec = {
    path: "/calling/callConnections/{callConnectionId}/dialogs/{dialogId}",
    httpMethod: "PATCH",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: Parameters.updateDialogRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.endpoint,
        Parameters.callConnectionId,
        Parameters.dialogId,
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
//# sourceMappingURL=callDialog.js.map