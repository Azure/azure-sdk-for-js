{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/generated/src/models/index.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport type BaseDialogUnion =\n  | BaseDialog\n  | AzureOpenAIDialog\n  | PowerVirtualAgentsDialog;\nexport type DialogUpdateBaseUnion = DialogUpdateBase | AzureOpenAIDialogUpdate;\n\n/** The request payload for creating the call. */\nexport interface CreateCallRequest {\n  /** The targets of the call. */\n  targets: CommunicationIdentifierModel[];\n  /**\n   * The source caller Id, a phone number, that's shown to the PSTN participant being invited.\n   * Required only when calling a PSTN callee.\n   */\n  sourceCallerIdNumber?: PhoneNumberIdentifierModel;\n  /** Display name of the call if dialing out to a pstn number */\n  sourceDisplayName?: string;\n  /** The identifier of the source of the call */\n  source?: CommunicationUserIdentifierModel;\n  /** A customer set value used to track the answering of a call. */\n  operationContext?: string;\n  /** The callback URI. */\n  callbackUri: string;\n  /** AI options for the call. */\n  callIntelligenceOptions?: CallIntelligenceOptionsInternal;\n  /** The identifier of the source for creating call with Teams resource account ID. */\n  teamsAppSource?: MicrosoftTeamsAppIdentifierModel;\n  /** Used by customer to send custom calling context to targets */\n  customCallingContext?: CustomCallingContextInternal;\n  /** Media Streaming Options. */\n  mediaStreamingOptions?: MediaStreamingOptions;\n  /** Transcription Options. */\n  transcriptionOptions?: TranscriptionOptions;\n}\n\n/** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value. */\nexport interface CommunicationIdentifierModel {\n  /** The identifier kind. Only required in responses. */\n  kind?: CommunicationIdentifierModelKind;\n  /** Raw Id of the identifier. Optional in requests, required in responses. */\n  rawId?: string;\n  /** The communication user. */\n  communicationUser?: CommunicationUserIdentifierModel;\n  /** The phone number. */\n  phoneNumber?: PhoneNumberIdentifierModel;\n  /** The Microsoft Teams user. */\n  microsoftTeamsUser?: MicrosoftTeamsUserIdentifierModel;\n  /** The Microsoft Teams application. */\n  microsoftTeamsApp?: MicrosoftTeamsAppIdentifierModel;\n}\n\n/** A user that got created with an Azure Communication Services resource. */\nexport interface CommunicationUserIdentifierModel {\n  /** The Id of the communication user. */\n  id: string;\n}\n\n/** A phone number. */\nexport interface PhoneNumberIdentifierModel {\n  /** The phone number in E.164 format. */\n  value: string;\n}\n\n/** A Microsoft Teams user. */\nexport interface MicrosoftTeamsUserIdentifierModel {\n  /** The Id of the Microsoft Teams user. If not anonymous, this is the AAD object Id of the user. */\n  userId: string;\n  /** True if the Microsoft Teams user is anonymous. By default false if missing. */\n  isAnonymous?: boolean;\n  /** The cloud that the Microsoft Teams user belongs to. By default 'public' if missing. */\n  cloud?: CommunicationCloudEnvironmentModel;\n}\n\n/** A Microsoft Teams application. */\nexport interface MicrosoftTeamsAppIdentifierModel {\n  /** The Id of the Microsoft Teams application. */\n  appId: string;\n  /** The cloud that the Microsoft Teams application belongs to. By default 'public' if missing. */\n  cloud?: CommunicationCloudEnvironmentModel;\n}\n\n/** AI options for the call. */\nexport interface CallIntelligenceOptionsInternal {\n  /** The identifier of the Cognitive Service resource assigned to this call. */\n  cognitiveServicesEndpoint?: string;\n}\n\n/** The custom calling context which will be sent to the target */\nexport interface CustomCallingContextInternal {\n  /** Custom calling context VoiP headers */\n  voipHeaders?: { [propertyName: string]: string };\n  /** Custom calling context SIP headers */\n  sipHeaders?: { [propertyName: string]: string };\n}\n\n/** Configuration of Media streaming. */\nexport interface MediaStreamingOptions {\n  /** Transport URL for media streaming */\n  transportUrl: string;\n  /** The type of transport to be used for media streaming, eg. Websocket */\n  transportType: MediaStreamingTransportType;\n  /** Content type to stream, eg. audio */\n  contentType: MediaStreamingContentType;\n  /** Audio channel type to stream, eg. unmixed audio, mixed audio */\n  audioChannelType: MediaStreamingAudioChannelType;\n  /** Determines if the media streaming should be started immediately after call is answered or not. */\n  startMediaStreaming?: boolean;\n  /** A value indicating whether bidirectional streaming is enabled. */\n  enableBidirectional?: boolean;\n  /** Specifies the audio format used for encoding, including sample rate and channel type. */\n  audioFormat?: AudioFormat;\n}\n\n/** Configuration of live transcription. */\nexport interface TranscriptionOptions {\n  /** Transport URL for live transcription */\n  transportUrl: string;\n  /** The type of transport to be used for live transcription, eg. Websocket */\n  transportType: TranscriptionTransportType;\n  /** Defines the locale for the data e.g en-CA, en-AU */\n  locale: string;\n  /** Endpoint where the custom model was deployed. */\n  speechRecognitionModelEndpointId?: string;\n  /** Determines if the transcription should be started immediately after call is answered or not. */\n  startTranscription: boolean;\n  /** Enables intermediate results for the transcribed speech. */\n  enableIntermediateResults?: boolean;\n}\n\n/** Properties of a call connection */\nexport interface CallConnectionPropertiesInternal {\n  /** The call connection id. */\n  callConnectionId?: string;\n  /** The server call id. */\n  serverCallId?: string;\n  /** The targets of the call. */\n  targets?: CommunicationIdentifierModel[];\n  /** The state of the call connection. */\n  callConnectionState?: CallConnectionStateModel;\n  /** The callback URI. */\n  callbackUri?: string;\n  /**\n   * The source caller Id, a phone number, that's shown to the PSTN participant being invited.\n   * Required only when calling a PSTN callee.\n   */\n  sourceCallerIdNumber?: PhoneNumberIdentifierModel;\n  /** Display name of the call if dialing out to a pstn number. */\n  sourceDisplayName?: string;\n  /** Source identity. */\n  source?: CommunicationIdentifierModel;\n  /** The correlation ID. */\n  correlationId?: string;\n  /** Identity of the answering entity. Only populated when identity is provided in the request. */\n  answeredBy?: CommunicationUserIdentifierModel;\n  /** SubscriptionId for media streaming */\n  mediaSubscriptionId?: string;\n  /** SubscriptionId for transcription */\n  dataSubscriptionId?: string;\n  /** The state of media streaming subscription for the call */\n  mediaStreamingSubscription?: MediaStreamingSubscription;\n  /** Transcription Subscription. */\n  transcriptionSubscription?: TranscriptionSubscription;\n  /** Identity of the original Pstn target of an incoming Call. Only populated when the original target is a Pstn number. */\n  answeredFor?: PhoneNumberIdentifierModel;\n}\n\n/** Media streaming Subscription Object. */\nexport interface MediaStreamingSubscription {\n  /** Subscription Id. */\n  id?: string;\n  /** Media streaming subscription state. */\n  state?: MediaStreamingSubscriptionState;\n  /** Subscribed media streaming content types. */\n  subscribedContentTypes?: MediaStreamingContentType[];\n}\n\n/** Transcription Subscription Object. */\nexport interface TranscriptionSubscription {\n  /** Subscription Id. */\n  id?: string;\n  /** Transcription subscription state. */\n  state?: TranscriptionSubscriptionState;\n  /** Subscribed transcription result types. */\n  subscribedResultStates?: TranscriptionResultState[];\n}\n\n/** The Communication Services error. */\nexport interface CommunicationErrorResponse {\n  /** The Communication Services error. */\n  error: CommunicationError;\n}\n\n/** The Communication Services error. */\nexport interface CommunicationError {\n  /** The error code. */\n  code: string;\n  /** The error message. */\n  message: string;\n  /**\n   * The error target.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly target?: string;\n  /**\n   * Further details about specific errors that led to this error.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly details?: CommunicationError[];\n  /**\n   * The inner error if any.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly innerError?: CommunicationError;\n}\n\n/** The request payload for answering the call. */\nexport interface AnswerCallRequest {\n  /** The context associated with the call. */\n  incomingCallContext: string;\n  /** The callback uri. */\n  callbackUri: string;\n  /** Used by customer to send custom calling context to targets when answering On-Behalf-Of call */\n  customCallingContext?: CustomCallingContextInternal;\n  /** A customer set value used to track the answering of a call. */\n  operationContext?: string;\n  /** AI options for the call. */\n  callIntelligenceOptions?: CallIntelligenceOptionsInternal;\n  /** The identifier of the call automation entity which answers the call */\n  answeredBy?: CommunicationUserIdentifierModel;\n  /** Media Streaming Options. */\n  mediaStreamingOptions?: MediaStreamingOptions;\n  /** Transcription Options. */\n  transcriptionOptions?: TranscriptionOptions;\n}\n\n/** The request payload for redirecting the call. */\nexport interface RedirectCallRequest {\n  /** The context associated with the call. */\n  incomingCallContext: string;\n  /** The target identity to redirect the call to. */\n  target: CommunicationIdentifierModel;\n  /** Used by customer to send custom calling context to targets */\n  customCallingContext?: CustomCallingContextInternal;\n}\n\n/** The request payload for rejecting the call. */\nexport interface RejectCallRequest {\n  /** The context associated with the call. */\n  incomingCallContext: string;\n  /** The rejection reason. */\n  callRejectReason?: CallRejectReason;\n}\n\n/** The request payload for creating a connection to a CallLocator. */\nexport interface ConnectRequest {\n  /** The call locator. */\n  callLocator: CallLocator;\n  /** The callback URI. */\n  callbackUri: string;\n  /** Used by customers to correlate the request to the response event. */\n  operationContext?: string;\n  /** AI options for the call. */\n  callIntelligenceOptions?: CallIntelligenceOptionsInternal;\n  /** Media Streaming Options. */\n  mediaStreamingOptions?: MediaStreamingOptions;\n  /** Transcription Options. */\n  transcriptionOptions?: TranscriptionOptions;\n}\n\n/** The locator used for joining or taking action on a call */\nexport interface CallLocator {\n  /** The group call id */\n  groupCallId?: string;\n  /** The server call id. */\n  serverCallId?: string;\n  /** The Acs room id. (Not supported for Start Recording) */\n  roomId?: string;\n  /** The call locator kind. */\n  kind?: CallLocatorKind;\n}\n\n/** The request payload for transferring call to a participant. */\nexport interface TransferToParticipantRequest {\n  /** The identity of the target where call should be transferred to. */\n  targetParticipant: CommunicationIdentifierModel;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Transferee is the participant who is transferred away. */\n  transferee?: CommunicationIdentifierModel;\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n  /** Used by customer to send custom calling context to targets */\n  customCallingContext?: CustomCallingContextInternal;\n  /** The source caller Id, a phone number, that will be used as the transferor's caller Id when transferring a call to a Pstn target. */\n  sourceCallerIdNumber?: PhoneNumberIdentifierModel;\n}\n\n/** The response payload for transferring the call. */\nexport interface TransferCallResponse {\n  /** The operation context provided by client. */\n  operationContext?: string;\n}\n\nexport interface PlayRequest {\n  /** The source of the audio to be played. */\n  playSources: PlaySourceInternal[];\n  /**\n   * The list of call participants play provided audio to.\n   * Plays to everyone in the call when not provided.\n   */\n  playTo?: CommunicationIdentifierModel[];\n  /** Defines options for playing the audio. */\n  playOptions?: PlayOptionsInternal;\n  /** The value to identify context of the operation. */\n  operationContext?: string;\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n}\n\nexport interface PlaySourceInternal {\n  /** Defines the type of the play source */\n  kind: PlaySourceType;\n  /** Defines the identifier to be used for caching related media */\n  playSourceCacheId?: string;\n  /** Defines the file source info to be used for play */\n  file?: FileSourceInternal;\n  /** Defines the text source info to be used for play */\n  text?: TextSourceInternal;\n  /** Defines the ssml(Speech Synthesis Markup Language) source info to be used for play */\n  ssml?: SsmlSourceInternal;\n}\n\nexport interface FileSourceInternal {\n  /** Uri for the audio file to be played */\n  uri: string;\n}\n\nexport interface TextSourceInternal {\n  /** Text for the cognitive service to be played */\n  text: string;\n  /**\n   * Source language locale to be played\n   * Refer to available locales here: <seealso href=\"https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/language-support?tabs=stt-tts\" />\n   */\n  sourceLocale?: string;\n  /** Voice kind type */\n  voiceKind?: VoiceKind;\n  /**\n   * Voice name to be played\n   * Refer to available Text-to-speech voices here: <seealso href=\"https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/language-support?tabs=stt-tts\" />\n   */\n  voiceName?: string;\n  /** Endpoint where the custom voice was deployed. */\n  customVoiceEndpointId?: string;\n}\n\nexport interface SsmlSourceInternal {\n  /** Ssml string for the cognitive service to be played */\n  ssmlText: string;\n  /** Endpoint where the custom voice was deployed. */\n  customVoiceEndpointId?: string;\n}\n\nexport interface PlayOptionsInternal {\n  /** The option to play the provided audio source in loop when set to true */\n  loop: boolean;\n  /** If set play can barge into other existing queued-up/currently-processing requests. */\n  interruptCallMediaOperation?: boolean;\n  /** If set, hold audio will be interrupted, then this request will be played, and then the hold audio will be resumed. */\n  interruptHoldAudio?: boolean;\n}\n\nexport interface StartTranscriptionRequest {\n  /** Defines Locale for the transcription e,g en-US */\n  locale?: string;\n  /** Endpoint where the custom model was deployed. */\n  speechRecognitionModelEndpointId?: string;\n  /** The value to identify context of the operation. */\n  operationContext?: string;\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n}\n\nexport interface StopTranscriptionRequest {\n  /** The value to identify context of the operation. */\n  operationContext?: string;\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n}\n\nexport interface RecognizeRequest {\n  /** Determines the type of the recognition. */\n  recognizeInputType: RecognizeInputType;\n  /** The source of the audio to be played for recognition. */\n  playPrompt?: PlaySourceInternal;\n  /** The source of the audio to be played for recognition. */\n  playPrompts?: PlaySourceInternal[];\n  /** If set recognize can barge into other existing queued-up/currently-processing requests. */\n  interruptCallMediaOperation?: boolean;\n  /** Defines options for recognition. */\n  recognizeOptions: RecognizeOptions;\n  /** The value to identify context of the operation. */\n  operationContext?: string;\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n}\n\nexport interface RecognizeOptions {\n  /** Determines if we interrupt the prompt and start recognizing. */\n  interruptPrompt?: boolean;\n  /** Time to wait for first input after prompt (if any). */\n  initialSilenceTimeoutInSeconds?: number;\n  /** Target participant of DTMF tone recognition. */\n  targetParticipant: CommunicationIdentifierModel;\n  /** Speech language to be recognized, If not set default is en-US */\n  speechLanguage?: string;\n  /** Endpoint where the custom model was deployed. */\n  speechRecognitionModelEndpointId?: string;\n  /** Defines configurations for DTMF. */\n  dtmfOptions?: DtmfOptions;\n  /** Defines Ivr choices for recognize. */\n  choices?: Choice[];\n  /** Defines continuous speech recognition option. */\n  speechOptions?: SpeechOptions;\n}\n\n/** Options for DTMF recognition */\nexport interface DtmfOptions {\n  /** Time to wait between DTMF inputs to stop recognizing. */\n  interToneTimeoutInSeconds?: number;\n  /** Maximum number of DTMF tones to be collected. */\n  maxTonesToCollect?: number;\n  /** List of tones that will stop recognizing. */\n  stopTones?: Tone[];\n}\n\nexport interface Choice {\n  /** Identifier for a given choice */\n  label: string;\n  /** List of phrases to recognize */\n  phrases: string[];\n  tone?: Tone;\n}\n\n/** Options for continuous speech recognition */\nexport interface SpeechOptions {\n  /** The length of end silence when user stops speaking and cogservice send response. */\n  endSilenceTimeoutInMs?: number;\n}\n\nexport interface ContinuousDtmfRecognitionRequest {\n  /** Defines options for recognition. */\n  targetParticipant: CommunicationIdentifierModel;\n  /** The value to identify context of the operation. */\n  operationContext?: string;\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n}\n\nexport interface SendDtmfTonesRequest {\n  /** List of tones to be sent to target participant. */\n  tones: Tone[];\n  /** Target participant of send Dtmf tones. */\n  targetParticipant: CommunicationIdentifierModel;\n  /** The value to identify context of the operation. */\n  operationContext?: string;\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n}\n\nexport interface SendDtmfTonesResult {\n  /** The operation context provided by client. */\n  operationContext?: string;\n}\n\nexport interface UpdateTranscriptionRequest {\n  /** Defines new locale for transcription. */\n  locale: string;\n  /** Sets Endpoint id where the custom model was deployed. */\n  speechRecognitionModelEndpointId?: string;\n  /** The value to identify context of the operation. */\n  operationContext?: string;\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n}\n\n/** The request payload for holding participant from the call. */\nexport interface HoldRequest {\n  /** Participant to be held from the call. */\n  targetParticipant: CommunicationIdentifierModel;\n  /** Prompt to play while in hold. */\n  playSourceInfo?: PlaySourceInternal;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n}\n\n/** The request payload for holding participant from the call. */\nexport interface UnholdRequest {\n  /**\n   * Participants to be hold from the call.\n   * Only ACS Users are supported.\n   */\n  targetParticipant: CommunicationIdentifierModel;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n}\n\nexport interface StartMediaStreamingRequest {\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n  /** The value to identify context of the operation. */\n  operationContext?: string;\n}\n\nexport interface StopMediaStreamingRequest {\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n  /** The value to identify context of the operation. */\n  operationContext?: string;\n}\n\nexport interface InterruptAudioAndAnnounceRequest {\n  /** The source of the audio to be played. */\n  playSources: PlaySourceInternal[];\n  /**\n   * The list of call participants play provided audio to.\n   * Plays to everyone in the call when not provided.\n   */\n  playTo: CommunicationIdentifierModel;\n  /** The value to identify context of the operation. */\n  operationContext?: string;\n}\n\nexport interface StartDialogRequest {\n  /** Defines the dialog. */\n  dialog: BaseDialogUnion;\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n  /** The value to identify context of the operation. */\n  operationContext?: string;\n}\n\nexport interface BaseDialog {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"azureOpenAI\" | \"powerVirtualAgents\";\n  /** Dialog context. */\n  context: { [propertyName: string]: Record<string, unknown> };\n}\n\nexport interface DialogStateResponse {\n  /** The dialog ID. */\n  dialogId?: string;\n  /** Defines dialog. */\n  dialog?: BaseDialogUnion;\n  /** The value to identify context of the operation. */\n  operationContext?: string;\n}\n\nexport interface UpdateDialogRequest {\n  /** Dialog context. */\n  dialog: DialogUpdateBaseUnion;\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n  /** The value to identify context of the operation. */\n  operationContext?: string;\n}\n\nexport interface DialogUpdateBase {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"azureOpenAI\";\n  /** Dialog context. */\n  context?: { [propertyName: string]: Record<string, unknown> };\n}\n\n/** The response payload for getting participants of the call. */\nexport interface GetParticipantsResponse {\n  /** List of the current participants in the call. */\n  value: CallParticipantInternal[];\n  /** Continue of the list of participants */\n  nextLink?: string;\n}\n\n/** A call participant. */\nexport interface CallParticipantInternal {\n  /** Communication identifier of the participant */\n  identifier?: CommunicationIdentifierModel;\n  /** Is participant muted */\n  isMuted?: boolean;\n  /** Is participant on hold. */\n  isOnHold?: boolean;\n}\n\n/** The request payload for adding participant to the call. */\nexport interface AddParticipantRequest {\n  /**\n   * The source caller Id, a phone number, that's shown to the PSTN participant being invited.\n   * Required only when inviting a PSTN participant.\n   */\n  sourceCallerIdNumber?: PhoneNumberIdentifierModel;\n  /**\n   * (Optional) The display name of the source that is associated with this invite operation when\n   * adding a PSTN participant or teams user.  Note: Will not update the display name in the roster.\n   */\n  sourceDisplayName?: string;\n  /** The participant to invite. */\n  participantToAdd: CommunicationIdentifierModel;\n  /**\n   * Gets or sets the timeout to wait for the invited participant to pickup.\n   * The maximum value of this is 180 seconds\n   */\n  invitationTimeoutInSeconds?: number;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n  /** Used by customer to send custom calling context to targets */\n  customCallingContext?: CustomCallingContextInternal;\n}\n\n/** The response payload for adding participants to the call. */\nexport interface AddParticipantResponse {\n  /** List of current participants in the call. */\n  participant?: CallParticipantInternal;\n  /** The operation context provided by client. */\n  operationContext?: string;\n  /** Invitation ID used to add a participant. */\n  invitationId?: string;\n}\n\n/** The remove participant by identifier request. */\nexport interface RemoveParticipantRequest {\n  /** The participants to be removed from the call. */\n  participantToRemove: CommunicationIdentifierModel;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n}\n\n/** The response payload for removing participants of the call. */\nexport interface RemoveParticipantResponse {\n  /** The operation context provided by client. */\n  operationContext?: string;\n}\n\n/** The request payload for muting participants from the call. */\nexport interface MuteParticipantsRequest {\n  /**\n   * Participants to be muted from the call.\n   * Only ACS Users are supported.\n   */\n  targetParticipants: CommunicationIdentifierModel[];\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n}\n\n/** The result payload for muting participants from the call. */\nexport interface MuteParticipantsResult {\n  /** The operation context provided by client. */\n  operationContext?: string;\n}\n\n/** The request payload for unmuting participant from the call. */\nexport interface UnmuteParticipantsRequest {\n  /**\n   * Participants to be unmuted from the call.\n   * Only ACS Users are supported.\n   */\n  targetParticipants: CommunicationIdentifierModel[];\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n}\n\n/** The response payload for unmuting participants from the call. */\nexport interface UnmuteParticipantsResponse {\n  /** The operation context provided by client. */\n  operationContext?: string;\n}\n\n/** Request payload for cancelling add participant request. */\nexport interface CancelAddParticipantRequest {\n  /** Invitation ID used to add a participant. */\n  invitationId: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /**\n   * Set a callback URI that overrides the default callback URI set by CreateCall/AnswerCall for this operation.\n   * This setup is per-action. If this is not set, the default callback URI set by CreateCall/AnswerCall will be used.\n   */\n  operationCallbackUri?: string;\n}\n\n/** Response payload for cancel add participant request. */\nexport interface CancelAddParticipantResponse {\n  /** Invitation ID used to cancel the add participant action. */\n  invitationId?: string;\n  /** The operation context provided by client. */\n  operationContext?: string;\n}\n\n/** The request payload start for call recording operation with call locator. */\nexport interface StartCallRecordingRequest {\n  /** The call locator. (Only one of callLocator or callConnectionId to be used) */\n  callLocator?: CallLocator;\n  /** The call connectionId. (Only one of callLocator or callConnectionId to be used) */\n  callConnectionId?: string;\n  /** The uri to send notifications to. */\n  recordingStateCallbackUri?: string;\n  /** The content type of call recording. */\n  recordingContentType?: RecordingContentType;\n  /** The channel type of call recording. */\n  recordingChannelType?: RecordingChannelType;\n  /** The format type of call recording. */\n  recordingFormatType?: RecordingFormatType;\n  /**\n   * The sequential order in which audio channels are assigned to participants in the unmixed recording.\n   * When 'recordingChannelType' is set to 'unmixed' and `audioChannelParticipantOrdering is not specified,\n   * the audio channel to participant mapping will be automatically assigned based on the order in which participant\n   * first audio was detected.  Channel to participant mapping details can be found in the metadata of the recording.\n   */\n  audioChannelParticipantOrdering?: CommunicationIdentifierModel[];\n  /**\n   * The channel affinity of call recording\n   * When 'recordingChannelType' is set to 'unmixed', if channelAffinity is not specified, 'channel' will be automatically assigned.\n   * Channel-Participant mapping details can be found in the metadata of the recording.\n   * ///\n   */\n  channelAffinity?: ChannelAffinity[];\n  /** When set to true will start recording in Pause mode, which can be resumed. */\n  pauseOnStart?: boolean;\n  /** Optional property to specify location where recording will be stored */\n  recordingStorage?: RecordingStorage;\n}\n\n/** Channel affinity for a participant */\nexport interface ChannelAffinity {\n  /** Channel number to which bitstream from a particular participant will be written. */\n  channel?: number;\n  /**\n   * The identifier for the participant whose bitstream will be written to the channel\n   * represented by the channel number.\n   */\n  participant: CommunicationIdentifierModel;\n}\n\nexport interface RecordingStorage {\n  /** Defines the kind of external storage */\n  recordingStorageKind: RecordingStorageKind;\n  /** Uri of a container or a location within a container */\n  recordingDestinationContainerUrl?: string;\n}\n\nexport interface RecordingStateResponse {\n  recordingId?: string;\n  recordingState?: RecordingState;\n  recordingKind?: RecordingKind;\n}\n\n/** Recording result data */\nexport interface RecordingResultResponse {\n  /** NOTE: This property will not be serialized. It can only be populated by the server. */\n  readonly recordingId?: string;\n  /**\n   * Container for chunks\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly recordingStorageInfo?: RecordingStorageInfo;\n  /** NOTE: This property will not be serialized. It can only be populated by the server. */\n  readonly errors?: ErrorModel[];\n  /** NOTE: This property will not be serialized. It can only be populated by the server. */\n  readonly recordingStartTime?: Date;\n  /** NOTE: This property will not be serialized. It can only be populated by the server. */\n  readonly recordingDurationMs?: number;\n  /** NOTE: This property will not be serialized. It can only be populated by the server. */\n  readonly sessionEndReason?: CallSessionEndReason;\n  /** NOTE: This property will not be serialized. It can only be populated by the server. */\n  readonly recordingExpirationTime?: Date;\n}\n\n/** Container for chunks */\nexport interface RecordingStorageInfo {\n  /** Collection of {Microsoft.Skype.Platform.ExecutionAgent.Azure.Communication.Service.ServerCalling.Content.Contracts.ALPHA4_2024_09_01_preview.Models.RecordingChunkStorageInfo} */\n  recordingChunks?: RecordingChunkStorageInfo[];\n}\n\n/** Recording chunk data */\nexport interface RecordingChunkStorageInfo {\n  /** Chunk document id */\n  documentId?: string;\n  /** Chunks order in a multi chunk recording */\n  index?: number;\n  /** Reason this chunk ended */\n  endReason?: ChunkEndReason;\n  /** Location of the chunk */\n  contentLocation?: string;\n  /** Location of chunk metadata */\n  metadataLocation?: string;\n  /** Callback for deleting chunk */\n  deleteLocation?: string;\n}\n\n/** Error details */\nexport interface ErrorModel {\n  /** Error code */\n  code?: string;\n  /** Error message */\n  message?: string;\n  /** Inner error details */\n  innerError?: ErrorModel;\n}\n\n/** The incoming call event. */\nexport interface IncomingCall {\n  /**\n   * The communication identifier of the target user.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly to?: CommunicationIdentifierModel;\n  /**\n   * The communication identifier of the user who initiated the call.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly from?: CommunicationIdentifierModel;\n  /**\n   * Display name of caller.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly callerDisplayName?: string;\n  /**\n   * The server call id.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly serverCallId?: string;\n  /**\n   * Custom Context of Incoming Call\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly customContext?: CustomCallingContextInternal;\n  /**\n   * Incoming call context.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly incomingCallContext?: string;\n  /**\n   * The communication identifier of the user on behalf of whom the call is made.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly onBehalfOfCallee?: CommunicationIdentifierModel;\n  /**\n   * Correlation ID for event to call correlation. Also called ChainId for skype chain ID.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly correlationId?: string;\n}\n\nexport interface DtmfResult {\n  /** NOTE: This property will not be serialized. It can only be populated by the server. */\n  readonly tones?: Tone[];\n}\n\nexport interface ChoiceResult {\n  /** Label is the primary identifier for the choice detected */\n  label?: string;\n  /**\n   * Phrases are set to the value if choice is selected via phrase detection.\n   * If Dtmf input is recognized, then Label will be the identifier for the choice detected and phrases will be set to null\n   */\n  recognizedPhrase?: string;\n}\n\n/** The speech status as a result. */\nexport interface SpeechResult {\n  /** The recognized speech in string. */\n  speech?: string;\n}\n\nexport interface DialogCompleted {\n  /** Determines the type of the dialog. */\n  dialogInputType?: DialogInputType;\n  /**\n   * Dialog ID\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly dialogId?: string;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestResultInformation {\n  /** Code of the current result. This can be helpful to Call Automation team to troubleshoot the issue if this result was unexpected. */\n  code?: number;\n  /** Subcode of the current result. This can be helpful to Call Automation team to troubleshoot the issue if this result was unexpected. */\n  subCode?: number;\n  /** Detail message that describes the current result. */\n  message?: string;\n}\n\nexport interface DialogFailed {\n  /** Determines the type of the dialog. */\n  dialogInputType?: DialogInputType;\n  /**\n   * Dialog ID\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly dialogId?: string;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface DialogConsent {\n  /** Determines the type of the dialog. */\n  dialogInputType?: DialogInputType;\n  /**\n   * UserConsent data from the Conversation Conductor\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly userConsent?: UserConsent;\n  /**\n   * Dialog ID\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly dialogId?: string;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface UserConsent {\n  recording?: number;\n}\n\nexport interface DialogStarted {\n  /** Determines the type of the dialog. */\n  dialogInputType?: DialogInputType;\n  /**\n   * Dialog ID\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly dialogId?: string;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface DialogHangup {\n  /** Determines the type of the dialog. */\n  dialogInputType?: DialogInputType;\n  /**\n   * Dialog ID\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly dialogId?: string;\n  /**\n   * Ivr Context\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ivrContext?: Record<string, unknown>;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface DialogTransfer {\n  /** Determines the type of the dialog. */\n  dialogInputType?: DialogInputType;\n  /**\n   * Dialog ID\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly dialogId?: string;\n  /**\n   * Transfer type\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly transferType?: string;\n  /**\n   * Transfer destination\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly transferDestination?: string;\n  /**\n   * IVR context\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ivrContext?: Record<string, unknown>;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface DialogLanguageChange {\n  /** Determines the type of the dialog. */\n  dialogInputType?: DialogInputType;\n  /**\n   * Dialog ID\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly dialogId?: string;\n  /**\n   * Selected Language\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly selectedLanguage?: string;\n  /**\n   * Ivr Context\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ivrContext?: Record<string, unknown>;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface DialogSensitivityUpdate {\n  /** Determines the type of the dialog. */\n  dialogInputType?: DialogInputType;\n  /**\n   * Dialog ID\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly dialogId?: string;\n  /**\n   * SensitiveMask\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly sensitiveMask?: boolean;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface DialogUpdated {\n  /** Determines the type of the dialog. */\n  dialogInputType?: DialogInputType;\n  /**\n   * Dialog ID\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly dialogId?: string;\n  /**\n   * IVR context\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly ivrContext?: Record<string, unknown>;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface TranscriptionUpdate {\n  transcriptionStatus?: TranscriptionStatus;\n  transcriptionStatusDetails?: TranscriptionStatusDetails;\n}\n\nexport interface MediaStreamingUpdate {\n  contentType?: string;\n  mediaStreamingStatus?: MediaStreamingStatus;\n  mediaStreamingStatusDetails?: MediaStreamingStatusDetails;\n}\n\n/** The participants successfully added event. */\nexport interface RestAddParticipantSucceeded {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n  /** Participant */\n  participant?: CommunicationIdentifierModel;\n}\n\n/** The failed to add participants event. */\nexport interface RestAddParticipantFailed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n  /** Participant */\n  participant?: CommunicationIdentifierModel;\n}\n\n/** The participant removed event. */\nexport interface RestRemoveParticipantSucceeded {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n  /** Participant */\n  participant?: CommunicationIdentifierModel;\n}\n\n/** The failed to remove participant event. */\nexport interface RestRemoveParticipantFailed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n  /** Participant */\n  participant?: CommunicationIdentifierModel;\n}\n\n/** The call connected event. */\nexport interface RestCallConnected {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** The call disconnected event. */\nexport interface RestCallDisconnected {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** The call transfer accepted event. */\nexport interface RestCallTransferAccepted {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n  /** Target who the call is transferred to. */\n  transferTarget?: CommunicationIdentifierModel;\n  /** the participant who is being transferred away. */\n  transferee?: CommunicationIdentifierModel;\n}\n\n/** The call transfer failed event. */\nexport interface RestCallTransferFailed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestRecordingStateChanged {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /**\n   * The call recording id\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly recordingId?: string;\n  state?: RecordingState;\n  /**\n   * The time of the recording started\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly startDateTime?: Date;\n  recordingKind?: RecordingKind;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** The participants updated in a call event. */\nexport interface RestParticipantsUpdated {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** The Sequence Number of the event */\n  sequenceNumber?: number;\n  /** The list of participants in the call. */\n  participants?: CallParticipantInternal[];\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestPlayCompleted {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestPlayFailed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n  /** Contains the index of the failed play source. */\n  failedPlaySourceIndex?: number;\n}\n\nexport interface RestPlayCanceled {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestRecognizeCompleted {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n  /**\n   * Determines the sub-type of the recognize operation.\n   * In case of cancel operation the this field is not set and is returned empty\n   */\n  recognitionType?: RecognitionType;\n  /** Defines the result for RecognitionType = Dtmf */\n  dtmfResult?: DtmfResult;\n  /** Defines the result for RecognitionType = Choices */\n  choiceResult?: ChoiceResult;\n  /**\n   * Defines the result for RecognitionType = Speech and SpeechOrDtmf\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly speechResult?: SpeechResult;\n}\n\nexport interface RestRecognizeFailed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n  /** Contains the index of the failed play source. */\n  failedPlaySourceIndex?: number;\n}\n\nexport interface RestRecognizeCanceled {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestContinuousDtmfRecognitionToneReceived {\n  /**\n   * The sequence id which can be used to determine if the same tone was played multiple times or if any tones were missed.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly sequenceId?: number;\n  tone?: Tone;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestContinuousDtmfRecognitionToneFailed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n}\n\nexport interface RestContinuousDtmfRecognitionStopped {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestSendDtmfTonesCompleted {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestSendDtmfTonesFailed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** Successful cancel add participant event. */\nexport interface RestCancelAddParticipantSucceeded {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Invitation ID used to cancel the request. */\n  invitationId?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** Failed cancel add participant event. */\nexport interface RestCancelAddParticipantFailed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n  /** Invitation ID used to cancel the request. */\n  invitationId?: string;\n}\n\nexport interface RestTranscriptionStarted {\n  /**\n   * Defines the result for TranscriptionUpdate with the current status and the details about the status\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly transcriptionUpdate?: TranscriptionUpdate;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestTranscriptionStopped {\n  /**\n   * Defines the result for TranscriptionUpdate with the current status and the details about the status\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly transcriptionUpdate?: TranscriptionUpdate;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestTranscriptionUpdated {\n  /**\n   * Defines the result for TranscriptionUpdate with the current status and the details about the status\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly transcriptionUpdate?: TranscriptionUpdate;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestTranscriptionFailed {\n  /**\n   * Defines the result for TranscriptionUpdate with the current status and the details about the status\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly transcriptionUpdate?: TranscriptionUpdate;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** The create call failed event. */\nexport interface RestCreateCallFailed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** The failed to answer call event. */\nexport interface RestAnswerFailed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** Hold Failed event. */\nexport interface RestHoldFailed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** The ConnectFailed event. */\nexport interface RestConnectFailed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestMediaStreamingStarted {\n  /**\n   * Defines the result for MediaStreamingUpdate with the current status and the details about the status\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly mediaStreamingUpdate?: MediaStreamingUpdate;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestMediaStreamingStopped {\n  /**\n   * Defines the result for MediaStreamingUpdate with the current status and the details about the status\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly mediaStreamingUpdate?: MediaStreamingUpdate;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestMediaStreamingFailed {\n  /**\n   * Defines the result for MediaStreamingUpdate with the current status and the details about the status\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly mediaStreamingUpdate?: MediaStreamingUpdate;\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\nexport interface RestStartRecordingFailed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Correlation ID for event to call correlation. */\n  correlationId?: string;\n  /**\n   * The call recording id\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly recordingId?: string;\n}\n\n/** Play started event. */\nexport interface RestPlayStarted {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** Play Paused event. */\nexport interface RestPlayPaused {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** Play Resumed event. */\nexport interface RestPlayResumed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** Hold Audio Started event. */\nexport interface RestHoldAudioStarted {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** Hold Audio Paused event. */\nexport interface RestHoldAudioPaused {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** Hold Audio Resumed event. */\nexport interface RestHoldAudioResumed {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** Hold Audio Completed event. */\nexport interface RestHoldAudioCompleted {\n  /** Call connection ID. */\n  callConnectionId?: string;\n  /** Server call ID. */\n  serverCallId?: string;\n  /** Correlation ID for event to call correlation. Also called ChainId for skype chain ID. */\n  correlationId?: string;\n  /** Used by customers when calling mid-call actions to correlate the request to the response event. */\n  operationContext?: string;\n  /** Contains the resulting SIP code, sub-code and message. */\n  resultInformation?: RestResultInformation;\n}\n\n/** The incoming call event. */\nexport interface RestIncomingCall {\n  /**\n   * The communication identifier of the target user.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly to?: CommunicationIdentifierModel;\n  /**\n   * The communication identifier of the user who initiated the call.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly from?: CommunicationIdentifierModel;\n  /**\n   * Display name of caller.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly callerDisplayName?: string;\n  /**\n   * The server call id.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly serverCallId?: string;\n  /**\n   * Custom Context of Incoming Call\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly customContext?: CustomCallingContextInternal;\n  /**\n   * Incoming call context.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly incomingCallContext?: string;\n  /**\n   * The communication identifier of the user on behalf of whom the call is made.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly onBehalfOfCallee?: CommunicationIdentifierModel;\n  /**\n   * Correlation ID for event to call correlation. Also called ChainId for skype chain ID.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly correlationId?: string;\n}\n\n/** Azure Open AI Dialog */\nexport interface AzureOpenAIDialog extends BaseDialog {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"azureOpenAI\";\n}\n\n/** Power Virtual Agents Dialog */\nexport interface PowerVirtualAgentsDialog extends BaseDialog {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"powerVirtualAgents\";\n  /** Bot identifier. */\n  botAppId: string;\n  /** Language. */\n  language?: string;\n}\n\n/** Azure Open AI Dialog for UpdateDialog API Call */\nexport interface AzureOpenAIDialogUpdate extends DialogUpdateBase {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"azureOpenAI\";\n}\n\n/** Known values of {@link CommunicationIdentifierModelKind} that the service accepts. */\nexport enum KnownCommunicationIdentifierModelKind {\n  /** Unknown */\n  Unknown = \"unknown\",\n  /** CommunicationUser */\n  CommunicationUser = \"communicationUser\",\n  /** PhoneNumber */\n  PhoneNumber = \"phoneNumber\",\n  /** MicrosoftTeamsUser */\n  MicrosoftTeamsUser = \"microsoftTeamsUser\",\n  /** MicrosoftTeamsApp */\n  MicrosoftTeamsApp = \"microsoftTeamsApp\",\n}\n\n/**\n * Defines values for CommunicationIdentifierModelKind. \\\n * {@link KnownCommunicationIdentifierModelKind} can be used interchangeably with CommunicationIdentifierModelKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **unknown** \\\n * **communicationUser** \\\n * **phoneNumber** \\\n * **microsoftTeamsUser** \\\n * **microsoftTeamsApp**\n */\nexport type CommunicationIdentifierModelKind = string;\n\n/** Known values of {@link CommunicationCloudEnvironmentModel} that the service accepts. */\nexport enum KnownCommunicationCloudEnvironmentModel {\n  /** Public */\n  Public = \"public\",\n  /** Dod */\n  Dod = \"dod\",\n  /** Gcch */\n  Gcch = \"gcch\",\n}\n\n/**\n * Defines values for CommunicationCloudEnvironmentModel. \\\n * {@link KnownCommunicationCloudEnvironmentModel} can be used interchangeably with CommunicationCloudEnvironmentModel,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **public** \\\n * **dod** \\\n * **gcch**\n */\nexport type CommunicationCloudEnvironmentModel = string;\n\n/** Known values of {@link MediaStreamingTransportType} that the service accepts. */\nexport enum KnownMediaStreamingTransportType {\n  /** Websocket */\n  Websocket = \"websocket\",\n}\n\n/**\n * Defines values for MediaStreamingTransportType. \\\n * {@link KnownMediaStreamingTransportType} can be used interchangeably with MediaStreamingTransportType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **websocket**\n */\nexport type MediaStreamingTransportType = string;\n\n/** Known values of {@link MediaStreamingContentType} that the service accepts. */\nexport enum KnownMediaStreamingContentType {\n  /** Audio */\n  Audio = \"audio\",\n}\n\n/**\n * Defines values for MediaStreamingContentType. \\\n * {@link KnownMediaStreamingContentType} can be used interchangeably with MediaStreamingContentType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **audio**\n */\nexport type MediaStreamingContentType = string;\n\n/** Known values of {@link MediaStreamingAudioChannelType} that the service accepts. */\nexport enum KnownMediaStreamingAudioChannelType {\n  /** Mixed */\n  Mixed = \"mixed\",\n  /** Unmixed */\n  Unmixed = \"unmixed\",\n}\n\n/**\n * Defines values for MediaStreamingAudioChannelType. \\\n * {@link KnownMediaStreamingAudioChannelType} can be used interchangeably with MediaStreamingAudioChannelType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **mixed** \\\n * **unmixed**\n */\nexport type MediaStreamingAudioChannelType = string;\n\n/** Known values of {@link AudioFormat} that the service accepts. */\nexport enum KnownAudioFormat {\n  /** Pcm16KMono */\n  Pcm16KMono = \"Pcm16KMono\",\n  /** Pcm24KMono */\n  Pcm24KMono = \"Pcm24KMono\",\n}\n\n/**\n * Defines values for AudioFormat. \\\n * {@link KnownAudioFormat} can be used interchangeably with AudioFormat,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Pcm16KMono**: Pcm16KMono \\\n * **Pcm24KMono**: Pcm24KMono\n */\nexport type AudioFormat = string;\n\n/** Known values of {@link TranscriptionTransportType} that the service accepts. */\nexport enum KnownTranscriptionTransportType {\n  /** Websocket */\n  Websocket = \"websocket\",\n}\n\n/**\n * Defines values for TranscriptionTransportType. \\\n * {@link KnownTranscriptionTransportType} can be used interchangeably with TranscriptionTransportType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **websocket**\n */\nexport type TranscriptionTransportType = string;\n\n/** Known values of {@link CallConnectionStateModel} that the service accepts. */\nexport enum KnownCallConnectionStateModel {\n  /** Unknown */\n  Unknown = \"unknown\",\n  /** Connecting */\n  Connecting = \"connecting\",\n  /** Connected */\n  Connected = \"connected\",\n  /** Transferring */\n  Transferring = \"transferring\",\n  /** TransferAccepted */\n  TransferAccepted = \"transferAccepted\",\n  /** Disconnecting */\n  Disconnecting = \"disconnecting\",\n  /** Disconnected */\n  Disconnected = \"disconnected\",\n}\n\n/**\n * Defines values for CallConnectionStateModel. \\\n * {@link KnownCallConnectionStateModel} can be used interchangeably with CallConnectionStateModel,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **unknown** \\\n * **connecting** \\\n * **connected** \\\n * **transferring** \\\n * **transferAccepted** \\\n * **disconnecting** \\\n * **disconnected**\n */\nexport type CallConnectionStateModel = string;\n\n/** Known values of {@link MediaStreamingSubscriptionState} that the service accepts. */\nexport enum KnownMediaStreamingSubscriptionState {\n  /** Disabled */\n  Disabled = \"disabled\",\n  /** Inactive */\n  Inactive = \"inactive\",\n  /** Active */\n  Active = \"active\",\n}\n\n/**\n * Defines values for MediaStreamingSubscriptionState. \\\n * {@link KnownMediaStreamingSubscriptionState} can be used interchangeably with MediaStreamingSubscriptionState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **disabled** \\\n * **inactive** \\\n * **active**\n */\nexport type MediaStreamingSubscriptionState = string;\n\n/** Known values of {@link TranscriptionSubscriptionState} that the service accepts. */\nexport enum KnownTranscriptionSubscriptionState {\n  /** Disabled */\n  Disabled = \"disabled\",\n  /** Inactive */\n  Inactive = \"inactive\",\n  /** Active */\n  Active = \"active\",\n}\n\n/**\n * Defines values for TranscriptionSubscriptionState. \\\n * {@link KnownTranscriptionSubscriptionState} can be used interchangeably with TranscriptionSubscriptionState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **disabled** \\\n * **inactive** \\\n * **active**\n */\nexport type TranscriptionSubscriptionState = string;\n\n/** Known values of {@link TranscriptionResultState} that the service accepts. */\nexport enum KnownTranscriptionResultState {\n  /** Final */\n  Final = \"final\",\n  /** Intermediate */\n  Intermediate = \"intermediate\",\n}\n\n/**\n * Defines values for TranscriptionResultState. \\\n * {@link KnownTranscriptionResultState} can be used interchangeably with TranscriptionResultState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **final** \\\n * **intermediate**\n */\nexport type TranscriptionResultState = string;\n\n/** Known values of {@link CallRejectReason} that the service accepts. */\nexport enum KnownCallRejectReason {\n  /** None */\n  None = \"none\",\n  /** Busy */\n  Busy = \"busy\",\n  /** Forbidden */\n  Forbidden = \"forbidden\",\n}\n\n/**\n * Defines values for CallRejectReason. \\\n * {@link KnownCallRejectReason} can be used interchangeably with CallRejectReason,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **none** \\\n * **busy** \\\n * **forbidden**\n */\nexport type CallRejectReason = string;\n\n/** Known values of {@link CallLocatorKind} that the service accepts. */\nexport enum KnownCallLocatorKind {\n  /** Unknown */\n  Unknown = \"unknown\",\n  /** GroupCallLocator */\n  GroupCallLocator = \"groupCallLocator\",\n  /** ServerCallLocator */\n  ServerCallLocator = \"serverCallLocator\",\n  /** RoomCallLocator */\n  RoomCallLocator = \"roomCallLocator\",\n}\n\n/**\n * Defines values for CallLocatorKind. \\\n * {@link KnownCallLocatorKind} can be used interchangeably with CallLocatorKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **unknown** \\\n * **groupCallLocator** \\\n * **serverCallLocator** \\\n * **roomCallLocator**\n */\nexport type CallLocatorKind = string;\n\n/** Known values of {@link PlaySourceType} that the service accepts. */\nexport enum KnownPlaySourceType {\n  /** File */\n  File = \"file\",\n  /** Text */\n  Text = \"text\",\n  /** Ssml */\n  Ssml = \"ssml\",\n}\n\n/**\n * Defines values for PlaySourceType. \\\n * {@link KnownPlaySourceType} can be used interchangeably with PlaySourceType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **file** \\\n * **text** \\\n * **ssml**\n */\nexport type PlaySourceType = string;\n\n/** Known values of {@link VoiceKind} that the service accepts. */\nexport enum KnownVoiceKind {\n  /** Male */\n  Male = \"male\",\n  /** Female */\n  Female = \"female\",\n}\n\n/**\n * Defines values for VoiceKind. \\\n * {@link KnownVoiceKind} can be used interchangeably with VoiceKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **male** \\\n * **female**\n */\nexport type VoiceKind = string;\n\n/** Known values of {@link RecognizeInputType} that the service accepts. */\nexport enum KnownRecognizeInputType {\n  /** Dtmf */\n  Dtmf = \"dtmf\",\n  /** Speech */\n  Speech = \"speech\",\n  /** SpeechOrDtmf */\n  SpeechOrDtmf = \"speechOrDtmf\",\n  /** Choices */\n  Choices = \"choices\",\n}\n\n/**\n * Defines values for RecognizeInputType. \\\n * {@link KnownRecognizeInputType} can be used interchangeably with RecognizeInputType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **dtmf** \\\n * **speech** \\\n * **speechOrDtmf** \\\n * **choices**\n */\nexport type RecognizeInputType = string;\n\n/** Known values of {@link Tone} that the service accepts. */\nexport enum KnownTone {\n  /** Zero */\n  Zero = \"zero\",\n  /** One */\n  One = \"one\",\n  /** Two */\n  Two = \"two\",\n  /** Three */\n  Three = \"three\",\n  /** Four */\n  Four = \"four\",\n  /** Five */\n  Five = \"five\",\n  /** Six */\n  Six = \"six\",\n  /** Seven */\n  Seven = \"seven\",\n  /** Eight */\n  Eight = \"eight\",\n  /** Nine */\n  Nine = \"nine\",\n  /** A */\n  A = \"a\",\n  /** B */\n  B = \"b\",\n  /** C */\n  C = \"c\",\n  /** D */\n  D = \"d\",\n  /** Pound */\n  Pound = \"pound\",\n  /** Asterisk */\n  Asterisk = \"asterisk\",\n}\n\n/**\n * Defines values for Tone. \\\n * {@link KnownTone} can be used interchangeably with Tone,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **zero** \\\n * **one** \\\n * **two** \\\n * **three** \\\n * **four** \\\n * **five** \\\n * **six** \\\n * **seven** \\\n * **eight** \\\n * **nine** \\\n * **a** \\\n * **b** \\\n * **c** \\\n * **d** \\\n * **pound** \\\n * **asterisk**\n */\nexport type Tone = string;\n\n/** Known values of {@link DialogInputType} that the service accepts. */\nexport enum KnownDialogInputType {\n  /** PowerVirtualAgents */\n  PowerVirtualAgents = \"powerVirtualAgents\",\n  /** AzureOpenAI */\n  AzureOpenAI = \"azureOpenAI\",\n}\n\n/**\n * Defines values for DialogInputType. \\\n * {@link KnownDialogInputType} can be used interchangeably with DialogInputType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **powerVirtualAgents** \\\n * **azureOpenAI**\n */\nexport type DialogInputType = string;\n\n/** Known values of {@link RecordingContentType} that the service accepts. */\nexport enum KnownRecordingContentType {\n  /** Audio */\n  Audio = \"audio\",\n  /** AudioVideo */\n  AudioVideo = \"audioVideo\",\n}\n\n/**\n * Defines values for RecordingContentType. \\\n * {@link KnownRecordingContentType} can be used interchangeably with RecordingContentType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **audio** \\\n * **audioVideo**\n */\nexport type RecordingContentType = string;\n\n/** Known values of {@link RecordingChannelType} that the service accepts. */\nexport enum KnownRecordingChannelType {\n  /** Mixed */\n  Mixed = \"mixed\",\n  /** Unmixed */\n  Unmixed = \"unmixed\",\n}\n\n/**\n * Defines values for RecordingChannelType. \\\n * {@link KnownRecordingChannelType} can be used interchangeably with RecordingChannelType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **mixed** \\\n * **unmixed**\n */\nexport type RecordingChannelType = string;\n\n/** Known values of {@link RecordingFormatType} that the service accepts. */\nexport enum KnownRecordingFormatType {\n  /** Wav */\n  Wav = \"wav\",\n  /** Mp3 */\n  Mp3 = \"mp3\",\n  /** Mp4 */\n  Mp4 = \"mp4\",\n}\n\n/**\n * Defines values for RecordingFormatType. \\\n * {@link KnownRecordingFormatType} can be used interchangeably with RecordingFormatType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **wav** \\\n * **mp3** \\\n * **mp4**\n */\nexport type RecordingFormatType = string;\n\n/** Known values of {@link RecordingStorageKind} that the service accepts. */\nexport enum KnownRecordingStorageKind {\n  /** Storage managed by Azure Communication Services */\n  AzureCommunicationServices = \"AzureCommunicationServices\",\n  /** Storage managed by provided Azure blob */\n  AzureBlobStorage = \"AzureBlobStorage\",\n}\n\n/**\n * Defines values for RecordingStorageKind. \\\n * {@link KnownRecordingStorageKind} can be used interchangeably with RecordingStorageKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **AzureCommunicationServices**: Storage managed by Azure Communication Services \\\n * **AzureBlobStorage**: Storage managed by provided Azure blob\n */\nexport type RecordingStorageKind = string;\n\n/** Known values of {@link RecordingState} that the service accepts. */\nexport enum KnownRecordingState {\n  /** Active */\n  Active = \"active\",\n  /** Inactive */\n  Inactive = \"inactive\",\n}\n\n/**\n * Defines values for RecordingState. \\\n * {@link KnownRecordingState} can be used interchangeably with RecordingState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **active** \\\n * **inactive**\n */\nexport type RecordingState = string;\n\n/** Known values of {@link RecordingKind} that the service accepts. */\nexport enum KnownRecordingKind {\n  /** Recording initiated by Azure Communication Services */\n  AzureCommunicationServices = \"AzureCommunicationServices\",\n  /** Recording initiated by Teams user */\n  Teams = \"Teams\",\n  /** Recording initiated by Teams compliance policy */\n  TeamsCompliance = \"TeamsCompliance\",\n}\n\n/**\n * Defines values for RecordingKind. \\\n * {@link KnownRecordingKind} can be used interchangeably with RecordingKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **AzureCommunicationServices**: Recording initiated by Azure Communication Services \\\n * **Teams**: Recording initiated by Teams user \\\n * **TeamsCompliance**: Recording initiated by Teams compliance policy\n */\nexport type RecordingKind = string;\n\n/** Known values of {@link ChunkEndReason} that the service accepts. */\nexport enum KnownChunkEndReason {\n  /** ChunkIsBeingRecorded */\n  ChunkIsBeingRecorded = \"chunkIsBeingRecorded\",\n  /** SessionEnded */\n  SessionEnded = \"sessionEnded\",\n  /** ChunkMaximumSizeExceeded */\n  ChunkMaximumSizeExceeded = \"chunkMaximumSizeExceeded\",\n  /** ChunkMaximumTimeExceeded */\n  ChunkMaximumTimeExceeded = \"chunkMaximumTimeExceeded\",\n  /** ChunkUploadFailure */\n  ChunkUploadFailure = \"chunkUploadFailure\",\n}\n\n/**\n * Defines values for ChunkEndReason. \\\n * {@link KnownChunkEndReason} can be used interchangeably with ChunkEndReason,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **chunkIsBeingRecorded** \\\n * **sessionEnded** \\\n * **chunkMaximumSizeExceeded** \\\n * **chunkMaximumTimeExceeded** \\\n * **chunkUploadFailure**\n */\nexport type ChunkEndReason = string;\n\n/** Known values of {@link CallSessionEndReason} that the service accepts. */\nexport enum KnownCallSessionEndReason {\n  /** SessionStillOngoing */\n  SessionStillOngoing = \"sessionStillOngoing\",\n  /** CallEnded */\n  CallEnded = \"callEnded\",\n  /** InitiatorLeft */\n  InitiatorLeft = \"initiatorLeft\",\n  /** HandedOverOrTransfered */\n  HandedOverOrTransfered = \"handedOverOrTransfered\",\n  /** MaximumSessionTimeReached */\n  MaximumSessionTimeReached = \"maximumSessionTimeReached\",\n  /** CallStartTimeout */\n  CallStartTimeout = \"callStartTimeout\",\n  /** MediaTimeout */\n  MediaTimeout = \"mediaTimeout\",\n  /** AudioStreamFailure */\n  AudioStreamFailure = \"audioStreamFailure\",\n  /** AllInstancesBusy */\n  AllInstancesBusy = \"allInstancesBusy\",\n  /** TeamsTokenConversionFailed */\n  TeamsTokenConversionFailed = \"teamsTokenConversionFailed\",\n  /** ReportCallStateFailed */\n  ReportCallStateFailed = \"reportCallStateFailed\",\n  /** ReportCallStateFailedAndSessionMustBeDiscarded */\n  ReportCallStateFailedAndSessionMustBeDiscarded = \"reportCallStateFailedAndSessionMustBeDiscarded\",\n  /** CouldNotRejoinCall */\n  CouldNotRejoinCall = \"couldNotRejoinCall\",\n  /** InvalidBotData */\n  InvalidBotData = \"invalidBotData\",\n  /** CouldNotStart */\n  CouldNotStart = \"couldNotStart\",\n  /** AppHostedMediaFailureOutcomeWithError */\n  AppHostedMediaFailureOutcomeWithError = \"appHostedMediaFailureOutcomeWithError\",\n  /** AppHostedMediaFailureOutcomeGracefully */\n  AppHostedMediaFailureOutcomeGracefully = \"appHostedMediaFailureOutcomeGracefully\",\n  /** HandedOverDueToMediaTimeout */\n  HandedOverDueToMediaTimeout = \"handedOverDueToMediaTimeout\",\n  /** HandedOverDueToAudioStreamFailure */\n  HandedOverDueToAudioStreamFailure = \"handedOverDueToAudioStreamFailure\",\n  /** SpeechRecognitionSessionNonRetriableError */\n  SpeechRecognitionSessionNonRetriableError = \"speechRecognitionSessionNonRetriableError\",\n  /** SpeechRecognitionSessionRetriableErrorMaxRetryCountReached */\n  SpeechRecognitionSessionRetriableErrorMaxRetryCountReached = \"speechRecognitionSessionRetriableErrorMaxRetryCountReached\",\n  /** HandedOverDueToChunkCreationFailure */\n  HandedOverDueToChunkCreationFailure = \"handedOverDueToChunkCreationFailure\",\n  /** ChunkCreationFailed */\n  ChunkCreationFailed = \"chunkCreationFailed\",\n  /** HandedOverDueToProcessingTimeout */\n  HandedOverDueToProcessingTimeout = \"handedOverDueToProcessingTimeout\",\n  /** ProcessingTimeout */\n  ProcessingTimeout = \"processingTimeout\",\n  /** TranscriptObjectCreationFailed */\n  TranscriptObjectCreationFailed = \"transcriptObjectCreationFailed\",\n}\n\n/**\n * Defines values for CallSessionEndReason. \\\n * {@link KnownCallSessionEndReason} can be used interchangeably with CallSessionEndReason,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **sessionStillOngoing** \\\n * **callEnded** \\\n * **initiatorLeft** \\\n * **handedOverOrTransfered** \\\n * **maximumSessionTimeReached** \\\n * **callStartTimeout** \\\n * **mediaTimeout** \\\n * **audioStreamFailure** \\\n * **allInstancesBusy** \\\n * **teamsTokenConversionFailed** \\\n * **reportCallStateFailed** \\\n * **reportCallStateFailedAndSessionMustBeDiscarded** \\\n * **couldNotRejoinCall** \\\n * **invalidBotData** \\\n * **couldNotStart** \\\n * **appHostedMediaFailureOutcomeWithError** \\\n * **appHostedMediaFailureOutcomeGracefully** \\\n * **handedOverDueToMediaTimeout** \\\n * **handedOverDueToAudioStreamFailure** \\\n * **speechRecognitionSessionNonRetriableError** \\\n * **speechRecognitionSessionRetriableErrorMaxRetryCountReached** \\\n * **handedOverDueToChunkCreationFailure** \\\n * **chunkCreationFailed** \\\n * **handedOverDueToProcessingTimeout** \\\n * **processingTimeout** \\\n * **transcriptObjectCreationFailed**\n */\nexport type CallSessionEndReason = string;\n\n/** Known values of {@link TranscriptionStatus} that the service accepts. */\nexport enum KnownTranscriptionStatus {\n  /** TranscriptionStarted */\n  TranscriptionStarted = \"transcriptionStarted\",\n  /** TranscriptionFailed */\n  TranscriptionFailed = \"transcriptionFailed\",\n  /** TranscriptionResumed */\n  TranscriptionResumed = \"transcriptionResumed\",\n  /** TranscriptionUpdated */\n  TranscriptionUpdated = \"transcriptionUpdated\",\n  /** TranscriptionStopped */\n  TranscriptionStopped = \"transcriptionStopped\",\n  /** UnspecifiedError */\n  UnspecifiedError = \"unspecifiedError\",\n}\n\n/**\n * Defines values for TranscriptionStatus. \\\n * {@link KnownTranscriptionStatus} can be used interchangeably with TranscriptionStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **transcriptionStarted** \\\n * **transcriptionFailed** \\\n * **transcriptionResumed** \\\n * **transcriptionUpdated** \\\n * **transcriptionStopped** \\\n * **unspecifiedError**\n */\nexport type TranscriptionStatus = string;\n\n/** Known values of {@link TranscriptionStatusDetails} that the service accepts. */\nexport enum KnownTranscriptionStatusDetails {\n  /** SubscriptionStarted */\n  SubscriptionStarted = \"subscriptionStarted\",\n  /** StreamConnectionReestablished */\n  StreamConnectionReestablished = \"streamConnectionReestablished\",\n  /** StreamConnectionUnsuccessful */\n  StreamConnectionUnsuccessful = \"streamConnectionUnsuccessful\",\n  /** StreamUrlMissing */\n  StreamUrlMissing = \"streamUrlMissing\",\n  /** ServiceShutdown */\n  ServiceShutdown = \"serviceShutdown\",\n  /** StreamConnectionInterrupted */\n  StreamConnectionInterrupted = \"streamConnectionInterrupted\",\n  /** SpeechServicesConnectionError */\n  SpeechServicesConnectionError = \"speechServicesConnectionError\",\n  /** SubscriptionStopped */\n  SubscriptionStopped = \"subscriptionStopped\",\n  /** UnspecifiedError */\n  UnspecifiedError = \"unspecifiedError\",\n  /** AuthenticationFailure */\n  AuthenticationFailure = \"authenticationFailure\",\n  /** BadRequest */\n  BadRequest = \"badRequest\",\n  /** TooManyRequests */\n  TooManyRequests = \"tooManyRequests\",\n  /** Forbidden */\n  Forbidden = \"forbidden\",\n  /** ServiceTimeout */\n  ServiceTimeout = \"serviceTimeout\",\n  /** TranscriptionLocaleUpdated */\n  TranscriptionLocaleUpdated = \"transcriptionLocaleUpdated\",\n}\n\n/**\n * Defines values for TranscriptionStatusDetails. \\\n * {@link KnownTranscriptionStatusDetails} can be used interchangeably with TranscriptionStatusDetails,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **subscriptionStarted** \\\n * **streamConnectionReestablished** \\\n * **streamConnectionUnsuccessful** \\\n * **streamUrlMissing** \\\n * **serviceShutdown** \\\n * **streamConnectionInterrupted** \\\n * **speechServicesConnectionError** \\\n * **subscriptionStopped** \\\n * **unspecifiedError** \\\n * **authenticationFailure** \\\n * **badRequest** \\\n * **tooManyRequests** \\\n * **forbidden** \\\n * **serviceTimeout** \\\n * **transcriptionLocaleUpdated**\n */\nexport type TranscriptionStatusDetails = string;\n\n/** Known values of {@link MediaStreamingStatus} that the service accepts. */\nexport enum KnownMediaStreamingStatus {\n  /** MediaStreamingStarted */\n  MediaStreamingStarted = \"mediaStreamingStarted\",\n  /** MediaStreamingFailed */\n  MediaStreamingFailed = \"mediaStreamingFailed\",\n  /** MediaStreamingStopped */\n  MediaStreamingStopped = \"mediaStreamingStopped\",\n  /** UnspecifiedError */\n  UnspecifiedError = \"unspecifiedError\",\n}\n\n/**\n * Defines values for MediaStreamingStatus. \\\n * {@link KnownMediaStreamingStatus} can be used interchangeably with MediaStreamingStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **mediaStreamingStarted** \\\n * **mediaStreamingFailed** \\\n * **mediaStreamingStopped** \\\n * **unspecifiedError**\n */\nexport type MediaStreamingStatus = string;\n\n/** Known values of {@link MediaStreamingStatusDetails} that the service accepts. */\nexport enum KnownMediaStreamingStatusDetails {\n  /** SubscriptionStarted */\n  SubscriptionStarted = \"subscriptionStarted\",\n  /** StreamConnectionReestablished */\n  StreamConnectionReestablished = \"streamConnectionReestablished\",\n  /** StreamConnectionUnsuccessful */\n  StreamConnectionUnsuccessful = \"streamConnectionUnsuccessful\",\n  /** StreamUrlMissing */\n  StreamUrlMissing = \"streamUrlMissing\",\n  /** ServiceShutdown */\n  ServiceShutdown = \"serviceShutdown\",\n  /** StreamConnectionInterrupted */\n  StreamConnectionInterrupted = \"streamConnectionInterrupted\",\n  /** SpeechServicesConnectionError */\n  SpeechServicesConnectionError = \"speechServicesConnectionError\",\n  /** SubscriptionStopped */\n  SubscriptionStopped = \"subscriptionStopped\",\n  /** UnspecifiedError */\n  UnspecifiedError = \"unspecifiedError\",\n  /** AuthenticationFailure */\n  AuthenticationFailure = \"authenticationFailure\",\n  /** BadRequest */\n  BadRequest = \"badRequest\",\n  /** TooManyRequests */\n  TooManyRequests = \"tooManyRequests\",\n  /** Forbidden */\n  Forbidden = \"forbidden\",\n  /** ServiceTimeout */\n  ServiceTimeout = \"serviceTimeout\",\n  /** InitialWebSocketConnectionFailed */\n  InitialWebSocketConnectionFailed = \"initialWebSocketConnectionFailed\",\n}\n\n/**\n * Defines values for MediaStreamingStatusDetails. \\\n * {@link KnownMediaStreamingStatusDetails} can be used interchangeably with MediaStreamingStatusDetails,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **subscriptionStarted** \\\n * **streamConnectionReestablished** \\\n * **streamConnectionUnsuccessful** \\\n * **streamUrlMissing** \\\n * **serviceShutdown** \\\n * **streamConnectionInterrupted** \\\n * **speechServicesConnectionError** \\\n * **subscriptionStopped** \\\n * **unspecifiedError** \\\n * **authenticationFailure** \\\n * **badRequest** \\\n * **tooManyRequests** \\\n * **forbidden** \\\n * **serviceTimeout** \\\n * **initialWebSocketConnectionFailed**\n */\nexport type MediaStreamingStatusDetails = string;\n\n/** Known values of {@link RecognitionType} that the service accepts. */\nexport enum KnownRecognitionType {\n  /** Dtmf */\n  Dtmf = \"dtmf\",\n  /** Speech */\n  Speech = \"speech\",\n  /** Choices */\n  Choices = \"choices\",\n}\n\n/**\n * Defines values for RecognitionType. \\\n * {@link KnownRecognitionType} can be used interchangeably with RecognitionType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **dtmf** \\\n * **speech** \\\n * **choices**\n */\nexport type RecognitionType = string;\n\n/** Optional parameters. */\nexport interface CreateCallOptionalParams extends coreClient.OperationOptions {\n  /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated unique identifier for the request. It is a version 4 (random) UUID. */\n  repeatabilityRequestID?: string;\n  /** If Repeatability-Request-ID header is specified, then Repeatability-First-Sent header must also be specified. The value should be the date and time at which the request was first created, expressed using the IMF-fixdate form of HTTP-date. Example: Sun, 06 Nov 1994 08:49:37 GMT. */\n  repeatabilityFirstSent?: Date;\n}\n\n/** Contains response data for the createCall operation. */\nexport type CreateCallResponse = CallConnectionPropertiesInternal;\n\n/** Optional parameters. */\nexport interface AnswerCallOptionalParams extends coreClient.OperationOptions {\n  /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated unique identifier for the request. It is a version 4 (random) UUID. */\n  repeatabilityRequestID?: string;\n  /** If Repeatability-Request-ID header is specified, then Repeatability-First-Sent header must also be specified. The value should be the date and time at which the request was first created, expressed using the IMF-fixdate form of HTTP-date. Example: Sun, 06 Nov 1994 08:49:37 GMT. */\n  repeatabilityFirstSent?: Date;\n}\n\n/** Contains response data for the answerCall operation. */\nexport type AnswerCallResponse = CallConnectionPropertiesInternal;\n\n/** Optional parameters. */\nexport interface RedirectCallOptionalParams\n  extends coreClient.OperationOptions {\n  /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated unique identifier for the request. It is a version 4 (random) UUID. */\n  repeatabilityRequestID?: string;\n  /** If Repeatability-Request-ID header is specified, then Repeatability-First-Sent header must also be specified. The value should be the date and time at which the request was first created, expressed using the IMF-fixdate form of HTTP-date. Example: Sun, 06 Nov 1994 08:49:37 GMT. */\n  repeatabilityFirstSent?: Date;\n}\n\n/** Optional parameters. */\nexport interface RejectCallOptionalParams extends coreClient.OperationOptions {\n  /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated unique identifier for the request. It is a version 4 (random) UUID. */\n  repeatabilityRequestID?: string;\n  /** If Repeatability-Request-ID header is specified, then Repeatability-First-Sent header must also be specified. The value should be the date and time at which the request was first created, expressed using the IMF-fixdate form of HTTP-date. Example: Sun, 06 Nov 1994 08:49:37 GMT. */\n  repeatabilityFirstSent?: Date;\n}\n\n/** Optional parameters. */\nexport interface ConnectOptionalParams extends coreClient.OperationOptions {\n  /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated unique identifier for the request. It is a version 4 (random) UUID. */\n  repeatabilityRequestID?: string;\n  /** If Repeatability-Request-ID header is specified, then Repeatability-First-Sent header must also be specified. The value should be the date and time at which the request was first created, expressed using the IMF-fixdate form of HTTP-date. Example: Sun, 06 Nov 1994 08:49:37 GMT. */\n  repeatabilityFirstSent?: Date;\n}\n\n/** Contains response data for the connect operation. */\nexport type ConnectResponse = CallConnectionPropertiesInternal;\n\n/** Optional parameters. */\nexport interface CallConnectionGetCallOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCall operation. */\nexport type CallConnectionGetCallResponse = CallConnectionPropertiesInternal;\n\n/** Optional parameters. */\nexport interface CallConnectionHangupCallOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallConnectionTerminateCallOptionalParams\n  extends coreClient.OperationOptions {\n  /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated unique identifier for the request. It is a version 4 (random) UUID. */\n  repeatabilityRequestID?: string;\n  /** If Repeatability-Request-ID header is specified, then Repeatability-First-Sent header must also be specified. The value should be the date and time at which the request was first created, expressed using the IMF-fixdate form of HTTP-date. Example: Sun, 06 Nov 1994 08:49:37 GMT. */\n  repeatabilityFirstSent?: Date;\n}\n\n/** Optional parameters. */\nexport interface CallConnectionTransferToParticipantOptionalParams\n  extends coreClient.OperationOptions {\n  /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated unique identifier for the request. It is a version 4 (random) UUID. */\n  repeatabilityRequestID?: string;\n  /** If Repeatability-Request-ID header is specified, then Repeatability-First-Sent header must also be specified. The value should be the date and time at which the request was first created, expressed using the IMF-fixdate form of HTTP-date. Example: Sun, 06 Nov 1994 08:49:37 GMT. */\n  repeatabilityFirstSent?: Date;\n}\n\n/** Contains response data for the transferToParticipant operation. */\nexport type CallConnectionTransferToParticipantResponse = TransferCallResponse;\n\n/** Optional parameters. */\nexport interface CallConnectionGetParticipantsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getParticipants operation. */\nexport type CallConnectionGetParticipantsResponse = GetParticipantsResponse;\n\n/** Optional parameters. */\nexport interface CallConnectionAddParticipantOptionalParams\n  extends coreClient.OperationOptions {\n  /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated unique identifier for the request. It is a version 4 (random) UUID. */\n  repeatabilityRequestID?: string;\n  /** If Repeatability-Request-ID header is specified, then Repeatability-First-Sent header must also be specified. The value should be the date and time at which the request was first created, expressed using the IMF-fixdate form of HTTP-date. Example: Sun, 06 Nov 1994 08:49:37 GMT. */\n  repeatabilityFirstSent?: Date;\n}\n\n/** Contains response data for the addParticipant operation. */\nexport type CallConnectionAddParticipantResponse = AddParticipantResponse;\n\n/** Optional parameters. */\nexport interface CallConnectionRemoveParticipantOptionalParams\n  extends coreClient.OperationOptions {\n  /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated unique identifier for the request. It is a version 4 (random) UUID. */\n  repeatabilityRequestID?: string;\n  /** If Repeatability-Request-ID header is specified, then Repeatability-First-Sent header must also be specified. The value should be the date and time at which the request was first created, expressed using the IMF-fixdate form of HTTP-date. Example: Sun, 06 Nov 1994 08:49:37 GMT. */\n  repeatabilityFirstSent?: Date;\n}\n\n/** Contains response data for the removeParticipant operation. */\nexport type CallConnectionRemoveParticipantResponse = RemoveParticipantResponse;\n\n/** Optional parameters. */\nexport interface CallConnectionMuteOptionalParams\n  extends coreClient.OperationOptions {\n  /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated unique identifier for the request. It is a version 4 (random) UUID. */\n  repeatabilityRequestID?: string;\n  /** If Repeatability-Request-ID header is specified, then Repeatability-First-Sent header must also be specified. The value should be the date and time at which the request was first created, expressed using the IMF-fixdate form of HTTP-date. Example: Sun, 06 Nov 1994 08:49:37 GMT. */\n  repeatabilityFirstSent?: Date;\n}\n\n/** Contains response data for the mute operation. */\nexport type CallConnectionMuteResponse = MuteParticipantsResult;\n\n/** Optional parameters. */\nexport interface CallConnectionUnmuteOptionalParams\n  extends coreClient.OperationOptions {\n  /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated unique identifier for the request. It is a version 4 (random) UUID. */\n  repeatabilityRequestID?: string;\n  /** If Repeatability-Request-ID header is specified, then Repeatability-First-Sent header must also be specified. The value should be the date and time at which the request was first created, expressed using the IMF-fixdate form of HTTP-date. Example: Sun, 06 Nov 1994 08:49:37 GMT. */\n  repeatabilityFirstSent?: Date;\n}\n\n/** Contains response data for the unmute operation. */\nexport type CallConnectionUnmuteResponse = UnmuteParticipantsResponse;\n\n/** Optional parameters. */\nexport interface CallConnectionCancelAddParticipantOptionalParams\n  extends coreClient.OperationOptions {\n  /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated unique identifier for the request. It is a version 4 (random) UUID. */\n  repeatabilityRequestID?: string;\n  /** If Repeatability-Request-ID header is specified, then Repeatability-First-Sent header must also be specified. The value should be the date and time at which the request was first created, expressed using the IMF-fixdate form of HTTP-date. Example: Sun, 06 Nov 1994 08:49:37 GMT. */\n  repeatabilityFirstSent?: Date;\n}\n\n/** Contains response data for the cancelAddParticipant operation. */\nexport type CallConnectionCancelAddParticipantResponse =\n  CancelAddParticipantResponse;\n\n/** Optional parameters. */\nexport interface CallConnectionGetParticipantOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getParticipant operation. */\nexport type CallConnectionGetParticipantResponse = CallParticipantInternal;\n\n/** Optional parameters. */\nexport interface CallConnectionGetParticipantsNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getParticipantsNext operation. */\nexport type CallConnectionGetParticipantsNextResponse = GetParticipantsResponse;\n\n/** Optional parameters. */\nexport interface CallMediaPlayOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallMediaStartTranscriptionOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallMediaStopTranscriptionOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallMediaCancelAllMediaOperationsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallMediaRecognizeOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallMediaStartContinuousDtmfRecognitionOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallMediaStopContinuousDtmfRecognitionOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallMediaSendDtmfTonesOptionalParams\n  extends coreClient.OperationOptions {\n  /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated unique identifier for the request. It is a version 4 (random) UUID. */\n  repeatabilityRequestID?: string;\n  /** If Repeatability-Request-ID header is specified, then Repeatability-First-Sent header must also be specified. The value should be the date and time at which the request was first created, expressed using the IMF-fixdate form of HTTP-date. Example: Sun, 06 Nov 1994 08:49:37 GMT. */\n  repeatabilityFirstSent?: Date;\n}\n\n/** Contains response data for the sendDtmfTones operation. */\nexport type CallMediaSendDtmfTonesResponse = SendDtmfTonesResult;\n\n/** Optional parameters. */\nexport interface CallMediaUpdateTranscriptionOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallMediaHoldOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallMediaUnholdOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallMediaStartMediaStreamingOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallMediaStopMediaStreamingOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallMediaInterruptAudioAndAnnounceOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallDialogStartDialogOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the startDialog operation. */\nexport type CallDialogStartDialogResponse = DialogStateResponse;\n\n/** Optional parameters. */\nexport interface CallDialogStopDialogOptionalParams\n  extends coreClient.OperationOptions {\n  operationCallbackUri?: string;\n}\n\n/** Optional parameters. */\nexport interface CallDialogUpdateDialogOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallRecordingStartRecordingOptionalParams\n  extends coreClient.OperationOptions {\n  /** If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated unique identifier for the request. It is a version 4 (random) UUID. */\n  repeatabilityRequestID?: string;\n  /** If Repeatability-Request-ID header is specified, then Repeatability-First-Sent header must also be specified. The value should be the date and time at which the request was first created, expressed using the IMF-fixdate form of HTTP-date. Example: Sun, 06 Nov 1994 08:49:37 GMT. */\n  repeatabilityFirstSent?: Date;\n}\n\n/** Contains response data for the startRecording operation. */\nexport type CallRecordingStartRecordingResponse = RecordingStateResponse;\n\n/** Optional parameters. */\nexport interface CallRecordingGetRecordingPropertiesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getRecordingProperties operation. */\nexport type CallRecordingGetRecordingPropertiesResponse =\n  RecordingStateResponse;\n\n/** Optional parameters. */\nexport interface CallRecordingStopRecordingOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallRecordingPauseRecordingOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallRecordingResumeRecordingOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface CallRecordingGetRecordingResultOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getRecordingResult operation. */\nexport type CallRecordingGetRecordingResultResponse = RecordingResultResponse;\n\n/** Optional parameters. */\nexport interface CallAutomationApiClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** Api Version */\n  apiVersion?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"]}