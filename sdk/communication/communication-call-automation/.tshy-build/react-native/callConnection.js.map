{"version":3,"file":"callConnection.js","sourceRoot":"","sources":["../../src/callConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { CommunicationIdentifier } from \"@azure/communication-common\";\nimport { CallMedia } from \"./callMedia.js\";\nimport type {\n  AddParticipantRequest,\n  CallAutomationApiClient,\n  CallAutomationApiClientOptionalParams,\n  CustomCallingContextInternal,\n  MuteParticipantsRequest,\n  RemoveParticipantRequest,\n  TransferToParticipantRequest,\n} from \"./generated/src/index.js\";\nimport { CallConnectionImpl } from \"./generated/src/operations/index.js\";\nimport {\n  type CallConnectionProperties,\n  type CallInvite,\n  type CallParticipant,\n  type CustomCallingContext,\n} from \"./models/models.js\";\nimport type {\n  AddParticipantOptions,\n  CancelAddParticipantOperationOptions,\n  GetCallConnectionPropertiesOptions,\n  GetParticipantOptions,\n  HangUpOptions,\n  MuteParticipantOption,\n  RemoveParticipantsOption,\n  TransferCallToParticipantOptions,\n} from \"./models/options.js\";\nimport type {\n  ListParticipantsResult,\n  TransferCallResult,\n  AddParticipantResult,\n  RemoveParticipantResult,\n  MuteParticipantResult,\n  CancelAddParticipantOperationResult,\n} from \"./models/responses.js\";\nimport {\n  callParticipantConverter,\n  communicationIdentifierConverter,\n  communicationIdentifierModelConverter,\n  communicationUserIdentifierConverter,\n  phoneNumberIdentifierConverter,\n  PhoneNumberIdentifierModelConverter,\n} from \"./utli/converters.js\";\nimport { randomUUID } from \"@azure/core-util\";\nimport type { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport type { CallAutomationEventProcessor } from \"./eventprocessor/callAutomationEventProcessor.js\";\nimport type {\n  AddParticipantEventResult,\n  CancelAddParticipantEventResult,\n  RemoveParticipantEventResult,\n  TransferCallToParticipantEventResult,\n} from \"./eventprocessor/eventResponses.js\";\nimport { createCustomCallAutomationApiClient } from \"./credential/callAutomationAuthPolicy.js\";\n\n/**\n * CallConnection class represents call connection based APIs.\n */\nexport class CallConnection {\n  private readonly callConnectionId: string;\n  private readonly callConnection: CallConnectionImpl;\n  private readonly callAutomationApiClient: CallAutomationApiClient;\n  private readonly endpoint: string;\n  private readonly credential: TokenCredential | KeyCredential;\n  private readonly callAutomationApiClientOptions?: CallAutomationApiClientOptionalParams;\n  private readonly callAutomationEventProcessor: CallAutomationEventProcessor;\n  constructor(\n    callConnectionId: string,\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    eventProcessor: CallAutomationEventProcessor,\n    options?: CallAutomationApiClientOptionalParams,\n  ) {\n    this.callAutomationApiClient = createCustomCallAutomationApiClient(\n      credential,\n      options,\n      endpoint,\n    );\n    this.callConnectionId = callConnectionId;\n    this.callConnection = new CallConnectionImpl(this.callAutomationApiClient);\n    this.endpoint = endpoint;\n    this.credential = credential;\n    this.callAutomationEventProcessor = eventProcessor;\n    this.callAutomationApiClientOptions = options;\n  }\n\n  /**\n   * Initializes a new instance of CallMedia.\n   */\n  public getCallMedia(): CallMedia {\n    return new CallMedia(\n      this.callConnectionId,\n      this.endpoint,\n      this.credential,\n      this.callAutomationEventProcessor,\n      this.callAutomationApiClientOptions,\n    );\n  }\n\n  /**\n   * Get call connection properties of the call\n   */\n  public async getCallConnectionProperties(\n    options: GetCallConnectionPropertiesOptions = {},\n  ): Promise<CallConnectionProperties> {\n    const { targets, sourceCallerIdNumber, answeredBy, source, answeredFor, ...result } =\n      await this.callConnection.getCall(this.callConnectionId, options);\n    const callConnectionProperties: CallConnectionProperties = {\n      ...result,\n      source: source ? communicationIdentifierConverter(source) : undefined,\n      answeredby: communicationUserIdentifierConverter(answeredBy),\n      answeredFor: answeredFor ? phoneNumberIdentifierConverter(answeredFor) : undefined,\n      targetParticipants: targets?.map((target) => communicationIdentifierConverter(target)),\n      sourceCallerIdNumber: sourceCallerIdNumber\n        ? phoneNumberIdentifierConverter(sourceCallerIdNumber)\n        : undefined,\n    };\n    return callConnectionProperties;\n  }\n\n  /**\n   * Hang up the call for itself or terminate the whole call.\n   *\n   * @param isForEveryOne - Determine if every one in the call would be hung up or not.\n   */\n  public async hangUp(isForEveryone: boolean, options: HangUpOptions = {}): Promise<void> {\n    if (isForEveryone) {\n      const optionsInternal = {\n        ...options,\n        repeatabilityFirstSent: new Date(),\n        repeatabilityRequestID: randomUUID(),\n      };\n      await this.callConnection.terminateCall(this.callConnectionId, optionsInternal);\n    } else {\n      await this.callConnection.hangupCall(this.callConnectionId, options);\n    }\n    return;\n  }\n\n  /**\n   * Get a participant from the call\n   *\n   * @param targetParticipant - The communication identifier of requested participant.\n   */\n  public async getParticipant(\n    targetParticipant: CommunicationIdentifier,\n    options: GetParticipantOptions = {},\n  ): Promise<CallParticipant> {\n    let rawId: string | undefined = communicationIdentifierModelConverter(targetParticipant).rawId;\n    rawId = rawId === undefined ? \"\" : rawId;\n\n    const result = await this.callConnection.getParticipant(this.callConnectionId, rawId, options);\n    const callParticipant: CallParticipant = {\n      identifier: result.identifier\n        ? communicationIdentifierConverter(result.identifier)\n        : undefined,\n      isMuted: result.isMuted,\n      isOnHold: result.isOnHold,\n    };\n    return callParticipant;\n  }\n\n  /**\n   * Get all participants from the call\n   */\n  public async listParticipants(\n    options: GetParticipantOptions = {},\n  ): Promise<ListParticipantsResult> {\n    const result = this.callConnection.listParticipants(this.callConnectionId, options);\n    const participants = [];\n    const pages = result?.byPage();\n\n    for await (const page of pages) {\n      for (const participant of page) {\n        participants.push(callParticipantConverter(participant));\n      }\n    }\n\n    const listParticipantResponse: ListParticipantsResult = {\n      ...result,\n      values: participants,\n    };\n    return listParticipantResponse;\n  }\n\n  private createCustomCallingContextInternal(\n    customCallingContext: CustomCallingContext,\n  ): CustomCallingContextInternal {\n    const sipHeaders: { [key: string]: string } = {};\n    const voipHeaders: { [key: string]: string } = {};\n    if (customCallingContext) {\n      for (const header of customCallingContext) {\n        if (header.kind === \"sipuui\") {\n          sipHeaders[`User-To-User`] = header.value;\n        } else if (header.kind === \"sipx\") {\n          if (header.sipHeaderPrefix === \"X-\") {\n            sipHeaders[`X-${header.key}`] = header.value;\n          } else {\n            sipHeaders[`X-MS-Custom-${header.key}`] = header.value;\n          }\n        } else if (header.kind === \"voip\") {\n          voipHeaders[`${header.key}`] = header.value;\n        }\n      }\n    }\n    return { sipHeaders: sipHeaders, voipHeaders: voipHeaders };\n  }\n\n  /**\n   * Add a participant to the call\n   *\n   * @param participant - The participant is going to be added.\n   */\n  public async addParticipant(\n    targetParticipant: CallInvite,\n    options: AddParticipantOptions = {},\n  ): Promise<AddParticipantResult> {\n    const addParticipantRequest: AddParticipantRequest = {\n      participantToAdd: communicationIdentifierModelConverter(targetParticipant.targetParticipant),\n      sourceCallerIdNumber: PhoneNumberIdentifierModelConverter(\n        targetParticipant.sourceCallIdNumber,\n      ),\n      sourceDisplayName: targetParticipant.sourceDisplayName,\n      invitationTimeoutInSeconds: options.invitationTimeoutInSeconds,\n      operationContext: options.operationContext ? options.operationContext : randomUUID(),\n      operationCallbackUri: options.operationCallbackUrl,\n      customCallingContext: this.createCustomCallingContextInternal(\n        targetParticipant.customCallingContext!,\n      ),\n    };\n    const optionsInternal = {\n      ...options,\n      repeatabilityFirstSent: new Date(),\n      repeatabilityRequestID: randomUUID(),\n    };\n    const result = await this.callConnection.addParticipant(\n      this.callConnectionId,\n      addParticipantRequest,\n      optionsInternal,\n    );\n    const addParticipantsResult: AddParticipantResult = {\n      ...result,\n      participant: {\n        ...result.participant,\n        identifier: result.participant?.identifier\n          ? communicationIdentifierConverter(result.participant?.identifier)\n          : undefined,\n      },\n      waitForEventProcessor: async (abortSignal, timeoutInMs) => {\n        const addParticipantEventResult: AddParticipantEventResult = {\n          isSuccess: false,\n        };\n        await this.callAutomationEventProcessor.waitForEventProcessor(\n          (event) => {\n            if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"AddParticipantSucceeded\" &&\n              event.operationContext === addParticipantRequest.operationContext\n            ) {\n              addParticipantEventResult.isSuccess = true;\n              addParticipantEventResult.successResult = event;\n              return true;\n            } else if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"AddParticipantFailed\" &&\n              event.operationContext === addParticipantRequest.operationContext\n            ) {\n              addParticipantEventResult.isSuccess = false;\n              addParticipantEventResult.failureResult = event;\n              return true;\n            } else {\n              return false;\n            }\n          },\n          abortSignal,\n          timeoutInMs,\n        );\n        return addParticipantEventResult;\n      },\n    };\n    return addParticipantsResult;\n  }\n\n  /**\n   * Transfer the call to a target participant\n   *\n   * @param targetParticipant - The target to be transferred to.\n   */\n  public async transferCallToParticipant(\n    targetParticipant: CommunicationIdentifier,\n    options: TransferCallToParticipantOptions = {},\n  ): Promise<TransferCallResult> {\n    const transferToParticipantRequest: TransferToParticipantRequest = {\n      targetParticipant: communicationIdentifierModelConverter(targetParticipant),\n      operationContext: options.operationContext ? options.operationContext : randomUUID(),\n      operationCallbackUri: options.operationCallbackUrl,\n      transferee: options.transferee && communicationIdentifierModelConverter(options.transferee),\n      customCallingContext: this.createCustomCallingContextInternal(options.customCallingContext!),\n      sourceCallerIdNumber: PhoneNumberIdentifierModelConverter(options.sourceCallIdNumber),\n    };\n    const optionsInternal = {\n      ...options,\n      repeatabilityFirstSent: new Date(),\n      repeatabilityRequestID: randomUUID(),\n    };\n    const result = await this.callConnection.transferToParticipant(\n      this.callConnectionId,\n      transferToParticipantRequest,\n      optionsInternal,\n    );\n    const transferCallResult: TransferCallResult = {\n      ...result,\n      waitForEventProcessor: async (abortSignal, timeoutInMs) => {\n        const transferCallToParticipantEventResult: TransferCallToParticipantEventResult = {\n          isSuccess: false,\n        };\n        await this.callAutomationEventProcessor.waitForEventProcessor(\n          (event) => {\n            if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"CallTransferAccepted\" &&\n              event.operationContext === transferToParticipantRequest.operationContext\n            ) {\n              transferCallToParticipantEventResult.isSuccess = true;\n              transferCallToParticipantEventResult.successResult = event;\n              return true;\n            } else if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"CallTransferFailed\" &&\n              event.operationContext === transferToParticipantRequest.operationContext\n            ) {\n              transferCallToParticipantEventResult.isSuccess = false;\n              transferCallToParticipantEventResult.failureResult = event;\n              return true;\n            } else {\n              return false;\n            }\n          },\n          abortSignal,\n          timeoutInMs,\n        );\n        return transferCallToParticipantEventResult;\n      },\n    };\n    return transferCallResult;\n  }\n\n  /**\n   * Remove a participant from the call\n   *\n   * @param participant - The participant is going to be removed from the call.\n   */\n  public async removeParticipant(\n    participant: CommunicationIdentifier,\n    options: RemoveParticipantsOption = {},\n  ): Promise<RemoveParticipantResult> {\n    const removeParticipantRequest: RemoveParticipantRequest = {\n      participantToRemove: communicationIdentifierModelConverter(participant),\n      operationContext: options.operationContext ? options.operationContext : randomUUID(),\n      operationCallbackUri: options.operationCallbackUrl,\n    };\n    const optionsInternal = {\n      ...options,\n      repeatabilityFirstSent: new Date(),\n      repeatabilityRequestID: randomUUID(),\n    };\n    const result = await this.callConnection.removeParticipant(\n      this.callConnectionId,\n      removeParticipantRequest,\n      optionsInternal,\n    );\n    const removeParticipantsResult: RemoveParticipantResult = {\n      ...result,\n      waitForEventProcessor: async (abortSignal, timeoutInMs) => {\n        const removeParticipantEventResult: RemoveParticipantEventResult = {\n          isSuccess: false,\n        };\n        await this.callAutomationEventProcessor.waitForEventProcessor(\n          (event) => {\n            if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"RemoveParticipantSucceeded\" &&\n              event.operationContext === removeParticipantRequest.operationContext\n            ) {\n              removeParticipantEventResult.isSuccess = true;\n              removeParticipantEventResult.successResult = event;\n              return true;\n            } else if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"RemoveParticipantFailed\" &&\n              event.operationContext === removeParticipantRequest.operationContext\n            ) {\n              removeParticipantEventResult.isSuccess = false;\n              removeParticipantEventResult.failureResult = event;\n              return true;\n            } else {\n              return false;\n            }\n          },\n          abortSignal,\n          timeoutInMs,\n        );\n        return removeParticipantEventResult;\n      },\n    };\n    return removeParticipantsResult;\n  }\n\n  /**\n   * Mute participant from the call.\n   *\n   * @param participant - Participant to be muted from the call.\n   * @param options - Additional attributes for mute participant.\n   */\n  public async muteParticipant(\n    participant: CommunicationIdentifier,\n    options: MuteParticipantOption = {},\n  ): Promise<MuteParticipantResult> {\n    const muteParticipantsRequest: MuteParticipantsRequest = {\n      targetParticipants: [communicationIdentifierModelConverter(participant)],\n      operationContext: options.operationContext,\n    };\n    const optionsInternal = {\n      ...options,\n      repeatabilityFirstSent: new Date(),\n      repeatabilityRequestID: randomUUID(),\n    };\n    const result = await this.callConnection.mute(\n      this.callConnectionId,\n      muteParticipantsRequest,\n      optionsInternal,\n    );\n    const muteParticipantResult: MuteParticipantResult = {\n      ...result,\n    };\n    return muteParticipantResult;\n  }\n\n  /** Cancel add participant request.\n   *\n   * @param invitationId - Invitation ID used to cancel the add participant request.\n   */\n  public async cancelAddParticipantOperation(\n    invitationId: string,\n    options: CancelAddParticipantOperationOptions = {},\n  ): Promise<CancelAddParticipantOperationResult> {\n    const {\n      operationContext,\n      operationCallbackUrl: operationCallbackUri,\n      ...operationOptions\n    } = options;\n    const cancelAddParticipantRequest = {\n      invitationId,\n      operationContext: operationContext ? operationContext : randomUUID(),\n      operationCallbackUri,\n    };\n    const optionsInternal = {\n      ...operationOptions,\n      repeatabilityFirstSent: new Date(),\n      repeatabilityRequestID: randomUUID(),\n    };\n\n    const result = await this.callConnection.cancelAddParticipant(\n      this.callConnectionId,\n      cancelAddParticipantRequest,\n      optionsInternal,\n    );\n\n    const cancelAddParticipantResult: CancelAddParticipantOperationResult = {\n      ...result,\n      waitForEventProcessor: async (abortSignal, timeoutInMs) => {\n        const cancelAddParticipantEventResult: CancelAddParticipantEventResult = {\n          isSuccess: false,\n        };\n        await this.callAutomationEventProcessor.waitForEventProcessor(\n          (event) => {\n            if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"CancelAddParticipantSucceeded\" &&\n              event.operationContext === cancelAddParticipantRequest.operationContext\n            ) {\n              cancelAddParticipantEventResult.isSuccess = true;\n              cancelAddParticipantEventResult.successResult = event;\n              return true;\n            } else if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"CancelAddParticipantFailed\" &&\n              event.operationContext === cancelAddParticipantRequest.operationContext\n            ) {\n              cancelAddParticipantEventResult.isSuccess = false;\n              cancelAddParticipantEventResult.failureResult = event;\n              return true;\n            } else {\n              return false;\n            }\n          },\n          abortSignal,\n          timeoutInMs,\n        );\n        return cancelAddParticipantEventResult;\n      },\n    };\n\n    return cancelAddParticipantResult;\n  }\n}\n"]}