{"version":3,"file":"streamingData.js","sourceRoot":"","sources":["../../src/streamingData.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { createIdentifierFromRawId } from \"@azure/communication-common\";\nimport type {\n  AudioData,\n  AudioMetadata,\n  StreamingDataKind,\n  StreamingDataResult,\n  TranscriptionData,\n  TranscriptionMetadata,\n} from \"./models/streaming.js\";\n\n/** Class to handle the parsing of incoming streaming data. */\nexport class StreamingData {\n  // Kind of the streaming data ex.AudioData, AudioMetadata, TranscriptionData, TranscriptionMetadata.\n  private static streamingKind: StreamingDataKind;\n\n  /** Parses a encoded json string or buffer into a StreamingData object,\n            which can be one of the following subtypes: AudioData, AudioMetadata, TranscriptionData, or TranscriptionMetadata. */\n  static parse(data: string | ArrayBuffer): StreamingDataResult {\n    return StreamingData.parseStreamingData(data);\n  }\n\n  // Get Streaming data Kind.\n  static getStreamingKind(): StreamingDataKind {\n    return StreamingData.streamingKind;\n  }\n\n  /** Parses a encoded json string or buffer into a StreamingData object,\n            which can be one of the following subtypes: AudioData, AudioMetadata, TranscriptionData, or TranscriptionMetadata. */\n  private static parseStreamingData(data: string | ArrayBuffer): StreamingDataResult {\n    let stringJson: string;\n\n    if (typeof data === \"string\") {\n      stringJson = data;\n    } else {\n      const decoder = new TextDecoder();\n      stringJson = decoder.decode(data);\n    }\n\n    const jsonObject = JSON.parse(stringJson);\n    const kind: StreamingDataKind = jsonObject.kind;\n\n    switch (kind) {\n      case \"TranscriptionMetadata\": {\n        const transcriptionMetadata: TranscriptionMetadata = {\n          subscriptionId: jsonObject.transcriptionMetadata.subscriptionId,\n          locale: jsonObject.transcriptionMetadata.locale,\n          callConnectionId: jsonObject.transcriptionMetadata.callConnectionId,\n          correlationId: jsonObject.transcriptionMetadata.correlationId,\n        };\n        StreamingData.streamingKind = kind;\n        return transcriptionMetadata;\n      }\n      case \"TranscriptionData\": {\n        const transcriptionData: TranscriptionData = {\n          text: jsonObject.transcriptionData.text,\n          format: jsonObject.transcriptionData.format,\n          confidence: jsonObject.transcriptionData.confidence,\n          offsetInTicks: jsonObject.transcriptionData.offset,\n          durationInTicks: jsonObject.transcriptionData.duration,\n          words: jsonObject.transcriptionData.words.map(\n            (word: { text: string; offset: number; duration: number }) => ({\n              text: word.text,\n              offsetInTicks: word.offset,\n              durationInTicks: word.duration,\n            }),\n          ),\n          participant: createIdentifierFromRawId(jsonObject.transcriptionData.participantRawID),\n          resultState: jsonObject.transcriptionData.resultStatus,\n        };\n        StreamingData.streamingKind = kind;\n        return transcriptionData;\n      }\n      case \"AudioMetadata\": {\n        const audioMetadata: AudioMetadata = {\n          subscriptionId: jsonObject.audioMetadata.subscriptionId,\n          encoding: jsonObject.audioMetadata.encoding,\n          sampleRate: jsonObject.audioMetadata.sampleRate,\n          channels: jsonObject.audioMetadata.channels,\n          length: jsonObject.audioMetadata.length,\n        };\n        StreamingData.streamingKind = kind;\n        return audioMetadata;\n      }\n      case \"AudioData\": {\n        const audioData: AudioData = {\n          data: jsonObject.audioData.data,\n          timestamp: jsonObject.audioData.timestamp,\n          isSilent: jsonObject.audioData.silent,\n          participant:\n            jsonObject.audioData.participantRawID !== undefined\n              ? createIdentifierFromRawId(jsonObject.audioData.participantRawID)\n              : undefined,\n        };\n        StreamingData.streamingKind = kind;\n        return audioData;\n      }\n      default:\n        throw new Error(\"Unknown data kind: \" + jsonObject.kind);\n    }\n  }\n}\n"]}