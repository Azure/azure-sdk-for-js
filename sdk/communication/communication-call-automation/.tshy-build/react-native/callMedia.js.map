{"version":3,"file":"callMedia.js","sourceRoot":"","sources":["../../src/callMedia.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  PlayRequest,\n  PlaySourceInternal,\n  FileSourceInternal,\n  TextSourceInternal,\n  SsmlSourceInternal,\n  RecognizeRequest,\n  RecognizeOptions,\n  DtmfOptions,\n  CallAutomationApiClient,\n  CallAutomationApiClientOptionalParams,\n  ContinuousDtmfRecognitionRequest,\n  SendDtmfTonesRequest,\n  Tone,\n  SpeechOptions,\n  StartTranscriptionRequest,\n  StopTranscriptionRequest,\n  UpdateTranscriptionRequest,\n  HoldRequest,\n  UnholdRequest,\n  StartMediaStreamingRequest,\n  StopMediaStreamingRequest,\n} from \"./generated/src/index.js\";\nimport { KnownPlaySourceType, KnownRecognizeInputType } from \"./generated/src/index.js\";\n\nimport { CallMediaImpl } from \"./generated/src/operations/index.js\";\n\nimport type { CommunicationIdentifier } from \"@azure/communication-common\";\nimport { serializeCommunicationIdentifier } from \"@azure/communication-common\";\n\nimport type { FileSource, TextSource, SsmlSource, DtmfTone } from \"./models/models.js\";\nimport type {\n  PlayOptions,\n  CallMediaRecognizeDtmfOptions,\n  CallMediaRecognizeChoiceOptions,\n  ContinuousDtmfRecognitionOptions,\n  SendDtmfTonesOptions,\n  CallMediaRecognizeSpeechOptions,\n  CallMediaRecognizeSpeechOrDtmfOptions,\n  StartTranscriptionOptions,\n  StopTranscriptionOptions,\n  HoldOptions,\n  UnholdOptions,\n  StartMediaStreamingOptions,\n  StopMediaStreamingOptions,\n  PlayToAllOptions,\n  UpdateTranscriptionOptions,\n  InterruptAudioAndAnnounceOptions,\n} from \"./models/options.js\";\nimport type { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport type {\n  CancelAllMediaOperationsResult,\n  PlayResult,\n  SendDtmfTonesResult,\n  StartRecognizingResult,\n} from \"./models/responses.js\";\nimport type {\n  CancelAllMediaOperationsEventResult,\n  PlayEventResult,\n  SendDtmfEventResult,\n  StartRecognizingEventResult,\n} from \"./eventprocessor/eventResponses.js\";\nimport type { CallAutomationEventProcessor } from \"./eventprocessor/callAutomationEventProcessor.js\";\nimport { randomUUID } from \"@azure/core-util\";\nimport { createCustomCallAutomationApiClient } from \"./credential/callAutomationAuthPolicy.js\";\nimport { InterruptAudioAndAnnounceRequest } from \"./generated/src/models/index.js\";\n\n/**\n * CallMedia class represents call media related APIs.\n */\nexport class CallMedia {\n  private readonly callConnectionId: string;\n  private readonly callMedia: CallMediaImpl;\n  private readonly callAutomationApiClient: CallAutomationApiClient;\n  private readonly callAutomationEventProcessor: CallAutomationEventProcessor;\n  constructor(\n    callConnectionId: string,\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    eventProcessor: CallAutomationEventProcessor,\n    options?: CallAutomationApiClientOptionalParams,\n  ) {\n    this.callAutomationApiClient = createCustomCallAutomationApiClient(\n      credential,\n      options,\n      endpoint,\n    );\n    this.callConnectionId = callConnectionId;\n    this.callAutomationEventProcessor = eventProcessor;\n    this.callMedia = new CallMediaImpl(this.callAutomationApiClient);\n  }\n\n  private createPlaySourceInternal(\n    playSource: FileSource | TextSource | SsmlSource,\n  ): PlaySourceInternal {\n    if (playSource.kind === \"fileSource\") {\n      const fileSource: FileSourceInternal = {\n        uri: playSource.url,\n      };\n      return {\n        kind: KnownPlaySourceType.File,\n        file: fileSource,\n        playSourceCacheId: playSource.playSourceCacheId\n          ? playSource.playSourceCacheId\n          : playSource.playsourcacheid,\n      };\n    } else if (playSource.kind === \"textSource\") {\n      const textSource: TextSourceInternal = {\n        text: playSource.text,\n        sourceLocale: playSource.sourceLocale,\n        voiceKind: playSource.voiceKind,\n        voiceName: playSource.voiceName,\n        customVoiceEndpointId: playSource.customVoiceEndpointId,\n      };\n      return {\n        kind: KnownPlaySourceType.Text,\n        text: textSource,\n        playSourceCacheId: playSource.playSourceCacheId\n          ? playSource.playSourceCacheId\n          : playSource.playsourcacheid,\n      };\n    } else if (playSource.kind === \"ssmlSource\") {\n      const ssmlSource: SsmlSourceInternal = {\n        ssmlText: playSource.ssmlText,\n        customVoiceEndpointId: playSource.customVoiceEndpointId,\n      };\n      return {\n        kind: KnownPlaySourceType.Ssml,\n        ssml: ssmlSource,\n        playSourceCacheId: playSource.playSourceCacheId\n          ? playSource.playSourceCacheId\n          : playSource.playsourcacheid,\n      };\n    }\n    throw new Error(\"Invalid play source\");\n  }\n\n  /**\n   * Play audio to a specific participant.\n   *\n   * @param playSources - A PlaySource representing the sources to play. Currently only single play source per request is supported.\n   * @param playTo - The targets to play to.\n   * @param options - Additional attributes for play.\n   */\n  public async play(\n    playSources: (FileSource | TextSource | SsmlSource)[],\n    playTo: CommunicationIdentifier[],\n    options: PlayOptions = { loop: false },\n  ): Promise<PlayResult> {\n    const playRequest: PlayRequest = {\n      playSources: playSources.map((source) => this.createPlaySourceInternal(source)),\n      playTo: playTo.map((identifier) => serializeCommunicationIdentifier(identifier)),\n      playOptions: {\n        loop: false,\n        interruptHoldAudio: false,\n      },\n      operationContext: options.operationContext ? options.operationContext : randomUUID(),\n      operationCallbackUri: options.operationCallbackUrl,\n    };\n\n    if (options.loop !== undefined) {\n      playRequest.playOptions = playRequest.playOptions || { loop: false }; // Ensure playOptions is defined\n      playRequest.playOptions.loop = options.loop;\n    }\n    if (options.interruptHoldAudio !== undefined) {\n      playRequest.playOptions = playRequest.playOptions || {\n        loop: false,\n        interruptHoldAudio: false,\n      }; // Ensure playOptions is defined\n      playRequest.playOptions.interruptHoldAudio = options.interruptHoldAudio;\n    }\n    await this.callMedia.play(this.callConnectionId, playRequest, options);\n\n    const playResult: PlayResult = {\n      waitForEventProcessor: async (abortSignal, timeoutInMs) => {\n        const playEventResult: PlayEventResult = {\n          isSuccess: false,\n        };\n        await this.callAutomationEventProcessor.waitForEventProcessor(\n          (event) => {\n            if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"PlayCompleted\" &&\n              event.operationContext === playRequest.operationContext\n            ) {\n              playEventResult.isSuccess = true;\n              playEventResult.successResult = event;\n              return true;\n            } else if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"PlayFailed\" &&\n              event.operationContext === playRequest.operationContext\n            ) {\n              playEventResult.isSuccess = false;\n              playEventResult.failureResult = event;\n              return true;\n            } else {\n              return false;\n            }\n          },\n          abortSignal,\n          timeoutInMs,\n        );\n        return playEventResult;\n      },\n    };\n    return playResult;\n  }\n\n  /**\n   * Play to all participants.\n   *\n   * @param playSources - A PlaySource representing the sources to play. Currently only single play source per request is supported.\n   * @param options - Additional attributes for play.\n   */\n  public async playToAll(\n    playSources: (FileSource | TextSource | SsmlSource)[],\n    options: PlayToAllOptions = { loop: false },\n  ): Promise<PlayResult> {\n    const playRequest: PlayRequest = {\n      playSources: playSources.map((source) => this.createPlaySourceInternal(source)),\n      playTo: [],\n      playOptions: {\n        loop: false,\n      },\n      operationContext: options.operationContext ? options.operationContext : randomUUID(),\n      operationCallbackUri: options.operationCallbackUrl,\n    };\n\n    if (options.loop !== undefined) {\n      playRequest.playOptions = playRequest.playOptions || { loop: false }; // Ensure playOptions is defined\n      playRequest.playOptions.loop = options.loop;\n    }\n\n    if (options.interruptCallMediaOperation !== undefined) {\n      playRequest.playOptions = playRequest.playOptions || {\n        loop: false,\n        interruptCallMediaOperation: false,\n      }; // Ensure playOptions is defined\n      playRequest.playOptions.interruptCallMediaOperation = options.interruptCallMediaOperation;\n    }\n\n    await this.callMedia.play(this.callConnectionId, playRequest, options);\n\n    const playResult: PlayResult = {\n      waitForEventProcessor: async (abortSignal, timeoutInMs) => {\n        const playEventResult: PlayEventResult = {\n          isSuccess: false,\n        };\n        await this.callAutomationEventProcessor.waitForEventProcessor(\n          (event) => {\n            if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"PlayCompleted\" &&\n              event.operationContext === playRequest.operationContext\n            ) {\n              playEventResult.isSuccess = true;\n              playEventResult.successResult = event;\n              return true;\n            } else if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"PlayFailed\" &&\n              event.operationContext === playRequest.operationContext\n            ) {\n              playEventResult.isSuccess = false;\n              playEventResult.failureResult = event;\n              return true;\n            } else {\n              return false;\n            }\n          },\n          abortSignal,\n          timeoutInMs,\n        );\n        return playEventResult;\n      },\n    };\n    return playResult;\n  }\n\n  private createRecognizeRequest(\n    targetParticipant: CommunicationIdentifier,\n    recognizeOptions:\n      | CallMediaRecognizeDtmfOptions\n      | CallMediaRecognizeChoiceOptions\n      | CallMediaRecognizeSpeechOptions\n      | CallMediaRecognizeSpeechOrDtmfOptions,\n  ): RecognizeRequest {\n    if (recognizeOptions.kind === \"callMediaRecognizeDtmfOptions\") {\n      const dtmfOptionsInternal: DtmfOptions = {\n        interToneTimeoutInSeconds: recognizeOptions.interToneTimeoutInSeconds\n          ? recognizeOptions.interToneTimeoutInSeconds\n          : 2,\n        maxTonesToCollect: recognizeOptions.maxTonesToCollect,\n        stopTones: recognizeOptions.stopDtmfTones,\n      };\n      const recognizeOptionsInternal: RecognizeOptions = {\n        interruptPrompt: recognizeOptions.interruptPrompt,\n        initialSilenceTimeoutInSeconds: recognizeOptions.initialSilenceTimeoutInSeconds\n          ? recognizeOptions.initialSilenceTimeoutInSeconds\n          : 5,\n        targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n        dtmfOptions: dtmfOptionsInternal,\n      };\n      return {\n        recognizeInputType: KnownRecognizeInputType.Dtmf,\n        playPrompt: recognizeOptions.playPrompt\n          ? this.createPlaySourceInternal(recognizeOptions.playPrompt)\n          : undefined,\n        playPrompts:\n          recognizeOptions.playPrompts !== undefined\n            ? recognizeOptions.playPrompts.map((source) => this.createPlaySourceInternal(source))\n            : undefined,\n        interruptCallMediaOperation: recognizeOptions.interruptCallMediaOperation,\n        recognizeOptions: recognizeOptionsInternal,\n        operationContext: recognizeOptions.operationContext,\n        operationCallbackUri: recognizeOptions.operationCallbackUrl,\n      };\n    } else if (recognizeOptions.kind === \"callMediaRecognizeChoiceOptions\") {\n      const recognizeOptionsInternal: RecognizeOptions = {\n        interruptPrompt: recognizeOptions.interruptPrompt,\n        initialSilenceTimeoutInSeconds: recognizeOptions.initialSilenceTimeoutInSeconds\n          ? recognizeOptions.initialSilenceTimeoutInSeconds\n          : 5,\n        targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n        speechLanguage: recognizeOptions.speechLanguage,\n        speechRecognitionModelEndpointId: recognizeOptions.speechRecognitionModelEndpointId,\n        choices: recognizeOptions.choices,\n      };\n      return {\n        recognizeInputType: KnownRecognizeInputType.Choices,\n        playPrompt: recognizeOptions.playPrompt\n          ? this.createPlaySourceInternal(recognizeOptions.playPrompt)\n          : undefined,\n        playPrompts:\n          recognizeOptions.playPrompts !== undefined\n            ? recognizeOptions.playPrompts.map((source) => this.createPlaySourceInternal(source))\n            : undefined,\n        interruptCallMediaOperation: recognizeOptions.interruptCallMediaOperation,\n        recognizeOptions: recognizeOptionsInternal,\n        operationContext: recognizeOptions.operationContext,\n        operationCallbackUri: recognizeOptions.operationCallbackUrl,\n      };\n    } else if (recognizeOptions.kind === \"callMediaRecognizeSpeechOptions\") {\n      const speechOptions: SpeechOptions = {\n        endSilenceTimeoutInMs: recognizeOptions.endSilenceTimeoutInSeconds\n          ? recognizeOptions.endSilenceTimeoutInSeconds * 1000\n          : 2000,\n      };\n      const recognizeOptionsInternal: RecognizeOptions = {\n        interruptPrompt: recognizeOptions.interruptPrompt,\n        initialSilenceTimeoutInSeconds: recognizeOptions.initialSilenceTimeoutInSeconds\n          ? recognizeOptions.initialSilenceTimeoutInSeconds\n          : 5,\n        targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n        speechOptions: speechOptions,\n        speechLanguage: recognizeOptions.speechLanguage,\n        speechRecognitionModelEndpointId: recognizeOptions.speechRecognitionModelEndpointId,\n      };\n      return {\n        recognizeInputType: KnownRecognizeInputType.Speech,\n        playPrompt: recognizeOptions.playPrompt\n          ? this.createPlaySourceInternal(recognizeOptions.playPrompt)\n          : undefined,\n        playPrompts:\n          recognizeOptions.playPrompts !== undefined\n            ? recognizeOptions.playPrompts.map((source) => this.createPlaySourceInternal(source))\n            : undefined,\n        interruptCallMediaOperation: recognizeOptions.interruptCallMediaOperation,\n        recognizeOptions: recognizeOptionsInternal,\n        operationContext: recognizeOptions.operationContext,\n        operationCallbackUri: recognizeOptions.operationCallbackUrl,\n      };\n    } else if (recognizeOptions.kind === \"callMediaRecognizeSpeechOrDtmfOptions\") {\n      const dtmfOptionsInternal: DtmfOptions = {\n        interToneTimeoutInSeconds: recognizeOptions.interToneTimeoutInSeconds\n          ? recognizeOptions.interToneTimeoutInSeconds\n          : 2,\n        maxTonesToCollect: recognizeOptions.maxTonesToCollect,\n        stopTones: recognizeOptions.stopDtmfTones,\n      };\n      const speechOptions: SpeechOptions = {\n        endSilenceTimeoutInMs: recognizeOptions.endSilenceTimeoutInSeconds\n          ? recognizeOptions.endSilenceTimeoutInSeconds * 1000\n          : 2000,\n      };\n      const recognizeOptionsInternal: RecognizeOptions = {\n        interruptPrompt: recognizeOptions.interruptPrompt,\n        initialSilenceTimeoutInSeconds: recognizeOptions.initialSilenceTimeoutInSeconds\n          ? recognizeOptions.initialSilenceTimeoutInSeconds\n          : 5,\n        targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n        speechOptions: speechOptions,\n        dtmfOptions: dtmfOptionsInternal,\n        speechRecognitionModelEndpointId: recognizeOptions.speechRecognitionModelEndpointId,\n      };\n      return {\n        recognizeInputType: KnownRecognizeInputType.SpeechOrDtmf,\n        playPrompt: recognizeOptions.playPrompt\n          ? this.createPlaySourceInternal(recognizeOptions.playPrompt)\n          : undefined,\n        playPrompts:\n          recognizeOptions.playPrompts !== undefined\n            ? recognizeOptions.playPrompts.map((source) => this.createPlaySourceInternal(source))\n            : undefined,\n        interruptCallMediaOperation: recognizeOptions.interruptCallMediaOperation,\n        recognizeOptions: recognizeOptionsInternal,\n        operationContext: recognizeOptions.operationContext,\n        operationCallbackUri: recognizeOptions.operationCallbackUrl,\n      };\n    }\n    throw new Error(\"Invalid recognizeOptions\");\n  }\n\n  /**\n   *  Recognize participant input.\n   *  @deprecated This method signature is deprecated. Please use the new signature with targetParticipant and options params instead, and set maxTonesToCollect in options.\n   *  @param targetParticipant - Target participant.\n   *  @param maxTonesToCollect - Maximum number of DTMF tones to be collected.\n   *  @param options - Different attributes for recognize.\n   * */\n  public async startRecognizing(\n    targetParticipant: CommunicationIdentifier,\n    maxTonesToCollect: number,\n    options: CallMediaRecognizeDtmfOptions,\n  ): Promise<StartRecognizingResult>;\n\n  /**\n   *  Recognize participant input.\n   *  @param targetParticipant - Target participant.\n   *  @param options - Different attributes for recognize.\n   * */\n  public async startRecognizing(\n    targetParticipant: CommunicationIdentifier,\n    options:\n      | CallMediaRecognizeDtmfOptions\n      | CallMediaRecognizeChoiceOptions\n      | CallMediaRecognizeSpeechOptions\n      | CallMediaRecognizeSpeechOrDtmfOptions,\n  ): Promise<StartRecognizingResult>;\n  async startRecognizing(\n    targetParticipant: CommunicationIdentifier,\n    maxTonesOrOptions:\n      | number\n      | CallMediaRecognizeDtmfOptions\n      | CallMediaRecognizeChoiceOptions\n      | CallMediaRecognizeSpeechOptions\n      | CallMediaRecognizeSpeechOrDtmfOptions,\n    options?: CallMediaRecognizeDtmfOptions,\n  ): Promise<StartRecognizingResult> {\n    if (typeof maxTonesOrOptions === \"number\" && options) {\n      // Old function signature logic\n      console.warn(\n        \"Deprecated function signature used. Please use the new signature with targetParticipant and options params instead, and set maxTonesToCollect in options.\",\n      );\n      options.maxTonesToCollect = maxTonesOrOptions;\n      await this.callMedia.recognize(\n        this.callConnectionId,\n        this.createRecognizeRequest(targetParticipant, options),\n        {},\n      );\n    } else if (typeof maxTonesOrOptions !== \"number\" && !options) {\n      maxTonesOrOptions.operationContext = maxTonesOrOptions.operationContext\n        ? maxTonesOrOptions.operationContext\n        : randomUUID();\n      // New function signature logic\n      await this.callMedia.recognize(\n        this.callConnectionId,\n        this.createRecognizeRequest(targetParticipant, maxTonesOrOptions),\n        {},\n      );\n      const startRecognizingResult: StartRecognizingResult = {\n        waitForEventProcessor: async (abortSignal, timeoutInMs) => {\n          const startRecognizingEventResult: StartRecognizingEventResult = {\n            isSuccess: false,\n          };\n          await this.callAutomationEventProcessor.waitForEventProcessor(\n            (event) => {\n              if (\n                event.callConnectionId === this.callConnectionId &&\n                event.kind === \"RecognizeCompleted\" &&\n                event.operationContext === maxTonesOrOptions.operationContext\n              ) {\n                startRecognizingEventResult.isSuccess = true;\n                startRecognizingEventResult.successResult = event;\n                return true;\n              } else if (\n                event.callConnectionId === this.callConnectionId &&\n                event.kind === \"RecognizeFailed\" &&\n                event.operationContext === maxTonesOrOptions.operationContext\n              ) {\n                startRecognizingEventResult.isSuccess = false;\n                startRecognizingEventResult.failureResult = event;\n                return true;\n              } else {\n                return false;\n              }\n            },\n            abortSignal,\n            timeoutInMs,\n          );\n          return startRecognizingEventResult;\n        },\n      };\n      return startRecognizingResult;\n    }\n    throw new Error(\"Invalid params\");\n  }\n\n  /**\n   * Cancels all the queued media operations.\n   */\n  public async cancelAllOperations(): Promise<CancelAllMediaOperationsResult> {\n    await this.callMedia.cancelAllMediaOperations(this.callConnectionId, {});\n\n    const cancelAllMediaOperationsResult: CancelAllMediaOperationsResult = {\n      waitForEventProcessor: async (abortSignal, timeoutInMs) => {\n        const cancelAllMediaOperationsEventResult: CancelAllMediaOperationsEventResult = {\n          isSuccess: false,\n        };\n        await this.callAutomationEventProcessor.waitForEventProcessor(\n          (event) => {\n            if (event.callConnectionId === this.callConnectionId && event.kind === \"PlayCanceled\") {\n              cancelAllMediaOperationsEventResult.isSuccess = true;\n              cancelAllMediaOperationsEventResult.playCanceledSuccessResult = event;\n              return true;\n            } else if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"RecognizeCanceled\"\n            ) {\n              cancelAllMediaOperationsEventResult.isSuccess = false;\n              cancelAllMediaOperationsEventResult.recognizeCanceledSuccessResult = event;\n              return true;\n            } else {\n              return false;\n            }\n          },\n          abortSignal,\n          timeoutInMs,\n        );\n        return cancelAllMediaOperationsEventResult;\n      },\n    };\n    return cancelAllMediaOperationsResult;\n  }\n\n  /**\n   * Start continuous Dtmf recognition by subscribing to tones.\n   * @param targetParticipant - Target participant.\n   * @param options - Additional attributes for continuous Dtmf recognition.\n   * */\n  public async startContinuousDtmfRecognition(\n    targetParticipant: CommunicationIdentifier,\n    options: ContinuousDtmfRecognitionOptions = {},\n  ): Promise<void> {\n    const continuousDtmfRecognitionRequest: ContinuousDtmfRecognitionRequest = {\n      targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n      operationContext: options.operationContext ? options.operationContext : randomUUID(),\n    };\n    return this.callMedia.startContinuousDtmfRecognition(\n      this.callConnectionId,\n      continuousDtmfRecognitionRequest,\n      {},\n    );\n  }\n\n  /**\n   * Stop continuous Dtmf recognition by unsubscribing to tones.\n   * @param targetParticipant - Target participant.\n   * @param options - Additional attributes for continuous Dtmf recognition.\n   * */\n  public async stopContinuousDtmfRecognition(\n    targetParticipant: CommunicationIdentifier,\n    options: ContinuousDtmfRecognitionOptions = {},\n  ): Promise<void> {\n    const continuousDtmfRecognitionRequest: ContinuousDtmfRecognitionRequest = {\n      targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n      operationContext: options.operationContext ? options.operationContext : randomUUID(),\n      operationCallbackUri: options.operationCallbackUrl,\n    };\n    return this.callMedia.stopContinuousDtmfRecognition(\n      this.callConnectionId,\n      continuousDtmfRecognitionRequest,\n      {},\n    );\n  }\n\n  /**\n   * Send Dtmf tones.\n   * @param tones - List of tones to be sent to target participant.\n   * @param targetParticipant - Target participant.\n   * @param options - Additional attributes for send Dtmf tones.\n   * */\n  public async sendDtmfTones(\n    tones: Tone[] | DtmfTone[],\n    targetParticipant: CommunicationIdentifier,\n    options: SendDtmfTonesOptions = {},\n  ): Promise<SendDtmfTonesResult> {\n    const sendDtmfTonesRequest: SendDtmfTonesRequest = {\n      tones: tones,\n      targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n      operationContext: options.operationContext ? options.operationContext : randomUUID(),\n      operationCallbackUri: options.operationCallbackUrl,\n    };\n    await this.callMedia.sendDtmfTones(this.callConnectionId, sendDtmfTonesRequest, {});\n\n    const sendDtmfTonesResult: SendDtmfTonesResult = {\n      waitForEventProcessor: async (abortSignal, timeoutInMs) => {\n        const sendDtmfEventResult: SendDtmfEventResult = {\n          isSuccess: false,\n        };\n        await this.callAutomationEventProcessor.waitForEventProcessor(\n          (event) => {\n            if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"SendDtmfTonesCompleted\" &&\n              event.operationContext === sendDtmfTonesResult.operationContext\n            ) {\n              sendDtmfEventResult.isSuccess = true;\n              sendDtmfEventResult.successResult = event;\n              return true;\n            } else if (\n              event.callConnectionId === this.callConnectionId &&\n              event.kind === \"SendDtmfTonesFailed\" &&\n              event.operationContext === sendDtmfTonesResult.operationContext\n            ) {\n              sendDtmfEventResult.isSuccess = false;\n              sendDtmfEventResult.failureResult = event;\n              return true;\n            } else {\n              return false;\n            }\n          },\n          abortSignal,\n          timeoutInMs,\n        );\n        return sendDtmfEventResult;\n      },\n    };\n    return sendDtmfTonesResult;\n  }\n\n  /**\n   * Put participant on hold while playing audio.\n   *\n   * @param targetParticipant - The targets to play to.\n   * @param options - Additional attributes for hold participant.\n   */\n  public async hold(\n    targetParticipant: CommunicationIdentifier,\n    options: HoldOptions = {},\n  ): Promise<void> {\n    const holdRequest: HoldRequest = {\n      targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n      playSourceInfo:\n        options.playSource !== undefined\n          ? this.createPlaySourceInternal(options.playSource)\n          : undefined,\n      operationContext:\n        options.operationContext !== undefined ? options.operationContext : undefined,\n      operationCallbackUri:\n        options.operationCallbackUri !== undefined ? options.operationCallbackUri : undefined,\n    };\n    return this.callMedia.hold(this.callConnectionId, holdRequest);\n  }\n\n  /**\n   * Remove participant from hold.\n   *\n   * @param targetParticipant - The targets to play to.\n   * @param options - Additional attributes for unhold participant.\n   */\n  public async unhold(\n    targetParticipant: CommunicationIdentifier,\n    options: UnholdOptions = {},\n  ): Promise<void> {\n    const unholdRequest: UnholdRequest = {\n      targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n      operationContext:\n        options.operationContext !== undefined ? options.operationContext : undefined,\n    };\n    return this.callMedia.unhold(this.callConnectionId, unholdRequest);\n  }\n\n  /**\n   * Starts transcription in the call\n   * @param options - Additional attributes for start transcription.\n   */\n  public async startTranscription(options: StartTranscriptionOptions = {}): Promise<void> {\n    const startTranscriptionRequest: StartTranscriptionRequest = {\n      locale: options.locale,\n      operationContext: options.operationContext,\n      speechRecognitionModelEndpointId: options.speechRecognitionModelEndpointId,\n      operationCallbackUri: options.operationCallbackUrl,\n    };\n    return this.callMedia.startTranscription(this.callConnectionId, startTranscriptionRequest, {});\n  }\n\n  /**\n   * Stops transcription in the call.\n   * @param options - Additional attributes for stop transcription.\n   */\n  public async stopTranscription(options: StopTranscriptionOptions = {}): Promise<void> {\n    const stopTranscriptionRequest: StopTranscriptionRequest = {\n      operationContext: options.operationContext,\n      operationCallbackUri: options.operationCallbackUrl,\n    };\n    return this.callMedia.stopTranscription(this.callConnectionId, stopTranscriptionRequest, {});\n  }\n\n  /**\n   * Update transcription language.\n   * @param locale - Defines new locale for transcription.\n   */\n  public async updateTranscription(\n    locale: string,\n    options?: UpdateTranscriptionOptions,\n  ): Promise<void> {\n    const updateTranscriptionRequest: UpdateTranscriptionRequest = {\n      locale: locale,\n      speechRecognitionModelEndpointId: options?.speechRecognitionModelEndpointId,\n      operationContext: options?.operationContext,\n      operationCallbackUri: options?.operationCallbackUrl,\n    };\n    return this.callMedia.updateTranscription(\n      this.callConnectionId,\n      updateTranscriptionRequest,\n      {},\n    );\n  }\n  /**\n   * Starts media streaming in the call.\n   * @param options - Additional attributes for start media streaming.\n   */\n  public async startMediaStreaming(options: StartMediaStreamingOptions = {}): Promise<void> {\n    const startMediaStreamingRequest: StartMediaStreamingRequest = {\n      operationContext: options.operationContext,\n      operationCallbackUri: options.operationCallbackUrl,\n    };\n    return this.callMedia.startMediaStreaming(\n      this.callConnectionId,\n      startMediaStreamingRequest,\n      options,\n    );\n  }\n\n  /**\n   * Stops media streaming in the call.\n   * @param options - Additional attributes for stop media streaming.\n   */\n  public async stopMediaStreaming(options: StopMediaStreamingOptions = {}): Promise<void> {\n    const stopMediaStreamingRequest: StopMediaStreamingRequest = {\n      operationCallbackUri: options.operationCallbackUrl,\n      operationContext: options.operationContext,\n    };\n    return this.callMedia.stopMediaStreaming(\n      this.callConnectionId,\n      stopMediaStreamingRequest,\n      options,\n    );\n  }\n\n  /**\n   * Interrupt audio and announce to specific participant.\n   *\n   * @param playSources - A PlaySource representing the sources to play.\n   * @param playTo - The targets to play to.\n   * @param options - Additional attributes for interrupt audio and announce.\n   */\n  public async interruptAudioAndAnnounce(\n    playSources: (FileSource | TextSource | SsmlSource)[],\n    playTo: CommunicationIdentifier,\n    options: InterruptAudioAndAnnounceOptions = {},\n  ): Promise<void> {\n    const interruptAudioAndAnnounceRequest: InterruptAudioAndAnnounceRequest = {\n      playSources: playSources.map((source) => this.createPlaySourceInternal(source)),\n      playTo: serializeCommunicationIdentifier(playTo),\n      operationContext: options.operationContext,\n    };\n    return this.callMedia.interruptAudioAndAnnounce(\n      this.callConnectionId,\n      interruptAudioAndAnnounceRequest,\n    );\n  }\n}\n"]}