{"version":3,"file":"callRecording.js","sourceRoot":"","sources":["../../../../../src/generated/src/operations/callRecording.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { CallRecording } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { CallAutomationApiClient } from \"../callAutomationApiClient.js\";\nimport {\n  StartCallRecordingRequest,\n  CallRecordingStartRecordingOptionalParams,\n  CallRecordingStartRecordingResponse,\n  CallRecordingGetRecordingPropertiesOptionalParams,\n  CallRecordingGetRecordingPropertiesResponse,\n  CallRecordingStopRecordingOptionalParams,\n  CallRecordingPauseRecordingOptionalParams,\n  CallRecordingResumeRecordingOptionalParams,\n  CallRecordingGetRecordingResultOptionalParams,\n  CallRecordingGetRecordingResultResponse,\n} from \"../models/index.js\";\n\n/** Class containing CallRecording operations. */\nexport class CallRecordingImpl implements CallRecording {\n  private readonly client: CallAutomationApiClient;\n\n  /**\n   * Initialize a new instance of the class CallRecording class.\n   * @param client Reference to the service client\n   */\n  constructor(client: CallAutomationApiClient) {\n    this.client = client;\n  }\n\n  /**\n   * Start recording the call.\n   * @param startCallRecording The request body of start call recording request.\n   * @param options The options parameters.\n   */\n  startRecording(\n    startCallRecording: StartCallRecordingRequest,\n    options?: CallRecordingStartRecordingOptionalParams,\n  ): Promise<CallRecordingStartRecordingResponse> {\n    return this.client.sendOperationRequest(\n      { startCallRecording, options },\n      startRecordingOperationSpec,\n    );\n  }\n\n  /**\n   * Get call recording properties.\n   * @param recordingId The recording id.\n   * @param options The options parameters.\n   */\n  getRecordingProperties(\n    recordingId: string,\n    options?: CallRecordingGetRecordingPropertiesOptionalParams,\n  ): Promise<CallRecordingGetRecordingPropertiesResponse> {\n    return this.client.sendOperationRequest(\n      { recordingId, options },\n      getRecordingPropertiesOperationSpec,\n    );\n  }\n\n  /**\n   * Stop recording the call.\n   * @param recordingId The recording id.\n   * @param options The options parameters.\n   */\n  stopRecording(\n    recordingId: string,\n    options?: CallRecordingStopRecordingOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { recordingId, options },\n      stopRecordingOperationSpec,\n    );\n  }\n\n  /**\n   * Pause recording the call.\n   * @param recordingId The recording id.\n   * @param options The options parameters.\n   */\n  pauseRecording(\n    recordingId: string,\n    options?: CallRecordingPauseRecordingOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { recordingId, options },\n      pauseRecordingOperationSpec,\n    );\n  }\n\n  /**\n   * Resume recording the call.\n   * @param recordingId The recording id.\n   * @param options The options parameters.\n   */\n  resumeRecording(\n    recordingId: string,\n    options?: CallRecordingResumeRecordingOptionalParams,\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { recordingId, options },\n      resumeRecordingOperationSpec,\n    );\n  }\n\n  /**\n   * Get recording result. This includes the download URLs for the recording chunks.\n   * @param recordingId The recording id.\n   * @param options The options parameters.\n   */\n  getRecordingResult(\n    recordingId: string,\n    options?: CallRecordingGetRecordingResultOptionalParams,\n  ): Promise<CallRecordingGetRecordingResultResponse> {\n    return this.client.sendOperationRequest(\n      { recordingId, options },\n      getRecordingResultOperationSpec,\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst startRecordingOperationSpec: coreClient.OperationSpec = {\n  path: \"/calling/recordings\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RecordingStateResponse,\n    },\n    202: {\n      bodyMapper: Mappers.RecordingStateResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  requestBody: Parameters.startCallRecording,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [\n    Parameters.contentType,\n    Parameters.accept,\n    Parameters.repeatabilityRequestID,\n    Parameters.repeatabilityFirstSent,\n  ],\n  mediaType: \"json\",\n  serializer,\n};\nconst getRecordingPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/calling/recordings/{recordingId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RecordingStateResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.recordingId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst stopRecordingOperationSpec: coreClient.OperationSpec = {\n  path: \"/calling/recordings/{recordingId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.recordingId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst pauseRecordingOperationSpec: coreClient.OperationSpec = {\n  path: \"/calling/recordings/{recordingId}:pause\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.recordingId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst resumeRecordingOperationSpec: coreClient.OperationSpec = {\n  path: \"/calling/recordings/{recordingId}:resume\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {},\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.recordingId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getRecordingResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/calling/recordings/{recordingId}/result\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RecordingResultResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.recordingId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}