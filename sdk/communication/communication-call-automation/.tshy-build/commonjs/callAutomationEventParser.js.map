{"version":3,"file":"callAutomationEventParser.js","sourceRoot":"","sources":["../../src/callAutomationEventParser.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AA2DlC,4DA+JC;;AAxND,oDAAsD;AACtD,wDAAkG;AAgDlG,kDAAsD;AAGtD,MAAM,UAAU,GAAG,IAAA,8BAAgB,GAAE,CAAC;AAEtC;;GAEG;AACH,SAAgB,wBAAwB,CACtC,aAA+C;IAE/C,MAAM,YAAY,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC;IAEjD,mBAAmB;IACnB,MAAM,YAAY,GAAG,UAAU,CAAC,WAAW,CAAC,4BAAgB,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;IAChF,MAAM,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC;IAC/B,MAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC;IAEpC,0CAA0C;IAC1C,IAAI,aAAkC,CAAC;IACvC,IAAI,MAAM,GAAQ,IAAI,CAAC;IACvB,QAAQ,SAAS,EAAE,CAAC;QAClB,KAAK,iDAAiD;YACpD,aAAa,GAAG,EAAE,IAAI,EAAE,yBAAyB,EAA6B,CAAC;YAC/E,MAAM,CAAC,WAAW,GAAG,IAAA,gDAAgC,EAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACxE,MAAM;QACR,KAAK,8CAA8C;YACjD,aAAa,GAAG,EAAE,IAAI,EAAE,sBAAsB,EAA0B,CAAC;YACzE,MAAM,CAAC,WAAW,GAAG,IAAA,gDAAgC,EAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACxE,MAAM;QACR,KAAK,oDAAoD;YACvD,aAAa,GAAG,EAAE,IAAI,EAAE,4BAA4B,EAAgC,CAAC;YACrF,MAAM,CAAC,WAAW,GAAG,IAAA,gDAAgC,EAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACxE,MAAM;QACR,KAAK,iDAAiD;YACpD,aAAa,GAAG,EAAE,IAAI,EAAE,yBAAyB,EAA6B,CAAC;YAC/E,MAAM,CAAC,WAAW,GAAG,IAAA,gDAAgC,EAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACxE,MAAM;QACR,KAAK,uCAAuC;YAC1C,aAAa,GAAG,EAAE,IAAI,EAAE,eAAe,EAAmB,CAAC;YAC3D,MAAM;QACR,KAAK,sCAAsC;YACzC,aAAa,GAAG,EAAE,IAAI,EAAE,cAAc,EAAkB,CAAC;YACzD,MAAM;QACR,KAAK,0CAA0C;YAC7C,aAAa,GAAG,EAAE,IAAI,EAAE,kBAAkB,EAAsB,CAAC;YACjE,MAAM;QACR,KAAK,8CAA8C;YACjD,aAAa,GAAG,EAAE,IAAI,EAAE,sBAAsB,EAA0B,CAAC;YACzE,MAAM;QACR,KAAK,4CAA4C;YAC/C,aAAa,GAAG,EAAE,IAAI,EAAE,oBAAoB,EAAwB,CAAC;YACrE,MAAM;QACR,KAAK,6CAA6C;YAChD,aAAa,GAAG,EAAE,IAAI,EAAE,qBAAqB,EAAyB,CAAC;YACvE,MAAM,GAAG,0BAA0B,CAAC,IAAI,CAAC,CAAC;YAC1C,MAAM;QACR,KAAK,+CAA+C;YAClD,aAAa,GAAG,EAAE,IAAI,EAAE,uBAAuB,EAA2B,CAAC;YAC3E,MAAM;QACR,KAAK,uCAAuC;YAC1C,aAAa,GAAG,EAAE,IAAI,EAAE,eAAe,EAAmB,CAAC;YAC3D,MAAM;QACR,KAAK,oCAAoC;YACvC,aAAa,GAAG,EAAE,IAAI,EAAE,YAAY,EAAgB,CAAC;YACrD,MAAM;QACR,KAAK,sCAAsC;YACzC,aAAa,GAAG,EAAE,IAAI,EAAE,cAAc,EAAkB,CAAC;YACzD,MAAM;QACR,KAAK,4CAA4C;YAC/C,aAAa,GAAG,EAAE,IAAI,EAAE,oBAAoB,EAAwB,CAAC;YACrE,MAAM;QACR,KAAK,2CAA2C;YAC9C,aAAa,GAAG,EAAE,IAAI,EAAE,mBAAmB,EAAuB,CAAC;YACnE,MAAM;QACR,KAAK,yCAAyC;YAC5C,aAAa,GAAG,EAAE,IAAI,EAAE,iBAAiB,EAAqB,CAAC;YAC/D,MAAM;QACR,KAAK,+DAA+D;YAClE,aAAa,GAAG;gBACd,IAAI,EAAE,uCAAuC;aACL,CAAC;YAC3C,MAAM;QACR,KAAK,6DAA6D;YAChE,aAAa,GAAG;gBACd,IAAI,EAAE,qCAAqC;aACL,CAAC;YACzC,MAAM;QACR,KAAK,0DAA0D;YAC7D,aAAa,GAAG;gBACd,IAAI,EAAE,kCAAkC;aACL,CAAC;YACtC,MAAM;QACR,KAAK,gDAAgD;YACnD,aAAa,GAAG,EAAE,IAAI,EAAE,wBAAwB,EAA4B,CAAC;YAC7E,MAAM;QACR,KAAK,6CAA6C;YAChD,aAAa,GAAG,EAAE,IAAI,EAAE,qBAAqB,EAAyB,CAAC;YACvE,MAAM;QACR,KAAK,uDAAuD;YAC1D,aAAa,GAAG,EAAE,IAAI,EAAE,+BAA+B,EAAmC,CAAC;YAC3F,MAAM;QACR,KAAK,oDAAoD;YACvD,aAAa,GAAG,EAAE,IAAI,EAAE,4BAA4B,EAAgC,CAAC;YACrF,MAAM;QACR,KAAK,8CAA8C;YACjD,aAAa,GAAG,EAAE,IAAI,EAAE,sBAAsB,EAA0B,CAAC;YACzE,MAAM;QACR,KAAK,8CAA8C;YACjD,aAAa,GAAG,EAAE,IAAI,EAAE,sBAAsB,EAA0B,CAAC;YACzE,MAAM;QACR,KAAK,8CAA8C;YACjD,aAAa,GAAG,EAAE,IAAI,EAAE,sBAAsB,EAA0B,CAAC;YACzE,MAAM;QACR,KAAK,6CAA6C;YAChD,aAAa,GAAG,EAAE,IAAI,EAAE,qBAAqB,EAAyB,CAAC;YACvE,MAAM;QACR,KAAK,0CAA0C;YAC7C,aAAa,GAAG,EAAE,IAAI,EAAE,kBAAkB,EAAsB,CAAC;YACjE,MAAM;QACR,KAAK,sCAAsC;YACzC,aAAa,GAAG,EAAE,IAAI,EAAE,cAAc,EAAkB,CAAC;YACzD,MAAM;QACR,KAAK,oCAAoC;YACvC,aAAa,GAAG,EAAE,IAAI,EAAE,YAAY,EAAgB,CAAC;YACrD,MAAM;QACR,KAAK,uCAAuC;YAC1C,aAAa,GAAG,EAAE,IAAI,EAAE,eAAe,EAAmB,CAAC;YAC3D,MAAM;QACR,KAAK,+CAA+C;YAClD,aAAa,GAAG,EAAE,IAAI,EAAE,uBAAuB,EAA2B,CAAC;YAC3E,MAAM;QACR,KAAK,+CAA+C;YAClD,aAAa,GAAG,EAAE,IAAI,EAAE,uBAAuB,EAA2B,CAAC;YAC3E,MAAM;QACR,KAAK,8CAA8C;YACjD,aAAa,GAAG,EAAE,IAAI,EAAE,sBAAsB,EAA0B,CAAC;YACzE,MAAM;QACR,KAAK,8CAA8C;YACjD,aAAa,GAAG,EAAE,IAAI,EAAE,sBAAsB,EAA0B,CAAC;YACzE,MAAM;QACR,KAAK,qCAAqC;YACxC,aAAa,GAAG,EAAE,IAAI,EAAE,aAAa,EAAiB,CAAC;YACvD,MAAM;QACR,KAAK,oCAAoC;YACvC,aAAa,GAAG,EAAE,IAAI,EAAE,YAAY,EAAgB,CAAC;YACrD,MAAM;QACR,KAAK,qCAAqC;YACxC,aAAa,GAAG,EAAE,IAAI,EAAE,aAAa,EAAiB,CAAC;YACvD,MAAM;QACR,KAAK,0CAA0C;YAC7C,aAAa,GAAG,EAAE,IAAI,EAAE,kBAAkB,EAAsB,CAAC;YACjE,MAAM;QACR,KAAK,yCAAyC;YAC5C,aAAa,GAAG,EAAE,IAAI,EAAE,iBAAiB,EAAqB,CAAC;YAC/D,MAAM;QACR,KAAK,0CAA0C;YAC7C,aAAa,GAAG,EAAE,IAAI,EAAE,kBAAkB,EAAsB,CAAC;YACjE,MAAM;QACR,KAAK,4CAA4C;YAC/C,aAAa,GAAG,EAAE,IAAI,EAAE,oBAAoB,EAAwB,CAAC;YACrE,MAAM;QACR;YACE,MAAM,IAAI,SAAS,CAAC,uCAAuC,SAAS,EAAE,CAAC,CAAC;IAC5E,CAAC;IAED,OAAO,gCAAK,MAAM,GAAK,aAAa,CAAyB,CAAC;AAChE,CAAC;AAED,SAAS,YAAY,CAAC,kBAAoD;IACxE,IAAI,OAAO,kBAAkB,KAAK,QAAQ,EAAE,CAAC;QAC3C,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACzC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;YACrB,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACnB,MAAM,KAAK,CAAC,oBAAoB,CAAC,CAAC;YACpC,CAAC;YACD,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACd,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,CAAC;QACX,CAAC;IACH,CAAC;IAED,IAAI,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE,CAAC;QACtC,IAAI,kBAAkB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACpC,MAAM,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACpC,CAAC;QACD,OAAO,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAC/B,CAAC;SAAM,CAAC;QACN,OAAO,kBAAkB,CAAC;IAC5B,CAAC;AACH,CAAC;AAED,SAAS,0BAA0B,CAAC,IAAS;IAC3C,MAAM,EAAE,YAAY,KAAc,IAAI,EAAb,IAAI,kBAAK,IAAI,EAAhC,gBAAyB,CAAO,CAAC;IACvC,uCACK,IAAI,KACP,YAAY,EAAE,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,GAAG,CAAC,CAAC,WAAoC,EAAE,EAAE,CACvE,IAAA,wCAAwB,EAAC,WAAW,CAAC,CACtC,IACD;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { createSerializer } from \"@azure/core-client\";\nimport { communicationIdentifierConverter, callParticipantConverter } from \"./utli/converters.js\";\nimport type {\n  CallAutomationEvent,\n  AddParticipantSucceeded,\n  AddParticipantFailed,\n  CallConnected,\n  CallDisconnected,\n  CallTransferAccepted,\n  CallTransferFailed,\n  ParticipantsUpdated,\n  RecordingStateChanged,\n  PlayCompleted,\n  PlayFailed,\n  PlayCanceled,\n  RecognizeCompleted,\n  RecognizeCanceled,\n  RecognizeFailed,\n  RemoveParticipantSucceeded,\n  RemoveParticipantFailed,\n  ContinuousDtmfRecognitionToneReceived,\n  ContinuousDtmfRecognitionToneFailed,\n  ContinuousDtmfRecognitionStopped,\n  SendDtmfTonesCompleted,\n  SendDtmfTonesFailed,\n  CancelAddParticipantSucceeded,\n  CancelAddParticipantFailed,\n  TranscriptionStarted,\n  TranscriptionStopped,\n  TranscriptionUpdated,\n  TranscriptionFailed,\n  CreateCallFailed,\n  AnswerFailed,\n  HoldFailed,\n  ConnectFailed,\n  MediaStreamingStarted,\n  MediaStreamingStopped,\n  MediaStreamingFailed,\n  StartRecordingFailed,\n  PlayStarted,\n  PlayPaused,\n  PlayResumed,\n  HoldAudioStarted,\n  HoldAudioPaused,\n  HoldAudioResumed,\n  HoldAudioCompleted,\n  IncomingCall,\n} from \"./models/events.js\";\n\nimport { CloudEventMapper } from \"./models/mapper.js\";\nimport type { CallParticipantInternal } from \"./generated/src/index.js\";\n\nconst serializer = createSerializer();\n\n/**\n * Helper function for parsing Acs callback events.\n */\nexport function parseCallAutomationEvent(\n  encodedEvents: string | Record<string, unknown>,\n): CallAutomationEvent {\n  const decodedInput = parseAndWrap(encodedEvents);\n\n  // parse cloudevent\n  const deserialized = serializer.deserialize(CloudEventMapper, decodedInput, \"\");\n  const data = deserialized.data;\n  const eventType = deserialized.type;\n\n  // get proper callbackevent and its parser\n  let callbackEvent: CallAutomationEvent;\n  let parsed: any = data;\n  switch (eventType) {\n    case \"Microsoft.Communication.AddParticipantSucceeded\":\n      callbackEvent = { kind: \"AddParticipantSucceeded\" } as AddParticipantSucceeded;\n      parsed.participant = communicationIdentifierConverter(data.participant);\n      break;\n    case \"Microsoft.Communication.AddParticipantFailed\":\n      callbackEvent = { kind: \"AddParticipantFailed\" } as AddParticipantFailed;\n      parsed.participant = communicationIdentifierConverter(data.participant);\n      break;\n    case \"Microsoft.Communication.RemoveParticipantSucceeded\":\n      callbackEvent = { kind: \"RemoveParticipantSucceeded\" } as RemoveParticipantSucceeded;\n      parsed.participant = communicationIdentifierConverter(data.participant);\n      break;\n    case \"Microsoft.Communication.RemoveParticipantFailed\":\n      callbackEvent = { kind: \"RemoveParticipantFailed\" } as RemoveParticipantFailed;\n      parsed.participant = communicationIdentifierConverter(data.participant);\n      break;\n    case \"Microsoft.Communication.CallConnected\":\n      callbackEvent = { kind: \"CallConnected\" } as CallConnected;\n      break;\n    case \"Microsoft.Communication.IncomingCall\":\n      callbackEvent = { kind: \"IncomingCall\" } as IncomingCall;\n      break;\n    case \"Microsoft.Communication.CallDisconnected\":\n      callbackEvent = { kind: \"CallDisconnected\" } as CallDisconnected;\n      break;\n    case \"Microsoft.Communication.CallTransferAccepted\":\n      callbackEvent = { kind: \"CallTransferAccepted\" } as CallTransferAccepted;\n      break;\n    case \"Microsoft.Communication.CallTransferFailed\":\n      callbackEvent = { kind: \"CallTransferFailed\" } as CallTransferFailed;\n      break;\n    case \"Microsoft.Communication.ParticipantsUpdated\":\n      callbackEvent = { kind: \"ParticipantsUpdated\" } as ParticipantsUpdated;\n      parsed = participantsParserForEvent(data);\n      break;\n    case \"Microsoft.Communication.RecordingStateChanged\":\n      callbackEvent = { kind: \"RecordingStateChanged\" } as RecordingStateChanged;\n      break;\n    case \"Microsoft.Communication.PlayCompleted\":\n      callbackEvent = { kind: \"PlayCompleted\" } as PlayCompleted;\n      break;\n    case \"Microsoft.Communication.PlayFailed\":\n      callbackEvent = { kind: \"PlayFailed\" } as PlayFailed;\n      break;\n    case \"Microsoft.Communication.PlayCanceled\":\n      callbackEvent = { kind: \"PlayCanceled\" } as PlayCanceled;\n      break;\n    case \"Microsoft.Communication.RecognizeCompleted\":\n      callbackEvent = { kind: \"RecognizeCompleted\" } as RecognizeCompleted;\n      break;\n    case \"Microsoft.Communication.RecognizeCanceled\":\n      callbackEvent = { kind: \"RecognizeCanceled\" } as RecognizeCanceled;\n      break;\n    case \"Microsoft.Communication.RecognizeFailed\":\n      callbackEvent = { kind: \"RecognizeFailed\" } as RecognizeFailed;\n      break;\n    case \"Microsoft.Communication.ContinuousDtmfRecognitionToneReceived\":\n      callbackEvent = {\n        kind: \"ContinuousDtmfRecognitionToneReceived\",\n      } as ContinuousDtmfRecognitionToneReceived;\n      break;\n    case \"Microsoft.Communication.ContinuousDtmfRecognitionToneFailed\":\n      callbackEvent = {\n        kind: \"ContinuousDtmfRecognitionToneFailed\",\n      } as ContinuousDtmfRecognitionToneFailed;\n      break;\n    case \"Microsoft.Communication.ContinuousDtmfRecognitionStopped\":\n      callbackEvent = {\n        kind: \"ContinuousDtmfRecognitionStopped\",\n      } as ContinuousDtmfRecognitionStopped;\n      break;\n    case \"Microsoft.Communication.SendDtmfTonesCompleted\":\n      callbackEvent = { kind: \"SendDtmfTonesCompleted\" } as SendDtmfTonesCompleted;\n      break;\n    case \"Microsoft.Communication.SendDtmfTonesFailed\":\n      callbackEvent = { kind: \"SendDtmfTonesFailed\" } as SendDtmfTonesFailed;\n      break;\n    case \"Microsoft.Communication.CancelAddParticipantSucceeded\":\n      callbackEvent = { kind: \"CancelAddParticipantSucceeded\" } as CancelAddParticipantSucceeded;\n      break;\n    case \"Microsoft.Communication.CancelAddParticipantFailed\":\n      callbackEvent = { kind: \"CancelAddParticipantFailed\" } as CancelAddParticipantFailed;\n      break;\n    case \"Microsoft.Communication.TranscriptionStarted\":\n      callbackEvent = { kind: \"TranscriptionStarted\" } as TranscriptionStarted;\n      break;\n    case \"Microsoft.Communication.TranscriptionStopped\":\n      callbackEvent = { kind: \"TranscriptionStopped\" } as TranscriptionStopped;\n      break;\n    case \"Microsoft.Communication.TranscriptionUpdated\":\n      callbackEvent = { kind: \"TranscriptionUpdated\" } as TranscriptionUpdated;\n      break;\n    case \"Microsoft.Communication.TranscriptionFailed\":\n      callbackEvent = { kind: \"TranscriptionFailed\" } as TranscriptionFailed;\n      break;\n    case \"Microsoft.Communication.CreateCallFailed\":\n      callbackEvent = { kind: \"CreateCallFailed\" } as CreateCallFailed;\n      break;\n    case \"Microsoft.Communication.AnswerFailed\":\n      callbackEvent = { kind: \"AnswerFailed\" } as AnswerFailed;\n      break;\n    case \"Microsoft.Communication.HoldFailed\":\n      callbackEvent = { kind: \"HoldFailed\" } as HoldFailed;\n      break;\n    case \"Microsoft.Communication.ConnectFailed\":\n      callbackEvent = { kind: \"ConnectFailed\" } as ConnectFailed;\n      break;\n    case \"Microsoft.Communication.MediaStreamingStarted\":\n      callbackEvent = { kind: \"MediaStreamingStarted\" } as MediaStreamingStarted;\n      break;\n    case \"Microsoft.Communication.MediaStreamingStopped\":\n      callbackEvent = { kind: \"MediaStreamingStopped\" } as MediaStreamingStopped;\n      break;\n    case \"Microsoft.Communication.MediaStreamingFailed\":\n      callbackEvent = { kind: \"MediaStreamingFailed\" } as MediaStreamingFailed;\n      break;\n    case \"Microsoft.Communication.StartRecordingFailed\":\n      callbackEvent = { kind: \"StartRecordingFailed\" } as StartRecordingFailed;\n      break;\n    case \"Microsoft.Communication.PlayStarted\":\n      callbackEvent = { kind: \"PlayStarted\" } as PlayStarted;\n      break;\n    case \"Microsoft.Communication.PlayPaused\":\n      callbackEvent = { kind: \"PlayPaused\" } as PlayPaused;\n      break;\n    case \"Microsoft.Communication.PlayResumed\":\n      callbackEvent = { kind: \"PlayResumed\" } as PlayResumed;\n      break;\n    case \"Microsoft.Communication.HoldAudioStarted\":\n      callbackEvent = { kind: \"HoldAudioStarted\" } as HoldAudioStarted;\n      break;\n    case \"Microsoft.Communication.HoldAudioPaused\":\n      callbackEvent = { kind: \"HoldAudioPaused\" } as HoldAudioPaused;\n      break;\n    case \"Microsoft.Communication.HoldAudioResumed\":\n      callbackEvent = { kind: \"HoldAudioResumed\" } as HoldAudioResumed;\n      break;\n    case \"Microsoft.Communication.HoldAudioCompleted\":\n      callbackEvent = { kind: \"HoldAudioCompleted\" } as HoldAudioCompleted;\n      break;\n    default:\n      throw new TypeError(`Unknown Call Automation Event type: ${eventType}`);\n  }\n\n  return { ...parsed, ...callbackEvent } as CallAutomationEvent;\n}\n\nfunction parseAndWrap(jsonStringOrObject: string | Record<string, unknown>): any {\n  if (typeof jsonStringOrObject === \"string\") {\n    const o = JSON.parse(jsonStringOrObject);\n    if (Array.isArray(o)) {\n      if (o.length === 0) {\n        throw Error(\"Empty event array.\");\n      }\n      return o[0];\n    } else {\n      return o;\n    }\n  }\n\n  if (Array.isArray(jsonStringOrObject)) {\n    if (jsonStringOrObject.length === 0) {\n      throw Error(\"Empty event array.\");\n    }\n    return jsonStringOrObject[0];\n  } else {\n    return jsonStringOrObject;\n  }\n}\n\nfunction participantsParserForEvent(data: any): any {\n  const { participants, ...rest } = data;\n  return {\n    ...rest,\n    participants: participants?.map((participant: CallParticipantInternal) =>\n      callParticipantConverter(participant),\n    ),\n  };\n}\n"]}