{"version":3,"file":"responses.js","sourceRoot":"","sources":["../../../src/models/responses.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { CallConnection } from \"../callConnection.js\";\nimport type { CallConnectionProperties, CallParticipant } from \"./models.js\";\nimport type { RecordingState } from \"../generated/src/index.js\";\nimport type {\n  AddParticipantEventResult,\n  AnswerCallEventResult,\n  CancelAllMediaOperationsEventResult,\n  CreateCallEventResult,\n  PlayEventResult,\n  RemoveParticipantEventResult,\n  SendDtmfEventResult,\n  StartRecognizingEventResult,\n  TransferCallToParticipantEventResult,\n  CancelAddParticipantEventResult,\n  ConnectCallEventResult,\n} from \"../eventprocessor/eventResponses.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\n\n/**\n * CreateCall result\n */\nexport interface CreateCallResult {\n  /** The callConnectionProperties */\n  callConnectionProperties: CallConnectionProperties;\n\n  /** The callConnection */\n  callConnection: CallConnection;\n\n  /** Waiting for event processor to process the event */\n  waitForEventProcessor(\n    abortSignal?: AbortSignalLike,\n    timeoutInMs?: number,\n  ): Promise<CreateCallEventResult>;\n}\n\n/**\n * AnswerCall result\n */\nexport interface AnswerCallResult {\n  /** The callConnectionProperties */\n  callConnectionProperties: CallConnectionProperties;\n\n  /** The callConnection */\n  callConnection: CallConnection;\n\n  /** Waiting for event processor to process the event */\n  waitForEventProcessor(\n    abortSignal?: AbortSignalLike,\n    timeoutInMs?: number,\n  ): Promise<AnswerCallEventResult>;\n}\n\n/**\n * ConnectCall result\n */\nexport interface ConnectCallResult {\n  /** The callConnectionProperties */\n  callConnectionProperties: CallConnectionProperties;\n\n  /** The callConnection */\n  callConnection: CallConnection;\n\n  /** Waiting for event processor to process the event */\n  waitForEventProcessor(\n    abortSignal?: AbortSignalLike,\n    timeoutInMs?: number,\n  ): Promise<ConnectCallEventResult>;\n}\n\n/** The response payload for getting participants of the call. */\nexport interface ListParticipantsResult {\n  /** List of the current participants in the call. */\n  values?: CallParticipant[];\n  /** Continue of the list of participants */\n  nextLink?: string;\n}\n\n/** The response payload for adding participants to the call. */\nexport interface AddParticipantResult {\n  /** invitation ID used to add the participant. */\n  invitationId?: string;\n  /** List of current participants in the call. */\n  participant?: CallParticipant;\n  /** The operation context provided by client. */\n  operationContext?: string;\n  /** Waiting for event processor to process the event */\n  waitForEventProcessor(\n    abortSignal?: AbortSignalLike,\n    timeoutInMs?: number,\n  ): Promise<AddParticipantEventResult>;\n}\n\n/** The response payload for transferring the call. */\nexport interface TransferCallResult {\n  /** The operation context provided by client. */\n  operationContext?: string;\n  /** Waiting for event processor to process the event */\n  waitForEventProcessor(\n    abortSignal?: AbortSignalLike,\n    timeoutInMs?: number,\n  ): Promise<TransferCallToParticipantEventResult>;\n}\n\n/** The response payload for removing participants from the call. */\nexport interface RemoveParticipantResult {\n  /** The operation context provided by client. */\n  operationContext?: string;\n  /** Waiting for event processor to process the event */\n  waitForEventProcessor(\n    abortSignal?: AbortSignalLike,\n    timeoutInMs?: number,\n  ): Promise<RemoveParticipantEventResult>;\n}\n\n/** The response payload for muting participant from the call. */\nexport interface MuteParticipantResult {\n  /** The operation context provided by client. */\n  operationContext?: string;\n}\n\n/** The response payload for starting a call recording or getting call recording state. */\nexport interface RecordingStateResult {\n  recordingId: string;\n  recordingKind: string;\n  recordingState: RecordingState;\n}\n\n/** The response payload for starting a call recording or getting call recording state. */\nexport interface CancelAllMediaOperationsResult {\n  /** Waiting for event processor to process the event */\n  waitForEventProcessor(\n    abortSignal?: AbortSignalLike,\n    timeoutInMs?: number,\n  ): Promise<CancelAllMediaOperationsEventResult>;\n}\n\n/** The response from play. */\nexport interface PlayResult {\n  /** Waiting for event processor to process the event */\n  waitForEventProcessor(\n    abortSignal?: AbortSignalLike,\n    timeoutInMs?: number,\n  ): Promise<PlayEventResult>;\n}\n\n/** The response payload for sending DTMF tones. */\nexport interface SendDtmfTonesResult {\n  /** The operation context provided by client. */\n  operationContext?: string;\n  /** Waiting for event processor to process the event */\n  waitForEventProcessor(\n    abortSignal?: AbortSignalLike,\n    timeoutInMs?: number,\n  ): Promise<SendDtmfEventResult>;\n}\n\n/** The response from recognizing. */\nexport interface StartRecognizingResult {\n  /** Waiting for event processor to process the event */\n  waitForEventProcessor(\n    abortSignal?: AbortSignalLike,\n    timeoutInMs?: number,\n  ): Promise<StartRecognizingEventResult>;\n}\n\n/** The response payload for cancelling add participant request. */\nexport interface CancelAddParticipantOperationResult {\n  /** the invitation ID used to cancel the add participant request. */\n  invitationId?: string;\n  /** The operation context provided by client. */\n  operationContext?: string;\n  /** Waiting for event processor to process the event */\n  waitForEventProcessor(\n    abortSignal?: AbortSignalLike,\n    timeoutInMs?: number,\n  ): Promise<CancelAddParticipantEventResult>;\n}\n"]}