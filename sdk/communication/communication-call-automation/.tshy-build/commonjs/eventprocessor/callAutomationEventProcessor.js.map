{"version":3,"file":"callAutomationEventProcessor.js","sourceRoot":"","sources":["../../../src/eventprocessor/callAutomationEventProcessor.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAElC,mCAAsC;AAEtC,kFAA2E;AAG3E;;GAEG;AACH,MAAa,4BAA4B;IAAzC;QACmB,mBAAc,GAAG,MAAM,CAAC,CAAC,8BAA8B;QACvD,+BAA0B,GAAG,IAAI,CAAC,CAAC,4BAA4B;QAC/D,YAAO,GAAG,IAAI,qBAAY,EAAE,CAAC;QAC7B,kBAAa,GAA+B,EAAE,CAAC;QAC/C,kBAAa,GAAqB,IAAI,GAAG,EAAE,CAAC;IAuJ/D,CAAC;IArJC;;;OAGG;IACI,aAAa,CAAC,KAA6D;QAChF,IAAI,KAAK,EAAE,CAAC;YACV,IAAI,mBAAwC,CAAC;YAC7C,wCAAwC;YACxC,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;gBACtD,mBAAmB,GAAG,IAAA,uDAAwB,EAC3C,KAAgB,IAAK,KAAiC,CACxD,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,mBAAmB,GAAG,KAA4B,CAAC;YACrD,CAAC;YAED,sBAAsB;YACtB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAC7C,UAAU,CAAC,GAAG,EAAE;gBACd,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;gBAC9D,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE,CAAC;oBACjB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBACtC,CAAC;YACH,CAAC,EAAE,IAAI,CAAC,0BAA0B,CAAC,CAAC;YAEpC,wBAAwB;YACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;YAEhD,mEAAmE;YACnE,IAAI,mBAAmB,CAAC,IAAI,KAAK,kBAAkB,EAAE,CAAC;gBACpD,gCAAgC;gBAChC,KAAK,MAAM,CAAC,GAAG,EAAE,WAAW,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC;oBAC9D,IAAI,GAAG,CAAC,QAAQ,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,EAAE,CAAC;wBACvD,gCAAgC;wBAChC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;wBAC/B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;oBACzC,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,qBAAqB,CAChC,SAAkD,EAClD,WAA6B,EAC7B,WAAoB;QAEpB,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;QACzC,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC;QACpC,CAAC;QAED,MAAM,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9E,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC9B,yDAAyD;YACzD,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,cAAc,CAAC,CAAC;YAC3E,OAAO,cAAc,CAAC,CAAC,CAAC,CAAC;QAC3B,CAAC;QAED,mCAAmC;QACnC,IAAI,YAAkD,CAAC;QAEvD,MAAM,YAAY,GAAG,IAAI,OAAO,CAAsB,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACxE,mBAAmB;YACnB,IAAI,WAAW,EAAE,CAAC;gBAChB,uEAAuE;gBACvE,WAAW,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE;oBACzC,UAAU,CAAC,KAAK,EAAE,CAAC;oBACnB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;oBACxC,MAAM,CAAC,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC;gBACrD,CAAC,CAAC,CAAC;YACL,CAAC;YAED,6BAA6B;YAC7B,MAAM,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC5B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;gBACxC,MAAM,CAAC,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC,CAAC;YAC9E,CAAC,EAAE,WAAW,CAAC,CAAC;YAEhB,YAAY,GAAG,CAAC,KAA0B,EAAE,EAAE;gBAC5C,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC;oBACrB,0CAA0C;oBAC1C,YAAY,CAAC,KAAK,CAAC,CAAC;oBACpB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;oBAExC,kCAAkC;oBAClC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACjB,CAAC;YACH,CAAC,CAAC;YAEF,6BAA6B;YAC7B,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC;IACtB,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,2BAA2B,CACtC,gBAAwB,EACxB,aAA0C,EAC1C,cAA6D;QAE7D,MAAM,YAAY,GAAG,CAAC,KAA0B,EAAQ,EAAE;YACxD,IAAI,KAAK,CAAC,gBAAgB,KAAK,gBAAgB,IAAI,KAAK,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;gBAChF,cAAc,CAAC,KAAK,CAAC,CAAC;YACxB,CAAC;QACH,CAAC,CAAC;QACF,6BAA6B;QAC7B,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAEvC,gDAAgD;QAChD,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;QACzE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;IACjD,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,2BAA2B,CACtC,gBAAwB,EACxB,aAA0C;QAE1C,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;QACzE,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAE/C,IAAI,KAAK,EAAE,CAAC;YACV,gCAAgC;YAChC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACpC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAEO,iBAAiB,CAAC,gBAAwB,EAAE,SAAiB;QACnE,OAAO,GAAG,gBAAgB,IAAI,SAAS,EAAE,CAAC;IAC5C,CAAC;CACF;AA5JD,oEA4JC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { EventEmitter } from \"events\";\nimport type { CallAutomationEvent } from \"../models/events.js\";\nimport { parseCallAutomationEvent } from \"../callAutomationEventParser.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\n\n/**\n * Call Automation's EventProcessor for incoming events for ease of use.\n */\nexport class CallAutomationEventProcessor {\n  private readonly defaultTimeout = 240000; // 240 seconds in milliseconds\n  private readonly defaultEventBacklogTimeout = 5000; // 5 seconds in milliseconds\n  private readonly emitter = new EventEmitter();\n  private readonly eventsBacklog: Array<CallAutomationEvent> = [];\n  private readonly ongoingEvents: Map<string, any> = new Map();\n\n  /**\n   * Process incoming events. Pass incoming events to get it processed to have other method like WaitForEventProcessor to function.\n   * @param event - Incoming CloudEvent object.\n   */\n  public processEvents(event: string | Record<string, unknown> | CallAutomationEvent): void {\n    if (event) {\n      let callAutomationEvent: CallAutomationEvent;\n      // parse the event if not parsed already\n      if (typeof event === \"string\" || Array.isArray(event)) {\n        callAutomationEvent = parseCallAutomationEvent(\n          (event as string) || (event as Record<string, unknown>),\n        );\n      } else {\n        callAutomationEvent = event as CallAutomationEvent;\n      }\n\n      // add to eventbacklog\n      this.eventsBacklog.push(callAutomationEvent);\n      setTimeout(() => {\n        const index = this.eventsBacklog.indexOf(callAutomationEvent);\n        if (index !== -1) {\n          this.eventsBacklog.splice(index, 1);\n        }\n      }, this.defaultEventBacklogTimeout);\n\n      // parse event if needed\n      this.emitter.emit(\"event\", callAutomationEvent);\n\n      // check if event is disconnect, remove all related items in memory\n      if (callAutomationEvent.kind === \"CallDisconnected\") {\n        // remove from ongoingevent list\n        for (const [key, evProcessor] of this.ongoingEvents.entries()) {\n          if (key.includes(callAutomationEvent.callConnectionId)) {\n            // Deregister the event listener\n            this.ongoingEvents.delete(key);\n            this.emitter.off(\"event\", evProcessor);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Wait for matching incoming event. This is blocking Call. Returns the CallAutomationEvent once it arrives in ProcessEvent method.\n   * @param predicate - Conditional Predicate for waiting on event.\n   * @param abortSignal - Abort signal to abort the operation.\n   * @param timeoutInMs - maximum timeout in milliseconds for the operation.\n   */\n  public async waitForEventProcessor(\n    predicate: (event: CallAutomationEvent) => boolean,\n    abortSignal?: AbortSignalLike,\n    timeoutInMs?: number,\n  ): Promise<CallAutomationEvent> {\n    const controller = new AbortController();\n    if (!timeoutInMs) {\n      timeoutInMs = this.defaultTimeout;\n    }\n\n    const filteredEvents = this.eventsBacklog.filter((event) => predicate(event));\n    if (filteredEvents.length > 0) {\n      // item found - delete from the list and return the event\n      this.eventsBacklog.splice(0, this.eventsBacklog.length, ...filteredEvents);\n      return filteredEvents[0];\n    }\n\n    // await for this event to comeback\n    let eventAwaiter: (event: CallAutomationEvent) => void;\n\n    const eventPromise = new Promise<CallAutomationEvent>((resolve, reject) => {\n      // set abort signal\n      if (abortSignal) {\n        // If an external abortSignal is provided, link it with the controller.\n        abortSignal.addEventListener(\"abort\", () => {\n          controller.abort();\n          this.emitter.off(\"event\", eventAwaiter);\n          reject(new Error(\"Abort: Operation was aborted.\"));\n        });\n      }\n\n      // set timeout for this event\n      const timer = setTimeout(() => {\n        this.emitter.off(\"event\", eventAwaiter);\n        reject(new Error(\"Timeout: Matching event did not arrive within timeout.\"));\n      }, timeoutInMs);\n\n      eventAwaiter = (event: CallAutomationEvent) => {\n        if (predicate(event)) {\n          // Deregister timer and the event listener\n          clearTimeout(timer);\n          this.emitter.off(\"event\", eventAwaiter);\n\n          // Resolve with the matching event\n          resolve(event);\n        }\n      };\n\n      // Register the event awaiter\n      this.emitter.on(\"event\", eventAwaiter);\n    });\n\n    return eventPromise;\n  }\n\n  /**\n   * Attach Ongoing EventProcessor for specific event for a call.\n   * @param eventTypeKind - Matching event.\n   * @param callConnectionId - CallConnectionId of the call.\n   * @param eventProcessor - Method that will execute once the matching event arrives.\n   */\n  public async attachOngoingEventProcessor(\n    callConnectionId: string,\n    eventTypeKind: CallAutomationEvent[\"kind\"],\n    eventProcessor: (event: CallAutomationEvent) => Promise<void>,\n  ): Promise<void> {\n    const eventAwaiter = (event: CallAutomationEvent): void => {\n      if (event.callConnectionId === callConnectionId && event.kind === eventTypeKind) {\n        eventProcessor(event);\n      }\n    };\n    // Register the event awaiter\n    this.emitter.on(\"event\", eventAwaiter);\n\n    // attach the ongoing event processor to the map\n    const uniqueId = this.generateIdTypeKey(callConnectionId, eventTypeKind);\n    this.ongoingEvents.set(uniqueId, eventAwaiter);\n  }\n\n  /**\n   * Detach Ongoing EventProcessor for specific event.\n   * @param eventTypeKind - Matching event.\n   * @param callConnectionId - CallConnectionId of the call.\n   */\n  public async detachOngoingEventProcessor(\n    callConnectionId: string,\n    eventTypeKind: CallAutomationEvent[\"kind\"],\n  ): Promise<void> {\n    const uniqueId = this.generateIdTypeKey(callConnectionId, eventTypeKind);\n    const value = this.ongoingEvents.get(uniqueId);\n\n    if (value) {\n      // Deregister the event listener\n      this.ongoingEvents.delete(uniqueId);\n      this.emitter.off(\"event\", value);\n    }\n  }\n\n  private generateIdTypeKey(callConnectionId: string, eventType: string): string {\n    return `${callConnectionId}:${eventType}`;\n  }\n}\n"]}