{"version":3,"file":"contentDownloader.js","sourceRoot":"","sources":["../../src/contentDownloader.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { CallAutomationApiClient } from \"./generated/src/callAutomationApiClient.js\";\nimport type {\n  AddPipelineOptions,\n  PipelineRequest,\n  PipelineRequestOptions,\n  PipelineResponse,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport type { DeleteRecordingOptions, DownloadRecordingOptions } from \"./models/options.js\";\n\n/** Class containing ContentDownloading operations. */\nexport class ContentDownloaderImpl {\n  private readonly client: CallAutomationApiClient;\n\n  /**\n   * Initialize a new instance of the class ContentDownloader class.\n   * @param client - Reference to the service client\n   */\n  constructor(client: CallAutomationApiClient) {\n    this.client = client;\n    this.addCustomSignUrlPolicy();\n  }\n\n  private addCustomSignUrlPolicy(): void {\n    const signUrlPolicy = {\n      name: \"CustomSignUrlPolicy\",\n      async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n        if (request.headers.has(\"OriginalUrl\")) {\n          request.url = `${request.headers.get(\"OriginalUrl\")}`;\n          const originalRequest = new URL(request.url);\n          request.headers.set(\"Host\", originalRequest.host);\n        }\n        return next(request);\n      },\n    };\n\n    const pipelineOptions: AddPipelineOptions = {};\n    pipelineOptions.afterPhase = \"Sign\";\n    this.client.pipeline.addPolicy(signUrlPolicy, pipelineOptions);\n  }\n\n  /**\n   * Deletes a recording.\n   * @param deleteLocationUrl - The recording location url. Required.\n   */\n  async deleteRecording(deleteLocationUrl: string, options: DeleteRecordingOptions): Promise<void> {\n    const fileLocation = new URL(deleteLocationUrl);\n    const endpoint = new URL(this.client.endpoint);\n    const modifiedUrlForSigning = endpoint.origin + fileLocation.pathname;\n\n    const opt: PipelineRequestOptions = {\n      url: modifiedUrlForSigning,\n      method: \"DELETE\",\n      headers: createHttpHeaders(),\n      body: \"\",\n      abortSignal: options?.abortSignal,\n      tracingOptions: options?.tracingOptions,\n    };\n\n    opt.headers?.set(\"OriginalUrl\", deleteLocationUrl);\n    opt.headers?.set(\"x-ms-host\", endpoint.host);\n    opt.headers?.set(\"accept\", \"application/json\");\n\n    const req = createPipelineRequest(opt);\n\n    const results = await this.client.sendRequest(req);\n\n    if (results.status !== 200) {\n      if (results.bodyAsText) {\n        const jsonBody = JSON.parse(results.bodyAsText);\n        throw { status: jsonBody.status, message: jsonBody.message };\n      }\n      throw { status: results.status };\n    }\n  }\n\n  /**\n   * Returns a stream with a call recording.\n   * @param sourceLocationUrl - The source location url. Required.\n   * @param options - Additional request options contains downloadRecording options.\n   */\n  async download(\n    sourceLocationUrl: string,\n    options: DownloadRecordingOptions,\n  ): Promise<PipelineResponse> {\n    const fileLocation = new URL(sourceLocationUrl);\n    const endpoint = new URL(this.client.endpoint);\n    const modifiedUrlForSigning = endpoint.origin + fileLocation.pathname;\n\n    const opt: PipelineRequestOptions = {\n      url: modifiedUrlForSigning,\n      method: \"GET\",\n      headers: createHttpHeaders(),\n      body: \"\",\n      streamResponseStatusCodes: new Set([200, 206]),\n      abortSignal: options.abortSignal,\n      tracingOptions: options?.tracingOptions,\n    };\n\n    if (options.length && !options.offset) {\n      throw Error(\"Download offset value must not be empty if length is set.\");\n    } else if (options.length && options.offset) {\n      options.length = options.offset + options.length - 1;\n    }\n\n    let rangeHeader = \"bytes=\" + options.offset;\n    if (options.length) rangeHeader += \"-\" + options.length;\n\n    opt.headers?.set(\"OriginalUrl\", sourceLocationUrl);\n    opt.headers?.set(\"x-ms-host\", endpoint.host);\n    opt.headers?.set(\"accept\", \"application/json\");\n    opt.headers?.set(\"Range\", rangeHeader);\n\n    const req = createPipelineRequest(opt);\n\n    const results = await this.client.sendRequest(req);\n\n    if (results.status !== 200 && results.status !== 206) {\n      if (results.bodyAsText) {\n        const jsonBody = JSON.parse(results.bodyAsText);\n        throw { status: jsonBody.status, message: jsonBody.message };\n      }\n      throw { status: results.status };\n    }\n    return results;\n  }\n}\n"]}