/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { VerifyDomainOwnership } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DomainVerificationClientContext } from "../domainVerificationClientContext";
import {
  ChallengeType,
  VerifyDomainOwnershipPostOptionalParams,
  VerifyDomainOwnershipPostResponse
} from "../models";

/** Class containing VerifyDomainOwnership operations. */
export class VerifyDomainOwnershipImpl implements VerifyDomainOwnership {
  private readonly client: DomainVerificationClientContext;

  /**
   * Initialize a new instance of the class VerifyDomainOwnership class.
   * @param client Reference to the service client
   */
  constructor(client: DomainVerificationClientContext) {
    this.client = client;
  }

  /**
   * Verify domain by testing the challenge for given domain
   * @param domain Verified Domain
   * @param challengeType Type of domain verification challenge
   * @param options The options parameters.
   */
  post(
    domain: string,
    challengeType: ChallengeType,
    options?: VerifyDomainOwnershipPostOptionalParams
  ): Promise<VerifyDomainOwnershipPostResponse> {
    return this.client.sendOperationRequest(
      { domain, challengeType, options },
      postOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const postOperationSpec: coreClient.OperationSpec = {
  path: "/sip:verifyDomainOwnership",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DomainOwnership,
      headersMapper: Mappers.VerifyDomainOwnershipPostHeaders
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.VerifyDomainOwnershipPostExceptionHeaders
    }
  },
  requestBody: {
    parameterPath: { domain: ["domain"], challengeType: ["challengeType"] },
    mapper: { ...Mappers.DomainOwnershipVerificationRequest, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
