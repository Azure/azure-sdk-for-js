/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/smsMappers";
import * as Parameters from "../models/parameters";
import { SmsApiClientContext } from "../smsApiClientContext";

/** Class representing a Sms. */
export class Sms {
  private readonly client: SmsApiClientContext;

  /**
   * Create a Sms.
   * @param {SmsApiClientContext} client Reference to the service client.
   */
  constructor(client: SmsApiClientContext) {
    this.client = client;
  }

  /**
   * @summary Sends a SMS message from a phone number that belongs to the authenticated account.
   * @param sendMessageRequest Represents the body of the send message request.
   * @param apiVersion Version of API to invoke.
   * @param [options] The optional parameters
   * @returns Promise<Models.SmsSendResponse>
   */
  send(sendMessageRequest: Models.SendMessageRequest, apiVersion: string, options?: Models.SmsSendOptionalParams): Promise<Models.SmsSendResponse>;
  /**
   * @param sendMessageRequest Represents the body of the send message request.
   * @param apiVersion Version of API to invoke.
   * @param callback The callback
   */
  send(sendMessageRequest: Models.SendMessageRequest, apiVersion: string, callback: coreHttp.ServiceCallback<Models.SendSmsResponse>): void;
  /**
   * @param sendMessageRequest Represents the body of the send message request.
   * @param apiVersion Version of API to invoke.
   * @param options The optional parameters
   * @param callback The callback
   */
  send(sendMessageRequest: Models.SendMessageRequest, apiVersion: string, options: Models.SmsSendOptionalParams, callback: coreHttp.ServiceCallback<Models.SendSmsResponse>): void;
  send(sendMessageRequest: Models.SendMessageRequest, apiVersion: string, options?: Models.SmsSendOptionalParams | coreHttp.ServiceCallback<Models.SendSmsResponse>, callback?: coreHttp.ServiceCallback<Models.SendSmsResponse>): Promise<Models.SmsSendResponse> {
    return this.client.sendOperationRequest(
      {
        sendMessageRequest,
        apiVersion,
        options
      },
      sendOperationSpec,
      callback) as Promise<Models.SmsSendResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const sendOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "sms",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.repeatabilityRequestId,
    Parameters.repeatabilityFirstSent
  ],
  requestBody: {
    parameterPath: "sendMessageRequest",
    mapper: {
      ...Mappers.SendMessageRequest,
      required: true
    }
  },
  responses: {
    202: {
      bodyMapper: Mappers.SendSmsResponse,
      headersMapper: Mappers.SmsSendHeaders
    },
    default: {}
  },
  serializer
};
