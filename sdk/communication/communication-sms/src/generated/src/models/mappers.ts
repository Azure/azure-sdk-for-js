/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const SendMessageRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SendMessageRequest",
    modelProperties: {
      from: {
        serializedName: "from",
        required: true,
        type: {
          name: "String",
        },
      },
      smsRecipients: {
        serializedName: "smsRecipients",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SmsRecipient",
            },
          },
        },
      },
      message: {
        constraints: {
          MaxLength: 2048,
        },
        serializedName: "message",
        required: true,
        type: {
          name: "String",
        },
      },
      smsSendOptions: {
        serializedName: "smsSendOptions",
        type: {
          name: "Composite",
          className: "SmsSendOptions",
        },
      },
    },
  },
};

export const SmsRecipient: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SmsRecipient",
    modelProperties: {
      to: {
        serializedName: "to",
        required: true,
        type: {
          name: "String",
        },
      },
      repeatabilityRequestId: {
        serializedName: "repeatabilityRequestId",
        type: {
          name: "String",
        },
      },
      repeatabilityFirstSent: {
        serializedName: "repeatabilityFirstSent",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SmsSendOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SmsSendOptions",
    modelProperties: {
      enableDeliveryReport: {
        serializedName: "enableDeliveryReport",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      tag: {
        serializedName: "tag",
        type: {
          name: "String",
        },
      },
      deliveryReportTimeoutInSeconds: {
        constraints: {
          InclusiveMaximum: 43200,
          InclusiveMinimum: 60,
        },
        serializedName: "deliveryReportTimeoutInSeconds",
        type: {
          name: "Number",
        },
      },
      messagingConnect: {
        serializedName: "messagingConnect",
        type: {
          name: "Composite",
          className: "MessagingConnectOptions",
        },
      },
    },
  },
};

export const MessagingConnectOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MessagingConnectOptions",
    modelProperties: {
      apiKey: {
        serializedName: "apiKey",
        required: true,
        type: {
          name: "String",
        },
      },
      partner: {
        serializedName: "partner",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SmsSendResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SmsSendResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SmsSendResponseItem",
            },
          },
        },
      },
    },
  },
};

export const SmsSendResponseItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SmsSendResponseItem",
    modelProperties: {
      to: {
        serializedName: "to",
        required: true,
        type: {
          name: "String",
        },
      },
      messageId: {
        serializedName: "messageId",
        type: {
          name: "String",
        },
      },
      httpStatusCode: {
        serializedName: "httpStatusCode",
        required: true,
        type: {
          name: "Number",
        },
      },
      repeatabilityResult: {
        serializedName: "repeatabilityResult",
        type: {
          name: "String",
        },
      },
      successful: {
        serializedName: "successful",
        required: true,
        type: {
          name: "Boolean",
        },
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OptOutRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptOutRequest",
    modelProperties: {
      from: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "from",
        required: true,
        type: {
          name: "String",
        },
      },
      recipients: {
        constraints: {
          MinItems: 1,
          MaxItems: 100,
        },
        serializedName: "recipients",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OptOutRecipient",
            },
          },
        },
      },
    },
  },
};

export const OptOutRecipient: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptOutRecipient",
    modelProperties: {
      to: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "to",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const OptOutResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptOutResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OptOutResponseItem",
            },
          },
        },
      },
    },
  },
};

export const OptOutResponseItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptOutResponseItem",
    modelProperties: {
      to: {
        constraints: {
          MinLength: 1,
        },
        serializedName: "to",
        required: true,
        type: {
          name: "String",
        },
      },
      httpStatusCode: {
        serializedName: "httpStatusCode",
        required: true,
        type: {
          name: "Number",
        },
      },
      isOptedOut: {
        serializedName: "isOptedOut",
        type: {
          name: "Boolean",
        },
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DeliveryReport: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeliveryReport",
    modelProperties: {
      deliveryStatus: {
        serializedName: "deliveryStatus",
        required: true,
        type: {
          name: "String",
        },
      },
      deliveryStatusDetails: {
        serializedName: "deliveryStatusDetails",
        type: {
          name: "String",
        },
      },
      deliveryAttempts: {
        serializedName: "deliveryAttempts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeliveryAttempt",
            },
          },
        },
      },
      receivedTimestamp: {
        serializedName: "receivedTimestamp",
        type: {
          name: "DateTime",
        },
      },
      tag: {
        serializedName: "tag",
        type: {
          name: "String",
        },
      },
      messageId: {
        serializedName: "messageId",
        required: true,
        type: {
          name: "String",
        },
      },
      from: {
        serializedName: "from",
        required: true,
        type: {
          name: "String",
        },
      },
      to: {
        serializedName: "to",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const DeliveryAttempt: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeliveryAttempt",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        required: true,
        type: {
          name: "DateTime",
        },
      },
      segmentsSucceeded: {
        constraints: {
          InclusiveMinimum: 0,
        },
        serializedName: "segmentsSucceeded",
        required: true,
        type: {
          name: "Number",
        },
      },
      segmentsFailed: {
        constraints: {
          InclusiveMinimum: 0,
        },
        serializedName: "segmentsFailed",
        required: true,
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      title: {
        serializedName: "title",
        required: true,
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "Number",
        },
      },
      traceId: {
        serializedName: "traceId",
        type: {
          name: "String",
        },
      },
    },
  },
};
