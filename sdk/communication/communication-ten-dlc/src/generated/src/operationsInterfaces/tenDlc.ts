/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  USBrand,
  TenDlcGetUSBrandsOptionalParams,
  USCampaign,
  TenDlcGetUSCampaignsOptionalParams,
  TenDlcCost,
  TenDlcGetCostsOptionalParams,
  TenDlcUpsertUSBrandOptionalParams,
  TenDlcUpsertUSBrandResponse,
  TenDlcDeleteUSBrandOptionalParams,
  TenDlcGetUSBrandOptionalParams,
  TenDlcGetUSBrandResponse,
  TenDlcSubmitUSBrandOptionalParams,
  TenDlcSubmitUSBrandResponse,
  TenDlcCancelUSBrandOptionalParams,
  TenDlcCancelUSBrandResponse,
  TenDlcUpsertUSCampaignOptionalParams,
  TenDlcUpsertUSCampaignResponse,
  TenDlcDeleteUSCampaignOptionalParams,
  TenDlcGetUSCampaignOptionalParams,
  TenDlcGetUSCampaignResponse,
  TenDlcSubmitUSCampaignOptionalParams,
  TenDlcSubmitUSCampaignResponse,
  TenDlcCancelUSCampaignOptionalParams,
  TenDlcCancelUSCampaignResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a TenDlc. */
export interface TenDlc {
  /** @param options The options parameters. */
  listUSBrands(
    options?: TenDlcGetUSBrandsOptionalParams
  ): PagedAsyncIterableIterator<USBrand>;
  /** @param options The options parameters. */
  listUSCampaigns(
    options?: TenDlcGetUSCampaignsOptionalParams
  ): PagedAsyncIterableIterator<USCampaign>;
  /**
   * This method supports pagination via the "skip" and "top" query parameters.
   * @param options The options parameters.
   */
  listCosts(
    options?: TenDlcGetCostsOptionalParams
  ): PagedAsyncIterableIterator<TenDlcCost>;
  /**
   * @param brandId
   * @param id Unique identifier that corresponds to a brand
   * @param options The options parameters.
   */
  upsertUSBrand(
    brandId: string,
    id: string,
    options?: TenDlcUpsertUSBrandOptionalParams
  ): Promise<TenDlcUpsertUSBrandResponse>;
  /**
   * @param brandId
   * @param options The options parameters.
   */
  deleteUSBrand(
    brandId: string,
    options?: TenDlcDeleteUSBrandOptionalParams
  ): Promise<void>;
  /**
   * @param brandId
   * @param options The options parameters.
   */
  getUSBrand(
    brandId: string,
    options?: TenDlcGetUSBrandOptionalParams
  ): Promise<TenDlcGetUSBrandResponse>;
  /**
   * @param brandId
   * @param options The options parameters.
   */
  submitUSBrand(
    brandId: string,
    options?: TenDlcSubmitUSBrandOptionalParams
  ): Promise<TenDlcSubmitUSBrandResponse>;
  /**
   * @param brandId
   * @param options The options parameters.
   */
  cancelUSBrand(
    brandId: string,
    options?: TenDlcCancelUSBrandOptionalParams
  ): Promise<TenDlcCancelUSBrandResponse>;
  /**
   * @param campaignId
   * @param id Unique identifier that corresponds to a campaign
   * @param options The options parameters.
   */
  upsertUSCampaign(
    campaignId: string,
    id: string,
    options?: TenDlcUpsertUSCampaignOptionalParams
  ): Promise<TenDlcUpsertUSCampaignResponse>;
  /**
   * @param campaignId
   * @param options The options parameters.
   */
  deleteUSCampaign(
    campaignId: string,
    options?: TenDlcDeleteUSCampaignOptionalParams
  ): Promise<void>;
  /**
   * @param campaignId
   * @param options The options parameters.
   */
  getUSCampaign(
    campaignId: string,
    options?: TenDlcGetUSCampaignOptionalParams
  ): Promise<TenDlcGetUSCampaignResponse>;
  /**
   * @param campaignId
   * @param options The options parameters.
   */
  submitUSCampaign(
    campaignId: string,
    options?: TenDlcSubmitUSCampaignOptionalParams
  ): Promise<TenDlcSubmitUSCampaignResponse>;
  /**
   * @param campaignId
   * @param options The options parameters.
   */
  cancelUSCampaign(
    campaignId: string,
    options?: TenDlcCancelUSCampaignOptionalParams
  ): Promise<TenDlcCancelUSCampaignResponse>;
}
