/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  USBrand,
  TenDlcGetUSBrandsOptionalParams,
  USCampaign,
  TenDlcGetUSCampaignsOptionalParams,
  CampaignAttachment,
  TenDlcGetUSCampaignAttachmentsOptionalParams,
  TenDlcCost,
  TenDlcGetCostsOptionalParams,
  TenDlcUpsertUSBrandOptionalParams,
  TenDlcUpsertUSBrandResponse,
  TenDlcDeleteUSBrandOptionalParams,
  TenDlcGetUSBrandOptionalParams,
  TenDlcGetUSBrandResponse,
  TenDlcSubmitUSBrandOptionalParams,
  TenDlcSubmitUSBrandResponse,
  TenDlcCancelUSBrandOptionalParams,
  TenDlcCancelUSBrandResponse,
  TenDlcSubmitUSBrandForVettingOptionalParams,
  TenDlcSubmitUSBrandForVettingResponse,
  TenDlcUpsertUSCampaignOptionalParams,
  TenDlcUpsertUSCampaignResponse,
  TenDlcDeleteUSCampaignOptionalParams,
  TenDlcGetUSCampaignOptionalParams,
  TenDlcGetUSCampaignResponse,
  TenDlcSubmitUSCampaignOptionalParams,
  TenDlcSubmitUSCampaignResponse,
  TenDlcCancelUSCampaignOptionalParams,
  TenDlcCancelUSCampaignResponse,
  AttachmentType,
  FileType,
  TenDlcPutUSCampaignAttachmentOptionalParams,
  TenDlcPutUSCampaignAttachmentResponse,
  TenDlcGetUSCampaignAttachmentOptionalParams,
  TenDlcGetUSCampaignAttachmentResponse,
  TenDlcDeleteUSCampaignAttachmentOptionalParams,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a TenDlc. */
export interface TenDlc {
  /** @param options The options parameters. */
  listUSBrands(
    options?: TenDlcGetUSBrandsOptionalParams,
  ): PagedAsyncIterableIterator<USBrand>;
  /** @param options The options parameters. */
  listUSCampaigns(
    options?: TenDlcGetUSCampaignsOptionalParams,
  ): PagedAsyncIterableIterator<USCampaign>;
  /**
   * Gets the list of attachments from a 10DLC US Campaign Brief.
   * @param campaignId
   * @param options The options parameters.
   */
  listUSCampaignAttachments(
    campaignId: string,
    options?: TenDlcGetUSCampaignAttachmentsOptionalParams,
  ): PagedAsyncIterableIterator<CampaignAttachment>;
  /**
   * This method supports pagination via the "skip" and "top" query parameters.
   * @param options The options parameters.
   */
  listCosts(
    options?: TenDlcGetCostsOptionalParams,
  ): PagedAsyncIterableIterator<TenDlcCost>;
  /**
   * @param brandId
   * @param id Unique identifier that corresponds to a brand
   * @param options The options parameters.
   */
  upsertUSBrand(
    brandId: string,
    id: string,
    options?: TenDlcUpsertUSBrandOptionalParams,
  ): Promise<TenDlcUpsertUSBrandResponse>;
  /**
   * @param brandId
   * @param options The options parameters.
   */
  deleteUSBrand(
    brandId: string,
    options?: TenDlcDeleteUSBrandOptionalParams,
  ): Promise<void>;
  /**
   * @param brandId
   * @param options The options parameters.
   */
  getUSBrand(
    brandId: string,
    options?: TenDlcGetUSBrandOptionalParams,
  ): Promise<TenDlcGetUSBrandResponse>;
  /**
   * @param brandId
   * @param options The options parameters.
   */
  submitUSBrand(
    brandId: string,
    options?: TenDlcSubmitUSBrandOptionalParams,
  ): Promise<TenDlcSubmitUSBrandResponse>;
  /**
   * @param brandId
   * @param options The options parameters.
   */
  cancelUSBrand(
    brandId: string,
    options?: TenDlcCancelUSBrandOptionalParams,
  ): Promise<TenDlcCancelUSBrandResponse>;
  /**
   * @param brandId
   * @param options The options parameters.
   */
  submitUSBrandForVetting(
    brandId: string,
    options?: TenDlcSubmitUSBrandForVettingOptionalParams,
  ): Promise<TenDlcSubmitUSBrandForVettingResponse>;
  /**
   * @param campaignId
   * @param options The options parameters.
   */
  upsertUSCampaign(
    campaignId: string,
    options?: TenDlcUpsertUSCampaignOptionalParams,
  ): Promise<TenDlcUpsertUSCampaignResponse>;
  /**
   * @param campaignId
   * @param options The options parameters.
   */
  deleteUSCampaign(
    campaignId: string,
    options?: TenDlcDeleteUSCampaignOptionalParams,
  ): Promise<void>;
  /**
   * @param campaignId
   * @param options The options parameters.
   */
  getUSCampaign(
    campaignId: string,
    options?: TenDlcGetUSCampaignOptionalParams,
  ): Promise<TenDlcGetUSCampaignResponse>;
  /**
   * @param campaignId
   * @param options The options parameters.
   */
  submitUSCampaign(
    campaignId: string,
    options?: TenDlcSubmitUSCampaignOptionalParams,
  ): Promise<TenDlcSubmitUSCampaignResponse>;
  /**
   * @param campaignId
   * @param options The options parameters.
   */
  cancelUSCampaign(
    campaignId: string,
    options?: TenDlcCancelUSCampaignOptionalParams,
  ): Promise<TenDlcCancelUSCampaignResponse>;
  /**
   * Creates or replace an attachment on a 10DLC US Campaign Brief.
   * @param campaignId Campaign Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param id Program Brief Attachment Id.
   * @param typeParam Attachment type describing the purpose of the attachment
   *                  e.g. 'callToAction', 'termsOfService'
   * @param fileName The name of the file being attached
   *                 e.g. 'myFile01'
   * @param fileType The type of file being attached
   *                 e.g. 'pdf', 'jpg', 'png'
   * @param fileContentBase64 File content as base 64 encoded string
   * @param options The options parameters.
   */
  putUSCampaignAttachment(
    campaignId: string,
    attachmentId: string,
    id: string,
    typeParam: AttachmentType,
    fileName: string,
    fileType: FileType,
    fileContentBase64: string,
    options?: TenDlcPutUSCampaignAttachmentOptionalParams,
  ): Promise<TenDlcPutUSCampaignAttachmentResponse>;
  /**
   * Gets a specific attachment from a 10DLC US Campaign Brief.
   * @param campaignId Campaign Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param options The options parameters.
   */
  getUSCampaignAttachment(
    campaignId: string,
    attachmentId: string,
    options?: TenDlcGetUSCampaignAttachmentOptionalParams,
  ): Promise<TenDlcGetUSCampaignAttachmentResponse>;
  /**
   * Deletes a specific attachment from a 10DLC US Campaign Brief.
   * @param campaignId Campaign Brief Id. Must be a valid GUID
   * @param attachmentId Attachment Id. Must be a valid GUID
   * @param options The options parameters.
   */
  deleteUSCampaignAttachment(
    campaignId: string,
    attachmentId: string,
    options?: TenDlcDeleteUSCampaignAttachmentOptionalParams,
  ): Promise<void>;
}
