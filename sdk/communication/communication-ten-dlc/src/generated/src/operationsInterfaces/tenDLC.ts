/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  LocalNumberCost,
  TenDLCGetCostsOptionalParams,
  USBrand,
  TenDLCGetBrandsOptionalParams,
  USCampaign,
  TenDLCGetCampaignsOptionalParams,
  TenDLCCreateOrUpdateBrandOptionalParams,
  TenDLCCreateOrUpdateBrandResponse,
  TenDLCDeleteBrandOptionalParams,
  TenDLCGetBrandOptionalParams,
  TenDLCGetBrandResponse,
  TenDLCSubmitBrandOptionalParams,
  TenDLCSubmitBrandResponse,
  TenDLCCreateOrUpdateCampaignOptionalParams,
  TenDLCCreateOrUpdateCampaignResponse,
  TenDLCDeleteCampaignOptionalParams,
  TenDLCGetCampaignOptionalParams,
  TenDLCGetCampaignResponse,
  TenDLCSubmitCampaignOptionalParams,
  TenDLCSubmitCampaignResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a TenDLC. */
export interface TenDLC {
  /**
   * This method supports pagination via the "skip" and "top" query parameters.
   * @param options The options parameters.
   */
  listCosts(
    options?: TenDLCGetCostsOptionalParams
  ): PagedAsyncIterableIterator<LocalNumberCost>;
  /** @param options The options parameters. */
  listBrands(
    options?: TenDLCGetBrandsOptionalParams
  ): PagedAsyncIterableIterator<USBrand>;
  /** @param options The options parameters. */
  listCampaigns(
    options?: TenDLCGetCampaignsOptionalParams
  ): PagedAsyncIterableIterator<USCampaign>;
  /**
   * @param brandId
   * @param id Unique identifier that corresponds to a brand
   * @param options The options parameters.
   */
  createOrUpdateBrand(
    brandId: string,
    id: string,
    options?: TenDLCCreateOrUpdateBrandOptionalParams
  ): Promise<TenDLCCreateOrUpdateBrandResponse>;
  /**
   * @param brandId
   * @param options The options parameters.
   */
  deleteBrand(
    brandId: string,
    options?: TenDLCDeleteBrandOptionalParams
  ): Promise<void>;
  /**
   * @param brandId
   * @param options The options parameters.
   */
  getBrand(
    brandId: string,
    options?: TenDLCGetBrandOptionalParams
  ): Promise<TenDLCGetBrandResponse>;
  /**
   * @param brandId
   * @param options The options parameters.
   */
  submitBrand(
    brandId: string,
    options?: TenDLCSubmitBrandOptionalParams
  ): Promise<TenDLCSubmitBrandResponse>;
  /**
   * @param campaignId
   * @param id Unique identifier that corresponds to a campaign
   * @param options The options parameters.
   */
  createOrUpdateCampaign(
    campaignId: string,
    id: string,
    options?: TenDLCCreateOrUpdateCampaignOptionalParams
  ): Promise<TenDLCCreateOrUpdateCampaignResponse>;
  /**
   * @param campaignId
   * @param options The options parameters.
   */
  deleteCampaign(
    campaignId: string,
    options?: TenDLCDeleteCampaignOptionalParams
  ): Promise<void>;
  /**
   * @param campaignId
   * @param options The options parameters.
   */
  getCampaign(
    campaignId: string,
    options?: TenDLCGetCampaignOptionalParams
  ): Promise<TenDLCGetCampaignResponse>;
  /**
   * @param campaignId
   * @param options The options parameters.
   */
  submitCampaign(
    campaignId: string,
    options?: TenDLCSubmitCampaignOptionalParams
  ): Promise<TenDLCSubmitCampaignResponse>;
}
