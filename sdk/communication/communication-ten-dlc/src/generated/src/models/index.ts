/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export interface USBrand {
  /** Unique identifier that corresponds to a brand */
  id: string;
  /** Last date and time when the 10Dlc status was updated */
  statusUpdatedDate?: Date;
  /** 10 Dlc status e.g. 'submitted', 'approved', etc */
  status?: BrandStatus;
  /** Represents the costs tied to the brand */
  costs?: TenDlcCost[];
  /** Date and time when the 10DLC was submitted */
  submissionDate?: Date;
  /**
   * Notes added to the 10DLC Brand after being reviewed to help customer understand
   * review results and necessary follow up actions.
   */
  reviewNotes?: ReviewNote[];
  brandDetails?: BrandDetails;
}

/** The cost of a 10DLC Brand or Campaign */
export interface TenDlcCost {
  /** The type of cost. */
  type?: TenDlcCostType;
  /** The cost amount. */
  amount?: number;
  /** The ISO 4217 currency code for the cost amount, e.g. USD. */
  currencyCode?: string;
  /** The ISO 3166-2 code of the phone number's country, e.g. US. */
  countryCode?: string;
  /** The frequency with which the cost gets billed. */
  billingFrequency?: BillingFrequency;
}

/** Holds a note about a Program Brief that has gone thru stages of review process. */
export interface ReviewNote {
  /** Note related to a Brand or Campaign that may imply changes needed from the client. */
  message?: string;
  /** Date and time when the note was added to the Brand or Campaign. */
  date?: Date;
}

export interface BrandDetails {
  /** Gets or sets Name */
  name?: string;
  /** Gets or sets Company Name */
  companyName?: string;
  /** Category of companies motive/use case */
  companyVertical?: CompanyVertical;
  contactInformation?: ContactInformation;
  address?: Address;
  /** Legal structure or form a company takes */
  entityType?: EntityType;
  /** Marketplace where stocks, bonds, etc... are bought and sold */
  stockExchange?: StockExchange;
  /** Stock Exchange */
  stockSymbol?: string;
  /** Alternate Business Id Type */
  alternateBusinessIdType?: AlternateBusinessIdType;
  /** Alternate Business Id */
  alternateBusinessId?: string;
  /** Business Id that corresponds to your business */
  taxNumber?: string;
  /** Tax Issuing Country */
  taxNumberIssuingCountry?: string;
  /** URL */
  url?: string;
}

export interface ContactInformation {
  /** Contact phone number for the authorized user for the customer. Use E164 format. e.g. +14086111111 */
  phone?: string;
  /** Contact email address number for the authorized user for the customer */
  email?: string;
}

export interface Address {
  /** Address line 1 */
  line1?: string;
  /** Address line 2 */
  line2?: string;
  /** The City for US addresses, for example */
  city?: string;
  /** The State for US addresses, for example */
  state?: string;
  /** Postal code */
  postalCode?: string;
  /** Country */
  country?: string;
}

/** The Communication Services error. */
export interface CommunicationErrorResponse {
  /** The Communication Services error. */
  error: CommunicationError;
}

/** The Communication Services error. */
export interface CommunicationError {
  /** The error code. */
  code: string;
  /** The error message. */
  message: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * Further details about specific errors that led to this error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: CommunicationError[];
  /**
   * The inner error if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly innerError?: CommunicationError;
}

/** A wrapper for a list of USBrands. */
export interface USBrands {
  /** List of USBrands */
  brands?: USBrand[];
  /** Represents the URL link to the next page */
  nextLink?: string;
}

export interface USCampaign {
  /** Unique identifier that corresponds to a campaign */
  id: string;
  /** Unique identifier that corresponds to a brand */
  brandId?: string;
  /** 10 Dlc status e.g. 'submitted', 'approved', etc */
  status?: CampaignStatus;
  /** Last date and time when the 10DLC status was updated */
  statusUpdatedDate?: Date;
  /** Represents the costs tied to the campaign */
  costs?: TenDlcCost[];
  /** Date and time when the 10DLC was submitted */
  submissionDate?: Date;
  /**
   * Notes added to the 10DLC Campaign after being reviewed to help customer understand
   * review results and necessary follow up actions.
   */
  reviewNotes?: ReviewNote[];
  /** Count of local phone numbers currently associated to the 10DLC Campaign. */
  phoneNumberCount?: number;
  campaignDetails?: CampaignDetails;
  messageDetails?: MessageDetails;
}

export interface CampaignDetails {
  /** Call to action text. To be provided when InteractiveVoiceResponse is specified as call to action type */
  callToAction?: string;
  /** Describes how and why the number will be used for messaging as part of the program. */
  description?: string;
}

export interface MessageDetails {
  useCase?: UseCase;
  /** Boolean to determine if HelpAnswerToUser is required */
  helpAnswerToUserRequired?: boolean;
  /**
   * Message text for mobile terminated message associated with HELP keyword
   * e.g 'This is the HELP message test.'.
   */
  helpAnswerToUser?: string;
  /** Boolean to determine if optOutAnswerToUser is required */
  optOutAnswerToUserRequired?: boolean;
  /**
   * "Message text for mobile terminated message associated with STOP keyword
   * e.g. 'This is the STOP message test.'.
   */
  optOutAnswerToUser?: string;
  /** Boolean to determine if optInMessage is required */
  optInMessageToUserRequired?: boolean;
  optInMessageToUser?: string;
  hasEmbeddedLink?: boolean;
  hasEmbeddedPhone?: boolean;
  termsAndConditionsAccepted?: boolean;
  hasAgeGatedContent?: boolean;
  hasDirectLending?: boolean;
}

export interface UseCase {
  /** Type of user content */
  contentType?: ContentType;
  /** Type of user sub-content */
  subContentTypes?: SubContentType[];
  /** Sample messages that a user might send, as a proof of concept */
  sampleMessages?: string[];
}

/** A wrapper for a list of USCampaigns */
export interface USCampaigns {
  /** List of USCampaigns */
  campaigns?: USCampaign[];
  /** Represents the URL link to the next page */
  nextLink?: string;
}

/** A wrapper for a list of 10DLC cost entities */
export interface TenDlcCosts {
  /** List of 10DLC costs. */
  costs?: TenDlcCost[];
  /** Represents the URL link to the next page of local 10DLC costs results. */
  nextLink?: string;
}

/** Defines values for BrandStatus. */
export type BrandStatus =
  | "Draft"
  | "Submitted"
  | "Cancelled"
  | "PendingCancellation"
  | "Denied"
  | "Approved";
/** Defines values for TenDlcCostType. */
export type TenDlcCostType = "brand" | "standardCampaign";
/** Defines values for BillingFrequency. */
export type BillingFrequency = "monthly" | "once";
/** Defines values for CompanyVertical. */
export type CompanyVertical =
  | "Agriculture"
  | "Communication"
  | "Construction"
  | "Education"
  | "Energy"
  | "Entertainment"
  | "Financial"
  | "Gambling"
  | "Government"
  | "Healthcare"
  | "Hospitality"
  | "HumanResources"
  | "Insurance"
  | "Legal"
  | "Manufacturing"
  | "Ngo"
  | "Political"
  | "Postal"
  | "Professional"
  | "RealEstate"
  | "Retail"
  | "Technology"
  | "Transportation";
/** Defines values for EntityType. */
export type EntityType =
  | "PrivateProfit"
  | "PublicProfit"
  | "NonProfit"
  | "Government";
/** Defines values for StockExchange. */
export type StockExchange =
  | "Nasdaq"
  | "Nyse"
  | "Amex"
  | "Amx"
  | "Asx"
  | "B3"
  | "Bme"
  | "Bse"
  | "Fra"
  | "Icex"
  | "Jpx"
  | "Jse"
  | "Krx"
  | "Lon"
  | "Nse"
  | "Omx"
  | "Sehk"
  | "Sgx"
  | "Sse"
  | "Sto"
  | "Swx"
  | "Szse"
  | "Tsx"
  | "Twse"
  | "Vse"
  | "Other";
/** Defines values for AlternateBusinessIdType. */
export type AlternateBusinessIdType = "DUNS" | "LEI" | "GIIN";
/** Defines values for CampaignStatus. */
export type CampaignStatus =
  | "Draft"
  | "Submitted"
  | "Cancelled"
  | "PendingCancellation"
  | "Denied"
  | "Approved";
/** Defines values for ContentType. */
export type ContentType =
  | "TwoFactorAuthentication"
  | "AccountNotification"
  | "CustomerCare"
  | "DeliveryNotification"
  | "FraudAlert"
  | "HigherEducation"
  | "LowVolume"
  | "Marketing"
  | "Mixed"
  | "PollingVoting"
  | "PublicServiceAnnouncement"
  | "SecurityAlert";
/** Defines values for SubContentType. */
export type SubContentType =
  | "twoFactorAuthentication"
  | "accountNotification"
  | "customerCare"
  | "deliveryNotification"
  | "fraudAlert"
  | "higherEducation"
  | "marketing"
  | "pollingVoting"
  | "publicServiceAnnouncement"
  | "securityAlert";

/** Optional parameters. */
export interface TenDlcUpsertUSBrandOptionalParams
  extends coreClient.OperationOptions {
  /** Last date and time when the 10Dlc status was updated */
  statusUpdatedDate?: Date;
  /** 10 Dlc status e.g. 'submitted', 'approved', etc */
  status?: BrandStatus;
  /** Represents the costs tied to the brand */
  costs?: TenDlcCost[];
  /** Date and time when the 10DLC was submitted */
  submissionDate?: Date;
  /**
   * Notes added to the 10DLC Brand after being reviewed to help customer understand
   * review results and necessary follow up actions.
   */
  reviewNotes?: ReviewNote[];
  brandDetails?: BrandDetails;
}

/** Contains response data for the upsertUSBrand operation. */
export type TenDlcUpsertUSBrandResponse = USBrand;

/** Optional parameters. */
export interface TenDlcDeleteUSBrandOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface TenDlcGetUSBrandOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getUSBrand operation. */
export type TenDlcGetUSBrandResponse = USBrand;

/** Optional parameters. */
export interface TenDlcSubmitUSBrandOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the submitUSBrand operation. */
export type TenDlcSubmitUSBrandResponse = USBrand;

/** Optional parameters. */
export interface TenDlcGetUSBrandsOptionalParams
  extends coreClient.OperationOptions {
  skip?: number;
  top?: number;
  filter?: string;
}

/** Contains response data for the getUSBrands operation. */
export type TenDlcGetUSBrandsResponse = USBrands;

/** Optional parameters. */
export interface TenDlcCancelUSBrandOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the cancelUSBrand operation. */
export type TenDlcCancelUSBrandResponse = USBrand;

/** Optional parameters. */
export interface TenDlcUpsertUSCampaignOptionalParams
  extends coreClient.OperationOptions {
  /** Unique identifier that corresponds to a brand */
  brandId?: string;
  /** 10 Dlc status e.g. 'submitted', 'approved', etc */
  status?: CampaignStatus;
  /** Last date and time when the 10DLC status was updated */
  statusUpdatedDate?: Date;
  /** Represents the costs tied to the campaign */
  costs?: TenDlcCost[];
  /** Date and time when the 10DLC was submitted */
  submissionDate?: Date;
  /**
   * Notes added to the 10DLC Campaign after being reviewed to help customer understand
   * review results and necessary follow up actions.
   */
  reviewNotes?: ReviewNote[];
  /** Count of local phone numbers currently associated to the 10DLC Campaign. */
  phoneNumberCount?: number;
  campaignDetails?: CampaignDetails;
  messageDetails?: MessageDetails;
}

/** Contains response data for the upsertUSCampaign operation. */
export type TenDlcUpsertUSCampaignResponse = USCampaign;

/** Optional parameters. */
export interface TenDlcDeleteUSCampaignOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface TenDlcGetUSCampaignOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getUSCampaign operation. */
export type TenDlcGetUSCampaignResponse = USCampaign;

/** Optional parameters. */
export interface TenDlcSubmitUSCampaignOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the submitUSCampaign operation. */
export type TenDlcSubmitUSCampaignResponse = USCampaign;

/** Optional parameters. */
export interface TenDlcGetUSCampaignsOptionalParams
  extends coreClient.OperationOptions {
  skip?: number;
  top?: number;
  filter?: string;
}

/** Contains response data for the getUSCampaigns operation. */
export type TenDlcGetUSCampaignsResponse = USCampaigns;

/** Optional parameters. */
export interface TenDlcCancelUSCampaignOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the cancelUSCampaign operation. */
export type TenDlcCancelUSCampaignResponse = USCampaign;

/** Optional parameters. */
export interface TenDlcGetCostsOptionalParams
  extends coreClient.OperationOptions {
  /** The number of items to skip in the result set (default: 0). */
  skip?: number;
  /** The maximum number of items to return in the result set (default: 100). */
  top?: number;
}

/** Contains response data for the getCosts operation. */
export type TenDlcGetCostsResponse = TenDlcCosts;

/** Optional parameters. */
export interface TenDlcGetUSBrandsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getUSBrandsNext operation. */
export type TenDlcGetUSBrandsNextResponse = USBrands;

/** Optional parameters. */
export interface TenDlcGetUSCampaignsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getUSCampaignsNext operation. */
export type TenDlcGetUSCampaignsNextResponse = USCampaigns;

/** Optional parameters. */
export interface TenDlcGetCostsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getCostsNext operation. */
export type TenDlcGetCostsNextResponse = TenDlcCosts;

/** Optional parameters. */
export interface TenDLCClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
