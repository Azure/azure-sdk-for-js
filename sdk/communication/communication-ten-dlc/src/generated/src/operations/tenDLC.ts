/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { TenDLC } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TenDLCClient } from "../tenDLCClient";
import {
  LocalNumberCost,
  TenDLCGetCostsNextOptionalParams,
  TenDLCGetCostsOptionalParams,
  TenDLCGetCostsResponse,
  USBrand,
  TenDLCGetBrandsNextOptionalParams,
  TenDLCGetBrandsOptionalParams,
  TenDLCGetBrandsResponse,
  USCampaign,
  TenDLCGetCampaignsNextOptionalParams,
  TenDLCGetCampaignsOptionalParams,
  TenDLCGetCampaignsResponse,
  TenDLCCreateOrUpdateBrandOptionalParams,
  TenDLCCreateOrUpdateBrandResponse,
  TenDLCDeleteBrandOptionalParams,
  TenDLCGetBrandOptionalParams,
  TenDLCGetBrandResponse,
  TenDLCSubmitBrandOptionalParams,
  TenDLCSubmitBrandResponse,
  TenDLCCreateOrUpdateCampaignOptionalParams,
  TenDLCCreateOrUpdateCampaignResponse,
  TenDLCDeleteCampaignOptionalParams,
  TenDLCGetCampaignOptionalParams,
  TenDLCGetCampaignResponse,
  TenDLCSubmitCampaignOptionalParams,
  TenDLCSubmitCampaignResponse,
  TenDLCGetCostsNextResponse,
  TenDLCGetBrandsNextResponse,
  TenDLCGetCampaignsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing TenDLC operations. */
export class TenDLCImpl implements TenDLC {
  private readonly client: TenDLCClient;

  /**
   * Initialize a new instance of the class TenDLC class.
   * @param client Reference to the service client
   */
  constructor(client: TenDLCClient) {
    this.client = client;
  }

  /**
   * This method supports pagination via the "skip" and "top" query parameters.
   * @param options The options parameters.
   */
  public listCosts(
    options?: TenDLCGetCostsOptionalParams
  ): PagedAsyncIterableIterator<LocalNumberCost> {
    const iter = this.getCostsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getCostsPagingPage(options, settings);
      }
    };
  }

  private async *getCostsPagingPage(
    options?: TenDLCGetCostsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<LocalNumberCost[]> {
    let result: TenDLCGetCostsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getCosts(options);
      let page = result.costs || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getCostsNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.costs || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getCostsPagingAll(
    options?: TenDLCGetCostsOptionalParams
  ): AsyncIterableIterator<LocalNumberCost> {
    for await (const page of this.getCostsPagingPage(options)) {
      yield* page;
    }
  }

  /** @param options The options parameters. */
  public listBrands(
    options?: TenDLCGetBrandsOptionalParams
  ): PagedAsyncIterableIterator<USBrand> {
    const iter = this.getBrandsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getBrandsPagingPage(options, settings);
      }
    };
  }

  private async *getBrandsPagingPage(
    options?: TenDLCGetBrandsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<USBrand[]> {
    let result: TenDLCGetBrandsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getBrands(options);
      let page = result.brands || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getBrandsNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.brands || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getBrandsPagingAll(
    options?: TenDLCGetBrandsOptionalParams
  ): AsyncIterableIterator<USBrand> {
    for await (const page of this.getBrandsPagingPage(options)) {
      yield* page;
    }
  }

  /** @param options The options parameters. */
  public listCampaigns(
    options?: TenDLCGetCampaignsOptionalParams
  ): PagedAsyncIterableIterator<USCampaign> {
    const iter = this.getCampaignsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getCampaignsPagingPage(options, settings);
      }
    };
  }

  private async *getCampaignsPagingPage(
    options?: TenDLCGetCampaignsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<USCampaign[]> {
    let result: TenDLCGetCampaignsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getCampaigns(options);
      let page = result.campaigns || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getCampaignsNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.campaigns || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getCampaignsPagingAll(
    options?: TenDLCGetCampaignsOptionalParams
  ): AsyncIterableIterator<USCampaign> {
    for await (const page of this.getCampaignsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * This method supports pagination via the "skip" and "top" query parameters.
   * @param options The options parameters.
   */
  private async _getCosts(
    options?: TenDLCGetCostsOptionalParams
  ): Promise<TenDLCGetCostsResponse> {
    return tracingClient.withSpan(
      "TenDLCClient._getCosts",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getCostsOperationSpec
        ) as Promise<TenDLCGetCostsResponse>;
      }
    );
  }

  /**
   * @param brandId
   * @param id Unique identifier that corresponds to a brand
   * @param options The options parameters.
   */
  async createOrUpdateBrand(
    brandId: string,
    id: string,
    options?: TenDLCCreateOrUpdateBrandOptionalParams
  ): Promise<TenDLCCreateOrUpdateBrandResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.createOrUpdateBrand",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { brandId, id, options },
          createOrUpdateBrandOperationSpec
        ) as Promise<TenDLCCreateOrUpdateBrandResponse>;
      }
    );
  }

  /**
   * @param brandId
   * @param options The options parameters.
   */
  async deleteBrand(
    brandId: string,
    options?: TenDLCDeleteBrandOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "TenDLCClient.deleteBrand",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { brandId, options },
          deleteBrandOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * @param brandId
   * @param options The options parameters.
   */
  async getBrand(
    brandId: string,
    options?: TenDLCGetBrandOptionalParams
  ): Promise<TenDLCGetBrandResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.getBrand",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { brandId, options },
          getBrandOperationSpec
        ) as Promise<TenDLCGetBrandResponse>;
      }
    );
  }

  /**
   * @param brandId
   * @param options The options parameters.
   */
  async submitBrand(
    brandId: string,
    options?: TenDLCSubmitBrandOptionalParams
  ): Promise<TenDLCSubmitBrandResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.submitBrand",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { brandId, options },
          submitBrandOperationSpec
        ) as Promise<TenDLCSubmitBrandResponse>;
      }
    );
  }

  /** @param options The options parameters. */
  private async _getBrands(
    options?: TenDLCGetBrandsOptionalParams
  ): Promise<TenDLCGetBrandsResponse> {
    return tracingClient.withSpan(
      "TenDLCClient._getBrands",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getBrandsOperationSpec
        ) as Promise<TenDLCGetBrandsResponse>;
      }
    );
  }

  /**
   * @param campaignId
   * @param id Unique identifier that corresponds to a campaign
   * @param options The options parameters.
   */
  async createOrUpdateCampaign(
    campaignId: string,
    id: string,
    options?: TenDLCCreateOrUpdateCampaignOptionalParams
  ): Promise<TenDLCCreateOrUpdateCampaignResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.createOrUpdateCampaign",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { campaignId, id, options },
          createOrUpdateCampaignOperationSpec
        ) as Promise<TenDLCCreateOrUpdateCampaignResponse>;
      }
    );
  }

  /**
   * @param campaignId
   * @param options The options parameters.
   */
  async deleteCampaign(
    campaignId: string,
    options?: TenDLCDeleteCampaignOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "TenDLCClient.deleteCampaign",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { campaignId, options },
          deleteCampaignOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * @param campaignId
   * @param options The options parameters.
   */
  async getCampaign(
    campaignId: string,
    options?: TenDLCGetCampaignOptionalParams
  ): Promise<TenDLCGetCampaignResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.getCampaign",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { campaignId, options },
          getCampaignOperationSpec
        ) as Promise<TenDLCGetCampaignResponse>;
      }
    );
  }

  /**
   * @param campaignId
   * @param options The options parameters.
   */
  async submitCampaign(
    campaignId: string,
    options?: TenDLCSubmitCampaignOptionalParams
  ): Promise<TenDLCSubmitCampaignResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.submitCampaign",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { campaignId, options },
          submitCampaignOperationSpec
        ) as Promise<TenDLCSubmitCampaignResponse>;
      }
    );
  }

  /** @param options The options parameters. */
  private async _getCampaigns(
    options?: TenDLCGetCampaignsOptionalParams
  ): Promise<TenDLCGetCampaignsResponse> {
    return tracingClient.withSpan(
      "TenDLCClient._getCampaigns",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getCampaignsOperationSpec
        ) as Promise<TenDLCGetCampaignsResponse>;
      }
    );
  }

  /**
   * GetCostsNext
   * @param nextLink The nextLink from the previous successful call to the GetCosts method.
   * @param options The options parameters.
   */
  private async _getCostsNext(
    nextLink: string,
    options?: TenDLCGetCostsNextOptionalParams
  ): Promise<TenDLCGetCostsNextResponse> {
    return tracingClient.withSpan(
      "TenDLCClient._getCostsNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          getCostsNextOperationSpec
        ) as Promise<TenDLCGetCostsNextResponse>;
      }
    );
  }

  /**
   * GetBrandsNext
   * @param nextLink The nextLink from the previous successful call to the GetBrands method.
   * @param options The options parameters.
   */
  private async _getBrandsNext(
    nextLink: string,
    options?: TenDLCGetBrandsNextOptionalParams
  ): Promise<TenDLCGetBrandsNextResponse> {
    return tracingClient.withSpan(
      "TenDLCClient._getBrandsNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          getBrandsNextOperationSpec
        ) as Promise<TenDLCGetBrandsNextResponse>;
      }
    );
  }

  /**
   * GetCampaignsNext
   * @param nextLink The nextLink from the previous successful call to the GetCampaigns method.
   * @param options The options parameters.
   */
  private async _getCampaignsNext(
    nextLink: string,
    options?: TenDLCGetCampaignsNextOptionalParams
  ): Promise<TenDLCGetCampaignsNextResponse> {
    return tracingClient.withSpan(
      "TenDLCClient._getCampaignsNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          getCampaignsNextOperationSpec
        ) as Promise<TenDLCGetCampaignsNextResponse>;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getCostsOperationSpec: coreClient.OperationSpec = {
  path: "/localNumbers/costs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LocalNumberCosts
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.skip, Parameters.top, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateBrandOperationSpec: coreClient.OperationSpec = {
  path: "/localNumbers/countries/US/brands/{brandId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.USBrand
    },
    201: {
      bodyMapper: Mappers.USBrand
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: {
    parameterPath: {
      id: ["id"],
      statusUpdatedDate: ["options", "statusUpdatedDate"],
      status: ["options", "status"],
      costs: ["options", "costs"],
      submissionDate: ["options", "submissionDate"],
      reviewNotes: ["options", "reviewNotes"],
      brandDetails: ["options", "brandDetails"]
    },
    mapper: { ...Mappers.USBrand, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.brandId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteBrandOperationSpec: coreClient.OperationSpec = {
  path: "/localNumbers/countries/US/brands/{brandId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.brandId],
  headerParameters: [Parameters.accept],
  serializer
};
const getBrandOperationSpec: coreClient.OperationSpec = {
  path: "/localNumbers/countries/US/brands/{brandId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USBrand
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.brandId],
  headerParameters: [Parameters.accept],
  serializer
};
const submitBrandOperationSpec: coreClient.OperationSpec = {
  path: "/localNumbers/countries/US/brands/{brandId}:submit",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.USBrand
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.brandId],
  headerParameters: [Parameters.accept],
  serializer
};
const getBrandsOperationSpec: coreClient.OperationSpec = {
  path: "/localNumbers/countries/US/brands",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USBrands
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [
    Parameters.skip,
    Parameters.top,
    Parameters.apiVersion,
    Parameters.filter
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateCampaignOperationSpec: coreClient.OperationSpec = {
  path: "/localNumbers/countries/US/campaigns/{campaignId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.USCampaign
    },
    201: {
      bodyMapper: Mappers.USCampaign
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: {
    parameterPath: {
      id: ["id"],
      brandId: ["options", "brandId"],
      status: ["options", "status"],
      costs: ["options", "costs"],
      reviewNotes: ["options", "reviewNotes"],
      phoneNumberCount: ["options", "phoneNumberCount"],
      campaignDetails: ["options", "campaignDetails"],
      messageDetails: ["options", "messageDetails"]
    },
    mapper: { ...Mappers.USCampaign, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.campaignId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteCampaignOperationSpec: coreClient.OperationSpec = {
  path: "/localNumbers/countries/US/campaigns/{campaignId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.campaignId],
  headerParameters: [Parameters.accept],
  serializer
};
const getCampaignOperationSpec: coreClient.OperationSpec = {
  path: "/localNumbers/countries/US/campaigns/{campaignId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USCampaign
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.campaignId],
  headerParameters: [Parameters.accept],
  serializer
};
const submitCampaignOperationSpec: coreClient.OperationSpec = {
  path: "/localNumbers/countries/US/campaigns/{campaignId}:submit",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.USCampaign
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.campaignId],
  headerParameters: [Parameters.accept],
  serializer
};
const getCampaignsOperationSpec: coreClient.OperationSpec = {
  path: "/localNumbers/countries/US/campaigns",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USCampaigns
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [
    Parameters.skip,
    Parameters.top,
    Parameters.apiVersion,
    Parameters.filter
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const getCostsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LocalNumberCosts
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getBrandsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USBrands
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getCampaignsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USCampaigns
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
