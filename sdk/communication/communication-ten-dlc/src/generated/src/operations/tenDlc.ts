/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { TenDlc } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TenDLCClient } from "../tenDLCClient";
import {
  USBrand,
  TenDlcGetUSBrandsNextOptionalParams,
  TenDlcGetUSBrandsOptionalParams,
  TenDlcGetUSBrandsResponse,
  USCampaign,
  TenDlcGetUSCampaignsNextOptionalParams,
  TenDlcGetUSCampaignsOptionalParams,
  TenDlcGetUSCampaignsResponse,
  TenDlcCost,
  TenDlcGetCostsNextOptionalParams,
  TenDlcGetCostsOptionalParams,
  TenDlcGetCostsResponse,
  TenDlcUpsertUSBrandOptionalParams,
  TenDlcUpsertUSBrandResponse,
  TenDlcDeleteUSBrandOptionalParams,
  TenDlcGetUSBrandOptionalParams,
  TenDlcGetUSBrandResponse,
  TenDlcSubmitUSBrandOptionalParams,
  TenDlcSubmitUSBrandResponse,
  TenDlcCancelUSBrandOptionalParams,
  TenDlcCancelUSBrandResponse,
  TenDlcUpsertUSCampaignOptionalParams,
  TenDlcUpsertUSCampaignResponse,
  TenDlcDeleteUSCampaignOptionalParams,
  TenDlcGetUSCampaignOptionalParams,
  TenDlcGetUSCampaignResponse,
  TenDlcSubmitUSCampaignOptionalParams,
  TenDlcSubmitUSCampaignResponse,
  TenDlcCancelUSCampaignOptionalParams,
  TenDlcCancelUSCampaignResponse,
  TenDlcGetUSBrandsNextResponse,
  TenDlcGetUSCampaignsNextResponse,
  TenDlcGetCostsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing TenDlc operations. */
export class TenDlcImpl implements TenDlc {
  private readonly client: TenDLCClient;

  /**
   * Initialize a new instance of the class TenDlc class.
   * @param client Reference to the service client
   */
  constructor(client: TenDLCClient) {
    this.client = client;
  }

  /** @param options The options parameters. */
  public listUSBrands(
    options?: TenDlcGetUSBrandsOptionalParams
  ): PagedAsyncIterableIterator<USBrand> {
    const iter = this.getUSBrandsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getUSBrandsPagingPage(options, settings);
      }
    };
  }

  private async *getUSBrandsPagingPage(
    options?: TenDlcGetUSBrandsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<USBrand[]> {
    let result: TenDlcGetUSBrandsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getUSBrands(options);
      let page = result.brands || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getUSBrandsNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.brands || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getUSBrandsPagingAll(
    options?: TenDlcGetUSBrandsOptionalParams
  ): AsyncIterableIterator<USBrand> {
    for await (const page of this.getUSBrandsPagingPage(options)) {
      yield* page;
    }
  }

  /** @param options The options parameters. */
  public listUSCampaigns(
    options?: TenDlcGetUSCampaignsOptionalParams
  ): PagedAsyncIterableIterator<USCampaign> {
    const iter = this.getUSCampaignsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getUSCampaignsPagingPage(options, settings);
      }
    };
  }

  private async *getUSCampaignsPagingPage(
    options?: TenDlcGetUSCampaignsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<USCampaign[]> {
    let result: TenDlcGetUSCampaignsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getUSCampaigns(options);
      let page = result.campaigns || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getUSCampaignsNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.campaigns || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getUSCampaignsPagingAll(
    options?: TenDlcGetUSCampaignsOptionalParams
  ): AsyncIterableIterator<USCampaign> {
    for await (const page of this.getUSCampaignsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * This method supports pagination via the "skip" and "top" query parameters.
   * @param options The options parameters.
   */
  public listCosts(
    options?: TenDlcGetCostsOptionalParams
  ): PagedAsyncIterableIterator<TenDlcCost> {
    const iter = this.getCostsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getCostsPagingPage(options, settings);
      }
    };
  }

  private async *getCostsPagingPage(
    options?: TenDlcGetCostsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<TenDlcCost[]> {
    let result: TenDlcGetCostsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getCosts(options);
      let page = result.costs || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getCostsNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.costs || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getCostsPagingAll(
    options?: TenDlcGetCostsOptionalParams
  ): AsyncIterableIterator<TenDlcCost> {
    for await (const page of this.getCostsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * @param brandId
   * @param id Unique identifier that corresponds to a brand
   * @param options The options parameters.
   */
  async upsertUSBrand(
    brandId: string,
    id: string,
    options?: TenDlcUpsertUSBrandOptionalParams
  ): Promise<TenDlcUpsertUSBrandResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.upsertUSBrand",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { brandId, id, options },
          upsertUSBrandOperationSpec
        ) as Promise<TenDlcUpsertUSBrandResponse>;
      }
    );
  }

  /**
   * @param brandId
   * @param options The options parameters.
   */
  async deleteUSBrand(
    brandId: string,
    options?: TenDlcDeleteUSBrandOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "TenDLCClient.deleteUSBrand",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { brandId, options },
          deleteUSBrandOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * @param brandId
   * @param options The options parameters.
   */
  async getUSBrand(
    brandId: string,
    options?: TenDlcGetUSBrandOptionalParams
  ): Promise<TenDlcGetUSBrandResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.getUSBrand",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { brandId, options },
          getUSBrandOperationSpec
        ) as Promise<TenDlcGetUSBrandResponse>;
      }
    );
  }

  /**
   * @param brandId
   * @param options The options parameters.
   */
  async submitUSBrand(
    brandId: string,
    options?: TenDlcSubmitUSBrandOptionalParams
  ): Promise<TenDlcSubmitUSBrandResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.submitUSBrand",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { brandId, options },
          submitUSBrandOperationSpec
        ) as Promise<TenDlcSubmitUSBrandResponse>;
      }
    );
  }

  /** @param options The options parameters. */
  private async _getUSBrands(
    options?: TenDlcGetUSBrandsOptionalParams
  ): Promise<TenDlcGetUSBrandsResponse> {
    return tracingClient.withSpan(
      "TenDLCClient._getUSBrands",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getUSBrandsOperationSpec
        ) as Promise<TenDlcGetUSBrandsResponse>;
      }
    );
  }

  /**
   * @param brandId
   * @param options The options parameters.
   */
  async cancelUSBrand(
    brandId: string,
    options?: TenDlcCancelUSBrandOptionalParams
  ): Promise<TenDlcCancelUSBrandResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.cancelUSBrand",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { brandId, options },
          cancelUSBrandOperationSpec
        ) as Promise<TenDlcCancelUSBrandResponse>;
      }
    );
  }

  /**
   * @param campaignId
   * @param id Unique identifier that corresponds to a campaign
   * @param options The options parameters.
   */
  async upsertUSCampaign(
    campaignId: string,
    id: string,
    options?: TenDlcUpsertUSCampaignOptionalParams
  ): Promise<TenDlcUpsertUSCampaignResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.upsertUSCampaign",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { campaignId, id, options },
          upsertUSCampaignOperationSpec
        ) as Promise<TenDlcUpsertUSCampaignResponse>;
      }
    );
  }

  /**
   * @param campaignId
   * @param options The options parameters.
   */
  async deleteUSCampaign(
    campaignId: string,
    options?: TenDlcDeleteUSCampaignOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "TenDLCClient.deleteUSCampaign",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { campaignId, options },
          deleteUSCampaignOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * @param campaignId
   * @param options The options parameters.
   */
  async getUSCampaign(
    campaignId: string,
    options?: TenDlcGetUSCampaignOptionalParams
  ): Promise<TenDlcGetUSCampaignResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.getUSCampaign",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { campaignId, options },
          getUSCampaignOperationSpec
        ) as Promise<TenDlcGetUSCampaignResponse>;
      }
    );
  }

  /**
   * @param campaignId
   * @param options The options parameters.
   */
  async submitUSCampaign(
    campaignId: string,
    options?: TenDlcSubmitUSCampaignOptionalParams
  ): Promise<TenDlcSubmitUSCampaignResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.submitUSCampaign",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { campaignId, options },
          submitUSCampaignOperationSpec
        ) as Promise<TenDlcSubmitUSCampaignResponse>;
      }
    );
  }

  /** @param options The options parameters. */
  private async _getUSCampaigns(
    options?: TenDlcGetUSCampaignsOptionalParams
  ): Promise<TenDlcGetUSCampaignsResponse> {
    return tracingClient.withSpan(
      "TenDLCClient._getUSCampaigns",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getUSCampaignsOperationSpec
        ) as Promise<TenDlcGetUSCampaignsResponse>;
      }
    );
  }

  /**
   * @param campaignId
   * @param options The options parameters.
   */
  async cancelUSCampaign(
    campaignId: string,
    options?: TenDlcCancelUSCampaignOptionalParams
  ): Promise<TenDlcCancelUSCampaignResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.cancelUSCampaign",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { campaignId, options },
          cancelUSCampaignOperationSpec
        ) as Promise<TenDlcCancelUSCampaignResponse>;
      }
    );
  }

  /**
   * This method supports pagination via the "skip" and "top" query parameters.
   * @param options The options parameters.
   */
  private async _getCosts(
    options?: TenDlcGetCostsOptionalParams
  ): Promise<TenDlcGetCostsResponse> {
    return tracingClient.withSpan(
      "TenDLCClient._getCosts",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getCostsOperationSpec
        ) as Promise<TenDlcGetCostsResponse>;
      }
    );
  }

  /**
   * GetUSBrandsNext
   * @param nextLink The nextLink from the previous successful call to the GetUSBrands method.
   * @param options The options parameters.
   */
  private async _getUSBrandsNext(
    nextLink: string,
    options?: TenDlcGetUSBrandsNextOptionalParams
  ): Promise<TenDlcGetUSBrandsNextResponse> {
    return tracingClient.withSpan(
      "TenDLCClient._getUSBrandsNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          getUSBrandsNextOperationSpec
        ) as Promise<TenDlcGetUSBrandsNextResponse>;
      }
    );
  }

  /**
   * GetUSCampaignsNext
   * @param nextLink The nextLink from the previous successful call to the GetUSCampaigns method.
   * @param options The options parameters.
   */
  private async _getUSCampaignsNext(
    nextLink: string,
    options?: TenDlcGetUSCampaignsNextOptionalParams
  ): Promise<TenDlcGetUSCampaignsNextResponse> {
    return tracingClient.withSpan(
      "TenDLCClient._getUSCampaignsNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          getUSCampaignsNextOperationSpec
        ) as Promise<TenDlcGetUSCampaignsNextResponse>;
      }
    );
  }

  /**
   * GetCostsNext
   * @param nextLink The nextLink from the previous successful call to the GetCosts method.
   * @param options The options parameters.
   */
  private async _getCostsNext(
    nextLink: string,
    options?: TenDlcGetCostsNextOptionalParams
  ): Promise<TenDlcGetCostsNextResponse> {
    return tracingClient.withSpan(
      "TenDLCClient._getCostsNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          getCostsNextOperationSpec
        ) as Promise<TenDlcGetCostsNextResponse>;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const upsertUSBrandOperationSpec: coreClient.OperationSpec = {
  path: "/tendlc/countries/US/brands/{brandId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.USBrand
    },
    201: {
      bodyMapper: Mappers.USBrand
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: {
    parameterPath: {
      id: ["id"],
      statusUpdatedDate: ["options", "statusUpdatedDate"],
      status: ["options", "status"],
      costs: ["options", "costs"],
      submissionDate: ["options", "submissionDate"],
      reviewNotes: ["options", "reviewNotes"],
      brandDetails: ["options", "brandDetails"]
    },
    mapper: { ...Mappers.USBrand, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.brandId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteUSBrandOperationSpec: coreClient.OperationSpec = {
  path: "/tendlc/countries/US/brands/{brandId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.brandId],
  headerParameters: [Parameters.accept],
  serializer
};
const getUSBrandOperationSpec: coreClient.OperationSpec = {
  path: "/tendlc/countries/US/brands/{brandId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USBrand
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.brandId],
  headerParameters: [Parameters.accept],
  serializer
};
const submitUSBrandOperationSpec: coreClient.OperationSpec = {
  path: "/tendlc/countries/US/brands/{brandId}:submit",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.USBrand
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.brandId],
  headerParameters: [Parameters.accept],
  serializer
};
const getUSBrandsOperationSpec: coreClient.OperationSpec = {
  path: "/tendlc/countries/US/brands",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USBrands
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.top,
    Parameters.filter
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelUSBrandOperationSpec: coreClient.OperationSpec = {
  path: "/tendlc/countries/US/brands/{brandId}:cancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.USBrand
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.brandId],
  headerParameters: [Parameters.accept],
  serializer
};
const upsertUSCampaignOperationSpec: coreClient.OperationSpec = {
  path: "/tendlc/countries/US/campaigns/{campaignId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.USCampaign
    },
    201: {
      bodyMapper: Mappers.USCampaign
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: {
    parameterPath: {
      id: ["id"],
      brandId: ["options", "brandId"],
      status: ["options", "status"],
      statusUpdatedDate: ["options", "statusUpdatedDate"],
      costs: ["options", "costs"],
      submissionDate: ["options", "submissionDate"],
      reviewNotes: ["options", "reviewNotes"],
      phoneNumberCount: ["options", "phoneNumberCount"],
      campaignDetails: ["options", "campaignDetails"],
      messageDetails: ["options", "messageDetails"]
    },
    mapper: { ...Mappers.USCampaign, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.campaignId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteUSCampaignOperationSpec: coreClient.OperationSpec = {
  path: "/tendlc/countries/US/campaigns/{campaignId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.campaignId],
  headerParameters: [Parameters.accept],
  serializer
};
const getUSCampaignOperationSpec: coreClient.OperationSpec = {
  path: "/tendlc/countries/US/campaigns/{campaignId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USCampaign
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.campaignId],
  headerParameters: [Parameters.accept],
  serializer
};
const submitUSCampaignOperationSpec: coreClient.OperationSpec = {
  path: "/tendlc/countries/US/campaigns/{campaignId}:submit",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.USCampaign
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.campaignId],
  headerParameters: [Parameters.accept],
  serializer
};
const getUSCampaignsOperationSpec: coreClient.OperationSpec = {
  path: "/tendlc/countries/US/campaigns",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USCampaigns
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.top,
    Parameters.filter
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelUSCampaignOperationSpec: coreClient.OperationSpec = {
  path: "/tendlc/countries/US/campaigns/{campaignId}:cancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.USCampaign
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.campaignId],
  headerParameters: [Parameters.accept],
  serializer
};
const getCostsOperationSpec: coreClient.OperationSpec = {
  path: "/tendlc/costs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TenDlcCosts
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip, Parameters.top],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const getUSBrandsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USBrands
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getUSCampaignsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.USCampaigns
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getCostsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TenDlcCosts
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
