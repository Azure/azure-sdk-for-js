/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing.js";
import { PhoneNumbers } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { TenDLCClient } from "../tenDLCClient.js";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  PhoneNumbersSetTenDlcConfigurationOptionalParams,
  PhoneNumbersSetTenDlcConfigurationResponse,
  PhoneNumbersGetTenDlcConfigurationOptionalParams,
  PhoneNumbersGetTenDlcConfigurationResponse,
} from "../models/index.js";

/** Class containing PhoneNumbers operations. */
export class PhoneNumbersImpl implements PhoneNumbers {
  private readonly client: TenDLCClient;

  /**
   * Initialize a new instance of the class PhoneNumbers class.
   * @param client Reference to the service client
   */
  constructor(client: TenDLCClient) {
    this.client = client;
  }

  /**
   * Sets the 10DLC configuration of a phone number.
   * @param phoneNumber Phone number to be updated, e.g. +11234567890.
   * @param options The options parameters.
   */
  async beginSetTenDlcConfiguration(
    phoneNumber: string,
    options?: PhoneNumbersSetTenDlcConfigurationOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<PhoneNumbersSetTenDlcConfigurationResponse>,
      PhoneNumbersSetTenDlcConfigurationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PhoneNumbersSetTenDlcConfigurationResponse> => {
      return tracingClient.withSpan(
        "TenDLCClient.beginSetTenDlcConfiguration",
        options ?? {},
        async () => {
          return this.client.sendOperationRequest(
            args,
            spec,
          ) as Promise<PhoneNumbersSetTenDlcConfigurationResponse>;
        },
      );
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { phoneNumber, options },
      spec: setTenDlcConfigurationOperationSpec,
    });
    const poller = await createHttpPoller<
      PhoneNumbersSetTenDlcConfigurationResponse,
      OperationState<PhoneNumbersSetTenDlcConfigurationResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Sets the 10DLC configuration of a phone number.
   * @param phoneNumber Phone number to be updated, e.g. +11234567890.
   * @param options The options parameters.
   */
  async beginSetTenDlcConfigurationAndWait(
    phoneNumber: string,
    options?: PhoneNumbersSetTenDlcConfigurationOptionalParams,
  ): Promise<PhoneNumbersSetTenDlcConfigurationResponse> {
    const poller = await this.beginSetTenDlcConfiguration(phoneNumber, options);
    return poller.pollUntilDone();
  }

  /**
   * Gets the 10DLC configuration of a phone number.
   * @param phoneNumber Phone number to be updated, e.g. +11234567890.
   * @param options The options parameters.
   */
  async getTenDlcConfiguration(
    phoneNumber: string,
    options?: PhoneNumbersGetTenDlcConfigurationOptionalParams,
  ): Promise<PhoneNumbersGetTenDlcConfigurationResponse> {
    return tracingClient.withSpan(
      "TenDLCClient.getTenDlcConfiguration",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { phoneNumber, options },
          getTenDlcConfigurationOperationSpec,
        ) as Promise<PhoneNumbersGetTenDlcConfigurationResponse>;
      },
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const setTenDlcConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/phoneNumbers/{phoneNumber}/tendlcConfiguration",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.TenDlcConfigurationResponse,
      headersMapper: Mappers.PhoneNumbersSetTenDlcConfigurationHeaders,
    },
    201: {
      bodyMapper: Mappers.TenDlcConfigurationResponse,
      headersMapper: Mappers.PhoneNumbersSetTenDlcConfigurationHeaders,
    },
    202: {
      bodyMapper: Mappers.TenDlcConfigurationResponse,
      headersMapper: Mappers.PhoneNumbersSetTenDlcConfigurationHeaders,
    },
    204: {
      bodyMapper: Mappers.TenDlcConfigurationResponse,
      headersMapper: Mappers.PhoneNumbersSetTenDlcConfigurationHeaders,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  requestBody: {
    parameterPath: {
      sms: ["options", "sms"],
      tenDlcCampaignId: ["options", "tenDlcCampaignId"],
    },
    mapper: Mappers.TenDlcConfigurationRequest,
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.phoneNumber],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer,
};
const getTenDlcConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/phoneNumbers/{phoneNumber}/tendlcConfiguration",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TenDlcConfigurationResponse,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.phoneNumber],
  headerParameters: [Parameters.accept],
  serializer,
};
