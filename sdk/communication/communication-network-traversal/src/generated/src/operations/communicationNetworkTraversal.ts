/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetworkRelayRestClient } from "../networkRelayRestClient";
import {
  CommunicationRelayConfigurationRequest,
  CommunicationNetworkTraversalIssueRelayConfigurationResponse
} from "../models";

/**
 * Class representing a CommunicationNetworkTraversal.
 */
export class CommunicationNetworkTraversal {
  private readonly client: NetworkRelayRestClient;

  /**
   * Initialize a new instance of the class CommunicationNetworkTraversal class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkRelayRestClient) {
    this.client = client;
  }

  /**
   * Issue a configuration for an STUN/TURN server for an existing identity.
   * @param body Request for a CommunicationRelayConfiguration.
   * @param options The options parameters.
   */
  issueRelayConfiguration(
    body: CommunicationRelayConfigurationRequest,
    options?: coreHttp.OperationOptions
  ): Promise<CommunicationNetworkTraversalIssueRelayConfigurationResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.client.sendOperationRequest(
      { body, options: operationOptions },
      issueRelayConfigurationOperationSpec
    ) as Promise<CommunicationNetworkTraversalIssueRelayConfigurationResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const issueRelayConfigurationOperationSpec: coreHttp.OperationSpec = {
  path: "/networktraversal/:issueRelayConfiguration",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationRelayConfiguration
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
