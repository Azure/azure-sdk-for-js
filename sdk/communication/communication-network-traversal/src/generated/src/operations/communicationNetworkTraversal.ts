/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { CommunicationNetworkTraversal } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { NetworkRelayRestClient } from "../networkRelayRestClient";
import {
  CommunicationNetworkTraversalIssueRelayConfigurationOptionalParams,
  CommunicationNetworkTraversalIssueRelayConfigurationResponse
} from "../models";

/** Class containing CommunicationNetworkTraversal operations. */
export class CommunicationNetworkTraversalImpl
  implements CommunicationNetworkTraversal {
  private readonly client: NetworkRelayRestClient;

  /**
   * Initialize a new instance of the class CommunicationNetworkTraversal class.
   * @param client Reference to the service client
   */
  constructor(client: NetworkRelayRestClient) {
    this.client = client;
  }

  /**
   * Issue a configuration for an STUN/TURN server.
   * @param options The options parameters.
   */
  async issueRelayConfiguration(
    options?: CommunicationNetworkTraversalIssueRelayConfigurationOptionalParams
  ): Promise<CommunicationNetworkTraversalIssueRelayConfigurationResponse> {
    return tracingClient.withSpan(
      "NetworkRelayRestClient.issueRelayConfiguration",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          issueRelayConfigurationOperationSpec
        ) as Promise<
          CommunicationNetworkTraversalIssueRelayConfigurationResponse
        >;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const issueRelayConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/networkTraversal/:issueRelayConfiguration",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationRelayConfiguration
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: {
    parameterPath: {
      id: ["options", "id"],
      routeType: ["options", "routeType"],
      ttl: ["options", "ttl"]
    },
    mapper: Mappers.CommunicationRelayConfigurationRequest
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
