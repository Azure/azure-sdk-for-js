/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  EmailGetSendStatusOptionalParams,
  EmailGetSendStatusResponse,
  EmailMessage,
  EmailSendOptionalParams,
  EmailSendResponse
} from "../models";

/** Interface representing a Email. */
export interface Email {
  /**
   * Gets the status of a message sent previously.
   * @param messageId System generated message id (GUID) returned from a previous call to send email
   * @param options The options parameters.
   */
  getSendStatus(
    messageId: string,
    options?: EmailGetSendStatusOptionalParams
  ): Promise<EmailGetSendStatusResponse>;
  /**
   * Queues an email message to be sent to one or more recipients
   * @param repeatabilityRequestId If specified, the client directs that the request is repeatable; that
   *                               is, that the client can make the request multiple times with the same Repeatability-Request-Id and
   *                               get back an appropriate response without the server executing the request multiple times. The value
   *                               of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique
   *                               for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs.
   * @param repeatabilityFirstSent Must be sent by clients to specify that a request is repeatable.
   *                               Repeatability-First-Sent is used to specify the date and time at which the request was first created
   *                               in the IMF-fix date form of HTTP-date as defined in RFC7231. eg- Tue, 26 Mar 2019 16:06:51 GMT
   * @param emailMessage Message payload for sending an email
   * @param options The options parameters.
   */
  send(
    repeatabilityRequestId: string,
    repeatabilityFirstSent: string,
    emailMessage: EmailMessage,
    options?: EmailSendOptionalParams
  ): Promise<EmailSendResponse>;
}
