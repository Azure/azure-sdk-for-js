/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-http";
import {
  UpdateAudioRoutingGroupRequest as UpdateAudioRoutingGroupRequestMapper,
  CreateCallRequest as CreateCallRequestMapper,
  PlayAudioRequest as PlayAudioRequestMapper,
  TransferToParticipantRequest as TransferToParticipantRequestMapper,
  TransferToCallRequest as TransferToCallRequestMapper,
  AudioRoutingGroupRequest as AudioRoutingGroupRequestMapper,
  AddParticipantRequest as AddParticipantRequestMapper,
  RemoveParticipantRequest as RemoveParticipantRequestMapper,
  GetParticipantRequest as GetParticipantRequestMapper,
  PlayAudioToParticipantRequest as PlayAudioToParticipantRequestMapper,
  CancelParticipantMediaOperationRequest as CancelParticipantMediaOperationRequestMapper,
  MuteParticipantRequest as MuteParticipantRequestMapper,
  UnmuteParticipantRequest as UnmuteParticipantRequestMapper,
  HoldMeetingAudioRequest as HoldMeetingAudioRequestMapper,
  ResumeMeetingAudioRequest as ResumeMeetingAudioRequestMapper,
  GetAllParticipantsWithCallLocatorRequest as GetAllParticipantsWithCallLocatorRequestMapper,
  AddParticipantWithCallLocatorRequest as AddParticipantWithCallLocatorRequestMapper,
  RemoveParticipantWithCallLocatorRequest as RemoveParticipantWithCallLocatorRequestMapper,
  GetParticipantWithCallLocatorRequest as GetParticipantWithCallLocatorRequestMapper,
  PlayAudioToParticipantWithCallLocatorRequest as PlayAudioToParticipantWithCallLocatorRequestMapper,
  CancelParticipantMediaOperationWithCallLocatorRequest as CancelParticipantMediaOperationWithCallLocatorRequestMapper,
  StartCallRecordingWithCallLocatorRequest as StartCallRecordingWithCallLocatorRequestMapper,
  JoinCallRequest as JoinCallRequestMapper,
  PlayAudioWithCallLocatorRequest as PlayAudioWithCallLocatorRequestMapper,
  CancelMediaOperationWithCallLocatorRequest as CancelMediaOperationWithCallLocatorRequestMapper,
  AnswerCallRequest as AnswerCallRequestMapper,
  RejectCallRequest as RejectCallRequestMapper,
  RedirectCallRequest as RedirectCallRequestMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const endpoint: OperationURLParameter = {
  parameterPath: "endpoint",
  mapper: {
    serializedName: "endpoint",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const callConnectionId: OperationURLParameter = {
  parameterPath: "callConnectionId",
  mapper: {
    serializedName: "callConnectionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const audioRoutingGroupId: OperationURLParameter = {
  parameterPath: "audioRoutingGroupId",
  mapper: {
    serializedName: "audioRoutingGroupId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2021-11-15-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const updateAudioRoutingGroupRequest: OperationParameter = {
  parameterPath: "updateAudioRoutingGroupRequest",
  mapper: UpdateAudioRoutingGroupRequestMapper
};

export const callRequest: OperationParameter = {
  parameterPath: "callRequest",
  mapper: CreateCallRequestMapper
};

export const playAudioRequest: OperationParameter = {
  parameterPath: "playAudioRequest",
  mapper: PlayAudioRequestMapper
};

export const transferToParticipantRequest: OperationParameter = {
  parameterPath: "transferToParticipantRequest",
  mapper: TransferToParticipantRequestMapper
};

export const transferToCallRequest: OperationParameter = {
  parameterPath: "transferToCallRequest",
  mapper: TransferToCallRequestMapper
};

export const audioRoutingGroupRequest: OperationParameter = {
  parameterPath: "audioRoutingGroupRequest",
  mapper: AudioRoutingGroupRequestMapper
};

export const addParticipantRequest: OperationParameter = {
  parameterPath: "addParticipantRequest",
  mapper: AddParticipantRequestMapper
};

export const removeParticipantRequest: OperationParameter = {
  parameterPath: "removeParticipantRequest",
  mapper: RemoveParticipantRequestMapper
};

export const getParticipantRequest: OperationParameter = {
  parameterPath: "getParticipantRequest",
  mapper: GetParticipantRequestMapper
};

export const playAudioToParticipantRequest: OperationParameter = {
  parameterPath: "playAudioToParticipantRequest",
  mapper: PlayAudioToParticipantRequestMapper
};

export const cancelMediaOperationRequest: OperationParameter = {
  parameterPath: "cancelMediaOperationRequest",
  mapper: CancelParticipantMediaOperationRequestMapper
};

export const muteParticipantRequest: OperationParameter = {
  parameterPath: "muteParticipantRequest",
  mapper: MuteParticipantRequestMapper
};

export const unmuteParticipantRequest: OperationParameter = {
  parameterPath: "unmuteParticipantRequest",
  mapper: UnmuteParticipantRequestMapper
};

export const holdMeetingAudioRequest: OperationParameter = {
  parameterPath: "holdMeetingAudioRequest",
  mapper: HoldMeetingAudioRequestMapper
};

export const resumeMeetingAudioRequest: OperationParameter = {
  parameterPath: "resumeMeetingAudioRequest",
  mapper: ResumeMeetingAudioRequestMapper
};

export const getAllParticipantsWithCallLocatorRequest: OperationParameter = {
  parameterPath: "getAllParticipantsWithCallLocatorRequest",
  mapper: GetAllParticipantsWithCallLocatorRequestMapper
};

export const addParticipantWithCallLocatorRequest: OperationParameter = {
  parameterPath: "addParticipantWithCallLocatorRequest",
  mapper: AddParticipantWithCallLocatorRequestMapper
};

export const removeParticipantWithCallLocatorRequest: OperationParameter = {
  parameterPath: "removeParticipantWithCallLocatorRequest",
  mapper: RemoveParticipantWithCallLocatorRequestMapper
};

export const getParticipantWithCallLocatorRequest: OperationParameter = {
  parameterPath: "getParticipantWithCallLocatorRequest",
  mapper: GetParticipantWithCallLocatorRequestMapper
};

export const playAudioToParticipantRequest1: OperationParameter = {
  parameterPath: "playAudioToParticipantRequest",
  mapper: PlayAudioToParticipantWithCallLocatorRequestMapper
};

export const cancelParticipantMediaOperationRequest: OperationParameter = {
  parameterPath: "cancelParticipantMediaOperationRequest",
  mapper: CancelParticipantMediaOperationWithCallLocatorRequestMapper
};

export const startCallRecordingWithCallLocatorRequest: OperationParameter = {
  parameterPath: "startCallRecordingWithCallLocatorRequest",
  mapper: StartCallRecordingWithCallLocatorRequestMapper
};

export const recordingId: OperationURLParameter = {
  parameterPath: "recordingId",
  mapper: {
    serializedName: "recordingId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const callRequest1: OperationParameter = {
  parameterPath: "callRequest",
  mapper: JoinCallRequestMapper
};

export const playAudioRequest1: OperationParameter = {
  parameterPath: "playAudioRequest",
  mapper: PlayAudioWithCallLocatorRequestMapper
};

export const cancelMediaOperationRequest1: OperationParameter = {
  parameterPath: "cancelMediaOperationRequest",
  mapper: CancelMediaOperationWithCallLocatorRequestMapper
};

export const answerCallRequest: OperationParameter = {
  parameterPath: "answerCallRequest",
  mapper: AnswerCallRequestMapper
};

export const rejectCallRequest: OperationParameter = {
  parameterPath: "rejectCallRequest",
  mapper: RejectCallRequestMapper
};

export const redirectCallRequest: OperationParameter = {
  parameterPath: "redirectCallRequest",
  mapper: RedirectCallRequestMapper
};
