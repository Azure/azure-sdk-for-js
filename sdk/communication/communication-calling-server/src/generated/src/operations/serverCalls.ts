/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CallingServerApiClientContext } from "../callingServerApiClientContext";
import {
  GetAllParticipantsWithCallLocatorRequest,
  ServerCallsGetParticipantsResponse,
  AddParticipantWithCallLocatorRequest,
  ServerCallsAddParticipantResponse,
  RemoveParticipantWithCallLocatorRequest,
  GetParticipantWithCallLocatorRequest,
  ServerCallsGetParticipantResponse,
  PlayAudioToParticipantWithCallLocatorRequest,
  ServerCallsParticipantPlayAudioResponse,
  CancelParticipantMediaOperationWithCallLocatorRequest,
  StartCallRecordingWithCallLocatorRequest,
  ServerCallsStartRecordingResponse,
  ServerCallsGetRecordingPropertiesResponse,
  JoinCallRequest,
  ServerCallsJoinCallResponse,
  PlayAudioWithCallLocatorRequest,
  ServerCallsPlayAudioResponse,
  CancelMediaOperationWithCallLocatorRequest,
  AnswerCallRequest,
  ServerCallsAnswerCallResponse,
  RejectCallRequest,
  RedirectCallRequest
} from "../models";

/** Class representing a ServerCalls. */
export class ServerCalls {
  private readonly client: CallingServerApiClientContext;

  /**
   * Initialize a new instance of the class ServerCalls class.
   * @param client Reference to the service client
   */
  constructor(client: CallingServerApiClientContext) {
    this.client = client;
  }

  /**
   * Get participants from a server call.
   * @param getAllParticipantsWithCallLocatorRequest The request payload for getting all the
   *                                                 participants.
   * @param options The options parameters.
   */
  getParticipants(
    getAllParticipantsWithCallLocatorRequest: GetAllParticipantsWithCallLocatorRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ServerCallsGetParticipantsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      getAllParticipantsWithCallLocatorRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getParticipantsOperationSpec
    ) as Promise<ServerCallsGetParticipantsResponse>;
  }

  /**
   * Add a participant to the call.
   * @param addParticipantWithCallLocatorRequest The add participant request using call locator.
   * @param options The options parameters.
   */
  addParticipant(
    addParticipantWithCallLocatorRequest: AddParticipantWithCallLocatorRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ServerCallsAddParticipantResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      addParticipantWithCallLocatorRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      addParticipantOperationSpec
    ) as Promise<ServerCallsAddParticipantResponse>;
  }

  /**
   * Remove participant from the call using identifier.
   * @param removeParticipantWithCallLocatorRequest The identifier of the participant to be removed from
   *                                                the call.
   * @param options The options parameters.
   */
  removeParticipant(
    removeParticipantWithCallLocatorRequest: RemoveParticipantWithCallLocatorRequest,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      removeParticipantWithCallLocatorRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      removeParticipantOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get participant from the call using identifier.
   * @param getParticipantWithCallLocatorRequest The get participant request.
   * @param options The options parameters.
   */
  getParticipant(
    getParticipantWithCallLocatorRequest: GetParticipantWithCallLocatorRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ServerCallsGetParticipantResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      getParticipantWithCallLocatorRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getParticipantOperationSpec
    ) as Promise<ServerCallsGetParticipantResponse>;
  }

  /**
   * Play audio to a participant.
   * @param playAudioToParticipantRequest The play audio to participant request.
   * @param options The options parameters.
   */
  participantPlayAudio(
    playAudioToParticipantRequest: PlayAudioToParticipantWithCallLocatorRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ServerCallsParticipantPlayAudioResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      playAudioToParticipantRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      participantPlayAudioOperationSpec
    ) as Promise<ServerCallsParticipantPlayAudioResponse>;
  }

  /**
   * cancel media operation for a participant.
   * @param cancelParticipantMediaOperationRequest The cancel participant media operation request
   * @param options The options parameters.
   */
  cancelParticipantMediaOperation(
    cancelParticipantMediaOperationRequest: CancelParticipantMediaOperationWithCallLocatorRequest,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      cancelParticipantMediaOperationRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      cancelParticipantMediaOperationOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Start recording the call.
   * @param startCallRecordingWithCallLocatorRequest The request body of start call recording request.
   * @param options The options parameters.
   */
  startRecording(
    startCallRecordingWithCallLocatorRequest: StartCallRecordingWithCallLocatorRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ServerCallsStartRecordingResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      startCallRecordingWithCallLocatorRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      startRecordingOperationSpec
    ) as Promise<ServerCallsStartRecordingResponse>;
  }

  /**
   * Get call recording properties.
   * @param recordingId The recording id.
   * @param options The options parameters.
   */
  getRecordingProperties(
    recordingId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ServerCallsGetRecordingPropertiesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      recordingId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getRecordingPropertiesOperationSpec
    ) as Promise<ServerCallsGetRecordingPropertiesResponse>;
  }

  /**
   * Stop recording the call.
   * @param recordingId The recording id.
   * @param options The options parameters.
   */
  stopRecording(
    recordingId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      recordingId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      stopRecordingOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Pause recording the call.
   * @param recordingId The recording id.
   * @param options The options parameters.
   */
  pauseRecording(
    recordingId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      recordingId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      pauseRecordingOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Resume recording the call.
   * @param recordingId The recording id.
   * @param options The options parameters.
   */
  resumeRecording(
    recordingId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      recordingId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      resumeRecordingOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Join a call.
   * @param callRequest The join call request.
   * @param options The options parameters.
   */
  joinCall(
    callRequest: JoinCallRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ServerCallsJoinCallResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      callRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      joinCallOperationSpec
    ) as Promise<ServerCallsJoinCallResponse>;
  }

  /**
   * Play audio in the call.
   * @param playAudioRequest Play audio request.
   * @param options The options parameters.
   */
  playAudio(
    playAudioRequest: PlayAudioWithCallLocatorRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ServerCallsPlayAudioResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      playAudioRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      playAudioOperationSpec
    ) as Promise<ServerCallsPlayAudioResponse>;
  }

  /**
   * cancel media operation.
   * @param cancelMediaOperationRequest The cancel media operation request
   * @param options The options parameters.
   */
  cancelMediaOperation(
    cancelMediaOperationRequest: CancelMediaOperationWithCallLocatorRequest,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      cancelMediaOperationRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      cancelMediaOperationOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Answer the call.
   * @param answerCallRequest The answer call request.
   * @param options The options parameters.
   */
  answerCall(
    answerCallRequest: AnswerCallRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ServerCallsAnswerCallResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      answerCallRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      answerCallOperationSpec
    ) as Promise<ServerCallsAnswerCallResponse>;
  }

  /**
   * Reject the call.
   * @param rejectCallRequest The reject call request.
   * @param options The options parameters.
   */
  rejectCall(
    rejectCallRequest: RejectCallRequest,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      rejectCallRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      rejectCallOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Redirect the call.
   * @param redirectCallRequest The redirect call request.
   * @param options The options parameters.
   */
  redirectCall(
    redirectCallRequest: RedirectCallRequest,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      redirectCallRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      redirectCallOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getParticipantsOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/participants:getAll",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "CallParticipant" } }
        }
      }
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.getAllParticipantsWithCallLocatorRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const addParticipantOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/participants",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.AddParticipantResult
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.addParticipantWithCallLocatorRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const removeParticipantOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/participants:remove",
  httpMethod: "POST",
  responses: {
    202: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.removeParticipantWithCallLocatorRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getParticipantOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/participants:get",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CallParticipant
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.getParticipantWithCallLocatorRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const participantPlayAudioOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/participants:playAudio",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.PlayAudioResult
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.playAudioToParticipantRequest1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const cancelParticipantMediaOperationOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/participants:cancelMediaOperation",
  httpMethod: "POST",
  responses: {
    200: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.cancelParticipantMediaOperationRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const startRecordingOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/recordings",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.StartCallRecordingResult
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.startCallRecordingWithCallLocatorRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getRecordingPropertiesOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/recordings/{recordingId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CallRecordingProperties
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.recordingId],
  headerParameters: [Parameters.accept],
  serializer
};
const stopRecordingOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/recordings/{recordingId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.recordingId],
  headerParameters: [Parameters.accept],
  serializer
};
const pauseRecordingOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/recordings/{recordingId}/:pause",
  httpMethod: "POST",
  responses: {
    200: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.recordingId],
  headerParameters: [Parameters.accept],
  serializer
};
const resumeRecordingOperationSpec: coreHttp.OperationSpec = {
  path: "/calling/recordings/{recordingId}/:resume",
  httpMethod: "POST",
  responses: {
    200: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.recordingId],
  headerParameters: [Parameters.accept],
  serializer
};
const joinCallOperationSpec: coreHttp.OperationSpec = {
  path: "/calling:join",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.JoinCallResult
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.callRequest1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const playAudioOperationSpec: coreHttp.OperationSpec = {
  path: "/calling:playAudio",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.PlayAudioResult
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.playAudioRequest1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const cancelMediaOperationOperationSpec: coreHttp.OperationSpec = {
  path: "/calling:cancelMediaOperation",
  httpMethod: "POST",
  responses: {
    200: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.cancelMediaOperationRequest1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const answerCallOperationSpec: coreHttp.OperationSpec = {
  path: "/calling:answer",
  httpMethod: "POST",
  responses: {
    202: {
      bodyMapper: Mappers.AnswerCallResult
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.answerCallRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const rejectCallOperationSpec: coreHttp.OperationSpec = {
  path: "/calling:reject",
  httpMethod: "POST",
  responses: {
    202: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.rejectCallRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const redirectCallOperationSpec: coreHttp.OperationSpec = {
  path: "/calling:redirect",
  httpMethod: "POST",
  responses: {
    202: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.redirectCallRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
