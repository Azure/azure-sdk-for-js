// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { isNode } from "@azure/core-http";
import { ContentDownloadResult } from ".";
import {
  ReadableStreamGetter,
  RetriableReadableStream,
  RetriableReadableStreamOptions
} from "./utils/RetriableReadableStream";

/**
 * ONLY AVAILABLE IN NODE.JS RUNTIME.
 *
 * RepeatableContentDownloadResponse implements ContentDownloadResponse interface, and in Node.js runtime it will
 * automatically retry when internal read stream unexpected ends. (This kind of unexpected ends cannot
 * trigger retries defined in pipeline retry policy.)
 *
 * The {@link readableStreamBody} stream will retry underlayer, you can just use it as a normal Node.js
 * Readable stream.
 */
export class RepeatableContentDownloadResult implements ContentDownloadResult {
  /**
   * The number of bytes present in the
   * response body.
   *
   * @readonly
   */
  public get contentLength(): number | undefined {
    return this.originalResponse.contentLength;
  }

  /**
   * Indicates the range of bytes returned if
   * the client requested a subset of the content by setting the Range request
   * header.
   *
   * @readonly
   */
  public get contentRange(): string | undefined {
    return this.originalResponse.contentRange;
  }

  /**
   * The content type specified for the content.
   * The default content type is 'application/octet-stream'
   *
   * @readonly
   */
  public get contentType(): string | undefined {
    return this.originalResponse.contentType;
  }

  /**
   * A UTC date/time value generated by the service that
   * indicates the time at which the response was initiated.
   *
   * @readonly
   */
  public get date(): Date | undefined {
    return this.originalResponse.date;
  }

  /**
   * The error code.
   *
   * @readonly
   */
  public get errorCode(): string | undefined {
    return this.originalResponse.errorCode;
  }

  /**
   * The response body as a browser Blob.
   * Always undefined in node.js.
   *
   * @readonly
   */
  public get contentAsBlob(): Promise<Blob> | undefined {
    return this.originalResponse.blobBody;
  }

  /**
   * The response body as a node.js Readable stream.
   * Always undefined in the browser.
   *
   * It will automatically retry when internal read stream unexpected ends.
   *
   * @readonly
   */
  public get readableStreamBody(): NodeJS.ReadableStream | undefined {
    return isNode ? this.blobDownloadStream : undefined;
  }

  private originalResponse: ContentDownloadResult;
  private blobDownloadStream?: RetriableReadableStream;

  /**
   * Creates an instance of ContentDownloadResponse.
   *
   * @param originalResponse -
   * @param getter -
   * @param offset -
   * @param count -
   * @param options -
   */
  public constructor(
    originalResponse: ContentDownloadResult,
    getter: ReadableStreamGetter,
    offset: number,
    count: number,
    options: RetriableReadableStreamOptions = {}
  ) {
    this.originalResponse = originalResponse;
    this.blobDownloadStream = new RetriableReadableStream(
      this.originalResponse.readableStreamBody!,
      getter,
      offset,
      count,
      options
    );
  }
}
