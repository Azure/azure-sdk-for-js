{"version":3,"file":"identifierModels.js","sourceRoot":"","sources":["../../src/identifierModels.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Identifies a communication participant.\n */\nexport type CommunicationIdentifier =\n  | CommunicationUserIdentifier\n  | PhoneNumberIdentifier\n  | MicrosoftTeamsUserIdentifier\n  | MicrosoftTeamsAppIdentifier\n  | TeamsExtensionUserIdentifier\n  | UnknownIdentifier;\n\n/**\n * An Azure Communication user.\n */\nexport interface CommunicationUserIdentifier {\n  /**\n   * Id of the CommunicationUser as returned from the Communication Service.\n   */\n  communicationUserId: string;\n}\n\n/**\n * A phone number.\n */\nexport interface PhoneNumberIdentifier {\n  /**\n   * Optional raw id of the phone number.\n   */\n  rawId?: string;\n  /**\n   * The phone number in E.164 format.\n   */\n  phoneNumber: string;\n\n  /**\n   * The asserted Id is set on a phone number that is already in the same call to distinguish from other connections made through the same number.\n   */\n  assertedId?: string;\n\n  /**\n   * True if the phone number is anonymous.\n   */\n  isAnonymous?: boolean;\n}\n\n/**\n * A Microsoft Teams user.\n */\nexport interface MicrosoftTeamsUserIdentifier {\n  /**\n   * Optional raw id of the Microsoft Teams user.\n   */\n  rawId?: string;\n\n  /**\n   * Id of the Microsoft Teams user. If the user isn't anonymous, the id is the Entra ID object id of the user.\n   */\n  microsoftTeamsUserId: string;\n\n  /**\n   * True if the user is anonymous, for example when joining a meeting with a share link. If missing, the user is not anonymous.\n   */\n  isAnonymous?: boolean;\n\n  /**\n   * The cloud that the Microsoft Teams user belongs to. If missing, the cloud is \"public\".\n   */\n  cloud?: \"public\" | \"dod\" | \"gcch\";\n}\n\n/**\n * A Microsoft Teams App.\n */\nexport interface MicrosoftTeamsAppIdentifier {\n  /**\n   * Optional raw id of the Microsoft Teams App.\n   */\n  rawId?: string;\n\n  /**\n   * The unique Microsoft Teams app ID.\n   */\n  teamsAppId: string;\n\n  /**\n   * The cloud that the Microsoft Teams App belongs to. If missing, the cloud is \"public\".\n   */\n  cloud?: \"public\" | \"dod\" | \"gcch\";\n}\n\n/**\n * A Microsoft Teams Phone user who is using the Azure Communication Services resource to extend their Teams Phone set up.\n */\nexport interface TeamsExtensionUserIdentifier {\n  /**\n   * Optional raw id of the Microsoft Teams Extension user.\n   */\n  rawId?: string;\n\n  /**\n   * The Id of the Microsoft Teams Extension user, i.e. the Entra ID object Id of the user.\n   */\n  userId: string;\n\n  /**\n   * The tenant Id of the Microsoft Teams Extension user.\n   */\n  tenantId: string;\n\n  /**\n   * The Azure Communication Services resource Id.\n   */\n  resourceId: string;\n\n  /**\n   * The cloud that the Microsoft Teams Extension user belongs to. If missing, the cloud is \"public\".\n   */\n  cloud?: \"public\" | \"dod\" | \"gcch\";\n}\n\n/**\n * An unknown identifier that doesn't fit any of the other identifier types.\n */\nexport interface UnknownIdentifier {\n  /**\n   * Id of the UnknownIdentifier.\n   */\n  id: string;\n}\n\n/**\n * Tests an Identifier to determine whether it implements CommunicationUserIdentifier.\n *\n * @param identifier - The assumed CommunicationUserIdentifier to be tested.\n */\nexport const isCommunicationUserIdentifier = (\n  identifier: CommunicationIdentifier,\n): identifier is CommunicationUserIdentifier => {\n  return typeof (identifier as any).communicationUserId === \"string\";\n};\n\n/**\n * Tests an Identifier to determine whether it implements PhoneNumberIdentifier.\n *\n * @param identifier - The assumed PhoneNumberIdentifier to be tested.\n */\nexport const isPhoneNumberIdentifier = (\n  identifier: CommunicationIdentifier,\n): identifier is PhoneNumberIdentifier => {\n  return typeof (identifier as any).phoneNumber === \"string\";\n};\n\n/**\n * Tests an Identifier to determine whether it implements MicrosoftTeamsUserIdentifier.\n *\n * @param identifier - The assumed available to be tested.\n */\nexport const isMicrosoftTeamsUserIdentifier = (\n  identifier: CommunicationIdentifier,\n): identifier is MicrosoftTeamsUserIdentifier => {\n  return typeof (identifier as any).microsoftTeamsUserId === \"string\";\n};\n\n/**\n * Tests an Identifier to determine whether it implements MicrosoftTeamsAppIdentifier.\n *\n * @param identifier - The assumed available to be tested.\n */\nexport const isMicrosoftTeamsAppIdentifier = (\n  identifier: CommunicationIdentifier,\n): identifier is MicrosoftTeamsAppIdentifier => {\n  return typeof (identifier as any).teamsAppId === \"string\";\n};\n\n/**\n * Tests an Identifier to determine whether it implements TeamsExtensionUserIdentifier.\n *\n * @param identifier - The assumed available to be tested.\n */\nexport const isTeamsExtensionUserIdentifier = (\n  identifier: CommunicationIdentifier,\n): identifier is TeamsExtensionUserIdentifier => {\n  const userIdExists = typeof (identifier as any).userId === \"string\";\n  const tenantIdExists = typeof (identifier as any).tenantId === \"string\";\n  const resourceIdExists = typeof (identifier as any).resourceId === \"string\";\n  return userIdExists && tenantIdExists && resourceIdExists;\n};\n\n/**\n * Tests an Identifier to determine whether it implements UnknownIdentifier.\n *\n * @param identifier - The assumed UnknownIdentifier to be tested.\n */\nexport const isUnknownIdentifier = (\n  identifier: CommunicationIdentifier,\n): identifier is UnknownIdentifier => {\n  return typeof (identifier as any).id === \"string\";\n};\n\n/**\n * The CommunicationIdentifierKind is a discriminated union that adds a property `kind` to an Identifier.\n */\nexport type CommunicationIdentifierKind =\n  | CommunicationUserKind\n  | PhoneNumberKind\n  | MicrosoftTeamsUserKind\n  | MicrosoftTeamsAppKind\n  | TeamsExtensionUserKind\n  | UnknownIdentifierKind;\n\n/**\n * IdentifierKind for a CommunicationUserIdentifier.\n */\nexport interface CommunicationUserKind extends CommunicationUserIdentifier {\n  /**\n   * The identifier kind.\n   */\n  kind: \"communicationUser\";\n}\n\n/**\n * IdentifierKind for a PhoneNumberIdentifier.\n */\nexport interface PhoneNumberKind extends PhoneNumberIdentifier {\n  /**\n   * The identifier kind.\n   */\n  kind: \"phoneNumber\";\n}\n\n/**\n * IdentifierKind for a MicrosoftTeamsUserIdentifier.\n */\nexport interface MicrosoftTeamsUserKind extends MicrosoftTeamsUserIdentifier {\n  /**\n   * The identifier kind.\n   */\n  kind: \"microsoftTeamsUser\";\n}\n\n/**\n * IdentifierKind for a MicrosoftTeamsAppIdentifier.\n */\nexport interface MicrosoftTeamsAppKind extends MicrosoftTeamsAppIdentifier {\n  /**\n   * The identifier kind.\n   */\n  kind: \"microsoftTeamsApp\";\n}\n\n/**\n * IdentifierKind for a TeamsExtensionUserIdentifier.\n */\nexport interface TeamsExtensionUserKind extends TeamsExtensionUserIdentifier {\n  /**\n   * The identifier kind.\n   */\n  kind: \"teamsExtensionUser\";\n}\n\n/**\n * IdentifierKind for UnknownIdentifier.\n */\nexport interface UnknownIdentifierKind extends UnknownIdentifier {\n  /**\n   * The identifier kind.\n   */\n  kind: \"unknown\";\n}\n\n/**\n * Returns the CommunicationIdentifierKind for a given CommunicationIdentifier. Returns undefined if the kind couldn't be inferred.\n *\n * @param identifier - The identifier whose kind is to be inferred.\n */\nexport const getIdentifierKind = (\n  identifier: CommunicationIdentifier,\n): CommunicationIdentifierKind => {\n  if (isCommunicationUserIdentifier(identifier)) {\n    return { ...identifier, kind: \"communicationUser\" };\n  }\n  if (isPhoneNumberIdentifier(identifier)) {\n    return { ...identifier, kind: \"phoneNumber\" };\n  }\n  if (isMicrosoftTeamsUserIdentifier(identifier)) {\n    return { ...identifier, kind: \"microsoftTeamsUser\" };\n  }\n  if (isMicrosoftTeamsAppIdentifier(identifier)) {\n    return { ...identifier, kind: \"microsoftTeamsApp\" };\n  }\n  if (isTeamsExtensionUserIdentifier(identifier)) {\n    return { ...identifier, kind: \"teamsExtensionUser\" };\n  }\n  return { ...identifier, kind: \"unknown\" };\n};\n\n/**\n * Returns the rawId for a given CommunicationIdentifier. You can use the rawId for encoding the identifier and then use it as a key in a database.\n *\n * @param identifier - The identifier to be translated to its rawId.\n */\nexport const getIdentifierRawId = (identifier: CommunicationIdentifier): string => {\n  const identifierKind = getIdentifierKind(identifier);\n  switch (identifierKind.kind) {\n    case \"communicationUser\":\n      return identifierKind.communicationUserId;\n    case \"microsoftTeamsUser\": {\n      const { microsoftTeamsUserId, rawId, cloud, isAnonymous } = identifierKind;\n      if (rawId) return rawId;\n      if (isAnonymous) return `8:teamsvisitor:${microsoftTeamsUserId}`;\n      switch (cloud) {\n        case \"dod\":\n          return `8:dod:${microsoftTeamsUserId}`;\n        case \"gcch\":\n          return `8:gcch:${microsoftTeamsUserId}`;\n        case \"public\":\n          return `8:orgid:${microsoftTeamsUserId}`;\n      }\n      return `8:orgid:${microsoftTeamsUserId}`;\n    }\n    case \"microsoftTeamsApp\": {\n      const { teamsAppId, rawId, cloud } = identifierKind;\n      if (rawId) return rawId;\n      switch (cloud) {\n        case \"dod\":\n          return `28:dod:${teamsAppId}`;\n        case \"gcch\":\n          return `28:gcch:${teamsAppId}`;\n      }\n      return `28:orgid:${teamsAppId}`;\n    }\n    case \"phoneNumber\": {\n      const { phoneNumber, rawId } = identifierKind;\n      if (rawId) return rawId;\n      return `4:${phoneNumber}`;\n    }\n    case \"teamsExtensionUser\": {\n      const { userId, tenantId, resourceId, rawId, cloud } = identifierKind;\n      if (rawId) return rawId;\n      switch (cloud) {\n        case \"dod\":\n          return `8:dod-acs:${resourceId}_${tenantId}_${userId}`;\n        case \"gcch\":\n          return `8:gcch-acs:${resourceId}_${tenantId}_${userId}`;\n      }\n      return `8:acs:${resourceId}_${tenantId}_${userId}`;\n    }\n    case \"unknown\": {\n      return identifierKind.id;\n    }\n  }\n};\n\nconst buildMicrosoftTeamsAppIdentifier = (\n  teamsAppId: string,\n  cloud: \"public\" | \"dod\" | \"gcch\",\n): CommunicationIdentifierKind => {\n  return {\n    kind: \"microsoftTeamsApp\",\n    teamsAppId: teamsAppId,\n    cloud: cloud,\n  };\n};\n\nconst buildMicrosoftTeamsUserIdentifier = (\n  id: string,\n  cloud: \"public\" | \"dod\" | \"gcch\",\n  isAnonymous: boolean,\n): CommunicationIdentifierKind => {\n  return {\n    kind: \"microsoftTeamsUser\",\n    microsoftTeamsUserId: id,\n    isAnonymous: isAnonymous,\n    cloud: cloud,\n  };\n};\n\nconst buildTeamsExtensionUserOrCommunicationUserIdentifier = (\n  rawId: string,\n  suffix: string,\n  cloud: \"public\" | \"dod\" | \"gcch\",\n): CommunicationIdentifierKind => {\n  const segments = suffix.split(\"_\");\n  if (segments.length !== 3) {\n    return { kind: \"communicationUser\", communicationUserId: rawId };\n  }\n\n  const resourceId = segments[0];\n  const tenantId = segments[1];\n  const userId = segments[2];\n  return {\n    kind: \"teamsExtensionUser\",\n    userId: userId,\n    tenantId: tenantId,\n    resourceId: resourceId,\n    cloud: cloud,\n  };\n};\n\nconst buildPhoneNumberIdentifier = (rawId: string): CommunicationIdentifierKind => {\n  const phoneNumber = rawId.substring(\"4:\".length);\n  const isAnonymous = phoneNumber === \"anonymous\";\n  const assertedIdIndex = isAnonymous ? -1 : phoneNumber.lastIndexOf(\"_\") + 1;\n  const hasAssertedId = assertedIdIndex > 0 && assertedIdIndex < phoneNumber.length;\n  const assertedId = hasAssertedId ? phoneNumber.substring(assertedIdIndex) : undefined;\n\n  return {\n    kind: \"phoneNumber\",\n    phoneNumber: phoneNumber,\n    isAnonymous: isAnonymous,\n    assertedId: assertedId,\n  };\n};\n\n/**\n * Creates a CommunicationIdentifierKind from a given rawId. When storing rawIds use this function to restore the identifier that was encoded in the rawId.\n *\n * @param rawId - The rawId to be translated to its identifier representation.\n */\nexport const createIdentifierFromRawId = (rawId: string): CommunicationIdentifierKind => {\n  if (rawId.startsWith(\"4:\")) {\n    return buildPhoneNumberIdentifier(rawId);\n  }\n\n  const segments = rawId.split(\":\");\n  if (segments.length !== 3) {\n    return { kind: \"unknown\", id: rawId };\n  }\n\n  const prefix = `${segments[0]}:${segments[1]}:`;\n  const suffix = segments[2];\n\n  switch (prefix) {\n    case \"8:teamsvisitor:\":\n      return { kind: \"microsoftTeamsUser\", microsoftTeamsUserId: suffix, isAnonymous: true };\n    case \"8:orgid:\":\n      return buildMicrosoftTeamsUserIdentifier(suffix, \"public\", false);\n    case \"8:dod:\":\n      return buildMicrosoftTeamsUserIdentifier(suffix, \"dod\", false);\n    case \"8:gcch:\":\n      return buildMicrosoftTeamsUserIdentifier(suffix, \"gcch\", false);\n    case \"8:acs:\":\n      return buildTeamsExtensionUserOrCommunicationUserIdentifier(rawId, suffix, \"public\");\n    case \"8:dod-acs:\":\n      return buildTeamsExtensionUserOrCommunicationUserIdentifier(rawId, suffix, \"dod\");\n    case \"8:gcch-acs:\":\n      return buildTeamsExtensionUserOrCommunicationUserIdentifier(rawId, suffix, \"gcch\");\n    case \"8:spool:\":\n      return { kind: \"communicationUser\", communicationUserId: rawId };\n    case \"28:orgid:\":\n      return buildMicrosoftTeamsAppIdentifier(suffix, \"public\");\n    case \"28:gcch:\":\n      return buildMicrosoftTeamsAppIdentifier(suffix, \"gcch\");\n    case \"28:dod:\":\n      return buildMicrosoftTeamsAppIdentifier(suffix, \"dod\");\n  }\n  return { kind: \"unknown\", id: rawId };\n};\n"]}