/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing.js";
import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { EntraIdAssignments } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { IdentityRestClient } from "../identityRestClient.js";
import {
  EntraAssignment,
  EntraAssignmentCreateOrUpdateRequest,
  EntraIdAssignmentsUpdateNextOptionalParams,
  EntraIdAssignmentsUpdateOptionalParams,
  EntraIdAssignmentsUpdateResponse,
  EntraIdAssignmentsListOptionalParams,
  EntraIdAssignmentsListResponse,
  EntraIdAssignmentsUpdateNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing EntraIdAssignments operations. */
export class EntraIdAssignmentsImpl implements EntraIdAssignments {
  private readonly client: IdentityRestClient;

  /**
   * Initialize a new instance of the class EntraIdAssignments class.
   * @param client Reference to the service client
   */
  constructor(client: IdentityRestClient) {
    this.client = client;
  }

  /**
   * Updates Entra access assignments in bulk.
   * @param body Set of assignments to be added, updated or removed.
   * @param options The options parameters.
   */
  public listUpdate(
    body: { [propertyName: string]: EntraAssignmentCreateOrUpdateRequest },
    options?: EntraIdAssignmentsUpdateOptionalParams,
  ): PagedAsyncIterableIterator<EntraAssignment> {
    const iter = this.updatePagingAll(body, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.updatePagingPage(body, options, settings);
      },
    };
  }

  private async *updatePagingPage(
    body: { [propertyName: string]: EntraAssignmentCreateOrUpdateRequest },
    options?: EntraIdAssignmentsUpdateOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<EntraAssignment[]> {
    let result: EntraIdAssignmentsUpdateResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._update(body, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._updateNext(body, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *updatePagingAll(
    body: { [propertyName: string]: EntraAssignmentCreateOrUpdateRequest },
    options?: EntraIdAssignmentsUpdateOptionalParams,
  ): AsyncIterableIterator<EntraAssignment> {
    for await (const page of this.updatePagingPage(body, options)) {
      yield* page;
    }
  }

  /**
   * Updates Entra access assignments in bulk.
   * @param body Set of assignments to be added, updated or removed.
   * @param options The options parameters.
   */
  private async _update(
    body: { [propertyName: string]: EntraAssignmentCreateOrUpdateRequest },
    options?: EntraIdAssignmentsUpdateOptionalParams,
  ): Promise<EntraIdAssignmentsUpdateResponse> {
    return tracingClient.withSpan(
      "IdentityRestClient._update",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { body, options },
          updateOperationSpec,
        ) as Promise<EntraIdAssignmentsUpdateResponse>;
      },
    );
  }

  /**
   * Lists Entra access assignments.
   * @param options The options parameters.
   */
  async list(
    options?: EntraIdAssignmentsListOptionalParams,
  ): Promise<EntraIdAssignmentsListResponse> {
    return tracingClient.withSpan(
      "IdentityRestClient.list",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          listOperationSpec,
        ) as Promise<EntraIdAssignmentsListResponse>;
      },
    );
  }

  /**
   * UpdateNext
   * @param body Set of assignments to be added, updated or removed.
   * @param nextLink The nextLink from the previous successful call to the Update method.
   * @param options The options parameters.
   */
  private async _updateNext(
    body: { [propertyName: string]: EntraAssignmentCreateOrUpdateRequest },
    nextLink: string,
    options?: EntraIdAssignmentsUpdateNextOptionalParams,
  ): Promise<EntraIdAssignmentsUpdateNextResponse> {
    return tracingClient.withSpan(
      "IdentityRestClient._updateNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { body, nextLink, options },
          updateNextOperationSpec,
        ) as Promise<EntraIdAssignmentsUpdateNextResponse>;
      },
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const updateOperationSpec: coreClient.OperationSpec = {
  path: "/access/entra/assignments",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.EntraAssignmentsResponse,
    },
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  requestBody: Parameters.body5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/access/entra/assignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EntraAssignmentsResponse,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EntraAssignmentsResponse,
    },
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer,
};
