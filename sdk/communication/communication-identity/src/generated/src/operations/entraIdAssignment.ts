/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing.js";
import { EntraIdAssignment } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { IdentityRestClient } from "../identityRestClient.js";
import {
  EntraIdAssignmentGetOptionalParams,
  EntraIdAssignmentGetResponse,
  EntraPrincipalType,
  EntraIdAssignmentUpsertOptionalParams,
  EntraIdAssignmentUpsertResponse,
  EntraIdAssignmentDeleteOptionalParams,
} from "../models/index.js";

/** Class containing EntraIdAssignment operations. */
export class EntraIdAssignmentImpl implements EntraIdAssignment {
  private readonly client: IdentityRestClient;

  /**
   * Initialize a new instance of the class EntraIdAssignment class.
   * @param client Reference to the service client
   */
  constructor(client: IdentityRestClient) {
    this.client = client;
  }

  /**
   * Get Entra access assignment by object id.
   * @param objectId objectId we want to get the assignment for. AcsResourceId is taken from
   *                 authentication.
   * @param options The options parameters.
   */
  async get(
    objectId: string,
    options?: EntraIdAssignmentGetOptionalParams,
  ): Promise<EntraIdAssignmentGetResponse> {
    return tracingClient.withSpan(
      "IdentityRestClient.get",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { objectId, options },
          getOperationSpec,
        ) as Promise<EntraIdAssignmentGetResponse>;
      },
    );
  }

  /**
   * Creates or replaces an Entra access assignment.
   * @param objectId objectId we want to update the assignment for.
   * @param tenantId
   * @param principalType
   * @param clientIds Array of EntraAssignmentCreateOrUpdateRequestClientIdsItem
   * @param options The options parameters.
   */
  async upsert(
    objectId: string,
    tenantId: string,
    principalType: EntraPrincipalType,
    clientIds: string[],
    options?: EntraIdAssignmentUpsertOptionalParams,
  ): Promise<EntraIdAssignmentUpsertResponse> {
    return tracingClient.withSpan(
      "IdentityRestClient.upsert",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { objectId, tenantId, principalType, clientIds, options },
          upsertOperationSpec,
        ) as Promise<EntraIdAssignmentUpsertResponse>;
      },
    );
  }

  /**
   * Removes an Entra access assignment.
   * @param objectId objectId we want to remove the assignment for. AcsResourceId is taken from
   *                 authentication.
   * @param options The options parameters.
   */
  async delete(
    objectId: string,
    options?: EntraIdAssignmentDeleteOptionalParams,
  ): Promise<void> {
    return tracingClient.withSpan(
      "IdentityRestClient.delete",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { objectId, options },
          deleteOperationSpec,
        ) as Promise<void>;
      },
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/access/entra/assignments/{objectId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EntraAssignment,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.objectId],
  headerParameters: [Parameters.accept],
  serializer,
};
const upsertOperationSpec: coreClient.OperationSpec = {
  path: "/access/entra/assignments/{objectId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.EntraAssignment,
    },
    201: {
      bodyMapper: Mappers.EntraAssignment,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  requestBody: {
    parameterPath: {
      tenantId: ["tenantId"],
      principalType: ["principalType"],
      clientIds: ["clientIds"],
    },
    mapper: { ...Mappers.EntraAssignmentCreateOrUpdateRequest, required: true },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.objectId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/access/entra/assignments/{objectId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.objectId],
  headerParameters: [Parameters.accept],
  serializer,
};
