/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CommunicationIdentityOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { IdentityRestClientContext } from "../identityRestClientContext";
import {
  CommunicationIdentityCreateOptionalParams,
  CommunicationIdentityCreateResponse,
  CommunicationIdentityDeleteOptionalParams,
  CommunicationIdentityRevokeAccessTokensOptionalParams,
  CommunicationIdentityExchangeTeamsUserAccessTokenOptionalParams,
  CommunicationIdentityExchangeTeamsUserAccessTokenResponse,
  CommunicationIdentityTokenScope,
  CommunicationIdentityIssueAccessTokenOptionalParams,
  CommunicationIdentityIssueAccessTokenResponse
} from "../models";

/** Class containing CommunicationIdentityOperations operations. */
export class CommunicationIdentityOperationsImpl
  implements CommunicationIdentityOperations {
  private readonly client: IdentityRestClientContext;

  /**
   * Initialize a new instance of the class CommunicationIdentityOperations class.
   * @param client Reference to the service client
   */
  constructor(client: IdentityRestClientContext) {
    this.client = client;
  }

  /**
   * Create a new identity, and optionally, an access token.
   * @param options The options parameters.
   */
  create(
    options?: CommunicationIdentityCreateOptionalParams
  ): Promise<CommunicationIdentityCreateResponse> {
    return this.client.sendOperationRequest({ options }, createOperationSpec);
  }

  /**
   * Delete the identity, revoke all tokens for the identity and delete all associated data.
   * @param id Identifier of the identity to be deleted.
   * @param options The options parameters.
   */
  delete(
    id: string,
    options?: CommunicationIdentityDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { id, options },
      deleteOperationSpec
    );
  }

  /**
   * Revoke all access tokens for the specific identity.
   * @param id Identifier of the identity.
   * @param options The options parameters.
   */
  revokeAccessTokens(
    id: string,
    options?: CommunicationIdentityRevokeAccessTokensOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { id, options },
      revokeAccessTokensOperationSpec
    );
  }

  /**
   * Exchange an Azure Active Directory (Azure AD) access token of a Teams user for a new Communication
   * Identity access token with a matching expiration time.
   * @param token Azure AD access token of a Teams User to acquire a new Communication Identity access
   *              token.
   * @param appId Client ID of an Azure AD application to be verified against the appid claim in the
   *              Azure AD access token.
   * @param userId Object ID of an Azure AD user (Teams User) to be verified against the oid claim in the
   *               Azure AD access token.
   * @param options The options parameters.
   */
  exchangeTeamsUserAccessToken(
    token: string,
    appId: string,
    userId: string,
    options?: CommunicationIdentityExchangeTeamsUserAccessTokenOptionalParams
  ): Promise<CommunicationIdentityExchangeTeamsUserAccessTokenResponse> {
    return this.client.sendOperationRequest(
      { token, appId, userId, options },
      exchangeTeamsUserAccessTokenOperationSpec
    );
  }

  /**
   * Issue a new token for an identity.
   * @param id Identifier of the identity to issue token for.
   * @param scopes List of scopes attached to the token.
   * @param options The options parameters.
   */
  issueAccessToken(
    id: string,
    scopes: CommunicationIdentityTokenScope[],
    options?: CommunicationIdentityIssueAccessTokenOptionalParams
  ): Promise<CommunicationIdentityIssueAccessTokenResponse> {
    return this.client.sendOperationRequest(
      { id, scopes, options },
      issueAccessTokenOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path: "/identities",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.CommunicationIdentityAccessTokenResult
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: {
    parameterPath: {
      createTokenWithScopes: ["options", "createTokenWithScopes"]
    },
    mapper: Mappers.CommunicationIdentityCreateRequest
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/identities/{id}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const revokeAccessTokensOperationSpec: coreClient.OperationSpec = {
  path: "/identities/{id}/:revokeAccessTokens",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const exchangeTeamsUserAccessTokenOperationSpec: coreClient.OperationSpec = {
  path: "/teamsUser/:exchangeAccessToken",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationIdentityAccessToken
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: {
    parameterPath: { token: ["token"], appId: ["appId"], userId: ["userId"] },
    mapper: { ...Mappers.TeamsUserExchangeTokenRequest, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const issueAccessTokenOperationSpec: coreClient.OperationSpec = {
  path: "/identities/{id}/:issueAccessToken",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationIdentityAccessToken
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: {
    parameterPath: { scopes: ["scopes"] },
    mapper: {
      ...Mappers.CommunicationIdentityAccessTokenRequest,
      required: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
