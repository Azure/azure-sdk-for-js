/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing.js";
import { EntraIdToken } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { IdentityRestClient } from "../identityRestClient.js";
import {
  EntraIdTokenExchangeOptionalParams,
  EntraIdTokenExchangeResponse,
} from "../models/index.js";

/** Class containing EntraIdToken operations. */
export class EntraIdTokenImpl implements EntraIdToken {
  private readonly client: IdentityRestClient;

  /**
   * Initialize a new instance of the class EntraIdToken class.
   * @param client Reference to the service client
   */
  constructor(client: IdentityRestClient) {
    this.client = client;
  }

  /**
   * Exchanges an Entra ID token for an ACS user access token.
   * @param body Request payload for the token exchange.
   * @param options The options parameters.
   */
  async exchange(
    body: Record<string, unknown>,
    options?: EntraIdTokenExchangeOptionalParams,
  ): Promise<EntraIdTokenExchangeResponse> {
    return tracingClient.withSpan(
      "IdentityRestClient.exchange",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { body, options },
          exchangeOperationSpec,
        ) as Promise<EntraIdTokenExchangeResponse>;
      },
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const exchangeOperationSpec: coreClient.OperationSpec = {
  path: "/access/entra/:exchangeAccessToken",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationIdentityAccessTokenResult,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  requestBody: Parameters.body3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer,
};
