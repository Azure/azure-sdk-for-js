"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommunicationIdentityOperationsImpl = void 0;
const tslib_1 = require("tslib");
const tracing_js_1 = require("../tracing.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing CommunicationIdentityOperations operations. */
class CommunicationIdentityOperationsImpl {
    /**
     * Initialize a new instance of the class CommunicationIdentityOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Create a new identity with an optional customId mapping, and optionally, an access token. If called
     * again with the same customId, the returned identity will be the same as the one returned previously.
     * @param options The options parameters.
     */
    async create(options) {
        return tracing_js_1.tracingClient.withSpan("IdentityRestClient.create", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ options }, createOperationSpec);
        });
    }
    /**
     * Delete the identity, revoke all tokens for the identity and delete all associated data.
     * @param id Identifier of the identity to be deleted.
     * @param options The options parameters.
     */
    async delete(id, options) {
        return tracing_js_1.tracingClient.withSpan("IdentityRestClient.delete", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ id, options }, deleteOperationSpec);
        });
    }
    /**
     * Get an identity by its id.
     * @param id Identifier of the identity.
     * @param options The options parameters.
     */
    async get(id, options) {
        return tracing_js_1.tracingClient.withSpan("IdentityRestClient.get", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ id, options }, getOperationSpec);
        });
    }
    /**
     * Revoke all access tokens for the specific identity.
     * @param id Identifier of the identity.
     * @param options The options parameters.
     */
    async revokeAccessTokens(id, options) {
        return tracing_js_1.tracingClient.withSpan("IdentityRestClient.revokeAccessTokens", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ id, options }, revokeAccessTokensOperationSpec);
        });
    }
    /**
     * Exchange an Entra ID access token of a Teams user for a new Communication Identity access token with
     * a matching expiration time.
     * @param token Entra ID access token of a Teams User to acquire a new Communication Identity access
     *              token.
     * @param appId Client ID of an Entra ID application to be verified against the appid claim in the
     *              Entra ID access token.
     * @param userId Object ID of an Entra ID user (Teams User) to be verified against the oid claim in the
     *               Entra ID access token.
     * @param options The options parameters.
     */
    async exchangeTeamsUserAccessToken(token, appId, userId, options) {
        return tracing_js_1.tracingClient.withSpan("IdentityRestClient.exchangeTeamsUserAccessToken", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ token, appId, userId, options }, exchangeTeamsUserAccessTokenOperationSpec);
        });
    }
    /**
     * Issue a new token for an identity.
     * @param id Identifier of the identity to issue token for.
     * @param scopes List of scopes attached to the token.
     * @param options The options parameters.
     */
    async issueAccessToken(id, scopes, options) {
        return tracing_js_1.tracingClient.withSpan("IdentityRestClient.issueAccessToken", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ id, scopes, options }, issueAccessTokenOperationSpec);
        });
    }
}
exports.CommunicationIdentityOperationsImpl = CommunicationIdentityOperationsImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/identities",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: Mappers.CommunicationIdentityAccessTokenResult,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: {
        parameterPath: {
            customId: ["options", "customId"],
            createTokenWithScopes: ["options", "createTokenWithScopes"],
            expiresInMinutes: ["options", "expiresInMinutes"],
        },
        mapper: Mappers.CommunicationIdentityCreateRequest,
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const deleteOperationSpec = {
    path: "/identities/{id}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.id],
    headerParameters: [Parameters.accept],
    serializer,
};
const getOperationSpec = {
    path: "/identities/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CommunicationIdentity,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.id],
    headerParameters: [Parameters.accept],
    serializer,
};
const revokeAccessTokensOperationSpec = {
    path: "/identities/{id}/:revokeAccessTokens",
    httpMethod: "POST",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.id],
    headerParameters: [Parameters.accept],
    serializer,
};
const exchangeTeamsUserAccessTokenOperationSpec = {
    path: "/teamsUser/:exchangeAccessToken",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CommunicationIdentityAccessToken,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: {
        parameterPath: { token: ["token"], appId: ["appId"], userId: ["userId"] },
        mapper: Object.assign(Object.assign({}, Mappers.TeamsUserExchangeTokenRequest), { required: true }),
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const issueAccessTokenOperationSpec = {
    path: "/identities/{id}/:issueAccessToken",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CommunicationIdentityAccessToken,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: {
        parameterPath: {
            scopes: ["scopes"],
            expiresInMinutes: ["options", "expiresInMinutes"],
        },
        mapper: Object.assign(Object.assign({}, Mappers.CommunicationIdentityAccessTokenRequest), { required: true }),
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.id],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
//# sourceMappingURL=communicationIdentityOperations.js.map