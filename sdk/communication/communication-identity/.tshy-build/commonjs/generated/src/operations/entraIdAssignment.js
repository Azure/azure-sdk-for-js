"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntraIdAssignmentImpl = void 0;
const tslib_1 = require("tslib");
const tracing_js_1 = require("../tracing.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing EntraIdAssignment operations. */
class EntraIdAssignmentImpl {
    /**
     * Initialize a new instance of the class EntraIdAssignment class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get Entra access assignment by object id.
     * @param objectId objectId we want to get the assignment for. AcsResourceId is taken from
     *                 authentication.
     * @param options The options parameters.
     */
    async get(objectId, options) {
        return tracing_js_1.tracingClient.withSpan("IdentityRestClient.get", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ objectId, options }, getOperationSpec);
        });
    }
    /**
     * Creates or replaces an Entra access assignment.
     * @param objectId objectId we want to update the assignment for.
     * @param tenantId
     * @param principalType
     * @param clientIds Array of EntraAssignmentCreateOrUpdateRequestClientIdsItem
     * @param options The options parameters.
     */
    async upsert(objectId, tenantId, principalType, clientIds, options) {
        return tracing_js_1.tracingClient.withSpan("IdentityRestClient.upsert", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ objectId, tenantId, principalType, clientIds, options }, upsertOperationSpec);
        });
    }
    /**
     * Removes an Entra access assignment.
     * @param objectId objectId we want to remove the assignment for. AcsResourceId is taken from
     *                 authentication.
     * @param options The options parameters.
     */
    async delete(objectId, options) {
        return tracing_js_1.tracingClient.withSpan("IdentityRestClient.delete", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ objectId, options }, deleteOperationSpec);
        });
    }
}
exports.EntraIdAssignmentImpl = EntraIdAssignmentImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/access/entra/assignments/{objectId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EntraAssignment,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.objectId],
    headerParameters: [Parameters.accept],
    serializer,
};
const upsertOperationSpec = {
    path: "/access/entra/assignments/{objectId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.EntraAssignment,
        },
        201: {
            bodyMapper: Mappers.EntraAssignment,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: {
        parameterPath: {
            tenantId: ["tenantId"],
            principalType: ["principalType"],
            clientIds: ["clientIds"],
        },
        mapper: Object.assign(Object.assign({}, Mappers.EntraAssignmentCreateOrUpdateRequest), { required: true }),
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.objectId],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const deleteOperationSpec = {
    path: "/access/entra/assignments/{objectId}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.objectId],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=entraIdAssignment.js.map