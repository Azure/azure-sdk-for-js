{"version":3,"file":"communicationIdentityClient.js","sourceRoot":"","sources":["../../src/communicationIdentityClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  CommunicationAccessToken,\n  CommunicationIdentityClientOptions,\n  CommunicationUserToken,\n  GetTokenForTeamsUserOptions,\n  CreateUserAndTokenOptions,\n  GetTokenOptions,\n  TokenScope,\n  CreateUserOptions,\n  CommunicationUserDetail,\n} from \"./models.js\";\nimport type { CommunicationUserIdentifier } from \"@azure/communication-common\";\nimport {\n  createCommunicationAuthPolicy,\n  isKeyCredential,\n  parseClientArguments,\n} from \"@azure/communication-common\";\nimport type { InternalClientPipelineOptions, OperationOptions } from \"@azure/core-client\";\nimport type { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { IdentityRestClient } from \"./generated/src/identityRestClient.js\";\nimport { logger } from \"./common/logger.js\";\nimport { tracingClient } from \"./generated/src/tracing.js\";\n\nconst isCommunicationIdentityClientOptions = (\n  options: any,\n): options is CommunicationIdentityClientOptions =>\n  options && !isTokenCredential(options) && !isKeyCredential(options);\n\n/**\n * Client class for interacting with Azure Communication Services User Token Management.\n */\nexport class CommunicationIdentityClient {\n  /**\n   * A reference to the auto-generated UserToken HTTP client.\n   */\n  private readonly client: IdentityRestClient;\n\n  /**\n   * Initializes a new instance of the CommunicationIdentity class.\n   * @param connectionString - Connection string to connect to an Azure Communication Service resource.\n   *                         Example: \"endpoint=https://contoso.eastus.communications.azure.net/;accesskey=secret\";\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(connectionString: string, options?: CommunicationIdentityClientOptions);\n\n  /**\n   * Initializes a new instance of the CommunicationIdentity class using an Azure KeyCredential.\n   * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).\n   * @param credential - An object that is used to authenticate requests to the service. Use the AzureKeyCredential or `@azure/identity` to create a credential.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential,\n    options?: CommunicationIdentityClientOptions,\n  );\n  /**\n   * Initializes a new instance of the CommunicationIdentity class using a TokenCredential.\n   * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net)\n   * @param credential - TokenCredential that is used to authenticate requests to the service.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    endpoint: string,\n    credential: TokenCredential,\n    options?: CommunicationIdentityClientOptions,\n  );\n\n  public constructor(\n    connectionStringOrEndpoint: string,\n    credentialOrOptions?: KeyCredential | CommunicationIdentityClientOptions | TokenCredential,\n    maybeOptions: CommunicationIdentityClientOptions = {},\n  ) {\n    const { url, credential } = parseClientArguments(\n      connectionStringOrEndpoint,\n      credentialOrOptions,\n    );\n    const options = isCommunicationIdentityClientOptions(credentialOrOptions)\n      ? credentialOrOptions\n      : maybeOptions;\n\n    const internalPipelineOptions: InternalClientPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    this.client = new IdentityRestClient(url, { endpoint: url, ...internalPipelineOptions });\n\n    const authPolicy = createCommunicationAuthPolicy(credential);\n    this.client.pipeline.addPolicy(authPolicy);\n  }\n\n  /**\n   * Creates a scoped user token.\n   *\n   * @param user - The user whose tokens are being issued.\n   * @param scopes - Scopes to include in the token.\n   * @param options - Additional options for the request.\n   */\n  public getToken(\n    user: CommunicationUserIdentifier,\n    scopes: TokenScope[],\n    options: GetTokenOptions = {},\n  ): Promise<CommunicationAccessToken> {\n    return tracingClient.withSpan(\"CommunicationIdentity-issueToken\", options, (updatedOptions) => {\n      return this.client.communicationIdentityOperations.issueAccessToken(\n        user.communicationUserId,\n        scopes,\n        { expiresInMinutes: options.tokenExpiresInMinutes, ...updatedOptions },\n      );\n    });\n  }\n\n  /**\n   * Revokes all data and tokens created for a user.\n   *\n   * @param user - The user whose tokens are being revoked.\n   * @param options - Additional options for the request.\n   */\n  public revokeTokens(\n    user: CommunicationUserIdentifier,\n    options: OperationOptions = {},\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"CommunicationIdentity-revokeTokens\",\n      options,\n      async (updatedOptions) => {\n        await this.client.communicationIdentityOperations.revokeAccessTokens(\n          user.communicationUserId,\n          updatedOptions,\n        );\n      },\n    );\n  }\n\n  /**\n   * Get an identity by its id.\n   *\n   * @param user - The user to get.\n   * @param options - Additional options for the request.\n   */\n  public getUserDetail(\n    user: CommunicationUserIdentifier,\n    options: OperationOptions = {},\n  ): Promise<CommunicationUserDetail> {\n    return tracingClient.withSpan(\n      \"CommunicationIdentity-getUser\",\n      options,\n      async (updatedOptions) => {\n        const result = await this.client.communicationIdentityOperations.get(\n          user.communicationUserId,\n          {\n            ...updatedOptions,\n          },\n        );\n\n        return {\n          user: { communicationUserId: result.id },\n          customId: result.customId,\n          lastTokenIssuedAt: result.lastTokenIssuedAt,\n        };\n      },\n    );\n  }\n\n  /**\n   * Creates a single user.\n   *\n   * @param options - Additional options for the request.\n   */\n  public createUser(options: CreateUserOptions = {}): Promise<CommunicationUserIdentifier> {\n    return tracingClient.withSpan(\n      \"CommunicationIdentity-createUser\",\n      options,\n      async (updatedOptions) => {\n        const result = await this.client.communicationIdentityOperations.create({\n          expiresInMinutes: undefined,\n          customId: options.customId,\n          ...updatedOptions,\n        });\n        return {\n          communicationUserId: result.identity.id,\n        };\n      },\n    );\n  }\n\n  /**\n   * Creates a single user and a token simultaneously.\n   *\n   * @param scopes - Scopes to include in the token.\n   * @param options - Additional options for the request.\n   */\n  public createUserAndToken(\n    scopes: TokenScope[],\n    options: CreateUserAndTokenOptions = {},\n  ): Promise<CommunicationUserToken> {\n    return tracingClient.withSpan(\n      \"CommunicationIdentity-createUserAndToken\",\n      options,\n      async (updatedOptions) => {\n        const { identity, accessToken } = await this.client.communicationIdentityOperations.create({\n          createTokenWithScopes: scopes,\n          expiresInMinutes: options.tokenExpiresInMinutes,\n          customId: options.customId,\n          ...updatedOptions,\n        });\n        return {\n          ...accessToken!,\n          user: { communicationUserId: identity.id },\n        };\n      },\n    );\n  }\n\n  /**\n   * Triggers revocation event for user and deletes all its data.\n   *\n   * @param user - The user being deleted.\n   * @param options - Additional options for the request.\n   */\n  public deleteUser(\n    user: CommunicationUserIdentifier,\n    options: OperationOptions = {},\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"CommunicationIdentity-deleteUser\",\n      options,\n      async (updatedOptions) => {\n        await this.client.communicationIdentityOperations.delete(\n          user.communicationUserId,\n          updatedOptions,\n        );\n      },\n    );\n  }\n\n  /**\n   * Exchanges an Azure AD access token of a Teams user for a new Communication Identity access token with a matching expiration time.\n   *\n   * @param options - Options used to exchange an Azure AD access token of a Teams user for a new Communication Identity access token.\n   */\n  public getTokenForTeamsUser(\n    options: GetTokenForTeamsUserOptions,\n  ): Promise<CommunicationAccessToken> {\n    return tracingClient.withSpan(\n      \"CommunicationIdentity-getTokenForTeamsUser\",\n      options,\n      (updatedOptions) => {\n        const { teamsUserAadToken, clientId, userObjectId } = updatedOptions;\n        return this.client.communicationIdentityOperations.exchangeTeamsUserAccessToken(\n          teamsUserAadToken,\n          clientId,\n          userObjectId,\n          updatedOptions,\n        );\n      },\n    );\n  }\n}\n"]}