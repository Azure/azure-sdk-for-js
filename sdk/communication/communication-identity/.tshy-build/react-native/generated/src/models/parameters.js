/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { CommunicationIdentityCreateRequest as CommunicationIdentityCreateRequestMapper, TeamsUserExchangeTokenRequest as TeamsUserExchangeTokenRequestMapper, CommunicationIdentityAccessTokenRequest as CommunicationIdentityAccessTokenRequestMapper, TeamsExtensionAssignmentCreateOrUpdateRequest as TeamsExtensionAssignmentCreateOrUpdateRequestMapper, EntraAssignmentCreateOrUpdateRequest as EntraAssignmentCreateOrUpdateRequestMapper, } from "../models/mappers.js";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const customId = {
    parameterPath: ["options", "customId"],
    mapper: CommunicationIdentityCreateRequestMapper,
};
export const createTokenWithScopes = {
    parameterPath: ["options", "createTokenWithScopes"],
    mapper: CommunicationIdentityCreateRequestMapper,
};
export const expiresInMinutes = {
    parameterPath: ["options", "expiresInMinutes"],
    mapper: CommunicationIdentityCreateRequestMapper,
};
export const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2025-03-02-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
export const id = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const token = {
    parameterPath: "token",
    mapper: TeamsUserExchangeTokenRequestMapper,
};
export const appId = {
    parameterPath: "appId",
    mapper: TeamsUserExchangeTokenRequestMapper,
};
export const userId = {
    parameterPath: "userId",
    mapper: TeamsUserExchangeTokenRequestMapper,
};
export const scopes = {
    parameterPath: "scopes",
    mapper: CommunicationIdentityAccessTokenRequestMapper,
};
export const expiresInMinutes1 = {
    parameterPath: ["options", "expiresInMinutes"],
    mapper: CommunicationIdentityAccessTokenRequestMapper,
};
export const body3 = {
    parameterPath: "body",
    mapper: {
        serializedName: "body",
        required: true,
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } },
        },
    },
};
export const tenantId = {
    parameterPath: "tenantId",
    mapper: {
        serializedName: "tenantId",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const objectId = {
    parameterPath: "objectId",
    mapper: {
        serializedName: "objectId",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const principalType = {
    parameterPath: "principalType",
    mapper: TeamsExtensionAssignmentCreateOrUpdateRequestMapper,
};
export const clientIds = {
    parameterPath: ["options", "clientIds"],
    mapper: TeamsExtensionAssignmentCreateOrUpdateRequestMapper,
};
export const contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/merge-patch+json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const body5 = {
    parameterPath: "body",
    mapper: {
        serializedName: "body",
        required: true,
        type: {
            name: "Dictionary",
            value: {
                type: {
                    name: "Composite",
                    className: "EntraAssignmentCreateOrUpdateRequest",
                },
            },
        },
    },
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const tenantId1 = {
    parameterPath: "tenantId",
    mapper: EntraAssignmentCreateOrUpdateRequestMapper,
};
export const principalType1 = {
    parameterPath: "principalType",
    mapper: EntraAssignmentCreateOrUpdateRequestMapper,
};
export const clientIds1 = {
    parameterPath: "clientIds",
    mapper: EntraAssignmentCreateOrUpdateRequestMapper,
};
//# sourceMappingURL=parameters.js.map