{"version":3,"file":"communicationIdentityOperations.js","sourceRoot":"","sources":["../../../../../src/generated/src/operationsInterfaces/communicationIdentityOperations.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  CommunicationIdentityCreateOptionalParams,\n  CommunicationIdentityCreateResponse,\n  CommunicationIdentityDeleteOptionalParams,\n  CommunicationIdentityGetOptionalParams,\n  CommunicationIdentityGetResponse,\n  CommunicationIdentityRevokeAccessTokensOptionalParams,\n  CommunicationIdentityExchangeTeamsUserAccessTokenOptionalParams,\n  CommunicationIdentityExchangeTeamsUserAccessTokenResponse,\n  CommunicationIdentityTokenScope,\n  CommunicationIdentityIssueAccessTokenOptionalParams,\n  CommunicationIdentityIssueAccessTokenResponse,\n} from \"../models/index.js\";\n\n/** Interface representing a CommunicationIdentityOperations. */\nexport interface CommunicationIdentityOperations {\n  /**\n   * Create a new identity with an optional customId mapping, and optionally, an access token. If called\n   * again with the same customId, the returned identity will be the same as the one returned previously.\n   * @param options The options parameters.\n   */\n  create(\n    options?: CommunicationIdentityCreateOptionalParams,\n  ): Promise<CommunicationIdentityCreateResponse>;\n  /**\n   * Delete the identity, revoke all tokens for the identity and delete all associated data.\n   * @param id Identifier of the identity to be deleted.\n   * @param options The options parameters.\n   */\n  delete(\n    id: string,\n    options?: CommunicationIdentityDeleteOptionalParams,\n  ): Promise<void>;\n  /**\n   * Get an identity by its id.\n   * @param id Identifier of the identity.\n   * @param options The options parameters.\n   */\n  get(\n    id: string,\n    options?: CommunicationIdentityGetOptionalParams,\n  ): Promise<CommunicationIdentityGetResponse>;\n  /**\n   * Revoke all access tokens for the specific identity.\n   * @param id Identifier of the identity.\n   * @param options The options parameters.\n   */\n  revokeAccessTokens(\n    id: string,\n    options?: CommunicationIdentityRevokeAccessTokensOptionalParams,\n  ): Promise<void>;\n  /**\n   * Exchange an Entra ID access token of a Teams user for a new Communication Identity access token with\n   * a matching expiration time.\n   * @param token Entra ID access token of a Teams User to acquire a new Communication Identity access\n   *              token.\n   * @param appId Client ID of an Entra ID application to be verified against the appid claim in the\n   *              Entra ID access token.\n   * @param userId Object ID of an Entra ID user (Teams User) to be verified against the oid claim in the\n   *               Entra ID access token.\n   * @param options The options parameters.\n   */\n  exchangeTeamsUserAccessToken(\n    token: string,\n    appId: string,\n    userId: string,\n    options?: CommunicationIdentityExchangeTeamsUserAccessTokenOptionalParams,\n  ): Promise<CommunicationIdentityExchangeTeamsUserAccessTokenResponse>;\n  /**\n   * Issue a new token for an identity.\n   * @param id Identifier of the identity to issue token for.\n   * @param scopes List of scopes attached to the token.\n   * @param options The options parameters.\n   */\n  issueAccessToken(\n    id: string,\n    scopes: CommunicationIdentityTokenScope[],\n    options?: CommunicationIdentityIssueAccessTokenOptionalParams,\n  ): Promise<CommunicationIdentityIssueAccessTokenResponse>;\n}\n"]}