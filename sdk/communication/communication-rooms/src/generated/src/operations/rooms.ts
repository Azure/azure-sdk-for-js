/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { Rooms } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RoomsRestClient } from "../roomsRestClient";
import {
  RoomsCreateOptionalParams,
  RoomsCreateResponse,
  RoomsListOptionalParams,
  RoomsListResponse,
  RoomsGetOptionalParams,
  RoomsGetResponse,
  RoomsUpdateOptionalParams,
  RoomsUpdateResponse,
  RoomsDeleteOptionalParams,
  RoomsListNextOptionalParams,
  RoomsListNextResponse
} from "../models";

/** Class containing Rooms operations. */
export class RoomsImpl implements Rooms {
  private readonly client: RoomsRestClient;

  /**
   * Initialize a new instance of the class Rooms class.
   * @param client Reference to the service client
   */
  constructor(client: RoomsRestClient) {
    this.client = client;
  }

  /**
   * Creates a new room.
   * @param options The options parameters.
   */
  async create(
    options?: RoomsCreateOptionalParams
  ): Promise<RoomsCreateResponse> {
    return tracingClient.withSpan(
      "RoomsRestClient.create",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          createOperationSpec
        ) as Promise<RoomsCreateResponse>;
      }
    );
  }

  /**
   * Retrieves all created rooms.
   * @param options The options parameters.
   */
  async list(options?: RoomsListOptionalParams): Promise<RoomsListResponse> {
    return tracingClient.withSpan(
      "RoomsRestClient.list",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          listOperationSpec
        ) as Promise<RoomsListResponse>;
      }
    );
  }

  /**
   * Retrieves an existing room by id.
   * @param roomId The id of the room requested.
   * @param options The options parameters.
   */
  async get(
    roomId: string,
    options?: RoomsGetOptionalParams
  ): Promise<RoomsGetResponse> {
    return tracingClient.withSpan(
      "RoomsRestClient.get",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { roomId, options },
          getOperationSpec
        ) as Promise<RoomsGetResponse>;
      }
    );
  }

  /**
   * Update a room with given changes.
   * @param roomId The id of the room requested.
   * @param options The options parameters.
   */
  async update(
    roomId: string,
    options?: RoomsUpdateOptionalParams
  ): Promise<RoomsUpdateResponse> {
    return tracingClient.withSpan(
      "RoomsRestClient.update",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { roomId, options },
          updateOperationSpec
        ) as Promise<RoomsUpdateResponse>;
      }
    );
  }

  /**
   * Delete a room.
   * @param roomId The id of the room to be deleted.
   * @param options The options parameters.
   */
  async delete(
    roomId: string,
    options?: RoomsDeleteOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "RoomsRestClient.delete",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { roomId, options },
          deleteOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  async listNext(
    nextLink: string,
    options?: RoomsListNextOptionalParams
  ): Promise<RoomsListNextResponse> {
    return tracingClient.withSpan(
      "RoomsRestClient.listNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          listNextOperationSpec
        ) as Promise<RoomsListNextResponse>;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path: "/rooms",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.RoomModel
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsCreateExceptionHeaders
    }
  },
  requestBody: {
    parameterPath: {
      validFrom: ["options", "validFrom"],
      validUntil: ["options", "validUntil"],
      participants: ["options", "participants"]
    },
    mapper: { ...Mappers.CreateRoomRequest, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.repeatabilityRequestID,
    Parameters.repeatabilityFirstSent
  ],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/rooms",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoomsCollection
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsListExceptionHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/rooms/{roomId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoomModel
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsGetExceptionHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roomId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/rooms/{roomId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RoomModel
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsUpdateExceptionHeaders
    }
  },
  requestBody: {
    parameterPath: {
      validFrom: ["options", "validFrom"],
      validUntil: ["options", "validUntil"]
    },
    mapper: { ...Mappers.UpdateRoomRequest, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roomId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/rooms/{roomId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsDeleteExceptionHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roomId],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoomsCollection
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsListNextExceptionHeaders
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
