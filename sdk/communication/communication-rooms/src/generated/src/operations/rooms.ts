/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing.js";
import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { Rooms } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { RoomsRestClient } from "../roomsRestClient.js";
import {
  RoomModel,
  RoomsListNextOptionalParams,
  RoomsListOptionalParams,
  RoomsListResponse,
  RoomsCreateOptionalParams,
  RoomsCreateResponse,
  RoomsGetOptionalParams,
  RoomsGetResponse,
  RoomsUpdateOptionalParams,
  RoomsUpdateResponse,
  RoomsDeleteOptionalParams,
  RoomsListNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing Rooms operations. */
export class RoomsImpl implements Rooms {
  private readonly client: RoomsRestClient;

  /**
   * Initialize a new instance of the class Rooms class.
   * @param client Reference to the service client
   */
  constructor(client: RoomsRestClient) {
    this.client = client;
  }

  /**
   * Retrieves all created rooms.
   * @param options The options parameters.
   */
  public list(
    options?: RoomsListOptionalParams,
  ): PagedAsyncIterableIterator<RoomModel> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: RoomsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<RoomModel[]> {
    let result: RoomsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: RoomsListOptionalParams,
  ): AsyncIterableIterator<RoomModel> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Creates a new room.
   * @param options The options parameters.
   */
  async create(
    options?: RoomsCreateOptionalParams,
  ): Promise<RoomsCreateResponse> {
    return tracingClient.withSpan(
      "RoomsRestClient.create",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          createOperationSpec,
        ) as Promise<RoomsCreateResponse>;
      },
    );
  }

  /**
   * Retrieves all created rooms.
   * @param options The options parameters.
   */
  private async _list(
    options?: RoomsListOptionalParams,
  ): Promise<RoomsListResponse> {
    return tracingClient.withSpan(
      "RoomsRestClient._list",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          listOperationSpec,
        ) as Promise<RoomsListResponse>;
      },
    );
  }

  /**
   * Retrieves an existing room by id.
   * @param roomId The id of the room requested.
   * @param options The options parameters.
   */
  async get(
    roomId: string,
    options?: RoomsGetOptionalParams,
  ): Promise<RoomsGetResponse> {
    return tracingClient.withSpan(
      "RoomsRestClient.get",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { roomId, options },
          getOperationSpec,
        ) as Promise<RoomsGetResponse>;
      },
    );
  }

  /**
   * Update a room with given changes.
   * @param roomId The id of the room requested.
   * @param options The options parameters.
   */
  async update(
    roomId: string,
    options?: RoomsUpdateOptionalParams,
  ): Promise<RoomsUpdateResponse> {
    return tracingClient.withSpan(
      "RoomsRestClient.update",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { roomId, options },
          updateOperationSpec,
        ) as Promise<RoomsUpdateResponse>;
      },
    );
  }

  /**
   * Delete a room.
   * @param roomId The id of the room to be deleted.
   * @param options The options parameters.
   */
  async delete(
    roomId: string,
    options?: RoomsDeleteOptionalParams,
  ): Promise<void> {
    return tracingClient.withSpan(
      "RoomsRestClient.delete",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { roomId, options },
          deleteOperationSpec,
        ) as Promise<void>;
      },
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private async _listNext(
    nextLink: string,
    options?: RoomsListNextOptionalParams,
  ): Promise<RoomsListNextResponse> {
    return tracingClient.withSpan(
      "RoomsRestClient._listNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          listNextOperationSpec,
        ) as Promise<RoomsListNextResponse>;
      },
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path: "/rooms",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.RoomModel,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsCreateExceptionHeaders,
    },
  },
  requestBody: {
    parameterPath: {
      validFrom: ["options", "validFrom"],
      validUntil: ["options", "validUntil"],
      pstnDialOutEnabled: ["options", "pstnDialOutEnabled"],
      participants: ["options", "participants"],
    },
    mapper: { ...Mappers.CreateRoomRequest, required: true },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.repeatabilityRequestID,
    Parameters.repeatabilityFirstSent,
  ],
  mediaType: "json",
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/rooms",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoomsCollection,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsListExceptionHeaders,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/rooms/{roomId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoomModel,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsGetExceptionHeaders,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roomId],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/rooms/{roomId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RoomModel,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsUpdateExceptionHeaders,
    },
  },
  requestBody: {
    parameterPath: {
      validFrom: ["options", "validFrom"],
      validUntil: ["options", "validUntil"],
      pstnDialOutEnabled: ["options", "pstnDialOutEnabled"],
    },
    mapper: { ...Mappers.UpdateRoomRequest, required: true },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roomId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/rooms/{roomId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsDeleteExceptionHeaders,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roomId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoomsCollection,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsListNextExceptionHeaders,
    },
  },
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer,
};
