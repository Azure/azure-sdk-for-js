/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Rooms } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RoomsApiClient } from "../roomsApiClient";
import {
  CreateRoomRequest,
  RoomsCreateRoomOptionalParams,
  RoomsCreateRoomResponse,
  RoomsGetRoomOptionalParams,
  RoomsGetRoomResponse,
  RoomsUpdateRoomOptionalParams,
  RoomsUpdateRoomResponse,
  RoomsDeleteRoomOptionalParams,
  RoomsGetParticipantsOptionalParams,
  RoomsGetParticipantsResponse,
  AddParticipantsRequest,
  RoomsAddParticipantsOptionalParams,
  RoomsAddParticipantsResponse,
  UpdateParticipantsRequest,
  RoomsUpdateParticipantsOptionalParams,
  RoomsUpdateParticipantsResponse,
  RemoveParticipantsRequest,
  RoomsRemoveParticipantsOptionalParams,
  RoomsRemoveParticipantsResponse
} from "../models";

/** Class containing Rooms operations. */
export class RoomsImpl implements Rooms {
  private readonly client: RoomsApiClient;

  /**
   * Initialize a new instance of the class Rooms class.
   * @param client Reference to the service client
   */
  constructor(client: RoomsApiClient) {
    this.client = client;
  }

  /**
   * Creates a new room.
   * @param createRoomRequest The create room request body.
   * @param options The options parameters.
   */
  createRoom(
    createRoomRequest: CreateRoomRequest,
    options?: RoomsCreateRoomOptionalParams
  ): Promise<RoomsCreateRoomResponse> {
    return this.client.sendOperationRequest(
      { createRoomRequest, options },
      createRoomOperationSpec
    );
  }

  /**
   * Retrieves an existing room by id.
   * @param roomId The id of the room requested
   * @param options The options parameters.
   */
  getRoom(
    roomId: string,
    options?: RoomsGetRoomOptionalParams
  ): Promise<RoomsGetRoomResponse> {
    return this.client.sendOperationRequest(
      { roomId, options },
      getRoomOperationSpec
    );
  }

  /**
   * Update a room with given changes.
   * @param roomId The id of the room requested
   * @param options The options parameters.
   */
  updateRoom(
    roomId: string,
    options?: RoomsUpdateRoomOptionalParams
  ): Promise<RoomsUpdateRoomResponse> {
    return this.client.sendOperationRequest(
      { roomId, options },
      updateRoomOperationSpec
    );
  }

  /**
   * Delete a room.
   * @param roomId The id of the room to be deleted
   * @param options The options parameters.
   */
  deleteRoom(
    roomId: string,
    options?: RoomsDeleteRoomOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { roomId, options },
      deleteRoomOperationSpec
    );
  }

  /**
   * Get participants in a room.
   * @param roomId The id of the room to get participants from
   * @param options The options parameters.
   */
  getParticipants(
    roomId: string,
    options?: RoomsGetParticipantsOptionalParams
  ): Promise<RoomsGetParticipantsResponse> {
    return this.client.sendOperationRequest(
      { roomId, options },
      getParticipantsOperationSpec
    );
  }

  /**
   * Adds participants to a room. If participants already exist, no change occurs.
   * @param roomId Room id to add participants.
   * @param addParticipantsRequest Participants to be added to the room.
   * @param options The options parameters.
   */
  addParticipants(
    roomId: string,
    addParticipantsRequest: AddParticipantsRequest,
    options?: RoomsAddParticipantsOptionalParams
  ): Promise<RoomsAddParticipantsResponse> {
    return this.client.sendOperationRequest(
      { roomId, addParticipantsRequest, options },
      addParticipantsOperationSpec
    );
  }

  /**
   * Update participants in a room.
   * @param roomId The room id.
   * @param updateParticipantsRequest Participants in a room to be updated.
   * @param options The options parameters.
   */
  updateParticipants(
    roomId: string,
    updateParticipantsRequest: UpdateParticipantsRequest,
    options?: RoomsUpdateParticipantsOptionalParams
  ): Promise<RoomsUpdateParticipantsResponse> {
    return this.client.sendOperationRequest(
      { roomId, updateParticipantsRequest, options },
      updateParticipantsOperationSpec
    );
  }

  /**
   * Remove participants from a room.
   * @param roomId Room id to remove the participants from.
   * @param removeParticipantsRequest Participants in a room to be removed.
   * @param options The options parameters.
   */
  removeParticipants(
    roomId: string,
    removeParticipantsRequest: RemoveParticipantsRequest,
    options?: RoomsRemoveParticipantsOptionalParams
  ): Promise<RoomsRemoveParticipantsResponse> {
    return this.client.sendOperationRequest(
      { roomId, removeParticipantsRequest, options },
      removeParticipantsOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createRoomOperationSpec: coreClient.OperationSpec = {
  path: "/rooms",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.RoomModel
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsCreateRoomExceptionHeaders
    }
  },
  requestBody: Parameters.createRoomRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.repeatabilityRequestID,
    Parameters.repeatabilityFirstSent
  ],
  mediaType: "json",
  serializer
};
const getRoomOperationSpec: coreClient.OperationSpec = {
  path: "/rooms/{roomId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoomModel
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsGetRoomExceptionHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roomId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateRoomOperationSpec: coreClient.OperationSpec = {
  path: "/rooms/{roomId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RoomModel
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsUpdateRoomExceptionHeaders
    }
  },
  requestBody: Parameters.patchRoomRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roomId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteRoomOperationSpec: coreClient.OperationSpec = {
  path: "/rooms/{roomId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsDeleteRoomExceptionHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roomId],
  headerParameters: [Parameters.accept],
  serializer
};
const getParticipantsOperationSpec: coreClient.OperationSpec = {
  path: "/rooms/{roomId}/participants",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ParticipantsCollection
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsGetParticipantsExceptionHeaders
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roomId],
  headerParameters: [Parameters.accept],
  serializer
};
const addParticipantsOperationSpec: coreClient.OperationSpec = {
  path: "/rooms/{roomId}/participants:add",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ParticipantsCollection
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsAddParticipantsExceptionHeaders
    }
  },
  requestBody: Parameters.addParticipantsRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roomId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const updateParticipantsOperationSpec: coreClient.OperationSpec = {
  path: "/rooms/{roomId}/participants:update",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ParticipantsCollection
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsUpdateParticipantsExceptionHeaders
    }
  },
  requestBody: Parameters.updateParticipantsRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roomId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const removeParticipantsOperationSpec: coreClient.OperationSpec = {
  path: "/rooms/{roomId}/participants:remove",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ParticipantsCollection
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.RoomsRemoveParticipantsExceptionHeaders
    }
  },
  requestBody: Parameters.removeParticipantsRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roomId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
