/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const CreateRoomRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateRoomRequest",
    modelProperties: {
      validFrom: {
        serializedName: "validFrom",
        type: {
          name: "DateTime"
        }
      },
      validUntil: {
        serializedName: "validUntil",
        type: {
          name: "DateTime"
        }
      },
      roomJoinPolicy: {
        serializedName: "roomJoinPolicy",
        type: {
          name: "Enum",
          allowedValues: ["InviteOnly", "CommunicationServiceUsers"]
        }
      },
      participants: {
        serializedName: "participants",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoomParticipant"
            }
          }
        }
      }
    }
  }
};

export const RoomParticipant: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoomParticipant",
    modelProperties: {
      communicationIdentifier: {
        serializedName: "communicationIdentifier",
        type: {
          name: "Composite",
          className: "CommunicationIdentifierModel"
        }
      },
      role: {
        serializedName: "role",
        type: {
          name: "Enum",
          allowedValues: ["Presenter", "Attendee", "Consumer"]
        }
      }
    }
  }
};

export const CommunicationIdentifierModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunicationIdentifierModel",
    modelProperties: {
      rawId: {
        serializedName: "rawId",
        type: {
          name: "String"
        }
      },
      communicationUser: {
        serializedName: "communicationUser",
        type: {
          name: "Composite",
          className: "CommunicationUserIdentifierModel"
        }
      }
    }
  }
};

export const CommunicationUserIdentifierModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunicationUserIdentifierModel",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoomModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoomModel",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      createdDateTime: {
        serializedName: "createdDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      validFrom: {
        serializedName: "validFrom",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      validUntil: {
        serializedName: "validUntil",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      roomJoinPolicy: {
        serializedName: "roomJoinPolicy",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["InviteOnly", "CommunicationServiceUsers"]
        }
      },
      participants: {
        serializedName: "participants",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoomParticipant"
            }
          }
        }
      }
    }
  }
};

export const CommunicationErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunicationErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CommunicationError"
        }
      }
    }
  }
};

export const CommunicationError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunicationError",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommunicationError"
            }
          }
        }
      },
      innerError: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "CommunicationError"
        }
      }
    }
  }
};

export const UpdateRoomRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateRoomRequest",
    modelProperties: {
      validFrom: {
        serializedName: "validFrom",
        type: {
          name: "DateTime"
        }
      },
      validUntil: {
        serializedName: "validUntil",
        type: {
          name: "DateTime"
        }
      },
      roomJoinPolicy: {
        serializedName: "roomJoinPolicy",
        type: {
          name: "Enum",
          allowedValues: ["InviteOnly", "CommunicationServiceUsers"]
        }
      },
      participants: {
        serializedName: "participants",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoomParticipant"
            }
          }
        }
      }
    }
  }
};

export const ParticipantsCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ParticipantsCollection",
    modelProperties: {
      participants: {
        serializedName: "participants",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoomParticipant"
            }
          }
        }
      }
    }
  }
};

export const AddParticipantsRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddParticipantsRequest",
    modelProperties: {
      participants: {
        serializedName: "participants",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoomParticipant"
            }
          }
        }
      }
    }
  }
};

export const UpdateParticipantsRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateParticipantsRequest",
    modelProperties: {
      participants: {
        serializedName: "participants",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoomParticipant"
            }
          }
        }
      }
    }
  }
};

export const RemoveParticipantsRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RemoveParticipantsRequest",
    modelProperties: {
      participants: {
        serializedName: "participants",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RoomParticipant"
            }
          }
        }
      }
    }
  }
};

export const RoomsCreateRoomExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoomsCreateRoomExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoomsGetRoomExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoomsGetRoomExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoomsUpdateRoomExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoomsUpdateRoomExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoomsDeleteRoomExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoomsDeleteRoomExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoomsGetParticipantsExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoomsGetParticipantsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoomsAddParticipantsExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoomsAddParticipantsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoomsUpdateParticipantsExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoomsUpdateParticipantsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RoomsRemoveParticipantsExceptionHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RoomsRemoveParticipantsExceptionHeaders",
    modelProperties: {
      errorCode: {
        serializedName: "x-ms-error-code",
        type: {
          name: "String"
        }
      }
    }
  }
};
