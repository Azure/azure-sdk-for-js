{"version":3,"file":"mappers.js","sourceRoot":"","sources":["../../../src/models/mappers.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;;AAUlC,sEAAoF;AAKpF,sEAAwE;AAExE,MAAM,WAAW,GAAoB,UAAU,CAAC;AAEhD;;;GAGG;AACI,MAAM,6BAA6B,GAAG,CAC3C,eAAqC,EAChB,EAAE;IACvB,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,eAAe,CAAC;IACrC,IAAI,IAAA,wCAAiB,EAAC,EAAE,CAAC,CAAC,IAAI,KAAK,mBAAmB,EAAE,CAAC;QACvD,cAAc,CAAC,8CAA8C,CAAC,CAAC;IACjE,CAAC;IACD,OAAO;QACL,KAAK,EAAE,IAAA,yCAAkB,EAAC,EAAE,CAAC;QAC7B,IAAI,EAAE,IAAI,IAAI,WAAW;KAC1B,CAAC;AACJ,CAAC,CAAC;AAXW,QAAA,6BAA6B,iCAWxC;AAEF;;;GAGG;AACI,MAAM,4BAA4B,GAAG,CAC1C,eAAoC,EACnB,EAAE;IACnB,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,eAAe,CAAC;IACxC,OAAO;QACL,EAAE,EAAE,IAAA,gDAAyB,EAAC,KAAK,CAAC;QACpC,IAAI,EAAE,IAAI,IAAI,WAAW;KAC1B,CAAC;AACJ,CAAC,CAAC;AARW,QAAA,4BAA4B,gCAQvC;AAEF;;;GAGG;AACI,MAAM,yBAAyB,GAAG,CACvC,YAAqC,EACE,EAAE;IACzC,YAAY,GAAG,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,EAAE,CAAC;IAClC,MAAM,kBAAkB,GAAoD,EAAE,CAAC;IAC/E,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE,CAAC;QACvC,MAAM,iBAAiB,GAAG,IAAA,qCAA6B,EAAC,WAAW,CAAC,CAAC;QACrE,kBAAkB,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE,iBAAiB,CAAC,IAAI,IAAI,WAAW,EAAE,CAAC;IAChG,CAAC;IAED,OAAO,kBAAkB,CAAC;AAC5B,CAAC,CAAC;AAXW,QAAA,yBAAyB,6BAWpC;AAEF;;;GAGG;AACI,MAAM,4BAA4B,GAAG,CAC1C,GAA8B,EACS,EAAE;IACzC,MAAM,kBAAkB,GAAwB,EAAE,CAAC;IACnD,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE,CAAC;QACrB,MAAM,KAAK,GAAG,IAAA,yCAAkB,EAAC,EAAE,CAAC,CAAC;QACrC,kBAAkB,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;IACnC,CAAC;IAED,OAAO,kBAAkB,CAAC;AAC5B,CAAC,CAAC;AAVW,QAAA,4BAA4B,gCAUvC;AAEF;;;GAGG;AACI,MAAM,8BAA8B,GAAG,CAAC,IAAyB,EAAqB,EAAE;IAC7F,MAAM,EAAE,SAAS,KAAc,IAAI,EAAb,IAAI,kBAAK,IAAI,EAA7B,aAAsB,CAAO,CAAC;IACpC,uBACE,SAAS,EAAE,SAAS,IACjB,IAAI,EACP;AACJ,CAAC,CAAC;AANW,QAAA,8BAA8B,kCAMzC;AAEF,SAAS,cAAc,CAAC,YAAoB;IAC1C,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;AAChC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type * as RestModel from \"../generated/src/models/index.js\";\nimport type {\n  CommunicationRoom,\n  ParticipantRole,\n  RoomParticipant,\n  RoomParticipantPatch,\n} from \"./models.js\";\nimport type { CommunicationIdentifier } from \"@azure/communication-common\";\nimport { getIdentifierKind, getIdentifierRawId } from \"@azure/communication-common\";\nimport type {\n  ParticipantProperties,\n  RoomParticipant as RESTRoomParticipant,\n} from \"../generated/src/models/index.js\";\nimport { createIdentifierFromRawId } from \"@azure/communication-common\";\n\nconst defaultRole: ParticipantRole = \"Attendee\";\n\n/**\n * @internal\n * Mapping room participant customer model to room participant REST model.\n */\nexport const mapToRoomParticipantRestModel = (\n  roomParticipant: RoomParticipantPatch,\n): RESTRoomParticipant => {\n  const { id, role } = roomParticipant;\n  if (getIdentifierKind(id).kind !== \"communicationUser\") {\n    throwException(\"We currently only support CommunicationUsers\");\n  }\n  return {\n    rawId: getIdentifierRawId(id),\n    role: role || defaultRole,\n  };\n};\n\n/**\n * @internal\n * Mapping room participant REST model to room participant customer model\n */\nexport const mapToRoomParticipantSDKModel = (\n  roomParticipant: RESTRoomParticipant,\n): RoomParticipant => {\n  const { rawId, role } = roomParticipant;\n  return {\n    id: createIdentifierFromRawId(rawId),\n    role: role || defaultRole,\n  };\n};\n\n/**\n * @internal\n * Mapping room participant role to participants rawId.\n */\nexport const mapRoomParticipantToRawId = (\n  participants?: RoomParticipantPatch[],\n): Record<string, ParticipantProperties> => {\n  participants = participants ?? [];\n  const mappedParticipants: Record<string, RestModel.ParticipantProperties> = {};\n  for (const participant of participants) {\n    const mappedParticipant = mapToRoomParticipantRestModel(participant);\n    mappedParticipants[mappedParticipant.rawId] = { role: mappedParticipant.role || defaultRole };\n  }\n\n  return mappedParticipants;\n};\n\n/**\n * @internal\n * Mapping communication identifier for removal.\n */\nexport const mapRoomParticipantForRemoval = (\n  ids: CommunicationIdentifier[],\n): Record<string, ParticipantProperties> => {\n  const mappedParticipants: Record<string, any> = {};\n  for (const id of ids) {\n    const rawId = getIdentifierRawId(id);\n    mappedParticipants[rawId] = null;\n  }\n\n  return mappedParticipants;\n};\n\n/**\n * @internal\n * Mapping room rest model to room customer model.\n */\nexport const mapCommunicationRoomToSDKModel = (room: RestModel.RoomModel): CommunicationRoom => {\n  const { createdAt, ...rest } = room;\n  return {\n    createdOn: createdAt,\n    ...rest,\n  };\n};\n\nfunction throwException(errorMessage: string): never {\n  throw new Error(errorMessage);\n}\n"]}