/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { CreateRoomRequest as CreateRoomRequestMapper, UpdateRoomRequest as UpdateRoomRequestMapper, UpdateParticipantsRequest as UpdateParticipantsRequestMapper, } from "../models/mappers.js";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const validFrom = {
    parameterPath: ["options", "validFrom"],
    mapper: CreateRoomRequestMapper,
};
export const validUntil = {
    parameterPath: ["options", "validUntil"],
    mapper: CreateRoomRequestMapper,
};
export const pstnDialOutEnabled = {
    parameterPath: ["options", "pstnDialOutEnabled"],
    mapper: CreateRoomRequestMapper,
};
export const participants = {
    parameterPath: ["options", "participants"],
    mapper: CreateRoomRequestMapper,
};
export const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2025-03-13",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
export const repeatabilityRequestID = {
    parameterPath: ["options", "repeatabilityRequestID"],
    mapper: {
        serializedName: "Repeatability-Request-ID",
        type: {
            name: "Uuid",
        },
    },
};
export const repeatabilityFirstSent = {
    parameterPath: ["options", "repeatabilityFirstSent"],
    mapper: {
        serializedName: "Repeatability-First-Sent",
        type: {
            name: "DateTimeRfc1123",
        },
    },
};
export const roomId = {
    parameterPath: "roomId",
    mapper: {
        serializedName: "roomId",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/merge-patch+json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const validFrom1 = {
    parameterPath: ["options", "validFrom"],
    mapper: UpdateRoomRequestMapper,
};
export const validUntil1 = {
    parameterPath: ["options", "validUntil"],
    mapper: UpdateRoomRequestMapper,
};
export const pstnDialOutEnabled1 = {
    parameterPath: ["options", "pstnDialOutEnabled"],
    mapper: UpdateRoomRequestMapper,
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const participants1 = {
    parameterPath: ["options", "participants"],
    mapper: UpdateParticipantsRequestMapper,
};
//# sourceMappingURL=parameters.js.map