{"version":3,"file":"phoneNumbersClient.js","sourceRoot":"","sources":["../../src/phoneNumbersClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;AAClC,4CAA4C;;;;AAE5C,uDAAuD;AACvD,sEAIqC;AAErC,gDAAqD;AAIrD,uDAA6F;AA8B7F,iFAAmF;AAEnF,+CAA0C;AAC1C,2DAA2D;AAY3D,MAAM,2BAA2B,GAAG,CAAC,OAAY,EAAwC,EAAE,CACzF,OAAO,IAAI,CAAC,IAAA,sCAAe,EAAC,OAAO,CAAC,IAAI,CAAC,IAAA,6BAAiB,EAAC,OAAO,CAAC,CAAC;AAEtE;;GAEG;AACH,MAAa,kBAAkB;IAoC7B,YACE,qBAA6B,EAC7B,mBAAiF,EACjF,eAA0C,EAAE;QAE5C,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,IAAA,2CAAoB,EAAC,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;QAC7F,MAAM,OAAO,GAAG,2BAA2B,CAAC,mBAAmB,CAAC;YAC9D,CAAC,CAAC,mBAAmB;YACrB,CAAC,CAAC,YAAY,CAAC;QAEjB,MAAM,uBAAuB,mCACxB,OAAO,GACP;YACD,cAAc,EAAE;gBACd,MAAM,EAAE,iBAAM,CAAC,IAAI;aACpB;SACF,CACF,CAAC;QAEF,IAAI,CAAC,MAAM,GAAG,IAAI,6BAA2B,CAAC,GAAG,kBAC/C,QAAQ,EAAE,GAAG,IACV,uBAAuB,EAC1B,CAAC;QACH,MAAM,UAAU,GAAG,IAAA,oDAA6B,EAAC,UAAU,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAE3C,2FAA2F;QAC3F,MAAM,wBAAwB,GAAG,IAAA,0DAA8B,EAAC,GAAG,CAAC,CAAC;QACrE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;QACzD,IAAI,CAAC,cAAc,GAAG,YAAY,CAAC,cAAc,CAAC;IACpD,CAAC;IAED;;;;;OAKG;IACI,uBAAuB,CAC5B,WAAmB,EACnB,UAA0C,EAAE;QAE5C,OAAO,0BAAa,CAAC,QAAQ,CAC3B,4CAA4C,EAC5C,OAAO,EACP,CAAC,cAAc,EAAE,EAAE;YACjB,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,WAAW,oBAClD,cAAc,EACjB,CAAC;QACL,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACI,yBAAyB,CAC9B,UAA4C,EAAE;QAE9C,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,0BAAa,CAAC,SAAS,CACtD,8CAA8C,EAC9C,OAAO,CACR,CAAC;QAEF,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,gBAAgB,mBAC3C,cAAc,EACjB,CAAC;QACL,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC;gBACb,MAAM,EAAE,OAAO;gBACf,KAAK,EAAE,CAAC;aACT,CAAC,CAAC;YAEH,MAAM,CAAC,CAAC;QACV,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,GAAG,EAAE,CAAC;QACb,CAAC;IACH,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACI,uBAAuB,CAC5B,WAAmB,EACnB,UAA0C,EAAE;QAE5C,OAAO,0BAAa,CAAC,QAAQ,CAC3B,4CAA4C,EAC5C,OAAO,EACP,CAAC,cAAc,EAAE,EAAE;YACjB,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,uBAAuB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;QACvF,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAsCG;IACI,gCAAgC,CACrC,MAA0C,EAC1C,UAAmD,EAAE;QAErD,OAAO,0BAAa,CAAC,QAAQ,CAC3B,qDAAqD,EACrD,OAAO,EACP,CAAC,cAAc,EAAE,EAAE;YACjB,MAAM,EAAE,WAAW,EAAE,eAAe,EAAE,cAAc,EAAE,YAAY,KAAc,MAAM,EAAf,IAAI,kBAAK,MAAM,EAAhF,oEAAuE,CAAS,CAAC;YACvF,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,gCAAgC,CAC9D,WAAW,EACX,eAAe,EACf,cAAc,EACd,YAAY,kCAEP,cAAc,GACd,IAAI,EAEV,CAAC;QACJ,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAyCG;IACI,yBAAyB,CAC9B,QAAgB,EAChB,UAA4C,EAAE;QAI9C,OAAO,0BAAa,CAAC,QAAQ,CAC3B,8CAA8C,EAC9C,OAAO,EACP,CAAC,cAAc,EAAE,EAAE;YACjB,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,yBAAyB,iCAAM,cAAc,KAAE,QAAQ,IAAG,CAAC;QAC7F,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAqCG;IACI,kCAAkC,CACvC,WAAmB,EACnB,OAAuC,EACvC,UAAqD,EAAE;QAEvD,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAC7C,CAAC;QACD,OAAO,0BAAa,CAAC,QAAQ,CAC3B,uDAAuD,EACvD,OAAO,EACP,CAAC,cAAc,EAAE,EAAE;YACjB,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,uBAAuB,CAAC,WAAW,kCAC9D,cAAc,GACd,OAAO,EACV,CAAC;QACL,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACI,sBAAsB,CAC3B,UAAyC,EAAE;QAE3C,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,0BAAa,CAAC,SAAS,CACtD,2CAA2C,EAC3C,OAAO,CACR,CAAC;QAEF,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,sBAAsB,iCACjD,cAAc,KACjB,cAAc,EAAE,IAAI,CAAC,cAAc,IACnC,CAAC;QACL,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC;gBACb,MAAM,EAAE,OAAO;gBACf,KAAK,EAAE,CAAC;aACT,CAAC,CAAC;YAEH,MAAM,CAAC,CAAC;QACV,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,GAAG,EAAE,CAAC;QACb,CAAC;IACH,CAAC;IAED;;;;;;;;;;;;;;;;;;OAkBG;IACI,8BAA8B,CACnC,WAAmB,EACnB,UAAwC,EAAE;QAE1C,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,0BAAa,CAAC,SAAS,CACtD,mDAAmD,EACnD,OAAO,CACR,CAAC;QAEF,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,WAAW,EAAE,UAAU,kCAChE,cAAc,KACjB,cAAc,EAAE,aAAa,IAC7B,CAAC;QACL,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC;gBACb,MAAM,EAAE,OAAO;gBACf,KAAK,EAAE,CAAC;aACT,CAAC,CAAC;YAEH,MAAM,CAAC,CAAC;QACV,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,GAAG,EAAE,CAAC;QACb,CAAC;IACH,CAAC;IAED;;;;;;;;;;;;;;;;;;OAkBG;IACI,gCAAgC,CACrC,WAAmB,EACnB,UAA0C,EAAE;QAE5C,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,0BAAa,CAAC,SAAS,CACtD,yDAAyD,EACzD,OAAO,CACR,CAAC;QAEF,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,WAAW,EAAE,YAAY,oBAClE,cAAc,EACjB,CAAC;QACL,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC;gBACb,MAAM,EAAE,OAAO;gBACf,KAAK,EAAE,CAAC;aACT,CAAC,CAAC;YAEH,MAAM,CAAC,CAAC;QACV,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,GAAG,EAAE,CAAC;QACb,CAAC;IACH,CAAC;IAED;;;;;;;;;;;;;;;;;;OAkBG;IACI,uBAAuB,CAC5B,WAAmB,EACnB,UAAiC,EAAE;QAEnC,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,0BAAa,CAAC,SAAS,CACtD,4CAA4C,EAC5C,OAAO,CACR,CAAC;QAEF,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,uBAAuB,CAAC,WAAW,kCAC9D,cAAc,KACjB,cAAc,EAAE,IAAI,CAAC,cAAc,IACnC,CAAC;QACL,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC;gBACb,MAAM,EAAE,OAAO;gBACf,KAAK,EAAE,CAAC;aACT,CAAC,CAAC;YAEH,MAAM,CAAC,CAAC;QACV,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,GAAG,EAAE,CAAC;QACb,CAAC;IACH,CAAC;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACI,sBAAsB,CAC3B,WAAmB,EACnB,UAAgC,EAAE;QAElC,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,0BAAa,CAAC,SAAS,CACtD,kCAAkC,EAClC,OAAO,CACR,CAAC;QAEF,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,WAAW,oBACpD,cAAc,EACjB,CAAC;QACL,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC;gBACb,MAAM,EAAE,OAAO;gBACf,KAAK,EAAE,CAAC;aACT,CAAC,CAAC;YAEH,MAAM,CAAC,CAAC;QACV,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,GAAG,EAAE,CAAC;QACb,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACI,yBAAyB,CAC9B,YAAsB,EACtB,UAA4C,EAAE,gCAAgC,EAAE,KAAK,EAAE;QAEvF,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,0BAAa,CAAC,SAAS,CACtD,8CAA8C,EAC9C,OAAO,CACR,CAAC;QAEF,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,yBAAyB,CAAC,YAAY,kCACjE,cAAc,KACjB,OAAO,EAAE,EAAE,gCAAgC,EAAE,OAAO,CAAC,gCAAgC,EAAE,IACvF,CAAC;QACL,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC;gBACb,MAAM,EAAE,OAAO;gBACf,KAAK,EAAE,CAAC;aACT,CAAC,CAAC;YAEH,MAAM,CAAC,CAAC;QACV,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,GAAG,EAAE,CAAC;QACb,CAAC;IACH,CAAC;CACF;AAzlBD,gDAylBC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/// <reference lib=\"esnext.asynciterable\" />\n\n/* eslint-disable @azure/azure-sdk/ts-naming-options */\nimport {\n  createCommunicationAuthPolicy,\n  isKeyCredential,\n  parseClientArguments,\n} from \"@azure/communication-common\";\nimport type { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport type { InternalPipelineOptions } from \"@azure/core-rest-pipeline\";\nimport type { PollOperationState, PollerLike } from \"@azure/core-lro\";\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { PhoneNumbersClient as PhoneNumbersGeneratedClient } from \"./generated/src/index.js\";\nimport type {\n  OperatorInformationResult,\n  PhoneNumberAreaCode,\n  PhoneNumberCapabilitiesRequest,\n  PhoneNumberCountry,\n  PhoneNumberLocality,\n  PhoneNumberOffering,\n  PhoneNumberSearchResult,\n  PurchasedPhoneNumber,\n} from \"./generated/src/models/index.js\";\nimport type {\n  GetPurchasedPhoneNumberOptions,\n  ListAvailableCountriesOptions,\n  ListGeographicAreaCodesOptions,\n  ListLocalitiesOptions,\n  ListOfferingsOptions,\n  ListPurchasedPhoneNumbersOptions,\n  ListTollFreeAreaCodesOptions,\n  PurchasePhoneNumbersResult,\n  ReleasePhoneNumberResult,\n  SearchAvailablePhoneNumbersRequest,\n  SearchOperatorInformationOptions,\n} from \"./models.js\";\nimport type {\n  BeginPurchasePhoneNumbersOptions,\n  BeginReleasePhoneNumberOptions,\n  BeginSearchAvailablePhoneNumbersOptions,\n  BeginUpdatePhoneNumberCapabilitiesOptions,\n} from \"./lroModels.js\";\nimport { createPhoneNumbersPagingPolicy } from \"./utils/customPipelinePolicies.js\";\nimport type { CommonClientOptions } from \"@azure/core-client\";\nimport { logger } from \"./utils/index.js\";\nimport { tracingClient } from \"./generated/src/tracing.js\";\n\n/**\n * Client options used to configure the PhoneNumbersClient API requests.\n */\nexport interface PhoneNumbersClientOptions extends CommonClientOptions {\n  /**\n   * The accept language parameter to be used in the request header's \"accept-language\" property.\n   */\n  acceptLanguage?: string;\n}\n\nconst isPhoneNumbersClientOptions = (options: any): options is PhoneNumbersClientOptions =>\n  options && !isKeyCredential(options) && !isTokenCredential(options);\n\n/**\n * Client class for interacting with Azure Communication Services Phone Number Administration.\n */\nexport class PhoneNumbersClient {\n  /**\n   * A reference to the auto-generated PhoneNumber HTTP client.\n   */\n  private readonly client: PhoneNumbersGeneratedClient;\n\n  /**\n   * The accept language parameter to be used in the request header's \"accept-language\" property.\n   */\n  private acceptLanguage: string | undefined;\n\n  /**\n   * Initializes a new instance of the PhoneNumberAdministrationClient class using a connection string.\n   *\n   * @param connectionString - Connection string to connect to an Azure Communication Service resource. (eg: endpoint=https://contoso.eastus.communications.azure.net/;accesskey=secret)\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(connectionString: string, options?: PhoneNumbersClientOptions);\n\n  /**\n   * Initializes a new instance of the PhoneNumberAdministrationClient class using an Azure KeyCredential.\n   *\n   * @param url - The endpoint of the service (eg: https://contoso.eastus.communications.azure.net)\n   * @param credential - An object that is used to authenticate requests to the service. Use the Azure KeyCredential or `@azure/identity` to create a credential.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(url: string, credential: KeyCredential, options?: PhoneNumbersClientOptions);\n\n  /**\n   * Initializes a new instance of the PhoneNumberAdministrationClient class using a TokenCredential.\n   * @param url - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).\n   * @param credential - TokenCredential that is used to authenticate requests to the service.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(url: string, credential: TokenCredential, options?: PhoneNumbersClientOptions);\n\n  public constructor(\n    connectionStringOrUrl: string,\n    credentialOrOptions?: KeyCredential | TokenCredential | PhoneNumbersClientOptions,\n    maybeOptions: PhoneNumbersClientOptions = {},\n  ) {\n    const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);\n    const options = isPhoneNumbersClientOptions(credentialOrOptions)\n      ? credentialOrOptions\n      : maybeOptions;\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    this.client = new PhoneNumbersGeneratedClient(url, {\n      endpoint: url,\n      ...internalPipelineOptions,\n    });\n    const authPolicy = createCommunicationAuthPolicy(credential);\n    this.client.pipeline.addPolicy(authPolicy);\n\n    // This policy is temporary workarounds to address compatibility issues with Azure Core V2.\n    const phoneNumbersPagingPolicy = createPhoneNumbersPagingPolicy(url);\n    this.client.pipeline.addPolicy(phoneNumbersPagingPolicy);\n    this.acceptLanguage = maybeOptions.acceptLanguage;\n  }\n\n  /**\n   * Gets the details of a purchased phone number. Includes phone number, cost, country code, etc.\n   *\n   * @param phoneNumber - The E.164 formatted phone number being fetched. The leading plus can be either + or encoded as %2B.\n   * @param options - Additional request options.\n   */\n  public getPurchasedPhoneNumber(\n    phoneNumber: string,\n    options: GetPurchasedPhoneNumberOptions = {},\n  ): Promise<PurchasedPhoneNumber> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient-getPurchasedPhoneNumber\",\n      options,\n      (updatedOptions) => {\n        return this.client.phoneNumbers.getByNumber(phoneNumber, {\n          ...updatedOptions,\n        });\n      },\n    );\n  }\n\n  /**\n   * Iterates the purchased phone numbers.\n   *\n   * Example usage:\n   * ```ts snippet:PhoneNumbersClientListPurchasedPhoneNumbers\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { PhoneNumbersClient } from \"@azure/communication-phone-numbers\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new PhoneNumbersClient(\"<endpoint-from-resource>\", credential);\n   *\n   * const phoneNumbers = client.listPurchasedPhoneNumbers();\n   *\n   * for await (const phoneNumber of phoneNumbers) {\n   *   console.log(`The id is the same as the phone number: ${phoneNumber.id}`);\n   *   console.log(`Phone number type is ${phoneNumber.phoneNumberType}`);\n   * }\n   * ```\n   * List all purchased phone numbers.\n   * @param options - The optional parameters.\n   */\n  public listPurchasedPhoneNumbers(\n    options: ListPurchasedPhoneNumbersOptions = {},\n  ): PagedAsyncIterableIterator<PurchasedPhoneNumber> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"PhoneNumbersClient-listPurchasedPhoneNumbers\",\n      options,\n    );\n\n    try {\n      return this.client.phoneNumbers.listPhoneNumbers({\n        ...updatedOptions,\n      });\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Starts the release of a purchased phone number.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation is complete.\n   *\n   * Example usage:\n   * ```ts snippet:PhoneNumbersClientReleasePhoneNumber\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { PhoneNumbersClient } from \"@azure/communication-phone-numbers\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new PhoneNumbersClient(\"<endpoint-from-resource>\", credential);\n   *\n   * const phoneNumberToRelease = \"<phone-number-to-release>\";\n   *\n   * const releasePoller = await client.beginReleasePhoneNumber(phoneNumberToRelease);\n   *\n   * // Release is underway.\n   * await releasePoller.pollUntilDone();\n   * console.log(\"Successfully release phone number.\");\n   * ```\n   * @param phoneNumber - The E.164 formatted phone number being released. The leading plus can be either + or encoded as %2B.\n   * @param options - Additional request options.\n   */\n  public beginReleasePhoneNumber(\n    phoneNumber: string,\n    options: BeginReleasePhoneNumberOptions = {},\n  ): Promise<PollerLike<PollOperationState<ReleasePhoneNumberResult>, ReleasePhoneNumberResult>> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient-beginReleasePhoneNumber\",\n      options,\n      (updatedOptions) => {\n        return this.client.phoneNumbers.beginReleasePhoneNumber(phoneNumber, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Starts a search for phone numbers given some constraints such as name or area code.\n   * The phone numbers that are found are reserved until you cancel, purchase or the reservation expires.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation is complete.\n   *\n   * Example usage:\n   * ```ts snippet:PhoneNumbersClientSearchAvailablePhoneNumbers\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import {\n   *   PhoneNumbersClient,\n   *   SearchAvailablePhoneNumbersRequest,\n   * } from \"@azure/communication-phone-numbers\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new PhoneNumbersClient(\"<endpoint-from-resource>\", credential);\n   *\n   * const searchRequest: SearchAvailablePhoneNumbersRequest = {\n   *   countryCode: \"US\",\n   *   phoneNumberType: \"tollFree\",\n   *   assignmentType: \"application\",\n   *   capabilities: {\n   *     sms: \"outbound\",\n   *     calling: \"none\",\n   *   },\n   *   quantity: 1,\n   * };\n   *\n   * const searchPoller = await client.beginSearchAvailablePhoneNumbers(searchRequest);\n   *\n   * // The search is underway. Wait to receive searchId.\n   * const searchResults = await searchPoller.pollUntilDone();\n   * console.log(`Found phone number: ${searchResults.phoneNumbers[0]}`);\n   * console.log(`searchId: ${searchResults.searchId}`);\n   * ```\n   *\n   * @param search - Request properties to constraint the search scope.\n   * @param options - Additional request options.\n   */\n  public beginSearchAvailablePhoneNumbers(\n    search: SearchAvailablePhoneNumbersRequest,\n    options: BeginSearchAvailablePhoneNumbersOptions = {},\n  ): Promise<PollerLike<PollOperationState<PhoneNumberSearchResult>, PhoneNumberSearchResult>> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient-beginSearchAvailablePhoneNumbers\",\n      options,\n      (updatedOptions) => {\n        const { countryCode, phoneNumberType, assignmentType, capabilities, ...rest } = search;\n        return this.client.phoneNumbers.beginSearchAvailablePhoneNumbers(\n          countryCode,\n          phoneNumberType,\n          assignmentType,\n          capabilities,\n          {\n            ...updatedOptions,\n            ...rest,\n          },\n        );\n      },\n    );\n  }\n\n  /**\n   * Starts the purchase of the phone number(s) in the search associated with a given id.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation is complete.\n   *\n   * Example usage:\n   * ```ts snippet:PhoneNumbersClientPurchasePhoneNumbers\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import {\n   *   PhoneNumbersClient,\n   *   SearchAvailablePhoneNumbersRequest,\n   * } from \"@azure/communication-phone-numbers\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new PhoneNumbersClient(\"<endpoint-from-resource>\", credential);\n   *\n   * const searchRequest: SearchAvailablePhoneNumbersRequest = {\n   *   countryCode: \"US\",\n   *   phoneNumberType: \"tollFree\",\n   *   assignmentType: \"application\",\n   *   capabilities: {\n   *     sms: \"outbound\",\n   *     calling: \"none\",\n   *   },\n   *   quantity: 1,\n   * };\n   *\n   * const searchPoller = await client.beginSearchAvailablePhoneNumbers(searchRequest);\n   *\n   * // The search is underway. Wait to receive searchId.\n   * const { searchId, phoneNumbers } = await searchPoller.pollUntilDone();\n   *\n   * const purchasePoller = await client.beginPurchasePhoneNumbers(searchId);\n   *\n   * // Purchase is underway.\n   * await purchasePoller.pollUntilDone();\n   * console.log(`Successfully purchased ${phoneNumbers[0]}`);\n   * ```\n   *\n   * @param searchId - The id of the search to purchase. Returned from `beginSearchAvailablePhoneNumbers`\n   * @param options - Additional request options.\n   */\n  public beginPurchasePhoneNumbers(\n    searchId: string,\n    options: BeginPurchasePhoneNumbersOptions = {},\n  ): Promise<\n    PollerLike<PollOperationState<PurchasePhoneNumbersResult>, PurchasePhoneNumbersResult>\n  > {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient-beginPurchasePhoneNumbers\",\n      options,\n      (updatedOptions) => {\n        return this.client.phoneNumbers.beginPurchasePhoneNumbers({ ...updatedOptions, searchId });\n      },\n    );\n  }\n\n  /**\n   * Starts the update of a purchased phone number's capabilities.\n   *\n   * This function returns a Long Running Operation poller that allows you to wait indefinitely until the operation is complete.\n   *\n   * Example usage:\n   * ```ts snippet:PhoneNumbersClientUpdatePhoneNumberCapabilities\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import {\n   *   PhoneNumbersClient,\n   *   PhoneNumberCapabilitiesRequest,\n   * } from \"@azure/communication-phone-numbers\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new PhoneNumbersClient(\"<endpoint-from-resource>\", credential);\n   *\n   * const phoneNumberToUpdate = \"<phone-number-to-update>\";\n   *\n   * // This will update phone number to send and receive sms, but only send calls.\n   * const updateRequest: PhoneNumberCapabilitiesRequest = {\n   *   sms: \"inbound+outbound\",\n   *   calling: \"outbound\",\n   * };\n   *\n   * const updatePoller = await client.beginUpdatePhoneNumberCapabilities(\n   *   phoneNumberToUpdate,\n   *   updateRequest,\n   * );\n   *\n   * // Update is underway.\n   * const { capabilities } = await updatePoller.pollUntilDone();\n   * console.log(`These are the update capabilities: ${capabilities}`);\n   * ```\n   *\n   * @param phoneNumber - The E.164 formatted phone number being updated. The leading plus can be either + or encoded as %2B.\n   * @param request - The updated properties which will be applied to the phone number.\n   * @param options - Additional request options.\n   */\n  public beginUpdatePhoneNumberCapabilities(\n    phoneNumber: string,\n    request: PhoneNumberCapabilitiesRequest,\n    options: BeginUpdatePhoneNumberCapabilitiesOptions = {},\n  ): Promise<PollerLike<PollOperationState<PurchasedPhoneNumber>, PurchasedPhoneNumber>> {\n    if (!phoneNumber) {\n      throw Error(\"phone number can't be empty\");\n    }\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient-beginUpdatePhoneNumberCapabilities\",\n      options,\n      (updatedOptions) => {\n        return this.client.phoneNumbers.beginUpdateCapabilities(phoneNumber, {\n          ...updatedOptions,\n          ...request,\n        });\n      },\n    );\n  }\n\n  /**\n   * Iterates the available countries.\n   *\n   * Example usage:\n   * ```ts snippet:PhoneNumbersClientListAvailableCountries\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { PhoneNumbersClient } from \"@azure/communication-phone-numbers\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new PhoneNumbersClient(\"<endpoint-from-resource>\", credential);\n   *\n   * for await (const country of client.listAvailableCountries()) {\n   *   console.log(\"country: \", country.localizedName);\n   * }\n   * ```\n   * List all available countries.\n   * @param options - The optional parameters.\n   */\n  public listAvailableCountries(\n    options: ListAvailableCountriesOptions = {},\n  ): PagedAsyncIterableIterator<PhoneNumberCountry> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"PhoneNumbersClient-listAvailableCountries\",\n      options,\n    );\n\n    try {\n      return this.client.phoneNumbers.listAvailableCountries({\n        ...updatedOptions,\n        acceptLanguage: this.acceptLanguage,\n      });\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Iterates the available Toll-Free area codes.\n   *\n   * Example usage:\n   * ```ts snippet:PhoneNumbersClientListTollFreeAreaCodes\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { PhoneNumbersClient } from \"@azure/communication-phone-numbers\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new PhoneNumbersClient(\"<endpoint-from-resource>\", credential);\n   *\n   * for await (const areaCodeItem of client.listAvailableTollFreeAreaCodes(\"US\")) {\n   *   console.log(\"area code: \", areaCodeItem.areaCode);\n   * }\n   * ```\n   * List all available Toll-Free area codes.\n   * @param countryCode - The ISO 3166-2 country code.\n   * @param options - The optional parameters.\n   */\n  public listAvailableTollFreeAreaCodes(\n    countryCode: string,\n    options: ListTollFreeAreaCodesOptions = {},\n  ): PagedAsyncIterableIterator<PhoneNumberAreaCode> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"PhoneNumbersClient-listAvailableTollFreeAreaCodes\",\n      options,\n    );\n\n    try {\n      return this.client.phoneNumbers.listAreaCodes(countryCode, \"tollFree\", {\n        ...updatedOptions,\n        assignmentType: \"application\",\n      });\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Iterates the available Geographic area codes.\n   *\n   * Example usage:\n   * ```ts snippet:PhoneNumbersClientListGeographicAreaCodes\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { PhoneNumbersClient } from \"@azure/communication-phone-numbers\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new PhoneNumbersClient(\"<endpoint-from-resource>\", credential);\n   *\n   * for await (const areaCodeItem of client.listAvailableGeographicAreaCodes(\"US\")) {\n   *   console.log(\"area code: \", areaCodeItem.areaCode);\n   * }\n   * ```\n   * List all available Geographic area codes.\n   * @param countryCode - The ISO 3166-2 country code.\n   * @param options - The optional parameters.\n   */\n  public listAvailableGeographicAreaCodes(\n    countryCode: string,\n    options: ListGeographicAreaCodesOptions = {},\n  ): PagedAsyncIterableIterator<PhoneNumberAreaCode> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"PhoneNumbersClient-listAvailableGeographicFreeAreaCodes\",\n      options,\n    );\n\n    try {\n      return this.client.phoneNumbers.listAreaCodes(countryCode, \"geographic\", {\n        ...updatedOptions,\n      });\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Iterates the available localities.\n   *\n   * Example usage:\n   * ```ts snippet:PhoneNumbersClientListAvailableLocalities\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { PhoneNumbersClient } from \"@azure/communication-phone-numbers\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new PhoneNumbersClient(\"<endpoint-from-resource>\", credential);\n   *\n   * for await (const locality of client.listAvailableLocalities(\"US\")) {\n   *   console.log(\"locality: \", locality.localizedName);\n   * }\n   * ```\n   * List all available localities.\n   * @param countryCode - The ISO 3166-2 country code.\n   * @param options - The optional parameters.\n   */\n  public listAvailableLocalities(\n    countryCode: string,\n    options: ListLocalitiesOptions = {},\n  ): PagedAsyncIterableIterator<PhoneNumberLocality> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"PhoneNumbersClient-listAvailableLocalities\",\n      options,\n    );\n\n    try {\n      return this.client.phoneNumbers.listAvailableLocalities(countryCode, {\n        ...updatedOptions,\n        acceptLanguage: this.acceptLanguage,\n      });\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Iterates the available offerings.\n   *\n   * Example usage:\n   * ```ts snippet:PhoneNumbersClientListAvailableOfferings\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { PhoneNumbersClient } from \"@azure/communication-phone-numbers\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new PhoneNumbersClient(\"<endpoint-from-resource>\", credential);\n   *\n   * for await (const offering of client.listAvailableOfferings(\"US\")) {\n   *   console.log(\"phone number type: \", offering.phoneNumberType);\n   *   console.log(\"cost: \", offering.cost.amount);\n   * }\n   * ```\n   * List all available offerings.\n   * @param countryCode - The ISO 3166-2 country code.\n   * @param options - The optional parameters.\n   */\n  public listAvailableOfferings(\n    countryCode: string,\n    options: ListOfferingsOptions = {},\n  ): PagedAsyncIterableIterator<PhoneNumberOffering> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"PhoneNumbersClient-listOfferings\",\n      options,\n    );\n\n    try {\n      return this.client.phoneNumbers.listOfferings(countryCode, {\n        ...updatedOptions,\n      });\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Search for operator information about specified phone numbers.\n   *\n   * @param phoneNumbers - The phone numbers to search.\n   * @param options - Additional request options.\n   */\n  public searchOperatorInformation(\n    phoneNumbers: string[],\n    options: SearchOperatorInformationOptions = { includeAdditionalOperatorDetails: false },\n  ): Promise<OperatorInformationResult> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"PhoneNumbersClient-searchOperatorInformation\",\n      options,\n    );\n\n    try {\n      return this.client.phoneNumbers.operatorInformationSearch(phoneNumbers, {\n        ...updatedOptions,\n        options: { includeAdditionalOperatorDetails: options.includeAdditionalOperatorDetails },\n      });\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"]}