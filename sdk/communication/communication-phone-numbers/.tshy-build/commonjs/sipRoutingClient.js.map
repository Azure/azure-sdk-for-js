{"version":3,"file":"sipRoutingClient.js","sourceRoot":"","sources":["../../src/sipRoutingClient.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;;AAElC,sEAIqC;AAErC,gDAAqD;AAErD,+CAA0C;AAC1C,wFAA+G;AAW/G,6CAA8E;AAE9E,2DAA2D;AAG3D,sDAA4B;AAO5B;;;;GAIG;AACH,MAAM,kBAAkB,GAAG,CAAC,OAAY,EAAsC,EAAE,CAC9E,OAAO,IAAI,CAAC,IAAA,sCAAe,EAAC,OAAO,CAAC,IAAI,CAAC,IAAA,6BAAiB,EAAC,OAAO,CAAC,CAAC;AAEtE;;GAEG;AACH,MAAa,gBAAgB;IAuC3B,YACE,qBAA6B,EAC7B,mBAA+E,EAC/E,eAAwC,EAAE;QAE1C,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,IAAA,2CAAoB,EAAC,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;QAC7F,MAAM,OAAO,GAAG,kBAAkB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,YAAY,CAAC;QAE7F,MAAM,uBAAuB,mCACxB,OAAO,GACP;YACD,cAAc,EAAE;gBACd,MAAM,EAAE,iBAAM,CAAC,IAAI;aACpB;SACF,CACF,CAAC;QAEF,IAAI,CAAC,MAAM,GAAG,IAAI,sCAAyB,CAAC,GAAG,kBAC7C,QAAQ,EAAE,GAAG,IACV,uBAAuB,EAC1B,CAAC;QACH,MAAM,UAAU,GAAG,IAAA,oDAA6B,EAAC,UAAU,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IAED;;;OAGG;IACH,8DAA8D;IACvD,UAAU,CAAC,UAAgC,EAAE;QAClD,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,0BAAa,CAAC,SAAS,CACtD,6BAA6B,EAC7B,OAAO,CACR,CAAC;QAEF,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,mBAAM,cAAc,EAAG,CAAC;YAC7D,OAAO;gBACL,IAAI;oBACF,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;gBACrB,CAAC;gBACD,CAAC,MAAM,CAAC,aAAa,CAAC;oBACpB,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD,MAAM,EAAE,GAAG,EAAE;oBACX,OAAO,IAAI,CAAC,oBAAoB,mBAAM,cAAc,EAAG,CAAC;gBAC1D,CAAC;aACF,CAAC;QACJ,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC;gBACb,MAAM,EAAE,OAAO;gBACf,KAAK,EAAE,CAAC;aACT,CAAC,CAAC;YACH,MAAM,CAAC,CAAC;QACV,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,GAAG,EAAE,CAAC;QACb,CAAC;IACH,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,QAAQ,CAAC,IAAY,EAAE,UAA4B,EAAE;QAChE,OAAO,0BAAa,CAAC,QAAQ,CAAC,2BAA2B,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YAC3F,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;YAC5D,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,KAAe,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;YACpE,IAAI,KAAK,EAAE,CAAC;gBACV,OAAO,KAAK,CAAC;YACf,CAAC;YACD,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,WAAW,EAAqB,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,8DAA8D;IACvD,UAAU,CAAC,UAAgC,EAAE;QAClD,MAAM,EAAE,IAAI,EAAE,cAAc,EAAE,GAAG,0BAAa,CAAC,SAAS,CACtD,6BAA6B,EAC7B,OAAO,CACR,CAAC;QAEF,IAAI,CAAC;YACH,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,mBAAM,cAAc,EAAG,CAAC;YAC7D,OAAO;gBACL,IAAI;oBACF,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;gBACrB,CAAC;gBACD,CAAC,MAAM,CAAC,aAAa,CAAC;oBACpB,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD,MAAM,EAAE,GAAG,EAAE;oBACX,OAAO,IAAI,CAAC,oBAAoB,mBAAM,cAAc,EAAG,CAAC;gBAC1D,CAAC;aACF,CAAC;QACJ,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC;gBACb,MAAM,EAAE,OAAO;gBACf,KAAK,EAAE,CAAC;aACT,CAAC,CAAC;YACH,MAAM,CAAC,CAAC;QACV,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,GAAG,EAAE,CAAC;QACb,CAAC;IACH,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,SAAS,CAAC,MAAkB,EAAE,UAA4B,EAAE;QACvE,OAAO,0BAAa,CAAC,QAAQ,CAAC,4BAA4B,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YAC5F,MAAM,KAAK,GAA2B,EAAE,MAAM,EAAE,IAAA,mCAAsB,EAAC,MAAM,CAAC,EAAE,CAAC;YACjF,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAC9D,MAAM,WAAW,GAAG,IAAA,mCAAsB,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACrF,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACnD,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;gBACjC,MAAM,uBAAuB,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,UAAU,CAAC,CAAC;gBAChF,IAAI,uBAAuB,EAAE,CAAC;oBAC5B,KAAK,CAAC,MAAO,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;gBACnC,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;YAC5D,IAAI,aAAa,EAAE,CAAC;gBAClB,MAAM,OAAO,mCACR,cAAc,GACd,KAAK,CACT,CAAC;gBACF,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACxD,CAAC;YAED,OAAO,IAAA,mCAAsB,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,QAAQ,CAAC,KAAe,EAAE,UAA4B,EAAE;QACnE,OAAO,0BAAa,CAAC,QAAQ,CAAC,2BAA2B,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YAC3F,MAAM,KAAK,GAA2B;gBACpC,MAAM,EAAE,IAAA,mCAAsB,EAAC,CAAC,KAAK,CAAC,CAAC;aACxC,CAAC;YACF,MAAM,OAAO,mCACR,cAAc,GACd,KAAK,CACT,CAAC;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC5D,MAAM,WAAW,GAAG,IAAA,mCAAsB,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAC5D,CAAC,KAAe,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAC/C,CAAC;YACF,IAAI,WAAW,EAAE,CAAC;gBAChB,OAAO,WAAW,CAAC;YACrB,CAAC;YAED,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,WAAW,EAAqB,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,SAAS,CACpB,MAAuB,EACvB,UAA4B,EAAE;QAE9B,OAAO,0BAAa,CAAC,QAAQ,CAAC,4BAA4B,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YAC5F,MAAM,KAAK,GAA2B;gBACpC,MAAM,EAAE,MAAM;aACf,CAAC;YACF,MAAM,OAAO,mCACR,cAAc,GACd,KAAK,CACT,CAAC;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC5D,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,CAAC;YACrF,OAAO,YAAY,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,WAAW,CAAC,IAAY,EAAE,UAA4B,EAAE;QACnE,OAAO,0BAAa,CAAC,QAAQ,CAC3B,8BAA8B,EAC9B,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,MAAM,MAAM,GAAQ,EAAE,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;YACpB,MAAM,KAAK,GAA2B;gBACpC,MAAM,EAAE,MAAM;aACf,CAAC;YAEF,MAAM,OAAO,mCACR,cAAc,GACd,KAAK,CACT,CAAC;YACF,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC/C,CAAC,CACF,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,OAAyB;QACvD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACzD,OAAO,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;IAC7B,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,OAAyB;QACvD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACzD,OAAO,IAAA,mCAAsB,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC;IAEc,mBAAmB,CAChC,OAA8B;;;;gBAE9B,KAAyB,eAAA,KAAA,sBAAA,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAA,IAAA,uEAAE,CAAC;oBAArC,cAAkC;oBAAlC,WAAkC;oBAAhD,MAAM,IAAI,KAAA,CAAA;oBACnB,sBAAA,KAAK,CAAC,CAAC,yBAAA,sBAAA,IAAI,CAAA,CAAA,CAAA,CAAC;gBACd,CAAC;;;;;;;;;QACH,CAAC;KAAA;IAEc,mBAAmB,CAChC,OAA8B;;;;gBAE9B,KAAyB,eAAA,KAAA,sBAAA,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAA,IAAA,uEAAE,CAAC;oBAArC,cAAkC;oBAAlC,WAAkC;oBAAhD,MAAM,IAAI,KAAA,CAAA;oBACnB,sBAAA,KAAK,CAAC,CAAC,yBAAA,sBAAA,IAAI,CAAA,CAAA,CAAA,CAAC;gBACd,CAAC;;;;;;;;;QACH,CAAC;KAAA;IAEc,oBAAoB;0FACjC,UAAgC,EAAE;YAElC,MAAM,SAAS,GAAG,sBAAM,IAAI,CAAC,iBAAiB,CAAC,OAA2B,CAAC,CAAA,CAAC;YAC5E,4BAAM,SAAS,CAAA,CAAC;QAClB,CAAC;KAAA;IAEc,oBAAoB;0FACjC,UAAgC,EAAE;YAElC,MAAM,SAAS,GAAG,sBAAM,IAAI,CAAC,iBAAiB,CAAC,OAA2B,CAAC,CAAA,CAAC;YAC5E,4BAAM,SAAS,CAAA,CAAC;QAClB,CAAC;KAAA;CACF;AAtSD,4CAsSC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  createCommunicationAuthPolicy,\n  isKeyCredential,\n  parseClientArguments,\n} from \"@azure/communication-common\";\nimport type { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport type { InternalPipelineOptions } from \"@azure/core-rest-pipeline\";\nimport { logger } from \"./utils/index.js\";\nimport { SipRoutingClient as SipRoutingGeneratedClient } from \"./generated/src/siprouting/sipRoutingClient.js\";\nimport type {\n  SipConfigurationUpdate,\n  SipRoutingError,\n} from \"./generated/src/siprouting/models/index.js\";\nimport type {\n  ListSipRoutesOptions,\n  ListSipTrunksOptions,\n  SipTrunk,\n  SipTrunkRoute,\n} from \"./models.js\";\nimport { transformFromRestModel, transformIntoRestModel } from \"./mappers.js\";\nimport type { CommonClientOptions, OperationOptions } from \"@azure/core-client\";\nimport { tracingClient } from \"./generated/src/tracing.js\";\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\nexport * from \"./models.js\";\n\n/**\n * Client options used to configure the SipRoutingClient API requests.\n */\nexport interface SipRoutingClientOptions extends CommonClientOptions {}\n\n/**\n * Checks whether the type of a value is SipClientOptions or not.\n *\n * @param options - The value being checked.\n */\nconst isSipClientOptions = (options: any): options is SipRoutingClientOptions =>\n  options && !isKeyCredential(options) && !isTokenCredential(options);\n\n/**\n * Client class for interacting with Azure Communication Services SIP Routing Administration.\n */\nexport class SipRoutingClient {\n  /**\n   * A reference to the auto-generated SipRouting HTTP client.\n   */\n  private readonly client: SipRoutingGeneratedClient;\n\n  /**\n   * Initializes a new instance of the SipRoutingClient class using a connection string.\n   *\n   * @param connectionString - Connection string to connect to an Azure Communication Service resource. (eg: endpoint=https://contoso.eastus.communications.azure.net/;accesskey=secret)\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(connectionString: string, options?: SipRoutingClientOptions);\n\n  /**\n   * Initializes a new instance of the SipRoutingClient class using an Azure KeyCredential.\n   *\n   * @param endpoint - The endpoint of the service (eg: https://contoso.eastus.communications.azure.net).\n   * @param credential - An object that is used to authenticate requests to the service. Use the Azure KeyCredential or `@azure/identity` to create a credential.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential,\n    options?: SipRoutingClientOptions,\n  );\n\n  /**\n   * Initializes a new instance of the SipRoutingClient class using a TokenCredential.\n   * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).\n   * @param credential - TokenCredential that is used to authenticate requests to the service.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    endpoint: string,\n    credential: TokenCredential,\n    options?: SipRoutingClientOptions,\n  );\n\n  public constructor(\n    connectionStringOrUrl: string,\n    credentialOrOptions?: KeyCredential | TokenCredential | SipRoutingClientOptions,\n    maybeOptions: SipRoutingClientOptions = {},\n  ) {\n    const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);\n    const options = isSipClientOptions(credentialOrOptions) ? credentialOrOptions : maybeOptions;\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    this.client = new SipRoutingGeneratedClient(url, {\n      endpoint: url,\n      ...internalPipelineOptions,\n    });\n    const authPolicy = createCommunicationAuthPolicy(credential);\n    this.client.pipeline.addPolicy(authPolicy);\n  }\n\n  /**\n   * Lists the SIP trunks.\n   * @param options - The options parameters.\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  public listTrunks(options: ListSipTrunksOptions = {}): PagedAsyncIterableIterator<SipTrunk> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"SipRoutingClient-listTrunks\",\n      options,\n    );\n\n    try {\n      const iter = this.listTrunksPagingAll({ ...updatedOptions });\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: () => {\n          return this.listTrunksPagingPage({ ...updatedOptions });\n        },\n      };\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the SIP trunk.\n   * @param fqdn - The trunk's FQDN.\n   * @param options - The options parameters.\n   */\n  public async getTrunk(fqdn: string, options: OperationOptions = {}): Promise<SipTrunk> {\n    return tracingClient.withSpan(\"SipRoutingClient-getTrunk\", options, async (updatedOptions) => {\n      const trunks = await this.getTrunksInternal(updatedOptions);\n      const trunk = trunks.find((value: SipTrunk) => value.fqdn === fqdn);\n      if (trunk) {\n        return trunk;\n      }\n      throw { code: \"NotFound\", message: \"Not Found\" } as SipRoutingError;\n    });\n  }\n\n  /**\n   * Lists the SIP trunk routes.\n   * @param options - The options parameters.\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  public listRoutes(options: ListSipRoutesOptions = {}): PagedAsyncIterableIterator<SipTrunkRoute> {\n    const { span, updatedOptions } = tracingClient.startSpan(\n      \"SipRoutingClient-listRoutes\",\n      options,\n    );\n\n    try {\n      const iter = this.listRoutesPagingAll({ ...updatedOptions });\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: () => {\n          return this.listRoutesPagingPage({ ...updatedOptions });\n        },\n      };\n    } catch (e: any) {\n      span.setStatus({\n        status: \"error\",\n        error: e,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets the SIP trunks.\n   * @param trunks - The SIP trunks to be set.\n   * @param options - The options parameters.\n   */\n  public async setTrunks(trunks: SipTrunk[], options: OperationOptions = {}): Promise<SipTrunk[]> {\n    return tracingClient.withSpan(\"SipRoutingClient-setTrunks\", options, async (updatedOptions) => {\n      const patch: SipConfigurationUpdate = { trunks: transformIntoRestModel(trunks) };\n      let config = await this.client.sipRouting.get(updatedOptions);\n      const storedFqdns = transformFromRestModel(config.trunks).map((trunk) => trunk.fqdn);\n      const setFqdns = trunks.map((trunk) => trunk.fqdn);\n      storedFqdns.forEach((storedFqdn) => {\n        const shouldDeleteStoredTrunk = !setFqdns.find((value) => value === storedFqdn);\n        if (shouldDeleteStoredTrunk) {\n          patch.trunks![storedFqdn] = null;\n        }\n      });\n\n      const isPatchNeeded = Object.keys(patch.trunks!).length > 0;\n      if (isPatchNeeded) {\n        const payload = {\n          ...updatedOptions,\n          ...patch,\n        };\n        config = await this.client.sipRouting.update(payload);\n      }\n\n      return transformFromRestModel(config.trunks);\n    });\n  }\n\n  /**\n   * Sets the SIP trunk.\n   * @param trunk - The SIP trunk to be set.\n   * @param options - The options parameters.\n   */\n  public async setTrunk(trunk: SipTrunk, options: OperationOptions = {}): Promise<SipTrunk> {\n    return tracingClient.withSpan(\"SipRoutingClient-setTrunk\", options, async (updatedOptions) => {\n      const patch: SipConfigurationUpdate = {\n        trunks: transformIntoRestModel([trunk]),\n      };\n      const payload = {\n        ...updatedOptions,\n        ...patch,\n      };\n      const config = await this.client.sipRouting.update(payload);\n      const storedTrunk = transformFromRestModel(config.trunks).find(\n        (value: SipTrunk) => value.fqdn === trunk.fqdn,\n      );\n      if (storedTrunk) {\n        return storedTrunk;\n      }\n\n      throw { code: \"NotFound\", message: \"Not Found\" } as SipRoutingError;\n    });\n  }\n\n  /**\n   * Sets the SIP trunk routes.\n   * @param routes - The SIP trunk routes to be set.\n   * @param options - The options parameters.\n   */\n  public async setRoutes(\n    routes: SipTrunkRoute[],\n    options: OperationOptions = {},\n  ): Promise<SipTrunkRoute[]> {\n    return tracingClient.withSpan(\"SipRoutingClient-setRoutes\", options, async (updatedOptions) => {\n      const patch: SipConfigurationUpdate = {\n        routes: routes,\n      };\n      const payload = {\n        ...updatedOptions,\n        ...patch,\n      };\n      const config = await this.client.sipRouting.update(payload);\n      const storedRoutes = config.routes || (await this.getRoutesInternal(updatedOptions));\n      return storedRoutes;\n    });\n  }\n\n  /**\n   * Deletes the SIP trunk.\n   * @param fqdn - The trunk's FQDN.\n   * @param options - The options parameters.\n   */\n  public async deleteTrunk(fqdn: string, options: OperationOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\n      \"SipRoutingClient-deleteTrunk\",\n      options,\n      async (updatedOptions) => {\n        const trunks: any = {};\n        trunks[fqdn] = null;\n        const patch: SipConfigurationUpdate = {\n          trunks: trunks,\n        };\n\n        const payload = {\n          ...updatedOptions,\n          ...patch,\n        };\n        await this.client.sipRouting.update(payload);\n      },\n    );\n  }\n\n  private async getRoutesInternal(options: OperationOptions): Promise<SipTrunkRoute[]> {\n    const config = await this.client.sipRouting.get(options);\n    return config.routes || [];\n  }\n\n  private async getTrunksInternal(options: OperationOptions): Promise<SipTrunk[]> {\n    const config = await this.client.sipRouting.get(options);\n    return transformFromRestModel(config.trunks);\n  }\n\n  private async *listRoutesPagingAll(\n    options?: ListSipRoutesOptions,\n  ): AsyncIterableIterator<SipTrunkRoute> {\n    for await (const page of this.listRoutesPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  private async *listTrunksPagingAll(\n    options?: ListSipTrunksOptions,\n  ): AsyncIterableIterator<SipTrunk> {\n    for await (const page of this.listTrunksPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  private async *listTrunksPagingPage(\n    options: ListSipTrunksOptions = {},\n  ): AsyncIterableIterator<SipTrunk[]> {\n    const apiResult = await this.getTrunksInternal(options as OperationOptions);\n    yield apiResult;\n  }\n\n  private async *listRoutesPagingPage(\n    options: ListSipRoutesOptions = {},\n  ): AsyncIterableIterator<SipTrunkRoute[]> {\n    const apiResult = await this.getRoutesInternal(options as OperationOptions);\n    yield apiResult;\n  }\n}\n"]}