"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SipRoutingImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing SipRouting operations. */
class SipRoutingImpl {
    /**
     * Initialize a new instance of the class SipRouting class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets SIP configuration for resource.
     * @param options The options parameters.
     */
    get(options) {
        return this.client.sendOperationRequest({ options }, getOperationSpec);
    }
    /**
     * Updates SIP configuration for resource.
     * @param options The options parameters.
     */
    update(options) {
        return this.client.sendOperationRequest({ options }, updateOperationSpec);
    }
}
exports.SipRoutingImpl = SipRoutingImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/sip",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SipConfiguration
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
            headersMapper: Mappers.SipRoutingGetExceptionHeaders
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/sip",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.SipConfiguration
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
            headersMapper: Mappers.SipRoutingUpdateExceptionHeaders
        }
    },
    requestBody: {
        parameterPath: {
            trunks: ["options", "trunks"],
            routes: ["options", "routes"]
        },
        mapper: Mappers.SipConfigurationUpdate
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=sipRouting.js.map