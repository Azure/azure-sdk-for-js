"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhoneNumbersImpl = void 0;
const tslib_1 = require("tslib");
const tracing_js_1 = require("../tracing.js");
const pagingHelper_js_1 = require("../pagingHelper.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
const core_lro_1 = require("@azure/core-lro");
const lroImpl_js_1 = require("../lroImpl.js");
/// <reference lib="esnext.asynciterable" />
/** Class containing PhoneNumbers operations. */
class PhoneNumbersImpl {
    /**
     * Initialize a new instance of the class PhoneNumbers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of available area codes.
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param phoneNumberType Filter by numberType, e.g. Geographic, TollFree.
     * @param options The options parameters.
     */
    listAreaCodes(countryCode, phoneNumberType, options) {
        const iter = this.listAreaCodesPagingAll(countryCode, phoneNumberType, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAreaCodesPagingPage(countryCode, phoneNumberType, options, settings);
            },
        };
    }
    listAreaCodesPagingPage(countryCode, phoneNumberType, options, settings) {
        return tslib_1.__asyncGenerator(this, arguments, function* listAreaCodesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib_1.__await(this._listAreaCodes(countryCode, phoneNumberType, options));
                let page = result.areaCodes || [];
                continuationToken = result.nextLink;
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
            while (continuationToken) {
                result = yield tslib_1.__await(this._listAreaCodesNext(countryCode, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.areaCodes || [];
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
        });
    }
    listAreaCodesPagingAll(countryCode, phoneNumberType, options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listAreaCodesPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.listAreaCodesPagingPage(countryCode, phoneNumberType, options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the list of supported countries.
     * @param options The options parameters.
     */
    listAvailableCountries(options) {
        const iter = this.listAvailableCountriesPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAvailableCountriesPagingPage(options, settings);
            },
        };
    }
    listAvailableCountriesPagingPage(options, settings) {
        return tslib_1.__asyncGenerator(this, arguments, function* listAvailableCountriesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib_1.__await(this._listAvailableCountries(options));
                let page = result.countries || [];
                continuationToken = result.nextLink;
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
            while (continuationToken) {
                result = yield tslib_1.__await(this._listAvailableCountriesNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.countries || [];
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
        });
    }
    listAvailableCountriesPagingAll(options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listAvailableCountriesPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.listAvailableCountriesPagingPage(options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets the list of cities or towns with available phone numbers.
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param options The options parameters.
     */
    listAvailableLocalities(countryCode, options) {
        const iter = this.listAvailableLocalitiesPagingAll(countryCode, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAvailableLocalitiesPagingPage(countryCode, options, settings);
            },
        };
    }
    listAvailableLocalitiesPagingPage(countryCode, options, settings) {
        return tslib_1.__asyncGenerator(this, arguments, function* listAvailableLocalitiesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib_1.__await(this._listAvailableLocalities(countryCode, options));
                let page = result.phoneNumberLocalities || [];
                continuationToken = result.nextLink;
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
            while (continuationToken) {
                result = yield tslib_1.__await(this._listAvailableLocalitiesNext(countryCode, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.phoneNumberLocalities || [];
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
        });
    }
    listAvailableLocalitiesPagingAll(countryCode, options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listAvailableLocalitiesPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.listAvailableLocalitiesPagingPage(countryCode, options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * List available offerings of capabilities with rates for the given country.
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param options The options parameters.
     */
    listOfferings(countryCode, options) {
        const iter = this.listOfferingsPagingAll(countryCode, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listOfferingsPagingPage(countryCode, options, settings);
            },
        };
    }
    listOfferingsPagingPage(countryCode, options, settings) {
        return tslib_1.__asyncGenerator(this, arguments, function* listOfferingsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib_1.__await(this._listOfferings(countryCode, options));
                let page = result.phoneNumberOfferings || [];
                continuationToken = result.nextLink;
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
            while (continuationToken) {
                result = yield tslib_1.__await(this._listOfferingsNext(countryCode, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.phoneNumberOfferings || [];
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
        });
    }
    listOfferingsPagingAll(countryCode, options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listOfferingsPagingAll_1() {
            var _a, e_4, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.listOfferingsPagingPage(countryCode, options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Gets the list of all purchased phone numbers.
     * @param options The options parameters.
     */
    listPhoneNumbers(options) {
        const iter = this.listPhoneNumbersPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPhoneNumbersPagingPage(options, settings);
            },
        };
    }
    listPhoneNumbersPagingPage(options, settings) {
        return tslib_1.__asyncGenerator(this, arguments, function* listPhoneNumbersPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib_1.__await(this._listPhoneNumbers(options));
                let page = result.phoneNumbers || [];
                continuationToken = result.nextLink;
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
            while (continuationToken) {
                result = yield tslib_1.__await(this._listPhoneNumbersNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.phoneNumbers || [];
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
        });
    }
    listPhoneNumbersPagingAll(options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listPhoneNumbersPagingAll_1() {
            var _a, e_5, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.listPhoneNumbersPagingPage(options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Gets the list of available area codes.
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param phoneNumberType Filter by numberType, e.g. Geographic, TollFree.
     * @param options The options parameters.
     */
    async _listAreaCodes(countryCode, phoneNumberType, options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient._listAreaCodes", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ countryCode, phoneNumberType, options }, listAreaCodesOperationSpec);
        });
    }
    /**
     * Gets the list of supported countries.
     * @param options The options parameters.
     */
    async _listAvailableCountries(options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient._listAvailableCountries", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ options }, listAvailableCountriesOperationSpec);
        });
    }
    /**
     * Gets the list of cities or towns with available phone numbers.
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param options The options parameters.
     */
    async _listAvailableLocalities(countryCode, options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient._listAvailableLocalities", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ countryCode, options }, listAvailableLocalitiesOperationSpec);
        });
    }
    /**
     * List available offerings of capabilities with rates for the given country.
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param options The options parameters.
     */
    async _listOfferings(countryCode, options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient._listOfferings", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ countryCode, options }, listOfferingsOperationSpec);
        });
    }
    /**
     * Search for available phone numbers to purchase.
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param phoneNumberType The type of phone numbers to search for, e.g. geographic, or tollFree.
     * @param assignmentType The assignment type of the phone numbers to search for. A phone number can be
     *                       assigned to a person, or to an application.
     * @param capabilities Capabilities of a phone number.
     * @param options The options parameters.
     */
    async beginSearchAvailablePhoneNumbers(countryCode, phoneNumberType, assignmentType, capabilities, options) {
        const directSendOperation = async (args, spec) => {
            return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient.beginSearchAvailablePhoneNumbers", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: {
                countryCode,
                phoneNumberType,
                assignmentType,
                capabilities,
                options,
            },
            spec: searchAvailablePhoneNumbersOperationSpec,
        });
        const poller = new core_lro_1.LroEngine(lro, {
            resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            lroResourceLocationConfig: "location",
        });
        await poller.poll();
        return poller;
    }
    /**
     * Search for available phone numbers to purchase.
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param phoneNumberType The type of phone numbers to search for, e.g. geographic, or tollFree.
     * @param assignmentType The assignment type of the phone numbers to search for. A phone number can be
     *                       assigned to a person, or to an application.
     * @param capabilities Capabilities of a phone number.
     * @param options The options parameters.
     */
    async beginSearchAvailablePhoneNumbersAndWait(countryCode, phoneNumberType, assignmentType, capabilities, options) {
        const poller = await this.beginSearchAvailablePhoneNumbers(countryCode, phoneNumberType, assignmentType, capabilities, options);
        return poller.pollUntilDone();
    }
    /**
     * Gets a phone number search result by search id.
     * @param searchId The search Id.
     * @param options The options parameters.
     */
    async getSearchResult(searchId, options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient.getSearchResult", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ searchId, options }, getSearchResultOperationSpec);
        });
    }
    /**
     * Purchases phone numbers.
     * @param options The options parameters.
     */
    async beginPurchasePhoneNumbers(options) {
        const directSendOperation = async (args, spec) => {
            return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient.beginPurchasePhoneNumbers", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { options },
            spec: purchasePhoneNumbersOperationSpec,
        });
        const poller = new core_lro_1.LroEngine(lro, {
            resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Purchases phone numbers.
     * @param options The options parameters.
     */
    async beginPurchasePhoneNumbersAndWait(options) {
        const poller = await this.beginPurchasePhoneNumbers(options);
        return poller.pollUntilDone();
    }
    /**
     * Gets an operation by its id.
     * @param operationId The id of the operation
     * @param options The options parameters.
     */
    async getOperation(operationId, options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient.getOperation", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ operationId, options }, getOperationOperationSpec);
        });
    }
    /**
     * Cancels an operation by its id.
     * @param operationId The id of the operation
     * @param options The options parameters.
     */
    async cancelOperation(operationId, options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient.cancelOperation", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ operationId, options }, cancelOperationOperationSpec);
        });
    }
    /**
     * Updates the capabilities of a phone number.
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded
     *                    as %2B, e.g. +11234567890.
     * @param options The options parameters.
     */
    async beginUpdateCapabilities(phoneNumber, options) {
        const directSendOperation = async (args, spec) => {
            return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient.beginUpdateCapabilities", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { phoneNumber, options },
            spec: updateCapabilitiesOperationSpec,
        });
        const poller = new core_lro_1.LroEngine(lro, {
            resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            lroResourceLocationConfig: "location",
        });
        await poller.poll();
        return poller;
    }
    /**
     * Updates the capabilities of a phone number.
     * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded
     *                    as %2B, e.g. +11234567890.
     * @param options The options parameters.
     */
    async beginUpdateCapabilitiesAndWait(phoneNumber, options) {
        const poller = await this.beginUpdateCapabilities(phoneNumber, options);
        return poller.pollUntilDone();
    }
    /**
     * Gets the details of the given purchased phone number.
     * @param phoneNumber The purchased phone number whose details are to be fetched in E.164 format, e.g.
     *                    +11234567890.
     * @param options The options parameters.
     */
    async getByNumber(phoneNumber, options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient.getByNumber", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ phoneNumber, options }, getByNumberOperationSpec);
        });
    }
    /**
     * Releases a purchased phone number.
     * @param phoneNumber Phone number to be released, e.g. +11234567890.
     * @param options The options parameters.
     */
    async beginReleasePhoneNumber(phoneNumber, options) {
        const directSendOperation = async (args, spec) => {
            return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient.beginReleasePhoneNumber", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { phoneNumber, options },
            spec: releasePhoneNumberOperationSpec,
        });
        const poller = new core_lro_1.LroEngine(lro, {
            resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Releases a purchased phone number.
     * @param phoneNumber Phone number to be released, e.g. +11234567890.
     * @param options The options parameters.
     */
    async beginReleasePhoneNumberAndWait(phoneNumber, options) {
        const poller = await this.beginReleasePhoneNumber(phoneNumber, options);
        return poller.pollUntilDone();
    }
    /**
     * Gets the list of all purchased phone numbers.
     * @param options The options parameters.
     */
    async _listPhoneNumbers(options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient._listPhoneNumbers", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ options }, listPhoneNumbersOperationSpec);
        });
    }
    /**
     * Searches for number format and operator information for a given list of phone numbers.
     * @param phoneNumbers Phone number(s) whose operator information is being requested
     * @param options The options parameters.
     */
    async operatorInformationSearch(phoneNumbers, options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient.operatorInformationSearch", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ phoneNumbers, options }, operatorInformationSearchOperationSpec);
        });
    }
    /**
     * ListAreaCodesNext
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param nextLink The nextLink from the previous successful call to the ListAreaCodes method.
     * @param options The options parameters.
     */
    async _listAreaCodesNext(countryCode, nextLink, options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient._listAreaCodesNext", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ countryCode, nextLink, options }, listAreaCodesNextOperationSpec);
        });
    }
    /**
     * ListAvailableCountriesNext
     * @param nextLink The nextLink from the previous successful call to the ListAvailableCountries method.
     * @param options The options parameters.
     */
    async _listAvailableCountriesNext(nextLink, options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient._listAvailableCountriesNext", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ nextLink, options }, listAvailableCountriesNextOperationSpec);
        });
    }
    /**
     * ListAvailableLocalitiesNext
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param nextLink The nextLink from the previous successful call to the ListAvailableLocalities
     *                 method.
     * @param options The options parameters.
     */
    async _listAvailableLocalitiesNext(countryCode, nextLink, options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient._listAvailableLocalitiesNext", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ countryCode, nextLink, options }, listAvailableLocalitiesNextOperationSpec);
        });
    }
    /**
     * ListOfferingsNext
     * @param countryCode The ISO 3166-2 country code, e.g. US.
     * @param nextLink The nextLink from the previous successful call to the ListOfferings method.
     * @param options The options parameters.
     */
    async _listOfferingsNext(countryCode, nextLink, options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient._listOfferingsNext", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ countryCode, nextLink, options }, listOfferingsNextOperationSpec);
        });
    }
    /**
     * ListPhoneNumbersNext
     * @param nextLink The nextLink from the previous successful call to the ListPhoneNumbers method.
     * @param options The options parameters.
     */
    async _listPhoneNumbersNext(nextLink, options) {
        return tracing_js_1.tracingClient.withSpan("PhoneNumbersClient._listPhoneNumbersNext", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ nextLink, options }, listPhoneNumbersNextOperationSpec);
        });
    }
}
exports.PhoneNumbersImpl = PhoneNumbersImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listAreaCodesOperationSpec = {
    path: "/availablePhoneNumbers/countries/{countryCode}/areaCodes",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberAreaCodes,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [
        Parameters.phoneNumberType,
        Parameters.skip,
        Parameters.maxPageSize,
        Parameters.assignmentType,
        Parameters.locality,
        Parameters.administrativeDivision,
        Parameters.apiVersion,
    ],
    urlParameters: [Parameters.endpoint, Parameters.countryCode],
    headerParameters: [Parameters.accept, Parameters.acceptLanguage],
    serializer,
};
const listAvailableCountriesOperationSpec = {
    path: "/availablePhoneNumbers/countries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberCountries,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [
        Parameters.skip,
        Parameters.maxPageSize,
        Parameters.apiVersion,
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept, Parameters.acceptLanguage],
    serializer,
};
const listAvailableLocalitiesOperationSpec = {
    path: "/availablePhoneNumbers/countries/{countryCode}/localities",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberLocalities,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [
        Parameters.skip,
        Parameters.maxPageSize,
        Parameters.administrativeDivision,
        Parameters.apiVersion,
    ],
    urlParameters: [Parameters.endpoint, Parameters.countryCode],
    headerParameters: [Parameters.accept, Parameters.acceptLanguage],
    serializer,
};
const listOfferingsOperationSpec = {
    path: "/availablePhoneNumbers/countries/{countryCode}/offerings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OfferingsResponse,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [
        Parameters.skip,
        Parameters.maxPageSize,
        Parameters.assignmentType,
        Parameters.apiVersion,
        Parameters.phoneNumberType1,
    ],
    urlParameters: [Parameters.endpoint, Parameters.countryCode],
    headerParameters: [Parameters.accept, Parameters.acceptLanguage],
    serializer,
};
const searchAvailablePhoneNumbersOperationSpec = {
    path: "/availablePhoneNumbers/countries/{countryCode}/:search",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberSearchResult,
            headersMapper: Mappers.PhoneNumbersSearchAvailablePhoneNumbersHeaders,
        },
        201: {
            bodyMapper: Mappers.PhoneNumberSearchResult,
            headersMapper: Mappers.PhoneNumbersSearchAvailablePhoneNumbersHeaders,
        },
        202: {
            bodyMapper: Mappers.PhoneNumberSearchResult,
            headersMapper: Mappers.PhoneNumbersSearchAvailablePhoneNumbersHeaders,
        },
        204: {
            bodyMapper: Mappers.PhoneNumberSearchResult,
            headersMapper: Mappers.PhoneNumbersSearchAvailablePhoneNumbersHeaders,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: {
        parameterPath: {
            phoneNumberType: ["phoneNumberType"],
            assignmentType: ["assignmentType"],
            capabilities: ["capabilities"],
            areaCode: ["options", "areaCode"],
            quantity: ["options", "quantity"],
        },
        mapper: Object.assign(Object.assign({}, Mappers.PhoneNumberSearchRequest), { required: true }),
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.countryCode],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const getSearchResultOperationSpec = {
    path: "/availablePhoneNumbers/searchResults/{searchId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberSearchResult,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.searchId],
    headerParameters: [Parameters.accept],
    serializer,
};
const purchasePhoneNumbersOperationSpec = {
    path: "/availablePhoneNumbers/:purchase",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: Mappers.PhoneNumbersPurchasePhoneNumbersHeaders,
        },
        201: {
            headersMapper: Mappers.PhoneNumbersPurchasePhoneNumbersHeaders,
        },
        202: {
            headersMapper: Mappers.PhoneNumbersPurchasePhoneNumbersHeaders,
        },
        204: {
            headersMapper: Mappers.PhoneNumbersPurchasePhoneNumbersHeaders,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: {
        parameterPath: { searchId: ["options", "searchId"] },
        mapper: Object.assign(Object.assign({}, Mappers.PhoneNumberPurchaseRequest), { required: true }),
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const getOperationOperationSpec = {
    path: "/phoneNumbers/operations/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberOperation,
            headersMapper: Mappers.PhoneNumbersGetOperationHeaders,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.operationId],
    headerParameters: [Parameters.accept],
    serializer,
};
const cancelOperationOperationSpec = {
    path: "/phoneNumbers/operations/{operationId}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.operationId],
    headerParameters: [Parameters.accept],
    serializer,
};
const updateCapabilitiesOperationSpec = {
    path: "/phoneNumbers/{phoneNumber}/capabilities",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.PurchasedPhoneNumber,
            headersMapper: Mappers.PhoneNumbersUpdateCapabilitiesHeaders,
        },
        201: {
            bodyMapper: Mappers.PurchasedPhoneNumber,
            headersMapper: Mappers.PhoneNumbersUpdateCapabilitiesHeaders,
        },
        202: {
            bodyMapper: Mappers.PurchasedPhoneNumber,
            headersMapper: Mappers.PhoneNumbersUpdateCapabilitiesHeaders,
        },
        204: {
            bodyMapper: Mappers.PurchasedPhoneNumber,
            headersMapper: Mappers.PhoneNumbersUpdateCapabilitiesHeaders,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: {
        parameterPath: { calling: ["options", "calling"], sms: ["options", "sms"] },
        mapper: Mappers.PhoneNumberCapabilitiesRequest,
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.phoneNumber],
    headerParameters: [Parameters.accept, Parameters.contentType1],
    mediaType: "json",
    serializer,
};
const getByNumberOperationSpec = {
    path: "/phoneNumbers/{phoneNumber}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PurchasedPhoneNumber,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.phoneNumber],
    headerParameters: [Parameters.accept],
    serializer,
};
const releasePhoneNumberOperationSpec = {
    path: "/phoneNumbers/{phoneNumber}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: Mappers.PhoneNumbersReleasePhoneNumberHeaders,
        },
        201: {
            headersMapper: Mappers.PhoneNumbersReleasePhoneNumberHeaders,
        },
        202: {
            headersMapper: Mappers.PhoneNumbersReleasePhoneNumberHeaders,
        },
        204: {
            headersMapper: Mappers.PhoneNumbersReleasePhoneNumberHeaders,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.phoneNumber],
    headerParameters: [Parameters.accept],
    serializer,
};
const listPhoneNumbersOperationSpec = {
    path: "/phoneNumbers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PurchasedPhoneNumbers,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [Parameters.skip, Parameters.apiVersion, Parameters.top],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept],
    serializer,
};
const operatorInformationSearchOperationSpec = {
    path: "/operatorInformation/:search",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.OperatorInformationResult,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: {
        parameterPath: {
            phoneNumbers: ["phoneNumbers"],
            options: ["options", "options"],
        },
        mapper: Object.assign(Object.assign({}, Mappers.OperatorInformationRequest), { required: true }),
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const listAreaCodesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberAreaCodes,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    urlParameters: [
        Parameters.endpoint,
        Parameters.countryCode,
        Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept, Parameters.acceptLanguage],
    serializer,
};
const listAvailableCountriesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberCountries,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [Parameters.accept, Parameters.acceptLanguage],
    serializer,
};
const listAvailableLocalitiesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PhoneNumberLocalities,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    urlParameters: [
        Parameters.endpoint,
        Parameters.countryCode,
        Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept, Parameters.acceptLanguage],
    serializer,
};
const listOfferingsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.OfferingsResponse,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    urlParameters: [
        Parameters.endpoint,
        Parameters.countryCode,
        Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept, Parameters.acceptLanguage],
    serializer,
};
const listPhoneNumbersNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PurchasedPhoneNumbers,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=phoneNumbers.js.map