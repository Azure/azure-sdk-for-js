{"version":3,"file":"phoneNumbers.js","sourceRoot":"","sources":["../../../../../src/generated/src/operations/phoneNumbers.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport { PhoneNumbers } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { PhoneNumbersClient } from \"../phoneNumbersClient.js\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport {\n  PhoneNumberAreaCode,\n  PhoneNumbersListAreaCodesNextOptionalParams,\n  PhoneNumberType,\n  PhoneNumbersListAreaCodesOptionalParams,\n  PhoneNumbersListAreaCodesResponse,\n  PhoneNumberCountry,\n  PhoneNumbersListAvailableCountriesNextOptionalParams,\n  PhoneNumbersListAvailableCountriesOptionalParams,\n  PhoneNumbersListAvailableCountriesResponse,\n  PhoneNumberLocality,\n  PhoneNumbersListAvailableLocalitiesNextOptionalParams,\n  PhoneNumbersListAvailableLocalitiesOptionalParams,\n  PhoneNumbersListAvailableLocalitiesResponse,\n  PhoneNumberOffering,\n  PhoneNumbersListOfferingsNextOptionalParams,\n  PhoneNumbersListOfferingsOptionalParams,\n  PhoneNumbersListOfferingsResponse,\n  PurchasedPhoneNumber,\n  PhoneNumbersListPhoneNumbersNextOptionalParams,\n  PhoneNumbersListPhoneNumbersOptionalParams,\n  PhoneNumbersListPhoneNumbersResponse,\n  PhoneNumberAssignmentType,\n  PhoneNumberCapabilities,\n  PhoneNumbersSearchAvailablePhoneNumbersOptionalParams,\n  PhoneNumbersSearchAvailablePhoneNumbersResponse,\n  PhoneNumbersGetSearchResultOptionalParams,\n  PhoneNumbersGetSearchResultResponse,\n  PhoneNumbersPurchasePhoneNumbersOptionalParams,\n  PhoneNumbersPurchasePhoneNumbersResponse,\n  PhoneNumbersGetOperationOptionalParams,\n  PhoneNumbersGetOperationResponse,\n  PhoneNumbersCancelOperationOptionalParams,\n  PhoneNumbersUpdateCapabilitiesOptionalParams,\n  PhoneNumbersUpdateCapabilitiesResponse,\n  PhoneNumbersGetByNumberOptionalParams,\n  PhoneNumbersGetByNumberResponse,\n  PhoneNumbersReleasePhoneNumberOptionalParams,\n  PhoneNumbersReleasePhoneNumberResponse,\n  PhoneNumbersOperatorInformationSearchOptionalParams,\n  PhoneNumbersOperatorInformationSearchResponse,\n  PhoneNumbersListAreaCodesNextResponse,\n  PhoneNumbersListAvailableCountriesNextResponse,\n  PhoneNumbersListAvailableLocalitiesNextResponse,\n  PhoneNumbersListOfferingsNextResponse,\n  PhoneNumbersListPhoneNumbersNextResponse,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PhoneNumbers operations. */\nexport class PhoneNumbersImpl implements PhoneNumbers {\n  private readonly client: PhoneNumbersClient;\n\n  /**\n   * Initialize a new instance of the class PhoneNumbers class.\n   * @param client Reference to the service client\n   */\n  constructor(client: PhoneNumbersClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets the list of available area codes.\n   * @param countryCode The ISO 3166-2 country code, e.g. US.\n   * @param phoneNumberType Filter by numberType, e.g. Geographic, TollFree.\n   * @param options The options parameters.\n   */\n  public listAreaCodes(\n    countryCode: string,\n    phoneNumberType: PhoneNumberType,\n    options?: PhoneNumbersListAreaCodesOptionalParams,\n  ): PagedAsyncIterableIterator<PhoneNumberAreaCode> {\n    const iter = this.listAreaCodesPagingAll(\n      countryCode,\n      phoneNumberType,\n      options,\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listAreaCodesPagingPage(\n          countryCode,\n          phoneNumberType,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listAreaCodesPagingPage(\n    countryCode: string,\n    phoneNumberType: PhoneNumberType,\n    options?: PhoneNumbersListAreaCodesOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<PhoneNumberAreaCode[]> {\n    let result: PhoneNumbersListAreaCodesResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listAreaCodes(countryCode, phoneNumberType, options);\n      let page = result.areaCodes || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listAreaCodesNext(\n        countryCode,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.areaCodes || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listAreaCodesPagingAll(\n    countryCode: string,\n    phoneNumberType: PhoneNumberType,\n    options?: PhoneNumbersListAreaCodesOptionalParams,\n  ): AsyncIterableIterator<PhoneNumberAreaCode> {\n    for await (const page of this.listAreaCodesPagingPage(\n      countryCode,\n      phoneNumberType,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the list of supported countries.\n   * @param options The options parameters.\n   */\n  public listAvailableCountries(\n    options?: PhoneNumbersListAvailableCountriesOptionalParams,\n  ): PagedAsyncIterableIterator<PhoneNumberCountry> {\n    const iter = this.listAvailableCountriesPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listAvailableCountriesPagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *listAvailableCountriesPagingPage(\n    options?: PhoneNumbersListAvailableCountriesOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<PhoneNumberCountry[]> {\n    let result: PhoneNumbersListAvailableCountriesResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listAvailableCountries(options);\n      let page = result.countries || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listAvailableCountriesNext(\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.countries || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listAvailableCountriesPagingAll(\n    options?: PhoneNumbersListAvailableCountriesOptionalParams,\n  ): AsyncIterableIterator<PhoneNumberCountry> {\n    for await (const page of this.listAvailableCountriesPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the list of cities or towns with available phone numbers.\n   * @param countryCode The ISO 3166-2 country code, e.g. US.\n   * @param options The options parameters.\n   */\n  public listAvailableLocalities(\n    countryCode: string,\n    options?: PhoneNumbersListAvailableLocalitiesOptionalParams,\n  ): PagedAsyncIterableIterator<PhoneNumberLocality> {\n    const iter = this.listAvailableLocalitiesPagingAll(countryCode, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listAvailableLocalitiesPagingPage(\n          countryCode,\n          options,\n          settings,\n        );\n      },\n    };\n  }\n\n  private async *listAvailableLocalitiesPagingPage(\n    countryCode: string,\n    options?: PhoneNumbersListAvailableLocalitiesOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<PhoneNumberLocality[]> {\n    let result: PhoneNumbersListAvailableLocalitiesResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listAvailableLocalities(countryCode, options);\n      let page = result.phoneNumberLocalities || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listAvailableLocalitiesNext(\n        countryCode,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.phoneNumberLocalities || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listAvailableLocalitiesPagingAll(\n    countryCode: string,\n    options?: PhoneNumbersListAvailableLocalitiesOptionalParams,\n  ): AsyncIterableIterator<PhoneNumberLocality> {\n    for await (const page of this.listAvailableLocalitiesPagingPage(\n      countryCode,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List available offerings of capabilities with rates for the given country.\n   * @param countryCode The ISO 3166-2 country code, e.g. US.\n   * @param options The options parameters.\n   */\n  public listOfferings(\n    countryCode: string,\n    options?: PhoneNumbersListOfferingsOptionalParams,\n  ): PagedAsyncIterableIterator<PhoneNumberOffering> {\n    const iter = this.listOfferingsPagingAll(countryCode, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listOfferingsPagingPage(countryCode, options, settings);\n      },\n    };\n  }\n\n  private async *listOfferingsPagingPage(\n    countryCode: string,\n    options?: PhoneNumbersListOfferingsOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<PhoneNumberOffering[]> {\n    let result: PhoneNumbersListOfferingsResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listOfferings(countryCode, options);\n      let page = result.phoneNumberOfferings || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listOfferingsNext(\n        countryCode,\n        continuationToken,\n        options,\n      );\n      continuationToken = result.nextLink;\n      let page = result.phoneNumberOfferings || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listOfferingsPagingAll(\n    countryCode: string,\n    options?: PhoneNumbersListOfferingsOptionalParams,\n  ): AsyncIterableIterator<PhoneNumberOffering> {\n    for await (const page of this.listOfferingsPagingPage(\n      countryCode,\n      options,\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the list of all purchased phone numbers.\n   * @param options The options parameters.\n   */\n  public listPhoneNumbers(\n    options?: PhoneNumbersListPhoneNumbersOptionalParams,\n  ): PagedAsyncIterableIterator<PurchasedPhoneNumber> {\n    const iter = this.listPhoneNumbersPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPhoneNumbersPagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *listPhoneNumbersPagingPage(\n    options?: PhoneNumbersListPhoneNumbersOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<PurchasedPhoneNumber[]> {\n    let result: PhoneNumbersListPhoneNumbersResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listPhoneNumbers(options);\n      let page = result.phoneNumbers || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listPhoneNumbersNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.phoneNumbers || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPhoneNumbersPagingAll(\n    options?: PhoneNumbersListPhoneNumbersOptionalParams,\n  ): AsyncIterableIterator<PurchasedPhoneNumber> {\n    for await (const page of this.listPhoneNumbersPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the list of available area codes.\n   * @param countryCode The ISO 3166-2 country code, e.g. US.\n   * @param phoneNumberType Filter by numberType, e.g. Geographic, TollFree.\n   * @param options The options parameters.\n   */\n  private async _listAreaCodes(\n    countryCode: string,\n    phoneNumberType: PhoneNumberType,\n    options?: PhoneNumbersListAreaCodesOptionalParams,\n  ): Promise<PhoneNumbersListAreaCodesResponse> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient._listAreaCodes\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { countryCode, phoneNumberType, options },\n          listAreaCodesOperationSpec,\n        ) as Promise<PhoneNumbersListAreaCodesResponse>;\n      },\n    );\n  }\n\n  /**\n   * Gets the list of supported countries.\n   * @param options The options parameters.\n   */\n  private async _listAvailableCountries(\n    options?: PhoneNumbersListAvailableCountriesOptionalParams,\n  ): Promise<PhoneNumbersListAvailableCountriesResponse> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient._listAvailableCountries\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { options },\n          listAvailableCountriesOperationSpec,\n        ) as Promise<PhoneNumbersListAvailableCountriesResponse>;\n      },\n    );\n  }\n\n  /**\n   * Gets the list of cities or towns with available phone numbers.\n   * @param countryCode The ISO 3166-2 country code, e.g. US.\n   * @param options The options parameters.\n   */\n  private async _listAvailableLocalities(\n    countryCode: string,\n    options?: PhoneNumbersListAvailableLocalitiesOptionalParams,\n  ): Promise<PhoneNumbersListAvailableLocalitiesResponse> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient._listAvailableLocalities\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { countryCode, options },\n          listAvailableLocalitiesOperationSpec,\n        ) as Promise<PhoneNumbersListAvailableLocalitiesResponse>;\n      },\n    );\n  }\n\n  /**\n   * List available offerings of capabilities with rates for the given country.\n   * @param countryCode The ISO 3166-2 country code, e.g. US.\n   * @param options The options parameters.\n   */\n  private async _listOfferings(\n    countryCode: string,\n    options?: PhoneNumbersListOfferingsOptionalParams,\n  ): Promise<PhoneNumbersListOfferingsResponse> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient._listOfferings\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { countryCode, options },\n          listOfferingsOperationSpec,\n        ) as Promise<PhoneNumbersListOfferingsResponse>;\n      },\n    );\n  }\n\n  /**\n   * Search for available phone numbers to purchase.\n   * @param countryCode The ISO 3166-2 country code, e.g. US.\n   * @param phoneNumberType The type of phone numbers to search for, e.g. geographic, or tollFree.\n   * @param assignmentType The assignment type of the phone numbers to search for. A phone number can be\n   *                       assigned to a person, or to an application.\n   * @param capabilities Capabilities of a phone number.\n   * @param options The options parameters.\n   */\n  async beginSearchAvailablePhoneNumbers(\n    countryCode: string,\n    phoneNumberType: PhoneNumberType,\n    assignmentType: PhoneNumberAssignmentType,\n    capabilities: PhoneNumberCapabilities,\n    options?: PhoneNumbersSearchAvailablePhoneNumbersOptionalParams,\n  ): Promise<\n    PollerLike<\n      PollOperationState<PhoneNumbersSearchAvailablePhoneNumbersResponse>,\n      PhoneNumbersSearchAvailablePhoneNumbersResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<PhoneNumbersSearchAvailablePhoneNumbersResponse> => {\n      return tracingClient.withSpan(\n        \"PhoneNumbersClient.beginSearchAvailablePhoneNumbers\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(\n            args,\n            spec,\n          ) as Promise<PhoneNumbersSearchAvailablePhoneNumbersResponse>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        countryCode,\n        phoneNumberType,\n        assignmentType,\n        capabilities,\n        options,\n      },\n      spec: searchAvailablePhoneNumbersOperationSpec,\n    });\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      lroResourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Search for available phone numbers to purchase.\n   * @param countryCode The ISO 3166-2 country code, e.g. US.\n   * @param phoneNumberType The type of phone numbers to search for, e.g. geographic, or tollFree.\n   * @param assignmentType The assignment type of the phone numbers to search for. A phone number can be\n   *                       assigned to a person, or to an application.\n   * @param capabilities Capabilities of a phone number.\n   * @param options The options parameters.\n   */\n  async beginSearchAvailablePhoneNumbersAndWait(\n    countryCode: string,\n    phoneNumberType: PhoneNumberType,\n    assignmentType: PhoneNumberAssignmentType,\n    capabilities: PhoneNumberCapabilities,\n    options?: PhoneNumbersSearchAvailablePhoneNumbersOptionalParams,\n  ): Promise<PhoneNumbersSearchAvailablePhoneNumbersResponse> {\n    const poller = await this.beginSearchAvailablePhoneNumbers(\n      countryCode,\n      phoneNumberType,\n      assignmentType,\n      capabilities,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets a phone number search result by search id.\n   * @param searchId The search Id.\n   * @param options The options parameters.\n   */\n  async getSearchResult(\n    searchId: string,\n    options?: PhoneNumbersGetSearchResultOptionalParams,\n  ): Promise<PhoneNumbersGetSearchResultResponse> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient.getSearchResult\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { searchId, options },\n          getSearchResultOperationSpec,\n        ) as Promise<PhoneNumbersGetSearchResultResponse>;\n      },\n    );\n  }\n\n  /**\n   * Purchases phone numbers.\n   * @param options The options parameters.\n   */\n  async beginPurchasePhoneNumbers(\n    options?: PhoneNumbersPurchasePhoneNumbersOptionalParams,\n  ): Promise<\n    PollerLike<\n      PollOperationState<PhoneNumbersPurchasePhoneNumbersResponse>,\n      PhoneNumbersPurchasePhoneNumbersResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<PhoneNumbersPurchasePhoneNumbersResponse> => {\n      return tracingClient.withSpan(\n        \"PhoneNumbersClient.beginPurchasePhoneNumbers\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(\n            args,\n            spec,\n          ) as Promise<PhoneNumbersPurchasePhoneNumbersResponse>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { options },\n      spec: purchasePhoneNumbersOperationSpec,\n    });\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Purchases phone numbers.\n   * @param options The options parameters.\n   */\n  async beginPurchasePhoneNumbersAndWait(\n    options?: PhoneNumbersPurchasePhoneNumbersOptionalParams,\n  ): Promise<PhoneNumbersPurchasePhoneNumbersResponse> {\n    const poller = await this.beginPurchasePhoneNumbers(options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets an operation by its id.\n   * @param operationId The id of the operation\n   * @param options The options parameters.\n   */\n  async getOperation(\n    operationId: string,\n    options?: PhoneNumbersGetOperationOptionalParams,\n  ): Promise<PhoneNumbersGetOperationResponse> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient.getOperation\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { operationId, options },\n          getOperationOperationSpec,\n        ) as Promise<PhoneNumbersGetOperationResponse>;\n      },\n    );\n  }\n\n  /**\n   * Cancels an operation by its id.\n   * @param operationId The id of the operation\n   * @param options The options parameters.\n   */\n  async cancelOperation(\n    operationId: string,\n    options?: PhoneNumbersCancelOperationOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient.cancelOperation\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { operationId, options },\n          cancelOperationOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n\n  /**\n   * Updates the capabilities of a phone number.\n   * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded\n   *                    as %2B, e.g. +11234567890.\n   * @param options The options parameters.\n   */\n  async beginUpdateCapabilities(\n    phoneNumber: string,\n    options?: PhoneNumbersUpdateCapabilitiesOptionalParams,\n  ): Promise<\n    PollerLike<\n      PollOperationState<PhoneNumbersUpdateCapabilitiesResponse>,\n      PhoneNumbersUpdateCapabilitiesResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<PhoneNumbersUpdateCapabilitiesResponse> => {\n      return tracingClient.withSpan(\n        \"PhoneNumbersClient.beginUpdateCapabilities\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(\n            args,\n            spec,\n          ) as Promise<PhoneNumbersUpdateCapabilitiesResponse>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { phoneNumber, options },\n      spec: updateCapabilitiesOperationSpec,\n    });\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      lroResourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates the capabilities of a phone number.\n   * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded\n   *                    as %2B, e.g. +11234567890.\n   * @param options The options parameters.\n   */\n  async beginUpdateCapabilitiesAndWait(\n    phoneNumber: string,\n    options?: PhoneNumbersUpdateCapabilitiesOptionalParams,\n  ): Promise<PhoneNumbersUpdateCapabilitiesResponse> {\n    const poller = await this.beginUpdateCapabilities(phoneNumber, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the details of the given purchased phone number.\n   * @param phoneNumber The purchased phone number whose details are to be fetched in E.164 format, e.g.\n   *                    +11234567890.\n   * @param options The options parameters.\n   */\n  async getByNumber(\n    phoneNumber: string,\n    options?: PhoneNumbersGetByNumberOptionalParams,\n  ): Promise<PhoneNumbersGetByNumberResponse> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient.getByNumber\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { phoneNumber, options },\n          getByNumberOperationSpec,\n        ) as Promise<PhoneNumbersGetByNumberResponse>;\n      },\n    );\n  }\n\n  /**\n   * Releases a purchased phone number.\n   * @param phoneNumber Phone number to be released, e.g. +11234567890.\n   * @param options The options parameters.\n   */\n  async beginReleasePhoneNumber(\n    phoneNumber: string,\n    options?: PhoneNumbersReleasePhoneNumberOptionalParams,\n  ): Promise<\n    PollerLike<\n      PollOperationState<PhoneNumbersReleasePhoneNumberResponse>,\n      PhoneNumbersReleasePhoneNumberResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<PhoneNumbersReleasePhoneNumberResponse> => {\n      return tracingClient.withSpan(\n        \"PhoneNumbersClient.beginReleasePhoneNumber\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(\n            args,\n            spec,\n          ) as Promise<PhoneNumbersReleasePhoneNumberResponse>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined =\n        undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { phoneNumber, options },\n      spec: releasePhoneNumberOperationSpec,\n    });\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Releases a purchased phone number.\n   * @param phoneNumber Phone number to be released, e.g. +11234567890.\n   * @param options The options parameters.\n   */\n  async beginReleasePhoneNumberAndWait(\n    phoneNumber: string,\n    options?: PhoneNumbersReleasePhoneNumberOptionalParams,\n  ): Promise<PhoneNumbersReleasePhoneNumberResponse> {\n    const poller = await this.beginReleasePhoneNumber(phoneNumber, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the list of all purchased phone numbers.\n   * @param options The options parameters.\n   */\n  private async _listPhoneNumbers(\n    options?: PhoneNumbersListPhoneNumbersOptionalParams,\n  ): Promise<PhoneNumbersListPhoneNumbersResponse> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient._listPhoneNumbers\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { options },\n          listPhoneNumbersOperationSpec,\n        ) as Promise<PhoneNumbersListPhoneNumbersResponse>;\n      },\n    );\n  }\n\n  /**\n   * Searches for number format and operator information for a given list of phone numbers.\n   * @param phoneNumbers Phone number(s) whose operator information is being requested\n   * @param options The options parameters.\n   */\n  async operatorInformationSearch(\n    phoneNumbers: string[],\n    options?: PhoneNumbersOperatorInformationSearchOptionalParams,\n  ): Promise<PhoneNumbersOperatorInformationSearchResponse> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient.operatorInformationSearch\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { phoneNumbers, options },\n          operatorInformationSearchOperationSpec,\n        ) as Promise<PhoneNumbersOperatorInformationSearchResponse>;\n      },\n    );\n  }\n\n  /**\n   * ListAreaCodesNext\n   * @param countryCode The ISO 3166-2 country code, e.g. US.\n   * @param nextLink The nextLink from the previous successful call to the ListAreaCodes method.\n   * @param options The options parameters.\n   */\n  private async _listAreaCodesNext(\n    countryCode: string,\n    nextLink: string,\n    options?: PhoneNumbersListAreaCodesNextOptionalParams,\n  ): Promise<PhoneNumbersListAreaCodesNextResponse> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient._listAreaCodesNext\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { countryCode, nextLink, options },\n          listAreaCodesNextOperationSpec,\n        ) as Promise<PhoneNumbersListAreaCodesNextResponse>;\n      },\n    );\n  }\n\n  /**\n   * ListAvailableCountriesNext\n   * @param nextLink The nextLink from the previous successful call to the ListAvailableCountries method.\n   * @param options The options parameters.\n   */\n  private async _listAvailableCountriesNext(\n    nextLink: string,\n    options?: PhoneNumbersListAvailableCountriesNextOptionalParams,\n  ): Promise<PhoneNumbersListAvailableCountriesNextResponse> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient._listAvailableCountriesNext\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { nextLink, options },\n          listAvailableCountriesNextOperationSpec,\n        ) as Promise<PhoneNumbersListAvailableCountriesNextResponse>;\n      },\n    );\n  }\n\n  /**\n   * ListAvailableLocalitiesNext\n   * @param countryCode The ISO 3166-2 country code, e.g. US.\n   * @param nextLink The nextLink from the previous successful call to the ListAvailableLocalities\n   *                 method.\n   * @param options The options parameters.\n   */\n  private async _listAvailableLocalitiesNext(\n    countryCode: string,\n    nextLink: string,\n    options?: PhoneNumbersListAvailableLocalitiesNextOptionalParams,\n  ): Promise<PhoneNumbersListAvailableLocalitiesNextResponse> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient._listAvailableLocalitiesNext\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { countryCode, nextLink, options },\n          listAvailableLocalitiesNextOperationSpec,\n        ) as Promise<PhoneNumbersListAvailableLocalitiesNextResponse>;\n      },\n    );\n  }\n\n  /**\n   * ListOfferingsNext\n   * @param countryCode The ISO 3166-2 country code, e.g. US.\n   * @param nextLink The nextLink from the previous successful call to the ListOfferings method.\n   * @param options The options parameters.\n   */\n  private async _listOfferingsNext(\n    countryCode: string,\n    nextLink: string,\n    options?: PhoneNumbersListOfferingsNextOptionalParams,\n  ): Promise<PhoneNumbersListOfferingsNextResponse> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient._listOfferingsNext\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { countryCode, nextLink, options },\n          listOfferingsNextOperationSpec,\n        ) as Promise<PhoneNumbersListOfferingsNextResponse>;\n      },\n    );\n  }\n\n  /**\n   * ListPhoneNumbersNext\n   * @param nextLink The nextLink from the previous successful call to the ListPhoneNumbers method.\n   * @param options The options parameters.\n   */\n  private async _listPhoneNumbersNext(\n    nextLink: string,\n    options?: PhoneNumbersListPhoneNumbersNextOptionalParams,\n  ): Promise<PhoneNumbersListPhoneNumbersNextResponse> {\n    return tracingClient.withSpan(\n      \"PhoneNumbersClient._listPhoneNumbersNext\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { nextLink, options },\n          listPhoneNumbersNextOperationSpec,\n        ) as Promise<PhoneNumbersListPhoneNumbersNextResponse>;\n      },\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listAreaCodesOperationSpec: coreClient.OperationSpec = {\n  path: \"/availablePhoneNumbers/countries/{countryCode}/areaCodes\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PhoneNumberAreaCodes,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [\n    Parameters.phoneNumberType,\n    Parameters.skip,\n    Parameters.maxPageSize,\n    Parameters.assignmentType,\n    Parameters.locality,\n    Parameters.administrativeDivision,\n    Parameters.apiVersion,\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.countryCode],\n  headerParameters: [Parameters.accept, Parameters.acceptLanguage],\n  serializer,\n};\nconst listAvailableCountriesOperationSpec: coreClient.OperationSpec = {\n  path: \"/availablePhoneNumbers/countries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PhoneNumberCountries,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [\n    Parameters.skip,\n    Parameters.maxPageSize,\n    Parameters.apiVersion,\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.acceptLanguage],\n  serializer,\n};\nconst listAvailableLocalitiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/availablePhoneNumbers/countries/{countryCode}/localities\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PhoneNumberLocalities,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [\n    Parameters.skip,\n    Parameters.maxPageSize,\n    Parameters.administrativeDivision,\n    Parameters.apiVersion,\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.countryCode],\n  headerParameters: [Parameters.accept, Parameters.acceptLanguage],\n  serializer,\n};\nconst listOfferingsOperationSpec: coreClient.OperationSpec = {\n  path: \"/availablePhoneNumbers/countries/{countryCode}/offerings\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OfferingsResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [\n    Parameters.skip,\n    Parameters.maxPageSize,\n    Parameters.assignmentType,\n    Parameters.apiVersion,\n    Parameters.phoneNumberType1,\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.countryCode],\n  headerParameters: [Parameters.accept, Parameters.acceptLanguage],\n  serializer,\n};\nconst searchAvailablePhoneNumbersOperationSpec: coreClient.OperationSpec = {\n  path: \"/availablePhoneNumbers/countries/{countryCode}/:search\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PhoneNumberSearchResult,\n      headersMapper: Mappers.PhoneNumbersSearchAvailablePhoneNumbersHeaders,\n    },\n    201: {\n      bodyMapper: Mappers.PhoneNumberSearchResult,\n      headersMapper: Mappers.PhoneNumbersSearchAvailablePhoneNumbersHeaders,\n    },\n    202: {\n      bodyMapper: Mappers.PhoneNumberSearchResult,\n      headersMapper: Mappers.PhoneNumbersSearchAvailablePhoneNumbersHeaders,\n    },\n    204: {\n      bodyMapper: Mappers.PhoneNumberSearchResult,\n      headersMapper: Mappers.PhoneNumbersSearchAvailablePhoneNumbersHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  requestBody: {\n    parameterPath: {\n      phoneNumberType: [\"phoneNumberType\"],\n      assignmentType: [\"assignmentType\"],\n      capabilities: [\"capabilities\"],\n      areaCode: [\"options\", \"areaCode\"],\n      quantity: [\"options\", \"quantity\"],\n    },\n    mapper: { ...Mappers.PhoneNumberSearchRequest, required: true },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.countryCode],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getSearchResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/availablePhoneNumbers/searchResults/{searchId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PhoneNumberSearchResult,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.searchId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst purchasePhoneNumbersOperationSpec: coreClient.OperationSpec = {\n  path: \"/availablePhoneNumbers/:purchase\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PhoneNumbersPurchasePhoneNumbersHeaders,\n    },\n    201: {\n      headersMapper: Mappers.PhoneNumbersPurchasePhoneNumbersHeaders,\n    },\n    202: {\n      headersMapper: Mappers.PhoneNumbersPurchasePhoneNumbersHeaders,\n    },\n    204: {\n      headersMapper: Mappers.PhoneNumbersPurchasePhoneNumbersHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  requestBody: {\n    parameterPath: { searchId: [\"options\", \"searchId\"] },\n    mapper: { ...Mappers.PhoneNumberPurchaseRequest, required: true },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getOperationOperationSpec: coreClient.OperationSpec = {\n  path: \"/phoneNumbers/operations/{operationId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PhoneNumberOperation,\n      headersMapper: Mappers.PhoneNumbersGetOperationHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.operationId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst cancelOperationOperationSpec: coreClient.OperationSpec = {\n  path: \"/phoneNumbers/operations/{operationId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.operationId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst updateCapabilitiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/phoneNumbers/{phoneNumber}/capabilities\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PurchasedPhoneNumber,\n      headersMapper: Mappers.PhoneNumbersUpdateCapabilitiesHeaders,\n    },\n    201: {\n      bodyMapper: Mappers.PurchasedPhoneNumber,\n      headersMapper: Mappers.PhoneNumbersUpdateCapabilitiesHeaders,\n    },\n    202: {\n      bodyMapper: Mappers.PurchasedPhoneNumber,\n      headersMapper: Mappers.PhoneNumbersUpdateCapabilitiesHeaders,\n    },\n    204: {\n      bodyMapper: Mappers.PurchasedPhoneNumber,\n      headersMapper: Mappers.PhoneNumbersUpdateCapabilitiesHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  requestBody: {\n    parameterPath: { calling: [\"options\", \"calling\"], sms: [\"options\", \"sms\"] },\n    mapper: Mappers.PhoneNumberCapabilitiesRequest,\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.phoneNumber],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer,\n};\nconst getByNumberOperationSpec: coreClient.OperationSpec = {\n  path: \"/phoneNumbers/{phoneNumber}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PurchasedPhoneNumber,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.phoneNumber],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst releasePhoneNumberOperationSpec: coreClient.OperationSpec = {\n  path: \"/phoneNumbers/{phoneNumber}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PhoneNumbersReleasePhoneNumberHeaders,\n    },\n    201: {\n      headersMapper: Mappers.PhoneNumbersReleasePhoneNumberHeaders,\n    },\n    202: {\n      headersMapper: Mappers.PhoneNumbersReleasePhoneNumberHeaders,\n    },\n    204: {\n      headersMapper: Mappers.PhoneNumbersReleasePhoneNumberHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.phoneNumber],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listPhoneNumbersOperationSpec: coreClient.OperationSpec = {\n  path: \"/phoneNumbers\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PurchasedPhoneNumbers,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  queryParameters: [Parameters.skip, Parameters.apiVersion, Parameters.top],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst operatorInformationSearchOperationSpec: coreClient.OperationSpec = {\n  path: \"/operatorInformation/:search\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OperatorInformationResult,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  requestBody: {\n    parameterPath: {\n      phoneNumbers: [\"phoneNumbers\"],\n      options: [\"options\", \"options\"],\n    },\n    mapper: { ...Mappers.OperatorInformationRequest, required: true },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst listAreaCodesNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PhoneNumberAreaCodes,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.countryCode,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept, Parameters.acceptLanguage],\n  serializer,\n};\nconst listAvailableCountriesNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PhoneNumberCountries,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept, Parameters.acceptLanguage],\n  serializer,\n};\nconst listAvailableLocalitiesNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PhoneNumberLocalities,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.countryCode,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept, Parameters.acceptLanguage],\n  serializer,\n};\nconst listOfferingsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OfferingsResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.countryCode,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept, Parameters.acceptLanguage],\n  serializer,\n};\nconst listPhoneNumbersNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PurchasedPhoneNumbers,\n    },\n    default: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n    },\n  },\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}