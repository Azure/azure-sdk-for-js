/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing.js";
import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { PhoneNumbers } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { PhoneNumbersClient } from "../phoneNumbersClient.js";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  PhoneNumberAreaCode,
  PhoneNumbersListAreaCodesNextOptionalParams,
  PhoneNumberType,
  PhoneNumbersListAreaCodesOptionalParams,
  PhoneNumbersListAreaCodesResponse,
  PhoneNumberCountry,
  PhoneNumbersListAvailableCountriesNextOptionalParams,
  PhoneNumbersListAvailableCountriesOptionalParams,
  PhoneNumbersListAvailableCountriesResponse,
  PhoneNumberLocality,
  PhoneNumbersListAvailableLocalitiesNextOptionalParams,
  PhoneNumbersListAvailableLocalitiesOptionalParams,
  PhoneNumbersListAvailableLocalitiesResponse,
  PhoneNumberOffering,
  PhoneNumbersListOfferingsNextOptionalParams,
  PhoneNumbersListOfferingsOptionalParams,
  PhoneNumbersListOfferingsResponse,
  PhoneNumbersReservation,
  PhoneNumbersListReservationsNextOptionalParams,
  PhoneNumbersListReservationsOptionalParams,
  PhoneNumbersListReservationsResponse,
  PurchasedPhoneNumber,
  PhoneNumbersListPhoneNumbersNextOptionalParams,
  PhoneNumbersListPhoneNumbersOptionalParams,
  PhoneNumbersListPhoneNumbersResponse,
  PhoneNumbersBrowseAvailableNumbersOptionalParams,
  PhoneNumbersBrowseAvailableNumbersResponse,
  PhoneNumbersCreateOrUpdateReservationOptionalParams,
  PhoneNumbersCreateOrUpdateReservationResponse,
  PhoneNumbersGetReservationOptionalParams,
  PhoneNumbersGetReservationResponse,
  PhoneNumbersDeleteReservationOptionalParams,
  PhoneNumbersPurchaseReservationOptionalParams,
  PhoneNumbersPurchaseReservationResponse,
  PhoneNumberAssignmentType,
  PhoneNumberCapabilities,
  PhoneNumbersSearchAvailablePhoneNumbersOptionalParams,
  PhoneNumbersSearchAvailablePhoneNumbersResponse,
  PhoneNumbersGetSearchResultOptionalParams,
  PhoneNumbersGetSearchResultResponse,
  PhoneNumbersPurchasePhoneNumbersOptionalParams,
  PhoneNumbersPurchasePhoneNumbersResponse,
  PhoneNumbersGetOperationOptionalParams,
  PhoneNumbersGetOperationResponse,
  PhoneNumbersCancelOperationOptionalParams,
  PhoneNumbersUpdateCapabilitiesOptionalParams,
  PhoneNumbersUpdateCapabilitiesResponse,
  PhoneNumbersGetByNumberOptionalParams,
  PhoneNumbersGetByNumberResponse,
  PhoneNumbersReleasePhoneNumberOptionalParams,
  PhoneNumbersReleasePhoneNumberResponse,
  PhoneNumbersOperatorInformationSearchOptionalParams,
  PhoneNumbersOperatorInformationSearchResponse,
  PhoneNumbersListAreaCodesNextResponse,
  PhoneNumbersListAvailableCountriesNextResponse,
  PhoneNumbersListAvailableLocalitiesNextResponse,
  PhoneNumbersListOfferingsNextResponse,
  PhoneNumbersListReservationsNextResponse,
  PhoneNumbersListPhoneNumbersNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing PhoneNumbers operations. */
export class PhoneNumbersImpl implements PhoneNumbers {
  private readonly client: PhoneNumbersClient;

  /**
   * Initialize a new instance of the class PhoneNumbers class.
   * @param client Reference to the service client
   */
  constructor(client: PhoneNumbersClient) {
    this.client = client;
  }

  /**
   * Gets the list of available area codes.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param phoneNumberType Filter by numberType, e.g. Geographic, TollFree, Mobile.
   * @param options The options parameters.
   */
  public listAreaCodes(
    countryCode: string,
    phoneNumberType: PhoneNumberType,
    options?: PhoneNumbersListAreaCodesOptionalParams,
  ): PagedAsyncIterableIterator<PhoneNumberAreaCode> {
    const iter = this.listAreaCodesPagingAll(
      countryCode,
      phoneNumberType,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAreaCodesPagingPage(
          countryCode,
          phoneNumberType,
          options,
          settings,
        );
      },
    };
  }

  private async *listAreaCodesPagingPage(
    countryCode: string,
    phoneNumberType: PhoneNumberType,
    options?: PhoneNumbersListAreaCodesOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PhoneNumberAreaCode[]> {
    let result: PhoneNumbersListAreaCodesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAreaCodes(countryCode, phoneNumberType, options);
      let page = result.areaCodes || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAreaCodesNext(
        countryCode,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.areaCodes || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAreaCodesPagingAll(
    countryCode: string,
    phoneNumberType: PhoneNumberType,
    options?: PhoneNumbersListAreaCodesOptionalParams,
  ): AsyncIterableIterator<PhoneNumberAreaCode> {
    for await (const page of this.listAreaCodesPagingPage(
      countryCode,
      phoneNumberType,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the list of supported countries.
   * @param options The options parameters.
   */
  public listAvailableCountries(
    options?: PhoneNumbersListAvailableCountriesOptionalParams,
  ): PagedAsyncIterableIterator<PhoneNumberCountry> {
    const iter = this.listAvailableCountriesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAvailableCountriesPagingPage(options, settings);
      },
    };
  }

  private async *listAvailableCountriesPagingPage(
    options?: PhoneNumbersListAvailableCountriesOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PhoneNumberCountry[]> {
    let result: PhoneNumbersListAvailableCountriesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAvailableCountries(options);
      let page = result.countries || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAvailableCountriesNext(
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.countries || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAvailableCountriesPagingAll(
    options?: PhoneNumbersListAvailableCountriesOptionalParams,
  ): AsyncIterableIterator<PhoneNumberCountry> {
    for await (const page of this.listAvailableCountriesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets the list of cities or towns with available phone numbers.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param options The options parameters.
   */
  public listAvailableLocalities(
    countryCode: string,
    options?: PhoneNumbersListAvailableLocalitiesOptionalParams,
  ): PagedAsyncIterableIterator<PhoneNumberLocality> {
    const iter = this.listAvailableLocalitiesPagingAll(countryCode, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAvailableLocalitiesPagingPage(
          countryCode,
          options,
          settings,
        );
      },
    };
  }

  private async *listAvailableLocalitiesPagingPage(
    countryCode: string,
    options?: PhoneNumbersListAvailableLocalitiesOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PhoneNumberLocality[]> {
    let result: PhoneNumbersListAvailableLocalitiesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAvailableLocalities(countryCode, options);
      let page = result.phoneNumberLocalities || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAvailableLocalitiesNext(
        countryCode,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.phoneNumberLocalities || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAvailableLocalitiesPagingAll(
    countryCode: string,
    options?: PhoneNumbersListAvailableLocalitiesOptionalParams,
  ): AsyncIterableIterator<PhoneNumberLocality> {
    for await (const page of this.listAvailableLocalitiesPagingPage(
      countryCode,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List available offerings of capabilities with rates for the given country.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param options The options parameters.
   */
  public listOfferings(
    countryCode: string,
    options?: PhoneNumbersListOfferingsOptionalParams,
  ): PagedAsyncIterableIterator<PhoneNumberOffering> {
    const iter = this.listOfferingsPagingAll(countryCode, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listOfferingsPagingPage(countryCode, options, settings);
      },
    };
  }

  private async *listOfferingsPagingPage(
    countryCode: string,
    options?: PhoneNumbersListOfferingsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PhoneNumberOffering[]> {
    let result: PhoneNumbersListOfferingsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listOfferings(countryCode, options);
      let page = result.phoneNumberOfferings || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listOfferingsNext(
        countryCode,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.phoneNumberOfferings || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listOfferingsPagingAll(
    countryCode: string,
    options?: PhoneNumbersListOfferingsOptionalParams,
  ): AsyncIterableIterator<PhoneNumberOffering> {
    for await (const page of this.listOfferingsPagingPage(
      countryCode,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Retrieves a paginated list of all phone number reservations. Note that the reservations will not be
   * populated with the phone numbers associated with them.
   * @param options The options parameters.
   */
  public listReservations(
    options?: PhoneNumbersListReservationsOptionalParams,
  ): PagedAsyncIterableIterator<PhoneNumbersReservation> {
    const iter = this.listReservationsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listReservationsPagingPage(options, settings);
      },
    };
  }

  private async *listReservationsPagingPage(
    options?: PhoneNumbersListReservationsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PhoneNumbersReservation[]> {
    let result: PhoneNumbersListReservationsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listReservations(options);
      let page = result.reservations || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listReservationsNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.reservations || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listReservationsPagingAll(
    options?: PhoneNumbersListReservationsOptionalParams,
  ): AsyncIterableIterator<PhoneNumbersReservation> {
    for await (const page of this.listReservationsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets the list of all purchased phone numbers.
   * @param options The options parameters.
   */
  public listPhoneNumbers(
    options?: PhoneNumbersListPhoneNumbersOptionalParams,
  ): PagedAsyncIterableIterator<PurchasedPhoneNumber> {
    const iter = this.listPhoneNumbersPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPhoneNumbersPagingPage(options, settings);
      },
    };
  }

  private async *listPhoneNumbersPagingPage(
    options?: PhoneNumbersListPhoneNumbersOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PurchasedPhoneNumber[]> {
    let result: PhoneNumbersListPhoneNumbersResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listPhoneNumbers(options);
      let page = result.phoneNumbers || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listPhoneNumbersNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.phoneNumbers || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPhoneNumbersPagingAll(
    options?: PhoneNumbersListPhoneNumbersOptionalParams,
  ): AsyncIterableIterator<PurchasedPhoneNumber> {
    for await (const page of this.listPhoneNumbersPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets the list of available area codes.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param phoneNumberType Filter by numberType, e.g. Geographic, TollFree, Mobile.
   * @param options The options parameters.
   */
  private async _listAreaCodes(
    countryCode: string,
    phoneNumberType: PhoneNumberType,
    options?: PhoneNumbersListAreaCodesOptionalParams,
  ): Promise<PhoneNumbersListAreaCodesResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient._listAreaCodes",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { countryCode, phoneNumberType, options },
          listAreaCodesOperationSpec,
        ) as Promise<PhoneNumbersListAreaCodesResponse>;
      },
    );
  }

  /**
   * Gets the list of supported countries.
   * @param options The options parameters.
   */
  private async _listAvailableCountries(
    options?: PhoneNumbersListAvailableCountriesOptionalParams,
  ): Promise<PhoneNumbersListAvailableCountriesResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient._listAvailableCountries",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          listAvailableCountriesOperationSpec,
        ) as Promise<PhoneNumbersListAvailableCountriesResponse>;
      },
    );
  }

  /**
   * Browses for available phone numbers to purchase. The response will be a randomized list of phone
   * numbers available to purchase matching the browsing criteria. This operation is not paginated. Since
   * the results are randomized, repeating the same request will not guarantee the same results.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param phoneNumberType Represents the number type of the offering.
   * @param options The options parameters.
   */
  async browseAvailableNumbers(
    countryCode: string,
    phoneNumberType: PhoneNumberType,
    options?: PhoneNumbersBrowseAvailableNumbersOptionalParams,
  ): Promise<PhoneNumbersBrowseAvailableNumbersResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient.browseAvailableNumbers",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { countryCode, phoneNumberType, options },
          browseAvailableNumbersOperationSpec,
        ) as Promise<PhoneNumbersBrowseAvailableNumbersResponse>;
      },
    );
  }

  /**
   * Gets the list of cities or towns with available phone numbers.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param options The options parameters.
   */
  private async _listAvailableLocalities(
    countryCode: string,
    options?: PhoneNumbersListAvailableLocalitiesOptionalParams,
  ): Promise<PhoneNumbersListAvailableLocalitiesResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient._listAvailableLocalities",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { countryCode, options },
          listAvailableLocalitiesOperationSpec,
        ) as Promise<PhoneNumbersListAvailableLocalitiesResponse>;
      },
    );
  }

  /**
   * List available offerings of capabilities with rates for the given country.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param options The options parameters.
   */
  private async _listOfferings(
    countryCode: string,
    options?: PhoneNumbersListOfferingsOptionalParams,
  ): Promise<PhoneNumbersListOfferingsResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient._listOfferings",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { countryCode, options },
          listOfferingsOperationSpec,
        ) as Promise<PhoneNumbersListOfferingsResponse>;
      },
    );
  }

  /**
   * Retrieves a paginated list of all phone number reservations. Note that the reservations will not be
   * populated with the phone numbers associated with them.
   * @param options The options parameters.
   */
  private async _listReservations(
    options?: PhoneNumbersListReservationsOptionalParams,
  ): Promise<PhoneNumbersListReservationsResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient._listReservations",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          listReservationsOperationSpec,
        ) as Promise<PhoneNumbersListReservationsResponse>;
      },
    );
  }

  /**
   * Adds and removes phone numbers from the reservation with the given ID. The response will be the
   * updated state of the reservation. Phone numbers can be reserved by including them in the payload. If
   * a number is already in the reservation, it will be ignored. To remove a phone number, set it
   * explicitly to null in the request payload. This operation is idempotent. If a reservation with the
   * same ID already exists, it will be updated, otherwise a new one is created. Only reservations with
   * 'active' status can be updated. Updating a reservation will extend the expiration time of the
   * reservation to 15 minutes after the last change, up to a maximum of 2 hours from creation time.
   * Partial success is possible, in which case the response will have a 207 status code.
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  async createOrUpdateReservation(
    reservationId: string,
    options?: PhoneNumbersCreateOrUpdateReservationOptionalParams,
  ): Promise<PhoneNumbersCreateOrUpdateReservationResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient.createOrUpdateReservation",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { reservationId, options },
          createOrUpdateReservationOperationSpec,
        ) as Promise<PhoneNumbersCreateOrUpdateReservationResponse>;
      },
    );
  }

  /**
   * Retrieves the reservation with the given ID, including all of the phone numbers associated with it.
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  async getReservation(
    reservationId: string,
    options?: PhoneNumbersGetReservationOptionalParams,
  ): Promise<PhoneNumbersGetReservationResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient.getReservation",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { reservationId, options },
          getReservationOperationSpec,
        ) as Promise<PhoneNumbersGetReservationResponse>;
      },
    );
  }

  /**
   * Deletes the reservation with the given ID. Any phone number in the reservation will be released and
   * made available for others to purchase. Only reservations with 'active' status can be deleted.
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  async deleteReservation(
    reservationId: string,
    options?: PhoneNumbersDeleteReservationOptionalParams,
  ): Promise<void> {
    return tracingClient.withSpan(
      "PhoneNumbersClient.deleteReservation",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { reservationId, options },
          deleteReservationOperationSpec,
        ) as Promise<void>;
      },
    );
  }

  /**
   * Starts a long running operation to purchase all of the phone numbers in the reservation. Purchase
   * can only be started for active reservations that at least one phone number. If any of the phone
   * numbers in the reservation is from a country where reselling is not permitted, do not resell
   * agreement is required. The response will include an 'Operation-Location' header that can be used to
   * query the status of the operation.
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  async beginPurchaseReservation(
    reservationId: string,
    options?: PhoneNumbersPurchaseReservationOptionalParams,
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersPurchaseReservationResponse>,
      PhoneNumbersPurchaseReservationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PhoneNumbersPurchaseReservationResponse> => {
      return tracingClient.withSpan(
        "PhoneNumbersClient.beginPurchaseReservation",
        options ?? {},
        async () => {
          return this.client.sendOperationRequest(
            args,
            spec,
          ) as Promise<PhoneNumbersPurchaseReservationResponse>;
        },
      );
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { reservationId, options },
      spec: purchaseReservationOperationSpec,
    });
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Starts a long running operation to purchase all of the phone numbers in the reservation. Purchase
   * can only be started for active reservations that at least one phone number. If any of the phone
   * numbers in the reservation is from a country where reselling is not permitted, do not resell
   * agreement is required. The response will include an 'Operation-Location' header that can be used to
   * query the status of the operation.
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  async beginPurchaseReservationAndWait(
    reservationId: string,
    options?: PhoneNumbersPurchaseReservationOptionalParams,
  ): Promise<PhoneNumbersPurchaseReservationResponse> {
    const poller = await this.beginPurchaseReservation(reservationId, options);
    return poller.pollUntilDone();
  }

  /**
   * Search for available phone numbers to purchase.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param phoneNumberType The type of phone numbers to search for, e.g. geographic, tollFree, mobile.
   * @param assignmentType The assignment type of the phone numbers to search for. A phone number can be
   *                       assigned to a person, or to an application.
   * @param capabilities Capabilities of a phone number.
   * @param options The options parameters.
   */
  async beginSearchAvailablePhoneNumbers(
    countryCode: string,
    phoneNumberType: PhoneNumberType,
    assignmentType: PhoneNumberAssignmentType,
    capabilities: PhoneNumberCapabilities,
    options?: PhoneNumbersSearchAvailablePhoneNumbersOptionalParams,
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersSearchAvailablePhoneNumbersResponse>,
      PhoneNumbersSearchAvailablePhoneNumbersResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PhoneNumbersSearchAvailablePhoneNumbersResponse> => {
      return tracingClient.withSpan(
        "PhoneNumbersClient.beginSearchAvailablePhoneNumbers",
        options ?? {},
        async () => {
          return this.client.sendOperationRequest(
            args,
            spec,
          ) as Promise<PhoneNumbersSearchAvailablePhoneNumbersResponse>;
        },
      );
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        countryCode,
        phoneNumberType,
        assignmentType,
        capabilities,
        options,
      },
      spec: searchAvailablePhoneNumbersOperationSpec,
    });
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Search for available phone numbers to purchase.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param phoneNumberType The type of phone numbers to search for, e.g. geographic, tollFree, mobile.
   * @param assignmentType The assignment type of the phone numbers to search for. A phone number can be
   *                       assigned to a person, or to an application.
   * @param capabilities Capabilities of a phone number.
   * @param options The options parameters.
   */
  async beginSearchAvailablePhoneNumbersAndWait(
    countryCode: string,
    phoneNumberType: PhoneNumberType,
    assignmentType: PhoneNumberAssignmentType,
    capabilities: PhoneNumberCapabilities,
    options?: PhoneNumbersSearchAvailablePhoneNumbersOptionalParams,
  ): Promise<PhoneNumbersSearchAvailablePhoneNumbersResponse> {
    const poller = await this.beginSearchAvailablePhoneNumbers(
      countryCode,
      phoneNumberType,
      assignmentType,
      capabilities,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a phone number search result by search id.
   * @param searchId The search Id.
   * @param options The options parameters.
   */
  async getSearchResult(
    searchId: string,
    options?: PhoneNumbersGetSearchResultOptionalParams,
  ): Promise<PhoneNumbersGetSearchResultResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient.getSearchResult",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { searchId, options },
          getSearchResultOperationSpec,
        ) as Promise<PhoneNumbersGetSearchResultResponse>;
      },
    );
  }

  /**
   * Purchases phone numbers.
   * @param options The options parameters.
   */
  async beginPurchasePhoneNumbers(
    options?: PhoneNumbersPurchasePhoneNumbersOptionalParams,
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersPurchasePhoneNumbersResponse>,
      PhoneNumbersPurchasePhoneNumbersResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PhoneNumbersPurchasePhoneNumbersResponse> => {
      return tracingClient.withSpan(
        "PhoneNumbersClient.beginPurchasePhoneNumbers",
        options ?? {},
        async () => {
          return this.client.sendOperationRequest(
            args,
            spec,
          ) as Promise<PhoneNumbersPurchasePhoneNumbersResponse>;
        },
      );
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { options },
      spec: purchasePhoneNumbersOperationSpec,
    });
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Purchases phone numbers.
   * @param options The options parameters.
   */
  async beginPurchasePhoneNumbersAndWait(
    options?: PhoneNumbersPurchasePhoneNumbersOptionalParams,
  ): Promise<PhoneNumbersPurchasePhoneNumbersResponse> {
    const poller = await this.beginPurchasePhoneNumbers(options);
    return poller.pollUntilDone();
  }

  /**
   * Gets an operation by its id.
   * @param operationId The id of the operation
   * @param options The options parameters.
   */
  async getOperation(
    operationId: string,
    options?: PhoneNumbersGetOperationOptionalParams,
  ): Promise<PhoneNumbersGetOperationResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient.getOperation",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { operationId, options },
          getOperationOperationSpec,
        ) as Promise<PhoneNumbersGetOperationResponse>;
      },
    );
  }

  /**
   * Cancels an operation by its id.
   * @param operationId The id of the operation
   * @param options The options parameters.
   */
  async cancelOperation(
    operationId: string,
    options?: PhoneNumbersCancelOperationOptionalParams,
  ): Promise<void> {
    return tracingClient.withSpan(
      "PhoneNumbersClient.cancelOperation",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { operationId, options },
          cancelOperationOperationSpec,
        ) as Promise<void>;
      },
    );
  }

  /**
   * Updates the capabilities of a phone number.
   * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded
   *                    as %2B, e.g. +11234567890.
   * @param options The options parameters.
   */
  async beginUpdateCapabilities(
    phoneNumber: string,
    options?: PhoneNumbersUpdateCapabilitiesOptionalParams,
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersUpdateCapabilitiesResponse>,
      PhoneNumbersUpdateCapabilitiesResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PhoneNumbersUpdateCapabilitiesResponse> => {
      return tracingClient.withSpan(
        "PhoneNumbersClient.beginUpdateCapabilities",
        options ?? {},
        async () => {
          return this.client.sendOperationRequest(
            args,
            spec,
          ) as Promise<PhoneNumbersUpdateCapabilitiesResponse>;
        },
      );
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { phoneNumber, options },
      spec: updateCapabilitiesOperationSpec,
    });
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the capabilities of a phone number.
   * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded
   *                    as %2B, e.g. +11234567890.
   * @param options The options parameters.
   */
  async beginUpdateCapabilitiesAndWait(
    phoneNumber: string,
    options?: PhoneNumbersUpdateCapabilitiesOptionalParams,
  ): Promise<PhoneNumbersUpdateCapabilitiesResponse> {
    const poller = await this.beginUpdateCapabilities(phoneNumber, options);
    return poller.pollUntilDone();
  }

  /**
   * Gets the details of the given purchased phone number.
   * @param phoneNumber The purchased phone number whose details are to be fetched in E.164 format, e.g.
   *                    +11234567890.
   * @param options The options parameters.
   */
  async getByNumber(
    phoneNumber: string,
    options?: PhoneNumbersGetByNumberOptionalParams,
  ): Promise<PhoneNumbersGetByNumberResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient.getByNumber",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { phoneNumber, options },
          getByNumberOperationSpec,
        ) as Promise<PhoneNumbersGetByNumberResponse>;
      },
    );
  }

  /**
   * Releases a purchased phone number.
   * @param phoneNumber Phone number to be released, e.g. +11234567890.
   * @param options The options parameters.
   */
  async beginReleasePhoneNumber(
    phoneNumber: string,
    options?: PhoneNumbersReleasePhoneNumberOptionalParams,
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersReleasePhoneNumberResponse>,
      PhoneNumbersReleasePhoneNumberResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<PhoneNumbersReleasePhoneNumberResponse> => {
      return tracingClient.withSpan(
        "PhoneNumbersClient.beginReleasePhoneNumber",
        options ?? {},
        async () => {
          return this.client.sendOperationRequest(
            args,
            spec,
          ) as Promise<PhoneNumbersReleasePhoneNumberResponse>;
        },
      );
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { phoneNumber, options },
      spec: releasePhoneNumberOperationSpec,
    });
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Releases a purchased phone number.
   * @param phoneNumber Phone number to be released, e.g. +11234567890.
   * @param options The options parameters.
   */
  async beginReleasePhoneNumberAndWait(
    phoneNumber: string,
    options?: PhoneNumbersReleasePhoneNumberOptionalParams,
  ): Promise<PhoneNumbersReleasePhoneNumberResponse> {
    const poller = await this.beginReleasePhoneNumber(phoneNumber, options);
    return poller.pollUntilDone();
  }

  /**
   * Gets the list of all purchased phone numbers.
   * @param options The options parameters.
   */
  private async _listPhoneNumbers(
    options?: PhoneNumbersListPhoneNumbersOptionalParams,
  ): Promise<PhoneNumbersListPhoneNumbersResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient._listPhoneNumbers",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          listPhoneNumbersOperationSpec,
        ) as Promise<PhoneNumbersListPhoneNumbersResponse>;
      },
    );
  }

  /**
   * Searches for number format and operator information for a given list of phone numbers.
   * @param phoneNumbers Phone number(s) whose operator information is being requested
   * @param options The options parameters.
   */
  async operatorInformationSearch(
    phoneNumbers: string[],
    options?: PhoneNumbersOperatorInformationSearchOptionalParams,
  ): Promise<PhoneNumbersOperatorInformationSearchResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient.operatorInformationSearch",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { phoneNumbers, options },
          operatorInformationSearchOperationSpec,
        ) as Promise<PhoneNumbersOperatorInformationSearchResponse>;
      },
    );
  }

  /**
   * ListAreaCodesNext
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param nextLink The nextLink from the previous successful call to the ListAreaCodes method.
   * @param options The options parameters.
   */
  private async _listAreaCodesNext(
    countryCode: string,
    nextLink: string,
    options?: PhoneNumbersListAreaCodesNextOptionalParams,
  ): Promise<PhoneNumbersListAreaCodesNextResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient._listAreaCodesNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { countryCode, nextLink, options },
          listAreaCodesNextOperationSpec,
        ) as Promise<PhoneNumbersListAreaCodesNextResponse>;
      },
    );
  }

  /**
   * ListAvailableCountriesNext
   * @param nextLink The nextLink from the previous successful call to the ListAvailableCountries method.
   * @param options The options parameters.
   */
  private async _listAvailableCountriesNext(
    nextLink: string,
    options?: PhoneNumbersListAvailableCountriesNextOptionalParams,
  ): Promise<PhoneNumbersListAvailableCountriesNextResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient._listAvailableCountriesNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          listAvailableCountriesNextOperationSpec,
        ) as Promise<PhoneNumbersListAvailableCountriesNextResponse>;
      },
    );
  }

  /**
   * ListAvailableLocalitiesNext
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param nextLink The nextLink from the previous successful call to the ListAvailableLocalities
   *                 method.
   * @param options The options parameters.
   */
  private async _listAvailableLocalitiesNext(
    countryCode: string,
    nextLink: string,
    options?: PhoneNumbersListAvailableLocalitiesNextOptionalParams,
  ): Promise<PhoneNumbersListAvailableLocalitiesNextResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient._listAvailableLocalitiesNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { countryCode, nextLink, options },
          listAvailableLocalitiesNextOperationSpec,
        ) as Promise<PhoneNumbersListAvailableLocalitiesNextResponse>;
      },
    );
  }

  /**
   * ListOfferingsNext
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param nextLink The nextLink from the previous successful call to the ListOfferings method.
   * @param options The options parameters.
   */
  private async _listOfferingsNext(
    countryCode: string,
    nextLink: string,
    options?: PhoneNumbersListOfferingsNextOptionalParams,
  ): Promise<PhoneNumbersListOfferingsNextResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient._listOfferingsNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { countryCode, nextLink, options },
          listOfferingsNextOperationSpec,
        ) as Promise<PhoneNumbersListOfferingsNextResponse>;
      },
    );
  }

  /**
   * ListReservationsNext
   * @param nextLink The nextLink from the previous successful call to the ListReservations method.
   * @param options The options parameters.
   */
  private async _listReservationsNext(
    nextLink: string,
    options?: PhoneNumbersListReservationsNextOptionalParams,
  ): Promise<PhoneNumbersListReservationsNextResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient._listReservationsNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          listReservationsNextOperationSpec,
        ) as Promise<PhoneNumbersListReservationsNextResponse>;
      },
    );
  }

  /**
   * ListPhoneNumbersNext
   * @param nextLink The nextLink from the previous successful call to the ListPhoneNumbers method.
   * @param options The options parameters.
   */
  private async _listPhoneNumbersNext(
    nextLink: string,
    options?: PhoneNumbersListPhoneNumbersNextOptionalParams,
  ): Promise<PhoneNumbersListPhoneNumbersNextResponse> {
    return tracingClient.withSpan(
      "PhoneNumbersClient._listPhoneNumbersNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          listPhoneNumbersNextOperationSpec,
        ) as Promise<PhoneNumbersListPhoneNumbersNextResponse>;
      },
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listAreaCodesOperationSpec: coreClient.OperationSpec = {
  path: "/availablePhoneNumbers/countries/{countryCode}/areaCodes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumberAreaCodes,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [
    Parameters.phoneNumberType,
    Parameters.skip,
    Parameters.maxPageSize,
    Parameters.assignmentType,
    Parameters.locality,
    Parameters.administrativeDivision,
    Parameters.apiVersion,
  ],
  urlParameters: [Parameters.endpoint, Parameters.countryCode],
  headerParameters: [Parameters.accept, Parameters.acceptLanguage],
  serializer,
};
const listAvailableCountriesOperationSpec: coreClient.OperationSpec = {
  path: "/availablePhoneNumbers/countries",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumberCountries,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [
    Parameters.skip,
    Parameters.maxPageSize,
    Parameters.apiVersion,
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.acceptLanguage],
  serializer,
};
const browseAvailableNumbersOperationSpec: coreClient.OperationSpec = {
  path: "/availablePhoneNumbers/countries/{countryCode}/:browse",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumbersBrowseResult,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  requestBody: {
    parameterPath: {
      phoneNumberType: ["phoneNumberType"],
      capabilities: ["options", "capabilities"],
      assignmentType: ["options", "assignmentType"],
      phoneNumberPrefixes: ["options", "phoneNumberPrefixes"],
    },
    mapper: { ...Mappers.PhoneNumbersBrowseRequest, required: true },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.countryCode],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listAvailableLocalitiesOperationSpec: coreClient.OperationSpec = {
  path: "/availablePhoneNumbers/countries/{countryCode}/localities",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumberLocalities,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [
    Parameters.skip,
    Parameters.maxPageSize,
    Parameters.administrativeDivision,
    Parameters.apiVersion,
    Parameters.phoneNumberType2,
  ],
  urlParameters: [Parameters.endpoint, Parameters.countryCode],
  headerParameters: [Parameters.accept, Parameters.acceptLanguage],
  serializer,
};
const listOfferingsOperationSpec: coreClient.OperationSpec = {
  path: "/availablePhoneNumbers/countries/{countryCode}/offerings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OfferingsResponse,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [
    Parameters.skip,
    Parameters.maxPageSize,
    Parameters.assignmentType,
    Parameters.apiVersion,
    Parameters.phoneNumberType2,
  ],
  urlParameters: [Parameters.endpoint, Parameters.countryCode],
  headerParameters: [Parameters.accept, Parameters.acceptLanguage],
  serializer,
};
const listReservationsOperationSpec: coreClient.OperationSpec = {
  path: "/availablePhoneNumbers/reservations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumbersReservations,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [Parameters.maxPageSize, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateReservationOperationSpec: coreClient.OperationSpec = {
  path: "/availablePhoneNumbers/reservations/{reservationId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumbersReservation,
    },
    201: {
      bodyMapper: Mappers.PhoneNumbersReservation,
    },
    207: {
      bodyMapper: Mappers.PhoneNumbersReservation,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  requestBody: {
    parameterPath: {
      id: ["options", "id"],
      expiresAt: ["options", "expiresAt"],
      phoneNumbers: ["options", "phoneNumbers"],
      status: ["options", "status"],
    },
    mapper: { ...Mappers.PhoneNumbersReservation, required: true },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.reservationId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer,
};
const getReservationOperationSpec: coreClient.OperationSpec = {
  path: "/availablePhoneNumbers/reservations/{reservationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumbersReservation,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.reservationId],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteReservationOperationSpec: coreClient.OperationSpec = {
  path: "/availablePhoneNumbers/reservations/{reservationId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.reservationId],
  headerParameters: [Parameters.accept],
  serializer,
};
const purchaseReservationOperationSpec: coreClient.OperationSpec = {
  path: "/availablePhoneNumbers/reservations/{reservationId}/:purchase",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.PhoneNumbersPurchaseReservationHeaders,
    },
    201: {
      headersMapper: Mappers.PhoneNumbersPurchaseReservationHeaders,
    },
    202: {
      headersMapper: Mappers.PhoneNumbersPurchaseReservationHeaders,
    },
    204: {
      headersMapper: Mappers.PhoneNumbersPurchaseReservationHeaders,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  requestBody: {
    parameterPath: { agreeToNotResell: ["options", "agreeToNotResell"] },
    mapper: Mappers.PhoneNumbersReservationPurchaseRequest,
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.reservationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const searchAvailablePhoneNumbersOperationSpec: coreClient.OperationSpec = {
  path: "/availablePhoneNumbers/countries/{countryCode}/:search",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumberSearchResult,
      headersMapper: Mappers.PhoneNumbersSearchAvailablePhoneNumbersHeaders,
    },
    201: {
      bodyMapper: Mappers.PhoneNumberSearchResult,
      headersMapper: Mappers.PhoneNumbersSearchAvailablePhoneNumbersHeaders,
    },
    202: {
      bodyMapper: Mappers.PhoneNumberSearchResult,
      headersMapper: Mappers.PhoneNumbersSearchAvailablePhoneNumbersHeaders,
    },
    204: {
      bodyMapper: Mappers.PhoneNumberSearchResult,
      headersMapper: Mappers.PhoneNumbersSearchAvailablePhoneNumbersHeaders,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  requestBody: {
    parameterPath: {
      phoneNumberType: ["phoneNumberType"],
      assignmentType: ["assignmentType"],
      capabilities: ["capabilities"],
      areaCode: ["options", "areaCode"],
      quantity: ["options", "quantity"],
    },
    mapper: { ...Mappers.PhoneNumberSearchRequest, required: true },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.countryCode],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getSearchResultOperationSpec: coreClient.OperationSpec = {
  path: "/availablePhoneNumbers/searchResults/{searchId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumberSearchResult,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.searchId],
  headerParameters: [Parameters.accept],
  serializer,
};
const purchasePhoneNumbersOperationSpec: coreClient.OperationSpec = {
  path: "/availablePhoneNumbers/:purchase",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.PhoneNumbersPurchasePhoneNumbersHeaders,
    },
    201: {
      headersMapper: Mappers.PhoneNumbersPurchasePhoneNumbersHeaders,
    },
    202: {
      headersMapper: Mappers.PhoneNumbersPurchasePhoneNumbersHeaders,
    },
    204: {
      headersMapper: Mappers.PhoneNumbersPurchasePhoneNumbersHeaders,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  requestBody: {
    parameterPath: {
      searchId: ["options", "searchId"],
      agreeToNotResell: ["options", "agreeToNotResell"],
    },
    mapper: { ...Mappers.PhoneNumberPurchaseRequest, required: true },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getOperationOperationSpec: coreClient.OperationSpec = {
  path: "/phoneNumbers/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumberOperation,
      headersMapper: Mappers.PhoneNumbersGetOperationHeaders,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.operationId],
  headerParameters: [Parameters.accept],
  serializer,
};
const cancelOperationOperationSpec: coreClient.OperationSpec = {
  path: "/phoneNumbers/operations/{operationId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.operationId],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateCapabilitiesOperationSpec: coreClient.OperationSpec = {
  path: "/phoneNumbers/{phoneNumber}/capabilities",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.PurchasedPhoneNumber,
      headersMapper: Mappers.PhoneNumbersUpdateCapabilitiesHeaders,
    },
    201: {
      bodyMapper: Mappers.PurchasedPhoneNumber,
      headersMapper: Mappers.PhoneNumbersUpdateCapabilitiesHeaders,
    },
    202: {
      bodyMapper: Mappers.PurchasedPhoneNumber,
      headersMapper: Mappers.PhoneNumbersUpdateCapabilitiesHeaders,
    },
    204: {
      bodyMapper: Mappers.PurchasedPhoneNumber,
      headersMapper: Mappers.PhoneNumbersUpdateCapabilitiesHeaders,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  requestBody: {
    parameterPath: { calling: ["options", "calling"], sms: ["options", "sms"] },
    mapper: Mappers.PhoneNumberCapabilitiesRequest,
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.phoneNumber],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer,
};
const getByNumberOperationSpec: coreClient.OperationSpec = {
  path: "/phoneNumbers/{phoneNumber}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PurchasedPhoneNumber,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.phoneNumber],
  headerParameters: [Parameters.accept],
  serializer,
};
const releasePhoneNumberOperationSpec: coreClient.OperationSpec = {
  path: "/phoneNumbers/{phoneNumber}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.PhoneNumbersReleasePhoneNumberHeaders,
    },
    201: {
      headersMapper: Mappers.PhoneNumbersReleasePhoneNumberHeaders,
    },
    202: {
      headersMapper: Mappers.PhoneNumbersReleasePhoneNumberHeaders,
    },
    204: {
      headersMapper: Mappers.PhoneNumbersReleasePhoneNumberHeaders,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.phoneNumber],
  headerParameters: [Parameters.accept],
  serializer,
};
const listPhoneNumbersOperationSpec: coreClient.OperationSpec = {
  path: "/phoneNumbers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PurchasedPhoneNumbers,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  queryParameters: [Parameters.skip, Parameters.apiVersion, Parameters.top],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer,
};
const operatorInformationSearchOperationSpec: coreClient.OperationSpec = {
  path: "/operatorInformation/:search",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperatorInformationResult,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  requestBody: {
    parameterPath: {
      phoneNumbers: ["phoneNumbers"],
      options: ["options", "options"],
    },
    mapper: { ...Mappers.OperatorInformationRequest, required: true },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listAreaCodesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumberAreaCodes,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  urlParameters: [
    Parameters.endpoint,
    Parameters.countryCode,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept, Parameters.acceptLanguage],
  serializer,
};
const listAvailableCountriesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumberCountries,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.acceptLanguage],
  serializer,
};
const listAvailableLocalitiesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumberLocalities,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  urlParameters: [
    Parameters.endpoint,
    Parameters.countryCode,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept, Parameters.acceptLanguage],
  serializer,
};
const listOfferingsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OfferingsResponse,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  urlParameters: [
    Parameters.endpoint,
    Parameters.countryCode,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept, Parameters.acceptLanguage],
  serializer,
};
const listReservationsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PhoneNumbersReservations,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer,
};
const listPhoneNumbersNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PurchasedPhoneNumbers,
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
    },
  },
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer,
};
