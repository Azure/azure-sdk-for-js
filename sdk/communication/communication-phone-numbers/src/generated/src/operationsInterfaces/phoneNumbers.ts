/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  PhoneNumberAreaCode,
  PhoneNumberType,
  PhoneNumbersListAreaCodesOptionalParams,
  PhoneNumberCountry,
  PhoneNumbersListAvailableCountriesOptionalParams,
  PhoneNumberLocality,
  PhoneNumbersListAvailableLocalitiesOptionalParams,
  PhoneNumberOffering,
  PhoneNumbersListOfferingsOptionalParams,
  PhoneNumbersReservation,
  PhoneNumbersGetReservationsOptionalParams,
  PurchasedPhoneNumber,
  PhoneNumbersListPhoneNumbersOptionalParams,
  PhoneNumberAssignmentType,
  PhoneNumberCapabilities,
  PhoneNumbersSearchAvailablePhoneNumbersOptionalParams,
  PhoneNumbersSearchAvailablePhoneNumbersResponse,
  PhoneNumbersBrowseAvailableNumbersOptionalParams,
  PhoneNumbersBrowseAvailableNumbersResponse,
  PhoneNumbersGetSearchResultOptionalParams,
  PhoneNumbersGetSearchResultResponse,
  PhoneNumbersPurchasePhoneNumbersOptionalParams,
  PhoneNumbersPurchasePhoneNumbersResponse,
  PhoneNumbersCreateReservationOptionalParams,
  PhoneNumbersCreateReservationResponse,
  PhoneNumbersGetReservationOptionalParams,
  PhoneNumbersGetReservationResponse,
  PhoneNumbersDeleteReservationOptionalParams,
  PhoneNumberCost,
  PhoneNumbersAddToReservationOptionalParams,
  PhoneNumbersAddToReservationResponse,
  PhoneNumbersRemoveFromReservationOptionalParams,
  PhoneNumbersRemoveFromReservationResponse,
  PhoneNumbersStartPurchaseOptionalParams,
  PhoneNumbersStartPurchaseResponse,
  PhoneNumbersGetOperationOptionalParams,
  PhoneNumbersGetOperationResponse,
  PhoneNumbersCancelOperationOptionalParams,
  PhoneNumbersUpdateCapabilitiesOptionalParams,
  PhoneNumbersUpdateCapabilitiesResponse,
  PhoneNumbersGetByNumberOptionalParams,
  PhoneNumbersGetByNumberResponse,
  PhoneNumbersReleasePhoneNumberOptionalParams,
  PhoneNumbersReleasePhoneNumberResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PhoneNumbers. */
export interface PhoneNumbers {
  /**
   * Gets the list of available area codes.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param phoneNumberType Filter by numberType, e.g. Geographic, TollFree.
   * @param options The options parameters.
   */
  listAreaCodes(
    countryCode: string,
    phoneNumberType: PhoneNumberType,
    options?: PhoneNumbersListAreaCodesOptionalParams
  ): PagedAsyncIterableIterator<PhoneNumberAreaCode>;
  /**
   * Gets the list of supported countries.
   * @param options The options parameters.
   */
  listAvailableCountries(
    options?: PhoneNumbersListAvailableCountriesOptionalParams
  ): PagedAsyncIterableIterator<PhoneNumberCountry>;
  /**
   * Gets the list of cities or towns with available phone numbers.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param options The options parameters.
   */
  listAvailableLocalities(
    countryCode: string,
    options?: PhoneNumbersListAvailableLocalitiesOptionalParams
  ): PagedAsyncIterableIterator<PhoneNumberLocality>;
  /**
   * List available offerings of capabilities with rates for the given country.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param options The options parameters.
   */
  listOfferings(
    countryCode: string,
    options?: PhoneNumbersListOfferingsOptionalParams
  ): PagedAsyncIterableIterator<PhoneNumberOffering>;
  /**
   * Get all active reservations.
   * @param options The options parameters.
   */
  listReservations(
    options?: PhoneNumbersGetReservationsOptionalParams
  ): PagedAsyncIterableIterator<PhoneNumbersReservation>;
  /**
   * Gets the list of all purchased phone numbers.
   * @param options The options parameters.
   */
  listPhoneNumbers(
    options?: PhoneNumbersListPhoneNumbersOptionalParams
  ): PagedAsyncIterableIterator<PurchasedPhoneNumber>;
  /**
   * Search for available phone numbers to purchase.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param phoneNumberType The type of phone numbers to search for, e.g. geographic, or tollFree.
   * @param assignmentType The assignment type of the phone numbers to search for. A phone number can be
   *                       assigned to a person, or to an application.
   * @param capabilities Capabilities of a phone number.
   * @param options The options parameters.
   */
  beginSearchAvailablePhoneNumbers(
    countryCode: string,
    phoneNumberType: PhoneNumberType,
    assignmentType: PhoneNumberAssignmentType,
    capabilities: PhoneNumberCapabilities,
    options?: PhoneNumbersSearchAvailablePhoneNumbersOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersSearchAvailablePhoneNumbersResponse>,
      PhoneNumbersSearchAvailablePhoneNumbersResponse
    >
  >;
  /**
   * Search for available phone numbers to purchase.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param phoneNumberType The type of phone numbers to search for, e.g. geographic, or tollFree.
   * @param assignmentType The assignment type of the phone numbers to search for. A phone number can be
   *                       assigned to a person, or to an application.
   * @param capabilities Capabilities of a phone number.
   * @param options The options parameters.
   */
  beginSearchAvailablePhoneNumbersAndWait(
    countryCode: string,
    phoneNumberType: PhoneNumberType,
    assignmentType: PhoneNumberAssignmentType,
    capabilities: PhoneNumberCapabilities,
    options?: PhoneNumbersSearchAvailablePhoneNumbersOptionalParams
  ): Promise<PhoneNumbersSearchAvailablePhoneNumbersResponse>;
  /**
   * Searches for available phone numbers to purchase. Note that this does not reserves the numbers in
   * the response.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param options The options parameters.
   */
  browseAvailableNumbers(
    countryCode: string,
    options?: PhoneNumbersBrowseAvailableNumbersOptionalParams
  ): Promise<PhoneNumbersBrowseAvailableNumbersResponse>;
  /**
   * Gets a phone number search result by search id.
   * @param searchId The search Id.
   * @param options The options parameters.
   */
  getSearchResult(
    searchId: string,
    options?: PhoneNumbersGetSearchResultOptionalParams
  ): Promise<PhoneNumbersGetSearchResultResponse>;
  /**
   * Purchases phone numbers.
   * @param options The options parameters.
   */
  beginPurchasePhoneNumbers(
    options?: PhoneNumbersPurchasePhoneNumbersOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersPurchasePhoneNumbersResponse>,
      PhoneNumbersPurchasePhoneNumbersResponse
    >
  >;
  /**
   * Purchases phone numbers.
   * @param options The options parameters.
   */
  beginPurchasePhoneNumbersAndWait(
    options?: PhoneNumbersPurchasePhoneNumbersOptionalParams
  ): Promise<PhoneNumbersPurchasePhoneNumbersResponse>;
  /**
   * Initializes a new reservation with a given ID. By default the new reservation is empty, but it can
   * optionally be created with an initial list of phone numbers.
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  createReservation(
    reservationId: string,
    options?: PhoneNumbersCreateReservationOptionalParams
  ): Promise<PhoneNumbersCreateReservationResponse>;
  /**
   * Gets a reservation by id
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  getReservation(
    reservationId: string,
    options?: PhoneNumbersGetReservationOptionalParams
  ): Promise<PhoneNumbersGetReservationResponse>;
  /**
   * Deletes a reservation by id
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  deleteReservation(
    reservationId: string,
    options?: PhoneNumbersDeleteReservationOptionalParams
  ): Promise<void>;
  /**
   * Reserves an available phone number. This will lock the number and make it unavailable for others to
   * purchase. If the reservation is cancelled or expires, it will be released and made available for
   * others to purchase.
   * @param reservationId The id of the reservation.
   * @param phoneNumber The phone number to remove from the reservation.
   * @param availablePhoneNumber The phone number in E.164 format, e.g. +11234567890.
   * @param id The id of the phone number.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param capabilities Capabilities of a phone number.
   * @param phoneNumberType Represents the number type of the offering.
   * @param assignmentType Represents the assignment type of the offering. Also known as the use case.
   * @param cost The incurred cost for a single phone number.
   * @param options The options parameters.
   */
  addToReservation(
    reservationId: string,
    phoneNumber: string,
    availablePhoneNumber: string,
    id: string,
    countryCode: string,
    capabilities: PhoneNumberCapabilities,
    phoneNumberType: PhoneNumberType,
    assignmentType: PhoneNumberAssignmentType,
    cost: PhoneNumberCost,
    options?: PhoneNumbersAddToReservationOptionalParams
  ): Promise<PhoneNumbersAddToReservationResponse>;
  /**
   * Removes a phone number from a reservation, making it available for others to purchase.
   * @param reservationId The id of the reservation.
   * @param phoneNumber The phone number to remove from the reservation.
   * @param options The options parameters.
   */
  removeFromReservation(
    reservationId: string,
    phoneNumber: string,
    options?: PhoneNumbersRemoveFromReservationOptionalParams
  ): Promise<PhoneNumbersRemoveFromReservationResponse>;
  /**
   * Starts the purchase of all phone numbers in the reservation. This is a long running operation.
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  beginStartPurchase(
    reservationId: string,
    options?: PhoneNumbersStartPurchaseOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersStartPurchaseResponse>,
      PhoneNumbersStartPurchaseResponse
    >
  >;
  /**
   * Starts the purchase of all phone numbers in the reservation. This is a long running operation.
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  beginStartPurchaseAndWait(
    reservationId: string,
    options?: PhoneNumbersStartPurchaseOptionalParams
  ): Promise<PhoneNumbersStartPurchaseResponse>;
  /**
   * Gets an operation by its id.
   * @param operationId The id of the operation
   * @param options The options parameters.
   */
  getOperation(
    operationId: string,
    options?: PhoneNumbersGetOperationOptionalParams
  ): Promise<PhoneNumbersGetOperationResponse>;
  /**
   * Cancels an operation by its id.
   * @param operationId The id of the operation
   * @param options The options parameters.
   */
  cancelOperation(
    operationId: string,
    options?: PhoneNumbersCancelOperationOptionalParams
  ): Promise<void>;
  /**
   * Updates the capabilities of a phone number.
   * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded
   *                    as %2B, e.g. +11234567890.
   * @param options The options parameters.
   */
  beginUpdateCapabilities(
    phoneNumber: string,
    options?: PhoneNumbersUpdateCapabilitiesOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersUpdateCapabilitiesResponse>,
      PhoneNumbersUpdateCapabilitiesResponse
    >
  >;
  /**
   * Updates the capabilities of a phone number.
   * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded
   *                    as %2B, e.g. +11234567890.
   * @param options The options parameters.
   */
  beginUpdateCapabilitiesAndWait(
    phoneNumber: string,
    options?: PhoneNumbersUpdateCapabilitiesOptionalParams
  ): Promise<PhoneNumbersUpdateCapabilitiesResponse>;
  /**
   * Gets the details of the given purchased phone number.
   * @param phoneNumber The purchased phone number whose details are to be fetched in E.164 format, e.g.
   *                    +11234567890.
   * @param options The options parameters.
   */
  getByNumber(
    phoneNumber: string,
    options?: PhoneNumbersGetByNumberOptionalParams
  ): Promise<PhoneNumbersGetByNumberResponse>;
  /**
   * Releases a purchased phone number.
   * @param phoneNumber Phone number to be released, e.g. +11234567890.
   * @param options The options parameters.
   */
  beginReleasePhoneNumber(
    phoneNumber: string,
    options?: PhoneNumbersReleasePhoneNumberOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersReleasePhoneNumberResponse>,
      PhoneNumbersReleasePhoneNumberResponse
    >
  >;
  /**
   * Releases a purchased phone number.
   * @param phoneNumber Phone number to be released, e.g. +11234567890.
   * @param options The options parameters.
   */
  beginReleasePhoneNumberAndWait(
    phoneNumber: string,
    options?: PhoneNumbersReleasePhoneNumberOptionalParams
  ): Promise<PhoneNumbersReleasePhoneNumberResponse>;
}
