/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  PhoneNumberAreaCode,
  PhoneNumberType,
  PhoneNumbersListAreaCodesOptionalParams,
  PhoneNumberCountry,
  PhoneNumbersListAvailableCountriesOptionalParams,
  PhoneNumberLocality,
  PhoneNumbersListAvailableLocalitiesOptionalParams,
  PhoneNumberOffering,
  PhoneNumbersListOfferingsOptionalParams,
  PhoneNumbersReservation,
  PhoneNumbersListReservationsOptionalParams,
  PurchasedPhoneNumber,
  PhoneNumbersListPhoneNumbersOptionalParams,
  PhoneNumbersBrowseAvailableNumbersOptionalParams,
  PhoneNumbersBrowseAvailableNumbersResponse,
  PhoneNumbersCreateOrUpdateReservationOptionalParams,
  PhoneNumbersCreateOrUpdateReservationResponse,
  PhoneNumbersGetReservationOptionalParams,
  PhoneNumbersGetReservationResponse,
  PhoneNumbersDeleteReservationOptionalParams,
  PhoneNumbersPurchaseReservationOptionalParams,
  PhoneNumbersPurchaseReservationResponse,
  PhoneNumberAssignmentType,
  PhoneNumberCapabilities,
  PhoneNumbersSearchAvailablePhoneNumbersOptionalParams,
  PhoneNumbersSearchAvailablePhoneNumbersResponse,
  PhoneNumbersGetSearchResultOptionalParams,
  PhoneNumbersGetSearchResultResponse,
  PhoneNumbersPurchasePhoneNumbersOptionalParams,
  PhoneNumbersPurchasePhoneNumbersResponse,
  PhoneNumbersGetOperationOptionalParams,
  PhoneNumbersGetOperationResponse,
  PhoneNumbersCancelOperationOptionalParams,
  PhoneNumbersUpdateCapabilitiesOptionalParams,
  PhoneNumbersUpdateCapabilitiesResponse,
  PhoneNumbersGetByNumberOptionalParams,
  PhoneNumbersGetByNumberResponse,
  PhoneNumbersReleasePhoneNumberOptionalParams,
  PhoneNumbersReleasePhoneNumberResponse,
  PhoneNumbersOperatorInformationSearchOptionalParams,
  PhoneNumbersOperatorInformationSearchResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PhoneNumbers. */
export interface PhoneNumbers {
  /**
   * Gets the list of available area codes.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param phoneNumberType Filter by numberType, e.g. Geographic, TollFree, Mobile.
   * @param options The options parameters.
   */
  listAreaCodes(
    countryCode: string,
    phoneNumberType: PhoneNumberType,
    options?: PhoneNumbersListAreaCodesOptionalParams,
  ): PagedAsyncIterableIterator<PhoneNumberAreaCode>;
  /**
   * Gets the list of supported countries.
   * @param options The options parameters.
   */
  listAvailableCountries(
    options?: PhoneNumbersListAvailableCountriesOptionalParams,
  ): PagedAsyncIterableIterator<PhoneNumberCountry>;
  /**
   * Gets the list of cities or towns with available phone numbers.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param options The options parameters.
   */
  listAvailableLocalities(
    countryCode: string,
    options?: PhoneNumbersListAvailableLocalitiesOptionalParams,
  ): PagedAsyncIterableIterator<PhoneNumberLocality>;
  /**
   * List available offerings of capabilities with rates for the given country.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param options The options parameters.
   */
  listOfferings(
    countryCode: string,
    options?: PhoneNumbersListOfferingsOptionalParams,
  ): PagedAsyncIterableIterator<PhoneNumberOffering>;
  /**
   * Retrieves a paginated list of all phone number reservations. Note that the reservations will not be
   * populated with the phone numbers associated with them.
   * @param options The options parameters.
   */
  listReservations(
    options?: PhoneNumbersListReservationsOptionalParams,
  ): PagedAsyncIterableIterator<PhoneNumbersReservation>;
  /**
   * Gets the list of all purchased phone numbers.
   * @param options The options parameters.
   */
  listPhoneNumbers(
    options?: PhoneNumbersListPhoneNumbersOptionalParams,
  ): PagedAsyncIterableIterator<PurchasedPhoneNumber>;
  /**
   * Browses for available phone numbers to purchase. The response will be a randomized list of phone
   * numbers available to purchase matching the browsing criteria. This operation is not paginated. Since
   * the results are randomized, repeating the same request will not guarantee the same results.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param phoneNumberType Represents the number type of the offering.
   * @param options The options parameters.
   */
  browseAvailableNumbers(
    countryCode: string,
    phoneNumberType: PhoneNumberType,
    options?: PhoneNumbersBrowseAvailableNumbersOptionalParams,
  ): Promise<PhoneNumbersBrowseAvailableNumbersResponse>;
  /**
   * Adds and removes phone numbers from the reservation with the given ID. The response will be the
   * updated state of the reservation. Phone numbers can be reserved by including them in the payload. If
   * a number is already in the reservation, it will be ignored. To remove a phone number, set it
   * explicitly to null in the request payload. This operation is idempotent. If a reservation with the
   * same ID already exists, it will be updated, otherwise a new one is created. Only reservations with
   * 'active' status can be updated. Updating a reservation will extend the expiration time of the
   * reservation to 15 minutes after the last change, up to a maximum of 2 hours from creation time.
   * Partial success is possible, in which case the response will have a 207 status code.
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  createOrUpdateReservation(
    reservationId: string,
    options?: PhoneNumbersCreateOrUpdateReservationOptionalParams,
  ): Promise<PhoneNumbersCreateOrUpdateReservationResponse>;
  /**
   * Retrieves the reservation with the given ID, including all of the phone numbers associated with it.
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  getReservation(
    reservationId: string,
    options?: PhoneNumbersGetReservationOptionalParams,
  ): Promise<PhoneNumbersGetReservationResponse>;
  /**
   * Deletes the reservation with the given ID. Any phone number in the reservation will be released and
   * made available for others to purchase. Only reservations with 'active' status can be deleted.
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  deleteReservation(
    reservationId: string,
    options?: PhoneNumbersDeleteReservationOptionalParams,
  ): Promise<void>;
  /**
   * Starts a long running operation to purchase all of the phone numbers in the reservation. Purchase
   * can only be started for active reservations that at least one phone number. If any of the phone
   * numbers in the reservation is from a country where reselling is not permitted, do not resell
   * agreement is required. The response will include an 'Operation-Location' header that can be used to
   * query the status of the operation.
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  beginPurchaseReservation(
    reservationId: string,
    options?: PhoneNumbersPurchaseReservationOptionalParams,
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersPurchaseReservationResponse>,
      PhoneNumbersPurchaseReservationResponse
    >
  >;
  /**
   * Starts a long running operation to purchase all of the phone numbers in the reservation. Purchase
   * can only be started for active reservations that at least one phone number. If any of the phone
   * numbers in the reservation is from a country where reselling is not permitted, do not resell
   * agreement is required. The response will include an 'Operation-Location' header that can be used to
   * query the status of the operation.
   * @param reservationId The id of the reservation.
   * @param options The options parameters.
   */
  beginPurchaseReservationAndWait(
    reservationId: string,
    options?: PhoneNumbersPurchaseReservationOptionalParams,
  ): Promise<PhoneNumbersPurchaseReservationResponse>;
  /**
   * Search for available phone numbers to purchase.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param phoneNumberType The type of phone numbers to search for, e.g. geographic, tollFree, mobile.
   * @param assignmentType The assignment type of the phone numbers to search for. A phone number can be
   *                       assigned to a person, or to an application.
   * @param capabilities Capabilities of a phone number.
   * @param options The options parameters.
   */
  beginSearchAvailablePhoneNumbers(
    countryCode: string,
    phoneNumberType: PhoneNumberType,
    assignmentType: PhoneNumberAssignmentType,
    capabilities: PhoneNumberCapabilities,
    options?: PhoneNumbersSearchAvailablePhoneNumbersOptionalParams,
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersSearchAvailablePhoneNumbersResponse>,
      PhoneNumbersSearchAvailablePhoneNumbersResponse
    >
  >;
  /**
   * Search for available phone numbers to purchase.
   * @param countryCode The ISO 3166-2 country code, e.g. US.
   * @param phoneNumberType The type of phone numbers to search for, e.g. geographic, tollFree, mobile.
   * @param assignmentType The assignment type of the phone numbers to search for. A phone number can be
   *                       assigned to a person, or to an application.
   * @param capabilities Capabilities of a phone number.
   * @param options The options parameters.
   */
  beginSearchAvailablePhoneNumbersAndWait(
    countryCode: string,
    phoneNumberType: PhoneNumberType,
    assignmentType: PhoneNumberAssignmentType,
    capabilities: PhoneNumberCapabilities,
    options?: PhoneNumbersSearchAvailablePhoneNumbersOptionalParams,
  ): Promise<PhoneNumbersSearchAvailablePhoneNumbersResponse>;
  /**
   * Gets a phone number search result by search id.
   * @param searchId The search Id.
   * @param options The options parameters.
   */
  getSearchResult(
    searchId: string,
    options?: PhoneNumbersGetSearchResultOptionalParams,
  ): Promise<PhoneNumbersGetSearchResultResponse>;
  /**
   * Purchases phone numbers.
   * @param options The options parameters.
   */
  beginPurchasePhoneNumbers(
    options?: PhoneNumbersPurchasePhoneNumbersOptionalParams,
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersPurchasePhoneNumbersResponse>,
      PhoneNumbersPurchasePhoneNumbersResponse
    >
  >;
  /**
   * Purchases phone numbers.
   * @param options The options parameters.
   */
  beginPurchasePhoneNumbersAndWait(
    options?: PhoneNumbersPurchasePhoneNumbersOptionalParams,
  ): Promise<PhoneNumbersPurchasePhoneNumbersResponse>;
  /**
   * Gets an operation by its id.
   * @param operationId The id of the operation
   * @param options The options parameters.
   */
  getOperation(
    operationId: string,
    options?: PhoneNumbersGetOperationOptionalParams,
  ): Promise<PhoneNumbersGetOperationResponse>;
  /**
   * Cancels an operation by its id.
   * @param operationId The id of the operation
   * @param options The options parameters.
   */
  cancelOperation(
    operationId: string,
    options?: PhoneNumbersCancelOperationOptionalParams,
  ): Promise<void>;
  /**
   * Updates the capabilities of a phone number.
   * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded
   *                    as %2B, e.g. +11234567890.
   * @param options The options parameters.
   */
  beginUpdateCapabilities(
    phoneNumber: string,
    options?: PhoneNumbersUpdateCapabilitiesOptionalParams,
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersUpdateCapabilitiesResponse>,
      PhoneNumbersUpdateCapabilitiesResponse
    >
  >;
  /**
   * Updates the capabilities of a phone number.
   * @param phoneNumber The phone number id in E.164 format. The leading plus can be either + or encoded
   *                    as %2B, e.g. +11234567890.
   * @param options The options parameters.
   */
  beginUpdateCapabilitiesAndWait(
    phoneNumber: string,
    options?: PhoneNumbersUpdateCapabilitiesOptionalParams,
  ): Promise<PhoneNumbersUpdateCapabilitiesResponse>;
  /**
   * Gets the details of the given purchased phone number.
   * @param phoneNumber The purchased phone number whose details are to be fetched in E.164 format, e.g.
   *                    +11234567890.
   * @param options The options parameters.
   */
  getByNumber(
    phoneNumber: string,
    options?: PhoneNumbersGetByNumberOptionalParams,
  ): Promise<PhoneNumbersGetByNumberResponse>;
  /**
   * Releases a purchased phone number.
   * @param phoneNumber Phone number to be released, e.g. +11234567890.
   * @param options The options parameters.
   */
  beginReleasePhoneNumber(
    phoneNumber: string,
    options?: PhoneNumbersReleasePhoneNumberOptionalParams,
  ): Promise<
    PollerLike<
      PollOperationState<PhoneNumbersReleasePhoneNumberResponse>,
      PhoneNumbersReleasePhoneNumberResponse
    >
  >;
  /**
   * Releases a purchased phone number.
   * @param phoneNumber Phone number to be released, e.g. +11234567890.
   * @param options The options parameters.
   */
  beginReleasePhoneNumberAndWait(
    phoneNumber: string,
    options?: PhoneNumbersReleasePhoneNumberOptionalParams,
  ): Promise<PhoneNumbersReleasePhoneNumberResponse>;
  /**
   * Searches for number format and operator information for a given list of phone numbers.
   * @param phoneNumbers Phone number(s) whose operator information is being requested
   * @param options The options parameters.
   */
  operatorInformationSearch(
    phoneNumbers: string[],
    options?: PhoneNumbersOperatorInformationSearchOptionalParams,
  ): Promise<PhoneNumbersOperatorInformationSearchResponse>;
}
