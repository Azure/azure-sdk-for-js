/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SipRouting } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SipRoutingClientContext } from "../sipRoutingClientContext";
import {
  SipRoutingGetOptionalParams,
  SipRoutingGetResponse,
  SipRoutingPatchOptionalParams,
  SipRoutingPatchResponse,
  SipRoutingTestRoutesWithNumberOptionalParams,
  SipRoutingTestRoutesWithNumberResponse
} from "../models";

/** Class containing SipRouting operations. */
export class SipRoutingImpl implements SipRouting {
  private readonly client: SipRoutingClientContext;

  /**
   * Initialize a new instance of the class SipRouting class.
   * @param client Reference to the service client
   */
  constructor(client: SipRoutingClientContext) {
    this.client = client;
  }

  /**
   * Gets SIP configuration for resource.
   * @param options The options parameters.
   */
  get(options?: SipRoutingGetOptionalParams): Promise<SipRoutingGetResponse> {
    return this.client.sendOperationRequest({ options }, getOperationSpec);
  }

  /**
   * Patches SIP configuration for resource.
   * @param options The options parameters.
   */
  patch(
    options?: SipRoutingPatchOptionalParams
  ): Promise<SipRoutingPatchResponse> {
    return this.client.sendOperationRequest({ options }, patchOperationSpec);
  }

  /**
   * Gets the list of routes matching the target phone number, ordered by priority.
   * @param targetPhoneNumber Phone number to test routing patterns against
   * @param options The options parameters.
   */
  testRoutesWithNumber(
    targetPhoneNumber: string,
    options?: SipRoutingTestRoutesWithNumberOptionalParams
  ): Promise<SipRoutingTestRoutesWithNumberResponse> {
    return this.client.sendOperationRequest(
      { targetPhoneNumber, options },
      testRoutesWithNumberOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/sip",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SipConfiguration
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.SipRoutingGetExceptionHeaders
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const patchOperationSpec: coreClient.OperationSpec = {
  path: "/sip",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SipConfiguration
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      headersMapper: Mappers.SipRoutingPatchExceptionHeaders
    }
  },
  requestBody: {
    parameterPath: {
      domains: ["options", "domains"],
      trunks: ["options", "trunks"],
      routes: ["options", "routes"]
    },
    mapper: Mappers.SipConfigurationPatch
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const testRoutesWithNumberOperationSpec: coreClient.OperationSpec = {
  path: "/sip:testRoutesWithNumber",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RoutesForNumber
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: {
    parameterPath: {
      domains: ["options", "domains"],
      trunks: ["options", "trunks"],
      routes: ["options", "routes"]
    },
    mapper: Mappers.SipConfiguration
  },
  queryParameters: [Parameters.apiVersion, Parameters.targetPhoneNumber],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
