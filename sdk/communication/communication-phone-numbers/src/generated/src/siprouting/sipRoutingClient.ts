/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { SipRoutingClientContext } from "./sipRoutingClientContext";
import {
  SipRoutingClientOptionalParams,
  GetSipConfigurationOptionalParams,
  GetSipConfigurationResponse,
  PatchSipConfigurationOptionalParams,
  PatchSipConfigurationResponse
} from "./models";

export class SipRoutingClient extends SipRoutingClientContext {
  /**
   * Initializes a new instance of the SipRoutingClient class.
   * @param endpoint The communication resource, for example https://resourcename.communication.azure.com
   * @param options The parameter options
   */
  constructor(endpoint: string, options?: SipRoutingClientOptionalParams) {
    super(endpoint, options);
  }

  /**
   * Gets SIP configuration for resource.
   * @param options The options parameters.
   */
  getSipConfiguration(
    options?: GetSipConfigurationOptionalParams
  ): Promise<GetSipConfigurationResponse> {
    return this.sendOperationRequest(
      { options },
      getSipConfigurationOperationSpec
    );
  }

  /**
   * Patches SIP configuration for resource.
   * @param options The options parameters.
   */
  patchSipConfiguration(
    options?: PatchSipConfigurationOptionalParams
  ): Promise<PatchSipConfigurationResponse> {
    return this.sendOperationRequest(
      { options },
      patchSipConfigurationOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getSipConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/sip",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SipConfiguration
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const patchSipConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/sip",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SipConfiguration
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: {
    parameterPath: {
      trunks: ["options", "trunks"],
      routes: ["options", "routes"]
    },
    mapper: Mappers.SipConfigurationPatch
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
