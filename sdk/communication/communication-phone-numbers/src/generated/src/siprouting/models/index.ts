/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/**
 * Represents a SIP configuration.
 * When a call is being routed the routes are applied in the same order as in the routes list.
 * A route is matched by its number pattern.
 * Call is then directed into route's first available trunk, based on the order in the route's trunks list.
 */
export interface SipConfiguration {
  /**
   * SIP trunks for routing calls.
   * Map key is trunk's FQDN (1-249 characters).
   */
  trunks?: { [propertyName: string]: SipTrunk };
  /** Trunk routes for routing calls. */
  routes?: SipTrunkRoute[];
}

/** Represents a SIP trunk for routing calls. See RFC 4904. */
export interface SipTrunk {
  /** Gets or sets SIP signaling port of the trunk. */
  sipSignalingPort: number;
}

/** Represents a trunk route for routing calls. */
export interface SipTrunkRoute {
  /** Gets or sets description of the route. */
  description?: string;
  /** Gets or sets name of the route. */
  name: string;
  /**
   * Gets or sets regex number pattern for routing calls. .NET regex format is supported.
   * The regex should match only digits with an optional '+' prefix without spaces.
   * I.e. "^\+[1-9][0-9]{3,23}$".
   */
  numberPattern: string;
  /** Gets or sets list of SIP trunks for routing calls. Trunks are represented as FQDN. */
  trunks?: string[];
}

/** The Communication Services error. */
export interface CommunicationErrorResponse {
  /** The Communication Services error. */
  error: SipRoutingError;
}

/** The Communication Services error. */
export interface SipRoutingError {
  /** The error code. */
  code: string;
  /** The error message. */
  message: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * Further details about specific errors that led to this error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: SipRoutingError[];
  /**
   * The inner error if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly innerError?: SipRoutingError;
}

/** Represents a SIP configuration update. */
export interface SipConfigurationUpdate {
  /**
   * SIP trunks for routing calls.
   * Map key is trunk's FQDN (1-249 characters).
   */
  trunks?: { [propertyName: string]: TrunkUpdate | null };
  /** Trunk routes for routing calls. */
  routes?: SipTrunkRoute[];
}

/** Represents a SIP trunk update. */
export interface TrunkUpdate {
  /** Gets or sets SIP signaling port of the trunk. */
  sipSignalingPort?: number;
}

/** Defines headers for SipRouting_get operation. */
export interface SipRoutingGetExceptionHeaders {
  /** Error code */
  xMsErrorCode?: string;
}

/** Defines headers for SipRouting_update operation. */
export interface SipRoutingUpdateExceptionHeaders {
  /** Error code */
  xMsErrorCode?: string;
}

/** Optional parameters. */
export interface SipRoutingGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SipRoutingGetResponse = SipConfiguration;

/** Optional parameters. */
export interface SipRoutingUpdateOptionalParams
  extends coreClient.OperationOptions {
  /**
   * SIP trunks for routing calls.
   * Map key is trunk's FQDN (1-249 characters).
   */
  trunks?: { [propertyName: string]: TrunkUpdate | null };
  /** Trunk routes for routing calls. */
  routes?: SipTrunkRoute[];
}

/** Contains response data for the update operation. */
export type SipRoutingUpdateResponse = SipConfiguration;

/** Optional parameters. */
export interface SipRoutingClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
