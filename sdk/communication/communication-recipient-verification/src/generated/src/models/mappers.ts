/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const AcsVerification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AcsVerification",
    modelProperties: {
      immutableId: {
        serializedName: "ImmutableId",
        type: {
          name: "String"
        }
      },
      verificationId: {
        serializedName: "VerificationId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "Status",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "SubscriptionId",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "Identity",
        type: {
          name: "String"
        }
      },
      challengeId: {
        serializedName: "ChallengeId",
        type: {
          name: "String"
        }
      },
      retries: {
        serializedName: "Retries",
        type: {
          name: "Number"
        }
      },
      attempts: {
        serializedName: "Attempts",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CommunicationErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunicationErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CommunicationError"
        }
      }
    }
  }
};

export const CommunicationError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunicationError",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommunicationError"
            }
          }
        }
      },
      innerError: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "CommunicationError"
        }
      }
    }
  }
};

export const VerificationRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VerificationRequest",
    modelProperties: {
      identity: {
        serializedName: "Identity",
        type: {
          name: "String"
        }
      },
      channel: {
        serializedName: "Channel",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VerificationResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VerificationResponse",
    modelProperties: {
      verificationId: {
        serializedName: "VerificationId",
        type: {
          name: "String"
        }
      },
      isVerified: {
        serializedName: "IsVerified",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VerificationCodeRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VerificationCodeRequest",
    modelProperties: {
      verificationCode: {
        serializedName: "VerificationCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VerificationConstantsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VerificationConstantsResponse",
    modelProperties: {
      maxRetriesAllowed: {
        serializedName: "MaxRetriesAllowed",
        type: {
          name: "Number"
        }
      },
      maxVerificationsAllowed: {
        serializedName: "MaxVerificationsAllowed",
        type: {
          name: "Number"
        }
      },
      currentNumberOfVerifications: {
        serializedName: "CurrentNumberOfVerifications",
        type: {
          name: "Number"
        }
      }
    }
  }
};
