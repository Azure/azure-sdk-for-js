/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { AcsVerificationOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { RecipientVerificationClient } from "../recipientVerificationClient";
import {
  AcsVerificationGetVerificationsOptionalParams,
  AcsVerificationGetVerificationsResponse,
  AcsVerificationRequestVerificationOptionalParams,
  AcsVerificationRequestVerificationResponse,
  AcsVerificationVerifyIdentityOptionalParams,
  AcsVerificationVerifyIdentityResponse,
  AcsVerificationDeleteVerificationOptionalParams,
  AcsVerificationGetVerificationConstantsOptionalParams,
  AcsVerificationGetVerificationConstantsResponse
} from "../models";

/** Class containing AcsVerificationOperations operations. */
export class AcsVerificationOperationsImpl
  implements AcsVerificationOperations {
  private readonly client: RecipientVerificationClient;

  /**
   * Initialize a new instance of the class AcsVerificationOperations class.
   * @param client Reference to the service client
   */
  constructor(client: RecipientVerificationClient) {
    this.client = client;
  }

  /**
   * Gets the array of verified phone numbers for the current resource.
   * @param options The options parameters.
   */
  async getVerifications(
    options?: AcsVerificationGetVerificationsOptionalParams
  ): Promise<AcsVerificationGetVerificationsResponse> {
    return tracingClient.withSpan(
      "RecipientVerificationClient.getVerifications",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getVerificationsOperationSpec
        ) as Promise<AcsVerificationGetVerificationsResponse>;
      }
    );
  }

  /**
   * Request the identity for the verification.
   * @param options The options parameters.
   */
  async requestVerification(
    options?: AcsVerificationRequestVerificationOptionalParams
  ): Promise<AcsVerificationRequestVerificationResponse> {
    return tracingClient.withSpan(
      "RecipientVerificationClient.requestVerification",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          requestVerificationOperationSpec
        ) as Promise<AcsVerificationRequestVerificationResponse>;
      }
    );
  }

  /**
   * Verify that the user received the correct verification code.
   * @param verificationId Verification Id. Must be a valid GUID
   * @param options The options parameters.
   */
  async verifyIdentity(
    verificationId: string,
    options?: AcsVerificationVerifyIdentityOptionalParams
  ): Promise<AcsVerificationVerifyIdentityResponse> {
    return tracingClient.withSpan(
      "RecipientVerificationClient.verifyIdentity",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { verificationId, options },
          verifyIdentityOperationSpec
        ) as Promise<AcsVerificationVerifyIdentityResponse>;
      }
    );
  }

  /**
   * Deleting a verification.
   * @param verificationId Verification Id. Must be a valid GUID
   * @param options The options parameters.
   */
  async deleteVerification(
    verificationId: string,
    options?: AcsVerificationDeleteVerificationOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "RecipientVerificationClient.deleteVerification",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { verificationId, options },
          deleteVerificationOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * Getting all the constants for the resource.
   * @param options The options parameters.
   */
  async getVerificationConstants(
    options?: AcsVerificationGetVerificationConstantsOptionalParams
  ): Promise<AcsVerificationGetVerificationConstantsResponse> {
    return tracingClient.withSpan(
      "RecipientVerificationClient.getVerificationConstants",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getVerificationConstantsOperationSpec
        ) as Promise<AcsVerificationGetVerificationConstantsResponse>;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getVerificationsOperationSpec: coreClient.OperationSpec = {
  path: "/verifications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "AcsVerification" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const requestVerificationOperationSpec: coreClient.OperationSpec = {
  path: "/verifications",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VerificationResponse
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: {
    parameterPath: {
      identity: ["options", "identity"],
      channel: ["options", "channel"]
    },
    mapper: Mappers.VerificationRequest
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const verifyIdentityOperationSpec: coreClient.OperationSpec = {
  path: "/verifications/{verificationId}/check",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.VerificationResponse
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: {
    parameterPath: { verificationCode: ["options", "verificationCode"] },
    mapper: Mappers.VerificationCodeRequest
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.verificationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteVerificationOperationSpec: coreClient.OperationSpec = {
  path: "/verifications/{verificationId}/",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.verificationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getVerificationConstantsOperationSpec: coreClient.OperationSpec = {
  path: "/verifications/configuration",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VerificationConstantsResponse
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
