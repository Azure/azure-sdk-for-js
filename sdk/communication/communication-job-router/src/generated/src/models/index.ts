/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type QueueSelectorAttachmentUnion =
  | QueueSelectorAttachment
  | ConditionalQueueSelector
  | PassThroughQueueSelector
  | RuleEngineQueueSelector
  | StaticQueueSelector
  | WeightedAllocationQueueSelector;
export type RouterRuleUnion =
  | RouterRule
  | AzureFunctionRule
  | DirectMapRule
  | ExpressionRule
  | StaticRule;
export type WorkerSelectorAttachmentUnion =
  | WorkerSelectorAttachment
  | ConditionalWorkerSelector
  | PassThroughWorkerSelector
  | RuleEngineWorkerSelector
  | StaticWorkerSelector
  | WeightedAllocationWorkerSelector;
export type DistributionModeUnion =
  | DistributionMode
  | BestWorkerMode
  | LongestIdleMode
  | RoundRobinMode;
export type JobExceptionTriggerUnion =
  | JobExceptionTrigger
  | QueueLengthExceptionTrigger
  | WaitTimeExceptionTrigger;
export type ExceptionActionUnion =
  | ExceptionAction
  | CancelExceptionAction
  | ManualReclassifyExceptionAction
  | ReclassifyExceptionAction;

/** A container for the rules that govern how jobs are classified. */
export interface ClassificationPolicy {
  /**
   * Unique identifier of this policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Friendly name of this policy. */
  name?: string;
  /** The fallback queue to select if the queue selector doesn't find a match. */
  fallbackQueueId?: string;
  /** The queue selectors to resolve a queue for a given job. */
  queueSelectors?: QueueSelectorAttachmentUnion[];
  /**
   * A rule of one of the following types:
   *
   * StaticRule:  A rule providing static rules that always return the same result, regardless of input.
   * DirectMapRule:  A rule that return the same labels as the input labels.
   * ExpressionRule: A rule providing inline expression rules.
   * AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
   */
  prioritizationRule?: RouterRuleUnion;
  /** The worker label selectors to attach to a given job. */
  workerSelectors?: WorkerSelectorAttachmentUnion[];
}

/** An attachment of label selectors to resolve a queue to a job from a classification policy */
export interface QueueSelectorAttachment {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind:
    | "conditional"
    | "pass-through"
    | "rule-engine"
    | "static"
    | "weighted-allocation-queue-selector";
}

/**
 * A rule of one of the following types:
 *
 * StaticRule:  A rule providing static rules that always return the same result, regardless of input.
 * DirectMapRule:  A rule that return the same labels as the input labels.
 * ExpressionRule: A rule providing inline expression rules.
 * AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
 */
export interface RouterRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind:
    | "azure-function-rule"
    | "direct-map-rule"
    | "expression-rule"
    | "static-rule";
}

/** An attachment which attaches WorkerSelectors to workers */
export interface WorkerSelectorAttachment {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind:
    | "conditional"
    | "pass-through"
    | "rule-engine"
    | "static"
    | "weighted-allocation-worker-selector";
}

/** The Communication Services error. */
export interface CommunicationErrorResponse {
  /** The Communication Services error. */
  error: CommunicationError;
}

/** The Communication Services error. */
export interface CommunicationError {
  /** The error code. */
  code: string;
  /** The error message. */
  message: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * Further details about specific errors that led to this error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: CommunicationError[];
  /**
   * The inner error if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly innerError?: CommunicationError;
}

/** A paged collection of classification policies. */
export interface ClassificationPolicyCollection {
  value: PagedClassificationPolicy[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

/** A classification policy returned from a pageable list */
export interface PagedClassificationPolicy {
  /**
   * Unique identifier of this policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Friendly name of this policy. */
  name?: string;
  /** The fallback queue to select if the queue selector doesn't find a match. */
  fallbackQueueId?: string;
  /** The queue selectors to resolve a queue for a given job. */
  queueSelectors?: QueueSelectorAttachmentUnion[];
  /**
   * A rule of one of the following types:
   *
   * StaticRule:  A rule providing static rules that always return the same result, regardless of input.
   * DirectMapRule:  A rule that return the same labels as the input labels.
   * ExpressionRule: A rule providing inline expression rules.
   * AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
   */
  prioritizationRule?: RouterRuleUnion;
  /** The worker label selectors to attach to a given job. */
  workerSelectors?: WorkerSelectorAttachmentUnion[];
}

/** Policy governing how jobs are distributed to workers */
export interface DistributionPolicy {
  /**
   * The unique identifier of the policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The human readable name of the policy. */
  name?: string;
  /** The expiry time of any offers created under this policy will be governed by the offer time to live. */
  offerTtlSeconds?: number;
  /** Abstract base class for defining a distribution mode */
  mode?: DistributionModeUnion;
}

/** Abstract base class for defining a distribution mode */
export interface DistributionMode {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "best-worker" | "longest-idle" | "round-robin";
  /** Governs the minimum desired number of active concurrent offers a job can have. */
  minConcurrentOffers: number;
  /** Governs the maximum number of active concurrent offers a job can have. */
  maxConcurrentOffers: number;
  /**
   * (Optional)
   * If set to true, then router will match workers to jobs even if they don't match label selectors.
   * Warning: You may get workers that are not qualified for the job they are matched with if you set this
   * variable to true. This flag is intended more for temporary usage.
   * By default, set to false.
   */
  bypassSelectors?: boolean;
}

/** A paged collection of distribution policies. */
export interface DistributionPolicyCollection {
  value: PagedDistributionPolicy[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

/** A distribution policy returned from a pageable list */
export interface PagedDistributionPolicy {
  /**
   * The unique identifier of the policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The human readable name of the policy. */
  name?: string;
  /** The expiry time of any offers created under this policy will be governed by the offer time to live. */
  offerTtlSeconds?: number;
  /** Abstract base class for defining a distribution mode */
  mode?: DistributionModeUnion;
}

/** A policy that defines actions to execute when exception are triggered. */
export interface ExceptionPolicy {
  /**
   * The Id of the exception policy
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** (Optional) The name of the exception policy. */
  name?: string;
  /** (Optional) A dictionary collection of exception rules on the exception policy. Key is the Id of each exception rule. */
  exceptionRules?: { [propertyName: string]: ExceptionRule };
}

/** A rule that defines actions to execute upon a specific trigger. */
export interface ExceptionRule {
  /** The trigger for this exception rule */
  trigger: JobExceptionTriggerUnion;
  /** A dictionary collection of actions to perform once the exception is triggered. Key is the Id of each exception action. */
  actions: { [propertyName: string]: any };
}

/** The trigger for this exception rule */
export interface JobExceptionTrigger {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "queue-length" | "wait-time";
}

/** A paged collection of exception policies. */
export interface ExceptionPolicyCollection {
  value: PagedExceptionPolicy[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

/** An exception policy returned from a pageable list */
export interface PagedExceptionPolicy {
  /**
   * The Id of the exception policy
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** (Optional) The name of the exception policy. */
  name?: string;
  /** (Optional) A dictionary collection of exception rules on the exception policy. Key is the Id of each exception rule. */
  exceptionRules?: { [propertyName: string]: ExceptionRule };
}

/** A unit of work to be routed */
export interface RouterJob {
  /**
   * The id of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Reference to an external parent context, eg. call ID. */
  channelReference?: string;
  /**
   * The state of the Job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly jobStatus?: JobStatus;
  /**
   * The time a job was queued.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enqueueTimeUtc?: Date;
  /** The channel identifier. eg. voice, chat, etc. */
  channelId?: string;
  /** The Id of the Classification policy used for classifying a job. */
  classificationPolicyId?: string;
  /** The Id of the Queue that this job is queued to. */
  queueId?: string;
  /** The priority of this job. */
  priority?: number;
  /** Reason code for cancelled or closed jobs. */
  dispositionCode?: string;
  /** A collection of manually specified label selectors, which a worker must satisfy in order to process this job. */
  requestedWorkerSelectors?: WorkerSelector[];
  /**
   * A collection of label selectors attached by a classification policy, which a worker must satisfy in order to process this job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly attachedWorkerSelectors?: WorkerSelector[];
  /** A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. */
  labels?: { [propertyName: string]: any };
  /**
   * A collection of the assignments of the job.
   * Key is AssignmentId.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assignments?: { [propertyName: string]: JobAssignment };
  /** A set of non-identifying attributes attached to this job */
  tags?: { [propertyName: string]: any };
  /** Notes attached to a job, sorted by timestamp */
  notes?: { [propertyName: string]: string };
}

/** Describes a condition that must be met against a set of labels for worker selection */
export interface WorkerSelector {
  /** The label key to query against */
  key: string;
  /** Describes how the value of the label is compared to the value defined on the label selector */
  labelOperator: LabelOperator;
  /** The value to compare against the actual label value with the given operator */
  value?: Record<string, unknown>;
  /** Describes how long this label selector is valid in seconds. */
  ttlSeconds?: number;
  /** Pushes the job to the front of the queue as long as this selector is active. */
  expedite?: boolean;
}

/** Assigns a job to a worker */
export interface JobAssignment {
  /** The Id of the job assignment. */
  id: string;
  /** The Id of the Worker assigned to the job. */
  workerId?: string;
  /** The assignment time of the job. */
  assignTime: Date;
  /** The time the job was marked as completed after being assigned. */
  completeTime?: Date;
  /** The time the job was marked as closed after being completed. */
  closeTime?: Date;
}

/** Request payload for deleting a job */
export interface CancelJobRequest {
  /** (Optional) A note that will be appended to the jobs' Notes collection with th current timestamp. */
  note?: string;
  /**
   * Indicates the outcome of the job, populate this field with your own custom values.
   * If not provided, default value of "Cancelled" is set.
   */
  dispositionCode?: string;
}

/** Request payload for completing jobs */
export interface CompleteJobRequest {
  /** The assignment within the job to complete. */
  assignmentId: string;
  /** (Optional) A note that will be appended to the jobs' Notes collection with th current timestamp. */
  note?: string;
}

/** Request payload for closing jobs */
export interface CloseJobRequest {
  /** The assignment within which the job is to be closed. */
  assignmentId: string;
  /** Indicates the outcome of the job, populate this field with your own custom values. */
  dispositionCode?: string;
  /**
   * If not provided, worker capacity is released immediately along with a JobClosedEvent notification.
   * If provided, worker capacity is released along with a JobClosedEvent notification at a future time.
   */
  closeTime?: Date;
  /** (Optional) A note that will be appended to the jobs' Notes collection with th current timestamp. */
  note?: string;
}

/** A paged collection of jobs. */
export interface JobCollection {
  value: PagedJob[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

/** A job returned from a pageable list */
export interface PagedJob {
  /**
   * The id of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Reference to an external parent context, eg. call ID. */
  channelReference?: string;
  /**
   * The state of the Job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly jobStatus?: JobStatus;
  /**
   * The time a job was queued.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enqueueTimeUtc?: Date;
  /** The channel identifier. eg. voice, chat, etc. */
  channelId?: string;
  /** The Id of the Classification policy used for classifying a job. */
  classificationPolicyId?: string;
  /** The Id of the Queue that this job is queued to. */
  queueId?: string;
  /** The priority of this job. */
  priority?: number;
  /** Reason code for cancelled or closed jobs. */
  dispositionCode?: string;
  /** A collection of manually specified label selectors, which a worker must satisfy in order to process this job. */
  requestedWorkerSelectors?: WorkerSelector[];
  /**
   * A collection of label selectors attached by a classification policy, which a worker must satisfy in order to process this job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly attachedWorkerSelectors?: WorkerSelector[];
  /** A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. */
  labels?: { [propertyName: string]: any };
  /**
   * A collection of the assignments of the job.
   * Key is AssignmentId.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assignments?: { [propertyName: string]: JobAssignment };
  /** A set of non-identifying attributes attached to this job */
  tags?: { [propertyName: string]: any };
  /** Notes attached to a job, sorted by timestamp */
  notes?: { [propertyName: string]: string };
}

/** Dto for JobPositionDetails. */
export interface JobPositionDetails {
  /** Id of the job these details are about. */
  jobId: string;
  /** Position of the job in question within that queue. */
  position: number;
  /** Id of the queue this job is enqueued in. */
  queueId: string;
  /** Length of the queue: total number of enqueued jobs. */
  queueLength: number;
  /** Estimated wait time of the job rounded up to the nearest minute */
  estimatedWaitTimeMinutes: number;
}

/** Response containing Id's for the worker, job, and assignment from an accepted offer */
export interface AcceptJobOfferResponse {
  /** The assignment Id that assigns a worker that has accepted an offer to a job. */
  assignmentId: string;
  /** The Id of the job assigned. */
  jobId: string;
  /** The Id of the worker that has been assigned this job. */
  workerId: string;
}

/** A queue that can contain jobs to be routed. */
export interface JobQueue {
  /**
   * The Id of this queue
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The name of this queue. */
  name?: string;
  /** The ID of the distribution policy that will determine how a job is distributed to workers. */
  distributionPolicyId: string;
  /** A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. */
  labels?: { [propertyName: string]: any };
  /** (Optional) The ID of the exception policy that determines various job escalation rules. */
  exceptionPolicyId?: string;
}

/** A paged collection of queues. */
export interface QueueCollection {
  value: PagedQueue[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

/** A queue returned from a pageable list */
export interface PagedQueue {
  /**
   * The Id of this queue
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The name of this queue. */
  name?: string;
  /** The ID of the distribution policy that will determine how a job is distributed to workers. */
  distributionPolicyId?: string;
  /** A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. */
  labels?: { [propertyName: string]: any };
  /** (Optional) The ID of the exception policy that determines various job escalation rules. */
  exceptionPolicyId?: string;
}

/** Statistics for the queue */
export interface QueueStatistics {
  /** Id of the queue these details are about. */
  queueId: string;
  /** Length of the queue: total number of enqueued jobs. */
  length: number;
  /** The estimated wait time of this queue rounded up to the nearest minute, grouped by job priority */
  estimatedWaitTimeMinutes?: { [propertyName: string]: number };
  /** The wait time of the job that has been enqueued in this queue for the longest. */
  longestJobWaitTimeMinutes?: number;
}

/** An entity for jobs to be routed to */
export interface RouterWorker {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly id?: string;
  /**
   * The current state of the worker.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: RouterWorkerState;
  /** The queue(s) that this worker can receive work from. */
  queueAssignments?: { [propertyName: string]: Record<string, unknown> };
  /** The total capacity score this worker has to manage multiple concurrent jobs. */
  totalCapacity?: number;
  /** A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. */
  labels?: { [propertyName: string]: any };
  /** A set of non-identifying attributes attached to this worker. */
  tags?: { [propertyName: string]: any };
  /** The channel(s) this worker can handle and their impact on the workers capacity. */
  channelConfigurations?: { [propertyName: string]: ChannelConfiguration };
  /**
   * A list of active offers issued to this worker.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly offers?: JobOffer[];
  /**
   * A list of assigned jobs attached to this worker.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assignedJobs?: WorkerAssignment[];
  /**
   * A value indicating the workers capacity. A value of '1' means all capacity is consumed. A value of '0' means no capacity is currently consumed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly loadRatio?: number;
  /** A flag indicating this worker is open to receive offers or not. */
  availableForOffers?: boolean;
}

/** Represents the capacity a job in this channel will consume from a worker */
export interface ChannelConfiguration {
  /** The amount of capacity that an instance of a job of this channel will consume of the total worker capacity. */
  capacityCostPerJob: number;
}

/** An offer of an assignment of work to a worker */
export interface JobOffer {
  /** The Id of the offer. */
  id: string;
  /** The Id of the job. */
  jobId: string;
  /** The capacity cost consumed by the job offer. */
  capacityCost: number;
  /** The time the offer was created. */
  offerTimeUtc?: Date;
  /** The time that the offer will expire. */
  expiryTimeUtc?: Date;
}

/** The assignment for a worker to a job */
export interface WorkerAssignment {
  /** The Id of the assignment. */
  id: string;
  /** The Id of the Job assigned. */
  jobId: string;
  /** The amount of capacity this assignment has consumed on the worker. */
  capacityCost: number;
  /** The assignment time of the job. */
  assignTime: Date;
}

/** A paged collection of workers. */
export interface WorkerCollection {
  value: PagedWorker[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

/** A worker returned from a pageable list */
export interface PagedWorker {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly id?: string;
  /**
   * The current state of the worker.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: PagedWorkerState;
  /** The queue(s) that this worker can receive work from. */
  queueAssignments?: { [propertyName: string]: Record<string, unknown> };
  /** The total capacity score this worker has to manage multiple concurrent jobs. */
  totalCapacity?: number;
  /** A set of key/value pairs that are identifying attributes used by the rules engines to make decisions. */
  labels?: { [propertyName: string]: any };
  /** A set of non-identifying attributes attached to this worker. */
  tags?: { [propertyName: string]: any };
  /** The channel(s) this worker can handle and their impact on the workers capacity. */
  channelConfigurations?: { [propertyName: string]: ChannelConfiguration };
  /**
   * A list of active offers issued to this worker.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly offers?: JobOffer[];
  /**
   * A list of assigned jobs attached to this worker.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assignedJobs?: WorkerAssignment[];
  /**
   * A value indicating the workers capacity. A value of '1' means all capacity is consumed. A value of '0' means no capacity is currently consumed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly loadRatio?: number;
  /** A flag indicating this worker is open to receive offers or not. */
  availableForOffers?: boolean;
}

/** Credentials used to access Azure function rule */
export interface AzureFunctionRuleCredential {
  /** (Optional) Access key scoped to a particular function */
  functionKey?: string;
  /**
   * (Optional) Access key scoped to a Azure Function app.
   * This key grants access to all functions under the app.
   */
  appKey?: string;
  /**
   * (Optional) Client id, when AppKey is provided
   * In context of Azure function, this is usually the name of the key
   */
  clientId?: string;
}

/** Encapsulates all options that can be passed as parameters for scoring rule with BestWorkerMode */
export interface ScoringRuleOptions {
  /** (Optional) Set batch size when AllowScoringBatchOfWorkers is set to true */
  batchSize?: number;
  /**
   * (Optional) List of extra parameters from the job that will be sent as part of the payload to scoring rule.
   * If not set, the job's labels (sent in the payload as `job`) and the job's worker selectors (sent in the payload as `selectors`)
   * are added to the payload of the scoring rule by default.
   * Note: Worker labels are always sent with scoring payload.
   */
  scoringParameters?: ScoringRuleParameterSelector[];
  /**
   * (Optional)
   * If set to true, will score workers in batches, and the parameter name of the worker labels will be sent as `workers`.
   * By default, set to false and the parameter name for the worker labels will be sent as `worker`.
   * Note: If enabled, use BatchSize to set batch size.
   */
  allowScoringBatchOfWorkers?: boolean;
  /**
   * (Optional)
   * If false, will sort scores by ascending order. By default, set to true.
   */
  descendingOrder?: boolean;
}

/** The action to take when the exception is triggered */
export interface ExceptionAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "cancel" | "manual-reclassify" | "reclassify";
}

/** Describes a condition that must be met against a set of labels for queue selection */
export interface QueueSelector {
  /** The label key to query against */
  key: string;
  /** Describes how the value of the label is compared to the value defined on the label selector */
  labelOperator: LabelOperator;
  /** The value to compare against the actual label value with the given operator */
  value?: Record<string, unknown>;
}

/** Contains the weight percentage and label selectors to be applied if selected for weighted distributions. */
export interface QueueWeightedAllocation {
  /** The percentage of this weight, expressed as a fraction of 1. */
  weight: number;
  /** A collection of label selectors that will be applied if this allocation is selected. */
  labelSelectors: QueueSelector[];
}

/**  Contains the weight percentage and label selectors to be applied if selected for weighted distributions. */
export interface WorkerWeightedAllocation {
  /** The percentage of this weight, expressed as a fraction of 1. */
  weight: number;
  /** A collection of label selectors that will be applied if this allocation is selected. */
  labelSelectors: WorkerSelector[];
}

/** Describes a set of label selectors that will be attached if the given condition resolves to true */
export interface ConditionalQueueSelector extends QueueSelectorAttachment {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "conditional";
  /**
   * A rule of one of the following types:
   *
   * StaticRule:  A rule providing static rules that always return the same result, regardless of input.
   * DirectMapRule:  A rule that return the same labels as the input labels.
   * ExpressionRule: A rule providing inline expression rules.
   * AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
   */
  condition: RouterRuleUnion;
  /** The label selectors to attach */
  labelSelectors: QueueSelector[];
}

/** Attaches a label selector where the value is pass through from the job label with the same key */
export interface PassThroughQueueSelector extends QueueSelectorAttachment {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "pass-through";
  /** The label key to query against */
  key: string;
  /** Describes how the value of the label is compared to the value pass through */
  labelOperator: LabelOperator;
}

/** Attaches labels to a worker when a RouterRule is resolved */
export interface RuleEngineQueueSelector extends QueueSelectorAttachment {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "rule-engine";
  /**
   * A rule of one of the following types:
   *
   * StaticRule:  A rule providing static rules that always return the same result, regardless of input.
   * DirectMapRule:  A rule that return the same labels as the input labels.
   * ExpressionRule: A rule providing inline expression rules.
   * AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
   */
  rule: RouterRuleUnion;
}

/** Describes a label selector that will always be attached */
export interface StaticQueueSelector extends QueueSelectorAttachment {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "static";
  /** Describes a condition that must be met against a set of labels for queue selection */
  labelSelector: QueueSelector;
}

/** Describes multiple sets of label selectors, of which one will be selected and attached according to a weighting */
export interface WeightedAllocationQueueSelector
  extends QueueSelectorAttachment {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "weighted-allocation-queue-selector";
  /** A collection of percentage based weighted allocations. */
  allocations: QueueWeightedAllocation[];
}

/** A rule providing a binding to an HTTP Triggered Azure Function. */
export interface AzureFunctionRule extends RouterRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "azure-function-rule";
  /** URL for Azure Function */
  functionUrl: string;
  /** Credentials used to access Azure function rule */
  credential?: AzureFunctionRuleCredential;
}

/** A rule that return the same labels as the input labels. */
export interface DirectMapRule extends RouterRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "direct-map-rule";
}

/** A rule providing inline expression rules. */
export interface ExpressionRule extends RouterRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "expression-rule";
  /** The expression language to compile to and execute */
  language: "powerFx";
  /** The string containing the expression to evaluate. Should contain return statement with calculated values. */
  expression: string;
}

/** A rule providing static rules that always return the same result, regardless of input. */
export interface StaticRule extends RouterRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "static-rule";
  /** The static value this rule always returns. */
  value?: Record<string, unknown>;
}

/** Describes a set of label selectors that will be attached if the given condition resolves to true */
export interface ConditionalWorkerSelector extends WorkerSelectorAttachment {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "conditional";
  /**
   * A rule of one of the following types:
   *
   * StaticRule:  A rule providing static rules that always return the same result, regardless of input.
   * DirectMapRule:  A rule that return the same labels as the input labels.
   * ExpressionRule: A rule providing inline expression rules.
   * AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
   */
  condition: RouterRuleUnion;
  /** The label selectors to attach */
  labelSelectors: WorkerSelector[];
}

/** Attaches a label selector where the value is pass through from the job label with the same key */
export interface PassThroughWorkerSelector extends WorkerSelectorAttachment {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "pass-through";
  /** The label key to query against */
  key: string;
  /** Describes how the value of the label is compared to the value pass through */
  labelOperator: LabelOperator;
  /** Describes how long the attached label selector is valid in seconds. */
  ttlSeconds?: number;
}

/** Attaches labels to a worker when a RouterRule is resolved */
export interface RuleEngineWorkerSelector extends WorkerSelectorAttachment {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "rule-engine";
  /**
   * A rule of one of the following types:
   *
   * StaticRule:  A rule providing static rules that always return the same result, regardless of input.
   * DirectMapRule:  A rule that return the same labels as the input labels.
   * ExpressionRule: A rule providing inline expression rules.
   * AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
   */
  rule: RouterRuleUnion;
}

/** Describes a label selector that will always be attached */
export interface StaticWorkerSelector extends WorkerSelectorAttachment {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "static";
  /** Describes a condition that must be met against a set of labels for worker selection */
  labelSelector: WorkerSelector;
}

/** Describes multiple sets of label selectors, of which one will be selected and attached according to a weighting */
export interface WeightedAllocationWorkerSelector
  extends WorkerSelectorAttachment {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "weighted-allocation-worker-selector";
  /** A collection of percentage based weighted allocations. */
  allocations: WorkerWeightedAllocation[];
}

/** Jobs are distributed to the worker with the strongest abilities available. */
export interface BestWorkerMode extends DistributionMode {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "best-worker";
  /**
   * A rule of one of the following types:
   *
   * StaticRule:  A rule providing static rules that always return the same result, regardless of input.
   * DirectMapRule:  A rule that return the same labels as the input labels.
   * ExpressionRule: A rule providing inline expression rules.
   * AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
   */
  scoringRule?: RouterRuleUnion;
  /** Encapsulates all options that can be passed as parameters for scoring rule with BestWorkerMode */
  scoringRuleOptions?: ScoringRuleOptions;
}

/** Jobs are directed to the worker who has been idle longest. */
export interface LongestIdleMode extends DistributionMode {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "longest-idle";
}

/** Jobs are distributed in order to workers, starting with the worker that is after the last worker to receive a job. */
export interface RoundRobinMode extends DistributionMode {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "round-robin";
}

/** Trigger for an exception action on exceeding queue length */
export interface QueueLengthExceptionTrigger extends JobExceptionTrigger {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "queue-length";
  /** Threshold of number of jobs ahead in the queue to for this trigger to fire. */
  threshold: number;
}

/** Trigger for an exception action on exceeding wait time */
export interface WaitTimeExceptionTrigger extends JobExceptionTrigger {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "wait-time";
  /** Threshold for wait time for this trigger. Requires input conforming to ISO8601 duration format. */
  threshold: string;
}

/** An action that marks a job as cancelled */
export interface CancelExceptionAction extends ExceptionAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "cancel";
  /** (Optional) A note that will be appended to the jobs' Notes collection with th current timestamp. */
  note?: string;
  /** (Optional) Indicates the outcome of the job, populate this field with your own custom values. */
  dispositionCode?: string;
}

/** An action that manually reclassifies a job by providing the queue, priority and worker selectors. */
export interface ManualReclassifyExceptionAction extends ExceptionAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "manual-reclassify";
  /** Updated QueueId. */
  queueId?: string;
  /** Updated Priority. */
  priority?: number;
  /** Updated WorkerSelectors. */
  workerSelectors?: WorkerSelector[];
}

/** An action that modifies labels on a job and then reclassifies it */
export interface ReclassifyExceptionAction extends ExceptionAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "reclassify";
  /** (optional) The new classification policy that will determine queue, priority and worker selectors. */
  classificationPolicyId?: string;
  /** (optional) Dictionary containing the labels to update (or add if not existing) in key-value pairs */
  labelsToUpsert?: { [propertyName: string]: any };
}

/** Known values of {@link RouterWorkerState} that the service accepts. */
export enum KnownRouterWorkerState {
  /** Active */
  Active = "active",
  /** Draining */
  Draining = "draining",
  /** Inactive */
  Inactive = "inactive"
}

/**
 * Defines values for RouterWorkerState. \
 * {@link KnownRouterWorkerState} can be used interchangeably with RouterWorkerState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **active** \
 * **draining** \
 * **inactive**
 */
export type RouterWorkerState = string;

/** Known values of {@link PagedWorkerState} that the service accepts. */
export enum KnownPagedWorkerState {
  /** Active */
  Active = "active",
  /** Draining */
  Draining = "draining",
  /** Inactive */
  Inactive = "inactive"
}

/**
 * Defines values for PagedWorkerState. \
 * {@link KnownPagedWorkerState} can be used interchangeably with PagedWorkerState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **active** \
 * **draining** \
 * **inactive**
 */
export type PagedWorkerState = string;
/** Defines values for JobStatus. */
export type JobStatus =
  | "pendingClassification"
  | "queued"
  | "assigned"
  | "completed"
  | "closed"
  | "cancelled"
  | "classificationFailed"
  | "created";
/** Defines values for LabelOperator. */
export type LabelOperator =
  | "equal"
  | "notEqual"
  | "lessThan"
  | "lessThanEqual"
  | "greaterThan"
  | "greaterThanEqual";
/** Defines values for JobStateSelector. */
export type JobStateSelector =
  | "all"
  | "pendingClassification"
  | "queued"
  | "assigned"
  | "completed"
  | "closed"
  | "cancelled"
  | "classificationFailed"
  | "active";
/** Defines values for WorkerStateSelector. */
export type WorkerStateSelector = "active" | "draining" | "inactive" | "all";
/** Defines values for ScoringRuleParameterSelector. */
export type ScoringRuleParameterSelector = "jobLabels" | "workerSelectors";

/** Optional parameters. */
export interface JobRouterUpsertClassificationPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the upsertClassificationPolicy operation. */
export type JobRouterUpsertClassificationPolicyResponse = ClassificationPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ClassificationPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterGetClassificationPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getClassificationPolicy operation. */
export type JobRouterGetClassificationPolicyResponse = ClassificationPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ClassificationPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterDeleteClassificationPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface JobRouterListClassificationPoliciesOptionalParams
  extends coreHttp.OperationOptions {
  /** Maximum page size */
  maxpagesize?: number;
}

/** Contains response data for the listClassificationPolicies operation. */
export type JobRouterListClassificationPoliciesResponse = ClassificationPolicyCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ClassificationPolicyCollection;
  };
};

/** Optional parameters. */
export interface JobRouterUpsertDistributionPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the upsertDistributionPolicy operation. */
export type JobRouterUpsertDistributionPolicyResponse = DistributionPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DistributionPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterGetDistributionPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getDistributionPolicy operation. */
export type JobRouterGetDistributionPolicyResponse = DistributionPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DistributionPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterDeleteDistributionPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface JobRouterListDistributionPoliciesOptionalParams
  extends coreHttp.OperationOptions {
  /** Maximum page size */
  maxpagesize?: number;
}

/** Contains response data for the listDistributionPolicies operation. */
export type JobRouterListDistributionPoliciesResponse = DistributionPolicyCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DistributionPolicyCollection;
  };
};

/** Optional parameters. */
export interface JobRouterUpsertExceptionPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the upsertExceptionPolicy operation. */
export type JobRouterUpsertExceptionPolicyResponse = ExceptionPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ExceptionPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterGetExceptionPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getExceptionPolicy operation. */
export type JobRouterGetExceptionPolicyResponse = ExceptionPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ExceptionPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterDeleteExceptionPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface JobRouterListExceptionPoliciesOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxpagesize?: number;
}

/** Contains response data for the listExceptionPolicies operation. */
export type JobRouterListExceptionPoliciesResponse = ExceptionPolicyCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ExceptionPolicyCollection;
  };
};

/** Optional parameters. */
export interface JobRouterUpsertJobOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the upsertJob operation. */
export type JobRouterUpsertJobResponse = RouterJob & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: RouterJob;
  };
};

/** Optional parameters. */
export interface JobRouterGetJobOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getJob operation. */
export type JobRouterGetJobResponse = RouterJob & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: RouterJob;
  };
};

/** Optional parameters. */
export interface JobRouterDeleteJobOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface JobRouterReclassifyJobActionOptionalParams
  extends coreHttp.OperationOptions {
  /** Request object for reclassifying a job */
  reclassifyJobRequest?: Record<string, unknown>;
}

/** Contains response data for the reclassifyJobAction operation. */
export type JobRouterReclassifyJobActionResponse = Record<string, unknown> & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Record<string, unknown>;
  };
};

/** Optional parameters. */
export interface JobRouterCancelJobActionOptionalParams
  extends coreHttp.OperationOptions {
  /** (Optional) A note that will be appended to the jobs' Notes collection with th current timestamp. */
  note?: string;
  /**
   * Indicates the outcome of the job, populate this field with your own custom values.
   * If not provided, default value of "Cancelled" is set.
   */
  dispositionCode?: string;
}

/** Contains response data for the cancelJobAction operation. */
export type JobRouterCancelJobActionResponse = Record<string, unknown> & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Record<string, unknown>;
  };
};

/** Optional parameters. */
export interface JobRouterCompleteJobActionOptionalParams
  extends coreHttp.OperationOptions {
  /** (Optional) A note that will be appended to the jobs' Notes collection with th current timestamp. */
  note?: string;
}

/** Contains response data for the completeJobAction operation. */
export type JobRouterCompleteJobActionResponse = Record<string, unknown> & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Record<string, unknown>;
  };
};

/** Optional parameters. */
export interface JobRouterCloseJobActionOptionalParams
  extends coreHttp.OperationOptions {
  /** Indicates the outcome of the job, populate this field with your own custom values. */
  dispositionCode?: string;
  /**
   * If not provided, worker capacity is released immediately along with a JobClosedEvent notification.
   * If provided, worker capacity is released along with a JobClosedEvent notification at a future time.
   */
  closeTime?: Date;
  /** (Optional) A note that will be appended to the jobs' Notes collection with th current timestamp. */
  note?: string;
}

/** Contains response data for the closeJobAction operation. */
export type JobRouterCloseJobActionResponse = Record<string, unknown> & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Record<string, unknown>;
  };
};

/** Optional parameters. */
export interface JobRouterListJobsOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxpagesize?: number;
  /** (Optional) If specified, filter jobs by status. */
  status?: JobStateSelector;
  /** (Optional) If specified, filter jobs by queue. */
  queueId?: string;
  /** (Optional) If specified, filter jobs by channel. */
  channelId?: string;
}

/** Contains response data for the listJobs operation. */
export type JobRouterListJobsResponse = JobCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: JobCollection;
  };
};

/** Optional parameters. */
export interface JobRouterGetInQueuePositionOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getInQueuePosition operation. */
export type JobRouterGetInQueuePositionResponse = JobPositionDetails & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: JobPositionDetails;
  };
};

/** Optional parameters. */
export interface JobRouterAcceptJobActionOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the acceptJobAction operation. */
export type JobRouterAcceptJobActionResponse = AcceptJobOfferResponse & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: AcceptJobOfferResponse;
  };
};

/** Optional parameters. */
export interface JobRouterDeclineJobActionOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the declineJobAction operation. */
export type JobRouterDeclineJobActionResponse = Record<string, unknown> & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: Record<string, unknown>;
  };
};

/** Optional parameters. */
export interface JobRouterUpsertQueueOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the upsertQueue operation. */
export type JobRouterUpsertQueueResponse = JobQueue & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: JobQueue;
  };
};

/** Optional parameters. */
export interface JobRouterGetQueueOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getQueue operation. */
export type JobRouterGetQueueResponse = JobQueue & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: JobQueue;
  };
};

/** Optional parameters. */
export interface JobRouterDeleteQueueOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface JobRouterListQueuesOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxpagesize?: number;
}

/** Contains response data for the listQueues operation. */
export type JobRouterListQueuesResponse = QueueCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: QueueCollection;
  };
};

/** Optional parameters. */
export interface JobRouterGetQueueStatisticsOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getQueueStatistics operation. */
export type JobRouterGetQueueStatisticsResponse = QueueStatistics & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: QueueStatistics;
  };
};

/** Optional parameters. */
export interface JobRouterUpsertWorkerOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the upsertWorker operation. */
export type JobRouterUpsertWorkerResponse = RouterWorker & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: RouterWorker;
  };
};

/** Optional parameters. */
export interface JobRouterGetWorkerOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getWorker operation. */
export type JobRouterGetWorkerResponse = RouterWorker & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: RouterWorker;
  };
};

/** Optional parameters. */
export interface JobRouterDeleteWorkerOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface JobRouterListWorkersOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxpagesize?: number;
  /** (Optional) If specified, select workers who are assigned to this queue */
  queueId?: string;
  /** (Optional) If specified, select workers who have a channel configuration with this channel */
  channelId?: string;
  /** (Optional) If specified, select workers by worker status. */
  status?: WorkerStateSelector;
  /**
   * (Optional) If set to true, select only workers who have capacity for the channel specified by `channelId` or for any channel
   *             if `channelId` not specified. If set to false, then will return all workers including workers without any capacity for jobs. Defaults to false.
   */
  hasCapacity?: boolean;
}

/** Contains response data for the listWorkers operation. */
export type JobRouterListWorkersResponse = WorkerCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: WorkerCollection;
  };
};

/** Optional parameters. */
export interface JobRouterListClassificationPoliciesNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Maximum page size */
  maxpagesize?: number;
}

/** Contains response data for the listClassificationPoliciesNext operation. */
export type JobRouterListClassificationPoliciesNextResponse = ClassificationPolicyCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ClassificationPolicyCollection;
  };
};

/** Optional parameters. */
export interface JobRouterListDistributionPoliciesNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Maximum page size */
  maxpagesize?: number;
}

/** Contains response data for the listDistributionPoliciesNext operation. */
export type JobRouterListDistributionPoliciesNextResponse = DistributionPolicyCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DistributionPolicyCollection;
  };
};

/** Optional parameters. */
export interface JobRouterListExceptionPoliciesNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxpagesize?: number;
}

/** Contains response data for the listExceptionPoliciesNext operation. */
export type JobRouterListExceptionPoliciesNextResponse = ExceptionPolicyCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ExceptionPolicyCollection;
  };
};

/** Optional parameters. */
export interface JobRouterListJobsNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxpagesize?: number;
  /** (Optional) If specified, filter jobs by status. */
  status?: JobStateSelector;
  /** (Optional) If specified, filter jobs by queue. */
  queueId?: string;
  /** (Optional) If specified, filter jobs by channel. */
  channelId?: string;
}

/** Contains response data for the listJobsNext operation. */
export type JobRouterListJobsNextResponse = JobCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: JobCollection;
  };
};

/** Optional parameters. */
export interface JobRouterListQueuesNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxpagesize?: number;
}

/** Contains response data for the listQueuesNext operation. */
export type JobRouterListQueuesNextResponse = QueueCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: QueueCollection;
  };
};

/** Optional parameters. */
export interface JobRouterListWorkersNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxpagesize?: number;
  /** (Optional) If specified, select workers who are assigned to this queue */
  queueId?: string;
  /** (Optional) If specified, select workers who have a channel configuration with this channel */
  channelId?: string;
  /** (Optional) If specified, select workers by worker status. */
  status?: WorkerStateSelector;
  /**
   * (Optional) If set to true, select only workers who have capacity for the channel specified by `channelId` or for any channel
   *             if `channelId` not specified. If set to false, then will return all workers including workers without any capacity for jobs. Defaults to false.
   */
  hasCapacity?: boolean;
}

/** Contains response data for the listWorkersNext operation. */
export type JobRouterListWorkersNextResponse = WorkerCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: WorkerCollection;
  };
};

/** Optional parameters. */
export interface JobRouterApiClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
