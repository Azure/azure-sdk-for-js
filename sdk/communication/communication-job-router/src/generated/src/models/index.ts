/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export type LabelSelectorAttachmentUnion =
  | LabelSelectorAttachment
  | ConditionalLabelSelector
  | PassThroughLabelSelector
  | RuleLabelSelector
  | StaticLabelSelector
  | WeightedAllocationLabelSelector;
export type RouterRuleUnion =
  | RouterRule
  | AzureFunctionRule
  | DirectMapRule
  | ExpressionRule
  | StaticRule;
export type DistributionModeUnion =
  | DistributionMode
  | BestWorkerMode
  | LongestIdleMode
  | RoundRobinMode;
export type JobExceptionTriggerUnion =
  | JobExceptionTrigger
  | QueueLengthExceptionTrigger
  | WaitTimeExceptionTrigger;
export type ExceptionActionUnion =
  | ExceptionAction
  | CancelExceptionAction
  | ManualReclassifyExceptionAction
  | ReclassifyExceptionAction;

/** Request payload for creating or updating a Classification Policy */
export interface CreateClassificationPolicyRequest {
  /** Friendly name of this policy. */
  name?: string;
  /** The fallback queue to select if the queue selector doesn't find a match. */
  fallbackQueueId?: string;
  /** The queue selectors to resolve a queue for a given job. */
  queueSelectors?: LabelSelectorAttachmentUnion[];
  /** The rule to determine a priority score for a given job. */
  prioritizationRule?: RouterRuleUnion;
  /** The worker label selectors to attach to a given job. */
  workerSelectors?: LabelSelectorAttachmentUnion[];
}

export interface LabelSelectorAttachment {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind:
    | "conditional"
    | "pass-through"
    | "rule"
    | "static"
    | "weighted-allocation";
}

export interface RouterRule {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind:
    | "azure-function-rule"
    | "direct-map-rule"
    | "expression-rule"
    | "static-rule";
}

/** A container for the rules that govern how jobs are classified. */
export interface ClassificationPolicy {
  /**
   * The unique identifier of the policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Friendly name of this policy. */
  name?: string;
  /** The fallback queue to select if the queue selector doesn't find a match. */
  fallbackQueueId?: string;
  /** The queue selectors to resolve a queue for a given job. */
  queueSelectors?: LabelSelectorAttachmentUnion[];
  /** The rule to determine a priority score for a given job. */
  prioritizationRule?: RouterRuleUnion;
  /** The worker label selectors to attach to a given job. */
  workerSelectors?: LabelSelectorAttachmentUnion[];
}

export interface CommunicationErrorResponse {
  communicationError: CommunicationError;
}

export interface CommunicationError {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly code?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly message?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly target?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly details?: CommunicationError[];
}

/** A paged collection of classification policies. */
export interface ClassificationPolicyCollection {
  value: PagedClassificationPolicy[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

export interface PagedClassificationPolicy {
  /** Unique identifier of this policy. */
  id: string;
  /** Friendly name of this policy. */
  name?: string;
  /** The fallback queue to select if the queue selector doesn't find a match. */
  fallbackQueueId?: string;
  /** The queue selectors to resolve a queue for a given job. */
  queueSelectors?: LabelSelectorAttachmentUnion[];
  /** The rule to determine a priority score for a given job. */
  prioritizationRule?: RouterRuleUnion;
  /** The worker label selectors to attach to a given job. */
  workerSelectors?: LabelSelectorAttachmentUnion[];
}

/** Policy governing how jobs are distributed to workers */
export interface DistributionPolicy {
  /**
   * The unique identifier of the policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The human readable name of the policy. */
  name?: string;
  /** The expiry time of any offers created under this policy will be governed by the offer time to live. Requires input conforming to ISO8601 duration format. */
  offerTTL: string;
  /** The policy governing the specific distribution method. */
  mode: DistributionModeUnion;
}

/** Abstract base class for defining a distribution mode */
export interface DistributionMode {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "best-worker" | "longest-idle" | "round-robin";
  /** Governs the minimum desired number of active concurrent offers a job can have. */
  minConcurrentOffers: number;
  /** Governs the maximum number of active concurrent offers a job can have. */
  maxConcurrentOffers: number;
  /**
   * (Optional)
   * If set to true, then router will match workers to jobs even if they don't match label selectors.
   * Warning: You may get workers that are not qualified for the job they are matched with if you set this
   * variable to true. This flag is intended more for temporary usage.
   * By default, set to false.
   */
  bypassSelectors?: boolean;
}

/** A paged collection of distribution policies. */
export interface DistributionPolicyCollection {
  value: PagedDistributionPolicy[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

export interface PagedDistributionPolicy {
  /**
   * The unique identifier of the policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The human readable name of the policy. */
  name?: string;
  /** The expiry time of any offers created under this policy will be governed by the offer time to live. Requires input conforming to ISO8601 duration format. */
  offerTTL: string;
  /** The policy governing the specific distribution method. */
  mode: DistributionModeUnion;
}

/** A single exception policy */
export interface ExceptionPolicy {
  /**
   * The Id of the exception policy
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** (Optional) The name of the exception policy. */
  name?: string;
  /** (Optional) A dictionary collection of exception rules on the exception policy. Key is the Id of each exception rule. */
  exceptionRules?: { [propertyName: string]: ExceptionRule };
}

/** A single exception rule */
export interface ExceptionRule {
  /** The exception trigger for this exception rule */
  trigger: JobExceptionTriggerUnion;
  /** A dictionary collection of actions to perform once the exception is triggered. Key is the Id of each exception action. */
  actions: { [propertyName: string]: any };
}

/** The trigger for this exception rule */
export interface JobExceptionTrigger {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "queue-length" | "wait-time";
}

/** A paged collection of exception policies. */
export interface ExceptionPolicyCollection {
  value: PagedExceptionPolicy[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

export interface PagedExceptionPolicy {
  /**
   * The Id of the exception policy
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** (Optional) The name of the exception policy. */
  name?: string;
  /** (Optional) A dictionary collection of exception rules on the exception policy. Key is the Id of each exception rule. */
  exceptionRules?: { [propertyName: string]: ExceptionRule };
}

/** A unit of work to be routed */
export interface RouterJob {
  /**
   * The id of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Reference to an external parent context, eg. call ID. */
  channelReference?: string;
  /**
   * The state of the Job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly jobStatus?: JobStatus;
  /**
   * The time a job was queued.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enqueueTimeUtc?: Date;
  /** The channel or modality upon which this job will be executed. */
  channelId: string;
  /** The Id of the Classification policy used for classifying a job. */
  classificationPolicyId?: string;
  /** The Id of the Queue that a job is queued to. */
  queueId?: string;
  /** The priority of this job. */
  priority?: number;
  /** Reason code for cancelled or closed jobs. */
  dispositionCode?: string;
  /** A collection of manually specified label selectors, which a worker must satisfy in order to process this job. */
  requestedWorkerSelectors?: LabelSelector[];
  /**
   * A collection of label selectors attached by a classification policy, which a worker must satisfy in order to process this job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly attachedWorkerSelectors?: LabelSelector[];
  /** A set of key/value pairs used by the classification process to determine queue, priority and attach label selectors. */
  labels?: { [propertyName: string]: any };
  /**
   * A collection of the assignments of the job.
   * Key is AssignmentId.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assignments?: { [propertyName: string]: JobAssignment };
  /** A set of key/value pairs that can be used for storing non-routing related data. */
  tags?: { [propertyName: string]: any };
  /** Generic text notes attached to a job, sorted by timestamp */
  notes?: { [propertyName: string]: string };
}

/** Describes a condition that must be met against a set of labels */
export interface LabelSelector {
  /** The label key to query against */
  key: string;
  /** Describes how the value of the label is compared to the value defined on the label selector */
  operator: LabelOperator;
  /** The value to compare against the actual label value with the given operator */
  value?: any;
  /** Describes how long this label selector is valid. Requires input conforming to ISO8601 duration format. */
  ttl?: string;
}

export interface JobAssignment {
  /** The Id of the job assignment. */
  id: string;
  /** The Id of the Worker assigned to the job. */
  workerId?: string;
  /** The Assignment time of the job. */
  assignTime: Date;
  /** The time the job was marked as completed after being assigned. */
  completeTime?: Date;
  /** The time the job was marked as closed after being completed. */
  closeTime?: Date;
}

/** A paged collection of jobs. */
export interface JobCollection {
  value: PagedJob[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

export interface PagedJob {
  /**
   * The id of the job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** Reference to an external parent context, eg. call ID. */
  channelReference?: string;
  /**
   * The state of the Job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly jobStatus?: JobStatus;
  /**
   * The time a job was queued.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly enqueueTimeUtc?: Date;
  /** The channel or modality upon which this job will be executed. */
  channelId: string;
  /** The Id of the Classification policy used for classifying a job. */
  classificationPolicyId?: string;
  /** The Id of the Queue that a job is queued to. */
  queueId?: string;
  /** The priority of this job. */
  priority?: number;
  /** Reason code for cancelled or closed jobs. */
  dispositionCode?: string;
  /** A collection of manually specified label selectors, which a worker must satisfy in order to process this job. */
  requestedWorkerSelectors?: LabelSelector[];
  /**
   * A collection of label selectors attached by a classification policy, which a worker must satisfy in order to process this job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly attachedWorkerSelectors?: LabelSelector[];
  /** A set of key/value pairs used by the classification process to determine queue, priority and attach label selectors. */
  labels?: { [propertyName: string]: any };
  /**
   * A collection of the assignments of the job.
   * Key is AssignmentId.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assignments?: { [propertyName: string]: JobAssignment };
  /** A set of key/value pairs that can be used for storing non-routing related data. */
  tags?: { [propertyName: string]: any };
  /** Generic text notes attached to a job, sorted by timestamp */
  notes?: { [propertyName: string]: string };
}

/** Request payload for deleting a job */
export interface CancelJobRequest {
  /** (Optional) Customer supplied note, e.g., cancellation reason. */
  note?: string;
  /**
   * (Optional) Customer supplied disposition code for specifying any short label
   * If not provided, default value of "CancelledByUser" is set.
   */
  dispositionCode?: string;
}

/** Request payload for completing jobs */
export interface CompleteJobRequest {
  /** The assignment within the job to complete. */
  assignmentId: string;
  /** (Optional) Customer supplied note. */
  note?: string;
}

/** Request payload for completing jobs */
export interface CloseJobRequest {
  /** The assignment within which the job is to be closed. */
  assignmentId: string;
  /** Indicates the outcome of the job, populate this field with your own custom values. */
  dispositionCode?: string;
  /**
   * If not provided, capacity will be released immediately.
   * If provided, the future time at which to release the capacity.
   */
  releaseTime?: Date;
  /** (Optional) Customer supplied note. */
  note?: string;
}

/** Dto for JobPositionDetails. */
export interface JobPositionDetails {
  /** Id of the job these details are about. */
  jobId: string;
  /** Position of the job in question within that queue. */
  position: number;
  /** Id of the queue this job is enqueued in. */
  queueId: string;
  /** Length of the queue: total number of enqueued jobs. */
  queueLength: number;
}

export interface AcceptJobOfferResponse {
  /** The assignment Id that assigns a worker that has accepted an offer to a job. */
  assignmentId: string;
  /** The Id of the job assigned. */
  jobId: string;
  /** The Id of the worker that has been assigned this job. */
  workerId: string;
}

/** A queue that can contain jobs to be routed. */
export interface JobQueue {
  /**
   * The Id of this queue
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The name of this queue. */
  name?: string;
  /** The ID of the distribution policy that will determine how a job is distributed to workers. */
  distributionPolicyId: string;
  /** (Optional) A set of key/value pairs used by the classification process to determine queue to assign a job. */
  labels?: { [propertyName: string]: any };
  /** (Optional) The ID of the exception policy that determines various job escalation rules. */
  exceptionPolicyId?: string;
}

/** A paged collection of queues. */
export interface QueueCollection {
  value: PagedQueue[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

export interface PagedQueue {
  /**
   * The Id of this queue
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The name of this queue. */
  name?: string;
  /** The ID of the distribution policy that will determine how a job is distributed to workers. */
  distributionPolicyId: string;
  /** (Optional) A set of key/value pairs used by the classification process to determine queue to assign a job. */
  labels?: { [propertyName: string]: any };
  /** (Optional) The ID of the exception policy that determines various job escalation rules. */
  exceptionPolicyId?: string;
}

/** Request payload for registering workers. */
export interface RegisterWorkerRequest {
  /** Unique key that identifies this worker. */
  id: string;
  /** A dictionary collection of the queues assignments for this worker. Key is the Id of each queue. */
  queueAssignments?: { [propertyName: string]: any };
  /** Total score that can be consumed by offers and assignments under this worker. */
  totalCapacity: number;
  /** A set of properties of this worker that are used to determine if it matches a set on label selectors. */
  labels?: { [propertyName: string]: any };
  /** A dictionary collection of channel configurations that define how the worker can do concurrent work per channel. Key is the Id of each channel. */
  channelConfigurations?: { [propertyName: string]: ChannelConfiguration };
}

export interface ChannelConfiguration {
  /** The amount of capacity that an instance of a job of this channel will consume of the total worker capacity. */
  capacityCostPerJob: number;
}

export interface RouterWorker {
  id: string;
  state: WorkerState;
  /** Dictionary of <any> */
  queueAssignments?: { [propertyName: string]: any };
  totalCapacity: number;
  /** Dictionary of <any> */
  labels?: { [propertyName: string]: any };
  /** Dictionary of <ChannelConfiguration> */
  channelConfigurations?: { [propertyName: string]: ChannelConfiguration };
  offers?: JobOffer[];
  assignedJobs?: WorkerAssignment[];
  loadRatio: number;
}

export interface JobOffer {
  /** The Id of the offer. */
  id: string;
  /** The Id of the job assigned. */
  jobId: string;
  /** The capacity cost consumed by the job offer. */
  capacityCost: number;
  /** The time the offer was created. */
  offerTimeUtc?: Date;
  /** The time that indicates when the offer will expire. */
  expiryTimeUtc?: Date;
}

export interface WorkerAssignment {
  /** The Id of the assignment. */
  id: string;
  /** The Id of the Job assigned. */
  jobId: string;
  /** The amount of capacity this assignment has consumed for a worker. */
  capacityCost: number;
  /** The Assignment time of the job. */
  assignTime: Date;
}

/** A paged collection of workers. */
export interface WorkerCollection {
  value: PagedWorker[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

export interface PagedWorker {
  id: string;
  state: WorkerState;
  /** Dictionary of <any> */
  queueAssignments?: { [propertyName: string]: any };
  totalCapacity: number;
  /** Dictionary of <any> */
  labels?: { [propertyName: string]: any };
  /** Dictionary of <ChannelConfiguration> */
  channelConfigurations?: { [propertyName: string]: ChannelConfiguration };
  offers?: JobOffer[];
  assignedJobs?: WorkerAssignment[];
  loadRatio: number;
}

export interface ReleaseAssignmentRequest {
  /**
   * If not provided, capacity will be released immediately.
   * If provided, the future time at which to release the capacity.
   */
  releaseTime?: Date;
}

/** Credentials used to access Azure function rule */
export interface AzureFunctionRuleCredential {
  /** (Optional) Access key scoped to a particular function */
  functionKey?: string;
  /**
   * (Optional) Access key scoped to a Azure Function app.
   * This key grants access to all functions under the app.
   */
  appKey?: string;
  /**
   * (Optional) Client id, when AppKey is provided
   * In context of Azure function, this is usually the name of the key
   */
  clientId?: string;
}

/** Encapsulates all options that can be passed as parameters for scoring rule with BestWorkerMode */
export interface ScoringRuleOptions {
  /** (Optional) Set batch size when AllowScoringBatchOfWorkers is set to true */
  batchSize?: number;
  /**
   * (Optional) List of extra parameters from the job that will be sent as part of the payload to scoring rule.
   * If not set, the job's labels (sent in the payload as `job`) and the job's worker selectors (sent in the payload as `selectors`)
   * are added to the payload of the scoring rule by default.
   * Note: Worker labels are always sent with scoring payload.
   */
  scoringParameters?: ScoringRuleParameterSelector[];
  /**
   * (Optional)
   * If set to true, will score workers in batches, and the parameter name of the worker labels will be sent as `workers`.
   * By default, set to false and the parameter name for the worker labels will be sent as `worker`.
   * Note: If enabled, use BatchSize to set batch size.
   */
  allowScoringBatchOfWorkers?: boolean;
  /**
   * (Optional)
   * If false, will sort scores by ascending order. By default, set to true.
   */
  descendingOrder?: boolean;
}

/** The action to take when the exception is triggered */
export interface ExceptionAction {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "cancel" | "manual-reclassify" | "reclassify";
}

export interface RepeatabilityHeaders {
  repeatabilityRequestId?: string;
  repeatabilityFirstSent?: string;
}

/** A percentage based allocation. */
export interface WeightedAllocation {
  /** The percentage of this weight, expressed as a fraction of 1. */
  weight: number;
  /** A collection of label selectors that will be applied if this allocation is selected. */
  labelSelectors: LabelSelector[];
}

/** Describes a set of label selectors that will be attached if the given condition resolves to true */
export type ConditionalLabelSelector = LabelSelectorAttachment & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "conditional";
  /** The condition that must be true for the label selectors to be attached */
  condition: RouterRuleUnion;
  /** The label selectors to attach */
  labelSelectors: LabelSelector[];
};

/** Attaches a label selector where the value is pass through from the job label with the same key */
export type PassThroughLabelSelector = LabelSelectorAttachment & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "pass-through";
  /** The label key to query against */
  key: string;
  /** Describes how the value of the label is compared to the value pass through */
  operator: LabelOperator;
  /** Describes how long the attached label selector is valid. Requires input conforming to ISO8601 duration format. */
  ttl?: string;
};

export type RuleLabelSelector = LabelSelectorAttachment & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "rule";
  /** A RouterRule that resolves a collection of LabelSelector to attach */
  rule: RouterRuleUnion;
};

/** Describes a label selector that will always be attached */
export type StaticLabelSelector = LabelSelectorAttachment & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "static";
  /** Describes a condition that must be met against a set of labels */
  labelSelector: LabelSelector;
};

/** Describes multiple sets of label selectors, of which one will be selected and attached according to a weighting */
export type WeightedAllocationLabelSelector = LabelSelectorAttachment & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "weighted-allocation";
  /** A collection of percentage based weighted allocations. */
  allocations: WeightedAllocation[];
};

/** A rule providing a binding to an HTTP Triggered Azure Function. */
export type AzureFunctionRule = RouterRule & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "azure-function-rule";
  /** URL for Azure Function */
  functionUrl: string;
  /** Credentials used to access Azure function rule */
  credential?: AzureFunctionRuleCredential;
};

/** A rule that return the same labels as the input labels. */
export type DirectMapRule = RouterRule & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "direct-map-rule";
};

/** A rule providing inline expression rules. */
export type ExpressionRule = RouterRule & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "expression-rule";
  /** The expression language to compile to and execute */
  language: "powerFx";
  /** The string containing the expression to evaluate. Should contain return statement with calculated values. */
  expression: string;
};

/** A rule providing static rules that always return the same result, regardless of input. */
export type StaticRule = RouterRule & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "static-rule";
  /** The static value this rule always returns. */
  value?: any;
};

/** Jobs are distributed to the worker with the strongest abilities available. */
export type BestWorkerMode = DistributionMode & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "best-worker";
  /**
   * (Optional)
   * Define a scoring rule to use, when calculating a score to determine the best worker.
   * If not set, will use a default scoring formula that uses the number of job labels that the worker
   * labels match, as well as the number of label selectors the worker labels match and/or exceed
   * using a logistic function (https://en.wikipedia.org/wiki/Logistic_function).
   */
  scoringRule?: RouterRuleUnion;
  /** Encapsulates all options that can be passed as parameters for scoring rule with BestWorkerMode */
  scoringRuleOptions?: ScoringRuleOptions;
};

/** Jobs are directed to the worker who has been idle longest. */
export type LongestIdleMode = DistributionMode & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "longest-idle";
};

/** Jobs are distributed in order to workers, starting with the worker that is after the last worker to receive a job. */
export type RoundRobinMode = DistributionMode & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "round-robin";
};

/** Trigger for an exception action on exceeding queue length */
export type QueueLengthExceptionTrigger = JobExceptionTrigger & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "queue-length";
  /** Threshold of number of jobs queued to for this trigger */
  threshold: number;
};

/** Trigger for an exception action on exceeding wait time */
export type WaitTimeExceptionTrigger = JobExceptionTrigger & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "wait-time";
  /** Threshold for wait time for this trigger. Requires input conforming to ISO8601 duration format. */
  threshold: string;
};

/** An action that marks a job as cancelled */
export type CancelExceptionAction = ExceptionAction & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "cancel";
  /** (Optional) Customer supplied note, e.g., cancellation reason. */
  note?: string;
  /** (Optional) Customer supplied disposition code for specifying any short label */
  dispositionCode?: string;
};

/** An action that manually reclassifies a job by providing the queue, priority and worker selectors. */
export type ManualReclassifyExceptionAction = ExceptionAction & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "manual-reclassify";
  /** Updated QueueId. */
  queueId?: string;
  /** Updated Priority. */
  priority?: number;
  /** Updated WorkerSelectors. */
  workerSelectors?: LabelSelector[];
};

/** An action that modifies labels on a job and then reclassifies it */
export type ReclassifyExceptionAction = ExceptionAction & {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "reclassify";
  /** (optional) The new classification policy that will determine queue, priority and worker selectors. */
  classificationPolicyId?: string;
  /** (optional) Dictionary containing the labels to update (or add if not existing) in key-value pairs */
  labelsToUpsert?: { [propertyName: string]: any };
};
/** Defines values for JobStatus. */
export type JobStatus =
  | "pendingClassification"
  | "queued"
  | "assigned"
  | "completed"
  | "closed"
  | "cancelled"
  | "classificationFailed";
/** Defines values for LabelOperator. */
export type LabelOperator =
  | "equal"
  | "notEqual"
  | "lessThan"
  | "lessThanEqual"
  | "greaterThan"
  | "greaterThanEqual";
/** Defines values for JobStateSelector. */
export type JobStateSelector =
  | "all"
  | "pendingClassification"
  | "queued"
  | "assigned"
  | "completed"
  | "closed"
  | "cancelled"
  | "classificationFailed"
  | "active";
/** Defines values for WorkerState. */
export type WorkerState = "active" | "draining" | "inactive";
/** Defines values for WorkerStateSelector. */
export type WorkerStateSelector = "active" | "draining" | "inactive" | "all";
/** Defines values for ScoringRuleParameterSelector. */
export type ScoringRuleParameterSelector = "jobLabels" | "labelSelectors";

/** Optional parameters. */
export interface JobRouterCreateClassificationPolicyV2OptionalParams
  extends coreHttp.OperationOptions {
  /** Any object */
  repeatabilityHeaders?: RepeatabilityHeaders;
}

/** Contains response data for the createClassificationPolicyV2 operation. */
export type JobRouterCreateClassificationPolicyV2Response = ClassificationPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ClassificationPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterListClassificationPoliciesOptionalParams
  extends coreHttp.OperationOptions {
  /** Maximum page size */
  maxPageSize?: number;
  /** Continuation token to retrieve next page */
  continuationToken?: string;
}

/** Contains response data for the listClassificationPolicies operation. */
export type JobRouterListClassificationPoliciesResponse = ClassificationPolicyCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ClassificationPolicyCollection;
  };
};

/** Optional parameters. */
export interface JobRouterPatchClassificationPolicyV2OptionalParams
  extends coreHttp.OperationOptions {
  /** JSON Document containined the partial update for the classification policy */
  patch?: ClassificationPolicy;
}

/** Contains response data for the patchClassificationPolicyV2 operation. */
export type JobRouterPatchClassificationPolicyV2Response = ClassificationPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ClassificationPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterGetClassificationPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getClassificationPolicy operation. */
export type JobRouterGetClassificationPolicyResponse = ClassificationPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ClassificationPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterDeleteClassificationPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface JobRouterCreateDistributionPolicyV2OptionalParams
  extends coreHttp.OperationOptions {
  /** Any object */
  repeatabilityHeaders?: RepeatabilityHeaders;
}

/** Contains response data for the createDistributionPolicyV2 operation. */
export type JobRouterCreateDistributionPolicyV2Response = DistributionPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DistributionPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterListDistributionPoliciesOptionalParams
  extends coreHttp.OperationOptions {
  /** Maximum page size */
  maxPageSize?: number;
  /** Continuation token to retrieve next page */
  continuationToken?: string;
}

/** Contains response data for the listDistributionPolicies operation. */
export type JobRouterListDistributionPoliciesResponse = DistributionPolicyCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DistributionPolicyCollection;
  };
};

/** Optional parameters. */
export interface JobRouterPatchDistributionPolicyOptionalParams
  extends coreHttp.OperationOptions {
  /** Model of distribution policy properties to be patched. See also: https://datatracker.ietf.org/doc/html/rfc7386 */
  patch?: DistributionPolicy;
}

/** Contains response data for the patchDistributionPolicy operation. */
export type JobRouterPatchDistributionPolicyResponse = DistributionPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DistributionPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterGetDistributionPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getDistributionPolicy operation. */
export type JobRouterGetDistributionPolicyResponse = DistributionPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DistributionPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterDeleteDistributionPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface JobRouterCreateExceptionPolicyV2OptionalParams
  extends coreHttp.OperationOptions {
  /** Headers to support idempotency */
  repeatabilityHeaders?: RepeatabilityHeaders;
}

/** Contains response data for the createExceptionPolicyV2 operation. */
export type JobRouterCreateExceptionPolicyV2Response = ExceptionPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ExceptionPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterListExceptionPoliciesOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxPageSize?: number;
  /** Token for pagination */
  continuationToken?: string;
}

/** Contains response data for the listExceptionPolicies operation. */
export type JobRouterListExceptionPoliciesResponse = ExceptionPolicyCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ExceptionPolicyCollection;
  };
};

/** Optional parameters. */
export interface JobRouterPatchExceptionPolicyV2OptionalParams
  extends coreHttp.OperationOptions {
  /** Model of exception policy to be updated */
  patchExceptionPolicy?: ExceptionPolicy;
}

/** Contains response data for the patchExceptionPolicyV2 operation. */
export type JobRouterPatchExceptionPolicyV2Response = ExceptionPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ExceptionPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterGetExceptionPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getExceptionPolicy operation. */
export type JobRouterGetExceptionPolicyResponse = ExceptionPolicy & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ExceptionPolicy;
  };
};

/** Optional parameters. */
export interface JobRouterDeleteExceptionPolicyOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface JobRouterCreateJobV2OptionalParams
  extends coreHttp.OperationOptions {
  /** Repeatability headers for idempotency */
  repeatabilityHeaders?: RepeatabilityHeaders;
}

/** Contains response data for the createJobV2 operation. */
export type JobRouterCreateJobV2Response = RouterJob & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: RouterJob;
  };
};

/** Optional parameters. */
export interface JobRouterListJobsOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxPageSize?: number;
  /** Token for pagination */
  continuationToken?: string;
  /** (Optional) If specified, filter jobs by status. */
  status?: JobStateSelector;
  /** (Optional) If specified, filter jobs by queue. */
  queueId?: string;
  /** (Optional) If specified, filter jobs by channel. */
  channelId?: string;
}

/** Contains response data for the listJobs operation. */
export type JobRouterListJobsResponse = JobCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: JobCollection;
  };
};

/** Optional parameters. */
export interface JobRouterGetJobOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getJob operation. */
export type JobRouterGetJobResponse = RouterJob & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: RouterJob;
  };
};

/** Optional parameters. */
export interface JobRouterUpdateJobOptionalParams
  extends coreHttp.OperationOptions {
  /** Request model for patching a job */
  patch?: RouterJob;
  /** If set to true, will force classification. Defaults to false. */
  forceClassification?: boolean;
}

/** Contains response data for the updateJob operation. */
export type JobRouterUpdateJobResponse = RouterJob & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: RouterJob;
  };
};

/** Optional parameters. */
export interface JobRouterCancelJobActionOptionalParams
  extends coreHttp.OperationOptions {
  /** (Optional) Customer supplied note, e.g., cancellation reason. */
  note?: string;
  /**
   * (Optional) Customer supplied disposition code for specifying any short label
   * If not provided, default value of "CancelledByUser" is set.
   */
  dispositionCode?: string;
}

/** Optional parameters. */
export interface JobRouterCompleteJobActionOptionalParams
  extends coreHttp.OperationOptions {
  /** (Optional) Customer supplied note. */
  note?: string;
}

/** Optional parameters. */
export interface JobRouterCloseJobActionOptionalParams
  extends coreHttp.OperationOptions {
  /** Indicates the outcome of the job, populate this field with your own custom values. */
  dispositionCode?: string;
  /**
   * If not provided, capacity will be released immediately.
   * If provided, the future time at which to release the capacity.
   */
  releaseTime?: Date;
  /** (Optional) Customer supplied note. */
  note?: string;
}

/** Optional parameters. */
export interface JobRouterGetInQueuePositionOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getInQueuePosition operation. */
export type JobRouterGetInQueuePositionResponse = JobPositionDetails & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: JobPositionDetails;
  };
};

/** Optional parameters. */
export interface JobRouterDeleteJobOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface JobRouterAcceptJobActionOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the acceptJobAction operation. */
export type JobRouterAcceptJobActionResponse = AcceptJobOfferResponse & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: AcceptJobOfferResponse;
  };
};

/** Optional parameters. */
export interface JobRouterDeclineJobActionOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface JobRouterCreateQueueOptionalParams
  extends coreHttp.OperationOptions {
  /** Repeatability headers for idempotency */
  repeatabilityHeaders?: RepeatabilityHeaders;
}

/** Contains response data for the createQueue operation. */
export type JobRouterCreateQueueResponse = JobQueue & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: JobQueue;
  };
};

/** Optional parameters. */
export interface JobRouterListQueuesOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxPageSize?: number;
  /** Token for pagination */
  continuationToken?: string;
}

/** Contains response data for the listQueues operation. */
export type JobRouterListQueuesResponse = QueueCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: QueueCollection;
  };
};

/** Optional parameters. */
export interface JobRouterUpdateQueueOptionalParams
  extends coreHttp.OperationOptions {
  /** Model of queue properties to be patched. See also: https://datatracker.ietf.org/doc/html/rfc7386 */
  patch?: JobQueue;
}

/** Contains response data for the updateQueue operation. */
export type JobRouterUpdateQueueResponse = JobQueue & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: JobQueue;
  };
};

/** Optional parameters. */
export interface JobRouterGetQueueOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getQueue operation. */
export type JobRouterGetQueueResponse = JobQueue & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: JobQueue;
  };
};

/** Optional parameters. */
export interface JobRouterDeleteQueueOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface JobRouterRegisterWorkerV2OptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the registerWorkerV2 operation. */
export type JobRouterRegisterWorkerV2Response = RouterWorker & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: RouterWorker;
  };
};

/** Optional parameters. */
export interface JobRouterDeregisterWorkerV2OptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface JobRouterListWorkersOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxPageSize?: number;
  /** Token for pagination */
  continuationToken?: string;
  /** (Optional) If specified, select workers who are assigned to this queue */
  queueId?: string;
  /** (Optional) If specified, select workers who have a channel configuration with this channel */
  channelId?: string;
  /** (Optional) If specified, select workers by worker status. */
  status?: WorkerStateSelector;
  /**
   * (Optional) If set to true, select only workers who have capacity for the channel specified by `channelId` or for any channel
   *             if `channelId` not specified. If set to false, then will return all workers including workers without any capacity for jobs. Defaults to false.
   */
  hasCapacity?: boolean;
}

/** Contains response data for the listWorkers operation. */
export type JobRouterListWorkersResponse = WorkerCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: WorkerCollection;
  };
};

/** Optional parameters. */
export interface JobRouterGetWorkerOptionalParams
  extends coreHttp.OperationOptions {}

/** Contains response data for the getWorker operation. */
export type JobRouterGetWorkerResponse = RouterWorker & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: RouterWorker;
  };
};

/** Optional parameters. */
export interface JobRouterReleaseAssignmentActionOptionalParams
  extends coreHttp.OperationOptions {
  /** Request to release assignment */
  releaseAssignmentRequest?: ReleaseAssignmentRequest;
}

/** Optional parameters. */
export interface JobRouterDeleteWorkerOptionalParams
  extends coreHttp.OperationOptions {}

/** Optional parameters. */
export interface JobRouterListClassificationPoliciesNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Maximum page size */
  maxPageSize?: number;
  /** Continuation token to retrieve next page */
  continuationToken?: string;
}

/** Contains response data for the listClassificationPoliciesNext operation. */
export type JobRouterListClassificationPoliciesNextResponse = ClassificationPolicyCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ClassificationPolicyCollection;
  };
};

/** Optional parameters. */
export interface JobRouterListDistributionPoliciesNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Maximum page size */
  maxPageSize?: number;
  /** Continuation token to retrieve next page */
  continuationToken?: string;
}

/** Contains response data for the listDistributionPoliciesNext operation. */
export type JobRouterListDistributionPoliciesNextResponse = DistributionPolicyCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: DistributionPolicyCollection;
  };
};

/** Optional parameters. */
export interface JobRouterListExceptionPoliciesNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxPageSize?: number;
  /** Token for pagination */
  continuationToken?: string;
}

/** Contains response data for the listExceptionPoliciesNext operation. */
export type JobRouterListExceptionPoliciesNextResponse = ExceptionPolicyCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: ExceptionPolicyCollection;
  };
};

/** Optional parameters. */
export interface JobRouterListJobsNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxPageSize?: number;
  /** Token for pagination */
  continuationToken?: string;
  /** (Optional) If specified, filter jobs by status. */
  status?: JobStateSelector;
  /** (Optional) If specified, filter jobs by queue. */
  queueId?: string;
  /** (Optional) If specified, filter jobs by channel. */
  channelId?: string;
}

/** Contains response data for the listJobsNext operation. */
export type JobRouterListJobsNextResponse = JobCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: JobCollection;
  };
};

/** Optional parameters. */
export interface JobRouterListQueuesNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxPageSize?: number;
  /** Token for pagination */
  continuationToken?: string;
}

/** Contains response data for the listQueuesNext operation. */
export type JobRouterListQueuesNextResponse = QueueCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: QueueCollection;
  };
};

/** Optional parameters. */
export interface JobRouterListWorkersNextOptionalParams
  extends coreHttp.OperationOptions {
  /** Number of objects to return per page */
  maxPageSize?: number;
  /** Token for pagination */
  continuationToken?: string;
  /** (Optional) If specified, select workers who are assigned to this queue */
  queueId?: string;
  /** (Optional) If specified, select workers who have a channel configuration with this channel */
  channelId?: string;
  /** (Optional) If specified, select workers by worker status. */
  status?: WorkerStateSelector;
  /**
   * (Optional) If set to true, select only workers who have capacity for the channel specified by `channelId` or for any channel
   *             if `channelId` not specified. If set to false, then will return all workers including workers without any capacity for jobs. Defaults to false.
   */
  hasCapacity?: boolean;
}

/** Contains response data for the listWorkersNext operation. */
export type JobRouterListWorkersNextResponse = WorkerCollection & {
  /** The underlying HTTP response. */
  _response: coreHttp.HttpResponse & {
    /** The response body as text (string format) */
    bodyAsText: string;

    /** The response body as parsed JSON or XML */
    parsedBody: WorkerCollection;
  };
};

/** Optional parameters. */
export interface JobRouterApiClientOptionalParams
  extends coreHttp.ServiceClientOptions {
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
