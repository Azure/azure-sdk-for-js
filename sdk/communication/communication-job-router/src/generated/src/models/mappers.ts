/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const UpsertChannelRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpsertChannelRequest",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpsertChannelResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpsertChannelResponse",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      acsManaged: {
        serializedName: "acsManaged",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CommunicationErrorResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunicationErrorResponse",
    modelProperties: {
      communicationError: {
        serializedName: "communicationError",
        type: {
          name: "Composite",
          className: "CommunicationError"
        }
      }
    }
  }
};

export const CommunicationError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunicationError",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      innerErrors: {
        serializedName: "innerErrors",
        readOnly: true,
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommunicationError"
            }
          }
        }
      }
    }
  }
};

export const ChannelCollection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChannelCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterChannel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouterChannel: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterChannel",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      acsManaged: {
        serializedName: "acsManaged",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const UpsertClassificationPolicyRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpsertClassificationPolicyRequest",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      fallbackQueueId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "fallbackQueueId",
        type: {
          name: "String"
        }
      },
      queueSelector: {
        serializedName: "queueSelector",
        type: {
          name: "Composite",
          className: "QueueSelector"
        }
      },
      prioritizationRule: {
        serializedName: "prioritizationRule",
        type: {
          name: "Composite",
          className: "RouterRule"
        }
      },
      workerSelectors: {
        serializedName: "workerSelectors",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabelSelectorAttachment"
            }
          }
        }
      }
    }
  }
};

export const QueueSelector: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueueSelector",
    uberParent: "QueueSelector",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouterRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterRule",
    uberParent: "RouterRule",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LabelSelectorAttachment: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabelSelectorAttachment",
    uberParent: "LabelSelectorAttachment",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpsertClassificationPolicyResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpsertClassificationPolicyResponse",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      fallbackQueueId: {
        serializedName: "fallbackQueueId",
        type: {
          name: "String"
        }
      },
      queueSelector: {
        serializedName: "queueSelector",
        type: {
          name: "Composite",
          className: "QueueSelector"
        }
      },
      prioritizationRule: {
        serializedName: "prioritizationRule",
        type: {
          name: "Composite",
          className: "RouterRule"
        }
      },
      workerSelectors: {
        serializedName: "workerSelectors",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabelSelectorAttachment"
            }
          }
        }
      }
    }
  }
};

export const ClassificationPolicyCollection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClassificationPolicyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClassificationPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClassificationPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClassificationPolicy",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      fallbackQueueId: {
        serializedName: "fallbackQueueId",
        type: {
          name: "String"
        }
      },
      queueSelector: {
        serializedName: "queueSelector",
        type: {
          name: "Composite",
          className: "QueueSelector"
        }
      },
      prioritizationRule: {
        serializedName: "prioritizationRule",
        type: {
          name: "Composite",
          className: "RouterRule"
        }
      },
      workerSelectors: {
        serializedName: "workerSelectors",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabelSelectorAttachment"
            }
          }
        }
      }
    }
  }
};

export const UpsertDistributionPolicyRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpsertDistributionPolicyRequest",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      offerTTL: {
        serializedName: "offerTTL",
        required: true,
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "Composite",
          className: "DistributionMode"
        }
      }
    }
  }
};

export const DistributionMode: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DistributionMode",
    uberParent: "DistributionMode",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      minConcurrentOffers: {
        serializedName: "minConcurrentOffers",
        required: true,
        type: {
          name: "Number"
        }
      },
      maxConcurrentOffers: {
        serializedName: "maxConcurrentOffers",
        required: true,
        type: {
          name: "Number"
        }
      },
      bypassSelectors: {
        serializedName: "bypassSelectors",
        nullable: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const UpsertDistributionPolicyResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpsertDistributionPolicyResponse",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      offerTTL: {
        serializedName: "offerTTL",
        required: true,
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "Composite",
          className: "DistributionMode"
        }
      }
    }
  }
};

export const DistributionPolicyCollection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DistributionPolicyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DistributionPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DistributionPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DistributionPolicy",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      offerTTL: {
        serializedName: "offerTTL",
        required: true,
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "Composite",
          className: "DistributionMode"
        }
      }
    }
  }
};

export const UpsertExceptionPolicyRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpsertExceptionPolicyRequest",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      exceptionRules: {
        serializedName: "exceptionRules",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExceptionRule"
            }
          }
        }
      }
    }
  }
};

export const ExceptionRule: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExceptionRule",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      trigger: {
        serializedName: "trigger",
        type: {
          name: "Composite",
          className: "JobExceptionTrigger"
        }
      },
      actions: {
        serializedName: "actions",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExceptionAction"
            }
          }
        }
      }
    }
  }
};

export const JobExceptionTrigger: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobExceptionTrigger",
    uberParent: "JobExceptionTrigger",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExceptionAction: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExceptionAction",
    uberParent: "ExceptionAction",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpsertExceptionPolicyResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpsertExceptionPolicyResponse",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      exceptionRules: {
        serializedName: "exceptionRules",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExceptionRule"
            }
          }
        }
      }
    }
  }
};

export const ExceptionPolicyCollection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExceptionPolicyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExceptionPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExceptionPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExceptionPolicy",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      exceptionRules: {
        serializedName: "exceptionRules",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExceptionRule"
            }
          }
        }
      }
    }
  }
};

export const CreateJobRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateJobRequest",
    modelProperties: {
      channelReference: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "channelReference",
        type: {
          name: "String"
        }
      },
      channelId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "channelId",
        required: true,
        type: {
          name: "String"
        }
      },
      classificationPolicyId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "classificationPolicyId",
        type: {
          name: "String"
        }
      },
      queueId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "queueId",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      workerSelectors: {
        serializedName: "workerSelectors",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabelSelector"
            }
          }
        }
      },
      labels: {
        serializedName: "labels",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      note: {
        constraints: {
          MaxLength: 2000
        },
        serializedName: "note",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LabelSelector: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LabelSelector",
    modelProperties: {
      key: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "equal",
            "notEqual",
            "lessThan",
            "lessThanEqual",
            "greaterThan",
            "greaterThanEqual"
          ]
        }
      },
      value: {
        serializedName: "value",
        nullable: true,
        type: {
          name: "any"
        }
      },
      ttl: {
        serializedName: "ttl",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateJobResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateJobResponse",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobCollection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterJob"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouterJob: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterJob",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      channelReference: {
        serializedName: "channelReference",
        type: {
          name: "String"
        }
      },
      jobStatus: {
        serializedName: "jobStatus",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "pendingClassification",
            "queued",
            "assigned",
            "completed",
            "closed",
            "cancelled",
            "classificationFailed"
          ]
        }
      },
      enqueueTimeUtc: {
        serializedName: "enqueueTimeUtc",
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      channelId: {
        serializedName: "channelId",
        required: true,
        type: {
          name: "String"
        }
      },
      classificationPolicyId: {
        serializedName: "classificationPolicyId",
        type: {
          name: "String"
        }
      },
      queueId: {
        serializedName: "queueId",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      dispositionCode: {
        serializedName: "dispositionCode",
        type: {
          name: "String"
        }
      },
      workerSelectors: {
        serializedName: "workerSelectors",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabelSelector"
            }
          }
        }
      },
      labels: {
        serializedName: "labels",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      assignments: {
        serializedName: "assignments",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "JobAssignment" } }
        }
      },
      notes: {
        serializedName: "notes",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const JobAssignment: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobAssignment",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      workerId: {
        serializedName: "workerId",
        type: {
          name: "String"
        }
      },
      assignTime: {
        serializedName: "assignTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      completeTime: {
        serializedName: "completeTime",
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      closeTime: {
        serializedName: "closeTime",
        nullable: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const UpdateJobLabelsRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateJobLabelsRequest",
    modelProperties: {
      labels: {
        serializedName: "labels",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      note: {
        constraints: {
          MaxLength: 2000
        },
        serializedName: "note",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReclassifyJobRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReclassifyJobRequest",
    modelProperties: {
      classificationPolicyId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "classificationPolicyId",
        type: {
          name: "String"
        }
      },
      labelsToUpsert: {
        serializedName: "labelsToUpsert",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      note: {
        constraints: {
          MaxLength: 2000
        },
        serializedName: "note",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateJobClassificationRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateJobClassificationRequest",
    modelProperties: {
      queueId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "queueId",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      workerSelectors: {
        serializedName: "workerSelectors",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabelSelector"
            }
          }
        }
      },
      note: {
        constraints: {
          MaxLength: 2000
        },
        serializedName: "note",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CancelJobRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CancelJobRequest",
    modelProperties: {
      note: {
        constraints: {
          MaxLength: 2000
        },
        serializedName: "note",
        type: {
          name: "String"
        }
      },
      dispositionCode: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "dispositionCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CompleteJobRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CompleteJobRequest",
    modelProperties: {
      assignmentId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "assignmentId",
        required: true,
        type: {
          name: "String"
        }
      },
      note: {
        constraints: {
          MaxLength: 2000
        },
        serializedName: "note",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloseJobRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloseJobRequest",
    modelProperties: {
      assignmentId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "assignmentId",
        required: true,
        type: {
          name: "String"
        }
      },
      dispositionCode: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "dispositionCode",
        type: {
          name: "String"
        }
      },
      releaseTime: {
        serializedName: "releaseTime",
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      note: {
        constraints: {
          MaxLength: 2000
        },
        serializedName: "note",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobPositionDetails: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobPositionDetails",
    modelProperties: {
      jobId: {
        serializedName: "jobId",
        required: true,
        type: {
          name: "String"
        }
      },
      position: {
        serializedName: "position",
        required: true,
        type: {
          name: "Number"
        }
      },
      queueId: {
        serializedName: "queueId",
        required: true,
        type: {
          name: "String"
        }
      },
      queueLength: {
        serializedName: "queueLength",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AcceptJobOfferResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AcceptJobOfferResponse",
    modelProperties: {
      assignmentId: {
        serializedName: "assignmentId",
        required: true,
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        required: true,
        type: {
          name: "String"
        }
      },
      workerId: {
        serializedName: "workerId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpsertQueueRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpsertQueueRequest",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      distributionPolicyId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "distributionPolicyId",
        required: true,
        type: {
          name: "String"
        }
      },
      labels: {
        serializedName: "labels",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      exceptionPolicyId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "exceptionPolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpsertQueueResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpsertQueueResponse",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      distributionPolicyId: {
        serializedName: "distributionPolicyId",
        required: true,
        type: {
          name: "String"
        }
      },
      labels: {
        serializedName: "labels",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      exceptionPolicyId: {
        serializedName: "exceptionPolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueueCollection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueueCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobQueue"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobQueue: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobQueue",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      distributionPolicyId: {
        serializedName: "distributionPolicyId",
        required: true,
        type: {
          name: "String"
        }
      },
      labels: {
        serializedName: "labels",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      exceptionPolicyId: {
        serializedName: "exceptionPolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegisterWorkerRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegisterWorkerRequest",
    modelProperties: {
      id: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      queueAssignments: {
        serializedName: "queueAssignments",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueueAssignment"
            }
          }
        }
      },
      totalCapacity: {
        serializedName: "totalCapacity",
        required: true,
        type: {
          name: "Number"
        }
      },
      labels: {
        serializedName: "labels",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      channelConfigurations: {
        serializedName: "channelConfigurations",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ChannelConfiguration"
            }
          }
        }
      }
    }
  }
};

export const QueueAssignment: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueueAssignment",
    modelProperties: {
      queueId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "queueId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ChannelConfiguration: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChannelConfiguration",
    modelProperties: {
      channelId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "channelId",
        required: true,
        type: {
          name: "String"
        }
      },
      capacityCostPerJob: {
        serializedName: "capacityCostPerJob",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RouterWorker: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterWorker",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["active", "draining", "inactive"]
        }
      },
      queueAssignments: {
        serializedName: "queueAssignments",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueueAssignment"
            }
          }
        }
      },
      totalCapacity: {
        serializedName: "totalCapacity",
        required: true,
        type: {
          name: "Number"
        }
      },
      labels: {
        serializedName: "labels",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      channelConfigurations: {
        serializedName: "channelConfigurations",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ChannelConfiguration"
            }
          }
        }
      },
      offers: {
        serializedName: "offers",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobOffer"
            }
          }
        }
      },
      assignedJobs: {
        serializedName: "assignedJobs",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkerAssignment"
            }
          }
        }
      },
      loadRatio: {
        serializedName: "loadRatio",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const JobOffer: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobOffer",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        required: true,
        type: {
          name: "String"
        }
      },
      capacityCost: {
        serializedName: "capacityCost",
        required: true,
        type: {
          name: "Number"
        }
      },
      offerTimeUtc: {
        serializedName: "offerTimeUtc",
        nullable: true,
        type: {
          name: "DateTime"
        }
      },
      expiryTimeUtc: {
        serializedName: "expiryTimeUtc",
        nullable: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const WorkerAssignment: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkerAssignment",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      },
      jobId: {
        serializedName: "jobId",
        required: true,
        type: {
          name: "String"
        }
      },
      capacityCost: {
        serializedName: "capacityCost",
        required: true,
        type: {
          name: "Number"
        }
      },
      assignTime: {
        serializedName: "assignTime",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const WorkerCollection: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkerCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterWorker"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReleaseAssignmentRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReleaseAssignmentRequest",
    modelProperties: {
      releaseTime: {
        serializedName: "releaseTime",
        nullable: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AzureFunctionRuleCredential: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFunctionRuleCredential",
    modelProperties: {
      functionKey: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "functionKey",
        type: {
          name: "String"
        }
      },
      appKey: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "appKey",
        type: {
          name: "String"
        }
      },
      clientId: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScoringRuleOptions: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScoringRuleOptions",
    modelProperties: {
      batchSize: {
        serializedName: "batchSize",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      scoringParameters: {
        serializedName: "scoringParameters",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "jobLabels",
                "labelSelectors",
                "workerLabelsCollection"
              ]
            }
          }
        }
      },
      allowScoringBatchOfWorkers: {
        serializedName: "allowScoringBatchOfWorkers",
        nullable: true,
        type: {
          name: "Boolean"
        }
      },
      descendingOrder: {
        serializedName: "descendingOrder",
        nullable: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const WeightedAllocation: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WeightedAllocation",
    modelProperties: {
      weight: {
        serializedName: "weight",
        required: true,
        type: {
          name: "Number"
        }
      },
      labelSelectors: {
        serializedName: "labelSelectors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabelSelector"
            }
          }
        }
      }
    }
  }
};

export const NearestQueueLabelSelector: coreHttp.CompositeMapper = {
  serializedName: "nearest-queue-label",
  type: {
    name: "Composite",
    className: "NearestQueueLabelSelector",
    uberParent: "QueueSelector",
    polymorphicDiscriminator: QueueSelector.type.polymorphicDiscriminator,
    modelProperties: {
      ...QueueSelector.type.modelProperties,
      rule: {
        serializedName: "rule",
        type: {
          name: "Composite",
          className: "RouterRule"
        }
      }
    }
  }
};

export const QueueIdSelector: coreHttp.CompositeMapper = {
  serializedName: "queue-id",
  type: {
    name: "Composite",
    className: "QueueIdSelector",
    uberParent: "QueueSelector",
    polymorphicDiscriminator: QueueSelector.type.polymorphicDiscriminator,
    modelProperties: {
      ...QueueSelector.type.modelProperties,
      rule: {
        serializedName: "rule",
        type: {
          name: "Composite",
          className: "RouterRule"
        }
      }
    }
  }
};

export const QueueLabelSelector: coreHttp.CompositeMapper = {
  serializedName: "queue-label",
  type: {
    name: "Composite",
    className: "QueueLabelSelector",
    uberParent: "QueueSelector",
    polymorphicDiscriminator: QueueSelector.type.polymorphicDiscriminator,
    modelProperties: {
      ...QueueSelector.type.modelProperties,
      labelSelectors: {
        serializedName: "labelSelectors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabelSelectorAttachment"
            }
          }
        }
      }
    }
  }
};

export const AzureFunctionRule: coreHttp.CompositeMapper = {
  serializedName: "azure-function-rule",
  type: {
    name: "Composite",
    className: "AzureFunctionRule",
    uberParent: "RouterRule",
    polymorphicDiscriminator: RouterRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...RouterRule.type.modelProperties,
      functionAppUrl: {
        serializedName: "functionAppUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      functionName: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "functionName",
        required: true,
        type: {
          name: "String"
        }
      },
      credential: {
        serializedName: "credential",
        type: {
          name: "Composite",
          className: "AzureFunctionRuleCredential"
        }
      }
    }
  }
};

export const DirectMapRule: coreHttp.CompositeMapper = {
  serializedName: "direct-map-rule",
  type: {
    name: "Composite",
    className: "DirectMapRule",
    uberParent: "RouterRule",
    polymorphicDiscriminator: RouterRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...RouterRule.type.modelProperties
    }
  }
};

export const ExpressionRule: coreHttp.CompositeMapper = {
  serializedName: "expression-rule",
  type: {
    name: "Composite",
    className: "ExpressionRule",
    uberParent: "RouterRule",
    polymorphicDiscriminator: RouterRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...RouterRule.type.modelProperties,
      language: {
        defaultValue: "powerFx",
        isConstant: true,
        serializedName: "language",
        type: {
          name: "String"
        }
      },
      expression: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "expression",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StaticRule: coreHttp.CompositeMapper = {
  serializedName: "static-rule",
  type: {
    name: "Composite",
    className: "StaticRule",
    uberParent: "RouterRule",
    polymorphicDiscriminator: RouterRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...RouterRule.type.modelProperties,
      value: {
        serializedName: "value",
        nullable: true,
        type: {
          name: "any"
        }
      }
    }
  }
};

export const ConditionalLabelSelector: coreHttp.CompositeMapper = {
  serializedName: "conditional",
  type: {
    name: "Composite",
    className: "ConditionalLabelSelector",
    uberParent: "LabelSelectorAttachment",
    polymorphicDiscriminator:
      LabelSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...LabelSelectorAttachment.type.modelProperties,
      condition: {
        serializedName: "condition",
        type: {
          name: "Composite",
          className: "RouterRule"
        }
      },
      labelSelectors: {
        serializedName: "labelSelectors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabelSelector"
            }
          }
        }
      }
    }
  }
};

export const PassThroughLabelSelector: coreHttp.CompositeMapper = {
  serializedName: "pass-through",
  type: {
    name: "Composite",
    className: "PassThroughLabelSelector",
    uberParent: "LabelSelectorAttachment",
    polymorphicDiscriminator:
      LabelSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...LabelSelectorAttachment.type.modelProperties,
      key: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "equal",
            "notEqual",
            "lessThan",
            "lessThanEqual",
            "greaterThan",
            "greaterThanEqual"
          ]
        }
      },
      ttl: {
        serializedName: "ttl",
        nullable: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleLabelSelector: coreHttp.CompositeMapper = {
  serializedName: "rule",
  type: {
    name: "Composite",
    className: "RuleLabelSelector",
    uberParent: "LabelSelectorAttachment",
    polymorphicDiscriminator:
      LabelSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...LabelSelectorAttachment.type.modelProperties,
      rule: {
        serializedName: "rule",
        type: {
          name: "Composite",
          className: "RouterRule"
        }
      }
    }
  }
};

export const StaticLabelSelector: coreHttp.CompositeMapper = {
  serializedName: "static",
  type: {
    name: "Composite",
    className: "StaticLabelSelector",
    uberParent: "LabelSelectorAttachment",
    polymorphicDiscriminator:
      LabelSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...LabelSelectorAttachment.type.modelProperties,
      labelSelector: {
        serializedName: "labelSelector",
        type: {
          name: "Composite",
          className: "LabelSelector"
        }
      }
    }
  }
};

export const WeightedAllocationLabelSelector: coreHttp.CompositeMapper = {
  serializedName: "weighted-allocation",
  type: {
    name: "Composite",
    className: "WeightedAllocationLabelSelector",
    uberParent: "LabelSelectorAttachment",
    polymorphicDiscriminator:
      LabelSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...LabelSelectorAttachment.type.modelProperties,
      allocations: {
        serializedName: "allocations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WeightedAllocation"
            }
          }
        }
      }
    }
  }
};

export const BestWorkerMode: coreHttp.CompositeMapper = {
  serializedName: "best-worker",
  type: {
    name: "Composite",
    className: "BestWorkerMode",
    uberParent: "DistributionMode",
    polymorphicDiscriminator: DistributionMode.type.polymorphicDiscriminator,
    modelProperties: {
      ...DistributionMode.type.modelProperties,
      scoringRule: {
        serializedName: "scoringRule",
        type: {
          name: "Composite",
          className: "RouterRule"
        }
      },
      scoringRuleOptions: {
        serializedName: "scoringRuleOptions",
        type: {
          name: "Composite",
          className: "ScoringRuleOptions"
        }
      }
    }
  }
};

export const LongestIdleMode: coreHttp.CompositeMapper = {
  serializedName: "longest-idle",
  type: {
    name: "Composite",
    className: "LongestIdleMode",
    uberParent: "DistributionMode",
    polymorphicDiscriminator: DistributionMode.type.polymorphicDiscriminator,
    modelProperties: {
      ...DistributionMode.type.modelProperties
    }
  }
};

export const RoundRobinMode: coreHttp.CompositeMapper = {
  serializedName: "round-robin",
  type: {
    name: "Composite",
    className: "RoundRobinMode",
    uberParent: "DistributionMode",
    polymorphicDiscriminator: DistributionMode.type.polymorphicDiscriminator,
    modelProperties: {
      ...DistributionMode.type.modelProperties
    }
  }
};

export const QueueLengthExceptionTrigger: coreHttp.CompositeMapper = {
  serializedName: "queue-length",
  type: {
    name: "Composite",
    className: "QueueLengthExceptionTrigger",
    uberParent: "JobExceptionTrigger",
    polymorphicDiscriminator: JobExceptionTrigger.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobExceptionTrigger.type.modelProperties,
      threshold: {
        serializedName: "threshold",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const WaitTimeExceptionTrigger: coreHttp.CompositeMapper = {
  serializedName: "wait-time",
  type: {
    name: "Composite",
    className: "WaitTimeExceptionTrigger",
    uberParent: "JobExceptionTrigger",
    polymorphicDiscriminator: JobExceptionTrigger.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobExceptionTrigger.type.modelProperties,
      threshold: {
        serializedName: "threshold",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CancelExceptionAction: coreHttp.CompositeMapper = {
  serializedName: "cancel",
  type: {
    name: "Composite",
    className: "CancelExceptionAction",
    uberParent: "ExceptionAction",
    polymorphicDiscriminator: ExceptionAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...ExceptionAction.type.modelProperties,
      note: {
        constraints: {
          MaxLength: 2000
        },
        serializedName: "note",
        type: {
          name: "String"
        }
      },
      dispositionCode: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "dispositionCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManualReclassifyExceptionAction: coreHttp.CompositeMapper = {
  serializedName: "manual-reclassify",
  type: {
    name: "Composite",
    className: "ManualReclassifyExceptionAction",
    uberParent: "ExceptionAction",
    polymorphicDiscriminator: ExceptionAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...ExceptionAction.type.modelProperties,
      queueId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "queueId",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        nullable: true,
        type: {
          name: "Number"
        }
      },
      workerSelectors: {
        serializedName: "workerSelectors",
        nullable: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LabelSelector"
            }
          }
        }
      }
    }
  }
};

export const ReclassifyExceptionAction: coreHttp.CompositeMapper = {
  serializedName: "reclassify",
  type: {
    name: "Composite",
    className: "ReclassifyExceptionAction",
    uberParent: "ExceptionAction",
    polymorphicDiscriminator: ExceptionAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...ExceptionAction.type.modelProperties,
      classificationPolicyId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "classificationPolicyId",
        type: {
          name: "String"
        }
      },
      labelsToUpsert: {
        serializedName: "labelsToUpsert",
        nullable: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export let discriminators = {
  QueueSelector: QueueSelector,
  RouterRule: RouterRule,
  LabelSelectorAttachment: LabelSelectorAttachment,
  DistributionMode: DistributionMode,
  JobExceptionTrigger: JobExceptionTrigger,
  ExceptionAction: ExceptionAction,
  "QueueSelector.nearest-queue-label": NearestQueueLabelSelector,
  "QueueSelector.queue-id": QueueIdSelector,
  "QueueSelector.queue-label": QueueLabelSelector,
  "RouterRule.azure-function-rule": AzureFunctionRule,
  "RouterRule.direct-map-rule": DirectMapRule,
  "RouterRule.expression-rule": ExpressionRule,
  "RouterRule.static-rule": StaticRule,
  "LabelSelectorAttachment.conditional": ConditionalLabelSelector,
  "LabelSelectorAttachment.pass-through": PassThroughLabelSelector,
  "LabelSelectorAttachment.rule": RuleLabelSelector,
  "LabelSelectorAttachment.static": StaticLabelSelector,
  "LabelSelectorAttachment.weighted-allocation": WeightedAllocationLabelSelector,
  "DistributionMode.best-worker": BestWorkerMode,
  "DistributionMode.longest-idle": LongestIdleMode,
  "DistributionMode.round-robin": RoundRobinMode,
  "JobExceptionTrigger.queue-length": QueueLengthExceptionTrigger,
  "JobExceptionTrigger.wait-time": WaitTimeExceptionTrigger,
  "ExceptionAction.cancel": CancelExceptionAction,
  "ExceptionAction.manual-reclassify": ManualReclassifyExceptionAction,
  "ExceptionAction.reclassify": ReclassifyExceptionAction
};
