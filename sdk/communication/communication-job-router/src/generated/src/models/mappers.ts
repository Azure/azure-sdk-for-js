/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ClassificationPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClassificationPolicy",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      fallbackQueueId: {
        serializedName: "fallbackQueueId",
        type: {
          name: "String"
        }
      },
      queueSelectors: {
        serializedName: "queueSelectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueueSelectorAttachment"
            }
          }
        }
      },
      prioritizationRule: {
        serializedName: "prioritizationRule",
        type: {
          name: "Composite",
          className: "RouterRule"
        }
      },
      workerSelectors: {
        serializedName: "workerSelectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkerSelectorAttachment"
            }
          }
        }
      }
    }
  }
};

export const QueueSelectorAttachment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueueSelectorAttachment",
    uberParent: "QueueSelectorAttachment",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouterRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterRule",
    uberParent: "RouterRule",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkerSelectorAttachment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkerSelectorAttachment",
    uberParent: "WorkerSelectorAttachment",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CommunicationErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunicationErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CommunicationError"
        }
      }
    }
  }
};

export const CommunicationError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunicationError",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommunicationError"
            }
          }
        }
      },
      innerError: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "CommunicationError"
        }
      }
    }
  }
};

export const ClassificationPolicyCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClassificationPolicyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClassificationPolicyItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClassificationPolicyItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClassificationPolicyItem",
    modelProperties: {
      classificationPolicy: {
        serializedName: "classificationPolicy",
        type: {
          name: "Composite",
          className: "ClassificationPolicy"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DistributionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DistributionPolicy",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      offerExpiresAfterSeconds: {
        serializedName: "offerExpiresAfterSeconds",
        type: {
          name: "Number"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "Composite",
          className: "DistributionMode"
        }
      }
    }
  }
};

export const DistributionMode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DistributionMode",
    uberParent: "DistributionMode",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      minConcurrentOffers: {
        serializedName: "minConcurrentOffers",
        type: {
          name: "Number"
        }
      },
      maxConcurrentOffers: {
        serializedName: "maxConcurrentOffers",
        type: {
          name: "Number"
        }
      },
      bypassSelectors: {
        serializedName: "bypassSelectors",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DistributionPolicyCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DistributionPolicyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DistributionPolicyItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DistributionPolicyItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DistributionPolicyItem",
    modelProperties: {
      distributionPolicy: {
        serializedName: "distributionPolicy",
        type: {
          name: "Composite",
          className: "DistributionPolicy"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExceptionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExceptionPolicy",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      exceptionRules: {
        serializedName: "exceptionRules",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "ExceptionRule" } }
        }
      }
    }
  }
};

export const ExceptionRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExceptionRule",
    modelProperties: {
      trigger: {
        serializedName: "trigger",
        type: {
          name: "Composite",
          className: "ExceptionTrigger"
        }
      },
      actions: {
        serializedName: "actions",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "ExceptionAction" } }
        }
      }
    }
  }
};

export const ExceptionTrigger: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExceptionTrigger",
    uberParent: "ExceptionTrigger",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExceptionAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExceptionAction",
    uberParent: "ExceptionAction",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExceptionPolicyCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExceptionPolicyCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExceptionPolicyItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExceptionPolicyItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExceptionPolicyItem",
    modelProperties: {
      exceptionPolicy: {
        serializedName: "exceptionPolicy",
        type: {
          name: "Composite",
          className: "ExceptionPolicy"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouterJob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterJob",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      channelReference: {
        serializedName: "channelReference",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      enqueuedAt: {
        serializedName: "enqueuedAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      channelId: {
        serializedName: "channelId",
        type: {
          name: "String"
        }
      },
      classificationPolicyId: {
        serializedName: "classificationPolicyId",
        type: {
          name: "String"
        }
      },
      queueId: {
        serializedName: "queueId",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      dispositionCode: {
        serializedName: "dispositionCode",
        type: {
          name: "String"
        }
      },
      requestedWorkerSelectors: {
        serializedName: "requestedWorkerSelectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterWorkerSelector"
            }
          }
        }
      },
      attachedWorkerSelectors: {
        serializedName: "attachedWorkerSelectors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterWorkerSelector"
            }
          }
        }
      },
      labels: {
        serializedName: "labels",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      assignments: {
        serializedName: "assignments",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "RouterJobAssignment" }
          }
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      notes: {
        serializedName: "notes",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      scheduledAt: {
        serializedName: "scheduledAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      matchingMode: {
        serializedName: "matchingMode",
        type: {
          name: "Composite",
          className: "JobMatchingMode"
        }
      }
    }
  }
};

export const RouterWorkerSelector: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterWorkerSelector",
    modelProperties: {
      key: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      },
      labelOperator: {
        serializedName: "labelOperator",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "any"
        }
      },
      expiresAfterSeconds: {
        serializedName: "expiresAfterSeconds",
        type: {
          name: "Number"
        }
      },
      expedite: {
        serializedName: "expedite",
        type: {
          name: "Boolean"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expiresAt: {
        serializedName: "expiresAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RouterJobAssignment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterJobAssignment",
    modelProperties: {
      assignmentId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "assignmentId",
        required: true,
        type: {
          name: "String"
        }
      },
      workerId: {
        serializedName: "workerId",
        type: {
          name: "String"
        }
      },
      assignedAt: {
        serializedName: "assignedAt",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      completedAt: {
        serializedName: "completedAt",
        type: {
          name: "DateTime"
        }
      },
      closedAt: {
        serializedName: "closedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const JobMatchingMode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobMatchingMode",
    modelProperties: {
      modeType: {
        serializedName: "modeType",
        type: {
          name: "String"
        }
      },
      queueAndMatchMode: {
        serializedName: "queueAndMatchMode",
        type: {
          name: "any"
        }
      },
      scheduleAndSuspendMode: {
        serializedName: "scheduleAndSuspendMode",
        type: {
          name: "Composite",
          className: "ScheduleAndSuspendMode"
        }
      },
      suspendMode: {
        serializedName: "suspendMode",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const ScheduleAndSuspendMode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleAndSuspendMode",
    modelProperties: {
      scheduleAt: {
        serializedName: "scheduleAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CancelJobRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CancelJobRequest",
    modelProperties: {
      note: {
        constraints: {
          MaxLength: 2000
        },
        serializedName: "note",
        type: {
          name: "String"
        }
      },
      dispositionCode: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "dispositionCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CompleteJobRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CompleteJobRequest",
    modelProperties: {
      assignmentId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "assignmentId",
        required: true,
        type: {
          name: "String"
        }
      },
      note: {
        constraints: {
          MaxLength: 2000
        },
        serializedName: "note",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloseJobRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloseJobRequest",
    modelProperties: {
      assignmentId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "assignmentId",
        required: true,
        type: {
          name: "String"
        }
      },
      dispositionCode: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "dispositionCode",
        type: {
          name: "String"
        }
      },
      closeAt: {
        serializedName: "closeAt",
        type: {
          name: "DateTime"
        }
      },
      note: {
        constraints: {
          MaxLength: 2000
        },
        serializedName: "note",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouterJobCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterJobCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterJobItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouterJobItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterJobItem",
    modelProperties: {
      job: {
        serializedName: "job",
        type: {
          name: "Composite",
          className: "RouterJob"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouterJobPositionDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterJobPositionDetails",
    modelProperties: {
      jobId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "jobId",
        required: true,
        type: {
          name: "String"
        }
      },
      position: {
        serializedName: "position",
        required: true,
        type: {
          name: "Number"
        }
      },
      queueId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "queueId",
        required: true,
        type: {
          name: "String"
        }
      },
      queueLength: {
        serializedName: "queueLength",
        required: true,
        type: {
          name: "Number"
        }
      },
      estimatedWaitTimeMinutes: {
        serializedName: "estimatedWaitTimeMinutes",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UnassignJobRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnassignJobRequest",
    modelProperties: {
      suspendMatching: {
        serializedName: "suspendMatching",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const UnassignJobResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnassignJobResult",
    modelProperties: {
      jobId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "jobId",
        required: true,
        type: {
          name: "String"
        }
      },
      unassignmentCount: {
        serializedName: "unassignmentCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AcceptJobOfferResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AcceptJobOfferResult",
    modelProperties: {
      assignmentId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "assignmentId",
        required: true,
        type: {
          name: "String"
        }
      },
      jobId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "jobId",
        required: true,
        type: {
          name: "String"
        }
      },
      workerId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "workerId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeclineJobOfferRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeclineJobOfferRequest",
    modelProperties: {
      retryOfferAt: {
        serializedName: "retryOfferAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RouterQueue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterQueue",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      distributionPolicyId: {
        serializedName: "distributionPolicyId",
        type: {
          name: "String"
        }
      },
      labels: {
        serializedName: "labels",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      exceptionPolicyId: {
        serializedName: "exceptionPolicyId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouterQueueCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterQueueCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterQueueItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouterQueueItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterQueueItem",
    modelProperties: {
      queue: {
        serializedName: "queue",
        type: {
          name: "Composite",
          className: "RouterQueue"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouterQueueStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterQueueStatistics",
    modelProperties: {
      queueId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "queueId",
        required: true,
        type: {
          name: "String"
        }
      },
      length: {
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      },
      estimatedWaitTimeMinutes: {
        serializedName: "estimatedWaitTimeMinutes",
        type: {
          name: "Dictionary",
          value: { type: { name: "Number" } }
        }
      },
      longestJobWaitTimeMinutes: {
        serializedName: "longestJobWaitTimeMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RouterWorker: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterWorker",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      queueAssignments: {
        serializedName: "queueAssignments",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      totalCapacity: {
        serializedName: "totalCapacity",
        type: {
          name: "Number"
        }
      },
      labels: {
        serializedName: "labels",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      channelConfigurations: {
        serializedName: "channelConfigurations",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "ChannelConfiguration" }
          }
        }
      },
      offers: {
        serializedName: "offers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterJobOffer"
            }
          }
        }
      },
      assignedJobs: {
        serializedName: "assignedJobs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterWorkerAssignment"
            }
          }
        }
      },
      loadRatio: {
        serializedName: "loadRatio",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      availableForOffers: {
        serializedName: "availableForOffers",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ChannelConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChannelConfiguration",
    modelProperties: {
      capacityCostPerJob: {
        serializedName: "capacityCostPerJob",
        required: true,
        type: {
          name: "Number"
        }
      },
      maxNumberOfJobs: {
        serializedName: "maxNumberOfJobs",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RouterJobOffer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterJobOffer",
    modelProperties: {
      offerId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "offerId",
        required: true,
        type: {
          name: "String"
        }
      },
      jobId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "jobId",
        required: true,
        type: {
          name: "String"
        }
      },
      capacityCost: {
        serializedName: "capacityCost",
        required: true,
        type: {
          name: "Number"
        }
      },
      offeredAt: {
        serializedName: "offeredAt",
        type: {
          name: "DateTime"
        }
      },
      expiresAt: {
        serializedName: "expiresAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RouterWorkerAssignment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterWorkerAssignment",
    modelProperties: {
      assignmentId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "assignmentId",
        required: true,
        type: {
          name: "String"
        }
      },
      jobId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "jobId",
        required: true,
        type: {
          name: "String"
        }
      },
      capacityCost: {
        serializedName: "capacityCost",
        required: true,
        type: {
          name: "Number"
        }
      },
      assignedAt: {
        serializedName: "assignedAt",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RouterWorkerCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterWorkerCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterWorkerItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RouterWorkerItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterWorkerItem",
    modelProperties: {
      worker: {
        serializedName: "worker",
        type: {
          name: "Composite",
          className: "RouterWorker"
        }
      },
      etag: {
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScoringRuleOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScoringRuleOptions",
    modelProperties: {
      batchSize: {
        serializedName: "batchSize",
        type: {
          name: "Number"
        }
      },
      scoringParameters: {
        serializedName: "scoringParameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      allowScoringBatchOfWorkers: {
        serializedName: "allowScoringBatchOfWorkers",
        type: {
          name: "Boolean"
        }
      },
      descendingOrder: {
        serializedName: "descendingOrder",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RouterQueueSelector: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RouterQueueSelector",
    modelProperties: {
      key: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      },
      labelOperator: {
        serializedName: "labelOperator",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const FunctionRouterRuleCredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FunctionRouterRuleCredential",
    modelProperties: {
      functionKey: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "functionKey",
        type: {
          name: "String"
        }
      },
      appKey: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "appKey",
        type: {
          name: "String"
        }
      },
      clientId: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Oauth2ClientCredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Oauth2ClientCredential",
    modelProperties: {
      clientId: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "clientSecret",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueueWeightedAllocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueueWeightedAllocation",
    modelProperties: {
      weight: {
        serializedName: "weight",
        required: true,
        type: {
          name: "Number"
        }
      },
      queueSelectors: {
        serializedName: "queueSelectors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterQueueSelector"
            }
          }
        }
      }
    }
  }
};

export const WorkerWeightedAllocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkerWeightedAllocation",
    modelProperties: {
      weight: {
        serializedName: "weight",
        required: true,
        type: {
          name: "Number"
        }
      },
      workerSelectors: {
        serializedName: "workerSelectors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterWorkerSelector"
            }
          }
        }
      }
    }
  }
};

export const ConditionalQueueSelectorAttachment: coreClient.CompositeMapper = {
  serializedName: "conditional",
  type: {
    name: "Composite",
    className: "ConditionalQueueSelectorAttachment",
    uberParent: "QueueSelectorAttachment",
    polymorphicDiscriminator:
      QueueSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...QueueSelectorAttachment.type.modelProperties,
      condition: {
        serializedName: "condition",
        type: {
          name: "Composite",
          className: "RouterRule"
        }
      },
      queueSelectors: {
        serializedName: "queueSelectors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterQueueSelector"
            }
          }
        }
      }
    }
  }
};

export const PassThroughQueueSelectorAttachment: coreClient.CompositeMapper = {
  serializedName: "pass-through",
  type: {
    name: "Composite",
    className: "PassThroughQueueSelectorAttachment",
    uberParent: "QueueSelectorAttachment",
    polymorphicDiscriminator:
      QueueSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...QueueSelectorAttachment.type.modelProperties,
      key: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      },
      labelOperator: {
        serializedName: "labelOperator",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuleEngineQueueSelectorAttachment: coreClient.CompositeMapper = {
  serializedName: "rule-engine",
  type: {
    name: "Composite",
    className: "RuleEngineQueueSelectorAttachment",
    uberParent: "QueueSelectorAttachment",
    polymorphicDiscriminator:
      QueueSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...QueueSelectorAttachment.type.modelProperties,
      rule: {
        serializedName: "rule",
        type: {
          name: "Composite",
          className: "RouterRule"
        }
      }
    }
  }
};

export const StaticQueueSelectorAttachment: coreClient.CompositeMapper = {
  serializedName: "static",
  type: {
    name: "Composite",
    className: "StaticQueueSelectorAttachment",
    uberParent: "QueueSelectorAttachment",
    polymorphicDiscriminator:
      QueueSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...QueueSelectorAttachment.type.modelProperties,
      queueSelector: {
        serializedName: "queueSelector",
        type: {
          name: "Composite",
          className: "RouterQueueSelector"
        }
      }
    }
  }
};

export const WeightedAllocationQueueSelectorAttachment: coreClient.CompositeMapper = {
  serializedName: "weighted-allocation-queue-selector",
  type: {
    name: "Composite",
    className: "WeightedAllocationQueueSelectorAttachment",
    uberParent: "QueueSelectorAttachment",
    polymorphicDiscriminator:
      QueueSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...QueueSelectorAttachment.type.modelProperties,
      allocations: {
        serializedName: "allocations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueueWeightedAllocation"
            }
          }
        }
      }
    }
  }
};

export const DirectMapRouterRule: coreClient.CompositeMapper = {
  serializedName: "direct-map-rule",
  type: {
    name: "Composite",
    className: "DirectMapRouterRule",
    uberParent: "RouterRule",
    polymorphicDiscriminator: RouterRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...RouterRule.type.modelProperties
    }
  }
};

export const ExpressionRouterRule: coreClient.CompositeMapper = {
  serializedName: "expression-rule",
  type: {
    name: "Composite",
    className: "ExpressionRouterRule",
    uberParent: "RouterRule",
    polymorphicDiscriminator: RouterRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...RouterRule.type.modelProperties,
      language: {
        serializedName: "language",
        type: {
          name: "String"
        }
      },
      expression: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "expression",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FunctionRouterRule: coreClient.CompositeMapper = {
  serializedName: "azure-function-rule",
  type: {
    name: "Composite",
    className: "FunctionRouterRule",
    uberParent: "RouterRule",
    polymorphicDiscriminator: RouterRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...RouterRule.type.modelProperties,
      functionUri: {
        serializedName: "functionUri",
        required: true,
        type: {
          name: "String"
        }
      },
      credential: {
        serializedName: "credential",
        type: {
          name: "Composite",
          className: "FunctionRouterRuleCredential"
        }
      }
    }
  }
};

export const StaticRouterRule: coreClient.CompositeMapper = {
  serializedName: "static-rule",
  type: {
    name: "Composite",
    className: "StaticRouterRule",
    uberParent: "RouterRule",
    polymorphicDiscriminator: RouterRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...RouterRule.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const WebhookRouterRule: coreClient.CompositeMapper = {
  serializedName: "webhook-rule",
  type: {
    name: "Composite",
    className: "WebhookRouterRule",
    uberParent: "RouterRule",
    polymorphicDiscriminator: RouterRule.type.polymorphicDiscriminator,
    modelProperties: {
      ...RouterRule.type.modelProperties,
      authorizationServerUri: {
        serializedName: "authorizationServerUri",
        type: {
          name: "String"
        }
      },
      clientCredential: {
        serializedName: "clientCredential",
        type: {
          name: "Composite",
          className: "Oauth2ClientCredential"
        }
      },
      webhookUri: {
        serializedName: "webhookUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConditionalWorkerSelectorAttachment: coreClient.CompositeMapper = {
  serializedName: "conditional",
  type: {
    name: "Composite",
    className: "ConditionalWorkerSelectorAttachment",
    uberParent: "WorkerSelectorAttachment",
    polymorphicDiscriminator:
      WorkerSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...WorkerSelectorAttachment.type.modelProperties,
      condition: {
        serializedName: "condition",
        type: {
          name: "Composite",
          className: "RouterRule"
        }
      },
      workerSelectors: {
        serializedName: "workerSelectors",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterWorkerSelector"
            }
          }
        }
      }
    }
  }
};

export const PassThroughWorkerSelectorAttachment: coreClient.CompositeMapper = {
  serializedName: "pass-through",
  type: {
    name: "Composite",
    className: "PassThroughWorkerSelectorAttachment",
    uberParent: "WorkerSelectorAttachment",
    polymorphicDiscriminator:
      WorkerSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...WorkerSelectorAttachment.type.modelProperties,
      key: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "key",
        required: true,
        type: {
          name: "String"
        }
      },
      labelOperator: {
        serializedName: "labelOperator",
        required: true,
        type: {
          name: "String"
        }
      },
      expiresAfterSeconds: {
        serializedName: "expiresAfterSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RuleEngineWorkerSelectorAttachment: coreClient.CompositeMapper = {
  serializedName: "rule-engine",
  type: {
    name: "Composite",
    className: "RuleEngineWorkerSelectorAttachment",
    uberParent: "WorkerSelectorAttachment",
    polymorphicDiscriminator:
      WorkerSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...WorkerSelectorAttachment.type.modelProperties,
      rule: {
        serializedName: "rule",
        type: {
          name: "Composite",
          className: "RouterRule"
        }
      }
    }
  }
};

export const StaticWorkerSelectorAttachment: coreClient.CompositeMapper = {
  serializedName: "static",
  type: {
    name: "Composite",
    className: "StaticWorkerSelectorAttachment",
    uberParent: "WorkerSelectorAttachment",
    polymorphicDiscriminator:
      WorkerSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...WorkerSelectorAttachment.type.modelProperties,
      workerSelector: {
        serializedName: "workerSelector",
        type: {
          name: "Composite",
          className: "RouterWorkerSelector"
        }
      }
    }
  }
};

export const WeightedAllocationWorkerSelectorAttachment: coreClient.CompositeMapper = {
  serializedName: "weighted-allocation-worker-selector",
  type: {
    name: "Composite",
    className: "WeightedAllocationWorkerSelectorAttachment",
    uberParent: "WorkerSelectorAttachment",
    polymorphicDiscriminator:
      WorkerSelectorAttachment.type.polymorphicDiscriminator,
    modelProperties: {
      ...WorkerSelectorAttachment.type.modelProperties,
      allocations: {
        serializedName: "allocations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkerWeightedAllocation"
            }
          }
        }
      }
    }
  }
};

export const BestWorkerMode: coreClient.CompositeMapper = {
  serializedName: "best-worker",
  type: {
    name: "Composite",
    className: "BestWorkerMode",
    uberParent: "DistributionMode",
    polymorphicDiscriminator: DistributionMode.type.polymorphicDiscriminator,
    modelProperties: {
      ...DistributionMode.type.modelProperties,
      scoringRule: {
        serializedName: "scoringRule",
        type: {
          name: "Composite",
          className: "RouterRule"
        }
      },
      scoringRuleOptions: {
        serializedName: "scoringRuleOptions",
        type: {
          name: "Composite",
          className: "ScoringRuleOptions"
        }
      }
    }
  }
};

export const LongestIdleMode: coreClient.CompositeMapper = {
  serializedName: "longest-idle",
  type: {
    name: "Composite",
    className: "LongestIdleMode",
    uberParent: "DistributionMode",
    polymorphicDiscriminator: DistributionMode.type.polymorphicDiscriminator,
    modelProperties: {
      ...DistributionMode.type.modelProperties
    }
  }
};

export const RoundRobinMode: coreClient.CompositeMapper = {
  serializedName: "round-robin",
  type: {
    name: "Composite",
    className: "RoundRobinMode",
    uberParent: "DistributionMode",
    polymorphicDiscriminator: DistributionMode.type.polymorphicDiscriminator,
    modelProperties: {
      ...DistributionMode.type.modelProperties
    }
  }
};

export const QueueLengthExceptionTrigger: coreClient.CompositeMapper = {
  serializedName: "queue-length",
  type: {
    name: "Composite",
    className: "QueueLengthExceptionTrigger",
    uberParent: "ExceptionTrigger",
    polymorphicDiscriminator: ExceptionTrigger.type.polymorphicDiscriminator,
    modelProperties: {
      ...ExceptionTrigger.type.modelProperties,
      threshold: {
        serializedName: "threshold",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const WaitTimeExceptionTrigger: coreClient.CompositeMapper = {
  serializedName: "wait-time",
  type: {
    name: "Composite",
    className: "WaitTimeExceptionTrigger",
    uberParent: "ExceptionTrigger",
    polymorphicDiscriminator: ExceptionTrigger.type.polymorphicDiscriminator,
    modelProperties: {
      ...ExceptionTrigger.type.modelProperties,
      thresholdSeconds: {
        serializedName: "thresholdSeconds",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CancelExceptionAction: coreClient.CompositeMapper = {
  serializedName: "cancel",
  type: {
    name: "Composite",
    className: "CancelExceptionAction",
    uberParent: "ExceptionAction",
    polymorphicDiscriminator: ExceptionAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...ExceptionAction.type.modelProperties,
      note: {
        constraints: {
          MaxLength: 2000
        },
        serializedName: "note",
        type: {
          name: "String"
        }
      },
      dispositionCode: {
        constraints: {
          MaxLength: 500
        },
        serializedName: "dispositionCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManualReclassifyExceptionAction: coreClient.CompositeMapper = {
  serializedName: "manual-reclassify",
  type: {
    name: "Composite",
    className: "ManualReclassifyExceptionAction",
    uberParent: "ExceptionAction",
    polymorphicDiscriminator: ExceptionAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...ExceptionAction.type.modelProperties,
      queueId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "queueId",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      workerSelectors: {
        serializedName: "workerSelectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RouterWorkerSelector"
            }
          }
        }
      }
    }
  }
};

export const ReclassifyExceptionAction: coreClient.CompositeMapper = {
  serializedName: "reclassify",
  type: {
    name: "Composite",
    className: "ReclassifyExceptionAction",
    uberParent: "ExceptionAction",
    polymorphicDiscriminator: ExceptionAction.type.polymorphicDiscriminator,
    modelProperties: {
      ...ExceptionAction.type.modelProperties,
      classificationPolicyId: {
        constraints: {
          MaxLength: 50
        },
        serializedName: "classificationPolicyId",
        type: {
          name: "String"
        }
      },
      labelsToUpsert: {
        serializedName: "labelsToUpsert",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export let discriminators = {
  QueueSelectorAttachment: QueueSelectorAttachment,
  RouterRule: RouterRule,
  WorkerSelectorAttachment: WorkerSelectorAttachment,
  DistributionMode: DistributionMode,
  ExceptionTrigger: ExceptionTrigger,
  ExceptionAction: ExceptionAction,
  "QueueSelectorAttachment.conditional": ConditionalQueueSelectorAttachment,
  "QueueSelectorAttachment.pass-through": PassThroughQueueSelectorAttachment,
  "QueueSelectorAttachment.rule-engine": RuleEngineQueueSelectorAttachment,
  "QueueSelectorAttachment.static": StaticQueueSelectorAttachment,
  "QueueSelectorAttachment.weighted-allocation-queue-selector": WeightedAllocationQueueSelectorAttachment,
  "RouterRule.direct-map-rule": DirectMapRouterRule,
  "RouterRule.expression-rule": ExpressionRouterRule,
  "RouterRule.azure-function-rule": FunctionRouterRule,
  "RouterRule.static-rule": StaticRouterRule,
  "RouterRule.webhook-rule": WebhookRouterRule,
  "WorkerSelectorAttachment.conditional": ConditionalWorkerSelectorAttachment,
  "WorkerSelectorAttachment.pass-through": PassThroughWorkerSelectorAttachment,
  "WorkerSelectorAttachment.rule-engine": RuleEngineWorkerSelectorAttachment,
  "WorkerSelectorAttachment.static": StaticWorkerSelectorAttachment,
  "WorkerSelectorAttachment.weighted-allocation-worker-selector": WeightedAllocationWorkerSelectorAttachment,
  "DistributionMode.best-worker": BestWorkerMode,
  "DistributionMode.longest-idle": LongestIdleMode,
  "DistributionMode.round-robin": RoundRobinMode,
  "ExceptionTrigger.queue-length": QueueLengthExceptionTrigger,
  "ExceptionTrigger.wait-time": WaitTimeExceptionTrigger,
  "ExceptionAction.cancel": CancelExceptionAction,
  "ExceptionAction.manual-reclassify": ManualReclassifyExceptionAction,
  "ExceptionAction.reclassify": ReclassifyExceptionAction
};
