/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-http";
import {
  UpsertChannelRequest as UpsertChannelRequestMapper,
  UpsertClassificationPolicyRequest as UpsertClassificationPolicyRequestMapper,
  UpsertDistributionPolicyRequest as UpsertDistributionPolicyRequestMapper,
  UpsertExceptionPolicyRequest as UpsertExceptionPolicyRequestMapper,
  CreateJobRequest as CreateJobRequestMapper,
  UpdateJobLabelsRequest as UpdateJobLabelsRequestMapper,
  ReclassifyJobRequest as ReclassifyJobRequestMapper,
  UpdateJobClassificationRequest as UpdateJobClassificationRequestMapper,
  CancelJobRequest as CancelJobRequestMapper,
  CompleteJobRequest as CompleteJobRequestMapper,
  CloseJobRequest as CloseJobRequestMapper,
  UpsertQueueRequest as UpsertQueueRequestMapper,
  RegisterWorkerRequest as RegisterWorkerRequestMapper,
  ReleaseAssignmentRequest as ReleaseAssignmentRequestMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: UpsertChannelRequestMapper
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const endpoint: OperationURLParameter = {
  parameterPath: "endpoint",
  mapper: {
    serializedName: "endpoint",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const ifMatch: OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "if-Match",
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2021-04-07-preview1",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const typeParam: OperationQueryParameter = {
  parameterPath: ["options", "typeParam"],
  mapper: {
    serializedName: "type",
    type: {
      name: "String"
    }
  }
};

export const maxPageSize: OperationQueryParameter = {
  parameterPath: ["options", "maxPageSize"],
  mapper: {
    defaultValue: 20,
    serializedName: "maxPageSize",
    type: {
      name: "Number"
    }
  }
};

export const continuationToken: OperationQueryParameter = {
  parameterPath: ["options", "continuationToken"],
  mapper: {
    serializedName: "continuationToken",
    type: {
      name: "String"
    }
  }
};

export const id: OperationURLParameter = {
  parameterPath: "id",
  mapper: {
    serializedName: "id",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: UpsertClassificationPolicyRequestMapper
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: UpsertDistributionPolicyRequestMapper
};

export const body3: OperationParameter = {
  parameterPath: "body",
  mapper: UpsertExceptionPolicyRequestMapper
};

export const body4: OperationParameter = {
  parameterPath: "body",
  mapper: CreateJobRequestMapper
};

export const status: OperationQueryParameter = {
  parameterPath: ["options", "status"],
  mapper: {
    defaultValue: "All",
    serializedName: "status",
    type: {
      name: "Enum",
      allowedValues: [
        "all",
        "pendingClassification",
        "queued",
        "assigned",
        "completed",
        "closed",
        "cancelled",
        "classificationFailed",
        "active"
      ]
    }
  }
};

export const jobId: OperationURLParameter = {
  parameterPath: "jobId",
  mapper: {
    serializedName: "jobId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const queueId: OperationURLParameter = {
  parameterPath: "queueId",
  mapper: {
    serializedName: "queueId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const labels: OperationParameter = {
  parameterPath: "labels",
  mapper: UpdateJobLabelsRequestMapper
};

export const note: OperationParameter = {
  parameterPath: ["options", "note"],
  mapper: UpdateJobLabelsRequestMapper
};

export const body6: OperationParameter = {
  parameterPath: "body",
  mapper: ReclassifyJobRequestMapper
};

export const queueId1: OperationParameter = {
  parameterPath: ["options", "queueId"],
  mapper: UpdateJobClassificationRequestMapper
};

export const priority: OperationParameter = {
  parameterPath: ["options", "priority"],
  mapper: UpdateJobClassificationRequestMapper
};

export const workerSelectors: OperationParameter = {
  parameterPath: ["options", "workerSelectors"],
  mapper: UpdateJobClassificationRequestMapper
};

export const note1: OperationParameter = {
  parameterPath: ["options", "note"],
  mapper: UpdateJobClassificationRequestMapper
};

export const note2: OperationParameter = {
  parameterPath: ["options", "note"],
  mapper: CancelJobRequestMapper
};

export const dispositionCode: OperationParameter = {
  parameterPath: ["options", "dispositionCode"],
  mapper: CancelJobRequestMapper
};

export const assignmentId: OperationParameter = {
  parameterPath: "assignmentId",
  mapper: CompleteJobRequestMapper
};

export const note3: OperationParameter = {
  parameterPath: ["options", "note"],
  mapper: CompleteJobRequestMapper
};

export const assignmentId1: OperationParameter = {
  parameterPath: "assignmentId",
  mapper: CloseJobRequestMapper
};

export const dispositionCode1: OperationParameter = {
  parameterPath: ["options", "dispositionCode"],
  mapper: CloseJobRequestMapper
};

export const releaseTime: OperationParameter = {
  parameterPath: ["options", "releaseTime"],
  mapper: CloseJobRequestMapper
};

export const note4: OperationParameter = {
  parameterPath: ["options", "note"],
  mapper: CloseJobRequestMapper
};

export const offerId: OperationURLParameter = {
  parameterPath: "offerId",
  mapper: {
    serializedName: "offerId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const workerId: OperationURLParameter = {
  parameterPath: "workerId",
  mapper: {
    serializedName: "workerId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body11: OperationParameter = {
  parameterPath: "body",
  mapper: UpsertQueueRequestMapper
};

export const body12: OperationParameter = {
  parameterPath: "body",
  mapper: RegisterWorkerRequestMapper
};

export const status1: OperationQueryParameter = {
  parameterPath: ["options", "status"],
  mapper: {
    defaultValue: "All",
    serializedName: "status",
    type: {
      name: "Enum",
      allowedValues: ["active", "draining", "inactive", "all"]
    }
  }
};

export const channelId: OperationQueryParameter = {
  parameterPath: ["options", "channelId"],
  mapper: {
    serializedName: "channelId",
    type: {
      name: "String"
    }
  }
};

export const queueId2: OperationQueryParameter = {
  parameterPath: ["options", "queueId"],
  mapper: {
    serializedName: "queueId",
    type: {
      name: "String"
    }
  }
};

export const hasCapacity: OperationQueryParameter = {
  parameterPath: ["options", "hasCapacity"],
  mapper: {
    serializedName: "hasCapacity",
    type: {
      name: "Boolean"
    }
  }
};

export const body13: OperationParameter = {
  parameterPath: ["options", "body"],
  mapper: ReleaseAssignmentRequestMapper
};

export const assignmentId2: OperationURLParameter = {
  parameterPath: "assignmentId",
  mapper: {
    serializedName: "assignmentId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
