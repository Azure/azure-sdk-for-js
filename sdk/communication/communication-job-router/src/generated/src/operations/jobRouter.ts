/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { JobRouter } from "../operationsInterfaces";
import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { JobRouterApiClientContext } from "../jobRouterApiClientContext";
import {
  PagedClassificationPolicy,
  JobRouterListClassificationPoliciesNextOptionalParams,
  JobRouterListClassificationPoliciesOptionalParams,
  PagedDistributionPolicy,
  JobRouterListDistributionPoliciesNextOptionalParams,
  JobRouterListDistributionPoliciesOptionalParams,
  PagedExceptionPolicy,
  JobRouterListExceptionPoliciesNextOptionalParams,
  JobRouterListExceptionPoliciesOptionalParams,
  PagedJob,
  JobRouterListJobsNextOptionalParams,
  JobRouterListJobsOptionalParams,
  PagedQueue,
  JobRouterListQueuesNextOptionalParams,
  JobRouterListQueuesOptionalParams,
  PagedWorker,
  JobRouterListWorkersNextOptionalParams,
  JobRouterListWorkersOptionalParams,
  CreateClassificationPolicyRequest,
  JobRouterCreateClassificationPolicyV2OptionalParams,
  JobRouterCreateClassificationPolicyV2Response,
  JobRouterListClassificationPoliciesResponse,
  JobRouterPatchClassificationPolicyV2OptionalParams,
  JobRouterPatchClassificationPolicyV2Response,
  JobRouterGetClassificationPolicyOptionalParams,
  JobRouterGetClassificationPolicyResponse,
  JobRouterDeleteClassificationPolicyOptionalParams,
  DistributionPolicy,
  JobRouterCreateDistributionPolicyV2OptionalParams,
  JobRouterCreateDistributionPolicyV2Response,
  JobRouterListDistributionPoliciesResponse,
  JobRouterPatchDistributionPolicyOptionalParams,
  JobRouterPatchDistributionPolicyResponse,
  JobRouterGetDistributionPolicyOptionalParams,
  JobRouterGetDistributionPolicyResponse,
  JobRouterDeleteDistributionPolicyOptionalParams,
  ExceptionPolicy,
  JobRouterCreateExceptionPolicyV2OptionalParams,
  JobRouterCreateExceptionPolicyV2Response,
  JobRouterListExceptionPoliciesResponse,
  JobRouterPatchExceptionPolicyV2OptionalParams,
  JobRouterPatchExceptionPolicyV2Response,
  JobRouterGetExceptionPolicyOptionalParams,
  JobRouterGetExceptionPolicyResponse,
  JobRouterDeleteExceptionPolicyOptionalParams,
  RouterJob,
  JobRouterCreateJobV2OptionalParams,
  JobRouterCreateJobV2Response,
  JobRouterListJobsResponse,
  JobRouterGetJobOptionalParams,
  JobRouterGetJobResponse,
  JobRouterUpdateJobOptionalParams,
  JobRouterUpdateJobResponse,
  JobRouterCancelJobActionOptionalParams,
  JobRouterCompleteJobActionOptionalParams,
  JobRouterCloseJobActionOptionalParams,
  JobRouterGetInQueuePositionOptionalParams,
  JobRouterGetInQueuePositionResponse,
  JobRouterDeleteJobOptionalParams,
  JobRouterAcceptJobActionOptionalParams,
  JobRouterAcceptJobActionResponse,
  JobRouterDeclineJobActionOptionalParams,
  JobQueue,
  JobRouterCreateQueueOptionalParams,
  JobRouterCreateQueueResponse,
  JobRouterListQueuesResponse,
  JobRouterUpdateQueueOptionalParams,
  JobRouterUpdateQueueResponse,
  JobRouterGetQueueOptionalParams,
  JobRouterGetQueueResponse,
  JobRouterDeleteQueueOptionalParams,
  RegisterWorkerRequest,
  JobRouterRegisterWorkerV2OptionalParams,
  JobRouterRegisterWorkerV2Response,
  JobRouterDeregisterWorkerV2OptionalParams,
  JobRouterListWorkersResponse,
  JobRouterGetWorkerOptionalParams,
  JobRouterGetWorkerResponse,
  JobRouterReleaseAssignmentActionOptionalParams,
  JobRouterDeleteWorkerOptionalParams,
  JobRouterListClassificationPoliciesNextResponse,
  JobRouterListDistributionPoliciesNextResponse,
  JobRouterListExceptionPoliciesNextResponse,
  JobRouterListJobsNextResponse,
  JobRouterListQueuesNextResponse,
  JobRouterListWorkersNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing JobRouter operations. */
export class JobRouterImpl implements JobRouter {
  private readonly client: JobRouterApiClientContext;

  /**
   * Initialize a new instance of the class JobRouter class.
   * @param client Reference to the service client
   */
  constructor(client: JobRouterApiClientContext) {
    this.client = client;
  }

  /**
   * Retrieves existing classification policies
   * @param options The options parameters.
   */
  public listClassificationPolicies(
    options?: JobRouterListClassificationPoliciesOptionalParams
  ): PagedAsyncIterableIterator<PagedClassificationPolicy> {
    const iter = this.listClassificationPoliciesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listClassificationPoliciesPagingPage(options);
      }
    };
  }

  private async *listClassificationPoliciesPagingPage(
    options?: JobRouterListClassificationPoliciesOptionalParams
  ): AsyncIterableIterator<PagedClassificationPolicy[]> {
    let result = await this._listClassificationPolicies(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listClassificationPoliciesNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listClassificationPoliciesPagingAll(
    options?: JobRouterListClassificationPoliciesOptionalParams
  ): AsyncIterableIterator<PagedClassificationPolicy> {
    for await (const page of this.listClassificationPoliciesPagingPage(
      options
    )) {
      yield* page;
    }
  }

  /**
   * Retrieves existing distribution policies
   * @param options The options parameters.
   */
  public listDistributionPolicies(
    options?: JobRouterListDistributionPoliciesOptionalParams
  ): PagedAsyncIterableIterator<PagedDistributionPolicy> {
    const iter = this.listDistributionPoliciesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listDistributionPoliciesPagingPage(options);
      }
    };
  }

  private async *listDistributionPoliciesPagingPage(
    options?: JobRouterListDistributionPoliciesOptionalParams
  ): AsyncIterableIterator<PagedDistributionPolicy[]> {
    let result = await this._listDistributionPolicies(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listDistributionPoliciesNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listDistributionPoliciesPagingAll(
    options?: JobRouterListDistributionPoliciesOptionalParams
  ): AsyncIterableIterator<PagedDistributionPolicy> {
    for await (const page of this.listDistributionPoliciesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Retrieves existing exception policies
   * @param options The options parameters.
   */
  public listExceptionPolicies(
    options?: JobRouterListExceptionPoliciesOptionalParams
  ): PagedAsyncIterableIterator<PagedExceptionPolicy> {
    const iter = this.listExceptionPoliciesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listExceptionPoliciesPagingPage(options);
      }
    };
  }

  private async *listExceptionPoliciesPagingPage(
    options?: JobRouterListExceptionPoliciesOptionalParams
  ): AsyncIterableIterator<PagedExceptionPolicy[]> {
    let result = await this._listExceptionPolicies(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listExceptionPoliciesNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listExceptionPoliciesPagingAll(
    options?: JobRouterListExceptionPoliciesOptionalParams
  ): AsyncIterableIterator<PagedExceptionPolicy> {
    for await (const page of this.listExceptionPoliciesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Retrieves list of jobs based on filter parameters
   * @param options The options parameters.
   */
  public listJobs(
    options?: JobRouterListJobsOptionalParams
  ): PagedAsyncIterableIterator<PagedJob> {
    const iter = this.listJobsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listJobsPagingPage(options);
      }
    };
  }

  private async *listJobsPagingPage(
    options?: JobRouterListJobsOptionalParams
  ): AsyncIterableIterator<PagedJob[]> {
    let result = await this._listJobs(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listJobsNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listJobsPagingAll(
    options?: JobRouterListJobsOptionalParams
  ): AsyncIterableIterator<PagedJob> {
    for await (const page of this.listJobsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Retrieves existing queues
   * @param options The options parameters.
   */
  public listQueues(
    options?: JobRouterListQueuesOptionalParams
  ): PagedAsyncIterableIterator<PagedQueue> {
    const iter = this.listQueuesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listQueuesPagingPage(options);
      }
    };
  }

  private async *listQueuesPagingPage(
    options?: JobRouterListQueuesOptionalParams
  ): AsyncIterableIterator<PagedQueue[]> {
    let result = await this._listQueues(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listQueuesNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listQueuesPagingAll(
    options?: JobRouterListQueuesOptionalParams
  ): AsyncIterableIterator<PagedQueue> {
    for await (const page of this.listQueuesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Retrieves existing workers.
   * @param options The options parameters.
   */
  public listWorkers(
    options?: JobRouterListWorkersOptionalParams
  ): PagedAsyncIterableIterator<PagedWorker> {
    const iter = this.listWorkersPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listWorkersPagingPage(options);
      }
    };
  }

  private async *listWorkersPagingPage(
    options?: JobRouterListWorkersOptionalParams
  ): AsyncIterableIterator<PagedWorker[]> {
    let result = await this._listWorkers(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listWorkersNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listWorkersPagingAll(
    options?: JobRouterListWorkersOptionalParams
  ): AsyncIterableIterator<PagedWorker> {
    for await (const page of this.listWorkersPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Creates a new classification policy.
   * @param createClassificationPolicyRequest Request to create or update classification policy
   * @param options The options parameters.
   */
  createClassificationPolicyV2(
    createClassificationPolicyRequest: CreateClassificationPolicyRequest,
    options?: JobRouterCreateClassificationPolicyV2OptionalParams
  ): Promise<JobRouterCreateClassificationPolicyV2Response> {
    const operationArguments: coreHttp.OperationArguments = {
      createClassificationPolicyRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createClassificationPolicyV2OperationSpec
    ) as Promise<JobRouterCreateClassificationPolicyV2Response>;
  }

  /**
   * Retrieves existing classification policies
   * @param options The options parameters.
   */
  private _listClassificationPolicies(
    options?: JobRouterListClassificationPoliciesOptionalParams
  ): Promise<JobRouterListClassificationPoliciesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listClassificationPoliciesOperationSpec
    ) as Promise<JobRouterListClassificationPoliciesResponse>;
  }

  /**
   * Updates a classification policy.
   * @param id
   * @param options The options parameters.
   */
  patchClassificationPolicyV2(
    id: string,
    options?: JobRouterPatchClassificationPolicyV2OptionalParams
  ): Promise<JobRouterPatchClassificationPolicyV2Response> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      patchClassificationPolicyV2OperationSpec
    ) as Promise<JobRouterPatchClassificationPolicyV2Response>;
  }

  /**
   * Retrieves an existing classification policy by Id
   * @param id Id of the classification policy
   * @param options The options parameters.
   */
  getClassificationPolicy(
    id: string,
    options?: JobRouterGetClassificationPolicyOptionalParams
  ): Promise<JobRouterGetClassificationPolicyResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getClassificationPolicyOperationSpec
    ) as Promise<JobRouterGetClassificationPolicyResponse>;
  }

  /**
   * Delete a classification policy by Id
   * @param id Id of the classification policy
   * @param options The options parameters.
   */
  deleteClassificationPolicy(
    id: string,
    options?: JobRouterDeleteClassificationPolicyOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteClassificationPolicyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Creates a new distribution policy.
   * @param distributionPolicy Request to create distribution policy
   * @param options The options parameters.
   */
  createDistributionPolicyV2(
    distributionPolicy: DistributionPolicy,
    options?: JobRouterCreateDistributionPolicyV2OptionalParams
  ): Promise<JobRouterCreateDistributionPolicyV2Response> {
    const operationArguments: coreHttp.OperationArguments = {
      distributionPolicy,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createDistributionPolicyV2OperationSpec
    ) as Promise<JobRouterCreateDistributionPolicyV2Response>;
  }

  /**
   * Retrieves existing distribution policies
   * @param options The options parameters.
   */
  private _listDistributionPolicies(
    options?: JobRouterListDistributionPoliciesOptionalParams
  ): Promise<JobRouterListDistributionPoliciesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listDistributionPoliciesOperationSpec
    ) as Promise<JobRouterListDistributionPoliciesResponse>;
  }

  /**
   * Updates a distribution policy.
   * @param id Id of the distribution policy
   * @param options The options parameters.
   */
  patchDistributionPolicy(
    id: string,
    options?: JobRouterPatchDistributionPolicyOptionalParams
  ): Promise<JobRouterPatchDistributionPolicyResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      patchDistributionPolicyOperationSpec
    ) as Promise<JobRouterPatchDistributionPolicyResponse>;
  }

  /**
   * Retrieves an existing distribution policy by Id
   * @param id Id of the distribution policy
   * @param options The options parameters.
   */
  getDistributionPolicy(
    id: string,
    options?: JobRouterGetDistributionPolicyOptionalParams
  ): Promise<JobRouterGetDistributionPolicyResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getDistributionPolicyOperationSpec
    ) as Promise<JobRouterGetDistributionPolicyResponse>;
  }

  /**
   * Delete a distribution policy by Id
   * @param id Id of the distribution policy
   * @param options The options parameters.
   */
  deleteDistributionPolicy(
    id: string,
    options?: JobRouterDeleteDistributionPolicyOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteDistributionPolicyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Creates an exception policy
   * @param exceptionPolicy Model of exception policy to be created
   * @param options The options parameters.
   */
  createExceptionPolicyV2(
    exceptionPolicy: ExceptionPolicy,
    options?: JobRouterCreateExceptionPolicyV2OptionalParams
  ): Promise<JobRouterCreateExceptionPolicyV2Response> {
    const operationArguments: coreHttp.OperationArguments = {
      exceptionPolicy,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createExceptionPolicyV2OperationSpec
    ) as Promise<JobRouterCreateExceptionPolicyV2Response>;
  }

  /**
   * Retrieves existing exception policies
   * @param options The options parameters.
   */
  private _listExceptionPolicies(
    options?: JobRouterListExceptionPoliciesOptionalParams
  ): Promise<JobRouterListExceptionPoliciesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listExceptionPoliciesOperationSpec
    ) as Promise<JobRouterListExceptionPoliciesResponse>;
  }

  /**
   * Updates an exception policy
   * @param id Id of the exception policy
   * @param options The options parameters.
   */
  patchExceptionPolicyV2(
    id: string,
    options?: JobRouterPatchExceptionPolicyV2OptionalParams
  ): Promise<JobRouterPatchExceptionPolicyV2Response> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      patchExceptionPolicyV2OperationSpec
    ) as Promise<JobRouterPatchExceptionPolicyV2Response>;
  }

  /**
   * Retrieves an existing exception policy by Id
   * @param id Id of the exception policy to retrieve
   * @param options The options parameters.
   */
  getExceptionPolicy(
    id: string,
    options?: JobRouterGetExceptionPolicyOptionalParams
  ): Promise<JobRouterGetExceptionPolicyResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getExceptionPolicyOperationSpec
    ) as Promise<JobRouterGetExceptionPolicyResponse>;
  }

  /**
   * Deletes a exception policy by Id
   * @param id Id of the exception policy to delete
   * @param options The options parameters.
   */
  deleteExceptionPolicy(
    id: string,
    options?: JobRouterDeleteExceptionPolicyOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteExceptionPolicyOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Creates a new job to be routed.
   * @param routerJob Model of job to be created
   * @param options The options parameters.
   */
  createJobV2(
    routerJob: RouterJob,
    options?: JobRouterCreateJobV2OptionalParams
  ): Promise<JobRouterCreateJobV2Response> {
    const operationArguments: coreHttp.OperationArguments = {
      routerJob,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createJobV2OperationSpec
    ) as Promise<JobRouterCreateJobV2Response>;
  }

  /**
   * Retrieves list of jobs based on filter parameters
   * @param options The options parameters.
   */
  private _listJobs(
    options?: JobRouterListJobsOptionalParams
  ): Promise<JobRouterListJobsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listJobsOperationSpec
    ) as Promise<JobRouterListJobsResponse>;
  }

  /**
   * Retrieves an existing job by Id
   * @param id Id of the job to retrieve
   * @param options The options parameters.
   */
  getJob(
    id: string,
    options?: JobRouterGetJobOptionalParams
  ): Promise<JobRouterGetJobResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getJobOperationSpec
    ) as Promise<JobRouterGetJobResponse>;
  }

  /**
   * Update job by id.
   * @param id Id of the job
   * @param options The options parameters.
   */
  updateJob(
    id: string,
    options?: JobRouterUpdateJobOptionalParams
  ): Promise<JobRouterUpdateJobResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      updateJobOperationSpec
    ) as Promise<JobRouterUpdateJobResponse>;
  }

  /**
   * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
   * @param id Id of the job
   * @param options The options parameters.
   */
  cancelJobAction(
    id: string,
    options?: JobRouterCancelJobActionOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      cancelJobActionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Completes an assigned job.
   * @param id Id of the job
   * @param assignmentId The assignment within the job to complete.
   * @param options The options parameters.
   */
  completeJobAction(
    id: string,
    assignmentId: string,
    options?: JobRouterCompleteJobActionOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      assignmentId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      completeJobActionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Closes a completed job.
   * @param id Id of the job
   * @param assignmentId The assignment within which the job is to be closed.
   * @param options The options parameters.
   */
  closeJobAction(
    id: string,
    assignmentId: string,
    options?: JobRouterCloseJobActionOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      assignmentId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      closeJobActionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets a job's position details.
   * @param id Id of the job
   * @param options The options parameters.
   */
  getInQueuePosition(
    id: string,
    options?: JobRouterGetInQueuePositionOptionalParams
  ): Promise<JobRouterGetInQueuePositionResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getInQueuePositionOperationSpec
    ) as Promise<JobRouterGetInQueuePositionResponse>;
  }

  /**
   * Deletes a job and all of its traces.
   * @param id
   * @param options The options parameters.
   */
  deleteJob(
    id: string,
    options?: JobRouterDeleteJobOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteJobOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job
   * already.
   * @param offerId Id of the offer
   * @param workerId Id of the worker
   * @param options The options parameters.
   */
  acceptJobAction(
    offerId: string,
    workerId: string,
    options?: JobRouterAcceptJobActionOptionalParams
  ): Promise<JobRouterAcceptJobActionResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      offerId,
      workerId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      acceptJobActionOperationSpec
    ) as Promise<JobRouterAcceptJobActionResponse>;
  }

  /**
   * Declines an offer to work on a job.
   * @param offerId Id of the offer
   * @param workerId Id of the worker
   * @param options The options parameters.
   */
  declineJobAction(
    offerId: string,
    workerId: string,
    options?: JobRouterDeclineJobActionOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      offerId,
      workerId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      declineJobActionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Creates a queue.
   * @param jobQueue Model of queue to be created
   * @param options The options parameters.
   */
  createQueue(
    jobQueue: JobQueue,
    options?: JobRouterCreateQueueOptionalParams
  ): Promise<JobRouterCreateQueueResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      jobQueue,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      createQueueOperationSpec
    ) as Promise<JobRouterCreateQueueResponse>;
  }

  /**
   * Retrieves existing queues
   * @param options The options parameters.
   */
  private _listQueues(
    options?: JobRouterListQueuesOptionalParams
  ): Promise<JobRouterListQueuesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listQueuesOperationSpec
    ) as Promise<JobRouterListQueuesResponse>;
  }

  /**
   * Updates a queue.
   * @param id Id of the queue
   * @param options The options parameters.
   */
  updateQueue(
    id: string,
    options?: JobRouterUpdateQueueOptionalParams
  ): Promise<JobRouterUpdateQueueResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      updateQueueOperationSpec
    ) as Promise<JobRouterUpdateQueueResponse>;
  }

  /**
   * Retrieves an existing queue by Id
   * @param id Id of the queue to retrieve
   * @param options The options parameters.
   */
  getQueue(
    id: string,
    options?: JobRouterGetQueueOptionalParams
  ): Promise<JobRouterGetQueueResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getQueueOperationSpec
    ) as Promise<JobRouterGetQueueResponse>;
  }

  /**
   * Deletes a queue by Id
   * @param id Id of the queue to delete
   * @param options The options parameters.
   */
  deleteQueue(
    id: string,
    options?: JobRouterDeleteQueueOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      id,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteQueueOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Registers a worker to process jobs.
   * @param workerId Id of the worker to register
   * @param registerWorkerRequest The request to register the worker
   * @param options The options parameters.
   */
  registerWorkerV2(
    workerId: string,
    registerWorkerRequest: RegisterWorkerRequest,
    options?: JobRouterRegisterWorkerV2OptionalParams
  ): Promise<JobRouterRegisterWorkerV2Response> {
    const operationArguments: coreHttp.OperationArguments = {
      workerId,
      registerWorkerRequest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      registerWorkerV2OperationSpec
    ) as Promise<JobRouterRegisterWorkerV2Response>;
  }

  /**
   * Deregisters a worker from processing jobs.
   * @param workerId Id of the worker to deregister
   * @param options The options parameters.
   */
  deregisterWorkerV2(
    workerId: string,
    options?: JobRouterDeregisterWorkerV2OptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      workerId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deregisterWorkerV2OperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Retrieves existing workers.
   * @param options The options parameters.
   */
  private _listWorkers(
    options?: JobRouterListWorkersOptionalParams
  ): Promise<JobRouterListWorkersResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listWorkersOperationSpec
    ) as Promise<JobRouterListWorkersResponse>;
  }

  /**
   * Retrieves an existing worker by Id
   * @param workerId Id of the worker to retrieve
   * @param options The options parameters.
   */
  getWorker(
    workerId: string,
    options?: JobRouterGetWorkerOptionalParams
  ): Promise<JobRouterGetWorkerResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      workerId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getWorkerOperationSpec
    ) as Promise<JobRouterGetWorkerResponse>;
  }

  /**
   * Releases capacity consumed by an assignment within a workers socket collection.
   * @param workerId Id of the worker to release assignment capacity
   * @param assignmentId Id of the assignment to release capacity
   * @param options The options parameters.
   */
  releaseAssignmentAction(
    workerId: string,
    assignmentId: string,
    options?: JobRouterReleaseAssignmentActionOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      workerId,
      assignmentId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      releaseAssignmentActionOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Deletes a worker and all of its traces.
   * @param workerId Id of the worker to delete
   * @param options The options parameters.
   */
  deleteWorker(
    workerId: string,
    options?: JobRouterDeleteWorkerOptionalParams
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      workerId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteWorkerOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListClassificationPoliciesNext
   * @param nextLink The nextLink from the previous successful call to the ListClassificationPolicies
   *                 method.
   * @param options The options parameters.
   */
  private _listClassificationPoliciesNext(
    nextLink: string,
    options?: JobRouterListClassificationPoliciesNextOptionalParams
  ): Promise<JobRouterListClassificationPoliciesNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listClassificationPoliciesNextOperationSpec
    ) as Promise<JobRouterListClassificationPoliciesNextResponse>;
  }

  /**
   * ListDistributionPoliciesNext
   * @param nextLink The nextLink from the previous successful call to the ListDistributionPolicies
   *                 method.
   * @param options The options parameters.
   */
  private _listDistributionPoliciesNext(
    nextLink: string,
    options?: JobRouterListDistributionPoliciesNextOptionalParams
  ): Promise<JobRouterListDistributionPoliciesNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listDistributionPoliciesNextOperationSpec
    ) as Promise<JobRouterListDistributionPoliciesNextResponse>;
  }

  /**
   * ListExceptionPoliciesNext
   * @param nextLink The nextLink from the previous successful call to the ListExceptionPolicies method.
   * @param options The options parameters.
   */
  private _listExceptionPoliciesNext(
    nextLink: string,
    options?: JobRouterListExceptionPoliciesNextOptionalParams
  ): Promise<JobRouterListExceptionPoliciesNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listExceptionPoliciesNextOperationSpec
    ) as Promise<JobRouterListExceptionPoliciesNextResponse>;
  }

  /**
   * ListJobsNext
   * @param nextLink The nextLink from the previous successful call to the ListJobs method.
   * @param options The options parameters.
   */
  private _listJobsNext(
    nextLink: string,
    options?: JobRouterListJobsNextOptionalParams
  ): Promise<JobRouterListJobsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listJobsNextOperationSpec
    ) as Promise<JobRouterListJobsNextResponse>;
  }

  /**
   * ListQueuesNext
   * @param nextLink The nextLink from the previous successful call to the ListQueues method.
   * @param options The options parameters.
   */
  private _listQueuesNext(
    nextLink: string,
    options?: JobRouterListQueuesNextOptionalParams
  ): Promise<JobRouterListQueuesNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listQueuesNextOperationSpec
    ) as Promise<JobRouterListQueuesNextResponse>;
  }

  /**
   * ListWorkersNext
   * @param nextLink The nextLink from the previous successful call to the ListWorkers method.
   * @param options The options parameters.
   */
  private _listWorkersNext(
    nextLink: string,
    options?: JobRouterListWorkersNextOptionalParams
  ): Promise<JobRouterListWorkersNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      listWorkersNextOperationSpec
    ) as Promise<JobRouterListWorkersNextResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const createClassificationPolicyV2OperationSpec: coreHttp.OperationSpec = {
  path: "/routing/classificationPolicies",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ClassificationPolicy
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.createClassificationPolicyRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.repeatabilityHeaders
  ],
  mediaType: "json",
  serializer
};
const listClassificationPoliciesOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/classificationPolicies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClassificationPolicyCollection
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxPageSize,
    Parameters.continuationToken
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const patchClassificationPolicyV2OperationSpec: coreHttp.OperationSpec = {
  path: "/routing/classificationPolicies/{id}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ClassificationPolicy
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.patch,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getClassificationPolicyOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/classificationPolicies/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClassificationPolicy
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteClassificationPolicyOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/classificationPolicies/{id}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const createDistributionPolicyV2OperationSpec: coreHttp.OperationSpec = {
  path: "/routing/distributionPolicies",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.DistributionPolicy
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.distributionPolicy,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.repeatabilityHeaders
  ],
  mediaType: "json",
  serializer
};
const listDistributionPoliciesOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/distributionPolicies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DistributionPolicyCollection
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxPageSize,
    Parameters.continuationToken
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const patchDistributionPolicyOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/distributionPolicies/{id}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DistributionPolicy
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.patch1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getDistributionPolicyOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/distributionPolicies/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DistributionPolicy
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteDistributionPolicyOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/distributionPolicies/{id}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const createExceptionPolicyV2OperationSpec: coreHttp.OperationSpec = {
  path: "/routing/exceptionPolicies",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ExceptionPolicy
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.exceptionPolicy,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.repeatabilityHeaders
  ],
  mediaType: "json",
  serializer
};
const listExceptionPoliciesOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/exceptionPolicies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExceptionPolicyCollection
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxPageSize,
    Parameters.continuationToken
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const patchExceptionPolicyV2OperationSpec: coreHttp.OperationSpec = {
  path: "/routing/exceptionPolicies/{id}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ExceptionPolicy
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.patchExceptionPolicy,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getExceptionPolicyOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/exceptionPolicies/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExceptionPolicy
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteExceptionPolicyOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/exceptionPolicies/{id}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const createJobV2OperationSpec: coreHttp.OperationSpec = {
  path: "/routing/jobs",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.RouterJob
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.routerJob,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.repeatabilityHeaders
  ],
  mediaType: "json",
  serializer
};
const listJobsOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/jobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobCollection
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxPageSize,
    Parameters.continuationToken,
    Parameters.status,
    Parameters.queueId,
    Parameters.channelId
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getJobOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/jobs/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RouterJob
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const updateJobOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/jobs/{id}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.RouterJob
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.patch2,
  queryParameters: [Parameters.apiVersion, Parameters.forceClassification],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const cancelJobActionOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/jobs/{id}:cancel",
  httpMethod: "POST",
  responses: {
    202: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: {
    parameterPath: {
      note: ["options", "note"],
      dispositionCode: ["options", "dispositionCode"]
    },
    mapper: Mappers.CancelJobRequest
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const completeJobActionOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/jobs/{id}:complete",
  httpMethod: "POST",
  responses: {
    204: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: {
    parameterPath: {
      assignmentId: ["assignmentId"],
      note: ["options", "note"]
    },
    mapper: { ...Mappers.CompleteJobRequest, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const closeJobActionOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/jobs/{id}:close",
  httpMethod: "POST",
  responses: {
    204: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: {
    parameterPath: {
      assignmentId: ["assignmentId"],
      dispositionCode: ["options", "dispositionCode"],
      releaseTime: ["options", "releaseTime"],
      note: ["options", "note"]
    },
    mapper: { ...Mappers.CloseJobRequest, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getInQueuePositionOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/jobs/{id}/position",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobPositionDetails
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteJobOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/jobs/{id}:delete",
  httpMethod: "POST",
  responses: {
    204: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const acceptJobActionOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/workers/{workerId}/offers/{offerId}:accept",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AcceptJobOfferResponse
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.offerId, Parameters.workerId],
  headerParameters: [Parameters.accept],
  serializer
};
const declineJobActionOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/workers/{workerId}/offers/{offerId}:decline",
  httpMethod: "POST",
  responses: {
    204: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.offerId, Parameters.workerId],
  headerParameters: [Parameters.accept],
  serializer
};
const createQueueOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/queues",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.JobQueue
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.jobQueue,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [
    Parameters.contentType,
    Parameters.accept,
    Parameters.repeatabilityHeaders
  ],
  mediaType: "json",
  serializer
};
const listQueuesOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/queues",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.QueueCollection
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxPageSize,
    Parameters.continuationToken
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const updateQueueOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/queues/{id}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.JobQueue
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.patch3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getQueueOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/queues/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobQueue
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteQueueOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/queues/{id}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const registerWorkerV2OperationSpec: coreHttp.OperationSpec = {
  path: "/routing/workers/{workerId}:register",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RouterWorker
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.registerWorkerRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.workerId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deregisterWorkerV2OperationSpec: coreHttp.OperationSpec = {
  path: "/routing/workers/{workerId}:deregister",
  httpMethod: "PUT",
  responses: {
    204: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.workerId],
  headerParameters: [Parameters.accept],
  serializer
};
const listWorkersOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/workers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkerCollection
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxPageSize,
    Parameters.continuationToken,
    Parameters.queueId,
    Parameters.channelId,
    Parameters.status1,
    Parameters.hasCapacity
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getWorkerOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/workers/{workerId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RouterWorker
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.workerId],
  headerParameters: [Parameters.accept],
  serializer
};
const releaseAssignmentActionOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/workers/{workerId}/assignments/{assignmentId}:release",
  httpMethod: "POST",
  responses: {
    200: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  requestBody: Parameters.releaseAssignmentRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.workerId,
    Parameters.assignmentId2
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteWorkerOperationSpec: coreHttp.OperationSpec = {
  path: "/routing/workers/{workerId}:delete",
  httpMethod: "POST",
  responses: {
    204: {},
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.workerId],
  headerParameters: [Parameters.accept],
  serializer
};
const listClassificationPoliciesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClassificationPolicyCollection
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxPageSize,
    Parameters.continuationToken
  ],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listDistributionPoliciesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DistributionPolicyCollection
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxPageSize,
    Parameters.continuationToken
  ],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listExceptionPoliciesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExceptionPolicyCollection
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxPageSize,
    Parameters.continuationToken
  ],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listJobsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobCollection
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxPageSize,
    Parameters.continuationToken,
    Parameters.status,
    Parameters.queueId,
    Parameters.channelId
  ],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueuesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.QueueCollection
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxPageSize,
    Parameters.continuationToken
  ],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listWorkersNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.WorkerCollection
    },
    400: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    403: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    409: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    412: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    429: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    },
    503: {
      bodyMapper: Mappers.CommunicationErrorResponse,
      isError: true
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.maxPageSize,
    Parameters.continuationToken,
    Parameters.queueId,
    Parameters.channelId,
    Parameters.status1,
    Parameters.hasCapacity
  ],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
