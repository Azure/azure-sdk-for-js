/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { JobRouterAdministration } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { JobRouterApiClient } from "../jobRouterApiClient";
import {
  ClassificationPolicyItem,
  JobRouterAdministrationListClassificationPoliciesNextOptionalParams,
  JobRouterAdministrationListClassificationPoliciesOptionalParams,
  DistributionPolicyItem,
  JobRouterAdministrationListDistributionPoliciesNextOptionalParams,
  JobRouterAdministrationListDistributionPoliciesOptionalParams,
  ExceptionPolicyItem,
  JobRouterAdministrationListExceptionPoliciesNextOptionalParams,
  JobRouterAdministrationListExceptionPoliciesOptionalParams,
  JobQueueItem,
  JobRouterAdministrationListQueuesNextOptionalParams,
  JobRouterAdministrationListQueuesOptionalParams,
  ClassificationPolicy,
  JobRouterAdministrationUpsertClassificationPolicyOptionalParams,
  JobRouterAdministrationUpsertClassificationPolicyResponse,
  JobRouterAdministrationGetClassificationPolicyOptionalParams,
  JobRouterAdministrationGetClassificationPolicyResponse,
  JobRouterAdministrationDeleteClassificationPolicyOptionalParams,
  JobRouterAdministrationListClassificationPoliciesResponse,
  DistributionPolicy,
  JobRouterAdministrationUpsertDistributionPolicyOptionalParams,
  JobRouterAdministrationUpsertDistributionPolicyResponse,
  JobRouterAdministrationGetDistributionPolicyOptionalParams,
  JobRouterAdministrationGetDistributionPolicyResponse,
  JobRouterAdministrationDeleteDistributionPolicyOptionalParams,
  JobRouterAdministrationListDistributionPoliciesResponse,
  ExceptionPolicy,
  JobRouterAdministrationUpsertExceptionPolicyOptionalParams,
  JobRouterAdministrationUpsertExceptionPolicyResponse,
  JobRouterAdministrationGetExceptionPolicyOptionalParams,
  JobRouterAdministrationGetExceptionPolicyResponse,
  JobRouterAdministrationDeleteExceptionPolicyOptionalParams,
  JobRouterAdministrationListExceptionPoliciesResponse,
  JobQueue,
  JobRouterAdministrationUpsertQueueOptionalParams,
  JobRouterAdministrationUpsertQueueResponse,
  JobRouterAdministrationGetQueueOptionalParams,
  JobRouterAdministrationGetQueueResponse,
  JobRouterAdministrationDeleteQueueOptionalParams,
  JobRouterAdministrationListQueuesResponse,
  JobRouterAdministrationListClassificationPoliciesNextResponse,
  JobRouterAdministrationListDistributionPoliciesNextResponse,
  JobRouterAdministrationListExceptionPoliciesNextResponse,
  JobRouterAdministrationListQueuesNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing JobRouterAdministration operations. */
export class JobRouterAdministrationImpl implements JobRouterAdministration {
  private readonly client: JobRouterApiClient;

  /**
   * Initialize a new instance of the class JobRouterAdministration class.
   * @param client Reference to the service client
   */
  constructor(client: JobRouterApiClient) {
    this.client = client;
  }

  /**
   * Retrieves existing classification policies
   * @param options The options parameters.
   */
  public listClassificationPolicies(
    options?: JobRouterAdministrationListClassificationPoliciesOptionalParams
  ): PagedAsyncIterableIterator<ClassificationPolicyItem> {
    const iter = this.listClassificationPoliciesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listClassificationPoliciesPagingPage(options);
      }
    };
  }

  private async *listClassificationPoliciesPagingPage(
    options?: JobRouterAdministrationListClassificationPoliciesOptionalParams
  ): AsyncIterableIterator<ClassificationPolicyItem[]> {
    let result = await this._listClassificationPolicies(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listClassificationPoliciesNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listClassificationPoliciesPagingAll(
    options?: JobRouterAdministrationListClassificationPoliciesOptionalParams
  ): AsyncIterableIterator<ClassificationPolicyItem> {
    for await (const page of this.listClassificationPoliciesPagingPage(
      options
    )) {
      yield* page;
    }
  }

  /**
   * Retrieves existing distribution policies
   * @param options The options parameters.
   */
  public listDistributionPolicies(
    options?: JobRouterAdministrationListDistributionPoliciesOptionalParams
  ): PagedAsyncIterableIterator<DistributionPolicyItem> {
    const iter = this.listDistributionPoliciesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listDistributionPoliciesPagingPage(options);
      }
    };
  }

  private async *listDistributionPoliciesPagingPage(
    options?: JobRouterAdministrationListDistributionPoliciesOptionalParams
  ): AsyncIterableIterator<DistributionPolicyItem[]> {
    let result = await this._listDistributionPolicies(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listDistributionPoliciesNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listDistributionPoliciesPagingAll(
    options?: JobRouterAdministrationListDistributionPoliciesOptionalParams
  ): AsyncIterableIterator<DistributionPolicyItem> {
    for await (const page of this.listDistributionPoliciesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Retrieves existing exception policies
   * @param options The options parameters.
   */
  public listExceptionPolicies(
    options?: JobRouterAdministrationListExceptionPoliciesOptionalParams
  ): PagedAsyncIterableIterator<ExceptionPolicyItem> {
    const iter = this.listExceptionPoliciesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listExceptionPoliciesPagingPage(options);
      }
    };
  }

  private async *listExceptionPoliciesPagingPage(
    options?: JobRouterAdministrationListExceptionPoliciesOptionalParams
  ): AsyncIterableIterator<ExceptionPolicyItem[]> {
    let result = await this._listExceptionPolicies(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listExceptionPoliciesNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listExceptionPoliciesPagingAll(
    options?: JobRouterAdministrationListExceptionPoliciesOptionalParams
  ): AsyncIterableIterator<ExceptionPolicyItem> {
    for await (const page of this.listExceptionPoliciesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Retrieves existing queues
   * @param options The options parameters.
   */
  public listQueues(
    options?: JobRouterAdministrationListQueuesOptionalParams
  ): PagedAsyncIterableIterator<JobQueueItem> {
    const iter = this.listQueuesPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listQueuesPagingPage(options);
      }
    };
  }

  private async *listQueuesPagingPage(
    options?: JobRouterAdministrationListQueuesOptionalParams
  ): AsyncIterableIterator<JobQueueItem[]> {
    let result = await this._listQueues(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listQueuesNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listQueuesPagingAll(
    options?: JobRouterAdministrationListQueuesOptionalParams
  ): AsyncIterableIterator<JobQueueItem> {
    for await (const page of this.listQueuesPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Creates or updates a classification policy.
   * @param id Id of the classification policy
   * @param patch Model of classification policy properties to be patched. See also:
   *              https://datatracker.ietf.org/doc/html/rfc7386
   * @param options The options parameters.
   */
  upsertClassificationPolicy(
    id: string,
    patch: ClassificationPolicy,
    options?: JobRouterAdministrationUpsertClassificationPolicyOptionalParams
  ): Promise<JobRouterAdministrationUpsertClassificationPolicyResponse> {
    return this.client.sendOperationRequest(
      { id, patch, options },
      upsertClassificationPolicyOperationSpec
    );
  }

  /**
   * Retrieves an existing classification policy by Id
   * @param id Id of the classification policy
   * @param options The options parameters.
   */
  getClassificationPolicy(
    id: string,
    options?: JobRouterAdministrationGetClassificationPolicyOptionalParams
  ): Promise<JobRouterAdministrationGetClassificationPolicyResponse> {
    return this.client.sendOperationRequest(
      { id, options },
      getClassificationPolicyOperationSpec
    );
  }

  /**
   * Delete a classification policy by Id
   * @param id Id of the classification policy
   * @param options The options parameters.
   */
  deleteClassificationPolicy(
    id: string,
    options?: JobRouterAdministrationDeleteClassificationPolicyOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { id, options },
      deleteClassificationPolicyOperationSpec
    );
  }

  /**
   * Retrieves existing classification policies
   * @param options The options parameters.
   */
  private _listClassificationPolicies(
    options?: JobRouterAdministrationListClassificationPoliciesOptionalParams
  ): Promise<JobRouterAdministrationListClassificationPoliciesResponse> {
    return this.client.sendOperationRequest(
      { options },
      listClassificationPoliciesOperationSpec
    );
  }

  /**
   * Creates or updates a distribution policy.
   * @param id Id of the distribution policy
   * @param patch Model of distribution policy properties to be patched. See also:
   *              https://datatracker.ietf.org/doc/html/rfc7386
   * @param options The options parameters.
   */
  upsertDistributionPolicy(
    id: string,
    patch: DistributionPolicy,
    options?: JobRouterAdministrationUpsertDistributionPolicyOptionalParams
  ): Promise<JobRouterAdministrationUpsertDistributionPolicyResponse> {
    return this.client.sendOperationRequest(
      { id, patch, options },
      upsertDistributionPolicyOperationSpec
    );
  }

  /**
   * Retrieves an existing distribution policy by Id
   * @param id Id of the distribution policy
   * @param options The options parameters.
   */
  getDistributionPolicy(
    id: string,
    options?: JobRouterAdministrationGetDistributionPolicyOptionalParams
  ): Promise<JobRouterAdministrationGetDistributionPolicyResponse> {
    return this.client.sendOperationRequest(
      { id, options },
      getDistributionPolicyOperationSpec
    );
  }

  /**
   * Delete a distribution policy by Id
   * @param id Id of the distribution policy
   * @param options The options parameters.
   */
  deleteDistributionPolicy(
    id: string,
    options?: JobRouterAdministrationDeleteDistributionPolicyOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { id, options },
      deleteDistributionPolicyOperationSpec
    );
  }

  /**
   * Retrieves existing distribution policies
   * @param options The options parameters.
   */
  private _listDistributionPolicies(
    options?: JobRouterAdministrationListDistributionPoliciesOptionalParams
  ): Promise<JobRouterAdministrationListDistributionPoliciesResponse> {
    return this.client.sendOperationRequest(
      { options },
      listDistributionPoliciesOperationSpec
    );
  }

  /**
   * Creates or updates a exception policy.
   * @param id Id of the exception policy
   * @param patch Model of exception policy properties to be patched. See also:
   *              https://datatracker.ietf.org/doc/html/rfc7386
   * @param options The options parameters.
   */
  upsertExceptionPolicy(
    id: string,
    patch: ExceptionPolicy,
    options?: JobRouterAdministrationUpsertExceptionPolicyOptionalParams
  ): Promise<JobRouterAdministrationUpsertExceptionPolicyResponse> {
    return this.client.sendOperationRequest(
      { id, patch, options },
      upsertExceptionPolicyOperationSpec
    );
  }

  /**
   * Retrieves an existing exception policy by Id
   * @param id Id of the exception policy to retrieve
   * @param options The options parameters.
   */
  getExceptionPolicy(
    id: string,
    options?: JobRouterAdministrationGetExceptionPolicyOptionalParams
  ): Promise<JobRouterAdministrationGetExceptionPolicyResponse> {
    return this.client.sendOperationRequest(
      { id, options },
      getExceptionPolicyOperationSpec
    );
  }

  /**
   * Deletes a exception policy by Id
   * @param id Id of the exception policy to delete
   * @param options The options parameters.
   */
  deleteExceptionPolicy(
    id: string,
    options?: JobRouterAdministrationDeleteExceptionPolicyOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { id, options },
      deleteExceptionPolicyOperationSpec
    );
  }

  /**
   * Retrieves existing exception policies
   * @param options The options parameters.
   */
  private _listExceptionPolicies(
    options?: JobRouterAdministrationListExceptionPoliciesOptionalParams
  ): Promise<JobRouterAdministrationListExceptionPoliciesResponse> {
    return this.client.sendOperationRequest(
      { options },
      listExceptionPoliciesOperationSpec
    );
  }

  /**
   * Creates or updates a queue.
   * @param id Id of the queue
   * @param patch Model of queue properties to be patched. See also:
   *              https://datatracker.ietf.org/doc/html/rfc7386
   * @param options The options parameters.
   */
  upsertQueue(
    id: string,
    patch: JobQueue,
    options?: JobRouterAdministrationUpsertQueueOptionalParams
  ): Promise<JobRouterAdministrationUpsertQueueResponse> {
    return this.client.sendOperationRequest(
      { id, patch, options },
      upsertQueueOperationSpec
    );
  }

  /**
   * Retrieves an existing queue by Id
   * @param id Id of the queue to retrieve
   * @param options The options parameters.
   */
  getQueue(
    id: string,
    options?: JobRouterAdministrationGetQueueOptionalParams
  ): Promise<JobRouterAdministrationGetQueueResponse> {
    return this.client.sendOperationRequest(
      { id, options },
      getQueueOperationSpec
    );
  }

  /**
   * Deletes a queue by Id
   * @param id Id of the queue to delete
   * @param options The options parameters.
   */
  deleteQueue(
    id: string,
    options?: JobRouterAdministrationDeleteQueueOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { id, options },
      deleteQueueOperationSpec
    );
  }

  /**
   * Retrieves existing queues
   * @param options The options parameters.
   */
  private _listQueues(
    options?: JobRouterAdministrationListQueuesOptionalParams
  ): Promise<JobRouterAdministrationListQueuesResponse> {
    return this.client.sendOperationRequest(
      { options },
      listQueuesOperationSpec
    );
  }

  /**
   * ListClassificationPoliciesNext
   * @param nextLink The nextLink from the previous successful call to the ListClassificationPolicies
   *                 method.
   * @param options The options parameters.
   */
  private _listClassificationPoliciesNext(
    nextLink: string,
    options?: JobRouterAdministrationListClassificationPoliciesNextOptionalParams
  ): Promise<JobRouterAdministrationListClassificationPoliciesNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listClassificationPoliciesNextOperationSpec
    );
  }

  /**
   * ListDistributionPoliciesNext
   * @param nextLink The nextLink from the previous successful call to the ListDistributionPolicies
   *                 method.
   * @param options The options parameters.
   */
  private _listDistributionPoliciesNext(
    nextLink: string,
    options?: JobRouterAdministrationListDistributionPoliciesNextOptionalParams
  ): Promise<JobRouterAdministrationListDistributionPoliciesNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listDistributionPoliciesNextOperationSpec
    );
  }

  /**
   * ListExceptionPoliciesNext
   * @param nextLink The nextLink from the previous successful call to the ListExceptionPolicies method.
   * @param options The options parameters.
   */
  private _listExceptionPoliciesNext(
    nextLink: string,
    options?: JobRouterAdministrationListExceptionPoliciesNextOptionalParams
  ): Promise<JobRouterAdministrationListExceptionPoliciesNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listExceptionPoliciesNextOperationSpec
    );
  }

  /**
   * ListQueuesNext
   * @param nextLink The nextLink from the previous successful call to the ListQueues method.
   * @param options The options parameters.
   */
  private _listQueuesNext(
    nextLink: string,
    options?: JobRouterAdministrationListQueuesNextOptionalParams
  ): Promise<JobRouterAdministrationListQueuesNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listQueuesNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const upsertClassificationPolicyOperationSpec: coreClient.OperationSpec = {
  path: "/routing/classificationPolicies/{id}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ClassificationPolicy
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: Parameters.patch,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getClassificationPolicyOperationSpec: coreClient.OperationSpec = {
  path: "/routing/classificationPolicies/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClassificationPolicy
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteClassificationPolicyOperationSpec: coreClient.OperationSpec = {
  path: "/routing/classificationPolicies/{id}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const listClassificationPoliciesOperationSpec: coreClient.OperationSpec = {
  path: "/routing/classificationPolicies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClassificationPolicyCollection
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const upsertDistributionPolicyOperationSpec: coreClient.OperationSpec = {
  path: "/routing/distributionPolicies/{id}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DistributionPolicy
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: Parameters.patch1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getDistributionPolicyOperationSpec: coreClient.OperationSpec = {
  path: "/routing/distributionPolicies/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DistributionPolicy
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteDistributionPolicyOperationSpec: coreClient.OperationSpec = {
  path: "/routing/distributionPolicies/{id}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const listDistributionPoliciesOperationSpec: coreClient.OperationSpec = {
  path: "/routing/distributionPolicies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DistributionPolicyCollection
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const upsertExceptionPolicyOperationSpec: coreClient.OperationSpec = {
  path: "/routing/exceptionPolicies/{id}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ExceptionPolicy
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: Parameters.patch2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getExceptionPolicyOperationSpec: coreClient.OperationSpec = {
  path: "/routing/exceptionPolicies/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExceptionPolicy
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteExceptionPolicyOperationSpec: coreClient.OperationSpec = {
  path: "/routing/exceptionPolicies/{id}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const listExceptionPoliciesOperationSpec: coreClient.OperationSpec = {
  path: "/routing/exceptionPolicies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExceptionPolicyCollection
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const upsertQueueOperationSpec: coreClient.OperationSpec = {
  path: "/routing/queues/{id}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.JobQueue
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  requestBody: Parameters.patch3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getQueueOperationSpec: coreClient.OperationSpec = {
  path: "/routing/queues/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobQueue
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteQueueOperationSpec: coreClient.OperationSpec = {
  path: "/routing/queues/{id}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueuesOperationSpec: coreClient.OperationSpec = {
  path: "/routing/queues",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.QueueCollection
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const listClassificationPoliciesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClassificationPolicyCollection
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listDistributionPoliciesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DistributionPolicyCollection
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listExceptionPoliciesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExceptionPolicyCollection
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueuesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.QueueCollection
    },
    default: {
      bodyMapper: Mappers.CommunicationErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
