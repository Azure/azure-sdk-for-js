/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import {
  PagedClassificationPolicy,
  JobRouterListClassificationPoliciesOptionalParams,
  PagedDistributionPolicy,
  JobRouterListDistributionPoliciesOptionalParams,
  PagedExceptionPolicy,
  JobRouterListExceptionPoliciesOptionalParams,
  PagedJob,
  JobRouterListJobsOptionalParams,
  PagedQueue,
  JobRouterListQueuesOptionalParams,
  PagedWorker,
  JobRouterListWorkersOptionalParams,
  ClassificationPolicy,
  JobRouterUpsertClassificationPolicyOptionalParams,
  JobRouterUpsertClassificationPolicyResponse,
  JobRouterGetClassificationPolicyOptionalParams,
  JobRouterGetClassificationPolicyResponse,
  JobRouterDeleteClassificationPolicyOptionalParams,
  DistributionPolicy,
  JobRouterUpsertDistributionPolicyOptionalParams,
  JobRouterUpsertDistributionPolicyResponse,
  JobRouterGetDistributionPolicyOptionalParams,
  JobRouterGetDistributionPolicyResponse,
  JobRouterDeleteDistributionPolicyOptionalParams,
  ExceptionPolicy,
  JobRouterUpsertExceptionPolicyOptionalParams,
  JobRouterUpsertExceptionPolicyResponse,
  JobRouterGetExceptionPolicyOptionalParams,
  JobRouterGetExceptionPolicyResponse,
  JobRouterDeleteExceptionPolicyOptionalParams,
  RouterJob,
  JobRouterUpsertJobOptionalParams,
  JobRouterUpsertJobResponse,
  JobRouterGetJobOptionalParams,
  JobRouterGetJobResponse,
  JobRouterDeleteJobOptionalParams,
  JobRouterReclassifyJobActionOptionalParams,
  JobRouterReclassifyJobActionResponse,
  JobRouterCancelJobActionOptionalParams,
  JobRouterCancelJobActionResponse,
  JobRouterCompleteJobActionOptionalParams,
  JobRouterCompleteJobActionResponse,
  JobRouterCloseJobActionOptionalParams,
  JobRouterCloseJobActionResponse,
  JobRouterGetInQueuePositionOptionalParams,
  JobRouterGetInQueuePositionResponse,
  JobRouterAcceptJobActionOptionalParams,
  JobRouterAcceptJobActionResponse,
  JobRouterDeclineJobActionOptionalParams,
  JobRouterDeclineJobActionResponse,
  JobQueue,
  JobRouterUpsertQueueOptionalParams,
  JobRouterUpsertQueueResponse,
  JobRouterGetQueueOptionalParams,
  JobRouterGetQueueResponse,
  JobRouterDeleteQueueOptionalParams,
  JobRouterGetQueueStatisticsOptionalParams,
  JobRouterGetQueueStatisticsResponse,
  RouterWorker,
  JobRouterUpsertWorkerOptionalParams,
  JobRouterUpsertWorkerResponse,
  JobRouterGetWorkerOptionalParams,
  JobRouterGetWorkerResponse,
  JobRouterDeleteWorkerOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a JobRouter. */
export interface JobRouter {
  /**
   * Retrieves existing classification policies
   * @param options The options parameters.
   */
  listClassificationPolicies(
    options?: JobRouterListClassificationPoliciesOptionalParams
  ): PagedAsyncIterableIterator<PagedClassificationPolicy>;
  /**
   * Retrieves existing distribution policies
   * @param options The options parameters.
   */
  listDistributionPolicies(
    options?: JobRouterListDistributionPoliciesOptionalParams
  ): PagedAsyncIterableIterator<PagedDistributionPolicy>;
  /**
   * Retrieves existing exception policies
   * @param options The options parameters.
   */
  listExceptionPolicies(
    options?: JobRouterListExceptionPoliciesOptionalParams
  ): PagedAsyncIterableIterator<PagedExceptionPolicy>;
  /**
   * Retrieves list of jobs based on filter parameters
   * @param options The options parameters.
   */
  listJobs(
    options?: JobRouterListJobsOptionalParams
  ): PagedAsyncIterableIterator<PagedJob>;
  /**
   * Retrieves existing queues
   * @param options The options parameters.
   */
  listQueues(
    options?: JobRouterListQueuesOptionalParams
  ): PagedAsyncIterableIterator<PagedQueue>;
  /**
   * Retrieves existing workers.
   * @param options The options parameters.
   */
  listWorkers(
    options?: JobRouterListWorkersOptionalParams
  ): PagedAsyncIterableIterator<PagedWorker>;
  /**
   * Upsert a classification policy.
   * @param id Id of the classification policy
   * @param patch Model of classification policy properties to be patched. See also:
   *              https://datatracker.ietf.org/doc/html/rfc7386
   * @param options The options parameters.
   */
  upsertClassificationPolicy(
    id: string,
    patch: ClassificationPolicy,
    options?: JobRouterUpsertClassificationPolicyOptionalParams
  ): Promise<JobRouterUpsertClassificationPolicyResponse>;
  /**
   * Retrieves an existing classification policy by Id
   * @param id Id of the classification policy
   * @param options The options parameters.
   */
  getClassificationPolicy(
    id: string,
    options?: JobRouterGetClassificationPolicyOptionalParams
  ): Promise<JobRouterGetClassificationPolicyResponse>;
  /**
   * Delete a classification policy by Id
   * @param id Id of the classification policy
   * @param options The options parameters.
   */
  deleteClassificationPolicy(
    id: string,
    options?: JobRouterDeleteClassificationPolicyOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Upsert a distribution policy.
   * @param id Id of the distribution policy
   * @param patch Model of distribution policy properties to be patched. See also:
   *              https://datatracker.ietf.org/doc/html/rfc7386
   * @param options The options parameters.
   */
  upsertDistributionPolicy(
    id: string,
    patch: DistributionPolicy,
    options?: JobRouterUpsertDistributionPolicyOptionalParams
  ): Promise<JobRouterUpsertDistributionPolicyResponse>;
  /**
   * Retrieves an existing distribution policy by Id
   * @param id Id of the distribution policy
   * @param options The options parameters.
   */
  getDistributionPolicy(
    id: string,
    options?: JobRouterGetDistributionPolicyOptionalParams
  ): Promise<JobRouterGetDistributionPolicyResponse>;
  /**
   * Delete a distribution policy by Id
   * @param id Id of the distribution policy
   * @param options The options parameters.
   */
  deleteDistributionPolicy(
    id: string,
    options?: JobRouterDeleteDistributionPolicyOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Upsert a exception policy.
   * @param id Id of the exception policy
   * @param patch Model of exception policy properties to be patched. See also:
   *              https://datatracker.ietf.org/doc/html/rfc7386
   * @param options The options parameters.
   */
  upsertExceptionPolicy(
    id: string,
    patch: ExceptionPolicy,
    options?: JobRouterUpsertExceptionPolicyOptionalParams
  ): Promise<JobRouterUpsertExceptionPolicyResponse>;
  /**
   * Retrieves an existing exception policy by Id
   * @param id Id of the exception policy to retrieve
   * @param options The options parameters.
   */
  getExceptionPolicy(
    id: string,
    options?: JobRouterGetExceptionPolicyOptionalParams
  ): Promise<JobRouterGetExceptionPolicyResponse>;
  /**
   * Deletes a exception policy by Id
   * @param id Id of the exception policy to delete
   * @param options The options parameters.
   */
  deleteExceptionPolicy(
    id: string,
    options?: JobRouterDeleteExceptionPolicyOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Upsert a job.
   * @param id Id of the job
   * @param patch Model of job properties to be created or patched. See also:
   *              https://datatracker.ietf.org/doc/html/rfc7386
   * @param options The options parameters.
   */
  upsertJob(
    id: string,
    patch: RouterJob,
    options?: JobRouterUpsertJobOptionalParams
  ): Promise<JobRouterUpsertJobResponse>;
  /**
   * Retrieves an existing job by Id
   * @param id Id of the job to retrieve
   * @param options The options parameters.
   */
  getJob(
    id: string,
    options?: JobRouterGetJobOptionalParams
  ): Promise<JobRouterGetJobResponse>;
  /**
   * Deletes a job and all of its traces.
   * @param id Id of the job
   * @param options The options parameters.
   */
  deleteJob(
    id: string,
    options?: JobRouterDeleteJobOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Reclassify a job.
   * @param id Id of the job
   * @param options The options parameters.
   */
  reclassifyJobAction(
    id: string,
    options?: JobRouterReclassifyJobActionOptionalParams
  ): Promise<JobRouterReclassifyJobActionResponse>;
  /**
   * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
   * @param id Id of the job
   * @param options The options parameters.
   */
  cancelJobAction(
    id: string,
    options?: JobRouterCancelJobActionOptionalParams
  ): Promise<JobRouterCancelJobActionResponse>;
  /**
   * Completes an assigned job.
   * @param id Id of the job
   * @param assignmentId The assignment within the job to complete.
   * @param options The options parameters.
   */
  completeJobAction(
    id: string,
    assignmentId: string,
    options?: JobRouterCompleteJobActionOptionalParams
  ): Promise<JobRouterCompleteJobActionResponse>;
  /**
   * Closes a completed job.
   * @param id Id of the job
   * @param assignmentId The assignment within which the job is to be closed.
   * @param options The options parameters.
   */
  closeJobAction(
    id: string,
    assignmentId: string,
    options?: JobRouterCloseJobActionOptionalParams
  ): Promise<JobRouterCloseJobActionResponse>;
  /**
   * Gets a job's position details.
   * @param id Id of the job
   * @param options The options parameters.
   */
  getInQueuePosition(
    id: string,
    options?: JobRouterGetInQueuePositionOptionalParams
  ): Promise<JobRouterGetInQueuePositionResponse>;
  /**
   * Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job
   * already.
   * @param workerId Id of the worker
   * @param offerId Id of the offer
   * @param options The options parameters.
   */
  acceptJobAction(
    workerId: string,
    offerId: string,
    options?: JobRouterAcceptJobActionOptionalParams
  ): Promise<JobRouterAcceptJobActionResponse>;
  /**
   * Declines an offer to work on a job.
   * @param workerId Id of the worker
   * @param offerId Id of the offer
   * @param options The options parameters.
   */
  declineJobAction(
    workerId: string,
    offerId: string,
    options?: JobRouterDeclineJobActionOptionalParams
  ): Promise<JobRouterDeclineJobActionResponse>;
  /**
   * Upsert a queue.
   * @param id Id of the queue
   * @param patch Model of queue properties to be patched. See also:
   *              https://datatracker.ietf.org/doc/html/rfc7386
   * @param options The options parameters.
   */
  upsertQueue(
    id: string,
    patch: JobQueue,
    options?: JobRouterUpsertQueueOptionalParams
  ): Promise<JobRouterUpsertQueueResponse>;
  /**
   * Retrieves an existing queue by Id
   * @param id Id of the queue to retrieve
   * @param options The options parameters.
   */
  getQueue(
    id: string,
    options?: JobRouterGetQueueOptionalParams
  ): Promise<JobRouterGetQueueResponse>;
  /**
   * Deletes a queue by Id
   * @param id Id of the queue to delete
   * @param options The options parameters.
   */
  deleteQueue(
    id: string,
    options?: JobRouterDeleteQueueOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Retrieves a queue's statistics
   * @param id Id of the queue to retrieve statistics
   * @param options The options parameters.
   */
  getQueueStatistics(
    id: string,
    options?: JobRouterGetQueueStatisticsOptionalParams
  ): Promise<JobRouterGetQueueStatisticsResponse>;
  /**
   * Upsert a worker.
   * @param workerId Id of the worker
   * @param patch Model of worker properties to be patched. See also:
   *              https://datatracker.ietf.org/doc/html/rfc7386
   * @param options The options parameters.
   */
  upsertWorker(
    workerId: string,
    patch: RouterWorker,
    options?: JobRouterUpsertWorkerOptionalParams
  ): Promise<JobRouterUpsertWorkerResponse>;
  /**
   * Retrieves an existing worker by Id
   * @param workerId Id of the worker to retrieve
   * @param options The options parameters.
   */
  getWorker(
    workerId: string,
    options?: JobRouterGetWorkerOptionalParams
  ): Promise<JobRouterGetWorkerResponse>;
  /**
   * Deletes a worker and all of its traces.
   * @param workerId Id of the worker to delete
   * @param options The options parameters.
   */
  deleteWorker(
    workerId: string,
    options?: JobRouterDeleteWorkerOptionalParams
  ): Promise<coreHttp.RestResponse>;
}
