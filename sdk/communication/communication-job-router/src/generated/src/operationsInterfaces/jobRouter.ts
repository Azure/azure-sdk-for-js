/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import {
  RouterChannel,
  JobRouterListChannelsOptionalParams,
  ClassificationPolicy,
  JobRouterListClassificationPoliciesOptionalParams,
  DistributionPolicy,
  JobRouterListDistributionPoliciesOptionalParams,
  ExceptionPolicy,
  JobRouterListExceptionPoliciesOptionalParams,
  RouterJob,
  JobRouterListJobsOptionalParams,
  JobRouterListEnqueuedJobsOptionalParams,
  JobQueue,
  JobRouterListQueuesOptionalParams,
  RouterWorker,
  JobRouterListWorkersOptionalParams,
  UpsertChannelRequest,
  JobRouterCreateOrUpdateChannelOptionalParams,
  JobRouterCreateOrUpdateChannelResponse,
  JobRouterGetChannelOptionalParams,
  JobRouterGetChannelResponse,
  JobRouterDeleteChannelOptionalParams,
  UpsertClassificationPolicyRequest,
  JobRouterCreateOrUpdateClassificationPolicyOptionalParams,
  JobRouterCreateOrUpdateClassificationPolicyResponse,
  JobRouterGetClassificationPolicyOptionalParams,
  JobRouterGetClassificationPolicyResponse,
  JobRouterDeleteClassificationPolicyOptionalParams,
  UpsertDistributionPolicyRequest,
  JobRouterCreateOrUpdateDistributionPolicyOptionalParams,
  JobRouterCreateOrUpdateDistributionPolicyResponse,
  JobRouterGetDistributionPolicyOptionalParams,
  JobRouterGetDistributionPolicyResponse,
  JobRouterDeleteDistributionPolicyOptionalParams,
  UpsertExceptionPolicyRequest,
  JobRouterCreateOrUpdateExceptionPolicyOptionalParams,
  JobRouterCreateOrUpdateExceptionPolicyResponse,
  JobRouterGetExceptionPolicyOptionalParams,
  JobRouterGetExceptionPolicyResponse,
  JobRouterDeleteExceptionPolicyOptionalParams,
  CreateJobRequest,
  JobRouterCreateJobOptionalParams,
  JobRouterCreateJobResponse,
  JobRouterGetJobOptionalParams,
  JobRouterGetJobResponse,
  JobRouterUpdateJobLabelsOptionalParams,
  JobRouterUpdateJobLabelsResponse,
  ReclassifyJobRequest,
  JobRouterReclassifyJobOptionalParams,
  JobRouterReclassifyJobResponse,
  JobRouterUpdateJobClassificationOptionalParams,
  JobRouterUpdateJobClassificationResponse,
  JobRouterCancelJobOptionalParams,
  JobRouterCompleteJobOptionalParams,
  JobRouterCloseJobOptionalParams,
  JobRouterGetInQueuePositionOptionalParams,
  JobRouterGetInQueuePositionResponse,
  JobRouterAcceptJobOptionalParams,
  JobRouterAcceptJobResponse,
  JobRouterDeclineJobOptionalParams,
  UpsertQueueRequest,
  JobRouterCreateOrUpdateQueueOptionalParams,
  JobRouterCreateOrUpdateQueueResponse,
  JobRouterGetQueueOptionalParams,
  JobRouterGetQueueResponse,
  JobRouterDeleteQueueOptionalParams,
  RegisterWorkerRequest,
  JobRouterRegisterWorkerOptionalParams,
  JobRouterRegisterWorkerResponse,
  JobRouterDeregisterWorkerOptionalParams,
  JobRouterGetWorkerOptionalParams,
  JobRouterGetWorkerResponse,
  JobRouterReleaseAssignmentOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a JobRouter. */
export interface JobRouter {
  /**
   * Retrieves custom channels
   * @param options The options parameters.
   */
  listChannels(
    options?: JobRouterListChannelsOptionalParams
  ): PagedAsyncIterableIterator<RouterChannel>;
  /**
   * Retrieves existing classification policies
   * @param options The options parameters.
   */
  listClassificationPolicies(
    options?: JobRouterListClassificationPoliciesOptionalParams
  ): PagedAsyncIterableIterator<ClassificationPolicy>;
  /**
   * Retrieves existing distribution policies
   * @param options The options parameters.
   */
  listDistributionPolicies(
    options?: JobRouterListDistributionPoliciesOptionalParams
  ): PagedAsyncIterableIterator<DistributionPolicy>;
  /**
   * Retrieves existing exception policies
   * @param options The options parameters.
   */
  listExceptionPolicies(
    options?: JobRouterListExceptionPoliciesOptionalParams
  ): PagedAsyncIterableIterator<ExceptionPolicy>;
  /**
   * Retrieves list of jobs based on filter parameters
   * @param options The options parameters.
   */
  listJobs(
    options?: JobRouterListJobsOptionalParams
  ): PagedAsyncIterableIterator<RouterJob>;
  /**
   * Retrieves existing jobs by queue
   * @param queueId
   * @param options The options parameters.
   */
  listEnqueuedJobs(
    queueId: string,
    options?: JobRouterListEnqueuedJobsOptionalParams
  ): PagedAsyncIterableIterator<RouterJob>;
  /**
   * Retrieves existing queues
   * @param options The options parameters.
   */
  listQueues(
    options?: JobRouterListQueuesOptionalParams
  ): PagedAsyncIterableIterator<JobQueue>;
  /**
   * Retrieves existing workers.
   * @param options The options parameters.
   */
  listWorkers(
    options?: JobRouterListWorkersOptionalParams
  ): PagedAsyncIterableIterator<RouterWorker>;
  /**
   * Creates or updates a channel
   * @param body Model of channel to be created or updated
   * @param options The options parameters.
   */
  createOrUpdateChannel(
    body: UpsertChannelRequest,
    options?: JobRouterCreateOrUpdateChannelOptionalParams
  ): Promise<JobRouterCreateOrUpdateChannelResponse>;
  /**
   * Retrieves an existing channel by Id
   * @param id Id of the channel to retrieve
   * @param options The options parameters.
   */
  getChannel(
    id: string,
    options?: JobRouterGetChannelOptionalParams
  ): Promise<JobRouterGetChannelResponse>;
  /**
   * Deletes a channel by Id
   * @param id Id of the channel to delete
   * @param options The options parameters.
   */
  deleteChannel(
    id: string,
    options?: JobRouterDeleteChannelOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Creates a new classification policy.
   * @param body Request payload for creating or updating a Classification Policy
   * @param options The options parameters.
   */
  createOrUpdateClassificationPolicy(
    body: UpsertClassificationPolicyRequest,
    options?: JobRouterCreateOrUpdateClassificationPolicyOptionalParams
  ): Promise<JobRouterCreateOrUpdateClassificationPolicyResponse>;
  /**
   * Retrieves an existing classification policy by Id
   * @param id
   * @param options The options parameters.
   */
  getClassificationPolicy(
    id: string,
    options?: JobRouterGetClassificationPolicyOptionalParams
  ): Promise<JobRouterGetClassificationPolicyResponse>;
  /**
   * Delete a classification policy by Id
   * @param id
   * @param options The options parameters.
   */
  deleteClassificationPolicy(
    id: string,
    options?: JobRouterDeleteClassificationPolicyOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Creates a new distribution policy.
   * @param body Request payload for creating or updating a distribution policy
   * @param options The options parameters.
   */
  createOrUpdateDistributionPolicy(
    body: UpsertDistributionPolicyRequest,
    options?: JobRouterCreateOrUpdateDistributionPolicyOptionalParams
  ): Promise<JobRouterCreateOrUpdateDistributionPolicyResponse>;
  /**
   * Retrieves an existing distribution policy by Id
   * @param id
   * @param options The options parameters.
   */
  getDistributionPolicy(
    id: string,
    options?: JobRouterGetDistributionPolicyOptionalParams
  ): Promise<JobRouterGetDistributionPolicyResponse>;
  /**
   * Delete a distribution policy by Id
   * @param id
   * @param options The options parameters.
   */
  deleteDistributionPolicy(
    id: string,
    options?: JobRouterDeleteDistributionPolicyOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Creates a new exception policy
   * @param body Model of Exception Policy to be created
   * @param options The options parameters.
   */
  createOrUpdateExceptionPolicy(
    body: UpsertExceptionPolicyRequest,
    options?: JobRouterCreateOrUpdateExceptionPolicyOptionalParams
  ): Promise<JobRouterCreateOrUpdateExceptionPolicyResponse>;
  /**
   * Retrieves an existing exception policy by Id
   * @param id Id of the exception policy to retrieve
   * @param options The options parameters.
   */
  getExceptionPolicy(
    id: string,
    options?: JobRouterGetExceptionPolicyOptionalParams
  ): Promise<JobRouterGetExceptionPolicyResponse>;
  /**
   * Deletes a exception policy by Id
   * @param id Id of the exception policy to delete
   * @param options The options parameters.
   */
  deleteExceptionPolicy(
    id: string,
    options?: JobRouterDeleteExceptionPolicyOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Creates a new job to be routed.
   * @param body Request payload for creating new jobs
   * @param options The options parameters.
   */
  createJob(
    body: CreateJobRequest,
    options?: JobRouterCreateJobOptionalParams
  ): Promise<JobRouterCreateJobResponse>;
  /**
   * Retrieves an existing job by Id
   * @param jobId
   * @param options The options parameters.
   */
  getJob(
    jobId: string,
    options?: JobRouterGetJobOptionalParams
  ): Promise<JobRouterGetJobResponse>;
  /**
   * Update or insert labels of a job by Id.
   * @param jobId
   * @param labels A set of key/value pairs used as metadata for a job.
   * @param options The options parameters.
   */
  updateJobLabels(
    jobId: string,
    labels: { [propertyName: string]: any },
    options?: JobRouterUpdateJobLabelsOptionalParams
  ): Promise<JobRouterUpdateJobLabelsResponse>;
  /**
   * Updates an existing job by Id and forcing it to be reclassified.
   * The following attributes can be updated:
   * 1. ClassificationPolicyId: (Optional) The classification policy that will determine queue, priority
   * and required abilities.
   * 2. LabelsToUpsert: (Optional) Update or insert labels associated to a job.
   * @param jobId
   * @param body Request payload to update existing job and submit for classification
   * @param options The options parameters.
   */
  reclassifyJob(
    jobId: string,
    body: ReclassifyJobRequest,
    options?: JobRouterReclassifyJobOptionalParams
  ): Promise<JobRouterReclassifyJobResponse>;
  /**
   * Updates an existing job's queueId, priority, requiredAbilities and labels.
   * The following attributes can be updated:
   * 1. QueuedId: (Optional) Can be used to assign a job to particular queue.
   * 2. Priority: (Optional) Can be used to set job priority.
   * 3. RequiredAbilities: (Optional) Can be used to set required abilities on a job. Note, that all
   * previous abilities will be overridden.
   * @param jobId
   * @param options The options parameters.
   */
  updateJobClassification(
    jobId: string,
    options?: JobRouterUpdateJobClassificationOptionalParams
  ): Promise<JobRouterUpdateJobClassificationResponse>;
  /**
   * Submits request to cancel an existing job by Id while supplying free-form cancellation reason.
   * @param jobId
   * @param options The options parameters.
   */
  cancelJob(
    jobId: string,
    options?: JobRouterCancelJobOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Completes an assigned job.
   * @param jobId
   * @param assignmentId The assignment within the job to complete.
   * @param options The options parameters.
   */
  completeJob(
    jobId: string,
    assignmentId: string,
    options?: JobRouterCompleteJobOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Closes a completed job.
   * @param jobId
   * @param assignmentId The assignment within which the job is to be closed.
   * @param options The options parameters.
   */
  closeJob(
    jobId: string,
    assignmentId: string,
    options?: JobRouterCloseJobOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Gets a job's position details.
   * @param jobId
   * @param options The options parameters.
   */
  getInQueuePosition(
    jobId: string,
    options?: JobRouterGetInQueuePositionOptionalParams
  ): Promise<JobRouterGetInQueuePositionResponse>;
  /**
   * Accepts an offer to work on a job and returns a 409/Conflict if another agent accepted the job
   * already.
   * @param offerId
   * @param workerId
   * @param options The options parameters.
   */
  acceptJob(
    offerId: string,
    workerId: string,
    options?: JobRouterAcceptJobOptionalParams
  ): Promise<JobRouterAcceptJobResponse>;
  /**
   * Declines an offer to work on a job.
   * @param offerId
   * @param workerId
   * @param options The options parameters.
   */
  declineJob(
    offerId: string,
    workerId: string,
    options?: JobRouterDeclineJobOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Creates or updates a queue.
   * @param body Model of queue to be created or Updated
   * @param options The options parameters.
   */
  createOrUpdateQueue(
    body: UpsertQueueRequest,
    options?: JobRouterCreateOrUpdateQueueOptionalParams
  ): Promise<JobRouterCreateOrUpdateQueueResponse>;
  /**
   * Retrieves an existing queue by Id
   * @param id Id of the queue to retrieve
   * @param options The options parameters.
   */
  getQueue(
    id: string,
    options?: JobRouterGetQueueOptionalParams
  ): Promise<JobRouterGetQueueResponse>;
  /**
   * Deletes a queue by Id
   * @param id Id of the queue to delete
   * @param options The options parameters.
   */
  deleteQueue(
    id: string,
    options?: JobRouterDeleteQueueOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Registers a worker to process jobs.
   * @param body Request payload for registering workers.
   * @param options The options parameters.
   */
  registerWorker(
    body: RegisterWorkerRequest,
    options?: JobRouterRegisterWorkerOptionalParams
  ): Promise<JobRouterRegisterWorkerResponse>;
  /**
   * Deregisters a worker from processing jobs.
   * @param workerId
   * @param options The options parameters.
   */
  deregisterWorker(
    workerId: string,
    options?: JobRouterDeregisterWorkerOptionalParams
  ): Promise<coreHttp.RestResponse>;
  /**
   * Retrieves an existing worker by Id
   * @param workerId
   * @param options The options parameters.
   */
  getWorker(
    workerId: string,
    options?: JobRouterGetWorkerOptionalParams
  ): Promise<JobRouterGetWorkerResponse>;
  /**
   * Releases capacity consumed by an assignment within a workers socket collection.
   * @param workerId
   * @param assignmentId
   * @param options The options parameters.
   */
  releaseAssignment(
    workerId: string,
    assignmentId: string,
    options?: JobRouterReleaseAssignmentOptionalParams
  ): Promise<coreHttp.RestResponse>;
}
