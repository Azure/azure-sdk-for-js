/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { ChatApiClientContext } from "./chatApiClientContext";
import {
  ChatApiClientOptionalParams,
  ChatApiClientListChatReadReceiptsResponse,
  SendReadReceiptRequest,
  SendChatMessageRequest,
  ChatApiClientSendChatMessageResponse,
  ChatApiClientListChatMessagesOptionalParams,
  ChatApiClientListChatMessagesResponse,
  ChatApiClientGetChatMessageResponse,
  UpdateChatMessageRequest,
  ChatApiClientListChatParticipantsResponse,
  AddChatParticipantsRequest,
  CreateChatThreadRequest,
  ChatApiClientCreateChatThreadResponse,
  ChatApiClientListChatThreadsOptionalParams,
  ChatApiClientListChatThreadsResponse,
  UpdateChatThreadRequest,
  ChatApiClientGetChatThreadResponse,
  ChatApiClientListChatReadReceiptsNextResponse,
  ChatApiClientListChatMessagesNextOptionalParams,
  ChatApiClientListChatMessagesNextResponse,
  ChatApiClientListChatParticipantsNextResponse,
  ChatApiClientListChatThreadsNextOptionalParams,
  ChatApiClientListChatThreadsNextResponse
} from "./models";

class ChatApiClient extends ChatApiClientContext {
  /**
   * Initializes a new instance of the ChatApiClient class.
   * @param endpoint The endpoint of the Azure Communication resource.
   * @param options The parameter options
   */
  constructor(endpoint: string, options?: ChatApiClientOptionalParams) {
    super(endpoint, options);
  }

  /**
   * Gets chat message read receipts for a thread.
   * @param chatThreadId Thread id to get the chat message read receipts for.
   * @param options The options parameters.
   */
  listChatReadReceipts(
    chatThreadId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ChatApiClientListChatReadReceiptsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, options: operationOptions },
      listChatReadReceiptsOperationSpec
    ) as Promise<ChatApiClientListChatReadReceiptsResponse>;
  }

  /**
   * Sends a read receipt event to a thread, on behalf of a user.
   * @param chatThreadId Thread id to send the read receipt event to.
   * @param sendReadReceiptRequest Read receipt details.
   * @param options The options parameters.
   */
  sendChatReadReceipt(
    chatThreadId: string,
    sendReadReceiptRequest: SendReadReceiptRequest,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, sendReadReceiptRequest, options: operationOptions },
      sendChatReadReceiptOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Sends a message to a thread.
   * @param chatThreadId The thread id to send the message to.
   * @param sendChatMessageRequest Details of the message to send.
   * @param options The options parameters.
   */
  sendChatMessage(
    chatThreadId: string,
    sendChatMessageRequest: SendChatMessageRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ChatApiClientSendChatMessageResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, sendChatMessageRequest, options: operationOptions },
      sendChatMessageOperationSpec
    ) as Promise<ChatApiClientSendChatMessageResponse>;
  }

  /**
   * Gets a list of messages from a thread.
   * @param chatThreadId The thread id of the message.
   * @param options The options parameters.
   */
  listChatMessages(
    chatThreadId: string,
    options?: ChatApiClientListChatMessagesOptionalParams
  ): Promise<ChatApiClientListChatMessagesResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, options: operationOptions },
      listChatMessagesOperationSpec
    ) as Promise<ChatApiClientListChatMessagesResponse>;
  }

  /**
   * Gets a message by id.
   * @param chatThreadId The thread id to which the message was sent.
   * @param chatMessageId The message id.
   * @param options The options parameters.
   */
  getChatMessage(
    chatThreadId: string,
    chatMessageId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ChatApiClientGetChatMessageResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, chatMessageId, options: operationOptions },
      getChatMessageOperationSpec
    ) as Promise<ChatApiClientGetChatMessageResponse>;
  }

  /**
   * Updates a message.
   * @param chatThreadId The thread id to which the message was sent.
   * @param chatMessageId The message id.
   * @param updateChatMessageRequest Details of the request to update the message.
   * @param options The options parameters.
   */
  updateChatMessage(
    chatThreadId: string,
    chatMessageId: string,
    updateChatMessageRequest: UpdateChatMessageRequest,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      {
        chatThreadId,
        chatMessageId,
        updateChatMessageRequest,
        options: operationOptions
      },
      updateChatMessageOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Deletes a message.
   * @param chatThreadId The thread id to which the message was sent.
   * @param chatMessageId The message id.
   * @param options The options parameters.
   */
  deleteChatMessage(
    chatThreadId: string,
    chatMessageId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, chatMessageId, options: operationOptions },
      deleteChatMessageOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Posts a typing event to a thread, on behalf of a user.
   * @param chatThreadId Id of the thread.
   * @param options The options parameters.
   */
  sendTypingNotification(
    chatThreadId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, options: operationOptions },
      sendTypingNotificationOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets the participants of a thread.
   * @param chatThreadId Thread id to get participants for.
   * @param options The options parameters.
   */
  listChatParticipants(
    chatThreadId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ChatApiClientListChatParticipantsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, options: operationOptions },
      listChatParticipantsOperationSpec
    ) as Promise<ChatApiClientListChatParticipantsResponse>;
  }

  /**
   * Adds thread participants to a thread. If participants already exist, no change occurs.
   * @param chatThreadId Id of the thread to add participants to.
   * @param addChatParticipantsRequest Thread participants to be added to the thread.
   * @param options The options parameters.
   */
  addChatParticipants(
    chatThreadId: string,
    addChatParticipantsRequest: AddChatParticipantsRequest,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, addChatParticipantsRequest, options: operationOptions },
      addChatParticipantsOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Remove a participant from a thread.
   * @param chatThreadId Thread id to remove the participant from.
   * @param chatParticipantId Id of the thread participant to remove from the thread.
   * @param options The options parameters.
   */
  removeChatParticipant(
    chatThreadId: string,
    chatParticipantId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, chatParticipantId, options: operationOptions },
      removeChatParticipantOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Creates a chat thread.
   * @param createChatThreadRequest Request payload for creating a chat thread.
   * @param options The options parameters.
   */
  createChatThread(
    createChatThreadRequest: CreateChatThreadRequest,
    options?: coreHttp.OperationOptions
  ): Promise<ChatApiClientCreateChatThreadResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { createChatThreadRequest, options: operationOptions },
      createChatThreadOperationSpec
    ) as Promise<ChatApiClientCreateChatThreadResponse>;
  }

  /**
   * Gets the list of chat threads of a user.
   * @param options The options parameters.
   */
  listChatThreads(
    options?: ChatApiClientListChatThreadsOptionalParams
  ): Promise<ChatApiClientListChatThreadsResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { options: operationOptions },
      listChatThreadsOperationSpec
    ) as Promise<ChatApiClientListChatThreadsResponse>;
  }

  /**
   * Updates a thread's properties.
   * @param chatThreadId The id of the thread to update.
   * @param updateChatThreadRequest Request payload for updating a chat thread.
   * @param options The options parameters.
   */
  updateChatThread(
    chatThreadId: string,
    updateChatThreadRequest: UpdateChatThreadRequest,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, updateChatThreadRequest, options: operationOptions },
      updateChatThreadOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Gets a chat thread.
   * @param chatThreadId Thread id to get.
   * @param options The options parameters.
   */
  getChatThread(
    chatThreadId: string,
    options?: coreHttp.OperationOptions
  ): Promise<ChatApiClientGetChatThreadResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, options: operationOptions },
      getChatThreadOperationSpec
    ) as Promise<ChatApiClientGetChatThreadResponse>;
  }

  /**
   * Deletes a thread.
   * @param chatThreadId Thread id to delete.
   * @param options The options parameters.
   */
  deleteChatThread(
    chatThreadId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, options: operationOptions },
      deleteChatThreadOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * ListChatReadReceiptsNext
   * @param chatThreadId Thread id to get the chat message read receipts for.
   * @param nextLink The nextLink from the previous successful call to the ListChatReadReceipts method.
   * @param options The options parameters.
   */
  listChatReadReceiptsNext(
    chatThreadId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ChatApiClientListChatReadReceiptsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, nextLink, options: operationOptions },
      listChatReadReceiptsNextOperationSpec
    ) as Promise<ChatApiClientListChatReadReceiptsNextResponse>;
  }

  /**
   * ListChatMessagesNext
   * @param chatThreadId The thread id of the message.
   * @param nextLink The nextLink from the previous successful call to the ListChatMessages method.
   * @param options The options parameters.
   */
  listChatMessagesNext(
    chatThreadId: string,
    nextLink: string,
    options?: ChatApiClientListChatMessagesNextOptionalParams
  ): Promise<ChatApiClientListChatMessagesNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, nextLink, options: operationOptions },
      listChatMessagesNextOperationSpec
    ) as Promise<ChatApiClientListChatMessagesNextResponse>;
  }

  /**
   * ListChatParticipantsNext
   * @param chatThreadId Thread id to get participants for.
   * @param nextLink The nextLink from the previous successful call to the ListChatParticipants method.
   * @param options The options parameters.
   */
  listChatParticipantsNext(
    chatThreadId: string,
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<ChatApiClientListChatParticipantsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { chatThreadId, nextLink, options: operationOptions },
      listChatParticipantsNextOperationSpec
    ) as Promise<ChatApiClientListChatParticipantsNextResponse>;
  }

  /**
   * ListChatThreadsNext
   * @param nextLink The nextLink from the previous successful call to the ListChatThreads method.
   * @param options The options parameters.
   */
  listChatThreadsNext(
    nextLink: string,
    options?: ChatApiClientListChatThreadsNextOptionalParams
  ): Promise<ChatApiClientListChatThreadsNextResponse> {
    const operationOptions: coreHttp.RequestOptionsBase = coreHttp.operationOptionsToRequestOptionsBase(
      options || {}
    );
    return this.sendOperationRequest(
      { nextLink, options: operationOptions },
      listChatThreadsNextOperationSpec
    ) as Promise<ChatApiClientListChatThreadsNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const listChatReadReceiptsOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads/{chatThreadId}/readreceipts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChatMessageReadReceiptsCollection
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],
  serializer
};
const sendChatReadReceiptOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads/{chatThreadId}/readreceipts",
  httpMethod: "POST",
  responses: {
    201: {},
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.sendReadReceiptRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const sendChatMessageOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads/{chatThreadId}/messages",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.SendChatMessageResult
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.sendChatMessageRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listChatMessagesOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads/{chatThreadId}/messages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChatMessagesCollection
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxPageSize, Parameters.startTime],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],
  serializer
};
const getChatMessageOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads/{chatThreadId}/messages/{chatMessageId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChatMessage
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.chatMessageId],
  serializer
};
const updateChatMessageOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads/{chatThreadId}/messages/{chatMessageId}",
  httpMethod: "PATCH",
  responses: {
    204: {},
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.updateChatMessageRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.chatMessageId],
  headerParameters: [Parameters.contentType1],
  mediaType: "json",
  serializer
};
const deleteChatMessageOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads/{chatThreadId}/messages/{chatMessageId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.chatMessageId],
  serializer
};
const sendTypingNotificationOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads/{chatThreadId}/typing",
  httpMethod: "POST",
  responses: {
    200: {},
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],
  serializer
};
const listChatParticipantsOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads/{chatThreadId}/participants",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChatParticipantsCollection
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],
  serializer
};
const addChatParticipantsOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads/{chatThreadId}/participants",
  httpMethod: "POST",
  responses: {
    201: {},
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.addChatParticipantsRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const removeChatParticipantOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads/{chatThreadId}/participants/{chatParticipantId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.chatParticipantId],
  serializer
};
const createChatThreadOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads",
  httpMethod: "POST",
  responses: {
    201: {
      bodyMapper: Mappers.ChatThread
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.createChatThreadRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listChatThreadsOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChatThreadsInfoCollection
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxPageSize, Parameters.startTime],
  urlParameters: [Parameters.endpoint],
  serializer
};
const updateChatThreadOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads/{chatThreadId}",
  httpMethod: "PATCH",
  responses: {
    204: {},
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.updateChatThreadRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],
  headerParameters: [Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getChatThreadOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads/{chatThreadId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChatThread
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],
  serializer
};
const deleteChatThreadOperationSpec: coreHttp.OperationSpec = {
  path: "/chat/threads/{chatThreadId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],
  serializer
};
const listChatReadReceiptsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChatMessageReadReceiptsCollection
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.nextLink],
  serializer
};
const listChatMessagesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChatMessagesCollection
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxPageSize, Parameters.startTime],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.nextLink],
  serializer
};
const listChatParticipantsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChatParticipantsCollection
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.chatThreadId, Parameters.nextLink],
  serializer
};
const listChatThreadsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ChatThreadsInfoCollection
    },
    401: {
      bodyMapper: Mappers.ErrorModel
    },
    403: {
      bodyMapper: Mappers.ErrorModel
    },
    429: {
      bodyMapper: Mappers.ErrorModel
    },
    503: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.maxPageSize, Parameters.startTime],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  serializer
};

// Operation Specifications

export { ChatApiClient, ChatApiClientContext, Models as ChatApiModels, Mappers as ChatApiMappers };
