/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export interface ChatMessageReadReceiptsCollection {
  /**
   * Collection of chat message read receipts.
   */
  readonly value?: ChatMessageReadReceipt[];
  /**
   * If there are more chat message read receipts that can be retrieved, the next link will be populated.
   */
  readonly nextLink?: string;
}

/**
 * A chat message read receipt indicates the time a chat message was read by a recipient.
 */
export interface ChatMessageReadReceipt {
  /**
   * Chat message read receipt sender id.
   */
  readonly senderId?: string;
  /**
   * Id for the chat message that has been read. This id is generated by the server.
   */
  readonly chatMessageId?: string;
  /**
   * Chat message read receipt timestamp. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  readonly readOn?: Date;
}

export interface ErrorModel {
  /**
   * Error code
   */
  readonly code?: string;
  /**
   * Description of the error
   */
  readonly message?: string;
  /**
   * If applicable, would be used to indicate the property causing the error
   */
  readonly target?: string;
  /**
   * If applicable, inner errors would be returned for more details on the error
   */
  readonly innerErrors?: ErrorModel[];
}

/**
 * Request payload for sending a read receipt.
 */
export interface SendReadReceiptRequest {
  /**
   * Id of the latest chat message read by the user.
   */
  chatMessageId: string;
}

/**
 * Details of the message to send.
 */
export interface SendChatMessageRequest {
  /**
   * The chat message priority.
   */
  priority?: ChatMessagePriority;
  /**
   * Chat message content.
   */
  content: string;
  /**
   * The display name of the chat message sender. This property is used to populate sender name for push notifications.
   */
  senderDisplayName?: string;
}

/**
 * Result of the send message operation.
 */
export interface SendChatMessageResult {
  /**
   * A server-generated message id.
   */
  readonly id?: string;
}

/**
 * Collection of chat messages for a particular chat thread.
 */
export interface ChatMessagesCollection {
  /**
   * Collection of chat messages.
   */
  readonly value?: ChatMessage[];
  /**
   * If there are more chat messages that can be retrieved, the next link will be populated.
   */
  readonly nextLink?: string;
}

export interface ChatMessage {
  /**
   * The id of the chat message. This id is server generated.
   */
  readonly id?: string;
  /**
   * Type of the chat message.
   *
   * Possible values:
   *     - Text
   *     - ThreadActivity/TopicUpdate
   *     - ThreadActivity/AddMember
   *     - ThreadActivity/DeleteMember
   */
  type?: string;
  /**
   * The chat message priority.
   */
  priority?: ChatMessagePriority;
  /**
   * Version of the chat message.
   */
  readonly version?: string;
  /**
   * Content of the chat message.
   */
  content?: string;
  /**
   * The display name of the chat message sender. This property is used to populate sender name for push notifications.
   */
  senderDisplayName?: string;
  /**
   * The timestamp when the chat message arrived at the server. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  readonly createdOn?: Date;
  /**
   * The id of the chat message sender.
   */
  readonly senderId?: string;
  /**
   * The timestamp when the chat message was deleted. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  deletedOn?: Date;
  /**
   * The timestamp when the chat message was edited. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  editedOn?: Date;
}

export interface UpdateChatMessageRequest {
  /**
   * Chat message content.
   */
  content?: string;
  /**
   * The chat message priority.
   */
  priority?: ChatMessagePriority;
}

/**
 * Collection of participants belong to a particular thread.
 */
export interface ChatParticipantsCollection {
  /**
   * Chat participants.
   */
  value?: ChatParticipant[];
  /**
   * If there are more chat participants that can be retrieved, the next link will be populated.
   */
  readonly nextLink?: string;
}

/**
 * A participant of the chat thread.
 */
export interface ChatParticipant {
  /**
   * The id of the chat participant.
   */
  id: string;
  /**
   * Display name for the chat participant.
   */
  displayName?: string;
  /**
   * Time from which the chat history is shared with the participant. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  shareHistoryTime?: Date;
}

/**
 * Participants to be added to the thread.
 */
export interface AddChatParticipantsRequest {
  /**
   * Participants to add to a chat thread.
   */
  participants: ChatParticipant[];
}

/**
 * Request payload for creating a chat thread.
 */
export interface CreateChatThreadRequest {
  /**
   * The chat thread topic.
   */
  topic: string;
  /**
   * Participants to be added to the chat thread.
   */
  participants: ChatParticipant[];
}

export interface ChatThread {
  /**
   * Chat thread id.
   */
  readonly id?: string;
  /**
   * Chat thread topic.
   */
  topic?: string;
  /**
   * The timestamp when the chat thread was created. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  readonly createdOn?: Date;
  /**
   * Id of the chat thread owner.
   */
  readonly createdBy?: string;
  /**
   * The timestamp when the chat thread was deleted. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  deletedOn?: Date;
  /**
   * Chat participants.
   */
  participants?: ChatParticipant[];
}

/**
 * Collection of chat threads.
 */
export interface ChatThreadsInfoCollection {
  /**
   * Collection of chat threads.
   */
  readonly value?: ChatThreadInfo[];
  /**
   * If there are more chat threads that can be retrieved, the next link will be populated.
   */
  readonly nextLink?: string;
}

export interface ChatThreadInfo {
  /**
   * Chat thread id.
   */
  readonly id?: string;
  /**
   * Chat thread topic.
   */
  topic?: string;
  /**
   * The timestamp when the chat thread was deleted. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  deletedOn?: Date;
  /**
   * The timestamp when the last message arrived at the server. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  readonly lastMessageReceivedOn?: Date;
}

export interface UpdateChatThreadRequest {
  /**
   * Chat thread topic.
   */
  topic?: string;
}

/**
 * Defines values for ChatMessagePriority.
 */
export type ChatMessagePriority = "Normal" | "High";

/**
 * Contains response data for the listChatReadReceipts operation.
 */
export type ChatApiClientListChatReadReceiptsResponse = ChatMessageReadReceiptsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatMessageReadReceiptsCollection;
  };
};

/**
 * Contains response data for the sendChatMessage operation.
 */
export type ChatApiClientSendChatMessageResponse = SendChatMessageResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SendChatMessageResult;
  };
};

/**
 * Optional parameters.
 */
export interface ChatApiClientListChatMessagesOptionalParams extends coreHttp.OperationOptions {
  /**
   * The maximum number of messages to be returned per page.
   */
  maxPageSize?: number;
  /**
   * The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  startTime?: Date;
}

/**
 * Contains response data for the listChatMessages operation.
 */
export type ChatApiClientListChatMessagesResponse = ChatMessagesCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatMessagesCollection;
  };
};

/**
 * Contains response data for the getChatMessage operation.
 */
export type ChatApiClientGetChatMessageResponse = ChatMessage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatMessage;
  };
};

/**
 * Contains response data for the listChatParticipants operation.
 */
export type ChatApiClientListChatParticipantsResponse = ChatParticipantsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatParticipantsCollection;
  };
};

/**
 * Contains response data for the createChatThread operation.
 */
export type ChatApiClientCreateChatThreadResponse = ChatThread & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatThread;
  };
};

/**
 * Optional parameters.
 */
export interface ChatApiClientListChatThreadsOptionalParams extends coreHttp.OperationOptions {
  /**
   * The maximum number of chat threads returned per page.
   */
  maxPageSize?: number;
  /**
   * The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  startTime?: Date;
}

/**
 * Contains response data for the listChatThreads operation.
 */
export type ChatApiClientListChatThreadsResponse = ChatThreadsInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatThreadsInfoCollection;
  };
};

/**
 * Contains response data for the getChatThread operation.
 */
export type ChatApiClientGetChatThreadResponse = ChatThread & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatThread;
  };
};

/**
 * Contains response data for the listChatReadReceiptsNext operation.
 */
export type ChatApiClientListChatReadReceiptsNextResponse = ChatMessageReadReceiptsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatMessageReadReceiptsCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ChatApiClientListChatMessagesNextOptionalParams extends coreHttp.OperationOptions {
  /**
   * The maximum number of messages to be returned per page.
   */
  maxPageSize?: number;
  /**
   * The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  startTime?: Date;
}

/**
 * Contains response data for the listChatMessagesNext operation.
 */
export type ChatApiClientListChatMessagesNextResponse = ChatMessagesCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatMessagesCollection;
  };
};

/**
 * Contains response data for the listChatParticipantsNext operation.
 */
export type ChatApiClientListChatParticipantsNextResponse = ChatParticipantsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatParticipantsCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ChatApiClientListChatThreadsNextOptionalParams extends coreHttp.OperationOptions {
  /**
   * The maximum number of chat threads returned per page.
   */
  maxPageSize?: number;
  /**
   * The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  startTime?: Date;
}

/**
 * Contains response data for the listChatThreadsNext operation.
 */
export type ChatApiClientListChatThreadsNextResponse = ChatThreadsInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatThreadsInfoCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ChatApiClientOptionalParams extends coreHttp.ServiceClientOptions {
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
