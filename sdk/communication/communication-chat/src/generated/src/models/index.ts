/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export interface ReadReceiptsCollection {
  /**
   * Collection of read receipts.
   */
  readonly value?: ReadReceipt[];
  /**
   * If there are more read receipts that can be retrieved, the next link will be populated.
   */
  readonly nextLink?: string;
}

/**
 * A read receipt indicates the time a chat message was read by a recipient.
 */
export interface ReadReceipt {
  /**
   * Read receipt sender id.
   */
  readonly senderId?: string;
  /**
   * Id for the chat message that has been read. This id is generated by the server.
   */
  readonly chatMessageId?: string;
  /**
   * Read receipt timestamp. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  readonly readOn?: Date;
}

export interface ErrorModel {
  readonly code?: string;
  readonly message?: string;
  readonly target?: string;
  readonly innerErrors?: ErrorModel[];
}

/**
 * Request payload for sending a read receipt.
 */
export interface SendReadReceiptRequest {
  /**
   * Id of the latest chat message read by the user.
   */
  chatMessageId: string;
}

/**
 * Details of the message to send.
 */
export interface SendChatMessageRequest {
  /**
   * The chat message priority.
   */
  priority?: ChatMessagePriority;
  /**
   * Chat message content.
   */
  content: string;
  /**
   * The display name of the chat message sender. This property is used to populate sender name for push notifications.
   */
  senderDisplayName?: string;
}

/**
 * Result of the send message operation.
 */
export interface SendChatMessageResult {
  /**
   * A server-generated message id.
   */
  readonly id?: string;
}

/**
 * Collection of chat messages for a particular chat thread.
 */
export interface ChatMessagesCollection {
  /**
   * Collection of chat messages.
   */
  readonly value?: ChatMessage[];
  /**
   * If there are more chat messages that can be retrieved, the next link will be populated.
   */
  readonly nextLink?: string;
}

export interface ChatMessage {
  /**
   * The id of the chat message. This id is server generated.
   */
  readonly id?: string;
  /**
   * Type of the chat message.
   *
   * Possible values:
   *     - Text
   *     - ThreadActivity/TopicUpdate
   *     - ThreadActivity/AddMember
   *     - ThreadActivity/DeleteMember
   */
  type?: string;
  /**
   * The chat message priority.
   */
  priority?: ChatMessagePriority;
  /**
   * Version of the chat message.
   */
  readonly version?: string;
  /**
   * Content of the chat message.
   */
  content?: string;
  /**
   * The display name of the chat message sender. This property is used to populate sender name for push notifications.
   */
  senderDisplayName?: string;
  /**
   * The timestamp when the chat message arrived at the server. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  readonly createdOn?: Date;
  /**
   * The id of the chat message sender.
   */
  readonly senderId?: string;
  /**
   * The timestamp when the chat message was deleted. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  deletedOn?: Date;
  /**
   * The timestamp when the chat message was edited. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  editedOn?: Date;
}

export interface UpdateChatMessageRequest {
  /**
   * Chat message content.
   */
  content?: string;
  /**
   * The chat message priority.
   */
  priority?: ChatMessagePriority;
}

/**
 * Collection of thread members belong to a particular thread.
 */
export interface ChatThreadMembersCollection {
  /**
   * Chat thread members.
   */
  value?: ChatThreadMember[];
  /**
   * If there are more chat threads that can be retrieved, the next link will be populated.
   */
  readonly nextLink?: string;
}

/**
 * A member of the chat thread.
 */
export interface ChatThreadMember {
  /**
   * The id of the chat thread member in the format `8:acs:ResourceId_AcsUserId`.
   */
  id: string;
  /**
   * Display name for the chat thread member.
   */
  displayName?: string;
  /**
   * Time from which the chat history is shared with the member. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  shareHistoryTime?: Date;
}

/**
 * Thread members to be added to the thread.
 */
export interface AddChatThreadMembersRequest {
  /**
   * Members to add to a chat thread.
   */
  members: ChatThreadMember[];
}

/**
 * Request payload for creating a chat thread.
 */
export interface CreateChatThreadRequest {
  /**
   * The chat thread topic.
   */
  topic: string;
  /**
   * Members to be added to the chat thread.
   */
  members: ChatThreadMember[];
}

export interface MultiStatusResponse {
  /**
   * The list of status information for each resource in the request.
   */
  readonly multipleStatus?: IndividualStatusResponse[];
}

export interface IndividualStatusResponse {
  /**
   * Identifies the resource to which the individual status corresponds.
   */
  readonly id?: string;
  /**
   * The status code of the resource operation.
   *
   * Possible values include:
   *   200 for a successful update or delete,
   *   201 for successful creation,
   *   400 for a malformed input,
   *   403 for lacking permission to execute the operation,
   *   404 for resource not found.
   */
  readonly statusCode?: number;
  /**
   * The message explaining why the operation failed for the resource identified by the key; null if the operation succeeded.
   */
  readonly message?: string;
  /**
   * Identifies the type of the resource to which the individual status corresponds.
   */
  readonly type?: string;
}

/**
 * Collection of chat threads.
 */
export interface ChatThreadsInfoCollection {
  /**
   * Collection of chat threads.
   */
  readonly value?: ChatThreadInfo[];
  /**
   * If there are more chat threads that can be retrieved, the next link will be populated.
   */
  readonly nextLink?: string;
}

export interface ChatThreadInfo {
  /**
   * Chat thread id.
   */
  readonly id?: string;
  /**
   * Chat thread topic.
   */
  topic?: string;
  /**
   * Flag if a chat thread is soft deleted.
   */
  isDeleted?: boolean;
  /**
   * The timestamp when the last message arrived at the server. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  readonly lastMessageReceivedOn?: Date;
}

export interface UpdateChatThreadRequest {
  /**
   * Chat thread topic.
   */
  topic?: string;
}

export interface ChatThread {
  /**
   * Chat thread id.
   */
  readonly id?: string;
  /**
   * Chat thread topic.
   */
  topic?: string;
  /**
   * The timestamp when the chat thread was created. The timestamp is in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  readonly createdOn?: Date;
  /**
   * Id of the chat thread owner.
   */
  readonly createdBy?: string;
  /**
   * Chat thread members.
   */
  members?: ChatThreadMember[];
}

/**
 * Defines values for ChatMessagePriority.
 */
export type ChatMessagePriority = "Normal" | "High";

/**
 * Contains response data for the listChatReadReceipts operation.
 */
export type ChatApiClientListChatReadReceiptsResponse = ReadReceiptsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReadReceiptsCollection;
  };
};

/**
 * Contains response data for the sendChatMessage operation.
 */
export type ChatApiClientSendChatMessageResponse = SendChatMessageResult & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SendChatMessageResult;
  };
};

/**
 * Optional parameters.
 */
export interface ChatApiClientListChatMessagesOptionalParams extends coreHttp.OperationOptions {
  /**
   * The maximum number of messages to be returned per page.
   */
  maxPageSize?: number;
  /**
   * The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  startTime?: Date;
}

/**
 * Contains response data for the listChatMessages operation.
 */
export type ChatApiClientListChatMessagesResponse = ChatMessagesCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatMessagesCollection;
  };
};

/**
 * Contains response data for the getChatMessage operation.
 */
export type ChatApiClientGetChatMessageResponse = ChatMessage & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatMessage;
  };
};

/**
 * Contains response data for the listChatThreadMembers operation.
 */
export type ChatApiClientListChatThreadMembersResponse = ChatThreadMembersCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatThreadMembersCollection;
  };
};

/**
 * Contains response data for the createChatThread operation.
 */
export type ChatApiClientCreateChatThreadResponse = MultiStatusResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: MultiStatusResponse;
  };
};

/**
 * Optional parameters.
 */
export interface ChatApiClientListChatThreadsOptionalParams extends coreHttp.OperationOptions {
  /**
   * The maximum number of chat threads returned per page.
   */
  maxPageSize?: number;
  /**
   * The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  startTime?: Date;
}

/**
 * Contains response data for the listChatThreads operation.
 */
export type ChatApiClientListChatThreadsResponse = ChatThreadsInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatThreadsInfoCollection;
  };
};

/**
 * Contains response data for the getChatThread operation.
 */
export type ChatApiClientGetChatThreadResponse = ChatThread & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatThread;
  };
};

/**
 * Contains response data for the listChatReadReceiptsNext operation.
 */
export type ChatApiClientListChatReadReceiptsNextResponse = ReadReceiptsCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ReadReceiptsCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ChatApiClientListChatMessagesNextOptionalParams extends coreHttp.OperationOptions {
  /**
   * The maximum number of messages to be returned per page.
   */
  maxPageSize?: number;
  /**
   * The earliest point in time to get messages up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  startTime?: Date;
}

/**
 * Contains response data for the listChatMessagesNext operation.
 */
export type ChatApiClientListChatMessagesNextResponse = ChatMessagesCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatMessagesCollection;
  };
};

/**
 * Contains response data for the listChatThreadMembersNext operation.
 */
export type ChatApiClientListChatThreadMembersNextResponse = ChatThreadMembersCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatThreadMembersCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ChatApiClientListChatThreadsNextOptionalParams extends coreHttp.OperationOptions {
  /**
   * The maximum number of chat threads returned per page.
   */
  maxPageSize?: number;
  /**
   * The earliest point in time to get chat threads up to. The timestamp should be in ISO8601 format: `yyyy-MM-ddTHH:mm:ssZ`.
   */
  startTime?: Date;
}

/**
 * Contains response data for the listChatThreadsNext operation.
 */
export type ChatApiClientListChatThreadsNextResponse = ChatThreadsInfoCollection & {
  /**
   * The underlying HTTP response.
   */
  _response: coreHttp.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: ChatThreadsInfoCollection;
  };
};

/**
 * Optional parameters.
 */
export interface ChatApiClientOptionalParams extends coreHttp.ServiceClientOptions {
  /**
   * Api Version
   */
  apiVersion?: string;
  /**
   * Overrides client endpoint.
   */
  endpoint?: string;
}
