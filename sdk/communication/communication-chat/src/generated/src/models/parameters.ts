/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  SendReadReceiptRequest as SendReadReceiptRequestMapper,
  SendChatMessageRequest as SendChatMessageRequestMapper,
  UpdateChatMessageRequest as UpdateChatMessageRequestMapper,
  CommunicationIdentifierModel as CommunicationIdentifierModelMapper,
  AddChatParticipantsRequest as AddChatParticipantsRequestMapper,
  UpdateChatThreadRequest as UpdateChatThreadRequestMapper,
  SendTypingNotificationRequest as SendTypingNotificationRequestMapper,
  CreateChatThreadRequest as CreateChatThreadRequestMapper,
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const endpoint: OperationURLParameter = {
  parameterPath: "endpoint",
  mapper: {
    serializedName: "endpoint",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const chatThreadId: OperationURLParameter = {
  parameterPath: "chatThreadId",
  mapper: {
    serializedName: "chatThreadId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const maxPageSize: OperationQueryParameter = {
  parameterPath: ["options", "maxPageSize"],
  mapper: {
    serializedName: "maxPageSize",
    type: {
      name: "Number",
    },
  },
};

export const skip: OperationQueryParameter = {
  parameterPath: ["options", "skip"],
  mapper: {
    serializedName: "skip",
    type: {
      name: "Number",
    },
  },
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2024-06-05-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const sendReadReceiptRequest: OperationParameter = {
  parameterPath: "sendReadReceiptRequest",
  mapper: SendReadReceiptRequestMapper,
};

export const sendChatMessageRequest: OperationParameter = {
  parameterPath: "sendChatMessageRequest",
  mapper: SendChatMessageRequestMapper,
};

export const startTime: OperationQueryParameter = {
  parameterPath: ["options", "startTime"],
  mapper: {
    serializedName: "startTime",
    type: {
      name: "DateTime",
    },
  },
};

export const chatMessageId: OperationURLParameter = {
  parameterPath: "chatMessageId",
  mapper: {
    serializedName: "chatMessageId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const contentType1: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/merge-patch+json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const updateChatMessageRequest: OperationParameter = {
  parameterPath: "updateChatMessageRequest",
  mapper: UpdateChatMessageRequestMapper,
};

export const participantCommunicationIdentifier: OperationParameter = {
  parameterPath: "participantCommunicationIdentifier",
  mapper: CommunicationIdentifierModelMapper,
};

export const addChatParticipantsRequest: OperationParameter = {
  parameterPath: "addChatParticipantsRequest",
  mapper: AddChatParticipantsRequestMapper,
};

export const updateChatThreadRequest: OperationParameter = {
  parameterPath: "updateChatThreadRequest",
  mapper: UpdateChatThreadRequestMapper,
};

export const sendTypingNotificationRequest: OperationParameter = {
  parameterPath: ["options", "sendTypingNotificationRequest"],
  mapper: SendTypingNotificationRequestMapper,
};

export const contentType2: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/octet-stream",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const chatImageFile: OperationParameter = {
  parameterPath: "chatImageFile",
  mapper: {
    serializedName: "chatImageFile",
    required: true,
    type: {
      name: "Stream",
    },
  },
};

export const accept1: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const imageFilename: OperationParameter = {
  parameterPath: ["options", "imageFilename"],
  mapper: {
    serializedName: "image-filename",
    type: {
      name: "String",
    },
  },
};

export const accept2: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue:
      "application/json, image/gif, image/jpeg, image/png, image/bmp, image/tiff",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const imageId: OperationURLParameter = {
  parameterPath: "imageId",
  mapper: {
    serializedName: "imageId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const imageViewType: OperationURLParameter = {
  parameterPath: "imageViewType",
  mapper: {
    serializedName: "imageViewType",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const createChatThreadRequest: OperationParameter = {
  parameterPath: "createChatThreadRequest",
  mapper: CreateChatThreadRequestMapper,
};

export const repeatabilityRequestId: OperationParameter = {
  parameterPath: ["options", "repeatabilityRequestId"],
  mapper: {
    serializedName: "repeatability-request-id",
    type: {
      name: "String",
    },
  },
};
