/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationURLParameter,
  OperationQueryParameter,
  OperationParameter
} from "@azure/core-http";
import {
  SendReadReceiptRequest as SendReadReceiptRequestMapper,
  SendChatMessageRequest as SendChatMessageRequestMapper,
  UpdateChatMessageRequest as UpdateChatMessageRequestMapper,
  AddChatParticipantsRequest as AddChatParticipantsRequestMapper,
  CreateChatThreadRequest as CreateChatThreadRequestMapper,
  UpdateChatThreadRequest as UpdateChatThreadRequestMapper
} from "../models/mappers";

export const endpoint: OperationURLParameter = {
  parameterPath: "endpoint",
  mapper: {
    serializedName: "endpoint",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const chatThreadId: OperationURLParameter = {
  parameterPath: "chatThreadId",
  mapper: {
    serializedName: "chatThreadId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2020-11-01-preview3",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const sendReadReceiptRequest: OperationParameter = {
  parameterPath: "sendReadReceiptRequest",
  mapper: SendReadReceiptRequestMapper
};

export const sendChatMessageRequest: OperationParameter = {
  parameterPath: "sendChatMessageRequest",
  mapper: SendChatMessageRequestMapper
};

export const maxPageSize: OperationQueryParameter = {
  parameterPath: ["options", "maxPageSize"],
  mapper: {
    serializedName: "maxPageSize",
    type: {
      name: "Number"
    }
  }
};

export const startTime: OperationQueryParameter = {
  parameterPath: ["options", "startTime"],
  mapper: {
    serializedName: "startTime",
    type: {
      name: "DateTime"
    }
  }
};

export const chatMessageId: OperationURLParameter = {
  parameterPath: "chatMessageId",
  mapper: {
    serializedName: "chatMessageId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType1: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/merge-patch+json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const updateChatMessageRequest: OperationParameter = {
  parameterPath: "updateChatMessageRequest",
  mapper: UpdateChatMessageRequestMapper
};

export const addChatParticipantsRequest: OperationParameter = {
  parameterPath: "addChatParticipantsRequest",
  mapper: AddChatParticipantsRequestMapper
};

export const chatParticipantId: OperationURLParameter = {
  parameterPath: "chatParticipantId",
  mapper: {
    serializedName: "chatParticipantId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const createChatThreadRequest: OperationParameter = {
  parameterPath: "createChatThreadRequest",
  mapper: CreateChatThreadRequestMapper
};

export const updateChatThreadRequest: OperationParameter = {
  parameterPath: "updateChatThreadRequest",
  mapper: UpdateChatThreadRequestMapper
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};
