{"version":3,"file":"chatClient.js","sourceRoot":"","sources":["../../src/chatClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  ChatClientOptions,\n  CreateChatThreadOptions,\n  DeleteChatThreadOptions,\n  ListChatThreadsOptions,\n} from \"./models/options.js\";\nimport type {\n  ChatEventId,\n  ChatMessageDeletedEvent,\n  ChatMessageEditedEvent,\n  ChatMessageReceivedEvent,\n  ChatThreadCreatedEvent,\n  ChatThreadDeletedEvent,\n  ChatThreadPropertiesUpdatedEvent,\n  ParticipantsAddedEvent,\n  ParticipantsRemovedEvent,\n  ReadReceiptReceivedEvent,\n  TypingIndicatorReceivedEvent,\n} from \"./models/events.js\";\nimport type { ChatThreadItem, CreateChatThreadResult, ListPageSettings } from \"./models/models.js\";\nimport type { SignalingClient, SignalingClientOptions } from \"@azure/communication-signaling\";\nimport { ConnectionState } from \"@azure/communication-signaling\";\nimport {\n  mapToChatParticipantRestModel,\n  mapToCreateChatThreadOptionsRestModel,\n  mapToCreateChatThreadResultSdkModel,\n} from \"./models/mappers.js\";\nimport { ChatApiClient } from \"./generated/src/index.js\";\nimport { ChatThreadClient } from \"./chatThreadClient.js\";\nimport type { CommunicationTokenCredential } from \"@azure/communication-common\";\nimport type { CreateChatThreadRequest } from \"./models/requests.js\";\nimport { EventEmitter } from \"events\";\nimport type { InternalPipelineOptions } from \"@azure/core-rest-pipeline\";\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { createCommunicationTokenCredentialPolicy } from \"./credential/communicationTokenCredentialPolicy.js\";\nimport { generateUuid } from \"./models/uuid.js\";\nimport { getSignalingClient } from \"./signaling/signalingClient.js\";\nimport { logger } from \"./models/logger.js\";\nimport { tracingClient } from \"./generated/src/tracing.js\";\n\ndeclare interface InternalChatClientOptions extends ChatClientOptions {\n  signalingClientOptions?: SignalingClientOptions;\n}\n\n/**\n * The client to do chat operations\n */\nexport class ChatClient {\n  private readonly tokenCredential: CommunicationTokenCredential;\n  private readonly clientOptions: InternalChatClientOptions;\n  private readonly client: ChatApiClient;\n  private readonly signalingClient: SignalingClient | undefined = undefined;\n  private readonly emitter = new EventEmitter();\n  private isRealtimeNotificationsStarted: boolean = false;\n\n  /**\n   * Creates an instance of the ChatClient for a given resource and user.\n   *\n   * @param endpoint - The url of the Communication Services resource.\n   * @param credential - The token credential. Use AzureCommunicationTokenCredential from \\@azure/communication-common to create a credential.\n   * @param options - Additional client options.\n   */\n  constructor(\n    private readonly endpoint: string,\n    credential: CommunicationTokenCredential,\n    options: ChatClientOptions = {},\n  ) {\n    this.tokenCredential = credential;\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    this.client = new ChatApiClient(this.endpoint, {\n      endpoint: this.endpoint,\n      ...internalPipelineOptions,\n    });\n\n    const authPolicy = createCommunicationTokenCredentialPolicy(this.tokenCredential);\n    this.client.pipeline.addPolicy(authPolicy);\n\n    this.clientOptions = { ...options };\n    this.clientOptions.signalingClientOptions = {\n      ...this.clientOptions.signalingClientOptions,\n      resourceEndpoint: this.endpoint,\n      gatewayApiVersion: this.client.apiVersion,\n    };\n\n    this.signalingClient = getSignalingClient(\n      credential,\n      logger,\n      this.clientOptions.signalingClientOptions,\n    );\n  }\n\n  /**\n   * Returns ChatThreadClient with the specific thread id.\n   * @param threadId - Thread ID for the ChatThreadClient\n   */\n  public getChatThreadClient(threadId: string): ChatThreadClient {\n    return new ChatThreadClient(this.endpoint, threadId, this.tokenCredential, this.clientOptions);\n  }\n\n  /**\n   * Creates a chat thread.\n   * Returns thread client with the id of the created thread.\n   * @param request - Request for creating a chat thread.\n   * @param options - Operation options.\n   */\n  public async createChatThread(\n    request: CreateChatThreadRequest,\n    options: CreateChatThreadOptions = {},\n  ): Promise<CreateChatThreadResult> {\n    return tracingClient.withSpan(\n      \"ChatClient-CreateChatThread\",\n      options,\n      async (updatedOptions) => {\n        // We generate an UUID if the user does not provide an idempotencyToken value\n        updatedOptions.idempotencyToken = updatedOptions.idempotencyToken ?? generateUuid();\n        const updatedRestModelOptions = mapToCreateChatThreadOptionsRestModel(updatedOptions);\n\n        const result = await this.client.chat.createChatThread(\n          {\n            topic: request.topic,\n            participants: options.participants?.map((participant) =>\n              mapToChatParticipantRestModel(participant),\n            ),\n          },\n          updatedRestModelOptions,\n        );\n        return mapToCreateChatThreadResultSdkModel(result);\n      },\n    );\n  }\n\n  private async *listChatThreadsPage(\n    continuationState: ListPageSettings,\n    options: ListChatThreadsOptions = {},\n  ): AsyncIterableIterator<ChatThreadItem[]> {\n    if (!continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chat.listChatThreads(options);\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value;\n      }\n    }\n\n    while (continuationState.continuationToken) {\n      const currentSetResponse = await this.client.chat.listChatThreadsNext(\n        continuationState.continuationToken,\n        options,\n      );\n      continuationState.continuationToken = currentSetResponse.nextLink;\n      if (currentSetResponse.value) {\n        yield currentSetResponse.value;\n      } else {\n        break;\n      }\n    }\n  }\n\n  private async *listChatThreadsAll(\n    options: ListChatThreadsOptions,\n  ): AsyncIterableIterator<ChatThreadItem> {\n    for await (const page of this.listChatThreadsPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the list of chat threads of a user.\n   * @param options - List chat threads options.\n   */\n  public listChatThreads(\n    options: ListChatThreadsOptions = {},\n  ): PagedAsyncIterableIterator<ChatThreadItem> {\n    const { span, updatedOptions } = tracingClient.startSpan(\"ChatClient-ListChatThreads\", options);\n    try {\n      const iter = this.listChatThreadsAll(updatedOptions);\n      return {\n        next() {\n          return iter.next();\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        },\n        byPage: (settings: ListPageSettings = {}) => {\n          return this.listChatThreadsPage(settings, updatedOptions);\n        },\n      };\n    } catch (e: any) {\n      span.setStatus({\n        error: e,\n        status: \"error\",\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a chat thread.\n   * @param threadId - The ID of the thread to delete.\n   * @param options -  Operation options.\n   */\n  public async deleteChatThread(\n    threadId: string,\n    options: DeleteChatThreadOptions = {},\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatClient-DeleteChatThread\",\n      options,\n      async (updatedOptions) => {\n        await this.client.chat.deleteChatThread(threadId, updatedOptions);\n      },\n    );\n  }\n\n  /**\n   * Start receiving realtime notifications.\n   * Call this function before subscribing to any event.\n   */\n  public async startRealtimeNotifications(): Promise<void> {\n    if (this.signalingClient === undefined) {\n      throw new Error(\"Realtime notifications are not supported in node js.\");\n    }\n\n    if (this.isRealtimeNotificationsStarted) {\n      return;\n    }\n\n    this.isRealtimeNotificationsStarted = true;\n    await this.signalingClient.start();\n    this.subscribeToSignalingEvents();\n  }\n\n  /**\n   * Stop receiving realtime notifications.\n   * This function would unsubscribe to all events.\n   */\n  public async stopRealtimeNotifications(): Promise<void> {\n    if (this.signalingClient === undefined) {\n      throw new Error(\"Realtime notifications are not supported in node js.\");\n    }\n\n    this.isRealtimeNotificationsStarted = false;\n    await this.signalingClient.stop();\n    this.emitter.removeAllListeners();\n  }\n\n  /**\n   * Subscribe function for chatMessageReceived.\n   * The initial sender will also receive this event.\n   * You need to call startRealtimeNotifications before subscribing to any event.\n   * @param event - The ChatMessageReceivedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"chatMessageReceived\", listener: (e: ChatMessageReceivedEvent) => void): void;\n\n  /**\n   * Subscribe function for chatMessageEdited.\n   * The initial sender will also receive this event.\n   * @param event - The ChatMessageEditedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"chatMessageEdited\", listener: (e: ChatMessageEditedEvent) => void): void;\n\n  /**\n   * Subscribe function for chatMessageDeleted.\n   * The initial sender will also receive this event.\n   * @param event - The ChatMessageDeletedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"chatMessageDeleted\", listener: (e: ChatMessageDeletedEvent) => void): void;\n\n  /**\n   * Subscribe function for typingIndicatorReceived.\n   * The initial sender will also receive this event.\n   * @param event - The TypingIndicatorReceivedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(\n    event: \"typingIndicatorReceived\",\n    listener: (e: TypingIndicatorReceivedEvent) => void,\n  ): void;\n\n  /**\n   * Subscribe function for readReceiptReceived.\n   * @param event - The ReadReceiptReceivedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"readReceiptReceived\", listener: (e: ReadReceiptReceivedEvent) => void): void;\n\n  /**\n   * Subscribe function for chatThreadCreated.\n   * @param event - The ChatThreadCreatedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"chatThreadCreated\", listener: (e: ChatThreadCreatedEvent) => void): void;\n\n  /**\n   * Subscribe function for chatThreadDeleted.\n   * @param event - The ChatThreadDeletedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"chatThreadDeleted\", listener: (e: ChatThreadDeletedEvent) => void): void;\n\n  /**\n   * Subscribe function for chatThreadPropertiesUpdated.\n   * @param event - The ChatThreadPropertiesUpdatedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(\n    event: \"chatThreadPropertiesUpdated\",\n    listener: (e: ChatThreadPropertiesUpdatedEvent) => void,\n  ): void;\n\n  /**\n   * Subscribe function for participantsAdded.\n   * @param event - The ParticipantsAddedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"participantsAdded\", listener: (e: ParticipantsAddedEvent) => void): void;\n\n  /**\n   * Subscribe function for participantsRemoved.\n   * @param event - The ParticipantsRemovedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"participantsRemoved\", listener: (e: ParticipantsRemovedEvent) => void): void;\n\n  /**\n   * Subscribe function for realTimeNotificationConnected.\n   * @param event - The realTimeNotificationConnected Event\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"realTimeNotificationConnected\", listener: () => void): void;\n\n  /**\n   * Subscribe function for realTimeNotificationDisconnected.\n   * @param event - The realTimeNotificationDisconnected Event\n   * @param listener - The listener to handle the event.\n   */\n  public on(event: \"realTimeNotificationDisconnected\", listener: () => void): void;\n\n  public on(event: ChatEventId, listener: (e?: any) => void): void {\n    if (this.signalingClient === undefined) {\n      throw new Error(\"Realtime notifications are only supported in the browser.\");\n    }\n    if (\n      !this.isRealtimeNotificationsStarted &&\n      event !== \"realTimeNotificationConnected\" &&\n      event !== \"realTimeNotificationDisconnected\"\n    ) {\n      throw new Error(\n        \"You must call startRealtimeNotifications before you can subscribe to events.\",\n      );\n    }\n\n    this.emitter.on(event, listener);\n  }\n\n  /**\n   * Unsubscribe from chatMessageReceived.\n   * @param event - The ChatMessageReceivedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"chatMessageReceived\", listener: (e: ChatMessageReceivedEvent) => void): void;\n\n  /**\n   * Unsubscribe from chatMessageEdited.\n   * @param event - The ChatMessageEditedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"chatMessageEdited\", listener: (e: ChatMessageEditedEvent) => void): void;\n\n  /**\n   * Unsubscribe from chatMessageDeleted.\n   * @param event - The ChatMessageDeletedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"chatMessageDeleted\", listener: (e: ChatMessageDeletedEvent) => void): void;\n\n  /**\n   * Unsubscribe from typingIndicatorReceived.\n   * @param event - The TypingIndicatorReceivedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(\n    event: \"typingIndicatorReceived\",\n    listener: (e: TypingIndicatorReceivedEvent) => void,\n  ): void;\n\n  /**\n   * Unsubscribe from readReceiptReceived.\n   * @param event - The ReadReceiptReceivedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"readReceiptReceived\", listener: (e: ReadReceiptReceivedEvent) => void): void;\n\n  /**\n   *  Unsubscribe from chatThreadCreated.\n   * @param event - The ChatThreadCreatedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"chatThreadCreated\", listener: (e: ChatThreadCreatedEvent) => void): void;\n\n  /**\n   *  Unsubscribe from chatThreadDeleted.\n   * @param event - The ChatThreadDeletedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"chatThreadDeleted\", listener: (e: ChatThreadDeletedEvent) => void): void;\n\n  /**\n   * Unsubscribe from chatThreadPropertiesUpdated.\n   * @param event - The ChatThreadPropertiesUpdatedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(\n    event: \"chatThreadPropertiesUpdated\",\n    listener: (e: ChatThreadPropertiesUpdatedEvent) => void,\n  ): void;\n\n  /**\n   * Unsubscribe from participantsAdded.\n   * @param event - The ParticipantsAddedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"participantsAdded\", listener: (e: ParticipantsAddedEvent) => void): void;\n\n  /**\n   * Unsubscribe from participantsRemoved.\n   * @param event - The ParticipantsRemovedEvent.\n   * @param listener - The listener to handle the event.\n   */\n  public off(event: \"participantsRemoved\", listener: (e: ParticipantsRemovedEvent) => void): void;\n\n  public off(event: ChatEventId, listener: (e: any) => void): void {\n    if (this.signalingClient === undefined) {\n      throw new Error(\"Realtime notifications are only supported in the browser.\");\n    }\n\n    this.emitter.removeListener(event, listener);\n  }\n\n  private subscribeToSignalingEvents(): void {\n    if (this.signalingClient === undefined) {\n      throw new Error(\"Realtime notifications are only supported in the browser.\");\n    }\n\n    this.signalingClient.on(\"connectionChanged\", (payload) => {\n      if (payload === ConnectionState.Connected) {\n        this.emitter.emit(\"realTimeNotificationConnected\");\n      } else if (payload === ConnectionState.Disconnected) {\n        this.emitter.emit(\"realTimeNotificationDisconnected\");\n      }\n    });\n\n    this.signalingClient.on(\"chatMessageReceived\", (payload) => {\n      this.emitter.emit(\"chatMessageReceived\", payload);\n    });\n\n    this.signalingClient.on(\"chatMessageEdited\", (payload) => {\n      this.emitter.emit(\"chatMessageEdited\", payload);\n    });\n\n    this.signalingClient.on(\"chatMessageDeleted\", (payload) => {\n      this.emitter.emit(\"chatMessageDeleted\", payload);\n    });\n\n    this.signalingClient.on(\"typingIndicatorReceived\", (payload) => {\n      this.emitter.emit(\"typingIndicatorReceived\", payload);\n    });\n\n    this.signalingClient.on(\"readReceiptReceived\", (payload) => {\n      this.emitter.emit(\"readReceiptReceived\", payload);\n    });\n\n    this.signalingClient.on(\"chatThreadCreated\", (payload) => {\n      this.emitter.emit(\"chatThreadCreated\", payload);\n    });\n\n    this.signalingClient.on(\"chatThreadDeleted\", (payload) => {\n      this.emitter.emit(\"chatThreadDeleted\", payload);\n    });\n\n    this.signalingClient.on(\"chatThreadPropertiesUpdated\", (payload) => {\n      this.emitter.emit(\"chatThreadPropertiesUpdated\", payload);\n    });\n\n    this.signalingClient.on(\"participantsAdded\", (payload) => {\n      this.emitter.emit(\"participantsAdded\", payload);\n    });\n\n    this.signalingClient.on(\"participantsRemoved\", (payload) => {\n      this.emitter.emit(\"participantsRemoved\", payload);\n    });\n  }\n}\n"]}