/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { SendReadReceiptRequest as SendReadReceiptRequestMapper, SendChatMessageRequest as SendChatMessageRequestMapper, UpdateChatMessageRequest as UpdateChatMessageRequestMapper, CommunicationIdentifierModel as CommunicationIdentifierModelMapper, AddChatParticipantsRequest as AddChatParticipantsRequestMapper, UpdateChatThreadRequest as UpdateChatThreadRequestMapper, SendTypingNotificationRequest as SendTypingNotificationRequestMapper, CreateChatThreadRequest as CreateChatThreadRequestMapper, } from "../models/mappers.js";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const chatThreadId = {
    parameterPath: "chatThreadId",
    mapper: {
        serializedName: "chatThreadId",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const maxPageSize = {
    parameterPath: ["options", "maxPageSize"],
    mapper: {
        serializedName: "maxPageSize",
        type: {
            name: "Number",
        },
    },
};
export const skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        serializedName: "skip",
        type: {
            name: "Number",
        },
    },
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2025-03-15",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const sendReadReceiptRequest = {
    parameterPath: "sendReadReceiptRequest",
    mapper: SendReadReceiptRequestMapper,
};
export const sendChatMessageRequest = {
    parameterPath: "sendChatMessageRequest",
    mapper: SendChatMessageRequestMapper,
};
export const startTime = {
    parameterPath: ["options", "startTime"],
    mapper: {
        serializedName: "startTime",
        type: {
            name: "DateTime",
        },
    },
};
export const chatMessageId = {
    parameterPath: "chatMessageId",
    mapper: {
        serializedName: "chatMessageId",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/merge-patch+json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const updateChatMessageRequest = {
    parameterPath: "updateChatMessageRequest",
    mapper: UpdateChatMessageRequestMapper,
};
export const participantCommunicationIdentifier = {
    parameterPath: "participantCommunicationIdentifier",
    mapper: CommunicationIdentifierModelMapper,
};
export const addChatParticipantsRequest = {
    parameterPath: "addChatParticipantsRequest",
    mapper: AddChatParticipantsRequestMapper,
};
export const updateChatThreadRequest = {
    parameterPath: "updateChatThreadRequest",
    mapper: UpdateChatThreadRequestMapper,
};
export const sendTypingNotificationRequest = {
    parameterPath: ["options", "sendTypingNotificationRequest"],
    mapper: SendTypingNotificationRequestMapper,
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const createChatThreadRequest = {
    parameterPath: "createChatThreadRequest",
    mapper: CreateChatThreadRequestMapper,
};
export const repeatabilityRequestId = {
    parameterPath: ["options", "repeatabilityRequestId"],
    mapper: {
        serializedName: "repeatability-request-id",
        type: {
            name: "String",
        },
    },
};
//# sourceMappingURL=parameters.js.map