{"version":3,"file":"models.js","sourceRoot":"","sources":["../../../src/models/models.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  CommunicationIdentifier,\n  CommunicationIdentifierKind,\n} from \"@azure/communication-common\";\nimport type { ChatError, ChatMessageType } from \"../generated/src/index.js\";\n\nexport {\n  AddChatParticipantsResult,\n  ChatMessageType,\n  ChatThreadItem,\n  ChatError,\n  SendChatMessageResult,\n} from \"../generated/src/models/index.js\";\n\n/** Chat thread. */\nexport interface ChatThreadProperties {\n  /** Chat thread id. */\n  id: string;\n  /** Chat thread topic. */\n  topic: string;\n  /** The timestamp when the chat thread was created. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */\n  createdOn: Date;\n  /** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set. */\n  readonly createdBy?: CommunicationIdentifierKind;\n  /** The timestamp when the chat thread was deleted. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */\n  deletedOn?: Date;\n  /** metadata */\n  metadata?: Record<string, string>;\n  /** Data retention policy for auto deletion. */\n  retentionPolicy?: ChatRetentionPolicy;\n}\n\n/** Thread retention policy based on thread creation date. */\nexport interface ThreadCreationDateRetentionPolicy {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"threadCreationDate\";\n  /** Indicates how many days after the thread creation the thread will be deleted. */\n  deleteThreadAfterDays: number;\n}\n\n/** Data retention policy for auto deletion. */\nexport declare type ChatRetentionPolicy = ThreadCreationDateRetentionPolicy;\n\n/** Chat message. */\nexport interface ChatMessage {\n  /** The id of the chat message. This id is server generated. */\n  id: string;\n  /** The chat message type. */\n  type: ChatMessageType;\n  /** Sequence of the chat message in the conversation. */\n  sequenceId: string;\n  /** Version of the chat message. */\n  version: string;\n  /** Content of a chat message. */\n  content?: ChatMessageContent;\n  /** The display name of the chat message sender. This property is used to populate sender name for push notifications. */\n  senderDisplayName?: string;\n  /** The timestamp when the chat message arrived at the server. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */\n  createdOn: Date;\n  /** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set. */\n  sender?: CommunicationIdentifierKind;\n  /** The timestamp (if applicable) when the message was deleted. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */\n  deletedOn?: Date;\n  /** The last timestamp (if applicable) when the message was edited. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */\n  editedOn?: Date;\n  /** metadata */\n  metadata?: Record<string, string>;\n}\n\n/** Content of a chat message. */\nexport interface ChatMessageContent {\n  /** Chat message content for messages of types text or html. */\n  message?: string;\n  /** Chat message content for messages of type topicUpdated. */\n  topic?: string;\n  /** Chat message content for messages of types participantAdded or participantRemoved. */\n  participants?: ChatParticipant[];\n  /** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set. */\n  initiator?: CommunicationIdentifierKind;\n  /** List of attachments for this message */\n  attachments?: ChatAttachment[];\n}\n\n/** A chat message read receipt indicates the time a chat message was read by a recipient. */\nexport interface ChatMessageReadReceipt {\n  /** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set. */\n  sender: CommunicationIdentifierKind;\n  /** Id of the chat message that has been read. This id is generated by the server. */\n  chatMessageId: string;\n  /** The time at which the message was read. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */\n  readOn: Date;\n}\n\n/** A participant of the chat thread. */\nexport interface ChatParticipant {\n  /** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set. */\n  id: CommunicationIdentifier;\n  /** Display name for the chat participant. */\n  displayName?: string;\n  /** Time from which the chat history is shared with the participant. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */\n  shareHistoryTime?: Date;\n  /** metadata */\n  metadata?: Record<string, string>;\n}\n\n/** Result of the create chat thread operation. */\nexport interface CreateChatThreadResult {\n  /** Chat thread. */\n  chatThread?: ChatThreadProperties;\n  /**\n   * The participants that failed to be added to the chat thread.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly invalidParticipants?: ChatError[];\n}\n\n/**\n * Arguments for retrieving the next page of search results.\n */\nexport interface ListPageSettings {\n  /**\n   * A token used for retrieving the next page of results when the server\n   * enforces pagination.\n   */\n  continuationToken?: string;\n}\n\n/** Defines values for AttachmentType. */\nexport type ChatAttachmentType = \"image\" | \"file\" | \"unknown\";\n\n/** An attachment in a chat message. */\nexport interface ChatAttachment {\n  /** Id of the attachment */\n  id: string;\n  /** The type of attachment. */\n  attachmentType: ChatAttachmentType;\n  /** The name of the attachment content. */\n  name?: string;\n  /** The URL where the attachment can be downloaded */\n  url?: string;\n  /** The URL where the preview of attachment can be downloaded */\n  previewUrl?: string;\n}\n"]}