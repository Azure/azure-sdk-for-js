{"version":3,"file":"mappers.js","sourceRoot":"","sources":["../../../src/models/mappers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { SerializedCommunicationIdentifier } from \"@azure/communication-common\";\nimport {\n  deserializeCommunicationIdentifier,\n  serializeCommunicationIdentifier,\n} from \"@azure/communication-common\";\nimport type * as RestModel from \"../generated/src/models/index.js\";\nimport type { AddParticipantsRequest } from \"./requests.js\";\nimport type { CreateChatThreadOptions } from \"./options.js\";\nimport type {\n  ChatMessage,\n  ChatMessageContent,\n  ChatMessageReadReceipt,\n  ChatParticipant,\n  ChatRetentionPolicy,\n  ChatThreadProperties,\n  CreateChatThreadResult,\n} from \"./models.js\";\n\nexport const mapToCreateChatThreadOptionsRestModel = (\n  options: CreateChatThreadOptions,\n): RestModel.ChatCreateChatThreadOptionalParams => {\n  const { participants, idempotencyToken, ...rest } = options;\n  return {\n    repeatabilityRequestId: idempotencyToken,\n    ...rest,\n  };\n};\n\n/**\n * @internal\n * Mapping chat participant customer model to chat participant REST model\n */\nexport const mapToChatParticipantRestModel = (\n  chatParticipant: ChatParticipant,\n): RestModel.ChatParticipant => {\n  const { id, ...rest } = chatParticipant;\n  return {\n    ...rest,\n    communicationIdentifier: serializeCommunicationIdentifier(id),\n  };\n};\n\n/**\n * @internal\n * Mapping add participants request to add chat participants request REST model\n */\nexport const mapToAddChatParticipantsRequestRestModel = (\n  addParticipantsRequest: AddParticipantsRequest,\n): RestModel.AddChatParticipantsRequest => {\n  return {\n    participants: addParticipantsRequest.participants?.map((participant) =>\n      mapToChatParticipantRestModel(participant),\n    ),\n  };\n};\n\n/**\n * @internal\n * Mapping chat participant REST model to chat participant SDK model\n */\nexport const mapToChatParticipantSdkModel = (\n  chatParticipant: RestModel.ChatParticipant,\n): ChatParticipant => {\n  const { communicationIdentifier, ...rest } = chatParticipant;\n  return {\n    ...rest,\n    id: deserializeCommunicationIdentifier(\n      communicationIdentifier as SerializedCommunicationIdentifier,\n    ),\n  };\n};\n\n/**\n * @internal\n */\nexport const mapToChatContentSdkModel = (\n  content: RestModel.ChatMessageContent,\n): ChatMessageContent => {\n  const { participants, initiatorCommunicationIdentifier, ...otherChatContents } = content;\n  let result: ChatMessageContent = { ...otherChatContents };\n  if (initiatorCommunicationIdentifier) {\n    const initiator = deserializeCommunicationIdentifier(\n      initiatorCommunicationIdentifier as SerializedCommunicationIdentifier,\n    );\n    result = { ...result, initiator };\n  }\n  if (participants) {\n    result = {\n      ...result,\n      participants: participants?.map((participant) => mapToChatParticipantSdkModel(participant)),\n    };\n  }\n  return result;\n};\n\n/**\n * @internal\n * Mapping chat message REST model to chat message SDK model\n */\nexport const mapToChatMessageSdkModel = (chatMessage: RestModel.ChatMessage): ChatMessage => {\n  const { content, senderCommunicationIdentifier, ...otherChatMessage } = chatMessage;\n  let result: ChatMessage = { ...otherChatMessage };\n  if (content) {\n    result = {\n      ...result,\n      content: mapToChatContentSdkModel(content),\n    };\n  }\n  if (senderCommunicationIdentifier) {\n    const sender = deserializeCommunicationIdentifier(\n      senderCommunicationIdentifier as SerializedCommunicationIdentifier,\n    );\n    result = { ...result, sender };\n  }\n  return result;\n};\n\n/**\n * @internal\n * Mapping chat messages collection REST model to chat message SDK model array\n */\nexport const mapToChatMessagesSdkModelArray = (\n  chatMessagesCollection: RestModel.ChatMessagesCollection,\n): ChatMessage[] => {\n  return chatMessagesCollection.value?.map((chatMessage) => mapToChatMessageSdkModel(chatMessage));\n};\n\n/**\n * @internal\n * Mapping chat retention policy REST model to chat retention policy SDK model\n */\nexport const mapToRetentionPolicySdkModel = (\n  retentionPolicy: RestModel.ChatRetentionPolicyUnion,\n): ChatRetentionPolicy => {\n  if (retentionPolicy.kind === \"threadCreationDate\") {\n    return retentionPolicy as RestModel.ThreadCreationDateRetentionPolicy;\n  } else {\n    throw new Error(`Retention Policy ${retentionPolicy.kind} is not supported`);\n  }\n};\n\n/**\n * @internal\n * Mapping chat thread REST model to chat thread SDK model\n */\nexport const mapToChatThreadPropertiesSdkModel = (\n  chatThread: RestModel.ChatThreadProperties,\n): ChatThreadProperties => {\n  const { createdByCommunicationIdentifier, retentionPolicy, ...rest } = chatThread;\n  let result: ChatThreadProperties = { ...rest };\n  if (createdByCommunicationIdentifier) {\n    result = {\n      ...result,\n      createdBy: deserializeCommunicationIdentifier(\n        createdByCommunicationIdentifier as SerializedCommunicationIdentifier,\n      ),\n    };\n  }  \n  \n  if (retentionPolicy) {\n    result = {\n      ...result,\n      retentionPolicy: mapToRetentionPolicySdkModel(retentionPolicy),\n    };\n  }\n\n  return result;\n};\n\n/**\n * @internal\n * Mapping chat thread REST model to chat thread SDK model\n */\nexport const mapToCreateChatThreadResultSdkModel = (\n  result: RestModel.CreateChatThreadResult,\n): CreateChatThreadResult => {\n  const { chatThread, ...rest } = result;\n  if (chatThread) {\n    return {\n      ...rest,\n      chatThread: mapToChatThreadPropertiesSdkModel(chatThread),\n    };\n  } else {\n    return { ...rest };\n  }\n};\n\n/**\n * @internal\n * Mapping read receipt REST model to read receipt SDK model\n */\nexport const mapToReadReceiptSdkModel = (\n  readReceipt: RestModel.ChatMessageReadReceipt,\n): ChatMessageReadReceipt => {\n  const { senderCommunicationIdentifier, ...rest } = readReceipt;\n  return {\n    ...rest,\n    sender: deserializeCommunicationIdentifier(\n      senderCommunicationIdentifier as SerializedCommunicationIdentifier,\n    ),\n  };\n};\n"]}