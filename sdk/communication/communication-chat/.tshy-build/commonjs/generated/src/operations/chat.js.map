{"version":3,"file":"chat.js","sourceRoot":"","sources":["../../../../../src/generated/src/operations/chat.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport { Chat } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { ChatApiClient } from \"../chatApiClient.js\";\nimport {\n  CreateChatThreadRequest,\n  ChatCreateChatThreadOptionalParams,\n  ChatCreateChatThreadResponse,\n  ChatListChatThreadsOptionalParams,\n  ChatListChatThreadsResponse,\n  ChatDeleteChatThreadOptionalParams,\n  ChatListChatThreadsNextOptionalParams,\n  ChatListChatThreadsNextResponse,\n} from \"../models/index.js\";\n\n/** Class containing Chat operations. */\nexport class ChatImpl implements Chat {\n  private readonly client: ChatApiClient;\n\n  /**\n   * Initialize a new instance of the class Chat class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ChatApiClient) {\n    this.client = client;\n  }\n\n  /**\n   * Creates a chat thread.\n   * @param createChatThreadRequest Request payload for creating a chat thread.\n   * @param options The options parameters.\n   */\n  async createChatThread(\n    createChatThreadRequest: CreateChatThreadRequest,\n    options?: ChatCreateChatThreadOptionalParams,\n  ): Promise<ChatCreateChatThreadResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.createChatThread\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { createChatThreadRequest, options },\n          createChatThreadOperationSpec,\n        ) as Promise<ChatCreateChatThreadResponse>;\n      },\n    );\n  }\n\n  /**\n   * Gets the list of chat threads of a user.\n   * @param options The options parameters.\n   */\n  async listChatThreads(\n    options?: ChatListChatThreadsOptionalParams,\n  ): Promise<ChatListChatThreadsResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatThreads\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { options },\n          listChatThreadsOperationSpec,\n        ) as Promise<ChatListChatThreadsResponse>;\n      },\n    );\n  }\n\n  /**\n   * Deletes a thread.\n   * @param chatThreadId Id of the thread to be deleted.\n   * @param options The options parameters.\n   */\n  async deleteChatThread(\n    chatThreadId: string,\n    options?: ChatDeleteChatThreadOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.deleteChatThread\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, options },\n          deleteChatThreadOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n\n  /**\n   * ListChatThreadsNext\n   * @param nextLink The nextLink from the previous successful call to the ListChatThreads method.\n   * @param options The options parameters.\n   */\n  async listChatThreadsNext(\n    nextLink: string,\n    options?: ChatListChatThreadsNextOptionalParams,\n  ): Promise<ChatListChatThreadsNextResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatThreadsNext\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { nextLink, options },\n          listChatThreadsNextOperationSpec,\n        ) as Promise<ChatListChatThreadsNextResponse>;\n      },\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst createChatThreadOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.CreateChatThreadResult,\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.createChatThreadRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.contentType,\n    Parameters.repeatabilityRequestId,\n  ],\n  mediaType: \"json\",\n  serializer,\n};\nconst listChatThreadsOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatThreadsItemCollection,\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.maxPageSize,\n    Parameters.apiVersion,\n    Parameters.startTime,\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst deleteChatThreadOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listChatThreadsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatThreadsItemCollection,\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}