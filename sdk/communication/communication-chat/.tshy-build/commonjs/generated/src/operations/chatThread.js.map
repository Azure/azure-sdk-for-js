{"version":3,"file":"chatThread.js","sourceRoot":"","sources":["../../../../../src/generated/src/operations/chatThread.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport { ChatThread } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { ChatApiClient } from \"../chatApiClient.js\";\nimport {\n  ChatThreadListChatReadReceiptsOptionalParams,\n  ChatThreadListChatReadReceiptsResponse,\n  SendReadReceiptRequest,\n  ChatThreadSendChatReadReceiptOptionalParams,\n  SendChatMessageRequest,\n  ChatThreadSendChatMessageOptionalParams,\n  ChatThreadSendChatMessageResponse,\n  ChatThreadListChatMessagesOptionalParams,\n  ChatThreadListChatMessagesResponse,\n  ChatThreadGetChatMessageOptionalParams,\n  ChatThreadGetChatMessageResponse,\n  UpdateChatMessageRequest,\n  ChatThreadUpdateChatMessageOptionalParams,\n  ChatThreadDeleteChatMessageOptionalParams,\n  ChatThreadListChatParticipantsOptionalParams,\n  ChatThreadListChatParticipantsResponse,\n  CommunicationIdentifierModel,\n  ChatThreadRemoveChatParticipantOptionalParams,\n  AddChatParticipantsRequest,\n  ChatThreadAddChatParticipantsOptionalParams,\n  ChatThreadAddChatParticipantsResponse,\n  UpdateChatThreadRequest,\n  ChatThreadUpdateChatThreadPropertiesOptionalParams,\n  ChatThreadGetChatThreadPropertiesOptionalParams,\n  ChatThreadGetChatThreadPropertiesResponse,\n  ChatThreadSendTypingNotificationOptionalParams,\n  ChatThreadListChatReadReceiptsNextOptionalParams,\n  ChatThreadListChatReadReceiptsNextResponse,\n  ChatThreadListChatMessagesNextOptionalParams,\n  ChatThreadListChatMessagesNextResponse,\n  ChatThreadListChatParticipantsNextOptionalParams,\n  ChatThreadListChatParticipantsNextResponse,\n} from \"../models/index.js\";\n\n/** Class containing ChatThread operations. */\nexport class ChatThreadImpl implements ChatThread {\n  private readonly client: ChatApiClient;\n\n  /**\n   * Initialize a new instance of the class ChatThread class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ChatApiClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets chat message read receipts for a thread.\n   * @param chatThreadId Thread id to get the chat message read receipts for.\n   * @param options The options parameters.\n   */\n  async listChatReadReceipts(\n    chatThreadId: string,\n    options?: ChatThreadListChatReadReceiptsOptionalParams,\n  ): Promise<ChatThreadListChatReadReceiptsResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatReadReceipts\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, options },\n          listChatReadReceiptsOperationSpec,\n        ) as Promise<ChatThreadListChatReadReceiptsResponse>;\n      },\n    );\n  }\n\n  /**\n   * Sends a read receipt event to a thread, on behalf of a user.\n   * @param chatThreadId Thread id to send the read receipt event to.\n   * @param sendReadReceiptRequest Read receipt details.\n   * @param options The options parameters.\n   */\n  async sendChatReadReceipt(\n    chatThreadId: string,\n    sendReadReceiptRequest: SendReadReceiptRequest,\n    options?: ChatThreadSendChatReadReceiptOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.sendChatReadReceipt\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, sendReadReceiptRequest, options },\n          sendChatReadReceiptOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n\n  /**\n   * Sends a message to a thread.\n   * @param chatThreadId The thread id to send the message to.\n   * @param sendChatMessageRequest Details of the message to send.\n   * @param options The options parameters.\n   */\n  async sendChatMessage(\n    chatThreadId: string,\n    sendChatMessageRequest: SendChatMessageRequest,\n    options?: ChatThreadSendChatMessageOptionalParams,\n  ): Promise<ChatThreadSendChatMessageResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.sendChatMessage\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, sendChatMessageRequest, options },\n          sendChatMessageOperationSpec,\n        ) as Promise<ChatThreadSendChatMessageResponse>;\n      },\n    );\n  }\n\n  /**\n   * Gets a list of messages from a thread.\n   * @param chatThreadId The thread id of the message.\n   * @param options The options parameters.\n   */\n  async listChatMessages(\n    chatThreadId: string,\n    options?: ChatThreadListChatMessagesOptionalParams,\n  ): Promise<ChatThreadListChatMessagesResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatMessages\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, options },\n          listChatMessagesOperationSpec,\n        ) as Promise<ChatThreadListChatMessagesResponse>;\n      },\n    );\n  }\n\n  /**\n   * Gets a message by id.\n   * @param chatThreadId The thread id to which the message was sent.\n   * @param chatMessageId The message id.\n   * @param options The options parameters.\n   */\n  async getChatMessage(\n    chatThreadId: string,\n    chatMessageId: string,\n    options?: ChatThreadGetChatMessageOptionalParams,\n  ): Promise<ChatThreadGetChatMessageResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.getChatMessage\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, chatMessageId, options },\n          getChatMessageOperationSpec,\n        ) as Promise<ChatThreadGetChatMessageResponse>;\n      },\n    );\n  }\n\n  /**\n   * Updates a message.\n   * @param chatThreadId The thread id to which the message was sent.\n   * @param chatMessageId The message id.\n   * @param updateChatMessageRequest Details of the request to update the message.\n   * @param options The options parameters.\n   */\n  async updateChatMessage(\n    chatThreadId: string,\n    chatMessageId: string,\n    updateChatMessageRequest: UpdateChatMessageRequest,\n    options?: ChatThreadUpdateChatMessageOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.updateChatMessage\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, chatMessageId, updateChatMessageRequest, options },\n          updateChatMessageOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n\n  /**\n   * Deletes a message.\n   * @param chatThreadId The thread id to which the message was sent.\n   * @param chatMessageId The message id.\n   * @param options The options parameters.\n   */\n  async deleteChatMessage(\n    chatThreadId: string,\n    chatMessageId: string,\n    options?: ChatThreadDeleteChatMessageOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.deleteChatMessage\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, chatMessageId, options },\n          deleteChatMessageOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n\n  /**\n   * Gets the participants of a thread.\n   * @param chatThreadId Thread id to get participants for.\n   * @param options The options parameters.\n   */\n  async listChatParticipants(\n    chatThreadId: string,\n    options?: ChatThreadListChatParticipantsOptionalParams,\n  ): Promise<ChatThreadListChatParticipantsResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatParticipants\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, options },\n          listChatParticipantsOperationSpec,\n        ) as Promise<ChatThreadListChatParticipantsResponse>;\n      },\n    );\n  }\n\n  /**\n   * Remove a participant from a thread.\n   * @param chatThreadId Thread id to remove the participant from.\n   * @param participantCommunicationIdentifier Id of the thread participant to remove from the thread.\n   * @param options The options parameters.\n   */\n  async removeChatParticipant(\n    chatThreadId: string,\n    participantCommunicationIdentifier: CommunicationIdentifierModel,\n    options?: ChatThreadRemoveChatParticipantOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.removeChatParticipant\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, participantCommunicationIdentifier, options },\n          removeChatParticipantOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n\n  /**\n   * Adds thread participants to a thread. If participants already exist, no change occurs.\n   * @param chatThreadId Id of the thread to add participants to.\n   * @param addChatParticipantsRequest Thread participants to be added to the thread.\n   * @param options The options parameters.\n   */\n  async addChatParticipants(\n    chatThreadId: string,\n    addChatParticipantsRequest: AddChatParticipantsRequest,\n    options?: ChatThreadAddChatParticipantsOptionalParams,\n  ): Promise<ChatThreadAddChatParticipantsResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.addChatParticipants\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, addChatParticipantsRequest, options },\n          addChatParticipantsOperationSpec,\n        ) as Promise<ChatThreadAddChatParticipantsResponse>;\n      },\n    );\n  }\n\n  /**\n   * Updates a thread's properties.\n   * @param chatThreadId The id of the thread to update.\n   * @param updateChatThreadRequest Request payload for updating a chat thread.\n   * @param options The options parameters.\n   */\n  async updateChatThreadProperties(\n    chatThreadId: string,\n    updateChatThreadRequest: UpdateChatThreadRequest,\n    options?: ChatThreadUpdateChatThreadPropertiesOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.updateChatThreadProperties\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, updateChatThreadRequest, options },\n          updateChatThreadPropertiesOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n\n  /**\n   * Gets a chat thread's properties.\n   * @param chatThreadId Id of the thread.\n   * @param options The options parameters.\n   */\n  async getChatThreadProperties(\n    chatThreadId: string,\n    options?: ChatThreadGetChatThreadPropertiesOptionalParams,\n  ): Promise<ChatThreadGetChatThreadPropertiesResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.getChatThreadProperties\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, options },\n          getChatThreadPropertiesOperationSpec,\n        ) as Promise<ChatThreadGetChatThreadPropertiesResponse>;\n      },\n    );\n  }\n\n  /**\n   * Posts a typing event to a thread, on behalf of a user.\n   * @param chatThreadId Id of the thread.\n   * @param options The options parameters.\n   */\n  async sendTypingNotification(\n    chatThreadId: string,\n    options?: ChatThreadSendTypingNotificationOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.sendTypingNotification\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, options },\n          sendTypingNotificationOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n\n  /**\n   * ListChatReadReceiptsNext\n   * @param chatThreadId Thread id to get the chat message read receipts for.\n   * @param nextLink The nextLink from the previous successful call to the ListChatReadReceipts method.\n   * @param options The options parameters.\n   */\n  async listChatReadReceiptsNext(\n    chatThreadId: string,\n    nextLink: string,\n    options?: ChatThreadListChatReadReceiptsNextOptionalParams,\n  ): Promise<ChatThreadListChatReadReceiptsNextResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatReadReceiptsNext\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, nextLink, options },\n          listChatReadReceiptsNextOperationSpec,\n        ) as Promise<ChatThreadListChatReadReceiptsNextResponse>;\n      },\n    );\n  }\n\n  /**\n   * ListChatMessagesNext\n   * @param chatThreadId The thread id of the message.\n   * @param nextLink The nextLink from the previous successful call to the ListChatMessages method.\n   * @param options The options parameters.\n   */\n  async listChatMessagesNext(\n    chatThreadId: string,\n    nextLink: string,\n    options?: ChatThreadListChatMessagesNextOptionalParams,\n  ): Promise<ChatThreadListChatMessagesNextResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatMessagesNext\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, nextLink, options },\n          listChatMessagesNextOperationSpec,\n        ) as Promise<ChatThreadListChatMessagesNextResponse>;\n      },\n    );\n  }\n\n  /**\n   * ListChatParticipantsNext\n   * @param chatThreadId Thread id to get participants for.\n   * @param nextLink The nextLink from the previous successful call to the ListChatParticipants method.\n   * @param options The options parameters.\n   */\n  async listChatParticipantsNext(\n    chatThreadId: string,\n    nextLink: string,\n    options?: ChatThreadListChatParticipantsNextOptionalParams,\n  ): Promise<ChatThreadListChatParticipantsNextResponse> {\n    return tracingClient.withSpan(\n      \"ChatApiClient.listChatParticipantsNext\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { chatThreadId, nextLink, options },\n          listChatParticipantsNextOperationSpec,\n        ) as Promise<ChatThreadListChatParticipantsNextResponse>;\n      },\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listChatReadReceiptsOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/readReceipts\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessageReadReceiptsCollection,\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.maxPageSize,\n    Parameters.skip,\n    Parameters.apiVersion,\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst sendChatReadReceiptOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/readReceipts\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.sendReadReceiptRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst sendChatMessageOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.SendChatMessageResult,\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.sendChatMessageRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst listChatMessagesOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessagesCollection,\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.maxPageSize,\n    Parameters.apiVersion,\n    Parameters.startTime,\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getChatMessageOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessage,\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.chatThreadId,\n    Parameters.chatMessageId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst updateChatMessageOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.updateChatMessageRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.chatThreadId,\n    Parameters.chatMessageId,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer,\n};\nconst deleteChatMessageOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/messages/{chatMessageId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.chatThreadId,\n    Parameters.chatMessageId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listChatParticipantsOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/participants\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatParticipantsCollection,\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  queryParameters: [\n    Parameters.maxPageSize,\n    Parameters.skip,\n    Parameters.apiVersion,\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst removeChatParticipantOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/participants/:remove\",\n  httpMethod: \"POST\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.participantCommunicationIdentifier,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst addChatParticipantsOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/participants/:add\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.AddChatParticipantsResult,\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.addChatParticipantsRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst updateChatThreadPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    204: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.updateChatThreadRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer,\n};\nconst getChatThreadPropertiesOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatThreadProperties,\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst sendTypingNotificationOperationSpec: coreClient.OperationSpec = {\n  path: \"/chat/threads/{chatThreadId}/typing\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  requestBody: Parameters.sendTypingNotificationRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.chatThreadId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst listChatReadReceiptsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessageReadReceiptsCollection,\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.chatThreadId,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listChatMessagesNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatMessagesCollection,\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.chatThreadId,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst listChatParticipantsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChatParticipantsCollection,\n    },\n    401: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    403: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    429: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n    503: {\n      bodyMapper: Mappers.CommunicationErrorResponse,\n      isError: true,\n    },\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.chatThreadId,\n    Parameters.nextLink,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n"]}