{"version":3,"file":"communicationTokenCredentialPolicy.js","sourceRoot":"","sources":["../../../src/credential/communicationTokenCredentialPolicy.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAOlC,OAAO,EAAE,+BAA+B,EAAE,MAAM,2BAA2B,CAAC;AAE5E;;;;GAIG;AACH,MAAM,CAAC,MAAM,wCAAwC,GAAG,CACtD,UAAwC,EACxB,EAAE;IAClB,MAAM,aAAa,GAA2C;QAC5D,UAAU,EAAE;YACV,QAAQ,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,WAAW,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,EAAE,CAAC;SAC3F;QACD,MAAM,EAAE,EAAE;KACX,CAAC;IAEF,OAAO,+BAA+B,CAAC,aAAa,CAAC,CAAC;AACxD,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { CommunicationTokenCredential } from \"@azure/communication-common\";\nimport type {\n  BearerTokenAuthenticationPolicyOptions,\n  PipelinePolicy,\n} from \"@azure/core-rest-pipeline\";\nimport { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n\n/**\n * Creates a new CommunicationTokenCredentialPolicy factory.\n *\n * @param credential - The CommunicationTokenCredential implementation that can supply the user credential.\n */\nexport const createCommunicationTokenCredentialPolicy = (\n  credential: CommunicationTokenCredential,\n): PipelinePolicy => {\n  const policyOptions: BearerTokenAuthenticationPolicyOptions = {\n    credential: {\n      getToken: (_scopes, options) => credential.getToken({ abortSignal: options?.abortSignal }),\n    },\n    scopes: [],\n  };\n\n  return bearerTokenAuthenticationPolicy(policyOptions);\n};\n"]}