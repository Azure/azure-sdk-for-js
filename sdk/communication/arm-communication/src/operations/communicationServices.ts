/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { CommunicationServices } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CommunicationServiceManagementClient } from "../communicationServiceManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  CommunicationServiceResource,
  CommunicationServicesListBySubscriptionNextOptionalParams,
  CommunicationServicesListBySubscriptionOptionalParams,
  CommunicationServicesListBySubscriptionResponse,
  CommunicationServicesListByResourceGroupNextOptionalParams,
  CommunicationServicesListByResourceGroupOptionalParams,
  CommunicationServicesListByResourceGroupResponse,
  NameAvailabilityParameters,
  CommunicationServicesCheckNameAvailabilityOptionalParams,
  CommunicationServicesCheckNameAvailabilityResponse,
  CommunicationServicesLinkNotificationHubOptionalParams,
  CommunicationServicesLinkNotificationHubResponse,
  CommunicationServiceResourceUpdate,
  CommunicationServicesUpdateOptionalParams,
  CommunicationServicesUpdateResponse,
  CommunicationServicesGetOptionalParams,
  CommunicationServicesGetResponse,
  CommunicationServicesCreateOrUpdateOptionalParams,
  CommunicationServicesCreateOrUpdateResponse,
  CommunicationServicesDeleteOptionalParams,
  CommunicationServicesListKeysOptionalParams,
  CommunicationServicesListKeysResponse,
  RegenerateKeyParameters,
  CommunicationServicesRegenerateKeyOptionalParams,
  CommunicationServicesRegenerateKeyResponse,
  CommunicationServicesListBySubscriptionNextResponse,
  CommunicationServicesListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CommunicationServices operations. */
export class CommunicationServicesImpl implements CommunicationServices {
  private readonly client: CommunicationServiceManagementClient;

  /**
   * Initialize a new instance of the class CommunicationServices class.
   * @param client Reference to the service client
   */
  constructor(client: CommunicationServiceManagementClient) {
    this.client = client;
  }

  /**
   * Handles requests to list all resources in a subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: CommunicationServicesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<CommunicationServiceResource> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: CommunicationServicesListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CommunicationServiceResource[]> {
    let result: CommunicationServicesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: CommunicationServicesListBySubscriptionOptionalParams
  ): AsyncIterableIterator<CommunicationServiceResource> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Handles requests to list all resources in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: CommunicationServicesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<CommunicationServiceResource> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: CommunicationServicesListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CommunicationServiceResource[]> {
    let result: CommunicationServicesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: CommunicationServicesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<CommunicationServiceResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Checks that the CommunicationService name is valid and is not already in use.
   * @param nameAvailabilityParameters Parameters supplied to the operation.
   * @param options The options parameters.
   */
  checkNameAvailability(
    nameAvailabilityParameters: NameAvailabilityParameters,
    options?: CommunicationServicesCheckNameAvailabilityOptionalParams
  ): Promise<CommunicationServicesCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { nameAvailabilityParameters, options },
      checkNameAvailabilityOperationSpec
    );
  }

  /**
   * Links an Azure Notification Hub to this communication service.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  linkNotificationHub(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServicesLinkNotificationHubOptionalParams
  ): Promise<CommunicationServicesLinkNotificationHubResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, communicationServiceName, options },
      linkNotificationHubOperationSpec
    );
  }

  /**
   * Handles requests to list all resources in a subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: CommunicationServicesListBySubscriptionOptionalParams
  ): Promise<CommunicationServicesListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Handles requests to list all resources in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: CommunicationServicesListByResourceGroupOptionalParams
  ): Promise<CommunicationServicesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Operation to update an existing CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param parameters Parameters for the update operation
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    communicationServiceName: string,
    parameters: CommunicationServiceResourceUpdate,
    options?: CommunicationServicesUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CommunicationServicesUpdateResponse>,
      CommunicationServicesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CommunicationServicesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, communicationServiceName, parameters, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Operation to update an existing CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param parameters Parameters for the update operation
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    communicationServiceName: string,
    parameters: CommunicationServiceResourceUpdate,
    options?: CommunicationServicesUpdateOptionalParams
  ): Promise<CommunicationServicesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      communicationServiceName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get the CommunicationService and its properties.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServicesGetOptionalParams
  ): Promise<CommunicationServicesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, communicationServiceName, options },
      getOperationSpec
    );
  }

  /**
   * Create a new CommunicationService or update an existing CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    communicationServiceName: string,
    parameters: CommunicationServiceResource,
    options?: CommunicationServicesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CommunicationServicesCreateOrUpdateResponse>,
      CommunicationServicesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CommunicationServicesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, communicationServiceName, parameters, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a new CommunicationService or update an existing CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    communicationServiceName: string,
    parameters: CommunicationServiceResource,
    options?: CommunicationServicesCreateOrUpdateOptionalParams
  ): Promise<CommunicationServicesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      communicationServiceName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Operation to delete a CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServicesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, communicationServiceName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Operation to delete a CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServicesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      communicationServiceName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get the access keys of the CommunicationService resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServicesListKeysOptionalParams
  ): Promise<CommunicationServicesListKeysResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, communicationServiceName, options },
      listKeysOperationSpec
    );
  }

  /**
   * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the
   * same time.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param parameters Parameter that describes the Regenerate Key Operation.
   * @param options The options parameters.
   */
  async beginRegenerateKey(
    resourceGroupName: string,
    communicationServiceName: string,
    parameters: RegenerateKeyParameters,
    options?: CommunicationServicesRegenerateKeyOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CommunicationServicesRegenerateKeyResponse>,
      CommunicationServicesRegenerateKeyResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CommunicationServicesRegenerateKeyResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, communicationServiceName, parameters, options },
      regenerateKeyOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the
   * same time.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param parameters Parameter that describes the Regenerate Key Operation.
   * @param options The options parameters.
   */
  async beginRegenerateKeyAndWait(
    resourceGroupName: string,
    communicationServiceName: string,
    parameters: RegenerateKeyParameters,
    options?: CommunicationServicesRegenerateKeyOptionalParams
  ): Promise<CommunicationServicesRegenerateKeyResponse> {
    const poller = await this.beginRegenerateKey(
      resourceGroupName,
      communicationServiceName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: CommunicationServicesListBySubscriptionNextOptionalParams
  ): Promise<CommunicationServicesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: CommunicationServicesListByResourceGroupNextOptionalParams
  ): Promise<CommunicationServicesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Communication/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.nameAvailabilityParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const linkNotificationHubOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/linkNotificationHub",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.LinkedNotificationHub
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.linkNotificationHubParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationServiceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Communication/communicationServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceResource
    },
    201: {
      bodyMapper: Mappers.CommunicationServiceResource
    },
    202: {
      bodyMapper: Mappers.CommunicationServiceResource
    },
    204: {
      bodyMapper: Mappers.CommunicationServiceResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationServiceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceResource
    },
    201: {
      bodyMapper: Mappers.CommunicationServiceResource
    },
    202: {
      bodyMapper: Mappers.CommunicationServiceResource
    },
    204: {
      bodyMapper: Mappers.CommunicationServiceResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationServiceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listKeysOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/listKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const regenerateKeyOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/regenerateKey",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceKeys
    },
    201: {
      bodyMapper: Mappers.CommunicationServiceKeys
    },
    202: {
      bodyMapper: Mappers.CommunicationServiceKeys
    },
    204: {
      bodyMapper: Mappers.CommunicationServiceKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationServiceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
