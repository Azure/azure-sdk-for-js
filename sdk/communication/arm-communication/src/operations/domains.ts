/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Domains } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CommunicationServiceManagementClient } from "../communicationServiceManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  DomainResource,
  DomainsListByEmailServiceResourceNextOptionalParams,
  DomainsListByEmailServiceResourceOptionalParams,
  DomainsGetOptionalParams,
  DomainsGetResponse,
  DomainsCreateOrUpdateOptionalParams,
  DomainsCreateOrUpdateResponse,
  DomainsDeleteOptionalParams,
  UpdateDomainRequestParameters,
  DomainsUpdateOptionalParams,
  DomainsUpdateResponse,
  DomainsListByEmailServiceResourceResponse,
  VerificationParameter,
  DomainsInitiateVerificationOptionalParams,
  DomainsInitiateVerificationResponse,
  DomainsCancelVerificationOptionalParams,
  DomainsCancelVerificationResponse,
  DomainsListByEmailServiceResourceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Domains operations. */
export class DomainsImpl implements Domains {
  private readonly client: CommunicationServiceManagementClient;

  /**
   * Initialize a new instance of the class Domains class.
   * @param client Reference to the service client
   */
  constructor(client: CommunicationServiceManagementClient) {
    this.client = client;
  }

  /**
   * Handles requests to list all Domains resources under the parent EmailServices resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param options The options parameters.
   */
  public listByEmailServiceResource(
    resourceGroupName: string,
    emailServiceName: string,
    options?: DomainsListByEmailServiceResourceOptionalParams
  ): PagedAsyncIterableIterator<DomainResource> {
    const iter = this.listByEmailServiceResourcePagingAll(
      resourceGroupName,
      emailServiceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByEmailServiceResourcePagingPage(
          resourceGroupName,
          emailServiceName,
          options
        );
      }
    };
  }

  private async *listByEmailServiceResourcePagingPage(
    resourceGroupName: string,
    emailServiceName: string,
    options?: DomainsListByEmailServiceResourceOptionalParams
  ): AsyncIterableIterator<DomainResource[]> {
    let result = await this._listByEmailServiceResource(
      resourceGroupName,
      emailServiceName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByEmailServiceResourceNext(
        resourceGroupName,
        emailServiceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByEmailServiceResourcePagingAll(
    resourceGroupName: string,
    emailServiceName: string,
    options?: DomainsListByEmailServiceResourceOptionalParams
  ): AsyncIterableIterator<DomainResource> {
    for await (const page of this.listByEmailServiceResourcePagingPage(
      resourceGroupName,
      emailServiceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get the Domains resource and its properties.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    options?: DomainsGetOptionalParams
  ): Promise<DomainsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, emailServiceName, domainName, options },
      getOperationSpec
    );
  }

  /**
   * Add a new Domains resource under the parent EmailService resource or update an existing Domains
   * resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    parameters: DomainResource,
    options?: DomainsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DomainsCreateOrUpdateResponse>,
      DomainsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DomainsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, emailServiceName, domainName, parameters, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Add a new Domains resource under the parent EmailService resource or update an existing Domains
   * resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    parameters: DomainResource,
    options?: DomainsCreateOrUpdateOptionalParams
  ): Promise<DomainsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      emailServiceName,
      domainName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Operation to delete a Domains resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    options?: DomainsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, emailServiceName, domainName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Operation to delete a Domains resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    options?: DomainsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      emailServiceName,
      domainName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Operation to update an existing Domains resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param parameters Parameters for the update operation
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    parameters: UpdateDomainRequestParameters,
    options?: DomainsUpdateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<DomainsUpdateResponse>, DomainsUpdateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DomainsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, emailServiceName, domainName, parameters, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Operation to update an existing Domains resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param parameters Parameters for the update operation
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    parameters: UpdateDomainRequestParameters,
    options?: DomainsUpdateOptionalParams
  ): Promise<DomainsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      emailServiceName,
      domainName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Handles requests to list all Domains resources under the parent EmailServices resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param options The options parameters.
   */
  private _listByEmailServiceResource(
    resourceGroupName: string,
    emailServiceName: string,
    options?: DomainsListByEmailServiceResourceOptionalParams
  ): Promise<DomainsListByEmailServiceResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, emailServiceName, options },
      listByEmailServiceResourceOperationSpec
    );
  }

  /**
   * Initiate verification of DNS record.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param parameters Type of verification to be initiated.
   * @param options The options parameters.
   */
  async beginInitiateVerification(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    parameters: VerificationParameter,
    options?: DomainsInitiateVerificationOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DomainsInitiateVerificationResponse>,
      DomainsInitiateVerificationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DomainsInitiateVerificationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, emailServiceName, domainName, parameters, options },
      initiateVerificationOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Initiate verification of DNS record.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param parameters Type of verification to be initiated.
   * @param options The options parameters.
   */
  async beginInitiateVerificationAndWait(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    parameters: VerificationParameter,
    options?: DomainsInitiateVerificationOptionalParams
  ): Promise<DomainsInitiateVerificationResponse> {
    const poller = await this.beginInitiateVerification(
      resourceGroupName,
      emailServiceName,
      domainName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Cancel verification of DNS record.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param parameters Type of verification to be canceled.
   * @param options The options parameters.
   */
  async beginCancelVerification(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    parameters: VerificationParameter,
    options?: DomainsCancelVerificationOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DomainsCancelVerificationResponse>,
      DomainsCancelVerificationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DomainsCancelVerificationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, emailServiceName, domainName, parameters, options },
      cancelVerificationOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Cancel verification of DNS record.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param parameters Type of verification to be canceled.
   * @param options The options parameters.
   */
  async beginCancelVerificationAndWait(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    parameters: VerificationParameter,
    options?: DomainsCancelVerificationOptionalParams
  ): Promise<DomainsCancelVerificationResponse> {
    const poller = await this.beginCancelVerification(
      resourceGroupName,
      emailServiceName,
      domainName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByEmailServiceResourceNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param nextLink The nextLink from the previous successful call to the ListByEmailServiceResource
   *                 method.
   * @param options The options parameters.
   */
  private _listByEmailServiceResourceNext(
    resourceGroupName: string,
    emailServiceName: string,
    nextLink: string,
    options?: DomainsListByEmailServiceResourceNextOptionalParams
  ): Promise<DomainsListByEmailServiceResourceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, emailServiceName, nextLink, options },
      listByEmailServiceResourceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DomainResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DomainResource
    },
    201: {
      bodyMapper: Mappers.DomainResource
    },
    202: {
      bodyMapper: Mappers.DomainResource
    },
    204: {
      bodyMapper: Mappers.DomainResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DomainResource
    },
    201: {
      bodyMapper: Mappers.DomainResource
    },
    202: {
      bodyMapper: Mappers.DomainResource
    },
    204: {
      bodyMapper: Mappers.DomainResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByEmailServiceResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DomainResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const initiateVerificationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/initiateVerification",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.DomainsInitiateVerificationHeaders
    },
    201: {
      headersMapper: Mappers.DomainsInitiateVerificationHeaders
    },
    202: {
      headersMapper: Mappers.DomainsInitiateVerificationHeaders
    },
    204: {
      headersMapper: Mappers.DomainsInitiateVerificationHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const cancelVerificationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/cancelVerification",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.DomainsCancelVerificationHeaders
    },
    201: {
      headersMapper: Mappers.DomainsCancelVerificationHeaders
    },
    202: {
      headersMapper: Mappers.DomainsCancelVerificationHeaders
    },
    204: {
      headersMapper: Mappers.DomainsCancelVerificationHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByEmailServiceResourceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DomainResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
