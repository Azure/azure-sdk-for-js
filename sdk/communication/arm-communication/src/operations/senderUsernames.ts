/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SenderUsernames } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CommunicationServiceManagementClient } from "../communicationServiceManagementClient";
import {
  SenderUsernameResource,
  SenderUsernamesListByDomainsNextOptionalParams,
  SenderUsernamesListByDomainsOptionalParams,
  SenderUsernamesListByDomainsResponse,
  SenderUsernamesGetOptionalParams,
  SenderUsernamesGetResponse,
  SenderUsernamesCreateOrUpdateOptionalParams,
  SenderUsernamesCreateOrUpdateResponse,
  SenderUsernamesDeleteOptionalParams,
  SenderUsernamesListByDomainsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SenderUsernames operations. */
export class SenderUsernamesImpl implements SenderUsernames {
  private readonly client: CommunicationServiceManagementClient;

  /**
   * Initialize a new instance of the class SenderUsernames class.
   * @param client Reference to the service client
   */
  constructor(client: CommunicationServiceManagementClient) {
    this.client = client;
  }

  /**
   * List all valid sender usernames for a domains resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param options The options parameters.
   */
  public listByDomains(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    options?: SenderUsernamesListByDomainsOptionalParams
  ): PagedAsyncIterableIterator<SenderUsernameResource> {
    const iter = this.listByDomainsPagingAll(
      resourceGroupName,
      emailServiceName,
      domainName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByDomainsPagingPage(
          resourceGroupName,
          emailServiceName,
          domainName,
          options,
          settings
        );
      }
    };
  }

  private async *listByDomainsPagingPage(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    options?: SenderUsernamesListByDomainsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SenderUsernameResource[]> {
    let result: SenderUsernamesListByDomainsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByDomains(
        resourceGroupName,
        emailServiceName,
        domainName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByDomainsNext(
        resourceGroupName,
        emailServiceName,
        domainName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByDomainsPagingAll(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    options?: SenderUsernamesListByDomainsOptionalParams
  ): AsyncIterableIterator<SenderUsernameResource> {
    for await (const page of this.listByDomainsPagingPage(
      resourceGroupName,
      emailServiceName,
      domainName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all valid sender usernames for a domains resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param options The options parameters.
   */
  private _listByDomains(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    options?: SenderUsernamesListByDomainsOptionalParams
  ): Promise<SenderUsernamesListByDomainsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, emailServiceName, domainName, options },
      listByDomainsOperationSpec
    );
  }

  /**
   * Get a valid sender username for a domains resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param senderUsername The valid sender Username.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    senderUsername: string,
    options?: SenderUsernamesGetOptionalParams
  ): Promise<SenderUsernamesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        emailServiceName,
        domainName,
        senderUsername,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Add a new SenderUsername resource under the parent Domains resource or update an existing
   * SenderUsername resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param senderUsername The valid sender Username.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    senderUsername: string,
    parameters: SenderUsernameResource,
    options?: SenderUsernamesCreateOrUpdateOptionalParams
  ): Promise<SenderUsernamesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        emailServiceName,
        domainName,
        senderUsername,
        parameters,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Operation to delete a SenderUsernames resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param senderUsername The valid sender Username.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    senderUsername: string,
    options?: SenderUsernamesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        emailServiceName,
        domainName,
        senderUsername,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * ListByDomainsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param nextLink The nextLink from the previous successful call to the ListByDomains method.
   * @param options The options parameters.
   */
  private _listByDomainsNext(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    nextLink: string,
    options?: SenderUsernamesListByDomainsNextOptionalParams
  ): Promise<SenderUsernamesListByDomainsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, emailServiceName, domainName, nextLink, options },
      listByDomainsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByDomainsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/senderUsernames",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SenderUsernameResourceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/senderUsernames/{senderUsername}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SenderUsernameResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName,
    Parameters.senderUsername
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/senderUsernames/{senderUsername}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SenderUsernameResource
    },
    201: {
      bodyMapper: Mappers.SenderUsernameResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName,
    Parameters.senderUsername
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/senderUsernames/{senderUsername}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName,
    Parameters.senderUsername
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByDomainsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SenderUsernameResourceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
