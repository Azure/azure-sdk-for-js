/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SuppressionLists } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CommunicationServiceManagementClient } from "../communicationServiceManagementClient";
import {
  SuppressionListResource,
  SuppressionListsListByDomainNextOptionalParams,
  SuppressionListsListByDomainOptionalParams,
  SuppressionListsListByDomainResponse,
  SuppressionListsGetOptionalParams,
  SuppressionListsGetResponse,
  SuppressionListsCreateOrUpdateOptionalParams,
  SuppressionListsCreateOrUpdateResponse,
  SuppressionListsDeleteOptionalParams,
  SuppressionListsListByDomainNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SuppressionLists operations. */
export class SuppressionListsImpl implements SuppressionLists {
  private readonly client: CommunicationServiceManagementClient;

  /**
   * Initialize a new instance of the class SuppressionLists class.
   * @param client Reference to the service client
   */
  constructor(client: CommunicationServiceManagementClient) {
    this.client = client;
  }

  /**
   * List all suppression lists for a domains resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param options The options parameters.
   */
  public listByDomain(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    options?: SuppressionListsListByDomainOptionalParams
  ): PagedAsyncIterableIterator<SuppressionListResource> {
    const iter = this.listByDomainPagingAll(
      resourceGroupName,
      emailServiceName,
      domainName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByDomainPagingPage(
          resourceGroupName,
          emailServiceName,
          domainName,
          options,
          settings
        );
      }
    };
  }

  private async *listByDomainPagingPage(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    options?: SuppressionListsListByDomainOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SuppressionListResource[]> {
    let result: SuppressionListsListByDomainResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByDomain(
        resourceGroupName,
        emailServiceName,
        domainName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByDomainNext(
        resourceGroupName,
        emailServiceName,
        domainName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByDomainPagingAll(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    options?: SuppressionListsListByDomainOptionalParams
  ): AsyncIterableIterator<SuppressionListResource> {
    for await (const page of this.listByDomainPagingPage(
      resourceGroupName,
      emailServiceName,
      domainName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all suppression lists for a domains resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param options The options parameters.
   */
  private _listByDomain(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    options?: SuppressionListsListByDomainOptionalParams
  ): Promise<SuppressionListsListByDomainResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, emailServiceName, domainName, options },
      listByDomainOperationSpec
    );
  }

  /**
   * Get a SuppressionList resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param suppressionListName The name of the suppression list.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    suppressionListName: string,
    options?: SuppressionListsGetOptionalParams
  ): Promise<SuppressionListsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        emailServiceName,
        domainName,
        suppressionListName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Add a new SuppressionList resource under the parent Domains resource or update an existing
   * SuppressionList resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param suppressionListName The name of the suppression list.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    suppressionListName: string,
    parameters: SuppressionListResource,
    options?: SuppressionListsCreateOrUpdateOptionalParams
  ): Promise<SuppressionListsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        emailServiceName,
        domainName,
        suppressionListName,
        parameters,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Delete a SuppressionList.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param suppressionListName The name of the suppression list.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    suppressionListName: string,
    options?: SuppressionListsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        emailServiceName,
        domainName,
        suppressionListName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * ListByDomainNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param domainName The name of the Domains resource.
   * @param nextLink The nextLink from the previous successful call to the ListByDomain method.
   * @param options The options parameters.
   */
  private _listByDomainNext(
    resourceGroupName: string,
    emailServiceName: string,
    domainName: string,
    nextLink: string,
    options?: SuppressionListsListByDomainNextOptionalParams
  ): Promise<SuppressionListsListByDomainNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, emailServiceName, domainName, nextLink, options },
      listByDomainNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByDomainOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/suppressionLists",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SuppressionListResourceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/suppressionLists/{suppressionListName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SuppressionListResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName1,
    Parameters.suppressionListName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/suppressionLists/{suppressionListName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SuppressionListResource
    },
    201: {
      bodyMapper: Mappers.SuppressionListResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName1,
    Parameters.suppressionListName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailServiceName}/domains/{domainName}/suppressionLists/{suppressionListName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName1,
    Parameters.suppressionListName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByDomainNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SuppressionListResourceCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.emailServiceName,
    Parameters.domainName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
