/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/communicationServiceMappers";
import * as Parameters from "../models/parameters";
import { CommunicationServiceManagementClientContext } from "../communicationServiceManagementClientContext";

/** Class representing a CommunicationService. */
export class CommunicationService {
  private readonly client: CommunicationServiceManagementClientContext;

  /**
   * Create a CommunicationService.
   * @param {CommunicationServiceManagementClientContext} client Reference to the service client.
   */
  constructor(client: CommunicationServiceManagementClientContext) {
    this.client = client;
  }

  /**
   * Checks that the CommunicationService name is valid and is not already in use.
   * @summary Check Name Availability
   * @param [options] The optional parameters
   * @returns Promise<Models.CommunicationServiceCheckNameAvailabilityResponse>
   */
  checkNameAvailability(options?: Models.CommunicationServiceCheckNameAvailabilityOptionalParams): Promise<Models.CommunicationServiceCheckNameAvailabilityResponse>;
  /**
   * @param callback The callback
   */
  checkNameAvailability(callback: msRest.ServiceCallback<Models.NameAvailability>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(options: Models.CommunicationServiceCheckNameAvailabilityOptionalParams, callback: msRest.ServiceCallback<Models.NameAvailability>): void;
  checkNameAvailability(options?: Models.CommunicationServiceCheckNameAvailabilityOptionalParams | msRest.ServiceCallback<Models.NameAvailability>, callback?: msRest.ServiceCallback<Models.NameAvailability>): Promise<Models.CommunicationServiceCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.CommunicationServiceCheckNameAvailabilityResponse>;
  }

  /**
   * Links an Azure Notification Hub to this communication service.
   * @summary Link Notification Hub
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommunicationServiceLinkNotificationHubResponse>
   */
  linkNotificationHub(resourceGroupName: string, communicationServiceName: string, options?: Models.CommunicationServiceLinkNotificationHubOptionalParams): Promise<Models.CommunicationServiceLinkNotificationHubResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param callback The callback
   */
  linkNotificationHub(resourceGroupName: string, communicationServiceName: string, callback: msRest.ServiceCallback<Models.LinkedNotificationHub>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  linkNotificationHub(resourceGroupName: string, communicationServiceName: string, options: Models.CommunicationServiceLinkNotificationHubOptionalParams, callback: msRest.ServiceCallback<Models.LinkedNotificationHub>): void;
  linkNotificationHub(resourceGroupName: string, communicationServiceName: string, options?: Models.CommunicationServiceLinkNotificationHubOptionalParams | msRest.ServiceCallback<Models.LinkedNotificationHub>, callback?: msRest.ServiceCallback<Models.LinkedNotificationHub>): Promise<Models.CommunicationServiceLinkNotificationHubResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        communicationServiceName,
        options
      },
      linkNotificationHubOperationSpec,
      callback) as Promise<Models.CommunicationServiceLinkNotificationHubResponse>;
  }

  /**
   * Handles requests to list all resources in a subscription.
   * @summary List By Subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.CommunicationServiceListBySubscriptionResponse>
   */
  listBySubscription(options?: msRest.RequestOptionsBase): Promise<Models.CommunicationServiceListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.CommunicationServiceResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommunicationServiceResourceList>): void;
  listBySubscription(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommunicationServiceResourceList>, callback?: msRest.ServiceCallback<Models.CommunicationServiceResourceList>): Promise<Models.CommunicationServiceListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.CommunicationServiceListBySubscriptionResponse>;
  }

  /**
   * Handles requests to list all resources in a resource group.
   * @summary List By Resource Group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommunicationServiceListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.CommunicationServiceListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.CommunicationServiceResourceList>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommunicationServiceResourceList>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommunicationServiceResourceList>, callback?: msRest.ServiceCallback<Models.CommunicationServiceResourceList>): Promise<Models.CommunicationServiceListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.CommunicationServiceListByResourceGroupResponse>;
  }

  /**
   * Operation to update an existing CommunicationService.
   * @summary Update
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommunicationServiceUpdateResponse>
   */
  update(resourceGroupName: string, communicationServiceName: string, options?: Models.CommunicationServiceUpdateOptionalParams): Promise<Models.CommunicationServiceUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param callback The callback
   */
  update(resourceGroupName: string, communicationServiceName: string, callback: msRest.ServiceCallback<Models.CommunicationServiceResource>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, communicationServiceName: string, options: Models.CommunicationServiceUpdateOptionalParams, callback: msRest.ServiceCallback<Models.CommunicationServiceResource>): void;
  update(resourceGroupName: string, communicationServiceName: string, options?: Models.CommunicationServiceUpdateOptionalParams | msRest.ServiceCallback<Models.CommunicationServiceResource>, callback?: msRest.ServiceCallback<Models.CommunicationServiceResource>): Promise<Models.CommunicationServiceUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        communicationServiceName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.CommunicationServiceUpdateResponse>;
  }

  /**
   * Get the CommunicationService and its properties.
   * @summary Get
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommunicationServiceGetResponse>
   */
  get(resourceGroupName: string, communicationServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CommunicationServiceGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param callback The callback
   */
  get(resourceGroupName: string, communicationServiceName: string, callback: msRest.ServiceCallback<Models.CommunicationServiceResource>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, communicationServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommunicationServiceResource>): void;
  get(resourceGroupName: string, communicationServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommunicationServiceResource>, callback?: msRest.ServiceCallback<Models.CommunicationServiceResource>): Promise<Models.CommunicationServiceGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        communicationServiceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.CommunicationServiceGetResponse>;
  }

  /**
   * Create a new CommunicationService or update an existing CommunicationService.
   * @summary Create Or Update
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommunicationServiceCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, communicationServiceName: string, options?: Models.CommunicationServiceCreateOrUpdateOptionalParams): Promise<Models.CommunicationServiceCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,communicationServiceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.CommunicationServiceCreateOrUpdateResponse>;
  }

  /**
   * Operation to delete a CommunicationService.
   * @summary Delete
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommunicationServiceDeleteResponse>
   */
  deleteMethod(resourceGroupName: string, communicationServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CommunicationServiceDeleteResponse> {
    return this.beginDeleteMethod(resourceGroupName,communicationServiceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.CommunicationServiceDeleteResponse>;
  }

  /**
   * Get the access keys of the CommunicationService resource.
   * @summary List Keys
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommunicationServiceListKeysResponse>
   */
  listKeys(resourceGroupName: string, communicationServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CommunicationServiceListKeysResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, communicationServiceName: string, callback: msRest.ServiceCallback<Models.CommunicationServiceKeys>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeys(resourceGroupName: string, communicationServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommunicationServiceKeys>): void;
  listKeys(resourceGroupName: string, communicationServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommunicationServiceKeys>, callback?: msRest.ServiceCallback<Models.CommunicationServiceKeys>): Promise<Models.CommunicationServiceListKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        communicationServiceName,
        options
      },
      listKeysOperationSpec,
      callback) as Promise<Models.CommunicationServiceListKeysResponse>;
  }

  /**
   * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at
   * the same time.
   * @summary Regenerate Key
   * @param parameters Parameter that describes the Regenerate Key Operation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommunicationServiceRegenerateKeyResponse>
   */
  regenerateKey(parameters: Models.RegenerateKeyParameters, resourceGroupName: string, communicationServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.CommunicationServiceRegenerateKeyResponse>;
  /**
   * @param parameters Parameter that describes the Regenerate Key Operation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param callback The callback
   */
  regenerateKey(parameters: Models.RegenerateKeyParameters, resourceGroupName: string, communicationServiceName: string, callback: msRest.ServiceCallback<Models.CommunicationServiceKeys>): void;
  /**
   * @param parameters Parameter that describes the Regenerate Key Operation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  regenerateKey(parameters: Models.RegenerateKeyParameters, resourceGroupName: string, communicationServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommunicationServiceKeys>): void;
  regenerateKey(parameters: Models.RegenerateKeyParameters, resourceGroupName: string, communicationServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommunicationServiceKeys>, callback?: msRest.ServiceCallback<Models.CommunicationServiceKeys>): Promise<Models.CommunicationServiceRegenerateKeyResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        resourceGroupName,
        communicationServiceName,
        options
      },
      regenerateKeyOperationSpec,
      callback) as Promise<Models.CommunicationServiceRegenerateKeyResponse>;
  }

  /**
   * Create a new CommunicationService or update an existing CommunicationService.
   * @summary Create Or Update
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, communicationServiceName: string, options?: Models.CommunicationServiceBeginCreateOrUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        communicationServiceName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Operation to delete a CommunicationService.
   * @summary Delete
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, communicationServiceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        communicationServiceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Handles requests to list all resources in a subscription.
   * @summary List By Subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommunicationServiceListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CommunicationServiceListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CommunicationServiceResourceList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommunicationServiceResourceList>): void;
  listBySubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommunicationServiceResourceList>, callback?: msRest.ServiceCallback<Models.CommunicationServiceResourceList>): Promise<Models.CommunicationServiceListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.CommunicationServiceListBySubscriptionNextResponse>;
  }

  /**
   * Handles requests to list all resources in a resource group.
   * @summary List By Resource Group
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CommunicationServiceListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CommunicationServiceListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CommunicationServiceResourceList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CommunicationServiceResourceList>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CommunicationServiceResourceList>, callback?: msRest.ServiceCallback<Models.CommunicationServiceResourceList>): Promise<Models.CommunicationServiceListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.CommunicationServiceListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Communication/checkNameAvailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "nameAvailabilityParameters"
    ],
    mapper: Mappers.NameAvailabilityParameters
  },
  responses: {
    200: {
      bodyMapper: Mappers.NameAvailability
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const linkNotificationHubOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/linkNotificationHub",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "linkNotificationHubParameters"
    ],
    mapper: Mappers.LinkNotificationHubParameters
  },
  responses: {
    200: {
      bodyMapper: Mappers.LinkedNotificationHub
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Communication/communicationServices",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: Mappers.CommunicationServiceResource
  },
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/listKeys",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const regenerateKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}/regenerateKey",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.RegenerateKeyParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: Mappers.CommunicationServiceResource
  },
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceResource,
      headersMapper: Mappers.CommunicationServiceCreateOrUpdateHeaders
    },
    201: {
      bodyMapper: Mappers.CommunicationServiceResource,
      headersMapper: Mappers.CommunicationServiceCreateOrUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.CommunicationServiceCreateOrUpdateHeaders
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/communicationServices/{communicationServiceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.communicationServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      headersMapper: Mappers.CommunicationServiceDeleteHeaders
    },
    202: {
      headersMapper: Mappers.CommunicationServiceDeleteHeaders
    },
    204: {
      headersMapper: Mappers.CommunicationServiceDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.CommunicationServiceDeleteHeaders
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CommunicationServiceResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
