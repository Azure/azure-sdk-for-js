/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * The error
 */
export interface ErrorResponseError {
  /**
   * Error code.
   */
  code?: string;
  /**
   * Error message indicating why the operation failed.
   */
  message?: string;
}

/**
 * Error response indicating why the requested operation could not be performed.
 */
export interface ErrorResponse {
  /**
   * The error
   */
  error?: ErrorResponseError;
}

/**
 * The object that describes a operation.
 */
export interface OperationDisplay {
  /**
   * Friendly name of the resource provider
   */
  provider?: string;
  /**
   * Resource type on which the operation is performed.
   */
  resource?: string;
  /**
   * The localized friendly name for the operation.
   */
  operation?: string;
  /**
   * The localized friendly description for the operation
   */
  description?: string;
}

/**
 * Specifications of the Dimension of metrics.
 */
export interface Dimension {
  /**
   * The public facing name of the dimension.
   */
  name?: string;
  /**
   * Localized friendly display name of the dimension.
   */
  displayName?: string;
  /**
   * Name of the dimension as it appears in MDM.
   */
  internalName?: string;
  /**
   * A Boolean flag indicating whether this dimension should be included for the shoebox export
   * scenario.
   */
  toBeExportedForShoebox?: boolean;
}

/**
 * Specifications of the Metrics for Azure Monitoring.
 */
export interface MetricSpecification {
  /**
   * Name of the metric.
   */
  name?: string;
  /**
   * Localized friendly display name of the metric.
   */
  displayName?: string;
  /**
   * Localized friendly description of the metric.
   */
  displayDescription?: string;
  /**
   * The unit that makes sense for the metric.
   */
  unit?: string;
  /**
   * The method for aggregating the metric. Possible values include: 'Average', 'Minimum',
   * 'Maximum', 'Total', 'Count'
   */
  aggregationType?: AggregationType;
  /**
   * Optional. If set to true, then zero will be returned for time duration where no metric is
   * emitted/published.
   * Ex. a metric that returns the number of times a particular error code was emitted. The error
   * code may not appear
   * often, instead of the RP publishing 0, Shoebox can auto fill in 0s for time periods where
   * nothing was emitted.
   */
  fillGapWithZero?: string;
  /**
   * The name of the metric category that the metric belongs to. A metric can only belong to a
   * single category.
   */
  category?: string;
  /**
   * The dimensions of the metrics.
   */
  dimensions?: Dimension[];
}

/**
 * An object that describes a specification.
 */
export interface ServiceSpecification {
  /**
   * Specifications of the Metrics for Azure Monitoring.
   */
  metricSpecifications?: MetricSpecification[];
}

/**
 * Extra Operation properties.
 */
export interface OperationProperties {
  /**
   * The service specifications.
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * REST API operation supported by CommunicationService resource provider.
 */
export interface Operation {
  /**
   * Name of the operation with format: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * The object that describes the operation.
   */
  display?: OperationDisplay;
  /**
   * Optional. The intended executor of the operation; governs the display of the operation in the
   * RBAC UX and the audit logs UX.
   */
  origin?: string;
  /**
   * Extra properties for the operation.
   */
  properties?: OperationProperties;
}

/**
 * Data POST-ed to the nameAvailability action
 */
export interface NameAvailabilityParameters {
  /**
   * The resource type. Should be always "Microsoft.Communication/CommunicationServices".
   */
  type: string;
  /**
   * The CommunicationService name to validate. e.g."my-CommunicationService-name-here"
   */
  name: string;
}

/**
 * Result of the request to check name availability. It contains a flag and possible reason of
 * failure.
 */
export interface NameAvailability {
  /**
   * Indicates whether the name is available or not.
   */
  nameAvailable?: boolean;
  /**
   * The reason of the availability. Required if name is not available.
   */
  reason?: string;
  /**
   * The message of the operation.
   */
  message?: string;
}

/**
 * Description of an Azure Notification Hub to link to the communication service
 */
export interface LinkNotificationHubParameters {
  /**
   * The resource ID of the notification hub
   */
  resourceId: string;
  /**
   * Connection string for the notification hub
   */
  connectionString: string;
}

/**
 * A notification hub that has been linked to the communication service
 */
export interface LinkedNotificationHub {
  /**
   * The resource ID of the notification hub
   */
  resourceId?: string;
}

/**
 * The current status of an async operation
 */
export interface OperationStatus {
  /**
   * Fully qualified ID for the operation status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Provisioning state of the resource. Possible values include: 'Succeeded', 'Failed',
   * 'Canceled', 'Creating', 'Deleting', 'Moving'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: Status;
  /**
   * The start time of the operation
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startTime?: Date;
  /**
   * The end time of the operation
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endTime?: Date;
  /**
   * Percent of the operation that is complete
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly percentComplete?: number;
  /**
   * The error
   */
  error?: ErrorResponseError;
}

/**
 * A class representing a CommunicationService resource.
 */
export interface CommunicationServiceResource {
  /**
   * Fully qualified resource ID for the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the service - e.g. "Microsoft.Communication/CommunicationServices"
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The Azure location where the CommunicationService is running.
   */
  location?: string;
  /**
   * Tags of the service which is a list of key value pairs that describe the resource.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Provisioning state of the resource. Possible values include: 'Unknown', 'Succeeded', 'Failed',
   * 'Canceled', 'Running', 'Creating', 'Updating', 'Deleting', 'Moving'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * FQDN of the CommunicationService instance.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostName?: string;
  /**
   * The location where the communication service stores its data at rest.
   */
  dataLocation: string;
  /**
   * Resource ID of an Azure Notification Hub linked to this resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly notificationHubId?: string;
  /**
   * Version of the CommunicationService resource. Probably you need the same or higher version of
   * client SDKs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly version?: string;
  /**
   * The immutable resource Id of the communication service.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly immutableResourceId?: string;
}

/**
 * The core properties of ARM resources.
 */
export interface Resource extends BaseResource {
  /**
   * Fully qualified resource ID for the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the service - e.g. "Microsoft.Communication/CommunicationServices"
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * An ARM resource with its own location (not a global or an inherited location).
 */
export interface LocationResource {
  /**
   * The Azure location where the CommunicationService is running.
   */
  location?: string;
}

/**
 * An ARM resource with that can accept tags
 */
export interface TaggedResource {
  /**
   * Tags of the service which is a list of key value pairs that describe the resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A class representing the access keys of a CommunicationService.
 */
export interface CommunicationServiceKeys {
  /**
   * The primary access key.
   */
  primaryKey?: string;
  /**
   * The secondary access key.
   */
  secondaryKey?: string;
  /**
   * CommunicationService connection string constructed via the primaryKey
   */
  primaryConnectionString?: string;
  /**
   * CommunicationService connection string constructed via the secondaryKey
   */
  secondaryConnectionString?: string;
}

/**
 * Parameters describes the request to regenerate access keys
 */
export interface RegenerateKeyParameters {
  /**
   * The keyType to regenerate. Must be either 'primary' or 'secondary'(case-insensitive). Possible
   * values include: 'Primary', 'Secondary'
   */
  keyType?: KeyType;
}

/**
 * Optional Parameters.
 */
export interface CommunicationServiceCheckNameAvailabilityOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Parameters supplied to the operation.
   */
  nameAvailabilityParameters?: NameAvailabilityParameters;
}

/**
 * Optional Parameters.
 */
export interface CommunicationServiceLinkNotificationHubOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Parameters supplied to the operation.
   */
  linkNotificationHubParameters?: LinkNotificationHubParameters;
}

/**
 * Optional Parameters.
 */
export interface CommunicationServiceUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Parameters for the update operation
   */
  parameters?: TaggedResource;
}

/**
 * Optional Parameters.
 */
export interface CommunicationServiceCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Parameters for the create or update operation
   */
  parameters?: CommunicationServiceResource;
}

/**
 * Optional Parameters.
 */
export interface CommunicationServiceRegenerateKeyOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Parameter that describes the Regenerate Key Operation.
   */
  parameters?: RegenerateKeyParameters;
}

/**
 * Optional Parameters.
 */
export interface CommunicationServiceBeginCreateOrUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Parameters for the create or update operation
   */
  parameters?: CommunicationServiceResource;
}

/**
 * An interface representing CommunicationServiceManagementClientOptions.
 */
export interface CommunicationServiceManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * Defines headers for CreateOrUpdate operation.
 */
export interface CommunicationServiceCreateOrUpdateHeaders {
  /**
   * URL to query for status of the operation.
   */
  azureAsyncOperation: string;
}

/**
 * Defines headers for Delete operation.
 */
export interface CommunicationServiceDeleteHeaders {
  /**
   * URL to query for status of the operation.
   */
  location: string;
}

/**
 * @interface
 * Result of the request to list REST API operations. It contains a list of operations.
 * @extends Array<Operation>
 */
export interface OperationList extends Array<Operation> {
  /**
   * The URL the client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * @interface
 * Object that includes an array of CommunicationServices and a possible link for next set.
 * @extends Array<CommunicationServiceResource>
 */
export interface CommunicationServiceResourceList extends Array<CommunicationServiceResource> {
  /**
   * The URL the client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * Defines values for AggregationType.
 * Possible values include: 'Average', 'Minimum', 'Maximum', 'Total', 'Count'
 * @readonly
 * @enum {string}
 */
export type AggregationType = 'Average' | 'Minimum' | 'Maximum' | 'Total' | 'Count';

/**
 * Defines values for Status.
 * Possible values include: 'Succeeded', 'Failed', 'Canceled', 'Creating', 'Deleting', 'Moving'
 * @readonly
 * @enum {string}
 */
export type Status = 'Succeeded' | 'Failed' | 'Canceled' | 'Creating' | 'Deleting' | 'Moving';

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Unknown', 'Succeeded', 'Failed', 'Canceled', 'Running', 'Creating',
 * 'Updating', 'Deleting', 'Moving'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState = 'Unknown' | 'Succeeded' | 'Failed' | 'Canceled' | 'Running' | 'Creating' | 'Updating' | 'Deleting' | 'Moving';

/**
 * Defines values for KeyType.
 * Possible values include: 'Primary', 'Secondary'
 * @readonly
 * @enum {string}
 */
export type KeyType = 'Primary' | 'Secondary';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationList;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationList;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type CommunicationServiceCheckNameAvailabilityResponse = NameAvailability & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NameAvailability;
    };
};

/**
 * Contains response data for the linkNotificationHub operation.
 */
export type CommunicationServiceLinkNotificationHubResponse = LinkedNotificationHub & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkedNotificationHub;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type CommunicationServiceListBySubscriptionResponse = CommunicationServiceResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CommunicationServiceResourceList;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type CommunicationServiceListByResourceGroupResponse = CommunicationServiceResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CommunicationServiceResourceList;
    };
};

/**
 * Contains response data for the update operation.
 */
export type CommunicationServiceUpdateResponse = CommunicationServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CommunicationServiceResource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type CommunicationServiceGetResponse = CommunicationServiceResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CommunicationServiceResource;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type CommunicationServiceCreateOrUpdateResponse = CommunicationServiceResource & CommunicationServiceCreateOrUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CommunicationServiceCreateOrUpdateHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CommunicationServiceResource;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type CommunicationServiceDeleteResponse = CommunicationServiceDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CommunicationServiceDeleteHeaders;
    };
};

/**
 * Contains response data for the listKeys operation.
 */
export type CommunicationServiceListKeysResponse = CommunicationServiceKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CommunicationServiceKeys;
    };
};

/**
 * Contains response data for the regenerateKey operation.
 */
export type CommunicationServiceRegenerateKeyResponse = CommunicationServiceKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CommunicationServiceKeys;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type CommunicationServiceListBySubscriptionNextResponse = CommunicationServiceResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CommunicationServiceResourceList;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type CommunicationServiceListByResourceGroupNextResponse = CommunicationServiceResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CommunicationServiceResourceList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type OperationStatusesGetResponse = OperationStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationStatus;
    };
};
