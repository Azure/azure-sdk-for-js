/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  CommunicationServiceResource,
  CommunicationServicesListBySubscriptionOptionalParams,
  CommunicationServicesListByResourceGroupOptionalParams,
  NameAvailabilityParameters,
  CommunicationServicesCheckNameAvailabilityOptionalParams,
  CommunicationServicesCheckNameAvailabilityResponse,
  CommunicationServicesLinkNotificationHubOptionalParams,
  CommunicationServicesLinkNotificationHubResponse,
  CommunicationServiceResourceUpdate,
  CommunicationServicesUpdateOptionalParams,
  CommunicationServicesUpdateResponse,
  CommunicationServicesGetOptionalParams,
  CommunicationServicesGetResponse,
  CommunicationServicesCreateOrUpdateOptionalParams,
  CommunicationServicesCreateOrUpdateResponse,
  CommunicationServicesDeleteOptionalParams,
  CommunicationServicesListKeysOptionalParams,
  CommunicationServicesListKeysResponse,
  RegenerateKeyParameters,
  CommunicationServicesRegenerateKeyOptionalParams,
  CommunicationServicesRegenerateKeyResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a CommunicationServices. */
export interface CommunicationServices {
  /**
   * Handles requests to list all resources in a subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: CommunicationServicesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<CommunicationServiceResource>;
  /**
   * Handles requests to list all resources in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: CommunicationServicesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<CommunicationServiceResource>;
  /**
   * Checks that the CommunicationService name is valid and is not already in use.
   * @param nameAvailabilityParameters Parameters supplied to the operation.
   * @param options The options parameters.
   */
  checkNameAvailability(
    nameAvailabilityParameters: NameAvailabilityParameters,
    options?: CommunicationServicesCheckNameAvailabilityOptionalParams
  ): Promise<CommunicationServicesCheckNameAvailabilityResponse>;
  /**
   * Links an Azure Notification Hub to this communication service.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  linkNotificationHub(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServicesLinkNotificationHubOptionalParams
  ): Promise<CommunicationServicesLinkNotificationHubResponse>;
  /**
   * Operation to update an existing CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param parameters Parameters for the update operation
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    communicationServiceName: string,
    parameters: CommunicationServiceResourceUpdate,
    options?: CommunicationServicesUpdateOptionalParams
  ): Promise<CommunicationServicesUpdateResponse>;
  /**
   * Get the CommunicationService and its properties.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServicesGetOptionalParams
  ): Promise<CommunicationServicesGetResponse>;
  /**
   * Create a new CommunicationService or update an existing CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    communicationServiceName: string,
    parameters: CommunicationServiceResource,
    options?: CommunicationServicesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CommunicationServicesCreateOrUpdateResponse>,
      CommunicationServicesCreateOrUpdateResponse
    >
  >;
  /**
   * Create a new CommunicationService or update an existing CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    communicationServiceName: string,
    parameters: CommunicationServiceResource,
    options?: CommunicationServicesCreateOrUpdateOptionalParams
  ): Promise<CommunicationServicesCreateOrUpdateResponse>;
  /**
   * Operation to delete a CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServicesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Operation to delete a CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServicesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Get the access keys of the CommunicationService resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServicesListKeysOptionalParams
  ): Promise<CommunicationServicesListKeysResponse>;
  /**
   * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the
   * same time.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param parameters Parameter that describes the Regenerate Key Operation.
   * @param options The options parameters.
   */
  regenerateKey(
    resourceGroupName: string,
    communicationServiceName: string,
    parameters: RegenerateKeyParameters,
    options?: CommunicationServicesRegenerateKeyOptionalParams
  ): Promise<CommunicationServicesRegenerateKeyResponse>;
}
