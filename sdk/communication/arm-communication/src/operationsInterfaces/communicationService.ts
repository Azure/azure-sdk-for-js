/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  CommunicationServiceResource,
  CommunicationServiceListBySubscriptionOptionalParams,
  CommunicationServiceListByResourceGroupOptionalParams,
  CommunicationServiceCheckNameAvailabilityOptionalParams,
  CommunicationServiceCheckNameAvailabilityResponse,
  CommunicationServiceLinkNotificationHubOptionalParams,
  CommunicationServiceLinkNotificationHubResponse,
  CommunicationServiceUpdateOptionalParams,
  CommunicationServiceUpdateResponse,
  CommunicationServiceGetOptionalParams,
  CommunicationServiceGetResponse,
  CommunicationServiceCreateOrUpdateOptionalParams,
  CommunicationServiceCreateOrUpdateResponse,
  CommunicationServiceDeleteOptionalParams,
  CommunicationServiceListKeysOptionalParams,
  CommunicationServiceListKeysResponse,
  RegenerateKeyParameters,
  CommunicationServiceRegenerateKeyOptionalParams,
  CommunicationServiceRegenerateKeyResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a CommunicationService. */
export interface CommunicationService {
  /**
   * Handles requests to list all resources in a subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: CommunicationServiceListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<CommunicationServiceResource>;
  /**
   * Handles requests to list all resources in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: CommunicationServiceListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<CommunicationServiceResource>;
  /**
   * Checks that the CommunicationService name is valid and is not already in use.
   * @param options The options parameters.
   */
  checkNameAvailability(
    options?: CommunicationServiceCheckNameAvailabilityOptionalParams
  ): Promise<CommunicationServiceCheckNameAvailabilityResponse>;
  /**
   * Links an Azure Notification Hub to this communication service.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  linkNotificationHub(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServiceLinkNotificationHubOptionalParams
  ): Promise<CommunicationServiceLinkNotificationHubResponse>;
  /**
   * Operation to update an existing CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServiceUpdateOptionalParams
  ): Promise<CommunicationServiceUpdateResponse>;
  /**
   * Get the CommunicationService and its properties.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServiceGetOptionalParams
  ): Promise<CommunicationServiceGetResponse>;
  /**
   * Create a new CommunicationService or update an existing CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServiceCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CommunicationServiceCreateOrUpdateResponse>,
      CommunicationServiceCreateOrUpdateResponse
    >
  >;
  /**
   * Create a new CommunicationService or update an existing CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServiceCreateOrUpdateOptionalParams
  ): Promise<CommunicationServiceCreateOrUpdateResponse>;
  /**
   * Operation to delete a CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServiceDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Operation to delete a CommunicationService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServiceDeleteOptionalParams
  ): Promise<void>;
  /**
   * Get the access keys of the CommunicationService resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    communicationServiceName: string,
    options?: CommunicationServiceListKeysOptionalParams
  ): Promise<CommunicationServiceListKeysResponse>;
  /**
   * Regenerate CommunicationService access key. PrimaryKey and SecondaryKey cannot be regenerated at the
   * same time.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param communicationServiceName The name of the CommunicationService resource.
   * @param parameters Parameter that describes the Regenerate Key Operation.
   * @param options The options parameters.
   */
  regenerateKey(
    resourceGroupName: string,
    communicationServiceName: string,
    parameters: RegenerateKeyParameters,
    options?: CommunicationServiceRegenerateKeyOptionalParams
  ): Promise<CommunicationServiceRegenerateKeyResponse>;
}
