/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  EmailServiceResource,
  EmailServicesListBySubscriptionOptionalParams,
  EmailServicesListByResourceGroupOptionalParams,
  EmailServicesGetOptionalParams,
  EmailServicesGetResponse,
  EmailServicesCreateOrUpdateOptionalParams,
  EmailServicesCreateOrUpdateResponse,
  EmailServicesDeleteOptionalParams,
  EmailServiceResourceUpdate,
  EmailServicesUpdateOptionalParams,
  EmailServicesUpdateResponse,
  EmailServicesListVerifiedExchangeOnlineDomainsOptionalParams,
  EmailServicesListVerifiedExchangeOnlineDomainsResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a EmailServices. */
export interface EmailServices {
  /**
   * Handles requests to list all resources in a subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: EmailServicesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<EmailServiceResource>;
  /**
   * Handles requests to list all resources in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: EmailServicesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<EmailServiceResource>;
  /**
   * Get the EmailService and its properties.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    emailServiceName: string,
    options?: EmailServicesGetOptionalParams
  ): Promise<EmailServicesGetResponse>;
  /**
   * Create a new EmailService or update an existing EmailService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    emailServiceName: string,
    parameters: EmailServiceResource,
    options?: EmailServicesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<EmailServicesCreateOrUpdateResponse>,
      EmailServicesCreateOrUpdateResponse
    >
  >;
  /**
   * Create a new EmailService or update an existing EmailService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    emailServiceName: string,
    parameters: EmailServiceResource,
    options?: EmailServicesCreateOrUpdateOptionalParams
  ): Promise<EmailServicesCreateOrUpdateResponse>;
  /**
   * Operation to delete a EmailService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    emailServiceName: string,
    options?: EmailServicesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Operation to delete a EmailService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    emailServiceName: string,
    options?: EmailServicesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Operation to update an existing EmailService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param parameters Parameters for the update operation
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    emailServiceName: string,
    parameters: EmailServiceResourceUpdate,
    options?: EmailServicesUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<EmailServicesUpdateResponse>,
      EmailServicesUpdateResponse
    >
  >;
  /**
   * Operation to update an existing EmailService.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param emailServiceName The name of the EmailService resource.
   * @param parameters Parameters for the update operation
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    emailServiceName: string,
    parameters: EmailServiceResourceUpdate,
    options?: EmailServicesUpdateOptionalParams
  ): Promise<EmailServicesUpdateResponse>;
  /**
   * Get a list of domains that are fully verified in Exchange Online.
   * @param options The options parameters.
   */
  listVerifiedExchangeOnlineDomains(
    options?: EmailServicesListVerifiedExchangeOnlineDomainsOptionalParams
  ): Promise<EmailServicesListVerifiedExchangeOnlineDomainsResponse>;
}
