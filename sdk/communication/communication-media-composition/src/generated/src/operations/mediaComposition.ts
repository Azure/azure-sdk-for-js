/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { MediaComposition } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MediaCompositionClientContext } from "../mediaCompositionClientContext";
import {
  MediaCompositionGetOptionalParams,
  MediaCompositionGetResponse,
  MediaCompositionCreateOptionalParams,
  MediaCompositionCreateResponse,
  MediaCompositionUpdateOptionalParams,
  MediaCompositionUpdateResponse,
  MediaCompositionDeleteOptionalParams,
  MediaCompositionStartOptionalParams,
  MediaCompositionStartResponse,
  MediaCompositionStopOptionalParams,
  MediaCompositionStopResponse
} from "../models";

/** Class containing MediaComposition operations. */
export class MediaCompositionImpl implements MediaComposition {
  private readonly client: MediaCompositionClientContext;

  /**
   * Initialize a new instance of the class MediaComposition class.
   * @param client Reference to the service client
   */
  constructor(client: MediaCompositionClientContext) {
    this.client = client;
  }

  /**
   * @param mediaCompositionId
   * @param options The options parameters.
   */
  get(
    mediaCompositionId: string,
    options?: MediaCompositionGetOptionalParams
  ): Promise<MediaCompositionGetResponse> {
    return this.client.sendOperationRequest(
      { mediaCompositionId, options },
      getOperationSpec
    );
  }

  /**
   * @param mediaCompositionId
   * @param options The options parameters.
   */
  create(
    mediaCompositionId: string,
    options?: MediaCompositionCreateOptionalParams
  ): Promise<MediaCompositionCreateResponse> {
    return this.client.sendOperationRequest(
      { mediaCompositionId, options },
      createOperationSpec
    );
  }

  /**
   * @param mediaCompositionId
   * @param options The options parameters.
   */
  update(
    mediaCompositionId: string,
    options?: MediaCompositionUpdateOptionalParams
  ): Promise<MediaCompositionUpdateResponse> {
    return this.client.sendOperationRequest(
      { mediaCompositionId, options },
      updateOperationSpec
    );
  }

  /**
   * @param mediaCompositionId
   * @param options The options parameters.
   */
  delete(
    mediaCompositionId: string,
    options?: MediaCompositionDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { mediaCompositionId, options },
      deleteOperationSpec
    );
  }

  /**
   * @param mediaCompositionId
   * @param options The options parameters.
   */
  start(
    mediaCompositionId: string,
    options?: MediaCompositionStartOptionalParams
  ): Promise<MediaCompositionStartResponse> {
    return this.client.sendOperationRequest(
      { mediaCompositionId, options },
      startOperationSpec
    );
  }

  /**
   * @param mediaCompositionId
   * @param options The options parameters.
   */
  stop(
    mediaCompositionId: string,
    options?: MediaCompositionStopOptionalParams
  ): Promise<MediaCompositionStopResponse> {
    return this.client.sendOperationRequest(
      { mediaCompositionId, options },
      stopOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/mediaCompositions/{mediaCompositionId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MediaCompositionBody
    },
    400: {}
  },
  urlParameters: [Parameters.$host, Parameters.mediaCompositionId],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path: "/mediaCompositions/{mediaCompositionId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MediaCompositionBody
    },
    400: {}
  },
  requestBody: Parameters.body,
  urlParameters: [Parameters.$host, Parameters.mediaCompositionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/mediaCompositions/{mediaCompositionId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.MediaCompositionBody
    },
    400: {}
  },
  requestBody: Parameters.body,
  urlParameters: [Parameters.$host, Parameters.mediaCompositionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/mediaCompositions/{mediaCompositionId}",
  httpMethod: "DELETE",
  responses: { 204: {} },
  urlParameters: [Parameters.$host, Parameters.mediaCompositionId],
  serializer
};
const startOperationSpec: coreClient.OperationSpec = {
  path: "/mediaCompositions/{mediaCompositionId}/start",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    400: {}
  },
  urlParameters: [Parameters.$host, Parameters.mediaCompositionId],
  headerParameters: [Parameters.accept1],
  serializer
};
const stopOperationSpec: coreClient.OperationSpec = {
  path: "/mediaCompositions/{mediaCompositionId}/stop",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: { type: { name: "String" } }
    },
    400: {}
  },
  urlParameters: [Parameters.$host, Parameters.mediaCompositionId],
  headerParameters: [Parameters.accept1],
  serializer
};
