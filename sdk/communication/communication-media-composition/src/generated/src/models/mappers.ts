/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const MediaCompositionBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MediaCompositionBody",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      layout: {
        serializedName: "layout",
        type: {
          name: "Composite",
          className: "Layout"
        }
      },
      mediaInputs: {
        serializedName: "mediaInputs",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "MediaInput" } }
        }
      },
      mediaOutputs: {
        serializedName: "mediaOutputs",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "MediaOutput" } }
        }
      },
      sources: {
        serializedName: "sources",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "Source" } }
        }
      },
      streamState: {
        serializedName: "streamState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Layout: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Layout",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      resolution: {
        serializedName: "resolution",
        type: {
          name: "Composite",
          className: "Resolution"
        }
      },
      trackActiveSpeaker: {
        serializedName: "trackActiveSpeaker",
        type: {
          name: "Boolean"
        }
      },
      presentationWithContentLayoutOptions: {
        serializedName: "presentationWithContentLayoutOptions",
        type: {
          name: "Composite",
          className: "PresentationWithContentLayoutOptions"
        }
      },
      gridOptions: {
        serializedName: "gridOptions",
        type: {
          name: "Composite",
          className: "GridLayoutOptions"
        }
      },
      presentationOptions: {
        serializedName: "presentationOptions",
        type: {
          name: "Composite",
          className: "PresentationLayoutOptions"
        }
      },
      presenterOptions: {
        serializedName: "presenterOptions",
        type: {
          name: "Composite",
          className: "PresenterLayoutOptions"
        }
      },
      containers: {
        serializedName: "containers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Container"
            }
          }
        }
      }
    }
  }
};

export const Resolution: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resolution",
    modelProperties: {
      width: {
        serializedName: "width",
        type: {
          name: "Number"
        }
      },
      height: {
        serializedName: "height",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PresentationWithContentLayoutOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PresentationWithContentLayoutOptions",
    modelProperties: {
      contentSourceId: {
        serializedName: "contentSourceId",
        type: {
          name: "String"
        }
      },
      presenterSourceId: {
        serializedName: "presenterSourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GridLayoutOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GridLayoutOptions",
    modelProperties: {
      columns: {
        serializedName: "columns",
        type: {
          name: "Number"
        }
      },
      rows: {
        serializedName: "rows",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PresentationLayoutOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PresentationLayoutOptions",
    modelProperties: {
      presenterSourceId: {
        serializedName: "presenterSourceId",
        type: {
          name: "String"
        }
      },
      audiencePosition: {
        serializedName: "audiencePosition",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PresenterLayoutOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PresenterLayoutOptions",
    modelProperties: {
      presenterSourceId: {
        serializedName: "presenterSourceId",
        type: {
          name: "String"
        }
      },
      supportSourceId: {
        serializedName: "supportSourceId",
        type: {
          name: "String"
        }
      },
      supportPosition: {
        serializedName: "supportPosition",
        type: {
          name: "String"
        }
      },
      supportAspectRatio: {
        serializedName: "supportAspectRatio",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Container: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Container",
    modelProperties: {
      position: {
        serializedName: "position",
        type: {
          name: "Composite",
          className: "Position"
        }
      },
      width: {
        serializedName: "width",
        type: {
          name: "Number"
        }
      },
      height: {
        serializedName: "height",
        type: {
          name: "Number"
        }
      },
      sourceIds: {
        serializedName: "sourceIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Position: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Position",
    modelProperties: {
      x: {
        serializedName: "x",
        type: {
          name: "Number"
        }
      },
      y: {
        serializedName: "y",
        type: {
          name: "Number"
        }
      },
      z: {
        serializedName: "z",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const MediaInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MediaInput",
    modelProperties: {
      mediaType: {
        serializedName: "mediaType",
        type: {
          name: "String"
        }
      },
      groupCall: {
        serializedName: "groupCall",
        type: {
          name: "Composite",
          className: "GroupCall"
        }
      },
      teamsMeeting: {
        serializedName: "teamsMeeting",
        type: {
          name: "Composite",
          className: "TeamsMeeting"
        }
      },
      rtmp: {
        serializedName: "rtmp",
        type: {
          name: "Composite",
          className: "RtmpStream"
        }
      },
      srt: {
        serializedName: "srt",
        type: {
          name: "Composite",
          className: "SrtStream"
        }
      }
    }
  }
};

export const GroupCall: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GroupCall",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TeamsMeeting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TeamsMeeting",
    modelProperties: {
      teamsJoinUrl: {
        serializedName: "teamsJoinUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RtmpStream: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RtmpStream",
    modelProperties: {
      enableSsl: {
        serializedName: "enableSsl",
        type: {
          name: "Boolean"
        }
      },
      streamUrl: {
        serializedName: "streamUrl",
        type: {
          name: "String"
        }
      },
      streamKey: {
        serializedName: "streamKey",
        type: {
          name: "String"
        }
      },
      resolution: {
        serializedName: "resolution",
        type: {
          name: "Composite",
          className: "Resolution"
        }
      },
      mode: {
        serializedName: "mode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SrtStream: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SrtStream",
    modelProperties: {
      streamUrl: {
        serializedName: "streamUrl",
        type: {
          name: "String"
        }
      },
      resolution: {
        serializedName: "resolution",
        type: {
          name: "Composite",
          className: "Resolution"
        }
      }
    }
  }
};

export const MediaOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MediaOutput",
    modelProperties: {
      mediaType: {
        serializedName: "mediaType",
        type: {
          name: "String"
        }
      },
      groupCall: {
        serializedName: "groupCall",
        type: {
          name: "Composite",
          className: "GroupCall"
        }
      },
      teamsMeeting: {
        serializedName: "teamsMeeting",
        type: {
          name: "Composite",
          className: "TeamsMeeting"
        }
      },
      rtmp: {
        serializedName: "rtmp",
        type: {
          name: "Composite",
          className: "RtmpStream"
        }
      },
      srt: {
        serializedName: "srt",
        type: {
          name: "Composite",
          className: "SrtStream"
        }
      }
    }
  }
};

export const Source: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Source",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      sourceType: {
        serializedName: "sourceType",
        type: {
          name: "String"
        }
      },
      participant: {
        serializedName: "participant",
        type: {
          name: "Composite",
          className: "CommunicationUserIdentifierModel"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      mediaInputId: {
        serializedName: "mediaInputId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CommunicationUserIdentifierModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunicationUserIdentifierModel",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CommunicationErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunicationErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CommunicationError"
        }
      }
    }
  }
};

export const CommunicationError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommunicationError",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CommunicationError"
            }
          }
        }
      },
      innerError: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "CommunicationError"
        }
      }
    }
  }
};
