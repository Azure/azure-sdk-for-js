/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export interface MediaCompositionBody {
  id?: string;
  layout?: Layout;
  /** Dictionary of <MediaInput> */
  mediaInputs?: { [propertyName: string]: MediaInput };
  /** Dictionary of <MediaOutput> */
  mediaOutputs?: { [propertyName: string]: MediaOutput };
  /** Dictionary of <Source> */
  sources?: { [propertyName: string]: Source };
  streamState?: CompositionStreamState;
}

export interface Layout {
  type?: LayoutType;
  resolution?: Resolution;
  trackActiveSpeaker?: boolean;
  presentationWithContentLayoutOptions?: PresentationWithContentLayoutOptions;
  gridOptions?: GridLayoutOptions;
  presentationOptions?: PresentationLayoutOptions;
  presenterOptions?: PresenterLayoutOptions;
  containers?: Container[];
}

export interface Resolution {
  width?: number;
  height?: number;
}

export interface PresentationWithContentLayoutOptions {
  contentSourceId?: string;
  presenterSourceId?: string;
}

export interface GridLayoutOptions {
  columns?: number;
  rows?: number;
}

export interface PresentationLayoutOptions {
  presenterSourceId?: string;
  audiencePosition?: AudiencePosition;
}

export interface PresenterLayoutOptions {
  presenterSourceId?: string;
  supportSourceId?: string;
  supportPosition?: SupportPosition;
  supportAspectRatio?: number;
}

export interface Container {
  position?: Position;
  width?: number;
  height?: number;
  sourceIds?: string[];
}

export interface Position {
  x?: number;
  y?: number;
  z?: number;
}

export interface MediaInput {
  mediaType?: MediaType;
  groupCall?: GroupCall;
  teamsMeeting?: TeamsMeeting;
  rtmp?: RtmpStream;
  srt?: SrtStream;
}

export interface GroupCall {
  id?: string;
}

export interface TeamsMeeting {
  teamsJoinUrl?: string;
}

export interface RtmpStream {
  enableSsl?: boolean;
  streamUrl?: string;
  streamKey?: string;
  resolution?: Resolution;
  mode?: RtmpMode;
}

export interface SrtStream {
  streamUrl?: string;
  resolution?: Resolution;
}

export interface MediaOutput {
  mediaType?: MediaType;
  groupCall?: GroupCall;
  teamsMeeting?: TeamsMeeting;
  rtmp?: RtmpStream;
  srt?: SrtStream;
}

export interface Source {
  description?: string;
  sourceType?: SourceType;
  participant?: CommunicationUserIdentifierModel;
  location?: string;
  mediaInputId?: string;
}

export interface CommunicationUserIdentifierModel {
  id?: string;
}

/** The Communication Services error. */
export interface CommunicationErrorResponse {
  /** The Communication Services error. */
  error: CommunicationError;
}

/** The Communication Services error. */
export interface CommunicationError {
  /** The error code. */
  code: string;
  /** The error message. */
  message: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * Further details about specific errors that led to this error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: CommunicationError[];
  /**
   * The inner error if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly innerError?: CommunicationError;
}

/** Known values of {@link LayoutType} that the service accepts. */
export enum KnownLayoutType {
  Grid = "grid",
  DynamicGrid = "dynamicGrid",
  Presentation = "presentation",
  Presenter = "presenter",
  WeatherPerson = "weatherPerson",
  Together = "together",
  Custom = "custom",
  PresentationWithContent = "presentationWithContent",
  Warhol = "warhol"
}

/**
 * Defines values for LayoutType. \
 * {@link KnownLayoutType} can be used interchangeably with LayoutType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **grid** \
 * **dynamicGrid** \
 * **presentation** \
 * **presenter** \
 * **weatherPerson** \
 * **together** \
 * **custom** \
 * **presentationWithContent** \
 * **warhol**
 */
export type LayoutType = string;

/** Known values of {@link AudiencePosition} that the service accepts. */
export enum KnownAudiencePosition {
  Top = "top",
  Right = "right",
  Bottom = "bottom",
  Left = "left"
}

/**
 * Defines values for AudiencePosition. \
 * {@link KnownAudiencePosition} can be used interchangeably with AudiencePosition,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **top** \
 * **right** \
 * **bottom** \
 * **left**
 */
export type AudiencePosition = string;

/** Known values of {@link SupportPosition} that the service accepts. */
export enum KnownSupportPosition {
  TopLeft = "topLeft",
  TopRight = "topRight",
  BottomLeft = "bottomLeft",
  BottomRight = "bottomRight"
}

/**
 * Defines values for SupportPosition. \
 * {@link KnownSupportPosition} can be used interchangeably with SupportPosition,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **topLeft** \
 * **topRight** \
 * **bottomLeft** \
 * **bottomRight**
 */
export type SupportPosition = string;

/** Known values of {@link MediaType} that the service accepts. */
export enum KnownMediaType {
  GroupCall = "groupCall",
  TeamsMeeting = "teamsMeeting",
  Srt = "srt",
  Rtmp = "rtmp"
}

/**
 * Defines values for MediaType. \
 * {@link KnownMediaType} can be used interchangeably with MediaType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **groupCall** \
 * **teamsMeeting** \
 * **srt** \
 * **rtmp**
 */
export type MediaType = string;

/** Known values of {@link RtmpMode} that the service accepts. */
export enum KnownRtmpMode {
  Push = "push",
  Pull = "pull"
}

/**
 * Defines values for RtmpMode. \
 * {@link KnownRtmpMode} can be used interchangeably with RtmpMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **push** \
 * **pull**
 */
export type RtmpMode = string;

/** Known values of {@link SourceType} that the service accepts. */
export enum KnownSourceType {
  Participant = "participant",
  Sprite = "sprite",
  Rtmp = "rtmp",
  Srt = "srt",
  ScreenShare = "screenShare"
}

/**
 * Defines values for SourceType. \
 * {@link KnownSourceType} can be used interchangeably with SourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **participant** \
 * **sprite** \
 * **rtmp** \
 * **srt** \
 * **screenShare**
 */
export type SourceType = string;

/** Known values of {@link CompositionStreamState} that the service accepts. */
export enum KnownCompositionStreamState {
  NotStarted = "notStarted",
  Running = "running",
  Stopped = "stopped"
}

/**
 * Defines values for CompositionStreamState. \
 * {@link KnownCompositionStreamState} can be used interchangeably with CompositionStreamState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **notStarted** \
 * **running** \
 * **stopped**
 */
export type CompositionStreamState = string;

/** Optional parameters. */
export interface MediaCompositionGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MediaCompositionGetResponse = MediaCompositionBody;

/** Optional parameters. */
export interface MediaCompositionCreateOptionalParams
  extends coreClient.OperationOptions {
  body?: MediaCompositionBody;
}

/** Contains response data for the create operation. */
export type MediaCompositionCreateResponse = MediaCompositionBody;

/** Optional parameters. */
export interface MediaCompositionUpdateOptionalParams
  extends coreClient.OperationOptions {
  body?: MediaCompositionBody;
}

/** Contains response data for the update operation. */
export type MediaCompositionUpdateResponse = MediaCompositionBody;

/** Optional parameters. */
export interface MediaCompositionDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface MediaCompositionStartOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the start operation. */
export type MediaCompositionStartResponse = {
  /** The parsed response body. */
  body: CompositionStreamState;
};

/** Optional parameters. */
export interface MediaCompositionStopOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the stop operation. */
export type MediaCompositionStopResponse = {
  /** The parsed response body. */
  body: CompositionStreamState;
};

/** Optional parameters. */
export interface MediaCompositionClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Overrides client endpoint. */
  endpoint?: string;
}
