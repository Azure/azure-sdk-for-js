/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/stepsMappers";
import * as Parameters from "../models/parameters";
import { AzureDeploymentManagerContext } from "../azureDeploymentManagerContext";

/** Class representing a Steps. */
export class Steps {
  private readonly client: AzureDeploymentManagerContext;

  /**
   * Create a Steps.
   * @param {AzureDeploymentManagerContext} client Reference to the service client.
   */
  constructor(client: AzureDeploymentManagerContext) {
    this.client = client;
  }

  /**
   * Synchronously creates a new step or updates an existing step.
   * @summary Creates or updates a rollout step with the given step properties.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param stepName The name of the deployment step.
   * @param [options] The optional parameters
   * @returns Promise<Models.StepsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, stepName: string, options?: Models.StepsCreateOrUpdateOptionalParams): Promise<Models.StepsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param stepName The name of the deployment step.
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, stepName: string, callback: msRest.ServiceCallback<Models.StepResource>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param stepName The name of the deployment step.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, stepName: string, options: Models.StepsCreateOrUpdateOptionalParams, callback: msRest.ServiceCallback<Models.StepResource>): void;
  createOrUpdate(resourceGroupName: string, stepName: string, options?: Models.StepsCreateOrUpdateOptionalParams | msRest.ServiceCallback<Models.StepResource>, callback?: msRest.ServiceCallback<Models.StepResource>): Promise<Models.StepsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        stepName,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.StepsCreateOrUpdateResponse>;
  }

  /**
   * @summary Gets the step.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param stepName The name of the deployment step.
   * @param [options] The optional parameters
   * @returns Promise<Models.StepsGetResponse>
   */
  get(resourceGroupName: string, stepName: string, options?: msRest.RequestOptionsBase): Promise<Models.StepsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param stepName The name of the deployment step.
   * @param callback The callback
   */
  get(resourceGroupName: string, stepName: string, callback: msRest.ServiceCallback<Models.StepResource>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param stepName The name of the deployment step.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, stepName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StepResource>): void;
  get(resourceGroupName: string, stepName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StepResource>, callback?: msRest.ServiceCallback<Models.StepResource>): Promise<Models.StepsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        stepName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.StepsGetResponse>;
  }

  /**
   * @summary Deletes the step.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param stepName The name of the deployment step.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, stepName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param stepName The name of the deployment step.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, stepName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param stepName The name of the deployment step.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, stepName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, stepName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        stepName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * @summary Lists the steps in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.StepsListResponse>
   */
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.StepsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.StepResource[]>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StepResource[]>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StepResource[]>, callback?: msRest.ServiceCallback<Models.StepResource[]>): Promise<Models.StepsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.StepsListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.stepName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "stepInfo"
    ],
    mapper: Mappers.StepResource
  },
  responses: {
    201: {
      bodyMapper: Mappers.StepResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.stepName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StepResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.stepName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StepResource"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
