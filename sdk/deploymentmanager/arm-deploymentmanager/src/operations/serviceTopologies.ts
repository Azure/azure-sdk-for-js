/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ServiceTopologies } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureDeploymentManager } from "../azureDeploymentManager";
import {
  ServiceTopologyResource,
  ServiceTopologiesCreateOrUpdateOptionalParams,
  ServiceTopologiesCreateOrUpdateResponse,
  ServiceTopologiesGetOptionalParams,
  ServiceTopologiesGetResponse,
  ServiceTopologiesDeleteOptionalParams,
  ServiceTopologiesListOptionalParams,
  ServiceTopologiesListResponse
} from "../models";

/** Class containing ServiceTopologies operations. */
export class ServiceTopologiesImpl implements ServiceTopologies {
  private readonly client: AzureDeploymentManager;

  /**
   * Initialize a new instance of the class ServiceTopologies class.
   * @param client Reference to the service client
   */
  constructor(client: AzureDeploymentManager) {
    this.client = client;
  }

  /**
   * Synchronously creates a new service topology or updates an existing service topology.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceTopologyName The name of the service topology .
   * @param serviceTopologyInfo Source topology object defines the resource.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    serviceTopologyName: string,
    serviceTopologyInfo: ServiceTopologyResource,
    options?: ServiceTopologiesCreateOrUpdateOptionalParams
  ): Promise<ServiceTopologiesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceTopologyName, serviceTopologyInfo, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Gets the service topology.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceTopologyName The name of the service topology .
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    serviceTopologyName: string,
    options?: ServiceTopologiesGetOptionalParams
  ): Promise<ServiceTopologiesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceTopologyName, options },
      getOperationSpec
    );
  }

  /**
   * Deletes the service topology.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceTopologyName The name of the service topology .
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    serviceTopologyName: string,
    options?: ServiceTopologiesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, serviceTopologyName, options },
      deleteOperationSpec
    );
  }

  /**
   * Lists the service topologies in the resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: ServiceTopologiesListOptionalParams
  ): Promise<ServiceTopologiesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.ServiceTopologyResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.serviceTopologyInfo,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceTopologyName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ServiceTopologyResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceTopologyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceTopologyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "ServiceTopologyResource" }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
