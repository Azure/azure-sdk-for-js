/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/serviceUnitsMappers";
import * as Parameters from "../models/parameters";
import { AzureDeploymentManagerContext } from "../azureDeploymentManagerContext";

/** Class representing a ServiceUnits. */
export class ServiceUnits {
  private readonly client: AzureDeploymentManagerContext;

  /**
   * Create a ServiceUnits.
   * @param {AzureDeploymentManagerContext} client Reference to the service client.
   */
  constructor(client: AzureDeploymentManagerContext) {
    this.client = client;
  }

  /**
   * This is an asynchronous operation and can be polled to completion using the operation resource
   * returned by this operation.
   * @summary Creates or updates a service unit under the service in the service topology.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceTopologyName The name of the service topology .
   * @param serviceName The name of the service resource.
   * @param serviceUnitName The name of the service unit resource.
   * @param serviceUnitInfo The service unit resource object.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceUnitsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, serviceUnitInfo: Models.ServiceUnitResource, options?: msRest.RequestOptionsBase): Promise<Models.ServiceUnitsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,serviceTopologyName,serviceName,serviceUnitName,serviceUnitInfo,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ServiceUnitsCreateOrUpdateResponse>;
  }

  /**
   * @summary Gets the service unit.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceTopologyName The name of the service topology .
   * @param serviceName The name of the service resource.
   * @param serviceUnitName The name of the service unit resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceUnitsGetResponse>
   */
  get(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceUnitsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceTopologyName The name of the service topology .
   * @param serviceName The name of the service resource.
   * @param serviceUnitName The name of the service unit resource.
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, callback: msRest.ServiceCallback<Models.ServiceUnitResource>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceTopologyName The name of the service topology .
   * @param serviceName The name of the service resource.
   * @param serviceUnitName The name of the service unit resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceUnitResource>): void;
  get(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServiceUnitResource>, callback?: msRest.ServiceCallback<Models.ServiceUnitResource>): Promise<Models.ServiceUnitsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceTopologyName,
        serviceName,
        serviceUnitName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ServiceUnitsGetResponse>;
  }

  /**
   * @summary Deletes the service unit.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceTopologyName The name of the service topology .
   * @param serviceName The name of the service resource.
   * @param serviceUnitName The name of the service unit resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceTopologyName The name of the service topology .
   * @param serviceName The name of the service resource.
   * @param serviceUnitName The name of the service unit resource.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceTopologyName The name of the service topology .
   * @param serviceName The name of the service resource.
   * @param serviceUnitName The name of the service unit resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceTopologyName,
        serviceName,
        serviceUnitName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * @summary Lists the service units under a service in the service topology.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceTopologyName The name of the service topology .
   * @param serviceName The name of the service resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServiceUnitsListResponse>
   */
  list(resourceGroupName: string, serviceTopologyName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceUnitsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceTopologyName The name of the service topology .
   * @param serviceName The name of the service resource.
   * @param callback The callback
   */
  list(resourceGroupName: string, serviceTopologyName: string, serviceName: string, callback: msRest.ServiceCallback<Models.ServiceUnitResource[]>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceTopologyName The name of the service topology .
   * @param serviceName The name of the service resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, serviceTopologyName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceUnitResource[]>): void;
  list(resourceGroupName: string, serviceTopologyName: string, serviceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServiceUnitResource[]>, callback?: msRest.ServiceCallback<Models.ServiceUnitResource[]>): Promise<Models.ServiceUnitsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        serviceTopologyName,
        serviceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ServiceUnitsListResponse>;
  }

  /**
   * This is an asynchronous operation and can be polled to completion using the operation resource
   * returned by this operation.
   * @summary Creates or updates a service unit under the service in the service topology.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param serviceTopologyName The name of the service topology .
   * @param serviceName The name of the service resource.
   * @param serviceUnitName The name of the service unit resource.
   * @param serviceUnitInfo The service unit resource object.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, serviceUnitInfo: Models.ServiceUnitResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        serviceTopologyName,
        serviceName,
        serviceUnitName,
        serviceUnitInfo,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceTopologyName,
    Parameters.serviceName,
    Parameters.serviceUnitName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceUnitResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceTopologyName,
    Parameters.serviceName,
    Parameters.serviceUnitName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceTopologyName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceUnitResource"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.serviceTopologyName,
    Parameters.serviceName,
    Parameters.serviceUnitName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "serviceUnitInfo",
    mapper: {
      ...Mappers.ServiceUnitResource,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.ServiceUnitResource,
      headersMapper: Mappers.ServiceUnitsCreateOrUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
