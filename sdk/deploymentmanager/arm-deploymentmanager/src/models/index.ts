/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type StepPropertiesUnion =
  | StepProperties
  | HealthCheckStepProperties
  | WaitStepProperties;
export type AuthenticationUnion = Authentication | SasAuthentication;
export type HealthCheckStepAttributesUnion =
  | HealthCheckStepAttributes
  | RestHealthCheckStepAttributes;
export type RestRequestAuthenticationUnion =
  | RestRequestAuthentication
  | RolloutIdentityAuthentication
  | ApiKeyAuthentication;

/** The properties of a service topology. */
export interface ServiceTopologyProperties {
  /** The resource Id of the artifact source that contains the artifacts that can be referenced in the service units. */
  artifactSourceId?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** The error information object. */
export interface CloudError {
  /** The properties that define the error. */
  error?: CloudErrorBody;
}

/** Detailed error information of any failure. */
export interface CloudErrorBody {
  /**
   * Error code string.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Descriptive error information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /** Error target */
  target?: string;
  /** More detailed error information. */
  details?: CloudErrorBody[];
}

/** The properties of a service. */
export interface ServiceProperties {
  /** The Azure location to which the resources in the service belong to or should be deployed to. */
  targetLocation: string;
  /** The subscription to which the resources in the service belong to or should be deployed to. */
  targetSubscriptionId: string;
}

/** Defines the properties of a service unit. */
export interface ServiceUnitProperties {
  /** The Azure Resource Group to which the resources in the service unit belong to or should be deployed to. */
  targetResourceGroup: string;
  /** Describes the type of ARM deployment to be performed on the resource. */
  deploymentMode: DeploymentMode;
  /** The artifacts for the service unit. */
  artifacts?: ServiceUnitArtifacts;
}

/** Defines the artifacts of a service unit. */
export interface ServiceUnitArtifacts {
  /** The full URI of the ARM template file with the SAS token. */
  templateUri?: string;
  /** The full URI of the ARM parameters file with the SAS token. */
  parametersUri?: string;
  /** The path to the ARM template file relative to the artifact source. */
  templateArtifactSourceRelativePath?: string;
  /** The path to the ARM parameters file relative to the artifact source. */
  parametersArtifactSourceRelativePath?: string;
}

/** The properties of a step resource. */
export interface StepProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  stepType: "HealthCheck" | "Wait";
}

/** Identity for the resource. */
export interface Identity {
  /** The identity type. */
  type: string;
  /** The list of identities. */
  identityIds: string[];
}

/** The properties for defining a rollout. */
export interface RolloutRequestProperties {
  /** The version of the build being deployed. */
  buildVersion: string;
  /** The reference to the artifact source resource Id where the payload is located. */
  artifactSourceId?: string;
  /** The resource Id of the service topology from which service units are being referenced in step groups to be deployed. */
  targetServiceTopologyId: string;
  /** The list of step groups that define the orchestration. */
  stepGroups: StepGroup[];
}

/** The properties that define a Step group in a rollout. */
export interface StepGroup {
  /** The name of the step group. */
  name: string;
  /** The list of step group names on which this step group depends on. */
  dependsOnStepGroups?: string[];
  /** The list of steps to be run before deploying the target. */
  preDeploymentSteps?: PrePostStep[];
  /** The resource Id of service unit to be deployed. The service unit should be from the service topology referenced in targetServiceTopologyId */
  deploymentTargetId: string;
  /** The list of steps to be run after deploying the target. */
  postDeploymentSteps?: PrePostStep[];
}

/** The properties that define a step. */
export interface PrePostStep {
  /** The resource Id of the step to be run. */
  stepId: string;
}

/** Defines the properties of a rollout. */
export interface RolloutPropertiesAutoGenerated {
  /**
   * The current status of the rollout.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * The cardinal count of total number of retries performed on the rollout at a given time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalRetryAttempts?: number;
  /**
   * Operational information of the rollout.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationInfo?: RolloutOperationInfo;
  /**
   * The detailed information on the services being deployed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly services?: Service[];
}

/** Detailed runtime information of the rollout. */
export interface RolloutOperationInfo {
  /**
   * The ordinal count of the number of retry attempts on a rollout. 0 if no retries of the rollout have been performed. If the rollout is updated with a PUT, this count is reset to 0.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly retryAttempt?: number;
  /**
   * True, if all steps that succeeded on the previous run/attempt were chosen to be skipped in this retry attempt. False, otherwise.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly skipSucceededOnRetry?: boolean;
  /**
   * The start time of the rollout in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * The start time of the rollout in UTC. This property will not be set if the rollout has not completed yet.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: Date;
  /**
   * The detailed error information for any failure.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: CloudErrorBody;
}

/** Defines a specific step on a target service unit. */
export interface RolloutStep {
  /** Name of the step. */
  name: string;
  /**
   * Current state of the step.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /** The step group the current step is part of. */
  stepGroup?: string;
  /**
   * Detailed information of specific action execution.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationInfo?: StepOperationInfo;
  /**
   * Set of resource operations that were performed, if any, on an Azure resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceOperations?: ResourceOperation[];
  /**
   * Supplementary informative messages during rollout.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly messages?: Message[];
}

/** Detailed information of a specific step run. */
export interface StepOperationInfo {
  /**
   * The name of the ARM deployment initiated as part of the step.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deploymentName?: string;
  /**
   * Unique identifier to track the request for ARM-based resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly correlationId?: string;
  /**
   * Start time of the action in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startTime?: Date;
  /**
   * End time of the action in UTC.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endTime?: Date;
  /**
   * Last time in UTC this operation was updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdatedTime?: Date;
  /** The errors, if any, for the action. */
  error?: CloudErrorBody;
}

/** Individual resource operation information. */
export interface ResourceOperation {
  /** Name of the resource as specified in the artifacts. For ARM resources, this is the name of the resource specified in the template. */
  resourceName?: string;
  /**
   * Unique identifier of the operation. For ARM resources, this is the operationId obtained from ARM service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationId?: string;
  /** Type of the resource as specified in the artifacts. For ARM resources, this is the type of the resource specified in the template. */
  resourceType?: string;
  /**
   * State of the resource deployment. For ARM resources, this is the current provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * Descriptive information of the resource operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusMessage?: string;
  /**
   * Http status code of the operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusCode?: string;
}

/** Supplementary contextual messages during a rollout. */
export interface Message {
  /**
   * Time in UTC this message was provided.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timeStamp?: Date;
  /**
   * The actual message text.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** The properties that define the source location where the artifacts are located. */
export interface ArtifactSourcePropertiesAutoGenerated {
  /** The type of artifact source used. */
  sourceType: string;
  /** The path from the location that the 'authentication' property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found. */
  artifactRoot?: string;
  /** The authentication method to use to access the artifact source. */
  authentication: AuthenticationUnion;
}

/** Defines the authentication method and properties to access the artifacts. */
export interface Authentication {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Sas";
}

/** The operations response. */
export interface OperationsList {
  /** The list of supported operations */
  value?: Operation;
}

/** Represents an operation that can be performed on the service. */
export interface Operation {
  /** The name of the operation. */
  name?: string;
  /** The display name of the operation. */
  display?: OperationDetail;
  /** The origin of the operation. */
  origin?: string;
  /** The properties of the operation. */
  properties?: Record<string, unknown>;
}

/** The detail about an operation. */
export interface OperationDetail {
  /** The name of the provider that supports the operation. */
  provider?: string;
  /** The resource type on which this operation can be performed. */
  resource?: string;
  /** The name of the operation. */
  operation?: string;
  /** The description of the operation. */
  description?: string;
}

/** The attributes for the health check step. */
export interface HealthCheckStepAttributes {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "REST";
  /** The duration in ISO 8601 format for which health check waits idly without any checks. */
  waitDuration?: string;
  /** The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn't. Health check starts to enforce healthyStateDuration once resource becomes healthy. */
  maxElasticDuration?: string;
  /** The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy state duration is enforced after the detection of first healthy signal. */
  healthyStateDuration: string;
}

/** A REST based health check */
export interface RestHealthCheck {
  /** A unique name for this check. */
  name: string;
  /** The request to the health provider. */
  request: RestRequest;
  /** The expected response from the health provider. If no expected response is provided, the default is to expect the received response to have an HTTP status code of 200 OK. */
  response?: RestResponse;
}

/** The properties that make up a REST request */
export interface RestRequest {
  /** The HTTP method to use for the request. */
  method: RestRequestMethod;
  /** The HTTP URI to use for the request. */
  uri: string;
  /** The authentication information required in the request to the health provider. */
  authentication: RestRequestAuthenticationUnion;
}

/** The authentication information required in the REST health check request to the health provider. */
export interface RestRequestAuthentication {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "RolloutIdentity" | "ApiKey";
}

/** The properties that make up the expected REST response */
export interface RestResponse {
  /** The HTTP status codes expected in a successful health check response. The response is expected to match one of the given status codes. If no expected status codes are provided, default expected status code is 200 OK. */
  successStatusCodes?: string[];
  /** The regular expressions to match the response content with. */
  regex?: RestResponseRegex;
}

/** The regular expressions to match the response content with. */
export interface RestResponseRegex {
  /** The list of regular expressions. */
  matches?: string[];
  /** Indicates whether any or all of the expressions should match with the response content. */
  matchQuantifier?: RestMatchQuantifier;
}

/** The parameters for the wait step. */
export interface WaitStepAttributes {
  /** The duration in ISO 8601 format of how long the wait should be. */
  duration: string;
}

/** The properties that define the service topology. */
export interface ServiceTopologyResourceProperties
  extends ServiceTopologyProperties {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The properties that define a service in a service topology. */
export interface ServiceResourceProperties extends ServiceProperties {}

/** Defines a service. */
export interface Service extends ServiceProperties {
  /** Name of the service. */
  name?: string;
  /** The detailed information about the units that make up the service. */
  serviceUnits?: ServiceUnit[];
}

/** The properties that define the service unit. */
export interface ServiceUnitResourceProperties extends ServiceUnitProperties {}

/** Defines a service unit. */
export interface ServiceUnit extends ServiceUnitProperties {
  /** Name of the service unit. */
  name?: string;
  /** Detailed step information, if present. */
  steps?: RolloutStep[];
}

/** Defines the properties of a health check step. */
export interface HealthCheckStepProperties extends StepProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  stepType: "HealthCheck";
  /** The health check step attributes */
  attributes: HealthCheckStepAttributesUnion;
}

/** Defines the properties of a Wait step. */
export interface WaitStepProperties extends StepProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  stepType: "Wait";
  /** The Wait attributes */
  attributes: WaitStepAttributes;
}

/** The properties that define a rollout. */
export interface RolloutProperties
  extends RolloutRequestProperties,
    RolloutPropertiesAutoGenerated {}

/** The properties that define the artifact source. */
export interface ArtifactSourceProperties
  extends ArtifactSourcePropertiesAutoGenerated {}

/** Defines the properties to access the artifacts using an Azure Storage SAS URI. */
export interface SasAuthentication extends Authentication {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Sas";
  /** The SAS URI to the Azure Storage blob container. Any offset from the root of the container to where the artifacts are located can be defined in the artifactRoot. */
  sasUri?: string;
}

/** Defines the REST health check step properties. */
export interface RestHealthCheckStepAttributes
  extends HealthCheckStepAttributes {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "REST";
  /** The list of checks that form the health check step. */
  healthChecks?: RestHealthCheck[];
}

/** RolloutIdentity uses the user-assigned managed identity authentication context specified in the Identity property during rollout creation. */
export interface RolloutIdentityAuthentication
  extends RestRequestAuthentication {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "RolloutIdentity";
}

/** ApiKey authentication gives a name and a value that can be included in either the request header or query parameters. */
export interface ApiKeyAuthentication extends RestRequestAuthentication {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "ApiKey";
  /** The key name of the authentication key/value pair. */
  name: string;
  /** The location of the authentication key/value pair in the request. */
  in: RestAuthLocation;
  /** The value of the authentication key/value pair. */
  value: string;
}

/** The resource representation of a service topology. */
export interface ServiceTopologyResource extends TrackedResource {
  /** The resource Id of the artifact source that contains the artifacts that can be referenced in the service units. */
  artifactSourceId?: string;
}

/** The resource representation of a service in a service topology. */
export interface ServiceResource extends TrackedResource {
  /** The Azure location to which the resources in the service belong to or should be deployed to. */
  targetLocation: string;
  /** The subscription to which the resources in the service belong to or should be deployed to. */
  targetSubscriptionId: string;
}

/** Represents the response of a service unit resource. */
export interface ServiceUnitResource extends TrackedResource {
  /** The Azure Resource Group to which the resources in the service unit belong to or should be deployed to. */
  targetResourceGroup: string;
  /** Describes the type of ARM deployment to be performed on the resource. */
  deploymentMode: DeploymentMode;
  /** The artifacts for the service unit. */
  artifacts?: ServiceUnitArtifacts;
}

/** The resource representation of a rollout step. */
export interface StepResource extends TrackedResource {
  /** The properties that define the step. */
  properties: StepPropertiesUnion;
}

/** Defines the PUT rollout request body. */
export interface RolloutRequest extends TrackedResource {
  /** Identity for the resource. */
  identity: Identity;
  /** The version of the build being deployed. */
  buildVersion: string;
  /** The reference to the artifact source resource Id where the payload is located. */
  artifactSourceId?: string;
  /** The resource Id of the service topology from which service units are being referenced in step groups to be deployed. */
  targetServiceTopologyId: string;
  /** The list of step groups that define the orchestration. */
  stepGroups: StepGroup[];
}

/** Defines the rollout. */
export interface Rollout extends TrackedResource {
  /** Identity for the resource. */
  identity?: Identity;
  /** The version of the build being deployed. */
  buildVersion?: string;
  /** The reference to the artifact source resource Id where the payload is located. */
  artifactSourceId?: string;
  /** The resource Id of the service topology from which service units are being referenced in step groups to be deployed. */
  targetServiceTopologyId?: string;
  /** The list of step groups that define the orchestration. */
  stepGroups?: StepGroup[];
  /**
   * The current status of the rollout.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * The cardinal count of total number of retries performed on the rollout at a given time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalRetryAttempts?: number;
  /**
   * Operational information of the rollout.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationInfo?: RolloutOperationInfo;
  /**
   * The detailed information on the services being deployed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly services?: Service[];
}

/** The resource that defines the source location where the artifacts are located. */
export interface ArtifactSource extends TrackedResource {
  /** The type of artifact source used. */
  sourceType?: string;
  /** The path from the location that the 'authentication' property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found. */
  artifactRoot?: string;
  /** The authentication method to use to access the artifact source. */
  authentication?: AuthenticationUnion;
}

/** Defines headers for ServiceUnits_createOrUpdate operation. */
export interface ServiceUnitsCreateOrUpdateHeaders {
  /** Contains the status URL on which clients are expected to poll the status of the operation. */
  azureAsyncOperation?: string;
}

/** Defines headers for Rollouts_createOrUpdate operation. */
export interface RolloutsCreateOrUpdateHeaders {
  /** Contains the status URL on which clients are expected to poll the status of the operation. */
  azureAsyncOperation?: string;
}

/** Defines values for DeploymentMode. */
export type DeploymentMode = "Incremental" | "Complete";
/** Defines values for StepType. */
export type StepType = "Wait" | "HealthCheck";
/** Defines values for RestRequestMethod. */
export type RestRequestMethod = "GET" | "POST";
/** Defines values for RestAuthType. */
export type RestAuthType = "ApiKey" | "RolloutIdentity";
/** Defines values for RestMatchQuantifier. */
export type RestMatchQuantifier = "All" | "Any";
/** Defines values for RestAuthLocation. */
export type RestAuthLocation = "Query" | "Header";

/** Optional parameters. */
export interface ServiceTopologiesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ServiceTopologiesCreateOrUpdateResponse = ServiceTopologyResource;

/** Optional parameters. */
export interface ServiceTopologiesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServiceTopologiesGetResponse = ServiceTopologyResource;

/** Optional parameters. */
export interface ServiceTopologiesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ServiceTopologiesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ServiceTopologiesListResponse = ServiceTopologyResource[];

/** Optional parameters. */
export interface ServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ServicesCreateOrUpdateResponse = ServiceResource;

/** Optional parameters. */
export interface ServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServicesGetResponse = ServiceResource;

/** Optional parameters. */
export interface ServicesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ServicesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ServicesListResponse = ServiceResource[];

/** Optional parameters. */
export interface ServiceUnitsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ServiceUnitsCreateOrUpdateResponse = ServiceUnitsCreateOrUpdateHeaders &
  ServiceUnitResource;

/** Optional parameters. */
export interface ServiceUnitsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServiceUnitsGetResponse = ServiceUnitResource;

/** Optional parameters. */
export interface ServiceUnitsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ServiceUnitsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ServiceUnitsListResponse = ServiceUnitResource[];

/** Optional parameters. */
export interface StepsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The step object. */
  stepInfo?: StepResource;
}

/** Contains response data for the createOrUpdate operation. */
export type StepsCreateOrUpdateResponse = StepResource;

/** Optional parameters. */
export interface StepsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type StepsGetResponse = StepResource;

/** Optional parameters. */
export interface StepsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface StepsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type StepsListResponse = StepResource[];

/** Optional parameters. */
export interface RolloutsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Source rollout request object that defines the rollout. */
  rolloutRequest?: RolloutRequest;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type RolloutsCreateOrUpdateResponse = RolloutsCreateOrUpdateHeaders &
  RolloutRequest;

/** Optional parameters. */
export interface RolloutsGetOptionalParams extends coreClient.OperationOptions {
  /** Rollout retry attempt ordinal to get the result of. If not specified, result of the latest attempt will be returned. */
  retryAttempt?: number;
}

/** Contains response data for the get operation. */
export type RolloutsGetResponse = Rollout;

/** Optional parameters. */
export interface RolloutsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface RolloutsCancelOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the cancel operation. */
export type RolloutsCancelResponse = Rollout;

/** Optional parameters. */
export interface RolloutsRestartOptionalParams
  extends coreClient.OperationOptions {
  /** If true, will skip all succeeded steps so far in the rollout. If false, will execute the entire rollout again regardless of the current state of individual resources. Defaults to false if not specified. */
  skipSucceeded?: boolean;
}

/** Contains response data for the restart operation. */
export type RolloutsRestartResponse = Rollout;

/** Optional parameters. */
export interface RolloutsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type RolloutsListResponse = Rollout[];

/** Optional parameters. */
export interface ArtifactSourcesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Source object that defines the resource. */
  artifactSourceInfo?: ArtifactSource;
}

/** Contains response data for the createOrUpdate operation. */
export type ArtifactSourcesCreateOrUpdateResponse = ArtifactSource;

/** Optional parameters. */
export interface ArtifactSourcesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ArtifactSourcesGetResponse = ArtifactSource;

/** Optional parameters. */
export interface ArtifactSourcesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ArtifactSourcesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ArtifactSourcesListResponse = ArtifactSource[];

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationsList;

/** Optional parameters. */
export interface AzureDeploymentManagerOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
