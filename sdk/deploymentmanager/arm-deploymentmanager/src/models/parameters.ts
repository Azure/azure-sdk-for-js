/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  ServiceTopologyResource as ServiceTopologyResourceMapper,
  ServiceResource as ServiceResourceMapper,
  ServiceUnitResource as ServiceUnitResourceMapper,
  StepResource as StepResourceMapper,
  RolloutRequest as RolloutRequestMapper,
  ArtifactSource as ArtifactSourceMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const serviceTopologyInfo: OperationParameter = {
  parameterPath: "serviceTopologyInfo",
  mapper: ServiceTopologyResourceMapper
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceTopologyName: OperationURLParameter = {
  parameterPath: "serviceTopologyName",
  mapper: {
    serializedName: "serviceTopologyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-11-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const serviceInfo: OperationParameter = {
  parameterPath: "serviceInfo",
  mapper: ServiceResourceMapper
};

export const serviceName: OperationURLParameter = {
  parameterPath: "serviceName",
  mapper: {
    serializedName: "serviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceUnitInfo: OperationParameter = {
  parameterPath: "serviceUnitInfo",
  mapper: ServiceUnitResourceMapper
};

export const serviceUnitName: OperationURLParameter = {
  parameterPath: "serviceUnitName",
  mapper: {
    serializedName: "serviceUnitName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const stepInfo: OperationParameter = {
  parameterPath: ["options", "stepInfo"],
  mapper: StepResourceMapper
};

export const stepName: OperationURLParameter = {
  parameterPath: "stepName",
  mapper: {
    serializedName: "stepName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const rolloutRequest: OperationParameter = {
  parameterPath: ["options", "rolloutRequest"],
  mapper: RolloutRequestMapper
};

export const rolloutName: OperationURLParameter = {
  parameterPath: "rolloutName",
  mapper: {
    serializedName: "rolloutName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const retryAttempt: OperationQueryParameter = {
  parameterPath: ["options", "retryAttempt"],
  mapper: {
    serializedName: "retryAttempt",
    type: {
      name: "Number"
    }
  }
};

export const skipSucceeded: OperationQueryParameter = {
  parameterPath: ["options", "skipSucceeded"],
  mapper: {
    serializedName: "skipSucceeded",
    type: {
      name: "Boolean"
    }
  }
};

export const artifactSourceInfo: OperationParameter = {
  parameterPath: ["options", "artifactSourceInfo"],
  mapper: ArtifactSourceMapper
};

export const artifactSourceName: OperationURLParameter = {
  parameterPath: "artifactSourceName",
  mapper: {
    serializedName: "artifactSourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};
