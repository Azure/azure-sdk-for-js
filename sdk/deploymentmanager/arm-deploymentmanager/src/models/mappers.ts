/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ServiceTopologyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceTopologyProperties",
    modelProperties: {
      artifactSourceId: {
        serializedName: "artifactSourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      }
    }
  }
};

export const ServiceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceProperties",
    modelProperties: {
      targetLocation: {
        serializedName: "targetLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      targetSubscriptionId: {
        serializedName: "targetSubscriptionId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceUnitProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceUnitProperties",
    modelProperties: {
      targetResourceGroup: {
        serializedName: "targetResourceGroup",
        required: true,
        type: {
          name: "String"
        }
      },
      deploymentMode: {
        serializedName: "deploymentMode",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Incremental", "Complete"]
        }
      },
      artifacts: {
        serializedName: "artifacts",
        type: {
          name: "Composite",
          className: "ServiceUnitArtifacts"
        }
      }
    }
  }
};

export const ServiceUnitArtifacts: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceUnitArtifacts",
    modelProperties: {
      templateUri: {
        serializedName: "templateUri",
        type: {
          name: "String"
        }
      },
      parametersUri: {
        serializedName: "parametersUri",
        type: {
          name: "String"
        }
      },
      templateArtifactSourceRelativePath: {
        serializedName: "templateArtifactSourceRelativePath",
        type: {
          name: "String"
        }
      },
      parametersArtifactSourceRelativePath: {
        serializedName: "parametersArtifactSourceRelativePath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StepProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StepProperties",
    uberParent: "StepProperties",
    polymorphicDiscriminator: {
      serializedName: "stepType",
      clientName: "stepType"
    },
    modelProperties: {
      stepType: {
        serializedName: "stepType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Wait", "HealthCheck"]
        }
      }
    }
  }
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      identityIds: {
        serializedName: "identityIds",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RolloutRequestProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RolloutRequestProperties",
    modelProperties: {
      buildVersion: {
        serializedName: "buildVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      artifactSourceId: {
        serializedName: "artifactSourceId",
        type: {
          name: "String"
        }
      },
      targetServiceTopologyId: {
        serializedName: "targetServiceTopologyId",
        required: true,
        type: {
          name: "String"
        }
      },
      stepGroups: {
        serializedName: "stepGroups",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StepGroup"
            }
          }
        }
      }
    }
  }
};

export const StepGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StepGroup",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      dependsOnStepGroups: {
        serializedName: "dependsOnStepGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      preDeploymentSteps: {
        serializedName: "preDeploymentSteps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrePostStep"
            }
          }
        }
      },
      deploymentTargetId: {
        serializedName: "deploymentTargetId",
        required: true,
        type: {
          name: "String"
        }
      },
      postDeploymentSteps: {
        serializedName: "postDeploymentSteps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrePostStep"
            }
          }
        }
      }
    }
  }
};

export const PrePostStep: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrePostStep",
    modelProperties: {
      stepId: {
        serializedName: "stepId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RolloutPropertiesAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RolloutPropertiesAutoGenerated",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      totalRetryAttempts: {
        serializedName: "totalRetryAttempts",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      operationInfo: {
        serializedName: "operationInfo",
        type: {
          name: "Composite",
          className: "RolloutOperationInfo"
        }
      },
      services: {
        serializedName: "services",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Service"
            }
          }
        }
      }
    }
  }
};

export const RolloutOperationInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RolloutOperationInfo",
    modelProperties: {
      retryAttempt: {
        serializedName: "retryAttempt",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      skipSucceededOnRetry: {
        serializedName: "skipSucceededOnRetry",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const RolloutStep: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RolloutStep",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stepGroup: {
        serializedName: "stepGroup",
        type: {
          name: "String"
        }
      },
      operationInfo: {
        serializedName: "operationInfo",
        type: {
          name: "Composite",
          className: "StepOperationInfo"
        }
      },
      resourceOperations: {
        serializedName: "resourceOperations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceOperation"
            }
          }
        }
      },
      messages: {
        serializedName: "messages",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Message"
            }
          }
        }
      }
    }
  }
};

export const StepOperationInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StepOperationInfo",
    modelProperties: {
      deploymentName: {
        serializedName: "deploymentName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      correlationId: {
        serializedName: "correlationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const ResourceOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceOperation",
    modelProperties: {
      resourceName: {
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      },
      operationId: {
        serializedName: "operationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusMessage: {
        serializedName: "statusMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusCode: {
        serializedName: "statusCode",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Message: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Message",
    modelProperties: {
      timeStamp: {
        serializedName: "timeStamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArtifactSourcePropertiesAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactSourcePropertiesAutoGenerated",
    modelProperties: {
      sourceType: {
        serializedName: "sourceType",
        required: true,
        type: {
          name: "String"
        }
      },
      artifactRoot: {
        serializedName: "artifactRoot",
        type: {
          name: "String"
        }
      },
      authentication: {
        serializedName: "authentication",
        type: {
          name: "Composite",
          className: "Authentication"
        }
      }
    }
  }
};

export const Authentication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Authentication",
    uberParent: "Authentication",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "Operation"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDetail"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const OperationDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDetail",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthCheckStepAttributes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthCheckStepAttributes",
    uberParent: "HealthCheckStepAttributes",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      waitDuration: {
        serializedName: "waitDuration",
        type: {
          name: "String"
        }
      },
      maxElasticDuration: {
        serializedName: "maxElasticDuration",
        type: {
          name: "String"
        }
      },
      healthyStateDuration: {
        serializedName: "healthyStateDuration",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestHealthCheck: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestHealthCheck",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      request: {
        serializedName: "request",
        type: {
          name: "Composite",
          className: "RestRequest"
        }
      },
      response: {
        serializedName: "response",
        type: {
          name: "Composite",
          className: "RestResponse"
        }
      }
    }
  }
};

export const RestRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestRequest",
    modelProperties: {
      method: {
        serializedName: "method",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["GET", "POST"]
        }
      },
      uri: {
        serializedName: "uri",
        required: true,
        type: {
          name: "String"
        }
      },
      authentication: {
        serializedName: "authentication",
        type: {
          name: "Composite",
          className: "RestRequestAuthentication"
        }
      }
    }
  }
};

export const RestRequestAuthentication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestRequestAuthentication",
    uberParent: "RestRequestAuthentication",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["ApiKey", "RolloutIdentity"]
        }
      }
    }
  }
};

export const RestResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestResponse",
    modelProperties: {
      successStatusCodes: {
        serializedName: "successStatusCodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      regex: {
        serializedName: "regex",
        type: {
          name: "Composite",
          className: "RestResponseRegex"
        }
      }
    }
  }
};

export const RestResponseRegex: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestResponseRegex",
    modelProperties: {
      matches: {
        serializedName: "matches",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      matchQuantifier: {
        serializedName: "matchQuantifier",
        type: {
          name: "Enum",
          allowedValues: ["All", "Any"]
        }
      }
    }
  }
};

export const WaitStepAttributes: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WaitStepAttributes",
    modelProperties: {
      duration: {
        serializedName: "duration",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceTopologyResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceTopologyResourceProperties",
    modelProperties: {
      ...ServiceTopologyProperties.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResourceProperties",
    modelProperties: {
      ...ServiceProperties.type.modelProperties
    }
  }
};

export const Service: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Service",
    modelProperties: {
      ...ServiceProperties.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      serviceUnits: {
        serializedName: "serviceUnits",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceUnit"
            }
          }
        }
      }
    }
  }
};

export const ServiceUnitResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceUnitResourceProperties",
    modelProperties: {
      ...ServiceUnitProperties.type.modelProperties
    }
  }
};

export const ServiceUnit: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceUnit",
    modelProperties: {
      ...ServiceUnitProperties.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      steps: {
        serializedName: "steps",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RolloutStep"
            }
          }
        }
      }
    }
  }
};

export const HealthCheckStepProperties: coreClient.CompositeMapper = {
  serializedName: "HealthCheck",
  type: {
    name: "Composite",
    className: "HealthCheckStepProperties",
    uberParent: "StepProperties",
    polymorphicDiscriminator: StepProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...StepProperties.type.modelProperties,
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "HealthCheckStepAttributes"
        }
      }
    }
  }
};

export const WaitStepProperties: coreClient.CompositeMapper = {
  serializedName: "Wait",
  type: {
    name: "Composite",
    className: "WaitStepProperties",
    uberParent: "StepProperties",
    polymorphicDiscriminator: StepProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...StepProperties.type.modelProperties,
      attributes: {
        serializedName: "attributes",
        type: {
          name: "Composite",
          className: "WaitStepAttributes"
        }
      }
    }
  }
};

export const RolloutProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RolloutProperties",
    modelProperties: {
      ...RolloutRequestProperties.type.modelProperties,
      ...RolloutPropertiesAutoGenerated.type.modelProperties
    }
  }
};

export const ArtifactSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactSourceProperties",
    modelProperties: {
      ...ArtifactSourcePropertiesAutoGenerated.type.modelProperties
    }
  }
};

export const SasAuthentication: coreClient.CompositeMapper = {
  serializedName: "Sas",
  type: {
    name: "Composite",
    className: "SasAuthentication",
    uberParent: "Authentication",
    polymorphicDiscriminator: Authentication.type.polymorphicDiscriminator,
    modelProperties: {
      ...Authentication.type.modelProperties,
      sasUri: {
        serializedName: "properties.sasUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestHealthCheckStepAttributes: coreClient.CompositeMapper = {
  serializedName: "REST",
  type: {
    name: "Composite",
    className: "RestHealthCheckStepAttributes",
    uberParent: "HealthCheckStepAttributes",
    polymorphicDiscriminator:
      HealthCheckStepAttributes.type.polymorphicDiscriminator,
    modelProperties: {
      ...HealthCheckStepAttributes.type.modelProperties,
      healthChecks: {
        serializedName: "properties.healthChecks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestHealthCheck"
            }
          }
        }
      }
    }
  }
};

export const RolloutIdentityAuthentication: coreClient.CompositeMapper = {
  serializedName: "RolloutIdentity",
  type: {
    name: "Composite",
    className: "RolloutIdentityAuthentication",
    uberParent: "RestRequestAuthentication",
    polymorphicDiscriminator:
      RestRequestAuthentication.type.polymorphicDiscriminator,
    modelProperties: {
      ...RestRequestAuthentication.type.modelProperties
    }
  }
};

export const ApiKeyAuthentication: coreClient.CompositeMapper = {
  serializedName: "ApiKey",
  type: {
    name: "Composite",
    className: "ApiKeyAuthentication",
    uberParent: "RestRequestAuthentication",
    polymorphicDiscriminator:
      RestRequestAuthentication.type.polymorphicDiscriminator,
    modelProperties: {
      ...RestRequestAuthentication.type.modelProperties,
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      in: {
        serializedName: "in",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Query", "Header"]
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceTopologyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceTopologyResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      artifactSourceId: {
        serializedName: "properties.artifactSourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      targetLocation: {
        serializedName: "properties.targetLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      targetSubscriptionId: {
        serializedName: "properties.targetSubscriptionId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceUnitResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceUnitResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      targetResourceGroup: {
        serializedName: "properties.targetResourceGroup",
        required: true,
        type: {
          name: "String"
        }
      },
      deploymentMode: {
        serializedName: "properties.deploymentMode",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Incremental", "Complete"]
        }
      },
      artifacts: {
        serializedName: "properties.artifacts",
        type: {
          name: "Composite",
          className: "ServiceUnitArtifacts"
        }
      }
    }
  }
};

export const StepResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StepResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "StepProperties"
        }
      }
    }
  }
};

export const RolloutRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RolloutRequest",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      buildVersion: {
        serializedName: "properties.buildVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      artifactSourceId: {
        serializedName: "properties.artifactSourceId",
        type: {
          name: "String"
        }
      },
      targetServiceTopologyId: {
        serializedName: "properties.targetServiceTopologyId",
        required: true,
        type: {
          name: "String"
        }
      },
      stepGroups: {
        serializedName: "properties.stepGroups",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StepGroup"
            }
          }
        }
      }
    }
  }
};

export const Rollout: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Rollout",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      buildVersion: {
        serializedName: "properties.buildVersion",
        type: {
          name: "String"
        }
      },
      artifactSourceId: {
        serializedName: "properties.artifactSourceId",
        type: {
          name: "String"
        }
      },
      targetServiceTopologyId: {
        serializedName: "properties.targetServiceTopologyId",
        type: {
          name: "String"
        }
      },
      stepGroups: {
        serializedName: "properties.stepGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StepGroup"
            }
          }
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      totalRetryAttempts: {
        serializedName: "properties.totalRetryAttempts",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      operationInfo: {
        serializedName: "properties.operationInfo",
        type: {
          name: "Composite",
          className: "RolloutOperationInfo"
        }
      },
      services: {
        serializedName: "properties.services",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Service"
            }
          }
        }
      }
    }
  }
};

export const ArtifactSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArtifactSource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sourceType: {
        serializedName: "properties.sourceType",
        type: {
          name: "String"
        }
      },
      artifactRoot: {
        serializedName: "properties.artifactRoot",
        type: {
          name: "String"
        }
      },
      authentication: {
        serializedName: "properties.authentication",
        type: {
          name: "Composite",
          className: "Authentication"
        }
      }
    }
  }
};

export const ServiceUnitsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceUnitsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RolloutsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RolloutsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  StepProperties: StepProperties,
  Authentication: Authentication,
  HealthCheckStepAttributes: HealthCheckStepAttributes,
  RestRequestAuthentication: RestRequestAuthentication,
  "StepProperties.HealthCheck": HealthCheckStepProperties,
  "StepProperties.Wait": WaitStepProperties,
  "Authentication.Sas": SasAuthentication,
  "HealthCheckStepAttributes.REST": RestHealthCheckStepAttributes,
  "RestRequestAuthentication.RolloutIdentity": RolloutIdentityAuthentication,
  "RestRequestAuthentication.ApiKey": ApiKeyAuthentication
};
