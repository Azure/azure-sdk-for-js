/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Volume,
  VolumesListByVolumeGroupOptionalParams,
  VolumesCreateOptionalParams,
  VolumesCreateResponse,
  VolumeUpdate,
  VolumesUpdateOptionalParams,
  VolumesUpdateResponse,
  VolumesDeleteOptionalParams,
  VolumesGetOptionalParams,
  VolumesGetResponse,
  VolumeNameList,
  VolumesPreBackupOptionalParams,
  VolumesPreBackupResponse,
  DiskSnapshotList,
  VolumesPreRestoreOptionalParams,
  VolumesPreRestoreResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Volumes. */
export interface Volumes {
  /**
   * List Volumes in a VolumeGroup.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param options The options parameters.
   */
  listByVolumeGroup(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    options?: VolumesListByVolumeGroupOptionalParams,
  ): PagedAsyncIterableIterator<Volume>;
  /**
   * Create a Volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param volumeName The name of the Volume.
   * @param parameters Volume object.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    volumeName: string,
    parameters: Volume,
    options?: VolumesCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<VolumesCreateResponse>,
      VolumesCreateResponse
    >
  >;
  /**
   * Create a Volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param volumeName The name of the Volume.
   * @param parameters Volume object.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    volumeName: string,
    parameters: Volume,
    options?: VolumesCreateOptionalParams,
  ): Promise<VolumesCreateResponse>;
  /**
   * Update an Volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param volumeName The name of the Volume.
   * @param parameters Volume object.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    volumeName: string,
    parameters: VolumeUpdate,
    options?: VolumesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<VolumesUpdateResponse>,
      VolumesUpdateResponse
    >
  >;
  /**
   * Update an Volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param volumeName The name of the Volume.
   * @param parameters Volume object.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    volumeName: string,
    parameters: VolumeUpdate,
    options?: VolumesUpdateOptionalParams,
  ): Promise<VolumesUpdateResponse>;
  /**
   * Delete an Volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param volumeName The name of the Volume.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    volumeName: string,
    options?: VolumesDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete an Volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param volumeName The name of the Volume.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    volumeName: string,
    options?: VolumesDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Get an Volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param volumeName The name of the Volume.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    volumeName: string,
    options?: VolumesGetOptionalParams,
  ): Promise<VolumesGetResponse>;
  /**
   * Validate whether a disk snapshot backup can be taken for list of volumes.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param parameters Volume Name List (currently only one volume name in the list is supported. Server
   *                   would return error if list is bigger)
   * @param options The options parameters.
   */
  beginPreBackup(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    parameters: VolumeNameList,
    options?: VolumesPreBackupOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<VolumesPreBackupResponse>,
      VolumesPreBackupResponse
    >
  >;
  /**
   * Validate whether a disk snapshot backup can be taken for list of volumes.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param parameters Volume Name List (currently only one volume name in the list is supported. Server
   *                   would return error if list is bigger)
   * @param options The options parameters.
   */
  beginPreBackupAndWait(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    parameters: VolumeNameList,
    options?: VolumesPreBackupOptionalParams,
  ): Promise<VolumesPreBackupResponse>;
  /**
   * Validate whether a list of backed up disk snapshots can be restored into ElasticSan volumes.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param parameters Disk Snapshot List (currently only one Disk Snapshot in the list is supported and
   *                   that the Disk Snapshot must be in same azure region as the ElasticSan. Server would return error if
   *                   list is bigger)
   * @param options The options parameters.
   */
  beginPreRestore(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    parameters: DiskSnapshotList,
    options?: VolumesPreRestoreOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<VolumesPreRestoreResponse>,
      VolumesPreRestoreResponse
    >
  >;
  /**
   * Validate whether a list of backed up disk snapshots can be restored into ElasticSan volumes.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param parameters Disk Snapshot List (currently only one Disk Snapshot in the list is supported and
   *                   that the Disk Snapshot must be in same azure region as the ElasticSan. Server would return error if
   *                   list is bigger)
   * @param options The options parameters.
   */
  beginPreRestoreAndWait(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    parameters: DiskSnapshotList,
    options?: VolumesPreRestoreOptionalParams,
  ): Promise<VolumesPreRestoreResponse>;
}
