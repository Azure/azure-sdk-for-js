/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Volume,
  VolumesListByVolumeGroupOptionalParams,
  VolumesCreateOptionalParams,
  VolumesCreateResponse,
  VolumeUpdate,
  VolumesUpdateOptionalParams,
  VolumesUpdateResponse,
  VolumesDeleteOptionalParams,
  VolumesGetOptionalParams,
  VolumesGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Volumes. */
export interface Volumes {
  /**
   * List Volumes in a VolumeGroup.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param options The options parameters.
   */
  listByVolumeGroup(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    options?: VolumesListByVolumeGroupOptionalParams
  ): PagedAsyncIterableIterator<Volume>;
  /**
   * Create a Volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param volumeName The name of the Volume.
   * @param parameters Volume object.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    volumeName: string,
    parameters: Volume,
    options?: VolumesCreateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<VolumesCreateResponse>, VolumesCreateResponse>
  >;
  /**
   * Create a Volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param volumeName The name of the Volume.
   * @param parameters Volume object.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    volumeName: string,
    parameters: Volume,
    options?: VolumesCreateOptionalParams
  ): Promise<VolumesCreateResponse>;
  /**
   * Update an Volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param volumeName The name of the Volume.
   * @param parameters Volume object.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    volumeName: string,
    parameters: VolumeUpdate,
    options?: VolumesUpdateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<VolumesUpdateResponse>, VolumesUpdateResponse>
  >;
  /**
   * Update an Volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param volumeName The name of the Volume.
   * @param parameters Volume object.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    volumeName: string,
    parameters: VolumeUpdate,
    options?: VolumesUpdateOptionalParams
  ): Promise<VolumesUpdateResponse>;
  /**
   * Delete an Volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param volumeName The name of the Volume.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    volumeName: string,
    options?: VolumesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Delete an Volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param volumeName The name of the Volume.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    volumeName: string,
    options?: VolumesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Get an Volume.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param elasticSanName The name of the ElasticSan.
   * @param volumeGroupName The name of the VolumeGroup.
   * @param volumeName The name of the Volume.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    elasticSanName: string,
    volumeGroupName: string,
    volumeName: string,
    options?: VolumesGetOptionalParams
  ): Promise<VolumesGetResponse>;
}
