/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/signalRMappers";
import * as Parameters from "../models/parameters";
import { SignalRManagementClientContext } from "../signalRManagementClientContext";

/** Class representing a SignalR. */
export class SignalR {
  private readonly client: SignalRManagementClientContext;

  /**
   * Create a SignalR.
   * @param {SignalRManagementClientContext} client Reference to the service client.
   */
  constructor(client: SignalRManagementClientContext) {
    this.client = client;
  }

  /**
   * Checks that the resource name is valid and is not already in use.
   * @param location the region
   * @param parameters Parameters supplied to the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SignalRCheckNameAvailabilityResponse>
   */
  checkNameAvailability(
    location: string,
    parameters: Models.NameAvailabilityParameters,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SignalRCheckNameAvailabilityResponse>;
  /**
   * @param location the region
   * @param parameters Parameters supplied to the operation.
   * @param callback The callback
   */
  checkNameAvailability(
    location: string,
    parameters: Models.NameAvailabilityParameters,
    callback: msRest.ServiceCallback<Models.NameAvailability>
  ): void;
  /**
   * @param location the region
   * @param parameters Parameters supplied to the operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(
    location: string,
    parameters: Models.NameAvailabilityParameters,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.NameAvailability>
  ): void;
  checkNameAvailability(
    location: string,
    parameters: Models.NameAvailabilityParameters,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NameAvailability>,
    callback?: msRest.ServiceCallback<Models.NameAvailability>
  ): Promise<Models.SignalRCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        parameters,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback
    ) as Promise<Models.SignalRCheckNameAvailabilityResponse>;
  }

  /**
   * Handles requests to list all resources in a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.SignalRListBySubscriptionResponse>
   */
  listBySubscription(
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SignalRListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.SignalRResourceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SignalRResourceList>
  ): void;
  listBySubscription(
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SignalRResourceList>,
    callback?: msRest.ServiceCallback<Models.SignalRResourceList>
  ): Promise<Models.SignalRListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback
    ) as Promise<Models.SignalRListBySubscriptionResponse>;
  }

  /**
   * Handles requests to list all resources in a resource group.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param [options] The optional parameters
   * @returns Promise<Models.SignalRListByResourceGroupResponse>
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SignalRListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param callback The callback
   */
  listByResourceGroup(
    resourceGroupName: string,
    callback: msRest.ServiceCallback<Models.SignalRResourceList>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(
    resourceGroupName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SignalRResourceList>
  ): void;
  listByResourceGroup(
    resourceGroupName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SignalRResourceList>,
    callback?: msRest.ServiceCallback<Models.SignalRResourceList>
  ): Promise<Models.SignalRListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback
    ) as Promise<Models.SignalRListByResourceGroupResponse>;
  }

  /**
   * Get the resource and its properties.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.SignalRGetResponse>
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SignalRGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    callback: msRest.ServiceCallback<Models.SignalRResource>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SignalRResource>
  ): void;
  get(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SignalRResource>,
    callback?: msRest.ServiceCallback<Models.SignalRResource>
  ): Promise<Models.SignalRGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      getOperationSpec,
      callback
    ) as Promise<Models.SignalRGetResponse>;
  }

  /**
   * Create or update a resource.
   * @param parameters Parameters for the create or update operation
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.SignalRCreateOrUpdateResponse>
   */
  createOrUpdate(
    parameters: Models.SignalRResource,
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SignalRCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(
      parameters,
      resourceGroupName,
      resourceName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SignalRCreateOrUpdateResponse
    >;
  }

  /**
   * Operation to delete a resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName, resourceName, options).then((lroPoller) =>
      lroPoller.pollUntilFinished()
    );
  }

  /**
   * Operation to update an exiting resource.
   * @param parameters Parameters for the update operation
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.SignalRUpdateResponse>
   */
  update(
    parameters: Models.SignalRResource,
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SignalRUpdateResponse> {
    return this.beginUpdate(
      parameters,
      resourceGroupName,
      resourceName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<Models.SignalRUpdateResponse>;
  }

  /**
   * Get the access keys of the resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.SignalRListKeysResponse>
   */
  listKeys(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SignalRListKeysResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param callback The callback
   */
  listKeys(
    resourceGroupName: string,
    resourceName: string,
    callback: msRest.ServiceCallback<Models.SignalRKeys>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  listKeys(
    resourceGroupName: string,
    resourceName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SignalRKeys>
  ): void;
  listKeys(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SignalRKeys>,
    callback?: msRest.ServiceCallback<Models.SignalRKeys>
  ): Promise<Models.SignalRListKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      listKeysOperationSpec,
      callback
    ) as Promise<Models.SignalRListKeysResponse>;
  }

  /**
   * Regenerate the access key for the resource. PrimaryKey and SecondaryKey cannot be regenerated at
   * the same time.
   * @param parameters Parameter that describes the Regenerate Key Operation.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.SignalRRegenerateKeyResponse>
   */
  regenerateKey(
    parameters: Models.RegenerateKeyParameters,
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SignalRRegenerateKeyResponse> {
    return this.beginRegenerateKey(
      parameters,
      resourceGroupName,
      resourceName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.SignalRRegenerateKeyResponse
    >;
  }

  /**
   * Operation to restart a resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  restart(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginRestart(resourceGroupName, resourceName, options).then((lroPoller) =>
      lroPoller.pollUntilFinished()
    );
  }

  /**
   * Create or update a resource.
   * @param parameters Parameters for the create or update operation
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(
    parameters: Models.SignalRResource,
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        parameters,
        resourceGroupName,
        resourceName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options
    );
  }

  /**
   * Operation to delete a resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options
    );
  }

  /**
   * Operation to update an exiting resource.
   * @param parameters Parameters for the update operation
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(
    parameters: Models.SignalRResource,
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        parameters,
        resourceGroupName,
        resourceName,
        options
      },
      beginUpdateOperationSpec,
      options
    );
  }

  /**
   * Regenerate the access key for the resource. PrimaryKey and SecondaryKey cannot be regenerated at
   * the same time.
   * @param parameters Parameter that describes the Regenerate Key Operation.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRegenerateKey(
    parameters: Models.RegenerateKeyParameters,
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        parameters,
        resourceGroupName,
        resourceName,
        options
      },
      beginRegenerateKeyOperationSpec,
      options
    );
  }

  /**
   * Operation to restart a resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRestart(
    resourceGroupName: string,
    resourceName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        resourceName,
        options
      },
      beginRestartOperationSpec,
      options
    );
  }

  /**
   * Handles requests to list all resources in a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SignalRListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SignalRListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.SignalRResourceList>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SignalRResourceList>
  ): void;
  listBySubscriptionNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SignalRResourceList>,
    callback?: msRest.ServiceCallback<Models.SignalRResourceList>
  ): Promise<Models.SignalRListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback
    ) as Promise<Models.SignalRListBySubscriptionNextResponse>;
  }

  /**
   * Handles requests to list all resources in a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SignalRListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.SignalRListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.SignalRResourceList>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.SignalRResourceList>
  ): void;
  listByResourceGroupNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SignalRResourceList>,
    callback?: msRest.ServiceCallback<Models.SignalRResourceList>
  ): Promise<Models.SignalRListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback
    ) as Promise<Models.SignalRListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/providers/Microsoft.SignalRService/locations/{location}/checkNameAvailability",
  urlParameters: [Parameters.location, Parameters.subscriptionId],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NameAvailabilityParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NameAvailability
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.SignalRService/signalR",
  urlParameters: [Parameters.subscriptionId],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SignalRResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SignalRResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SignalRResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/listKeys",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SignalRKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SignalRResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SignalRResource
    },
    201: {
      bodyMapper: Mappers.SignalRResource
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.SignalRResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SignalRResource
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginRegenerateKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/regenerateKey",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.RegenerateKeyParameters,
      required: true
    }
  },
  responses: {
    202: {
      bodyMapper: Mappers.SignalRKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginRestartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/restart",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.resourceName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SignalRResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.SignalRResourceList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
