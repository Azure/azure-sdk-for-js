/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/signalRPrivateEndpointConnectionsMappers";
import * as Parameters from "../models/parameters";
import { SignalRManagementClientContext } from "../signalRManagementClientContext";

/** Class representing a SignalRPrivateEndpointConnections. */
export class SignalRPrivateEndpointConnections {
  private readonly client: SignalRManagementClientContext;

  /**
   * Create a SignalRPrivateEndpointConnections.
   * @param {SignalRManagementClientContext} client Reference to the service client.
   */
  constructor(client: SignalRManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the specified private endpoint connection associated with a SignalR resource.
   * @param privateEndpointConnectionName The name of the private endpoint connection associated with
   * the SignalR resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the SignalR resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.SignalRPrivateEndpointConnectionsGetResponse>
   */
  get(privateEndpointConnectionName: string, resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.SignalRPrivateEndpointConnectionsGetResponse>;
  /**
   * @param privateEndpointConnectionName The name of the private endpoint connection associated with
   * the SignalR resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the SignalR resource.
   * @param callback The callback
   */
  get(privateEndpointConnectionName: string, resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<Models.PrivateEndpointConnection>): void;
  /**
   * @param privateEndpointConnectionName The name of the private endpoint connection associated with
   * the SignalR resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the SignalR resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(privateEndpointConnectionName: string, resourceGroupName: string, resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateEndpointConnection>): void;
  get(privateEndpointConnectionName: string, resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateEndpointConnection>, callback?: msRest.ServiceCallback<Models.PrivateEndpointConnection>): Promise<Models.SignalRPrivateEndpointConnectionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        privateEndpointConnectionName,
        resourceGroupName,
        resourceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SignalRPrivateEndpointConnectionsGetResponse>;
  }

  /**
   * Update the state of specified private endpoint connection associated with a SignalR resource.
   * @param privateEndpointConnectionName The name of the private endpoint connection associated with
   * the SignalR resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the SignalR resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.SignalRPrivateEndpointConnectionsUpdateResponse>
   */
  update(privateEndpointConnectionName: string, resourceGroupName: string, resourceName: string, options?: Models.SignalRPrivateEndpointConnectionsUpdateOptionalParams): Promise<Models.SignalRPrivateEndpointConnectionsUpdateResponse>;
  /**
   * @param privateEndpointConnectionName The name of the private endpoint connection associated with
   * the SignalR resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the SignalR resource.
   * @param callback The callback
   */
  update(privateEndpointConnectionName: string, resourceGroupName: string, resourceName: string, callback: msRest.ServiceCallback<Models.PrivateEndpointConnection>): void;
  /**
   * @param privateEndpointConnectionName The name of the private endpoint connection associated with
   * the SignalR resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the SignalR resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(privateEndpointConnectionName: string, resourceGroupName: string, resourceName: string, options: Models.SignalRPrivateEndpointConnectionsUpdateOptionalParams, callback: msRest.ServiceCallback<Models.PrivateEndpointConnection>): void;
  update(privateEndpointConnectionName: string, resourceGroupName: string, resourceName: string, options?: Models.SignalRPrivateEndpointConnectionsUpdateOptionalParams | msRest.ServiceCallback<Models.PrivateEndpointConnection>, callback?: msRest.ServiceCallback<Models.PrivateEndpointConnection>): Promise<Models.SignalRPrivateEndpointConnectionsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        privateEndpointConnectionName,
        resourceGroupName,
        resourceName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.SignalRPrivateEndpointConnectionsUpdateResponse>;
  }

  /**
   * Delete the specified private endpoint connection associated with a SignalR resource.
   * @param privateEndpointConnectionName The name of the private endpoint connection associated with
   * the SignalR resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the SignalR resource.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(privateEndpointConnectionName: string, resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(privateEndpointConnectionName,resourceGroupName,resourceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Delete the specified private endpoint connection associated with a SignalR resource.
   * @param privateEndpointConnectionName The name of the private endpoint connection associated with
   * the SignalR resource.
   * @param resourceGroupName The name of the resource group that contains the resource. You can
   * obtain this value from the Azure Resource Manager API or the portal.
   * @param resourceName The name of the SignalR resource.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(privateEndpointConnectionName: string, resourceGroupName: string, resourceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        privateEndpointConnectionName,
        resourceGroupName,
        resourceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
  urlParameters: [
    Parameters.privateEndpointConnectionName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
  urlParameters: [
    Parameters.privateEndpointConnectionName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: Mappers.PrivateEndpointConnection
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateEndpointConnection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SignalRService/signalR/{resourceName}/privateEndpointConnections/{privateEndpointConnectionName}",
  urlParameters: [
    Parameters.privateEndpointConnectionName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
