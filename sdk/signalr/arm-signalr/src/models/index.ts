/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Specifications of the Dimension of metrics.
 */
export interface Dimension {
  /**
   * The public facing name of the dimension.
   */
  name?: string;
  /**
   * Localized friendly display name of the dimension.
   */
  displayName?: string;
  /**
   * Name of the dimension as it appears in MDM.
   */
  internalName?: string;
  /**
   * A Boolean flag indicating whether this dimension should be included for the shoebox export
   * scenario.
   */
  toBeExportedForShoebox?: boolean;
}

/**
 * Specifications of the Logs for Azure Monitoring.
 */
export interface LogSpecification {
  /**
   * Name of the log.
   */
  name?: string;
  /**
   * Localized friendly display name of the log.
   */
  displayName?: string;
}

/**
 * Properties of user assigned identity.
 */
export interface UserAssignedIdentityProperty {
  /**
   * Get the principal id for the user assigned identity
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * Get the client id for the user assigned identity
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly clientId?: string;
}

/**
 * A class represent managed identities used for request and response
 */
export interface ManagedIdentity {
  /**
   * Represent the identity type: systemAssigned, userAssigned, None. Possible values include:
   * 'None', 'SystemAssigned', 'UserAssigned'
   */
  type?: ManagedIdentityType;
  /**
   * Get or set the user assigned identities
   */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentityProperty };
  /**
   * Get the principal id for the system assigned identity.
   * Only be used in response.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * Get the tenant id for the system assigned identity.
   * Only be used in response
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
}

/**
 * Managed identity settings for upstream.
 */
export interface ManagedIdentitySettings {
  /**
   * The Resource indicating the App ID URI of the target resource.
   * It also appears in the aud (audience) claim of the issued token.
   */
  resource?: string;
}

/**
 * Specifications of the Metrics for Azure Monitoring.
 */
export interface MetricSpecification {
  /**
   * Name of the metric.
   */
  name?: string;
  /**
   * Localized friendly display name of the metric.
   */
  displayName?: string;
  /**
   * Localized friendly description of the metric.
   */
  displayDescription?: string;
  /**
   * The unit that makes sense for the metric.
   */
  unit?: string;
  /**
   * Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count.
   */
  aggregationType?: string;
  /**
   * Optional. If set to true, then zero will be returned for time duration where no metric is
   * emitted/published.
   * Ex. a metric that returns the number of times a particular error code was emitted. The error
   * code may not appear
   * often, instead of the RP publishing 0, Shoebox can auto fill in 0s for time periods where
   * nothing was emitted.
   */
  fillGapWithZero?: string;
  /**
   * The name of the metric category that the metric belongs to. A metric can only belong to a
   * single category.
   */
  category?: string;
  /**
   * The dimensions of the metrics.
   */
  dimensions?: Dimension[];
}

/**
 * Result of the request to check name availability. It contains a flag and possible reason of
 * failure.
 */
export interface NameAvailability {
  /**
   * Indicates whether the name is available or not.
   */
  nameAvailable?: boolean;
  /**
   * The reason of the availability. Required if name is not available.
   */
  reason?: string;
  /**
   * The message of the operation.
   */
  message?: string;
}

/**
 * Data POST-ed to the nameAvailability action
 */
export interface NameAvailabilityParameters {
  /**
   * The resource type. Can be "Microsoft.SignalRService/SignalR" or
   * "Microsoft.SignalRService/webPubSub"
   */
  type: string;
  /**
   * The resource name to validate. e.g."my-resource-name"
   */
  name: string;
}

/**
 * Network ACL
 */
export interface NetworkACL {
  /**
   * Allowed request types. The value can be one or more of: ClientConnection, ServerConnection,
   * RESTAPI.
   */
  allow?: SignalRRequestType[];
  /**
   * Denied request types. The value can be one or more of: ClientConnection, ServerConnection,
   * RESTAPI.
   */
  deny?: SignalRRequestType[];
}

/**
 * The object that describes a operation.
 */
export interface OperationDisplay {
  /**
   * Friendly name of the resource provider
   */
  provider?: string;
  /**
   * Resource type on which the operation is performed.
   */
  resource?: string;
  /**
   * The localized friendly name for the operation.
   */
  operation?: string;
  /**
   * The localized friendly description for the operation
   */
  description?: string;
}

/**
 * An object that describes a specification.
 */
export interface ServiceSpecification {
  /**
   * Specifications of the Metrics for Azure Monitoring.
   */
  metricSpecifications?: MetricSpecification[];
  /**
   * Specifications of the Logs for Azure Monitoring.
   */
  logSpecifications?: LogSpecification[];
}

/**
 * Extra Operation properties.
 */
export interface OperationProperties {
  /**
   * The service specifications.
   */
  serviceSpecification?: ServiceSpecification;
}

/**
 * REST API operation supported by resource provider.
 */
export interface Operation {
  /**
   * Name of the operation with format: {provider}/{resource}/{operation}
   */
  name?: string;
  /**
   * If the operation is a data action. (for data plane rbac)
   */
  isDataAction?: boolean;
  /**
   * The object that describes the operation.
   */
  display?: OperationDisplay;
  /**
   * Optional. The intended executor of the operation; governs the display of the operation in the
   * RBAC UX and the audit logs UX.
   */
  origin?: string;
  /**
   * Extra properties for the operation.
   */
  properties?: OperationProperties;
}

/**
 * Private endpoint
 */
export interface PrivateEndpoint {
  /**
   * Full qualified Id of the private endpoint
   */
  id?: string;
}

/**
 * ACL for a private endpoint
 */
export interface PrivateEndpointACL extends NetworkACL {
  /**
   * Name of the private endpoint connection
   */
  name: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemData {
  /**
   * The identity that created the resource.
   */
  createdBy?: string;
  /**
   * The type of identity that created the resource. Possible values include: 'User',
   * 'Application', 'ManagedIdentity', 'Key'
   */
  createdByType?: CreatedByType;
  /**
   * The timestamp of resource creation (UTC).
   */
  createdAt?: Date;
  /**
   * The identity that last modified the resource.
   */
  lastModifiedBy?: string;
  /**
   * The type of identity that last modified the resource. Possible values include: 'User',
   * 'Application', 'ManagedIdentity', 'Key'
   */
  lastModifiedByType?: CreatedByType;
  /**
   * The timestamp of resource last modification (UTC)
   */
  lastModifiedAt?: Date;
}

/**
 * Connection state of the private endpoint connection
 */
export interface PrivateLinkServiceConnectionState {
  /**
   * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the
   * service. Possible values include: 'Pending', 'Approved', 'Rejected', 'Disconnected'
   */
  status?: PrivateLinkServiceConnectionStatus;
  /**
   * The reason for approval/rejection of the connection.
   */
  description?: string;
  /**
   * A message indicating if changes on the service provider require any updates on the consumer.
   */
  actionsRequired?: string;
}

/**
 * The core properties of ARM resources.
 */
export interface Resource extends BaseResource {
  /**
   * Fully qualified resource Id for the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource - e.g. "Microsoft.SignalRService/SignalR"
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The resource model definition for a ARM proxy resource. It will have everything other than
 * required location and tags
 */
export interface ProxyResource extends Resource {}

/**
 * A private endpoint connection to an azure resource
 */
export interface PrivateEndpointConnection extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemData?: SystemData;
  /**
   * Provisioning state of the private endpoint connection. Possible values include: 'Unknown',
   * 'Succeeded', 'Failed', 'Canceled', 'Running', 'Creating', 'Updating', 'Deleting', 'Moving'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Private endpoint associated with the private endpoint connection
   */
  privateEndpoint?: PrivateEndpoint;
  /**
   * Connection state
   */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
}

/**
 * Describes the properties of a resource type that has been onboarded to private link service
 */
export interface ShareablePrivateLinkResourceProperties {
  /**
   * The description of the resource type that has been onboarded to private link service
   */
  description?: string;
  /**
   * The resource provider group id for the resource that has been onboarded to private link
   * service
   */
  groupId?: string;
  /**
   * The resource provider type for the resource that has been onboarded to private link service
   */
  type?: string;
}

/**
 * Describes a  resource type that has been onboarded to private link service
 */
export interface ShareablePrivateLinkResourceType {
  /**
   * The name of the resource type that has been onboarded to private link service
   */
  name?: string;
  /**
   * Describes the properties of a resource type that has been onboarded to private link service
   */
  properties?: ShareablePrivateLinkResourceProperties;
}

/**
 * Private link resource
 */
export interface PrivateLinkResource extends ProxyResource {
  /**
   * Group Id of the private link resource
   */
  groupId?: string;
  /**
   * Required members of the private link resource
   */
  requiredMembers?: string[];
  /**
   * Required private DNS zone names
   */
  requiredZoneNames?: string[];
  /**
   * The list of resources that are onboarded to private link service
   */
  shareablePrivateLinkResourceTypes?: ShareablePrivateLinkResourceType[];
}

/**
 * Parameters describes the request to regenerate access keys
 */
export interface RegenerateKeyParameters {
  /**
   * The keyType to regenerate. Must be either 'primary' or 'secondary'(case-insensitive). Possible
   * values include: 'Primary', 'Secondary'
   */
  keyType?: KeyType;
}

/**
 * The billing information of the resource.
 */
export interface ResourceSku {
  /**
   * The name of the SKU. Required.
   *
   * Allowed values: Standard_S1, Free_F1
   */
  name: string;
  /**
   * Optional tier of this particular SKU. 'Standard' or 'Free'.
   *
   * `Basic` is deprecated, use `Standard` instead. Possible values include: 'Free', 'Basic',
   * 'Standard', 'Premium'
   */
  tier?: SignalRSkuTier;
  /**
   * Not used. Retained for future use.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly size?: string;
  /**
   * Not used. Retained for future use.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly family?: string;
  /**
   * Optional, integer. The unit count of the resource. 1 by default.
   *
   * If present, following values are allowed:
   * Free: 1
   * Standard: 1,2,5,10,20,50,100
   */
  capacity?: number;
}

/**
 * Upstream auth settings.
 */
export interface UpstreamAuthSettings {
  /**
   * Gets or sets the type of auth. None or ManagedIdentity is supported now. Possible values
   * include: 'None', 'ManagedIdentity'
   */
  type?: UpstreamAuthType;
  /**
   * Gets or sets the managed identity settings. It's required if the auth type is set to
   * ManagedIdentity.
   */
  managedIdentity?: ManagedIdentitySettings;
}

/**
 * Upstream template item settings. It defines the Upstream URL of the incoming requests.
 * The template defines the pattern of the event, the hub or the category of the incoming request
 * that matches current URL template.
 */
export interface UpstreamTemplate {
  /**
   * Gets or sets the matching pattern for hub names. If not set, it matches any hub.
   * There are 3 kind of patterns supported:
   * 1. "*", it to matches any hub name
   * 2. Combine multiple hubs with ",", for example "hub1,hub2", it matches "hub1" and "hub2"
   * 3. The single hub name, for example, "hub1", it matches "hub1"
   */
  hubPattern?: string;
  /**
   * Gets or sets the matching pattern for event names. If not set, it matches any event.
   * There are 3 kind of patterns supported:
   * 1. "*", it to matches any event name
   * 2. Combine multiple events with ",", for example "connect,disconnect", it matches event
   * "connect" and "disconnect"
   * 3. The single event name, for example, "connect", it matches "connect"
   */
  eventPattern?: string;
  /**
   * Gets or sets the matching pattern for category names. If not set, it matches any category.
   * There are 3 kind of patterns supported:
   * 1. "*", it to matches any category name
   * 2. Combine multiple categories with ",", for example "connections,messages", it matches
   * category "connections" and "messages"
   * 3. The single category name, for example, "connections", it matches the category "connections"
   */
  categoryPattern?: string;
  /**
   * Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category}
   * {event} inside the template, the value of the Upstream URL is dynamically calculated when the
   * client request comes in.
   * For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client
   * request from hub `chat` connects, it will first POST to this URL:
   * `http://example.com/chat/api/connect`.
   */
  urlTemplate: string;
  /**
   * Gets or sets the auth settings for an upstream. If not set, no auth is used for upstream
   * messages.
   */
  auth?: UpstreamAuthSettings;
}

/**
 * The settings for the Upstream when the service is in server-less mode.
 */
export interface ServerlessUpstreamSettings {
  /**
   * Gets or sets the list of Upstream URL templates. Order matters, and the first matching
   * template takes effects.
   */
  templates?: UpstreamTemplate[];
}

/**
 * Describes a Shared Private Link Resource
 */
export interface SharedPrivateLinkResource extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemData?: SystemData;
  /**
   * The group id from the provider of resource the shared private link resource is for
   */
  groupId: string;
  /**
   * The resource id of the resource the shared private link resource is for
   */
  privateLinkResourceId: string;
  /**
   * Provisioning state of the shared private link resource. Possible values include: 'Unknown',
   * 'Succeeded', 'Failed', 'Canceled', 'Running', 'Creating', 'Updating', 'Deleting', 'Moving'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The request message for requesting approval of the shared private link resource
   */
  requestMessage?: string;
  /**
   * Status of the shared private link resource. Possible values include: 'Pending', 'Approved',
   * 'Rejected', 'Disconnected', 'Timeout'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: SharedPrivateLinkResourceStatus;
}

/**
 * Cross-Origin Resource Sharing (CORS) settings.
 */
export interface SignalRCorsSettings {
  /**
   * Gets or sets the list of origins that should be allowed to make cross-origin calls (for
   * example: http://example.com:12345). Use "*" to allow all. If omitted, allow all by default.
   */
  allowedOrigins?: string[];
}

/**
 * Feature of a SignalR resource, which controls the SignalR runtime behavior.
 */
export interface SignalRFeature {
  /**
   * FeatureFlags is the supported features of Azure SignalR service.
   * - ServiceMode: Flag for backend server for SignalR service. Values allowed: "Default": have
   * your own backend server; "Serverless": your application doesn't have a backend server;
   * "Classic": for backward compatibility. Support both Default and Serverless mode but not
   * recommended; "PredefinedOnly": for future use.
   * - EnableConnectivityLogs: "true"/"false", to enable/disable the connectivity log category
   * respectively.
   * - EnableMessagingLogs: "true"/"false", to enable/disable the connectivity log category
   * respectively.
   * - EnableLiveTrace: Live Trace allows you to know what's happening inside Azure SignalR
   * service, it will give you live traces in real time, it will be helpful when you developing
   * your own Azure SignalR based web application or self-troubleshooting some issues. Please note
   * that live traces are counted as outbound messages that will be charged. Values allowed:
   * "true"/"false", to enable/disable live trace feature. Possible values include: 'ServiceMode',
   * 'EnableConnectivityLogs', 'EnableMessagingLogs', 'EnableLiveTrace'
   */
  flag: FeatureFlags;
  /**
   * Value of the feature flag. See Azure SignalR service document
   * https://docs.microsoft.com/azure/azure-signalr/ for allowed values.
   */
  value: string;
  /**
   * Optional properties related to this feature.
   */
  properties?: { [propertyName: string]: string };
}

/**
 * A class represents the access keys of the resource.
 */
export interface SignalRKeys {
  /**
   * The primary access key.
   */
  primaryKey?: string;
  /**
   * The secondary access key.
   */
  secondaryKey?: string;
  /**
   * Connection string constructed via the primaryKey
   */
  primaryConnectionString?: string;
  /**
   * Connection string constructed via the secondaryKey
   */
  secondaryConnectionString?: string;
}

/**
 * Network ACLs for the resource
 */
export interface SignalRNetworkACLs {
  /**
   * Default action when no other rule matches. Possible values include: 'Allow', 'Deny'
   */
  defaultAction?: ACLAction;
  /**
   * ACL for requests from public network
   */
  publicNetwork?: NetworkACL;
  /**
   * ACLs for requests from private endpoints
   */
  privateEndpoints?: PrivateEndpointACL[];
}

/**
 * TLS settings for the resource
 */
export interface SignalRTlsSettings {
  /**
   * Request client certificate during TLS handshake if enabled
   */
  clientCertEnabled?: boolean;
}

/**
 * The resource model definition for a ARM tracked top level resource.
 */
export interface TrackedResource extends Resource {
  /**
   * The GEO location of the resource. e.g. West US | East US | North Central US | South Central
   * US.
   */
  location?: string;
  /**
   * Tags of the service which is a list of key value pairs that describe the resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * A class represent a resource.
 */
export interface SignalRResource extends TrackedResource {
  /**
   * The billing information of the resource.(e.g. Free, Standard)
   */
  sku?: ResourceSku;
  /**
   * Provisioning state of the resource. Possible values include: 'Unknown', 'Succeeded', 'Failed',
   * 'Canceled', 'Running', 'Creating', 'Updating', 'Deleting', 'Moving'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The publicly accessible IP of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly externalIP?: string;
  /**
   * FQDN of the service instance.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hostName?: string;
  /**
   * The publicly accessible port of the resource which is designed for browser/client side usage.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly publicPort?: number;
  /**
   * The publicly accessible port of the resource which is designed for customer server side usage.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serverPort?: number;
  /**
   * Version of the resource. Probably you need the same or higher version of client SDKs.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly version?: string;
  /**
   * Private endpoint connections to the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
  /**
   * The list of shared private link resources.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sharedPrivateLinkResources?: SharedPrivateLinkResource[];
  /**
   * TLS settings.
   */
  tls?: SignalRTlsSettings;
  /**
   * List of the featureFlags.
   *
   * FeatureFlags that are not included in the parameters for the update operation will not be
   * modified.
   * And the response will only include featureFlags that are explicitly set.
   * When a featureFlag is not explicitly set, its globally default value will be used
   * But keep in mind, the default value doesn't mean "false". It varies in terms of different
   * FeatureFlags.
   */
  features?: SignalRFeature[];
  /**
   * Cross-Origin Resource Sharing (CORS) settings.
   */
  cors?: SignalRCorsSettings;
  /**
   * Upstream settings when the service is in server-less mode.
   */
  upstream?: ServerlessUpstreamSettings;
  /**
   * Network ACLs
   */
  networkACLs?: SignalRNetworkACLs;
  /**
   * The kind of the service - e.g. "SignalR" for "Microsoft.SignalRService/SignalR". Possible
   * values include: 'SignalR', 'RawWebSockets'
   */
  kind?: ServiceKind;
  /**
   * The managed identity response
   */
  identity?: ManagedIdentity;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemData?: SystemData;
}

/**
 * Localizable String object containing the name and a localized value.
 */
export interface SignalRUsageName {
  /**
   * The identifier of the usage.
   */
  value?: string;
  /**
   * Localized name of the usage.
   */
  localizedValue?: string;
}

/**
 * Object that describes a specific usage of the resources.
 */
export interface SignalRUsage {
  /**
   * Fully qualified ARM resource id
   */
  id?: string;
  /**
   * Current value for the usage quota.
   */
  currentValue?: number;
  /**
   * The maximum permitted value for the usage quota. If there is no limit, this value will be -1.
   */
  limit?: number;
  /**
   * Localizable String object containing the name and a localized value.
   */
  name?: SignalRUsageName;
  /**
   * Representing the units of the usage quota. Possible values are: Count, Bytes, Seconds,
   * Percent, CountPerSecond, BytesPerSecond.
   */
  unit?: string;
}

/**
 * The resource management error additional info.
 */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The additional info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly info?: any;
}

/**
 * The error detail.
 */
export interface ErrorDetail {
  /**
   * The error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * The error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The error target.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly target?: string;
  /**
   * The error details.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/**
 * Common error response for all Azure Resource Manager APIs to return error details for failed
 * operations. (This also follows the OData error response format.).
 * @summary Error response
 */
export interface ErrorResponse {
  /**
   * The error object.
   */
  error?: ErrorDetail;
}

/**
 * An interface representing SignalRManagementClientOptions.
 */
export interface SignalRManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * Result of the request to list REST API operations. It contains a list of operations.
 * @extends Array<Operation>
 */
export interface OperationList extends Array<Operation> {
  /**
   * The URL the client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * @interface
 * Object that includes an array of resources and a possible link for next set.
 * @extends Array<SignalRResource>
 */
export interface SignalRResourceList extends Array<SignalRResource> {
  /**
   * The URL the client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * @interface
 * Object that includes an array of the resource usages and a possible link for next set.
 * @extends Array<SignalRUsage>
 */
export interface SignalRUsageList extends Array<SignalRUsage> {
  /**
   * The URL the client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * @interface
 * A list of private endpoint connections
 * @extends Array<PrivateEndpointConnection>
 */
export interface PrivateEndpointConnectionList extends Array<PrivateEndpointConnection> {
  /**
   * Request URL that can be used to query next page of private endpoint connections. Returned when
   * the total number of requested private endpoint connections exceed maximum page size.
   */
  nextLink?: string;
}

/**
 * @interface
 * Contains a list of PrivateLinkResource and a possible link to query more results
 * @extends Array<PrivateLinkResource>
 */
export interface PrivateLinkResourceList extends Array<PrivateLinkResource> {
  /**
   * The URL the client should use to fetch the next page (per server side paging).
   * It's null for now, added for future use.
   */
  nextLink?: string;
}

/**
 * @interface
 * A list of shared private link resources
 * @extends Array<SharedPrivateLinkResource>
 */
export interface SharedPrivateLinkResourceList extends Array<SharedPrivateLinkResource> {
  /**
   * Request URL that can be used to query next page of private endpoint connections. Returned when
   * the total number of requested private endpoint connections exceed maximum page size.
   */
  nextLink?: string;
}

/**
 * Defines values for ACLAction.
 * Possible values include: 'Allow', 'Deny'
 * @readonly
 * @enum {string}
 */
export type ACLAction = "Allow" | "Deny";

/**
 * Defines values for FeatureFlags.
 * Possible values include: 'ServiceMode', 'EnableConnectivityLogs', 'EnableMessagingLogs',
 * 'EnableLiveTrace'
 * @readonly
 * @enum {string}
 */
export type FeatureFlags =
  | "ServiceMode"
  | "EnableConnectivityLogs"
  | "EnableMessagingLogs"
  | "EnableLiveTrace";

/**
 * Defines values for KeyType.
 * Possible values include: 'Primary', 'Secondary'
 * @readonly
 * @enum {string}
 */
export type KeyType = "Primary" | "Secondary";

/**
 * Defines values for ManagedIdentityType.
 * Possible values include: 'None', 'SystemAssigned', 'UserAssigned'
 * @readonly
 * @enum {string}
 */
export type ManagedIdentityType = "None" | "SystemAssigned" | "UserAssigned";

/**
 * Defines values for SignalRRequestType.
 * Possible values include: 'ClientConnection', 'ServerConnection', 'RESTAPI', 'Trace'
 * @readonly
 * @enum {string}
 */
export type SignalRRequestType = "ClientConnection" | "ServerConnection" | "RESTAPI" | "Trace";

/**
 * Defines values for CreatedByType.
 * Possible values include: 'User', 'Application', 'ManagedIdentity', 'Key'
 * @readonly
 * @enum {string}
 */
export type CreatedByType = "User" | "Application" | "ManagedIdentity" | "Key";

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Unknown', 'Succeeded', 'Failed', 'Canceled', 'Running', 'Creating',
 * 'Updating', 'Deleting', 'Moving'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState =
  | "Unknown"
  | "Succeeded"
  | "Failed"
  | "Canceled"
  | "Running"
  | "Creating"
  | "Updating"
  | "Deleting"
  | "Moving";

/**
 * Defines values for PrivateLinkServiceConnectionStatus.
 * Possible values include: 'Pending', 'Approved', 'Rejected', 'Disconnected'
 * @readonly
 * @enum {string}
 */
export type PrivateLinkServiceConnectionStatus =
  | "Pending"
  | "Approved"
  | "Rejected"
  | "Disconnected";

/**
 * Defines values for SignalRSkuTier.
 * Possible values include: 'Free', 'Basic', 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type SignalRSkuTier = "Free" | "Basic" | "Standard" | "Premium";

/**
 * Defines values for UpstreamAuthType.
 * Possible values include: 'None', 'ManagedIdentity'
 * @readonly
 * @enum {string}
 */
export type UpstreamAuthType = "None" | "ManagedIdentity";

/**
 * Defines values for ServiceKind.
 * Possible values include: 'SignalR', 'RawWebSockets'
 * @readonly
 * @enum {string}
 */
export type ServiceKind = "SignalR" | "RawWebSockets";

/**
 * Defines values for SharedPrivateLinkResourceStatus.
 * Possible values include: 'Pending', 'Approved', 'Rejected', 'Disconnected', 'Timeout'
 * @readonly
 * @enum {string}
 */
export type SharedPrivateLinkResourceStatus =
  | "Pending"
  | "Approved"
  | "Rejected"
  | "Disconnected"
  | "Timeout";

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: OperationList;
  };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type SignalRCheckNameAvailabilityResponse = NameAvailability & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: NameAvailability;
  };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type SignalRListBySubscriptionResponse = SignalRResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SignalRResourceList;
  };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type SignalRListByResourceGroupResponse = SignalRResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SignalRResourceList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SignalRGetResponse = SignalRResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SignalRResource;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SignalRCreateOrUpdateResponse = SignalRResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SignalRResource;
  };
};

/**
 * Contains response data for the update operation.
 */
export type SignalRUpdateResponse = SignalRResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SignalRResource;
  };
};

/**
 * Contains response data for the listKeys operation.
 */
export type SignalRListKeysResponse = SignalRKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SignalRKeys;
  };
};

/**
 * Contains response data for the regenerateKey operation.
 */
export type SignalRRegenerateKeyResponse = SignalRKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SignalRKeys;
  };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type SignalRBeginCreateOrUpdateResponse = SignalRResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SignalRResource;
  };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type SignalRBeginUpdateResponse = SignalRResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SignalRResource;
  };
};

/**
 * Contains response data for the beginRegenerateKey operation.
 */
export type SignalRBeginRegenerateKeyResponse = SignalRKeys & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SignalRKeys;
  };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type SignalRListBySubscriptionNextResponse = SignalRResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SignalRResourceList;
  };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type SignalRListByResourceGroupNextResponse = SignalRResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SignalRResourceList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type UsagesListResponse = SignalRUsageList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SignalRUsageList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type UsagesListNextResponse = SignalRUsageList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SignalRUsageList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type SignalRPrivateEndpointConnectionsListResponse = PrivateEndpointConnectionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnectionList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SignalRPrivateEndpointConnectionsGetResponse = PrivateEndpointConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnection;
  };
};

/**
 * Contains response data for the update operation.
 */
export type SignalRPrivateEndpointConnectionsUpdateResponse = PrivateEndpointConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnection;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type SignalRPrivateEndpointConnectionsListNextResponse = PrivateEndpointConnectionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateEndpointConnectionList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type SignalRPrivateLinkResourcesListResponse = PrivateLinkResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkResourceList;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type SignalRPrivateLinkResourcesListNextResponse = PrivateLinkResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PrivateLinkResourceList;
  };
};

/**
 * Contains response data for the list operation.
 */
export type SignalRSharedPrivateLinkResourcesListResponse = SharedPrivateLinkResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedPrivateLinkResourceList;
  };
};

/**
 * Contains response data for the get operation.
 */
export type SignalRSharedPrivateLinkResourcesGetResponse = SharedPrivateLinkResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedPrivateLinkResource;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SignalRSharedPrivateLinkResourcesCreateOrUpdateResponse = SharedPrivateLinkResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedPrivateLinkResource;
  };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type SignalRSharedPrivateLinkResourcesBeginCreateOrUpdateResponse = SharedPrivateLinkResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedPrivateLinkResource;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type SignalRSharedPrivateLinkResourcesListNextResponse = SharedPrivateLinkResourceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: SharedPrivateLinkResourceList;
  };
};
