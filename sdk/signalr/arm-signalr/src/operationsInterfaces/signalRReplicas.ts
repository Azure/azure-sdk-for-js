/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Replica,
  SignalRReplicasListOptionalParams,
  SignalRReplicasGetOptionalParams,
  SignalRReplicasGetResponse,
  SignalRReplicasCreateOrUpdateOptionalParams,
  SignalRReplicasCreateOrUpdateResponse,
  SignalRReplicasDeleteOptionalParams,
  SignalRReplicasUpdateOptionalParams,
  SignalRReplicasUpdateResponse,
  SignalRReplicasRestartOptionalParams,
  SignalRReplicasRestartResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a SignalRReplicas. */
export interface SignalRReplicas {
  /**
   * List all replicas belong to this resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the resource.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    resourceName: string,
    options?: SignalRReplicasListOptionalParams
  ): PagedAsyncIterableIterator<Replica>;
  /**
   * Get the replica and its properties.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the resource.
   * @param replicaName The name of the replica.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    resourceName: string,
    replicaName: string,
    options?: SignalRReplicasGetOptionalParams
  ): Promise<SignalRReplicasGetResponse>;
  /**
   * Create or update a replica.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the resource.
   * @param replicaName The name of the replica.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    resourceName: string,
    replicaName: string,
    parameters: Replica,
    options?: SignalRReplicasCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<SignalRReplicasCreateOrUpdateResponse>,
      SignalRReplicasCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update a replica.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the resource.
   * @param replicaName The name of the replica.
   * @param parameters Parameters for the create or update operation
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    resourceName: string,
    replicaName: string,
    parameters: Replica,
    options?: SignalRReplicasCreateOrUpdateOptionalParams
  ): Promise<SignalRReplicasCreateOrUpdateResponse>;
  /**
   * Operation to delete a replica.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the resource.
   * @param replicaName The name of the replica.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    resourceName: string,
    replicaName: string,
    options?: SignalRReplicasDeleteOptionalParams
  ): Promise<void>;
  /**
   * Operation to update an exiting replica.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the resource.
   * @param replicaName The name of the replica.
   * @param parameters Parameters for the update operation
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    resourceName: string,
    replicaName: string,
    parameters: Replica,
    options?: SignalRReplicasUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<SignalRReplicasUpdateResponse>,
      SignalRReplicasUpdateResponse
    >
  >;
  /**
   * Operation to update an exiting replica.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the resource.
   * @param replicaName The name of the replica.
   * @param parameters Parameters for the update operation
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    resourceName: string,
    replicaName: string,
    parameters: Replica,
    options?: SignalRReplicasUpdateOptionalParams
  ): Promise<SignalRReplicasUpdateResponse>;
  /**
   * Operation to restart a replica.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the resource.
   * @param replicaName The name of the replica.
   * @param options The options parameters.
   */
  beginRestart(
    resourceGroupName: string,
    resourceName: string,
    replicaName: string,
    options?: SignalRReplicasRestartOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<SignalRReplicasRestartResponse>,
      SignalRReplicasRestartResponse
    >
  >;
  /**
   * Operation to restart a replica.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the resource.
   * @param replicaName The name of the replica.
   * @param options The options parameters.
   */
  beginRestartAndWait(
    resourceGroupName: string,
    resourceName: string,
    replicaName: string,
    options?: SignalRReplicasRestartOptionalParams
  ): Promise<SignalRReplicasRestartResponse>;
}
