/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { BusinessProcessVersions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftIntegrationSpaces } from "../microsoftIntegrationSpaces";
import {
  BusinessProcessVersion,
  BusinessProcessVersionsListByBusinessProcessNextOptionalParams,
  BusinessProcessVersionsListByBusinessProcessOptionalParams,
  BusinessProcessVersionsListByBusinessProcessResponse,
  BusinessProcessVersionsGetOptionalParams,
  BusinessProcessVersionsGetResponse,
  BusinessProcessVersionsListByBusinessProcessNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BusinessProcessVersions operations. */
export class BusinessProcessVersionsImpl implements BusinessProcessVersions {
  private readonly client: MicrosoftIntegrationSpaces;

  /**
   * Initialize a new instance of the class BusinessProcessVersions class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftIntegrationSpaces) {
    this.client = client;
  }

  /**
   * List BusinessProcessVersion resources by BusinessProcess
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spaceName The name of the space
   * @param applicationName The name of the Application
   * @param businessProcessName The name of the business process
   * @param options The options parameters.
   */
  public listByBusinessProcess(
    resourceGroupName: string,
    spaceName: string,
    applicationName: string,
    businessProcessName: string,
    options?: BusinessProcessVersionsListByBusinessProcessOptionalParams
  ): PagedAsyncIterableIterator<BusinessProcessVersion> {
    const iter = this.listByBusinessProcessPagingAll(
      resourceGroupName,
      spaceName,
      applicationName,
      businessProcessName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBusinessProcessPagingPage(
          resourceGroupName,
          spaceName,
          applicationName,
          businessProcessName,
          options,
          settings
        );
      }
    };
  }

  private async *listByBusinessProcessPagingPage(
    resourceGroupName: string,
    spaceName: string,
    applicationName: string,
    businessProcessName: string,
    options?: BusinessProcessVersionsListByBusinessProcessOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<BusinessProcessVersion[]> {
    let result: BusinessProcessVersionsListByBusinessProcessResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBusinessProcess(
        resourceGroupName,
        spaceName,
        applicationName,
        businessProcessName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBusinessProcessNext(
        resourceGroupName,
        spaceName,
        applicationName,
        businessProcessName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBusinessProcessPagingAll(
    resourceGroupName: string,
    spaceName: string,
    applicationName: string,
    businessProcessName: string,
    options?: BusinessProcessVersionsListByBusinessProcessOptionalParams
  ): AsyncIterableIterator<BusinessProcessVersion> {
    for await (const page of this.listByBusinessProcessPagingPage(
      resourceGroupName,
      spaceName,
      applicationName,
      businessProcessName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List BusinessProcessVersion resources by BusinessProcess
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spaceName The name of the space
   * @param applicationName The name of the Application
   * @param businessProcessName The name of the business process
   * @param options The options parameters.
   */
  private _listByBusinessProcess(
    resourceGroupName: string,
    spaceName: string,
    applicationName: string,
    businessProcessName: string,
    options?: BusinessProcessVersionsListByBusinessProcessOptionalParams
  ): Promise<BusinessProcessVersionsListByBusinessProcessResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        spaceName,
        applicationName,
        businessProcessName,
        options
      },
      listByBusinessProcessOperationSpec
    );
  }

  /**
   * Get a BusinessProcessVersion
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spaceName The name of the space
   * @param applicationName The name of the Application
   * @param businessProcessName The name of the business process
   * @param businessProcessVersion The version of the business process
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    spaceName: string,
    applicationName: string,
    businessProcessName: string,
    businessProcessVersion: string,
    options?: BusinessProcessVersionsGetOptionalParams
  ): Promise<BusinessProcessVersionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        spaceName,
        applicationName,
        businessProcessName,
        businessProcessVersion,
        options
      },
      getOperationSpec
    );
  }

  /**
   * ListByBusinessProcessNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spaceName The name of the space
   * @param applicationName The name of the Application
   * @param businessProcessName The name of the business process
   * @param nextLink The nextLink from the previous successful call to the ListByBusinessProcess method.
   * @param options The options parameters.
   */
  private _listByBusinessProcessNext(
    resourceGroupName: string,
    spaceName: string,
    applicationName: string,
    businessProcessName: string,
    nextLink: string,
    options?: BusinessProcessVersionsListByBusinessProcessNextOptionalParams
  ): Promise<BusinessProcessVersionsListByBusinessProcessNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        spaceName,
        applicationName,
        businessProcessName,
        nextLink,
        options
      },
      listByBusinessProcessNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByBusinessProcessOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}/versions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BusinessProcessVersionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.maxpagesize,
    Parameters.filter,
    Parameters.select,
    Parameters.expand,
    Parameters.orderby
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spaceName,
    Parameters.applicationName,
    Parameters.businessProcessName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/applications/{applicationName}/businessProcesses/{businessProcessName}/versions/{businessProcessVersion}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BusinessProcessVersion
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spaceName,
    Parameters.applicationName,
    Parameters.businessProcessName,
    Parameters.businessProcessVersion
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBusinessProcessNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BusinessProcessVersionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spaceName,
    Parameters.applicationName,
    Parameters.businessProcessName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
