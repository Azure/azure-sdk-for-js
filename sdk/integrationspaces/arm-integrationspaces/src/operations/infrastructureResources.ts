/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { InfrastructureResources } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftIntegrationSpaces } from "../microsoftIntegrationSpaces";
import {
  InfrastructureResource,
  InfrastructureResourcesListBySpaceNextOptionalParams,
  InfrastructureResourcesListBySpaceOptionalParams,
  InfrastructureResourcesListBySpaceResponse,
  InfrastructureResourcesGetOptionalParams,
  InfrastructureResourcesGetResponse,
  InfrastructureResourcesCreateOrUpdateOptionalParams,
  InfrastructureResourcesCreateOrUpdateResponse,
  InfrastructureResourceUpdate,
  InfrastructureResourcesPatchOptionalParams,
  InfrastructureResourcesPatchResponse,
  InfrastructureResourcesDeleteOptionalParams,
  InfrastructureResourcesListBySpaceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing InfrastructureResources operations. */
export class InfrastructureResourcesImpl implements InfrastructureResources {
  private readonly client: MicrosoftIntegrationSpaces;

  /**
   * Initialize a new instance of the class InfrastructureResources class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftIntegrationSpaces) {
    this.client = client;
  }

  /**
   * List InfrastructureResource resources by Space
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spaceName The name of the space
   * @param options The options parameters.
   */
  public listBySpace(
    resourceGroupName: string,
    spaceName: string,
    options?: InfrastructureResourcesListBySpaceOptionalParams
  ): PagedAsyncIterableIterator<InfrastructureResource> {
    const iter = this.listBySpacePagingAll(
      resourceGroupName,
      spaceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySpacePagingPage(
          resourceGroupName,
          spaceName,
          options,
          settings
        );
      }
    };
  }

  private async *listBySpacePagingPage(
    resourceGroupName: string,
    spaceName: string,
    options?: InfrastructureResourcesListBySpaceOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<InfrastructureResource[]> {
    let result: InfrastructureResourcesListBySpaceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySpace(resourceGroupName, spaceName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySpaceNext(
        resourceGroupName,
        spaceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySpacePagingAll(
    resourceGroupName: string,
    spaceName: string,
    options?: InfrastructureResourcesListBySpaceOptionalParams
  ): AsyncIterableIterator<InfrastructureResource> {
    for await (const page of this.listBySpacePagingPage(
      resourceGroupName,
      spaceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List InfrastructureResource resources by Space
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spaceName The name of the space
   * @param options The options parameters.
   */
  private _listBySpace(
    resourceGroupName: string,
    spaceName: string,
    options?: InfrastructureResourcesListBySpaceOptionalParams
  ): Promise<InfrastructureResourcesListBySpaceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, spaceName, options },
      listBySpaceOperationSpec
    );
  }

  /**
   * Get a InfrastructureResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spaceName The name of the space
   * @param infrastructureResourceName The name of the infrastructure resource in the space.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    spaceName: string,
    infrastructureResourceName: string,
    options?: InfrastructureResourcesGetOptionalParams
  ): Promise<InfrastructureResourcesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, spaceName, infrastructureResourceName, options },
      getOperationSpec
    );
  }

  /**
   * Create a InfrastructureResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spaceName The name of the space
   * @param infrastructureResourceName The name of the infrastructure resource in the space.
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    spaceName: string,
    infrastructureResourceName: string,
    resource: InfrastructureResource,
    options?: InfrastructureResourcesCreateOrUpdateOptionalParams
  ): Promise<InfrastructureResourcesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        spaceName,
        infrastructureResourceName,
        resource,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Update a InfrastructureResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spaceName The name of the space
   * @param infrastructureResourceName The name of the infrastructure resource in the space.
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  patch(
    resourceGroupName: string,
    spaceName: string,
    infrastructureResourceName: string,
    properties: InfrastructureResourceUpdate,
    options?: InfrastructureResourcesPatchOptionalParams
  ): Promise<InfrastructureResourcesPatchResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        spaceName,
        infrastructureResourceName,
        properties,
        options
      },
      patchOperationSpec
    );
  }

  /**
   * Delete a InfrastructureResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spaceName The name of the space
   * @param infrastructureResourceName The name of the infrastructure resource in the space.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    spaceName: string,
    infrastructureResourceName: string,
    options?: InfrastructureResourcesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, spaceName, infrastructureResourceName, options },
      deleteOperationSpec
    );
  }

  /**
   * ListBySpaceNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param spaceName The name of the space
   * @param nextLink The nextLink from the previous successful call to the ListBySpace method.
   * @param options The options parameters.
   */
  private _listBySpaceNext(
    resourceGroupName: string,
    spaceName: string,
    nextLink: string,
    options?: InfrastructureResourcesListBySpaceNextOptionalParams
  ): Promise<InfrastructureResourcesListBySpaceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, spaceName, nextLink, options },
      listBySpaceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySpaceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InfrastructureResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.top,
    Parameters.skip,
    Parameters.maxpagesize,
    Parameters.filter,
    Parameters.select,
    Parameters.expand,
    Parameters.orderby
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spaceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InfrastructureResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spaceName,
    Parameters.infrastructureResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.InfrastructureResource
    },
    201: {
      bodyMapper: Mappers.InfrastructureResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spaceName,
    Parameters.infrastructureResourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const patchOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.InfrastructureResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spaceName,
    Parameters.infrastructureResourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IntegrationSpaces/spaces/{spaceName}/infrastructureResources/{infrastructureResourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spaceName,
    Parameters.infrastructureResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySpaceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InfrastructureResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.spaceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
