/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/groupsMappers";
import * as Parameters from "../models/parameters";
import { GraphRbacManagementClientContext } from "../graphRbacManagementClientContext";

/** Class representing a Groups. */
export class Groups {
  private readonly client: GraphRbacManagementClientContext;

  /**
   * Create a Groups.
   * @param {GraphRbacManagementClientContext} client Reference to the service client.
   */
  constructor(client: GraphRbacManagementClientContext) {
    this.client = client;
  }

  /**
   * Checks whether the specified user, group, contact, or service principal is a direct or
   * transitive member of the specified group.
   * @param parameters The check group membership parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.GroupsIsMemberOfResponse>
   */
  isMemberOf(parameters: Models.CheckGroupMembershipParameters, options?: msRest.RequestOptionsBase): Promise<Models.GroupsIsMemberOfResponse>;
  /**
   * @param parameters The check group membership parameters.
   * @param callback The callback
   */
  isMemberOf(parameters: Models.CheckGroupMembershipParameters, callback: msRest.ServiceCallback<Models.CheckGroupMembershipResult>): void;
  /**
   * @param parameters The check group membership parameters.
   * @param options The optional parameters
   * @param callback The callback
   */
  isMemberOf(parameters: Models.CheckGroupMembershipParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckGroupMembershipResult>): void;
  isMemberOf(parameters: Models.CheckGroupMembershipParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckGroupMembershipResult>, callback?: msRest.ServiceCallback<Models.CheckGroupMembershipResult>): Promise<Models.GroupsIsMemberOfResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        options
      },
      isMemberOfOperationSpec,
      callback) as Promise<Models.GroupsIsMemberOfResponse>;
  }

  /**
   * Remove a member from a group.
   * @param groupObjectId The object ID of the group from which to remove the member.
   * @param memberObjectId Member object id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeMember(groupObjectId: string, memberObjectId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param groupObjectId The object ID of the group from which to remove the member.
   * @param memberObjectId Member object id
   * @param callback The callback
   */
  removeMember(groupObjectId: string, memberObjectId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param groupObjectId The object ID of the group from which to remove the member.
   * @param memberObjectId Member object id
   * @param options The optional parameters
   * @param callback The callback
   */
  removeMember(groupObjectId: string, memberObjectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeMember(groupObjectId: string, memberObjectId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        groupObjectId,
        memberObjectId,
        options
      },
      removeMemberOperationSpec,
      callback);
  }

  /**
   * Add a member to a group.
   * @param groupObjectId The object ID of the group to which to add the member.
   * @param parameters The URL of the member object, such as
   * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  addMember(groupObjectId: string, parameters: Models.GroupAddMemberParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param groupObjectId The object ID of the group to which to add the member.
   * @param parameters The URL of the member object, such as
   * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
   * @param callback The callback
   */
  addMember(groupObjectId: string, parameters: Models.GroupAddMemberParameters, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param groupObjectId The object ID of the group to which to add the member.
   * @param parameters The URL of the member object, such as
   * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
   * @param options The optional parameters
   * @param callback The callback
   */
  addMember(groupObjectId: string, parameters: Models.GroupAddMemberParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  addMember(groupObjectId: string, parameters: Models.GroupAddMemberParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        groupObjectId,
        parameters,
        options
      },
      addMemberOperationSpec,
      callback);
  }

  /**
   * Create a group in the directory.
   * @param parameters The parameters for the group to create.
   * @param [options] The optional parameters
   * @returns Promise<Models.GroupsCreateResponse>
   */
  create(parameters: Models.GroupCreateParameters, options?: msRest.RequestOptionsBase): Promise<Models.GroupsCreateResponse>;
  /**
   * @param parameters The parameters for the group to create.
   * @param callback The callback
   */
  create(parameters: Models.GroupCreateParameters, callback: msRest.ServiceCallback<Models.ADGroup>): void;
  /**
   * @param parameters The parameters for the group to create.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(parameters: Models.GroupCreateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ADGroup>): void;
  create(parameters: Models.GroupCreateParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ADGroup>, callback?: msRest.ServiceCallback<Models.ADGroup>): Promise<Models.GroupsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        parameters,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.GroupsCreateResponse>;
  }

  /**
   * Gets list of groups for the current tenant.
   * @param [options] The optional parameters
   * @returns Promise<Models.GroupsListResponse>
   */
  list(options?: Models.GroupsListOptionalParams): Promise<Models.GroupsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.GroupListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.GroupsListOptionalParams, callback: msRest.ServiceCallback<Models.GroupListResult>): void;
  list(options?: Models.GroupsListOptionalParams | msRest.ServiceCallback<Models.GroupListResult>, callback?: msRest.ServiceCallback<Models.GroupListResult>): Promise<Models.GroupsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.GroupsListResponse>;
  }

  /**
   * Gets the members of a group.
   * @param objectId The object ID of the group whose members should be retrieved.
   * @param [options] The optional parameters
   * @returns Promise<Models.GroupsGetGroupMembersResponse>
   */
  getGroupMembers(objectId: string, options?: msRest.RequestOptionsBase): Promise<Models.GroupsGetGroupMembersResponse>;
  /**
   * @param objectId The object ID of the group whose members should be retrieved.
   * @param callback The callback
   */
  getGroupMembers(objectId: string, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
  /**
   * @param objectId The object ID of the group whose members should be retrieved.
   * @param options The optional parameters
   * @param callback The callback
   */
  getGroupMembers(objectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
  getGroupMembers(objectId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DirectoryObjectListResult>, callback?: msRest.ServiceCallback<Models.DirectoryObjectListResult>): Promise<Models.GroupsGetGroupMembersResponse> {
    return this.client.sendOperationRequest(
      {
        objectId,
        options
      },
      getGroupMembersOperationSpec,
      callback) as Promise<Models.GroupsGetGroupMembersResponse>;
  }

  /**
   * Gets group information from the directory.
   * @param objectId The object ID of the user for which to get group information.
   * @param [options] The optional parameters
   * @returns Promise<Models.GroupsGetResponse>
   */
  get(objectId: string, options?: msRest.RequestOptionsBase): Promise<Models.GroupsGetResponse>;
  /**
   * @param objectId The object ID of the user for which to get group information.
   * @param callback The callback
   */
  get(objectId: string, callback: msRest.ServiceCallback<Models.ADGroup>): void;
  /**
   * @param objectId The object ID of the user for which to get group information.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(objectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ADGroup>): void;
  get(objectId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ADGroup>, callback?: msRest.ServiceCallback<Models.ADGroup>): Promise<Models.GroupsGetResponse> {
    return this.client.sendOperationRequest(
      {
        objectId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.GroupsGetResponse>;
  }

  /**
   * Delete a group from the directory.
   * @param objectId The object ID of the group to delete.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(objectId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param objectId The object ID of the group to delete.
   * @param callback The callback
   */
  deleteMethod(objectId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param objectId The object ID of the group to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(objectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(objectId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        objectId,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Gets a collection of object IDs of groups of which the specified group is a member.
   * @param objectId The object ID of the group for which to get group membership.
   * @param parameters Group filtering parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.GroupsGetMemberGroupsResponse>
   */
  getMemberGroups(objectId: string, parameters: Models.GroupGetMemberGroupsParameters, options?: msRest.RequestOptionsBase): Promise<Models.GroupsGetMemberGroupsResponse>;
  /**
   * @param objectId The object ID of the group for which to get group membership.
   * @param parameters Group filtering parameters.
   * @param callback The callback
   */
  getMemberGroups(objectId: string, parameters: Models.GroupGetMemberGroupsParameters, callback: msRest.ServiceCallback<Models.GroupGetMemberGroupsResult>): void;
  /**
   * @param objectId The object ID of the group for which to get group membership.
   * @param parameters Group filtering parameters.
   * @param options The optional parameters
   * @param callback The callback
   */
  getMemberGroups(objectId: string, parameters: Models.GroupGetMemberGroupsParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GroupGetMemberGroupsResult>): void;
  getMemberGroups(objectId: string, parameters: Models.GroupGetMemberGroupsParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GroupGetMemberGroupsResult>, callback?: msRest.ServiceCallback<Models.GroupGetMemberGroupsResult>): Promise<Models.GroupsGetMemberGroupsResponse> {
    return this.client.sendOperationRequest(
      {
        objectId,
        parameters,
        options
      },
      getMemberGroupsOperationSpec,
      callback) as Promise<Models.GroupsGetMemberGroupsResponse>;
  }

  /**
   * The owners are a set of non-admin users who are allowed to modify this object.
   * @summary Directory objects that are owners of the group.
   * @param objectId The object ID of the group for which to get owners.
   * @param [options] The optional parameters
   * @returns Promise<Models.GroupsListOwnersResponse>
   */
  listOwners(objectId: string, options?: msRest.RequestOptionsBase): Promise<Models.GroupsListOwnersResponse>;
  /**
   * @param objectId The object ID of the group for which to get owners.
   * @param callback The callback
   */
  listOwners(objectId: string, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
  /**
   * @param objectId The object ID of the group for which to get owners.
   * @param options The optional parameters
   * @param callback The callback
   */
  listOwners(objectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
  listOwners(objectId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DirectoryObjectListResult>, callback?: msRest.ServiceCallback<Models.DirectoryObjectListResult>): Promise<Models.GroupsListOwnersResponse> {
    return this.client.sendOperationRequest(
      {
        objectId,
        options
      },
      listOwnersOperationSpec,
      callback) as Promise<Models.GroupsListOwnersResponse>;
  }

  /**
   * Add an owner to a group.
   * @param objectId The object ID of the application to which to add the owner.
   * @param parameters The URL of the owner object, such as
   * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  addOwner(objectId: string, parameters: Models.AddOwnerParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param objectId The object ID of the application to which to add the owner.
   * @param parameters The URL of the owner object, such as
   * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
   * @param callback The callback
   */
  addOwner(objectId: string, parameters: Models.AddOwnerParameters, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param objectId The object ID of the application to which to add the owner.
   * @param parameters The URL of the owner object, such as
   * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
   * @param options The optional parameters
   * @param callback The callback
   */
  addOwner(objectId: string, parameters: Models.AddOwnerParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  addOwner(objectId: string, parameters: Models.AddOwnerParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        objectId,
        parameters,
        options
      },
      addOwnerOperationSpec,
      callback);
  }

  /**
   * Remove a member from owners.
   * @param objectId The object ID of the group from which to remove the owner.
   * @param ownerObjectId Owner object id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeOwner(objectId: string, ownerObjectId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param objectId The object ID of the group from which to remove the owner.
   * @param ownerObjectId Owner object id
   * @param callback The callback
   */
  removeOwner(objectId: string, ownerObjectId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param objectId The object ID of the group from which to remove the owner.
   * @param ownerObjectId Owner object id
   * @param options The optional parameters
   * @param callback The callback
   */
  removeOwner(objectId: string, ownerObjectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeOwner(objectId: string, ownerObjectId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        objectId,
        ownerObjectId,
        options
      },
      removeOwnerOperationSpec,
      callback);
  }

  /**
   * Gets a list of groups for the current tenant.
   * @param nextLink Next link for the list operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GroupsListNextResponse>
   */
  listNext(nextLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GroupsListNextResponse>;
  /**
   * @param nextLink Next link for the list operation.
   * @param callback The callback
   */
  listNext(nextLink: string, callback: msRest.ServiceCallback<Models.GroupListResult>): void;
  /**
   * @param nextLink Next link for the list operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GroupListResult>): void;
  listNext(nextLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GroupListResult>, callback?: msRest.ServiceCallback<Models.GroupListResult>): Promise<Models.GroupsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.GroupsListNextResponse>;
  }

  /**
   * Gets the members of a group.
   * @param nextLink Next link for the list operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GroupsGetGroupMembersNextResponse>
   */
  getGroupMembersNext(nextLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GroupsGetGroupMembersNextResponse>;
  /**
   * @param nextLink Next link for the list operation.
   * @param callback The callback
   */
  getGroupMembersNext(nextLink: string, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
  /**
   * @param nextLink Next link for the list operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getGroupMembersNext(nextLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
  getGroupMembersNext(nextLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DirectoryObjectListResult>, callback?: msRest.ServiceCallback<Models.DirectoryObjectListResult>): Promise<Models.GroupsGetGroupMembersNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextLink,
        options
      },
      getGroupMembersNextOperationSpec,
      callback) as Promise<Models.GroupsGetGroupMembersNextResponse>;
  }

  /**
   * The owners are a set of non-admin users who are allowed to modify this object.
   * @summary Directory objects that are owners of the group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.GroupsListOwnersNextResponse>
   */
  listOwnersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GroupsListOwnersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listOwnersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listOwnersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
  listOwnersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DirectoryObjectListResult>, callback?: msRest.ServiceCallback<Models.DirectoryObjectListResult>): Promise<Models.GroupsListOwnersNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listOwnersNextOperationSpec,
      callback) as Promise<Models.GroupsListOwnersNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const isMemberOfOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{tenantID}/isMemberOf",
  urlParameters: [
    Parameters.tenantID
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CheckGroupMembershipParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckGroupMembershipResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};

const removeMemberOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{tenantID}/groups/{groupObjectId}/$links/members/{memberObjectId}",
  urlParameters: [
    Parameters.groupObjectId,
    Parameters.memberObjectId,
    Parameters.tenantID
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};

const addMemberOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{tenantID}/groups/{groupObjectId}/$links/members",
  urlParameters: [
    Parameters.groupObjectId,
    Parameters.tenantID
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.GroupAddMemberParameters,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{tenantID}/groups",
  urlParameters: [
    Parameters.tenantID
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.GroupCreateParameters,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.ADGroup
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{tenantID}/groups",
  urlParameters: [
    Parameters.tenantID
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GroupListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};

const getGroupMembersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{tenantID}/groups/{objectId}/members",
  urlParameters: [
    Parameters.objectId,
    Parameters.tenantID
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryObjectListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{tenantID}/groups/{objectId}",
  urlParameters: [
    Parameters.objectId,
    Parameters.tenantID
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ADGroup
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{tenantID}/groups/{objectId}",
  urlParameters: [
    Parameters.objectId,
    Parameters.tenantID
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};

const getMemberGroupsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{tenantID}/groups/{objectId}/getMemberGroups",
  urlParameters: [
    Parameters.objectId,
    Parameters.tenantID
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.GroupGetMemberGroupsParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.GroupGetMemberGroupsResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};

const listOwnersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{tenantID}/groups/{objectId}/owners",
  urlParameters: [
    Parameters.objectId,
    Parameters.tenantID
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryObjectListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};

const addOwnerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{tenantID}/groups/{objectId}/$links/owners",
  urlParameters: [
    Parameters.objectId,
    Parameters.tenantID
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.AddOwnerParameters,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};

const removeOwnerOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{tenantID}/groups/{objectId}/$links/owners/{ownerObjectId}",
  urlParameters: [
    Parameters.objectId,
    Parameters.ownerObjectId,
    Parameters.tenantID
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{tenantID}/{nextLink}",
  urlParameters: [
    Parameters.nextLink,
    Parameters.tenantID
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GroupListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};

const getGroupMembersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{tenantID}/{nextLink}",
  urlParameters: [
    Parameters.nextLink,
    Parameters.tenantID
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryObjectListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};

const listOwnersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://graph.windows.net",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DirectoryObjectListResult
    },
    default: {
      bodyMapper: Mappers.GraphError
    }
  },
  serializer
};
