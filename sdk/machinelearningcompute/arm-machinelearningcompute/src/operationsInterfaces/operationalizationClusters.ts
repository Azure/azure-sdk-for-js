/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  OperationalizationCluster,
  OperationalizationClustersListByResourceGroupOptionalParams,
  OperationalizationClustersListBySubscriptionIdOptionalParams,
  OperationalizationClustersCreateOrUpdateOptionalParams,
  OperationalizationClustersCreateOrUpdateResponse,
  OperationalizationClustersGetOptionalParams,
  OperationalizationClustersGetResponse,
  OperationalizationClusterUpdateParameters,
  OperationalizationClustersUpdateOptionalParams,
  OperationalizationClustersUpdateResponse,
  OperationalizationClustersDeleteOptionalParams,
  OperationalizationClustersDeleteResponse,
  OperationalizationClustersListKeysOptionalParams,
  OperationalizationClustersListKeysResponse,
  OperationalizationClustersCheckSystemServicesUpdatesAvailableOptionalParams,
  OperationalizationClustersCheckSystemServicesUpdatesAvailableResponse,
  OperationalizationClustersUpdateSystemServicesOptionalParams,
  OperationalizationClustersUpdateSystemServicesResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a OperationalizationClusters. */
export interface OperationalizationClusters {
  /**
   * Gets the clusters in the specified resource group.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: OperationalizationClustersListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<OperationalizationCluster>;
  /**
   * Gets the operationalization clusters in the specified subscription.
   * @param options The options parameters.
   */
  listBySubscriptionId(
    options?: OperationalizationClustersListBySubscriptionIdOptionalParams
  ): PagedAsyncIterableIterator<OperationalizationCluster>;
  /**
   * Create or update an operationalization cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param parameters Parameters supplied to create or update an Operationalization cluster.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    clusterName: string,
    parameters: OperationalizationCluster,
    options?: OperationalizationClustersCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<OperationalizationClustersCreateOrUpdateResponse>,
      OperationalizationClustersCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update an operationalization cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param parameters Parameters supplied to create or update an Operationalization cluster.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    clusterName: string,
    parameters: OperationalizationCluster,
    options?: OperationalizationClustersCreateOrUpdateOptionalParams
  ): Promise<OperationalizationClustersCreateOrUpdateResponse>;
  /**
   * Gets the operationalization cluster resource view. Note that the credentials are not returned by
   * this call. Call ListKeys to get them.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersGetOptionalParams
  ): Promise<OperationalizationClustersGetResponse>;
  /**
   * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update
   * other properties.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param parameters The parameters supplied to patch the cluster.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    clusterName: string,
    parameters: OperationalizationClusterUpdateParameters,
    options?: OperationalizationClustersUpdateOptionalParams
  ): Promise<OperationalizationClustersUpdateResponse>;
  /**
   * Deletes the specified cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersDeleteOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<OperationalizationClustersDeleteResponse>,
      OperationalizationClustersDeleteResponse
    >
  >;
  /**
   * Deletes the specified cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersDeleteOptionalParams
  ): Promise<OperationalizationClustersDeleteResponse>;
  /**
   * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a
   * long running operation because it fetches keys from dependencies.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersListKeysOptionalParams
  ): Promise<OperationalizationClustersListKeysResponse>;
  /**
   * Checks if updates are available for system services in the cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  checkSystemServicesUpdatesAvailable(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersCheckSystemServicesUpdatesAvailableOptionalParams
  ): Promise<
    OperationalizationClustersCheckSystemServicesUpdatesAvailableResponse
  >;
  /**
   * Updates system services in a cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  beginUpdateSystemServices(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersUpdateSystemServicesOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        OperationalizationClustersUpdateSystemServicesResponse
      >,
      OperationalizationClustersUpdateSystemServicesResponse
    >
  >;
  /**
   * Updates system services in a cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  beginUpdateSystemServicesAndWait(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersUpdateSystemServicesOptionalParams
  ): Promise<OperationalizationClustersUpdateSystemServicesResponse>;
}
