/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { OperationalizationClusters } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MachineLearningComputeManagementClient } from "../machineLearningComputeManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  OperationalizationCluster,
  OperationalizationClustersListByResourceGroupNextOptionalParams,
  OperationalizationClustersListByResourceGroupOptionalParams,
  OperationalizationClustersListBySubscriptionIdNextOptionalParams,
  OperationalizationClustersListBySubscriptionIdOptionalParams,
  OperationalizationClustersCreateOrUpdateOptionalParams,
  OperationalizationClustersCreateOrUpdateResponse,
  OperationalizationClustersGetOptionalParams,
  OperationalizationClustersGetResponse,
  OperationalizationClusterUpdateParameters,
  OperationalizationClustersUpdateOptionalParams,
  OperationalizationClustersUpdateResponse,
  OperationalizationClustersDeleteOptionalParams,
  OperationalizationClustersDeleteResponse,
  OperationalizationClustersListKeysOptionalParams,
  OperationalizationClustersListKeysResponse,
  OperationalizationClustersCheckSystemServicesUpdatesAvailableOptionalParams,
  OperationalizationClustersCheckSystemServicesUpdatesAvailableResponse,
  OperationalizationClustersUpdateSystemServicesOptionalParams,
  OperationalizationClustersUpdateSystemServicesResponse,
  OperationalizationClustersListByResourceGroupResponse,
  OperationalizationClustersListBySubscriptionIdResponse,
  OperationalizationClustersListByResourceGroupNextResponse,
  OperationalizationClustersListBySubscriptionIdNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing OperationalizationClusters operations. */
export class OperationalizationClustersImpl
  implements OperationalizationClusters {
  private readonly client: MachineLearningComputeManagementClient;

  /**
   * Initialize a new instance of the class OperationalizationClusters class.
   * @param client Reference to the service client
   */
  constructor(client: MachineLearningComputeManagementClient) {
    this.client = client;
  }

  /**
   * Gets the clusters in the specified resource group.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: OperationalizationClustersListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<OperationalizationCluster> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: OperationalizationClustersListByResourceGroupOptionalParams
  ): AsyncIterableIterator<OperationalizationCluster[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: OperationalizationClustersListByResourceGroupOptionalParams
  ): AsyncIterableIterator<OperationalizationCluster> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the operationalization clusters in the specified subscription.
   * @param options The options parameters.
   */
  public listBySubscriptionId(
    options?: OperationalizationClustersListBySubscriptionIdOptionalParams
  ): PagedAsyncIterableIterator<OperationalizationCluster> {
    const iter = this.listBySubscriptionIdPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionIdPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionIdPagingPage(
    options?: OperationalizationClustersListBySubscriptionIdOptionalParams
  ): AsyncIterableIterator<OperationalizationCluster[]> {
    let result = await this._listBySubscriptionId(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionIdNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionIdPagingAll(
    options?: OperationalizationClustersListBySubscriptionIdOptionalParams
  ): AsyncIterableIterator<OperationalizationCluster> {
    for await (const page of this.listBySubscriptionIdPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Create or update an operationalization cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param parameters Parameters supplied to create or update an Operationalization cluster.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    clusterName: string,
    parameters: OperationalizationCluster,
    options?: OperationalizationClustersCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<OperationalizationClustersCreateOrUpdateResponse>,
      OperationalizationClustersCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<OperationalizationClustersCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, clusterName, parameters, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update an operationalization cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param parameters Parameters supplied to create or update an Operationalization cluster.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    clusterName: string,
    parameters: OperationalizationCluster,
    options?: OperationalizationClustersCreateOrUpdateOptionalParams
  ): Promise<OperationalizationClustersCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      clusterName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the operationalization cluster resource view. Note that the credentials are not returned by
   * this call. Call ListKeys to get them.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersGetOptionalParams
  ): Promise<OperationalizationClustersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterName, options },
      getOperationSpec
    );
  }

  /**
   * The PATCH operation can be used to update only the tags for a cluster. Use PUT operation to update
   * other properties.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param parameters The parameters supplied to patch the cluster.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    clusterName: string,
    parameters: OperationalizationClusterUpdateParameters,
    options?: OperationalizationClustersUpdateOptionalParams
  ): Promise<OperationalizationClustersUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterName, parameters, options },
      updateOperationSpec
    );
  }

  /**
   * Deletes the specified cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersDeleteOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<OperationalizationClustersDeleteResponse>,
      OperationalizationClustersDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<OperationalizationClustersDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, clusterName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the specified cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersDeleteOptionalParams
  ): Promise<OperationalizationClustersDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      clusterName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the credentials for the specified cluster such as Storage, ACR and ACS credentials. This is a
   * long running operation because it fetches keys from dependencies.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersListKeysOptionalParams
  ): Promise<OperationalizationClustersListKeysResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterName, options },
      listKeysOperationSpec
    );
  }

  /**
   * Checks if updates are available for system services in the cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  checkSystemServicesUpdatesAvailable(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersCheckSystemServicesUpdatesAvailableOptionalParams
  ): Promise<
    OperationalizationClustersCheckSystemServicesUpdatesAvailableResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, clusterName, options },
      checkSystemServicesUpdatesAvailableOperationSpec
    );
  }

  /**
   * Updates system services in a cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  async beginUpdateSystemServices(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersUpdateSystemServicesOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        OperationalizationClustersUpdateSystemServicesResponse
      >,
      OperationalizationClustersUpdateSystemServicesResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<OperationalizationClustersUpdateSystemServicesResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, clusterName, options },
      updateSystemServicesOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates system services in a cluster.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param clusterName The name of the cluster.
   * @param options The options parameters.
   */
  async beginUpdateSystemServicesAndWait(
    resourceGroupName: string,
    clusterName: string,
    options?: OperationalizationClustersUpdateSystemServicesOptionalParams
  ): Promise<OperationalizationClustersUpdateSystemServicesResponse> {
    const poller = await this.beginUpdateSystemServices(
      resourceGroupName,
      clusterName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the clusters in the specified resource group.
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: OperationalizationClustersListByResourceGroupOptionalParams
  ): Promise<OperationalizationClustersListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets the operationalization clusters in the specified subscription.
   * @param options The options parameters.
   */
  private _listBySubscriptionId(
    options?: OperationalizationClustersListBySubscriptionIdOptionalParams
  ): Promise<OperationalizationClustersListBySubscriptionIdResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionIdOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Name of the resource group in which the cluster is located.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: OperationalizationClustersListByResourceGroupNextOptionalParams
  ): Promise<OperationalizationClustersListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionIdNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionId method.
   * @param options The options parameters.
   */
  private _listBySubscriptionIdNext(
    nextLink: string,
    options?: OperationalizationClustersListBySubscriptionIdNextOptionalParams
  ): Promise<OperationalizationClustersListBySubscriptionIdNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionIdNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.OperationalizationCluster
    },
    201: {
      bodyMapper: Mappers.OperationalizationCluster
    },
    202: {
      bodyMapper: Mappers.OperationalizationCluster
    },
    204: {
      bodyMapper: Mappers.OperationalizationCluster
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWrapper
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationalizationCluster
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWrapper
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.OperationalizationCluster
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWrapper
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.OperationalizationClustersDeleteHeaders
    },
    201: {
      headersMapper: Mappers.OperationalizationClustersDeleteHeaders
    },
    202: {
      headersMapper: Mappers.OperationalizationClustersDeleteHeaders
    },
    204: {
      headersMapper: Mappers.OperationalizationClustersDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWrapper
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.deleteAll],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listKeysOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/listKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationalizationClusterCredentials
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const checkSystemServicesUpdatesAvailableOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/checkSystemServicesUpdatesAvailable",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckSystemServicesUpdatesAvailableResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateSystemServicesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters/{clusterName}/updateSystemServices",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.UpdateSystemServicesResponse
    },
    201: {
      bodyMapper: Mappers.UpdateSystemServicesResponse
    },
    202: {
      bodyMapper: Mappers.UpdateSystemServicesResponse
    },
    204: {
      bodyMapper: Mappers.UpdateSystemServicesResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningCompute/operationalizationClusters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedOperationalizationClustersList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearningCompute/operationalizationClusters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedOperationalizationClustersList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedOperationalizationClustersList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionIdNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedOperationalizationClustersList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skiptoken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
