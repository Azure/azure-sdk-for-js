/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { FluidRelayServers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { FluidRelayManagementClient } from "../fluidRelayManagementClient";
import {
  FluidRelayServer,
  FluidRelayServersListBySubscriptionNextOptionalParams,
  FluidRelayServersListBySubscriptionOptionalParams,
  FluidRelayServersListByResourceGroupNextOptionalParams,
  FluidRelayServersListByResourceGroupOptionalParams,
  FluidRelayServersGetOptionalParams,
  FluidRelayServersGetResponse,
  FluidRelayServersCreateOrUpdateOptionalParams,
  FluidRelayServersCreateOrUpdateResponse,
  FluidRelayServerUpdate,
  FluidRelayServersUpdateOptionalParams,
  FluidRelayServersUpdateResponse,
  FluidRelayServersDeleteOptionalParams,
  RegenerateKeyRequest,
  FluidRelayServersRegenerateKeyOptionalParams,
  FluidRelayServersRegenerateKeyResponse,
  FluidRelayServersListKeysOptionalParams,
  FluidRelayServersListKeysResponse,
  FluidRelayServersListBySubscriptionResponse,
  FluidRelayServersListByResourceGroupResponse,
  FluidRelayServersListBySubscriptionNextResponse,
  FluidRelayServersListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing FluidRelayServers operations. */
export class FluidRelayServersImpl implements FluidRelayServers {
  private readonly client: FluidRelayManagementClient;

  /**
   * Initialize a new instance of the class FluidRelayServers class.
   * @param client Reference to the service client
   */
  constructor(client: FluidRelayManagementClient) {
    this.client = client;
  }

  /**
   * List all Fluid Relay servers in a subscription.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: FluidRelayServersListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<FluidRelayServer> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: FluidRelayServersListBySubscriptionOptionalParams
  ): AsyncIterableIterator<FluidRelayServer[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: FluidRelayServersListBySubscriptionOptionalParams
  ): AsyncIterableIterator<FluidRelayServer> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List all Fluid Relay servers in a resource group.
   * @param resourceGroup The resource group containing the resource.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroup: string,
    options?: FluidRelayServersListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<FluidRelayServer> {
    const iter = this.listByResourceGroupPagingAll(resourceGroup, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroup, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroup: string,
    options?: FluidRelayServersListByResourceGroupOptionalParams
  ): AsyncIterableIterator<FluidRelayServer[]> {
    let result = await this._listByResourceGroup(resourceGroup, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroup,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroup: string,
    options?: FluidRelayServersListByResourceGroupOptionalParams
  ): AsyncIterableIterator<FluidRelayServer> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroup,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get a Fluid Relay server.
   * @param resourceGroup The resource group containing the resource.
   * @param fluidRelayServerName The Fluid Relay server resource name.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    fluidRelayServerName: string,
    options?: FluidRelayServersGetOptionalParams
  ): Promise<FluidRelayServersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, fluidRelayServerName, options },
      getOperationSpec
    );
  }

  /**
   * Create or Update a Fluid Relay server.
   * @param resourceGroup The resource group containing the resource.
   * @param fluidRelayServerName The Fluid Relay server resource name.
   * @param resource The details of the Fluid Relay server resource.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroup: string,
    fluidRelayServerName: string,
    resource: FluidRelayServer,
    options?: FluidRelayServersCreateOrUpdateOptionalParams
  ): Promise<FluidRelayServersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, fluidRelayServerName, resource, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Update a Fluid Relay server.
   * @param resourceGroup The resource group containing the resource.
   * @param fluidRelayServerName The Fluid Relay server resource name.
   * @param resource The details of the Fluid Relay server resource included in update calls.
   * @param options The options parameters.
   */
  update(
    resourceGroup: string,
    fluidRelayServerName: string,
    resource: FluidRelayServerUpdate,
    options?: FluidRelayServersUpdateOptionalParams
  ): Promise<FluidRelayServersUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, fluidRelayServerName, resource, options },
      updateOperationSpec
    );
  }

  /**
   * Delete a Fluid Relay server.
   * @param resourceGroup The resource group containing the resource.
   * @param fluidRelayServerName The Fluid Relay server resource name.
   * @param options The options parameters.
   */
  delete(
    resourceGroup: string,
    fluidRelayServerName: string,
    options?: FluidRelayServersDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroup, fluidRelayServerName, options },
      deleteOperationSpec
    );
  }

  /**
   * Regenerate the primary or secondary key for this server.
   * @param resourceGroup The resource group containing the resource.
   * @param fluidRelayServerName The Fluid Relay server resource name.
   * @param parameters The details of which keys to generate.
   * @param options The options parameters.
   */
  regenerateKey(
    resourceGroup: string,
    fluidRelayServerName: string,
    parameters: RegenerateKeyRequest,
    options?: FluidRelayServersRegenerateKeyOptionalParams
  ): Promise<FluidRelayServersRegenerateKeyResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, fluidRelayServerName, parameters, options },
      regenerateKeyOperationSpec
    );
  }

  /**
   * Get primary and secondary key for this server.
   * @param resourceGroup The resource group containing the resource.
   * @param fluidRelayServerName The Fluid Relay server resource name.
   * @param options The options parameters.
   */
  listKeys(
    resourceGroup: string,
    fluidRelayServerName: string,
    options?: FluidRelayServersListKeysOptionalParams
  ): Promise<FluidRelayServersListKeysResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, fluidRelayServerName, options },
      listKeysOperationSpec
    );
  }

  /**
   * List all Fluid Relay servers in a subscription.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: FluidRelayServersListBySubscriptionOptionalParams
  ): Promise<FluidRelayServersListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * List all Fluid Relay servers in a resource group.
   * @param resourceGroup The resource group containing the resource.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroup: string,
    options?: FluidRelayServersListByResourceGroupOptionalParams
  ): Promise<FluidRelayServersListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: FluidRelayServersListBySubscriptionNextOptionalParams
  ): Promise<FluidRelayServersListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroup The resource group containing the resource.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroup: string,
    nextLink: string,
    options?: FluidRelayServersListByResourceGroupNextOptionalParams
  ): Promise<FluidRelayServersListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.FluidRelay/fluidRelayServers/{fluidRelayServerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FluidRelayServer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.fluidRelayServerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.FluidRelay/fluidRelayServers/{fluidRelayServerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.FluidRelayServer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.fluidRelayServerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.FluidRelay/fluidRelayServers/{fluidRelayServerName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.FluidRelayServer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.fluidRelayServerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.FluidRelay/fluidRelayServers/{fluidRelayServerName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.fluidRelayServerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const regenerateKeyOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.FluidRelay/fluidRelayServers/{fluidRelayServerName}/regenerateKey",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.FluidRelayServerKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.fluidRelayServerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listKeysOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.FluidRelay/fluidRelayServers/{fluidRelayServerName}/listKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.FluidRelayServerKeys
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.fluidRelayServerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.FluidRelay/fluidRelayServers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FluidRelayServerList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.FluidRelay/fluidRelayServers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FluidRelayServerList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FluidRelayServerList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FluidRelayServerList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroup
  ],
  headerParameters: [Parameters.accept],
  serializer
};
