/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { FluidRelayContainers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { FluidRelayManagementClient } from "../fluidRelayManagementClient";
import {
  FluidRelayContainer,
  FluidRelayContainersListByFluidRelayServersNextOptionalParams,
  FluidRelayContainersListByFluidRelayServersOptionalParams,
  FluidRelayContainersGetOptionalParams,
  FluidRelayContainersGetResponse,
  FluidRelayContainersDeleteOptionalParams,
  FluidRelayContainersListByFluidRelayServersResponse,
  FluidRelayContainersListByFluidRelayServersNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing FluidRelayContainers operations. */
export class FluidRelayContainersImpl implements FluidRelayContainers {
  private readonly client: FluidRelayManagementClient;

  /**
   * Initialize a new instance of the class FluidRelayContainers class.
   * @param client Reference to the service client
   */
  constructor(client: FluidRelayManagementClient) {
    this.client = client;
  }

  /**
   * List all Fluid Relay containers which are children of a given Fluid Relay server.
   * @param resourceGroup The resource group containing the resource.
   * @param fluidRelayServerName The Fluid Relay server resource name.
   * @param options The options parameters.
   */
  public listByFluidRelayServers(
    resourceGroup: string,
    fluidRelayServerName: string,
    options?: FluidRelayContainersListByFluidRelayServersOptionalParams
  ): PagedAsyncIterableIterator<FluidRelayContainer> {
    const iter = this.listByFluidRelayServersPagingAll(
      resourceGroup,
      fluidRelayServerName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByFluidRelayServersPagingPage(
          resourceGroup,
          fluidRelayServerName,
          options
        );
      }
    };
  }

  private async *listByFluidRelayServersPagingPage(
    resourceGroup: string,
    fluidRelayServerName: string,
    options?: FluidRelayContainersListByFluidRelayServersOptionalParams
  ): AsyncIterableIterator<FluidRelayContainer[]> {
    let result = await this._listByFluidRelayServers(
      resourceGroup,
      fluidRelayServerName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByFluidRelayServersNext(
        resourceGroup,
        fluidRelayServerName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByFluidRelayServersPagingAll(
    resourceGroup: string,
    fluidRelayServerName: string,
    options?: FluidRelayContainersListByFluidRelayServersOptionalParams
  ): AsyncIterableIterator<FluidRelayContainer> {
    for await (const page of this.listByFluidRelayServersPagingPage(
      resourceGroup,
      fluidRelayServerName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get a Fluid Relay container.
   * @param resourceGroup The resource group containing the resource.
   * @param fluidRelayServerName The Fluid Relay server resource name.
   * @param fluidRelayContainerName The Fluid Relay container resource name.
   * @param options The options parameters.
   */
  get(
    resourceGroup: string,
    fluidRelayServerName: string,
    fluidRelayContainerName: string,
    options?: FluidRelayContainersGetOptionalParams
  ): Promise<FluidRelayContainersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, fluidRelayServerName, fluidRelayContainerName, options },
      getOperationSpec
    );
  }

  /**
   * Delete a Fluid Relay container.
   * @param resourceGroup The resource group containing the resource.
   * @param fluidRelayServerName The Fluid Relay server resource name.
   * @param fluidRelayContainerName The Fluid Relay container resource name.
   * @param options The options parameters.
   */
  delete(
    resourceGroup: string,
    fluidRelayServerName: string,
    fluidRelayContainerName: string,
    options?: FluidRelayContainersDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroup, fluidRelayServerName, fluidRelayContainerName, options },
      deleteOperationSpec
    );
  }

  /**
   * List all Fluid Relay containers which are children of a given Fluid Relay server.
   * @param resourceGroup The resource group containing the resource.
   * @param fluidRelayServerName The Fluid Relay server resource name.
   * @param options The options parameters.
   */
  private _listByFluidRelayServers(
    resourceGroup: string,
    fluidRelayServerName: string,
    options?: FluidRelayContainersListByFluidRelayServersOptionalParams
  ): Promise<FluidRelayContainersListByFluidRelayServersResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, fluidRelayServerName, options },
      listByFluidRelayServersOperationSpec
    );
  }

  /**
   * ListByFluidRelayServersNext
   * @param resourceGroup The resource group containing the resource.
   * @param fluidRelayServerName The Fluid Relay server resource name.
   * @param nextLink The nextLink from the previous successful call to the ListByFluidRelayServers
   *                 method.
   * @param options The options parameters.
   */
  private _listByFluidRelayServersNext(
    resourceGroup: string,
    fluidRelayServerName: string,
    nextLink: string,
    options?: FluidRelayContainersListByFluidRelayServersNextOptionalParams
  ): Promise<FluidRelayContainersListByFluidRelayServersNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroup, fluidRelayServerName, nextLink, options },
      listByFluidRelayServersNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.FluidRelay/fluidRelayServers/{fluidRelayServerName}/fluidRelayContainers/{fluidRelayContainerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FluidRelayContainer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.fluidRelayServerName,
    Parameters.fluidRelayContainerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.FluidRelay/fluidRelayServers/{fluidRelayServerName}/fluidRelayContainers/{fluidRelayContainerName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.fluidRelayServerName,
    Parameters.fluidRelayContainerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByFluidRelayServersOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.FluidRelay/fluidRelayServers/{fluidRelayServerName}/fluidRelayContainers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FluidRelayContainerList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.fluidRelayServerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByFluidRelayServersNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FluidRelayContainerList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroup,
    Parameters.fluidRelayServerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
