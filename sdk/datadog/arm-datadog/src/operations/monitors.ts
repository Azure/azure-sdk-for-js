/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/monitorsMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftDatadogClientContext } from "../microsoftDatadogClientContext";

/** Class representing a Monitors. */
export class Monitors {
  private readonly client: MicrosoftDatadogClientContext;

  /**
   * Create a Monitors.
   * @param {MicrosoftDatadogClientContext} client Reference to the service client.
   */
  constructor(client: MicrosoftDatadogClientContext) {
    this.client = client;
  }

  /**
   * @summary List the api keys for a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsListApiKeysResponse>
   */
  listApiKeys(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.MonitorsListApiKeysResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  listApiKeys(
    resourceGroupName: string,
    monitorName: string,
    callback: msRest.ServiceCallback<Models.DatadogApiKeyListResponse>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  listApiKeys(
    resourceGroupName: string,
    monitorName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.DatadogApiKeyListResponse>
  ): void;
  listApiKeys(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatadogApiKeyListResponse>,
    callback?: msRest.ServiceCallback<Models.DatadogApiKeyListResponse>
  ): Promise<Models.MonitorsListApiKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      listApiKeysOperationSpec,
      callback
    ) as Promise<Models.MonitorsListApiKeysResponse>;
  }

  /**
   * @summary Get the default api key.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsGetDefaultKeyResponse>
   */
  getDefaultKey(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.MonitorsGetDefaultKeyResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  getDefaultKey(
    resourceGroupName: string,
    monitorName: string,
    callback: msRest.ServiceCallback<Models.DatadogApiKey>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  getDefaultKey(
    resourceGroupName: string,
    monitorName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.DatadogApiKey>
  ): void;
  getDefaultKey(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatadogApiKey>,
    callback?: msRest.ServiceCallback<Models.DatadogApiKey>
  ): Promise<Models.MonitorsGetDefaultKeyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      getDefaultKeyOperationSpec,
      callback
    ) as Promise<Models.MonitorsGetDefaultKeyResponse>;
  }

  /**
   * @summary Set the default api key.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  setDefaultKey(
    resourceGroupName: string,
    monitorName: string,
    options?: Models.MonitorsSetDefaultKeyOptionalParams
  ): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  setDefaultKey(
    resourceGroupName: string,
    monitorName: string,
    callback: msRest.ServiceCallback<void>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  setDefaultKey(
    resourceGroupName: string,
    monitorName: string,
    options: Models.MonitorsSetDefaultKeyOptionalParams,
    callback: msRest.ServiceCallback<void>
  ): void;
  setDefaultKey(
    resourceGroupName: string,
    monitorName: string,
    options?: Models.MonitorsSetDefaultKeyOptionalParams | msRest.ServiceCallback<void>,
    callback?: msRest.ServiceCallback<void>
  ): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      setDefaultKeyOperationSpec,
      callback
    );
  }

  /**
   * @summary List the hosts for a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsListHostsResponse>
   */
  listHosts(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.MonitorsListHostsResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  listHosts(
    resourceGroupName: string,
    monitorName: string,
    callback: msRest.ServiceCallback<Models.DatadogHostListResponse>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  listHosts(
    resourceGroupName: string,
    monitorName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.DatadogHostListResponse>
  ): void;
  listHosts(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatadogHostListResponse>,
    callback?: msRest.ServiceCallback<Models.DatadogHostListResponse>
  ): Promise<Models.MonitorsListHostsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      listHostsOperationSpec,
      callback
    ) as Promise<Models.MonitorsListHostsResponse>;
  }

  /**
   * @summary List all Azure resources associated to the same Datadog organization as the target
   * resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsListLinkedResourcesResponse>
   */
  listLinkedResources(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.MonitorsListLinkedResourcesResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  listLinkedResources(
    resourceGroupName: string,
    monitorName: string,
    callback: msRest.ServiceCallback<Models.LinkedResourceListResponse>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  listLinkedResources(
    resourceGroupName: string,
    monitorName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.LinkedResourceListResponse>
  ): void;
  listLinkedResources(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedResourceListResponse>,
    callback?: msRest.ServiceCallback<Models.LinkedResourceListResponse>
  ): Promise<Models.MonitorsListLinkedResourcesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      listLinkedResourcesOperationSpec,
      callback
    ) as Promise<Models.MonitorsListLinkedResourcesResponse>;
  }

  /**
   * @summary List the resources currently being monitored by the Datadog monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsListMonitoredResourcesResponse>
   */
  listMonitoredResources(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.MonitorsListMonitoredResourcesResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  listMonitoredResources(
    resourceGroupName: string,
    monitorName: string,
    callback: msRest.ServiceCallback<Models.MonitoredResourceListResponse>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  listMonitoredResources(
    resourceGroupName: string,
    monitorName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.MonitoredResourceListResponse>
  ): void;
  listMonitoredResources(
    resourceGroupName: string,
    monitorName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.MonitoredResourceListResponse>,
    callback?: msRest.ServiceCallback<Models.MonitoredResourceListResponse>
  ): Promise<Models.MonitorsListMonitoredResourcesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      listMonitoredResourcesOperationSpec,
      callback
    ) as Promise<Models.MonitorsListMonitoredResourcesResponse>;
  }

  /**
   * @summary List all monitors under the specified subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.MonitorsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>
  ): void;
  list(
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>,
    callback?: msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>
  ): Promise<Models.MonitorsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback
    ) as Promise<Models.MonitorsListResponse>;
  }

  /**
   * @summary List all monitors under the specified resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsListByResourceGroupResponse>
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.MonitorsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listByResourceGroup(
    resourceGroupName: string,
    callback: msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(
    resourceGroupName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>
  ): void;
  listByResourceGroup(
    resourceGroupName: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>,
    callback?: msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>
  ): Promise<Models.MonitorsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback
    ) as Promise<Models.MonitorsListByResourceGroupResponse>;
  }

  /**
   * @summary Get the properties of a specific monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsGetResponse>
   */
  get(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.MonitorsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    monitorName: string,
    callback: msRest.ServiceCallback<Models.DatadogMonitorResource>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    monitorName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.DatadogMonitorResource>
  ): void;
  get(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatadogMonitorResource>,
    callback?: msRest.ServiceCallback<Models.DatadogMonitorResource>
  ): Promise<Models.MonitorsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      getOperationSpec,
      callback
    ) as Promise<Models.MonitorsGetResponse>;
  }

  /**
   * @summary Create a monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsCreateResponse>
   */
  create(
    resourceGroupName: string,
    monitorName: string,
    options?: Models.MonitorsCreateOptionalParams
  ): Promise<Models.MonitorsCreateResponse> {
    return this.beginCreate(resourceGroupName, monitorName, options).then((lroPoller) =>
      lroPoller.pollUntilFinished()
    ) as Promise<Models.MonitorsCreateResponse>;
  }

  /**
   * @summary Update a monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsUpdateResponse>
   */
  update(
    resourceGroupName: string,
    monitorName: string,
    options?: Models.MonitorsUpdateOptionalParams
  ): Promise<Models.MonitorsUpdateResponse> {
    return this.beginUpdate(resourceGroupName, monitorName, options).then((lroPoller) =>
      lroPoller.pollUntilFinished()
    ) as Promise<Models.MonitorsUpdateResponse>;
  }

  /**
   * @summary Delete a monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName, monitorName, options).then((lroPoller) =>
      lroPoller.pollUntilFinished()
    );
  }

  /**
   * @summary Refresh the set password link and return a latest one.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsRefreshSetPasswordLinkResponse>
   */
  refreshSetPasswordLink(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.MonitorsRefreshSetPasswordLinkResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  refreshSetPasswordLink(
    resourceGroupName: string,
    monitorName: string,
    callback: msRest.ServiceCallback<Models.DatadogSetPasswordLink>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  refreshSetPasswordLink(
    resourceGroupName: string,
    monitorName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.DatadogSetPasswordLink>
  ): void;
  refreshSetPasswordLink(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatadogSetPasswordLink>,
    callback?: msRest.ServiceCallback<Models.DatadogSetPasswordLink>
  ): Promise<Models.MonitorsRefreshSetPasswordLinkResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      refreshSetPasswordLinkOperationSpec,
      callback
    ) as Promise<Models.MonitorsRefreshSetPasswordLinkResponse>;
  }

  /**
   * @summary Create a monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(
    resourceGroupName: string,
    monitorName: string,
    options?: Models.MonitorsBeginCreateOptionalParams
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      beginCreateOperationSpec,
      options
    );
  }

  /**
   * @summary Update a monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(
    resourceGroupName: string,
    monitorName: string,
    options?: Models.MonitorsBeginUpdateOptionalParams
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      beginUpdateOperationSpec,
      options
    );
  }

  /**
   * @summary Delete a monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(
    resourceGroupName: string,
    monitorName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      beginDeleteMethodOperationSpec,
      options
    );
  }

  /**
   * @summary List the api keys for a given monitor resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsListApiKeysNextResponse>
   */
  listApiKeysNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.MonitorsListApiKeysNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listApiKeysNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.DatadogApiKeyListResponse>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listApiKeysNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.DatadogApiKeyListResponse>
  ): void;
  listApiKeysNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatadogApiKeyListResponse>,
    callback?: msRest.ServiceCallback<Models.DatadogApiKeyListResponse>
  ): Promise<Models.MonitorsListApiKeysNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listApiKeysNextOperationSpec,
      callback
    ) as Promise<Models.MonitorsListApiKeysNextResponse>;
  }

  /**
   * @summary List the hosts for a given monitor resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsListHostsNextResponse>
   */
  listHostsNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.MonitorsListHostsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listHostsNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.DatadogHostListResponse>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHostsNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.DatadogHostListResponse>
  ): void;
  listHostsNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatadogHostListResponse>,
    callback?: msRest.ServiceCallback<Models.DatadogHostListResponse>
  ): Promise<Models.MonitorsListHostsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listHostsNextOperationSpec,
      callback
    ) as Promise<Models.MonitorsListHostsNextResponse>;
  }

  /**
   * @summary List all Azure resources associated to the same Datadog organization as the target
   * resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsListLinkedResourcesNextResponse>
   */
  listLinkedResourcesNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.MonitorsListLinkedResourcesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listLinkedResourcesNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.LinkedResourceListResponse>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listLinkedResourcesNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.LinkedResourceListResponse>
  ): void;
  listLinkedResourcesNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedResourceListResponse>,
    callback?: msRest.ServiceCallback<Models.LinkedResourceListResponse>
  ): Promise<Models.MonitorsListLinkedResourcesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listLinkedResourcesNextOperationSpec,
      callback
    ) as Promise<Models.MonitorsListLinkedResourcesNextResponse>;
  }

  /**
   * @summary List the resources currently being monitored by the Datadog monitor resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsListMonitoredResourcesNextResponse>
   */
  listMonitoredResourcesNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.MonitorsListMonitoredResourcesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listMonitoredResourcesNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.MonitoredResourceListResponse>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listMonitoredResourcesNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.MonitoredResourceListResponse>
  ): void;
  listMonitoredResourcesNext(
    nextPageLink: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.MonitoredResourceListResponse>,
    callback?: msRest.ServiceCallback<Models.MonitoredResourceListResponse>
  ): Promise<Models.MonitorsListMonitoredResourcesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listMonitoredResourcesNextOperationSpec,
      callback
    ) as Promise<Models.MonitorsListMonitoredResourcesNextResponse>;
  }

  /**
   * @summary List all monitors under the specified subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsListNextResponse>
   */
  listNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.MonitorsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>
  ): void;
  listNext(
    nextPageLink: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>,
    callback?: msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>
  ): Promise<Models.MonitorsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback
    ) as Promise<Models.MonitorsListNextResponse>;
  }

  /**
   * @summary List all monitors under the specified resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitorsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.MonitorsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>
  ): void;
  listByResourceGroupNext(
    nextPageLink: string,
    options?:
      | msRest.RequestOptionsBase
      | msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>,
    callback?: msRest.ServiceCallback<Models.DatadogMonitorResourceListResponse>
  ): Promise<Models.MonitorsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback
    ) as Promise<Models.MonitorsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listApiKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/listApiKeys",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.monitorName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DatadogApiKeyListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getDefaultKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/getDefaultKey",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.monitorName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DatadogApiKey
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const setDefaultKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/setDefaultKey",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.monitorName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: ["options", "body"],
    mapper: Mappers.DatadogApiKey
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listHostsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/listHosts",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.monitorName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DatadogHostListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listLinkedResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/listLinkedResources",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.monitorName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.LinkedResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listMonitoredResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/listMonitoredResources",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.monitorName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.MonitoredResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Datadog/monitors",
  urlParameters: [Parameters.subscriptionId],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DatadogMonitorResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DatadogMonitorResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.monitorName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DatadogMonitorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const refreshSetPasswordLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/refreshSetPasswordLink",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.monitorName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DatadogSetPasswordLink
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.monitorName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: ["options", "body"],
    mapper: Mappers.DatadogMonitorResource
  },
  responses: {
    200: {
      bodyMapper: Mappers.DatadogMonitorResource
    },
    201: {
      bodyMapper: Mappers.DatadogMonitorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.monitorName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: ["options", "body"],
    mapper: Mappers.DatadogMonitorResourceUpdateParameters
  },
  responses: {
    200: {
      bodyMapper: Mappers.DatadogMonitorResource
    },
    201: {
      bodyMapper: Mappers.DatadogMonitorResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}",
  urlParameters: [Parameters.subscriptionId, Parameters.resourceGroupName, Parameters.monitorName],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listApiKeysNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DatadogApiKeyListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listHostsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DatadogHostListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listLinkedResourcesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.LinkedResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listMonitoredResourcesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.MonitoredResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DatadogMonitorResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DatadogMonitorResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
