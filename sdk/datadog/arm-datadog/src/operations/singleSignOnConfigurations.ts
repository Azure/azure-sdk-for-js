/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/singleSignOnConfigurationsMappers";
import * as Parameters from "../models/parameters";
import { MicrosoftDatadogClientContext } from "../microsoftDatadogClientContext";

/** Class representing a SingleSignOnConfigurations. */
export class SingleSignOnConfigurations {
  private readonly client: MicrosoftDatadogClientContext;

  /**
   * Create a SingleSignOnConfigurations.
   * @param {MicrosoftDatadogClientContext} client Reference to the service client.
   */
  constructor(client: MicrosoftDatadogClientContext) {
    this.client = client;
  }

  /**
   * @summary List the single sign-on configurations for a given monitor resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param [options] The optional parameters
   * @returns Promise<Models.SingleSignOnConfigurationsListResponse>
   */
  list(resourceGroupName: string, monitorName: string, options?: msRest.RequestOptionsBase): Promise<Models.SingleSignOnConfigurationsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param callback The callback
   */
  list(resourceGroupName: string, monitorName: string, callback: msRest.ServiceCallback<Models.DatadogSingleSignOnResourceListResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, monitorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatadogSingleSignOnResourceListResponse>): void;
  list(resourceGroupName: string, monitorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatadogSingleSignOnResourceListResponse>, callback?: msRest.ServiceCallback<Models.DatadogSingleSignOnResourceListResponse>): Promise<Models.SingleSignOnConfigurationsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SingleSignOnConfigurationsListResponse>;
  }

  /**
   * @summary Configures single-sign-on for this resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param configurationName Configuration name
   * @param [options] The optional parameters
   * @returns Promise<Models.SingleSignOnConfigurationsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, monitorName: string, configurationName: string, options?: Models.SingleSignOnConfigurationsCreateOrUpdateOptionalParams): Promise<Models.SingleSignOnConfigurationsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,monitorName,configurationName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SingleSignOnConfigurationsCreateOrUpdateResponse>;
  }

  /**
   * @summary Gets the datadog single sign-on resource for the given Monitor.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param configurationName Configuration name
   * @param [options] The optional parameters
   * @returns Promise<Models.SingleSignOnConfigurationsGetResponse>
   */
  get(resourceGroupName: string, monitorName: string, configurationName: string, options?: msRest.RequestOptionsBase): Promise<Models.SingleSignOnConfigurationsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param configurationName Configuration name
   * @param callback The callback
   */
  get(resourceGroupName: string, monitorName: string, configurationName: string, callback: msRest.ServiceCallback<Models.DatadogSingleSignOnResource>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param configurationName Configuration name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, monitorName: string, configurationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatadogSingleSignOnResource>): void;
  get(resourceGroupName: string, monitorName: string, configurationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatadogSingleSignOnResource>, callback?: msRest.ServiceCallback<Models.DatadogSingleSignOnResource>): Promise<Models.SingleSignOnConfigurationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        monitorName,
        configurationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SingleSignOnConfigurationsGetResponse>;
  }

  /**
   * @summary Configures single-sign-on for this resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param monitorName Monitor resource name
   * @param configurationName Configuration name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, monitorName: string, configurationName: string, options?: Models.SingleSignOnConfigurationsBeginCreateOrUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        monitorName,
        configurationName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * @summary List the single sign-on configurations for a given monitor resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SingleSignOnConfigurationsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SingleSignOnConfigurationsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DatadogSingleSignOnResourceListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatadogSingleSignOnResourceListResponse>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatadogSingleSignOnResourceListResponse>, callback?: msRest.ServiceCallback<Models.DatadogSingleSignOnResourceListResponse>): Promise<Models.SingleSignOnConfigurationsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.SingleSignOnConfigurationsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/singleSignOnConfigurations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatadogSingleSignOnResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/singleSignOnConfigurations/{configurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatadogSingleSignOnResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/singleSignOnConfigurations/{configurationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.monitorName,
    Parameters.configurationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.DatadogSingleSignOnResource
  },
  responses: {
    200: {
      bodyMapper: Mappers.DatadogSingleSignOnResource
    },
    201: {
      bodyMapper: Mappers.DatadogSingleSignOnResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatadogSingleSignOnResourceListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
