/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { CreationSupported } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftDatadogClient } from "../microsoftDatadogClient";
import {
  CreateResourceSupportedResponse,
  CreationSupportedListOptionalParams,
  CreationSupportedListResponse,
  CreationSupportedGetOptionalParams,
  CreationSupportedGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CreationSupported operations. */
export class CreationSupportedImpl implements CreationSupported {
  private readonly client: MicrosoftDatadogClient;

  /**
   * Initialize a new instance of the class CreationSupported class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftDatadogClient) {
    this.client = client;
  }

  /**
   * Informs if the current subscription is being already monitored for selected Datadog organization.
   * @param datadogOrganizationId Datadog Organization Id
   * @param options The options parameters.
   */
  public list(
    datadogOrganizationId: string,
    options?: CreationSupportedListOptionalParams
  ): PagedAsyncIterableIterator<CreateResourceSupportedResponse> {
    const iter = this.listPagingAll(datadogOrganizationId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(datadogOrganizationId, options, settings);
      }
    };
  }

  private async *listPagingPage(
    datadogOrganizationId: string,
    options?: CreationSupportedListOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<CreateResourceSupportedResponse[]> {
    let result: CreationSupportedListResponse;
    result = await this._list(datadogOrganizationId, options);
    yield result.value || [];
  }

  private async *listPagingAll(
    datadogOrganizationId: string,
    options?: CreationSupportedListOptionalParams
  ): AsyncIterableIterator<CreateResourceSupportedResponse> {
    for await (const page of this.listPagingPage(
      datadogOrganizationId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Informs if the current subscription is being already monitored for selected Datadog organization.
   * @param datadogOrganizationId Datadog Organization Id
   * @param options The options parameters.
   */
  private _list(
    datadogOrganizationId: string,
    options?: CreationSupportedListOptionalParams
  ): Promise<CreationSupportedListResponse> {
    return this.client.sendOperationRequest(
      { datadogOrganizationId, options },
      listOperationSpec
    );
  }

  /**
   * Informs if the current subscription is being already monitored for selected Datadog organization.
   * @param datadogOrganizationId Datadog Organization Id
   * @param options The options parameters.
   */
  get(
    datadogOrganizationId: string,
    options?: CreationSupportedGetOptionalParams
  ): Promise<CreationSupportedGetResponse> {
    return this.client.sendOperationRequest(
      { datadogOrganizationId, options },
      getOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Datadog/subscriptionStatuses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CreateResourceSupportedResponseList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.datadogOrganizationId],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Datadog/subscriptionStatuses/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CreateResourceSupportedResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.datadogOrganizationId],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
