/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ContainerHostMappings } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DevSpacesManagementClient } from "../devSpacesManagementClient";
import {
  ContainerHostMapping,
  ContainerHostMappingsGetContainerHostMappingOptionalParams,
  ContainerHostMappingsGetContainerHostMappingResponse
} from "../models";

/** Class containing ContainerHostMappings operations. */
export class ContainerHostMappingsImpl implements ContainerHostMappings {
  private readonly client: DevSpacesManagementClient;

  /**
   * Initialize a new instance of the class ContainerHostMappings class.
   * @param client Reference to the service client
   */
  constructor(client: DevSpacesManagementClient) {
    this.client = client;
  }

  /**
   * Returns container host mapping object for a container host resource ID if an associated controller
   * exists.
   * @param resourceGroupName Resource group to which the resource belongs.
   * @param location Location of the container host.
   * @param containerHostMapping Container host mapping object specifying the Container host resource ID
   *                             and its associated Controller resource.
   * @param options The options parameters.
   */
  getContainerHostMapping(
    resourceGroupName: string,
    location: string,
    containerHostMapping: ContainerHostMapping,
    options?: ContainerHostMappingsGetContainerHostMappingOptionalParams
  ): Promise<ContainerHostMappingsGetContainerHostMappingResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, location, containerHostMapping, options },
      getContainerHostMappingOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getContainerHostMappingOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/locations/{location}/checkContainerHostMapping",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ContainerHostMapping
    },
    204: {},
    default: {
      bodyMapper: Mappers.DevSpacesErrorResponse
    }
  },
  requestBody: Parameters.containerHostMapping,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
