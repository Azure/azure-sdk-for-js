/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Base tracked resource type for all PATCH updates.
 */
export interface TrackedResourceUpdate {
  /**
   * Resource tags.
   */
  tags?: string[];
}

/**
 * Profile for how to handle shutting down virtual machines.
 */
export interface AutoShutdownProfile {
  /**
   * Whether shutdown on disconnect is enabled. Possible values include: 'Enabled', 'Disabled'
   */
  shutdownOnDisconnect?: EnableState;
  /**
   * Whether a VM will get shutdown when it hasn't been connected to after a period of time.
   * Possible values include: 'Enabled', 'Disabled'
   */
  shutdownWhenNotConnected?: EnableState;
  /**
   * Whether a VM will get shutdown when it has idled for a period of time. Possible values
   * include: 'None', 'UserAbsence', 'LowUsage'
   */
  shutdownOnIdle?: ShutdownOnIdleMode;
  /**
   * The amount of time a VM will stay running after a user disconnects if this behavior is
   * enabled.
   */
  disconnectDelay?: string;
  /**
   * The amount of time a VM will stay running before it is shutdown if no connection is made and
   * this behavior is enabled.
   */
  noConnectDelay?: string;
  /**
   * The amount of time a VM will idle before it is shutdown if this behavior is enabled.
   */
  idleDelay?: string;
}

/**
 * Connection profile for how users connect to lab virtual machines.
 */
export interface ConnectionProfile {
  /**
   * The enabled access level for Web Access over SSH. Possible values include: 'Public',
   * 'Private', 'None'
   */
  webSshAccess?: ConnectionType;
  /**
   * The enabled access level for Web Access over RDP. Possible values include: 'Public',
   * 'Private', 'None'
   */
  webRdpAccess?: ConnectionType;
  /**
   * The enabled access level for Client Access over SSH. Possible values include: 'Public',
   * 'Private', 'None'
   */
  clientSshAccess?: ConnectionType;
  /**
   * The enabled access level for Client Access over RDP. Possible values include: 'Public',
   * 'Private', 'None'
   */
  clientRdpAccess?: ConnectionType;
}

/**
 * The resource management error additional info.
 */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The additional info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly info?: any;
}

/**
 * The error detail.
 */
export interface ErrorDetail {
  /**
   * The error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * The error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The error target.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly target?: string;
  /**
   * The error details.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/**
 * Common error response for all Azure Resource Manager APIs to return error details for failed
 * operations. (This also follows the OData error response format.).
 * @summary Error response
 */
export interface ErrorResponse {
  /**
   * The error object.
   */
  error?: ErrorDetail;
}

/**
 * Localized display information for this particular operation.
 */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring
   * Insights" or "Microsoft Compute".
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual
   * Machines" or "Job Schedule Collections".
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create
   * or Update Virtual Machine", "Restart Virtual Machine".
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and
   * detailed views.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
}

/**
 * Details of a REST API operation, returned from the Resource Provider Operations API
 * @summary REST API Operation
 */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
   * "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and
   * "false" for ARM/control-plane operations.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isDataAction?: boolean;
  /**
   * Localized display information for this particular operation.
   */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
   * logs UX. Default value is "user,system". Possible values include: 'user', 'system',
   * 'user,system'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * Possible values include: 'Internal'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly actionType?: ActionType;
}

/**
 * A long running operation result
 */
export interface OperationResult {
  /**
   * Fully qualified resource ID for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The operation status. Possible values include: 'NotStarted', 'InProgress', 'Succeeded',
   * 'Failed', 'Canceled'
   */
  status: OperationStatus;
  /**
   * Start time
   */
  startTime?: Date;
  /**
   * End time
   */
  endTime?: Date;
  /**
   * Percent completion
   */
  percentComplete?: number;
  /**
   * The error for a failure if the operation failed.
   */
  error?: ErrorDetail;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemData {
  /**
   * The identity that created the resource.
   */
  createdBy?: string;
  /**
   * The type of identity that created the resource. Possible values include: 'User',
   * 'Application', 'ManagedIdentity', 'Key'
   */
  createdByType?: CreatedByType;
  /**
   * The timestamp of resource creation (UTC).
   */
  createdAt?: Date;
  /**
   * The identity that last modified the resource.
   */
  lastModifiedBy?: string;
  /**
   * The type of identity that last modified the resource. Possible values include: 'User',
   * 'Application', 'ManagedIdentity', 'Key'
   */
  lastModifiedByType?: CreatedByType;
  /**
   * The timestamp of resource last modification (UTC)
   */
  lastModifiedAt?: Date;
}

/**
 * Common fields that are returned in the response for all Azure Resource Manager resources
 * @summary Resource
 */
export interface Resource extends BaseResource {
  /**
   * Fully qualified resource ID for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
   * "Microsoft.Storage/storageAccounts"
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The resource model definition for an Azure Resource Manager tracked top level resource which has
 * 'tags' and a 'location'
 * @summary Tracked Resource
 */
export interface TrackedResource extends Resource {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The geo-location where the resource lives
   */
  location: string;
}

/**
 * Lab Plans act as a permission container for creating labs via labs.azure.com. Additionally, they
 * can provide a set of default configurations that will apply at the time of creating a lab, but
 * these defaults can still be overwritten.
 */
export interface LabPlan extends TrackedResource {
  /**
   * Metadata pertaining to creation and last modification of the lab plan.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemData?: SystemData;
  /**
   * The default lab connection profile. This can be changed on a lab resource and only provides a
   * default profile.
   */
  defaultConnectionProfile?: ConnectionProfile;
  /**
   * The default lab shutdown profile. This can be changed on a lab resource and only provides a
   * default profile.
   */
  defaultAutoShutdownProfile?: AutoShutdownProfile;
  /**
   * The lab plan network profile. To enforce lab network policies they must be defined here and
   * cannot be changed when there are existing labs associated with this lab plan.
   */
  defaultNetworkProfile?: LabPlanNetworkProfile;
  /**
   * The allowed regions for the lab creator to use when creating labs using this lab plan.
   */
  allowedRegions?: string[];
  /**
   * Resource ID of the Shared Image Gallery attached to this lab plan. When saving a lab template
   * virtual machine image it will be persisted in this gallery. Shared images from the gallery can
   * be made available to use when creating new labs.
   */
  sharedGalleryId?: string;
  /**
   * Support contact information and instructions for users of the lab plan. This information is
   * displayed to lab owners and virtual machine users for all labs in the lab plan.
   */
  supportInfo?: SupportInfo;
  /**
   * Base Url of the lms instance this lab plan can link lab rosters against.
   */
  linkedLmsInstance?: string;
  /**
   * Current provisioning state of the lab plan. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Failed', 'Locked'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * Profile for how to handle networking for Lab Plans.
 */
export interface LabPlanNetworkProfile {
  /**
   * The external subnet resource id
   */
  subnetId?: string;
}

/**
 * Support contact information and instructions.
 */
export interface SupportInfo {
  /**
   * Support web address.
   */
  url?: string;
  /**
   * Support contact email address.
   */
  email?: string;
  /**
   * Support contact phone number.
   */
  phone?: string;
  /**
   * Support instructions.
   */
  instructions?: string;
}

/**
 * Contains lab configuration and default settings. This variant is used for PATCH.
 */
export interface LabPlanUpdate extends TrackedResourceUpdate {
  /**
   * The default lab connection profile. This can be changed on a lab resource and only provides a
   * default profile.
   */
  defaultConnectionProfile?: ConnectionProfile;
  /**
   * The default lab shutdown profile. This can be changed on a lab resource and only provides a
   * default profile.
   */
  defaultAutoShutdownProfile?: AutoShutdownProfile;
  /**
   * The lab plan network profile. To enforce lab network policies they must be defined here and
   * cannot be changed when there are existing labs associated with this lab plan.
   */
  defaultNetworkProfile?: LabPlanNetworkProfile;
  /**
   * The allowed regions for the lab creator to use when creating labs using this lab plan.
   */
  allowedRegions?: string[];
  /**
   * Resource ID of the Shared Image Gallery attached to this lab plan. When saving a lab template
   * virtual machine image it will be persisted in this gallery. Shared images from the gallery can
   * be made available to use when creating new labs.
   */
  sharedGalleryId?: string;
  /**
   * Support contact information and instructions for users of the lab plan. This information is
   * displayed to lab owners and virtual machine users for all labs in the lab plan.
   */
  supportInfo?: SupportInfo;
  /**
   * Base Url of the lms instance this lab plan can link lab rosters against.
   */
  linkedLmsInstance?: string;
}

/**
 * Body for the save image POST
 */
export interface SaveImageBody {
  /**
   * The name for the image we create.
   */
  name?: string;
  /**
   * The ID of the lab virtual machine you want to save an image from.
   */
  labVirtualMachineId?: string;
}

/**
 * The resource model definition for a Azure Resource Manager proxy resource. It will not have tags
 * and a location
 * @summary Proxy Resource
 */
export interface ProxyResource extends Resource {
}

/**
 * The resource model definition for an Azure Resource Manager resource with an etag.
 * @summary Entity Resource
 */
export interface AzureEntityResource extends Resource {
  /**
   * Resource Etag.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
}

/**
 * Lab services virtual machine image
 */
export interface Image extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the image.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemData?: SystemData;
  /**
   * Is the image enabled. Possible values include: 'Enabled', 'Disabled'
   */
  enabledState?: EnableState;
  /**
   * Current provisioning state of the image. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Failed', 'Locked'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The image display name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayName?: string;
  /**
   * A description of the image.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * URL of the image icon.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly iconUrl?: string;
  /**
   * The image author.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly author?: string;
  /**
   * The OS Type of the image. Possible values include: 'Windows', 'Linux'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly osType?: OsType;
  /**
   * The ID of marketplace plan associated with the image (optional).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly plan?: string;
  /**
   * The status of image terms of use (enabled = accepted, disabled = not accepted). Possible
   * values include: 'Enabled', 'Disabled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly termsStatus?: EnableState;
  /**
   * The ID of an offer associated with the image.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly offer?: string;
  /**
   * The ID of the publisher of the image.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly publisher?: string;
  /**
   * The image SKU.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sku?: string;
  /**
   * The image version.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly version?: string;
  /**
   * The ID for the image in the shared gallery.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sharedGalleryId?: string;
  /**
   * The available regions of the image in the shared gallery.
   */
  availableRegions?: string[];
  /**
   * The OS State of the image. Possible values include: 'Generalized', 'Specialized'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly osState?: OsState;
}

/**
 * Lab services virtual machine image for updates.
 */
export interface ImageUpdate {
  /**
   * Is the image enabled. Possible values include: 'Enabled', 'Disabled'
   */
  enabledState?: EnableState;
}

/**
 * Profile for how to handle networking for Labs.
 */
export interface LabNetworkProfile {
  /**
   * The external subnet resource id
   */
  subnetId?: string;
  /**
   * The external load balancer resource id
   */
  loadBalancerId?: string;
  /**
   * The external public IP resource id
   */
  publicIpId?: string;
}

/**
 * The lab resource.
 */
export interface Lab extends TrackedResource {
  /**
   * Metadata pertaining to creation and last modification of the lab.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemData?: SystemData;
  /**
   * The resource auto shutdown configuration for the lab. This controls whether actions are taken
   * on resources that are sitting idle.
   */
  autoShutdownProfile?: AutoShutdownProfile;
  /**
   * The connection profile for the lab. This controls settings such as web access to lab resources
   * or whether RDP or SSH ports are open.
   */
  connectionProfile?: ConnectionProfile;
  /**
   * The profile used for creating lab virtual machines.
   */
  virtualMachineProfile?: VirtualMachineProfile;
  /**
   * The lab security profile.
   */
  securityProfile?: SecurityProfile;
  /**
   * The lab user list management profile.
   */
  rosterProfile?: RosterProfile;
  /**
   * The ID of the lab plan. Used during resource creation to provide defaults and acts as a
   * permission container when creating a lab via labs.azure.com. Setting a labPlanId on an
   * existing lab provides organization..
   */
  labPlanId?: string;
  /**
   * The title of the lab.
   */
  title?: string;
  /**
   * The description of the lab.
   */
  description?: string;
  /**
   * Current provisioning state of the lab. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Failed', 'Locked'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The network profile for the lab, typically applied via a lab plan. This profile cannot be
   * modified once a lab has been created.
   */
  networkProfile?: LabNetworkProfile;
  /**
   * The lab state. Possible values include: 'Draft', 'Publishing', 'Scaling', 'Syncing',
   * 'Published'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: LabState;
}

/**
 * Image reference information. Used in the virtual machine profile.
 */
export interface ImageReference {
  /**
   * Image resource ID
   */
  id?: string;
  /**
   * The image offer if applicable.
   */
  offer?: string;
  /**
   * The image publisher
   */
  publisher?: string;
  /**
   * The image SKU
   */
  sku?: string;
  /**
   * The image version specified on creation.
   */
  version?: string;
  /**
   * The actual version of the image after use.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly exactVersion?: string;
}

/**
 * The resource model definition representing SKU
 */
export interface Sku {
  /**
   * The name of the SKU. Ex - P3. It is typically a letter+number code
   */
  name: string;
  /**
   * This field is required to be implemented by the Resource Provider if the service has more than
   * one tier, but is not required on a PUT. Possible values include: 'Free', 'Basic', 'Standard',
   * 'Premium'
   */
  tier?: SkuTier;
  /**
   * The SKU size. When the name field is the combination of tier and some other value, this would
   * be the standalone code.
   */
  size?: string;
  /**
   * If the service has different generations of hardware, for the same SKU, then that can be
   * captured here.
   */
  family?: string;
  /**
   * If the SKU supports scale out/in then the capacity integer should be included. If scale out/in
   * is not possible for the resource this may be omitted.
   */
  capacity?: number;
}

/**
 * The additional capabilities for a lab VM.
 */
export interface VirtualMachineAdditionalCapabilities {
  /**
   * Flag to pre-install dedicated GPU drivers. Possible values include: 'Enabled', 'Disabled'
   */
  installGpuDrivers?: EnableState;
}

/**
 * Credentials for a user on a lab VM.
 */
export interface Credentials {
  /**
   * The username to use when signing in to lab VMs.
   */
  username: string;
  /**
   * The password for the user. This is required for the TemplateVM createOption.
   */
  password?: string;
}

/**
 * The base virtual machine configuration for a lab.
 */
export interface VirtualMachineProfile {
  /**
   * Indicates what lab virtual machines are created from. Possible values include: 'Image',
   * 'TemplateVM'
   */
  createOption: CreateOption;
  /**
   * The image configuration for lab virtual machines.
   */
  imageReference: ImageReference;
  /**
   * The OS type of the image. Possible values include: 'Windows', 'Linux'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly osType?: OsType;
  /**
   * The SKU for the lab. Defines the type of virtual machines used in the lab.
   */
  sku: Sku;
  /**
   * Additional VM capabilities.
   */
  additionalCapabilities?: VirtualMachineAdditionalCapabilities;
  /**
   * The initial quota alloted to each lab user. Must be a time span between 0 and 9999 hours.
   */
  usageQuota: string;
  /**
   * Enabling this option will use the same password for all user VMs. Possible values include:
   * 'Enabled', 'Disabled'
   */
  useSharedPassword?: EnableState;
  /**
   * Credentials for the admin user on the VM.
   */
  adminUser: Credentials;
  /**
   * Credentials for the non-admin user on the VM, if one exists.
   */
  nonAdminUser?: Credentials;
}

/**
 * The lab security profile.
 */
export interface SecurityProfile {
  /**
   * The registration code for the lab.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly registrationCode?: string;
  /**
   * Whether any user or only specified users can register to a lab. Possible values include:
   * 'Enabled', 'Disabled'
   */
  openAccess?: EnableState;
}

/**
 * The lab user list management profile.
 */
export interface RosterProfile {
  /**
   * The AAD group ID which this lab roster is populated from. Having this set enables AAD sync
   * mode.
   */
  activeDirectoryGroupId?: string;
  /**
   * The unique context identifier for the lab in the lms.
   */
  ltiContextId?: string;
  /**
   * The base URI identifying the lms instance.
   */
  lmsInstance?: string;
  /**
   * The unique id of the azure lab services tool in the lms.
   */
  ltiClientId?: string;
  /**
   * The uri of the names and roles service endpoint on the lms for the class attached to this lab.
   */
  ltiRosterEndpoint?: string;
}

/**
 * The lab resource for updates.
 */
export interface LabUpdate extends TrackedResourceUpdate {
  /**
   * The resource auto shutdown configuration for the lab. This controls whether actions are taken
   * on resources that are sitting idle.
   */
  autoShutdownProfile?: AutoShutdownProfile;
  /**
   * The connection profile for the lab. This controls settings such as web access to lab resources
   * or whether RDP or SSH ports are open.
   */
  connectionProfile?: ConnectionProfile;
  /**
   * The profile used for creating lab virtual machines.
   */
  virtualMachineProfile?: VirtualMachineProfile;
  /**
   * The lab security profile.
   */
  securityProfile?: SecurityProfile;
  /**
   * The lab user list management profile.
   */
  rosterProfile?: RosterProfile;
  /**
   * The ID of the lab plan. Used during resource creation to provide defaults and acts as a
   * permission container when creating a lab via labs.azure.com. Setting a labPlanId on an
   * existing lab provides organization..
   */
  labPlanId?: string;
  /**
   * The title of the lab.
   */
  title?: string;
  /**
   * The description of the lab.
   */
  description?: string;
}

/**
 * Identity for the resource.
 */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * The identity type. Possible values include: 'SystemAssigned'
   */
  type?: ResourceIdentityType;
}

/**
 * An interface representing ResourceModelWithAllowedPropertySetIdentity.
 */
export interface ResourceModelWithAllowedPropertySetIdentity extends Identity {
}

/**
 * An interface representing ResourceModelWithAllowedPropertySetSku.
 */
export interface ResourceModelWithAllowedPropertySetSku extends Sku {
}

/**
 * Plan for the resource.
 */
export interface Plan {
  /**
   * A user defined name of the 3rd Party Artifact that is being procured.
   */
  name: string;
  /**
   * The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
   */
  publisher: string;
  /**
   * The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID
   * specified for the artifact at the time of Data Market onboarding.
   */
  product: string;
  /**
   * A publisher provided promotion code as provisioned in Data Market for the said
   * product/artifact.
   */
  promotionCode?: string;
  /**
   * The version of the desired product/artifact.
   */
  version?: string;
}

/**
 * An interface representing ResourceModelWithAllowedPropertySetPlan.
 */
export interface ResourceModelWithAllowedPropertySetPlan extends Plan {
}

/**
 * The resource model definition containing the full set of allowed properties for a resource.
 * Except properties bag, there cannot be a top level property outside of this set.
 */
export interface ResourceModelWithAllowedPropertySet extends BaseResource {
  /**
   * Fully qualified resource ID for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
   * "Microsoft.Storage/storageAccounts"
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The geo-location where the resource lives
   */
  location?: string;
  /**
   * The fully qualified resource ID of the resource that manages this resource. Indicates if this
   * resource is managed by another Azure resource. If this is present, complete mode deployment
   * will not delete the resource if it is removed from the template since it is managed by another
   * resource.
   */
  managedBy?: string;
  /**
   * Metadata used by portal/tooling/etc to render different UX experiences for resources of the
   * same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource
   * provider must validate and persist this value.
   */
  kind?: string;
  /**
   * The etag field is *not* required. If it is provided in the response body, it must also be
   * provided as a header per the normal etag convention.  Entity tags are used for comparing two
   * or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag
   * (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range
   * (section 14.27) header fields.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  identity?: ResourceModelWithAllowedPropertySetIdentity;
  sku?: ResourceModelWithAllowedPropertySetSku;
  plan?: ResourceModelWithAllowedPropertySetPlan;
}

/**
 * User of a lab that can register for and use virtual machines within the lab.
 */
export interface User extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the user resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemData?: SystemData;
  /**
   * The amount of usage quota time the user gets in addition to the lab usage quota.
   */
  additionalUsageQuota?: string;
  /**
   * Current provisioning state of the user resource. Possible values include: 'Creating',
   * 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Locked'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Display name of the user, for example user's full name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayName?: string;
  /**
   * Email address of the user.
   */
  email: string;
  /**
   * State of the user's registration within the lab. Possible values include: 'Registered',
   * 'NotRegistered'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly registrationState?: RegistrationState;
  /**
   * State of the invitation message for the user. Possible values include: 'NotSent', 'Sending',
   * 'Sent', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly invitationState?: InvitationState;
  /**
   * Date and time when the invitation message was sent to the user.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly invitationSent?: Date;
  /**
   * How long the user has used their virtual machines in this lab.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalUsage?: string;
}

/**
 * User of a lab that can register for and use virtual machines within the lab. Used for updates.
 */
export interface UserUpdate {
  /**
   * The amount of usage quota time the user gets in addition to the lab usage quota.
   */
  additionalUsageQuota?: string;
}

/**
 * Body for a user invite request
 */
export interface InviteBody {
  /**
   * Custom text for the invite email.
   */
  text?: string;
}

/**
 * The connection information for the virtual machine
 */
export interface VirtualMachineConnectionProfile {
  /**
   * The private IP address of the virtual machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly privateIpAddress?: string;
  /**
   * Port and host name separated by semicolon for connecting via SSH protocol to the virtual
   * machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sshAuthority?: string;
  /**
   * URL for connecting via SSH protocol to the virtual machine in browser.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sshInBrowserUrl?: string;
  /**
   * Port and host name separated by semicolon for connecting via RDP protocol to the virtual
   * machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly rdpAuthority?: string;
  /**
   * URL for connecting via RDP protocol to the virtual machine in browser.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly rdpInBrowserUrl?: string;
  /**
   * The username used to log on to the virtual machine as admin.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly adminUsername?: string;
  /**
   * The username used to log on to the virtual machine as non-admin, if one exists.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nonAdminUsername?: string;
}

/**
 * A lab virtual machine resource.
 */
export interface VirtualMachine extends ProxyResource {
  /**
   * System data of the Lab virtual machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemData?: SystemData;
  /**
   * Current provisioning state of the virtual machine. Possible values include: 'Creating',
   * 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Locked'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The current state of the virtual machine. Possible values include: 'Stopped', 'Starting',
   * 'Running', 'Stopping', 'ResettingPassword', 'Reimaging', 'Redeploying'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: VirtualMachineState;
  /**
   * Profile for information about connecting to the virtual machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectionProfile?: VirtualMachineConnectionProfile;
  /**
   * The lab user ID (not the PUID!) of who claimed the virtual machine.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly claimedByUserId?: string;
  /**
   * The type of this VM resource. Possible values include: 'User', 'Template'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly vmType?: VirtualMachineType;
}

/**
 * Body of a reset password request.
 */
export interface ResetPasswordBody {
  /**
   * The user whose password is being reset
   */
  username: string;
  /**
   * The password
   */
  password: string;
}

/**
 * Schedule for automatically turning virtual machines in a lab on and off at specified times.
 */
export interface Schedule extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the schedule.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemData?: SystemData;
  /**
   * When lab user virtual machines will be started. Timestamp offsets will be ignored and
   * timeZoneId is used instead.
   */
  startAt?: Date;
  /**
   * When lab user virtual machines will be stopped. Timestamp offsets will be ignored and
   * timeZoneId is used instead.
   */
  stopAt?: Date;
  /**
   * The recurrence pattern of the scheduled actions.
   */
  recurrencePattern?: RecurrencePattern;
  /**
   * The IANA timezone id for the schedule.
   */
  timeZoneId?: string;
  /**
   * Notes for this schedule.
   */
  notes?: string;
  /**
   * Current provisioning state of the schedule. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Failed', 'Locked'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * Recurrence pattern of a lab schedule.
 */
export interface RecurrencePattern {
  /**
   * The frequency of the recurrence. Possible values include: 'Daily', 'Weekly'
   */
  frequency: RecurrenceFrequency;
  /**
   * The week days the schedule runs. Used for when the Frequency is set to Weekly.
   */
  weekDays?: WeekDay[];
  /**
   * The interval to invoke the schedule on. For example, interval = 2 and
   * RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of
   * 1 is used.
   */
  interval?: number;
  /**
   * When the recurrence will expire. This date is inclusive.
   */
  expirationDate: Date;
}

/**
 * Schedule for automatically turning virtual machines in a lab on and off at specified times. Used
 * for updates.
 */
export interface ScheduleUpdate {
  /**
   * When lab user virtual machines will be started. Timestamp offsets will be ignored and
   * timeZoneId is used instead.
   */
  startAt?: Date;
  /**
   * When lab user virtual machines will be stopped. Timestamp offsets will be ignored and
   * timeZoneId is used instead.
   */
  stopAt?: Date;
  /**
   * The recurrence pattern of the scheduled actions.
   */
  recurrencePattern?: RecurrencePattern;
  /**
   * The IANA timezone id for the schedule.
   */
  timeZoneId?: string;
  /**
   * Notes for this schedule.
   */
  notes?: string;
}

/**
 * Optional Parameters.
 */
export interface LabPlansListBySubscriptionOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface LabPlansListBySubscriptionNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface ImagesListByLabPlanOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface ImagesListByLabPlanNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface LabsListBySubscriptionOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface LabsListBySubscriptionNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface UsersListByLabOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface UsersListByLabNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface VirtualMachinesListByLabOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface VirtualMachinesListByLabNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface SchedulesListByLabOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface SchedulesListByLabNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply to the operation.
   */
  filter?: string;
}

/**
 * An interface representing LabServicesClientOptions.
 */
export interface LabServicesClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
 * to get the next set of results.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * URL to get the next set of operation list results (if there are any).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Paged list of lab plans.
 * @extends Array<LabPlan>
 */
export interface PagedLabPlans extends Array<LabPlan> {
  /**
   * The link to get the next page of lab plan results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Paged list of Lab services virtual machine images.
 * @extends Array<Image>
 */
export interface PagedImages extends Array<Image> {
  /**
   * The link to get the next page of image results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Paged list of labs.
 * @extends Array<Lab>
 */
export interface PagedLabs extends Array<Lab> {
  /**
   * The link to get the next page of image results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Paged list of users.
 * @extends Array<User>
 */
export interface PagedUsers extends Array<User> {
  /**
   * The link to get the next page of image results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Paged list of lab services virtual machines.
 * @extends Array<VirtualMachine>
 */
export interface PagedVirtualMachines extends Array<VirtualMachine> {
  /**
   * The link to get the next page of virtual machine results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Paged list of schedules.
 * @extends Array<Schedule>
 */
export interface PagedSchedules extends Array<Schedule> {
  /**
   * The link to get the next page of schedule results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Locked'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState = 'Creating' | 'Updating' | 'Deleting' | 'Succeeded' | 'Failed' | 'Locked';

/**
 * Defines values for EnableState.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type EnableState = 'Enabled' | 'Disabled';

/**
 * Defines values for ConnectionType.
 * Possible values include: 'Public', 'Private', 'None'
 * @readonly
 * @enum {string}
 */
export type ConnectionType = 'Public' | 'Private' | 'None';

/**
 * Defines values for OsType.
 * Possible values include: 'Windows', 'Linux'
 * @readonly
 * @enum {string}
 */
export type OsType = 'Windows' | 'Linux';

/**
 * Defines values for OsState.
 * Possible values include: 'Generalized', 'Specialized'
 * @readonly
 * @enum {string}
 */
export type OsState = 'Generalized' | 'Specialized';

/**
 * Defines values for ShutdownOnIdleMode.
 * Possible values include: 'None', 'UserAbsence', 'LowUsage'
 * @readonly
 * @enum {string}
 */
export type ShutdownOnIdleMode = 'None' | 'UserAbsence' | 'LowUsage';

/**
 * Defines values for Origin.
 * Possible values include: 'user', 'system', 'user,system'
 * @readonly
 * @enum {string}
 */
export type Origin = 'user' | 'system' | 'user,system';

/**
 * Defines values for ActionType.
 * Possible values include: 'Internal'
 * @readonly
 * @enum {string}
 */
export type ActionType = 'Internal';

/**
 * Defines values for OperationStatus.
 * Possible values include: 'NotStarted', 'InProgress', 'Succeeded', 'Failed', 'Canceled'
 * @readonly
 * @enum {string}
 */
export type OperationStatus = 'NotStarted' | 'InProgress' | 'Succeeded' | 'Failed' | 'Canceled';

/**
 * Defines values for CreatedByType.
 * Possible values include: 'User', 'Application', 'ManagedIdentity', 'Key'
 * @readonly
 * @enum {string}
 */
export type CreatedByType = 'User' | 'Application' | 'ManagedIdentity' | 'Key';

/**
 * Defines values for LabState.
 * Possible values include: 'Draft', 'Publishing', 'Scaling', 'Syncing', 'Published'
 * @readonly
 * @enum {string}
 */
export type LabState = 'Draft' | 'Publishing' | 'Scaling' | 'Syncing' | 'Published';

/**
 * Defines values for CreateOption.
 * Possible values include: 'Image', 'TemplateVM'
 * @readonly
 * @enum {string}
 */
export type CreateOption = 'Image' | 'TemplateVM';

/**
 * Defines values for SkuTier.
 * Possible values include: 'Free', 'Basic', 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type SkuTier = 'Free' | 'Basic' | 'Standard' | 'Premium';

/**
 * Defines values for ResourceIdentityType.
 * Possible values include: 'SystemAssigned'
 * @readonly
 * @enum {string}
 */
export type ResourceIdentityType = 'SystemAssigned';

/**
 * Defines values for RegistrationState.
 * Possible values include: 'Registered', 'NotRegistered'
 * @readonly
 * @enum {string}
 */
export type RegistrationState = 'Registered' | 'NotRegistered';

/**
 * Defines values for InvitationState.
 * Possible values include: 'NotSent', 'Sending', 'Sent', 'Failed'
 * @readonly
 * @enum {string}
 */
export type InvitationState = 'NotSent' | 'Sending' | 'Sent' | 'Failed';

/**
 * Defines values for VirtualMachineState.
 * Possible values include: 'Stopped', 'Starting', 'Running', 'Stopping', 'ResettingPassword',
 * 'Reimaging', 'Redeploying'
 * @readonly
 * @enum {string}
 */
export type VirtualMachineState = 'Stopped' | 'Starting' | 'Running' | 'Stopping' | 'ResettingPassword' | 'Reimaging' | 'Redeploying';

/**
 * Defines values for VirtualMachineType.
 * Possible values include: 'User', 'Template'
 * @readonly
 * @enum {string}
 */
export type VirtualMachineType = 'User' | 'Template';

/**
 * Defines values for RecurrenceFrequency.
 * Possible values include: 'Daily', 'Weekly'
 * @readonly
 * @enum {string}
 */
export type RecurrenceFrequency = 'Daily' | 'Weekly';

/**
 * Defines values for WeekDay.
 * Possible values include: 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',
 * 'Saturday'
 * @readonly
 * @enum {string}
 */
export type WeekDay = 'Sunday' | 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type OperationResultsGetResponse = OperationResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationResult;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type LabPlansListBySubscriptionResponse = PagedLabPlans & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedLabPlans;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type LabPlansListByResourceGroupResponse = PagedLabPlans & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedLabPlans;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LabPlansGetResponse = LabPlan & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabPlan;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LabPlansCreateOrUpdateResponse = LabPlan & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabPlan;
    };
};

/**
 * Contains response data for the update operation.
 */
export type LabPlansUpdateResponse = LabPlan & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabPlan;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type LabPlansBeginCreateOrUpdateResponse = LabPlan & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabPlan;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type LabPlansBeginUpdateResponse = LabPlan & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LabPlan;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type LabPlansListBySubscriptionNextResponse = PagedLabPlans & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedLabPlans;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type LabPlansListByResourceGroupNextResponse = PagedLabPlans & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedLabPlans;
    };
};

/**
 * Contains response data for the listByLabPlan operation.
 */
export type ImagesListByLabPlanResponse = PagedImages & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedImages;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ImagesGetResponse = Image & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Image;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ImagesCreateOrUpdateResponse = Image & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Image;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ImagesUpdateResponse = Image & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Image;
    };
};

/**
 * Contains response data for the listByLabPlanNext operation.
 */
export type ImagesListByLabPlanNextResponse = PagedImages & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedImages;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type LabsListBySubscriptionResponse = PagedLabs & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedLabs;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type LabsListByResourceGroupResponse = PagedLabs & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedLabs;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LabsGetResponse = Lab & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Lab;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LabsCreateOrUpdateResponse = Lab & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Lab;
    };
};

/**
 * Contains response data for the update operation.
 */
export type LabsUpdateResponse = Lab & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Lab;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type LabsBeginCreateOrUpdateResponse = Lab & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Lab;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type LabsBeginUpdateResponse = Lab & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Lab;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type LabsListBySubscriptionNextResponse = PagedLabs & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedLabs;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type LabsListByResourceGroupNextResponse = PagedLabs & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedLabs;
    };
};

/**
 * Contains response data for the listByLab operation.
 */
export type UsersListByLabResponse = PagedUsers & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedUsers;
    };
};

/**
 * Contains response data for the get operation.
 */
export type UsersGetResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: User;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type UsersCreateOrUpdateResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: User;
    };
};

/**
 * Contains response data for the update operation.
 */
export type UsersUpdateResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: User;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type UsersBeginCreateOrUpdateResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: User;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type UsersBeginUpdateResponse = User & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: User;
    };
};

/**
 * Contains response data for the listByLabNext operation.
 */
export type UsersListByLabNextResponse = PagedUsers & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedUsers;
    };
};

/**
 * Contains response data for the listByLab operation.
 */
export type VirtualMachinesListByLabResponse = PagedVirtualMachines & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedVirtualMachines;
    };
};

/**
 * Contains response data for the get operation.
 */
export type VirtualMachinesGetResponse = VirtualMachine & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: VirtualMachine;
    };
};

/**
 * Contains response data for the listByLabNext operation.
 */
export type VirtualMachinesListByLabNextResponse = PagedVirtualMachines & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedVirtualMachines;
    };
};

/**
 * Contains response data for the listByLab operation.
 */
export type SchedulesListByLabResponse = PagedSchedules & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedSchedules;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SchedulesGetResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SchedulesCreateOrUpdateResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the update operation.
 */
export type SchedulesUpdateResponse = Schedule & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Schedule;
    };
};

/**
 * Contains response data for the listByLabNext operation.
 */
export type SchedulesListByLabNextResponse = PagedSchedules & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PagedSchedules;
    };
};
