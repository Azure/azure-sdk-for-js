/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Paged list of Lab services virtual machine images. */
export interface PagedImages {
  /**
   * The array page of virtual machine images.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Image[];
  /**
   * The link to get the next page of image results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Properties of an image resource update */
export interface ImageUpdateProperties {
  /** Is the image enabled */
  enabledState?: EnableState;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** Lab services virtual machine image for updates. */
export interface ImageUpdate {
  /** Is the image enabled */
  enabledState?: EnableState;
}

/** Paged list of lab plans. */
export interface PagedLabPlans {
  /**
   * The array page of lab plans.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: LabPlan[];
  /**
   * The link to get the next page of lab plan results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Lab plan resource properties for updates */
export interface LabPlanUpdateProperties {
  /** The default lab connection profile. This can be changed on a lab resource and only provides a default profile. */
  defaultConnectionProfile?: ConnectionProfile;
  /** The default lab shutdown profile. This can be changed on a lab resource and only provides a default profile. */
  defaultAutoShutdownProfile?: AutoShutdownProfile;
  /** The lab plan network profile. To enforce lab network policies they must be defined here and cannot be changed when there are existing labs associated with this lab plan. */
  defaultNetworkProfile?: LabPlanNetworkProfile;
  /** The allowed regions for the lab creator to use when creating labs using this lab plan. */
  allowedRegions?: string[];
  /** Resource ID of the Shared Image Gallery attached to this lab plan. When saving a lab template virtual machine image it will be persisted in this gallery. Shared images from the gallery can be made available to use when creating new labs. */
  sharedGalleryId?: string;
  /** Support contact information and instructions for users of the lab plan. This information is displayed to lab owners and virtual machine users for all labs in the lab plan. */
  supportInfo?: SupportInfo;
  /** Base Url of the lms instance this lab plan can link lab rosters against. */
  linkedLmsInstance?: string;
}

/** Connection profile for how users connect to lab virtual machines. */
export interface ConnectionProfile {
  /** The enabled access level for Web Access over SSH. */
  webSshAccess?: ConnectionType;
  /** The enabled access level for Web Access over RDP. */
  webRdpAccess?: ConnectionType;
  /** The enabled access level for Client Access over SSH. */
  clientSshAccess?: ConnectionType;
  /** The enabled access level for Client Access over RDP. */
  clientRdpAccess?: ConnectionType;
}

/** Profile for how to handle shutting down virtual machines. */
export interface AutoShutdownProfile {
  /** Whether shutdown on disconnect is enabled */
  shutdownOnDisconnect?: EnableState;
  /** Whether a VM will get shutdown when it hasn't been connected to after a period of time. */
  shutdownWhenNotConnected?: EnableState;
  /** Whether a VM will get shutdown when it has idled for a period of time. */
  shutdownOnIdle?: ShutdownOnIdleMode;
  /** The amount of time a VM will stay running after a user disconnects if this behavior is enabled. */
  disconnectDelay?: string;
  /** The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled. */
  noConnectDelay?: string;
  /** The amount of time a VM will idle before it is shutdown if this behavior is enabled. */
  idleDelay?: string;
}

/** Profile for how to handle networking for Lab Plans. */
export interface LabPlanNetworkProfile {
  /** The external subnet resource id */
  subnetId?: string;
}

/** Support contact information and instructions. */
export interface SupportInfo {
  /** Support web address. */
  url?: string;
  /** Support contact email address. */
  email?: string;
  /** Support contact phone number. */
  phone?: string;
  /** Support instructions. */
  instructions?: string;
}

/** Identity for the resource. */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The identity type. */
  type?: "SystemAssigned";
}

/** Base tracked resource type for all PATCH updates. */
export interface TrackedResourceUpdate {
  /** Resource tags. */
  tags?: string[];
}

/** Body for the save image POST */
export interface SaveImageBody {
  /** The name for the image we create. */
  name?: string;
  /** The ID of the lab virtual machine you want to save an image from. */
  labVirtualMachineId?: string;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Paged list of labs. */
export interface PagedLabs {
  /**
   * The array page of lab results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Lab[];
  /**
   * The link to get the next page of image results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Profile for how to handle networking for Labs. */
export interface LabNetworkProfile {
  /** The external subnet resource id */
  subnetId?: string;
  /** The external load balancer resource id */
  loadBalancerId?: string;
  /** The external public IP resource id */
  publicIpId?: string;
}

/** Properties of a lab resource used for updates. */
export interface LabUpdateProperties {
  /** The resource auto shutdown configuration for the lab. This controls whether actions are taken on resources that are sitting idle. */
  autoShutdownProfile?: AutoShutdownProfile;
  /** The connection profile for the lab. This controls settings such as web access to lab resources or whether RDP or SSH ports are open. */
  connectionProfile?: ConnectionProfile;
  /** The profile used for creating lab virtual machines. */
  virtualMachineProfile?: VirtualMachineProfile;
  /** The lab security profile. */
  securityProfile?: SecurityProfile;
  /** The lab user list management profile. */
  rosterProfile?: RosterProfile;
  /** The ID of the lab plan. Used during resource creation to provide defaults and acts as a permission container when creating a lab via labs.azure.com. Setting a labPlanId on an existing lab provides organization.. */
  labPlanId?: string;
  /** The title of the lab. */
  title?: string;
  /** The description of the lab. */
  description?: string;
}

/** The base virtual machine configuration for a lab. */
export interface VirtualMachineProfile {
  /** Indicates what lab virtual machines are created from. */
  createOption: CreateOption;
  /** The image configuration for lab virtual machines. */
  imageReference: ImageReference;
  /**
   * The OS type of the image
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OsType;
  /** The SKU for the lab. Defines the type of virtual machines used in the lab. */
  sku: Sku;
  /** Additional VM capabilities. */
  additionalCapabilities?: VirtualMachineAdditionalCapabilities;
  /** The initial quota alloted to each lab user. Must be a time span between 0 and 9999 hours. */
  usageQuota: string;
  /** Enabling this option will use the same password for all user VMs. */
  useSharedPassword?: EnableState;
  /** Credentials for the admin user on the VM. */
  adminUser: Credentials;
  /** Credentials for the non-admin user on the VM, if one exists. */
  nonAdminUser?: Credentials;
}

/** Image reference information. Used in the virtual machine profile. */
export interface ImageReference {
  /** Image resource ID */
  id?: string;
  /** The image offer if applicable. */
  offer?: string;
  /** The image publisher */
  publisher?: string;
  /** The image SKU */
  sku?: string;
  /** The image version specified on creation. */
  version?: string;
  /**
   * The actual version of the image after use.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exactVersion?: string;
}

/** The resource model definition representing SKU */
export interface Sku {
  /** The name of the SKU. Ex - P3. It is typically a letter+number code */
  name: string;
  /** This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. */
  tier?: SkuTier;
  /** The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. */
  size?: string;
  /** If the service has different generations of hardware, for the same SKU, then that can be captured here. */
  family?: string;
  /** If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. */
  capacity?: number;
}

/** The additional capabilities for a lab VM. */
export interface VirtualMachineAdditionalCapabilities {
  /** Flag to pre-install dedicated GPU drivers. */
  installGpuDrivers?: EnableState;
}

/** Credentials for a user on a lab VM. */
export interface Credentials {
  /** The username to use when signing in to lab VMs. */
  username: string;
  /** The password for the user. This is required for the TemplateVM createOption. */
  password?: string;
}

/** The lab security profile. */
export interface SecurityProfile {
  /**
   * The registration code for the lab.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly registrationCode?: string;
  /** Whether any user or only specified users can register to a lab. */
  openAccess?: EnableState;
}

/** The lab user list management profile. */
export interface RosterProfile {
  /** The AAD group ID which this lab roster is populated from. Having this set enables AAD sync mode. */
  activeDirectoryGroupId?: string;
  /** The unique context identifier for the lab in the lms. */
  ltiContextId?: string;
  /** The base URI identifying the lms instance. */
  lmsInstance?: string;
  /** The unique id of the azure lab services tool in the lms. */
  ltiClientId?: string;
  /** The uri of the names and roles service endpoint on the lms for the class attached to this lab. */
  ltiRosterEndpoint?: string;
}

/** A long running operation result */
export interface OperationResult {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /** The operation status */
  status: OperationStatus;
  /** Start time */
  startTime?: Date;
  /** End time */
  endTime?: Date;
  /** Percent completion */
  percentComplete?: number;
  /** The error for a failure if the operation failed. */
  error?: ErrorDetail;
}

/** Paged list of schedules. */
export interface PagedSchedules {
  /**
   * The array page of schedule results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Schedule[];
  /**
   * The link to get the next page of schedule results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Schedule resource properties used for updates. */
export interface ScheduleUpdateProperties {
  /** When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead. */
  startAt?: Date;
  /** When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead. */
  stopAt?: Date;
  /** The recurrence pattern of the scheduled actions. */
  recurrencePattern?: RecurrencePattern;
  /** The IANA timezone id for the schedule. */
  timeZoneId?: string;
  /** Notes for this schedule. */
  notes?: string;
}

/** Recurrence pattern of a lab schedule. */
export interface RecurrencePattern {
  /** The frequency of the recurrence. */
  frequency: RecurrenceFrequency;
  /** The week days the schedule runs. Used for when the Frequency is set to Weekly. */
  weekDays?: WeekDay[];
  /** The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used. */
  interval?: number;
  /** When the recurrence will expire. This date is inclusive. */
  expirationDate: Date;
}

/** Schedule for automatically turning virtual machines in a lab on and off at specified times. Used for updates. */
export interface ScheduleUpdate {
  /** When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead. */
  startAt?: Date;
  /** When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead. */
  stopAt?: Date;
  /** The recurrence pattern of the scheduled actions. */
  recurrencePattern?: RecurrencePattern;
  /** The IANA timezone id for the schedule. */
  timeZoneId?: string;
  /** Notes for this schedule. */
  notes?: string;
}

/** Paged list of lab services skus. */
export interface PagedLabServicesSkus {
  /**
   * The array page of sku results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: LabServicesSku[];
  /**
   * The link to get the next page of sku results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Azure Lab Services resource SKUs */
export interface LabServicesSku {
  /**
   * The lab services resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**
   * The name of the SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The tier of the SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: LabServicesSkuTier;
  /**
   * The SKU size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly size?: string;
  /**
   * The family of the SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly family?: string;
  /** The scale out/in options of the SKU. */
  capacity?: LabServicesSkuCapacity;
  /**
   * The capabilities of the SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: LabServicesSkuCapabilities[];
  /**
   * List of locations that are available for a size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locations?: string[];
  /**
   * Metadata for retrieving price info of a lab services SKUs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly costs?: LabServicesSkuCost[];
  /**
   * Restrictions of a lab services SKUs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly restrictions?: LabServicesSkuRestrictions[];
}

/** The scale out/in options of the SKU. */
export interface LabServicesSkuCapacity {
  /**
   * The default capacity for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly default?: number;
  /**
   * The lowest permitted capacity for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minimum?: number;
  /**
   * The highest permitted capacity for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maximum?: number;
  /**
   * The localized name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scaleType?: ScaleType;
}

/** The array of capabilities of a lab services SKU. */
export interface LabServicesSkuCapabilities {
  /**
   * The name of the capability for a SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The value of the capability for a SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
}

/** The array of costs of a lab services SKU. */
export interface LabServicesSkuCost {
  /**
   * The meter id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly meterId?: string;
  /**
   * The quantity of units charged.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly quantity?: number;
  /**
   * The extended unit.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly extendedUnit?: string;
}

/** The restriction details. */
export interface LabServicesSkuRestrictions {
  /**
   * The type of restriction.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: RestrictionType;
  /**
   * The values of the restriction.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly values?: string[];
  /**
   * The reason for the restriction.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reasonCode?: RestrictionReasonCode;
}

/** List of Core Usages. */
export interface ListUsagesResult {
  /** The array page of Usages. */
  value?: Usage[];
  /**
   * The link to get the next page of Usage result.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The core usage details. */
export interface Usage {
  /** The current usage. */
  currentValue?: number;
  /** The limit integer. */
  limit?: number;
  /** The unit details. */
  unit?: UsageUnit;
  /** The name. */
  name?: UsageName;
  /** The fully qualified arm resource id. */
  id?: string;
}

/** The Usage Names. */
export interface UsageName {
  /** The localized name of the resource. */
  localizedValue?: string;
  /** The instances of the resource. */
  skuInstances?: string[];
  /** The name of the resource. */
  value?: string;
}

/** Paged list of users. */
export interface PagedUsers {
  /**
   * The array page of user results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: User[];
  /**
   * The link to get the next page of image results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** User resource properties used for updates. */
export interface UserUpdateProperties {
  /** The amount of usage quota time the user gets in addition to the lab usage quota. */
  additionalUsageQuota?: string;
}

/** User of a lab that can register for and use virtual machines within the lab. Used for updates. */
export interface UserUpdate {
  /** The amount of usage quota time the user gets in addition to the lab usage quota. */
  additionalUsageQuota?: string;
}

/** Body for a user invite request */
export interface InviteBody {
  /** Custom text for the invite email. */
  text?: string;
}

/** Paged list of lab services virtual machines. */
export interface PagedVirtualMachines {
  /**
   * The array page of virtual machine results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: VirtualMachine[];
  /**
   * The link to get the next page of virtual machine results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The connection information for the virtual machine */
export interface VirtualMachineConnectionProfile {
  /**
   * The private IP address of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateIpAddress?: string;
  /**
   * Port and host name separated by semicolon for connecting via SSH protocol to the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sshAuthority?: string;
  /**
   * URL for connecting via SSH protocol to the virtual machine in browser.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sshInBrowserUrl?: string;
  /**
   * Port and host name separated by semicolon for connecting via RDP protocol to the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rdpAuthority?: string;
  /**
   * URL for connecting via RDP protocol to the virtual machine in browser.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly rdpInBrowserUrl?: string;
  /**
   * The username used to log on to the virtual machine as admin.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly adminUsername?: string;
  /**
   * The username used to log on to the virtual machine as non-admin, if one exists.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nonAdminUsername?: string;
}

/** Body of a reset password request. */
export interface ResetPasswordBody {
  /** The user whose password is being reset */
  username: string;
  /** The password */
  password: string;
}

/** Properties of an image resource. */
export interface ImageProperties extends ImageUpdateProperties {
  /**
   * Current provisioning state of the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The image display name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * A description of the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * URL of the image icon.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly iconUrl?: string;
  /**
   * The image author.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly author?: string;
  /**
   * The OS Type of the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OsType;
  /**
   * The ID of marketplace plan associated with the image (optional).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly plan?: string;
  /**
   * The status of image terms of use (enabled = accepted, disabled = not accepted).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly termsStatus?: EnableState;
  /**
   * The ID of an offer associated with the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly offer?: string;
  /**
   * The ID of the publisher of the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publisher?: string;
  /**
   * The image SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: string;
  /**
   * The image version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * The ID for the image in the shared gallery.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sharedGalleryId?: string;
  /** The available regions of the image in the shared gallery. */
  availableRegions?: string[];
  /**
   * The OS State of the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osState?: OsState;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** Lab plan resource properties */
export interface LabPlanProperties extends LabPlanUpdateProperties {
  /**
   * Current provisioning state of the lab plan.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Contains lab configuration and default settings. This variant is used for PATCH. */
export interface LabPlanUpdate extends TrackedResourceUpdate {
  /** Managed Identity Information */
  identity?: Identity;
  /** The default lab connection profile. This can be changed on a lab resource and only provides a default profile. */
  defaultConnectionProfile?: ConnectionProfile;
  /** The default lab shutdown profile. This can be changed on a lab resource and only provides a default profile. */
  defaultAutoShutdownProfile?: AutoShutdownProfile;
  /** The lab plan network profile. To enforce lab network policies they must be defined here and cannot be changed when there are existing labs associated with this lab plan. */
  defaultNetworkProfile?: LabPlanNetworkProfile;
  /** The allowed regions for the lab creator to use when creating labs using this lab plan. */
  allowedRegions?: string[];
  /** Resource ID of the Shared Image Gallery attached to this lab plan. When saving a lab template virtual machine image it will be persisted in this gallery. Shared images from the gallery can be made available to use when creating new labs. */
  sharedGalleryId?: string;
  /** Support contact information and instructions for users of the lab plan. This information is displayed to lab owners and virtual machine users for all labs in the lab plan. */
  supportInfo?: SupportInfo;
  /** Base Url of the lms instance this lab plan can link lab rosters against. */
  linkedLmsInstance?: string;
}

/** The lab resource for updates. */
export interface LabUpdate extends TrackedResourceUpdate {
  /** The resource auto shutdown configuration for the lab. This controls whether actions are taken on resources that are sitting idle. */
  autoShutdownProfile?: AutoShutdownProfile;
  /** The connection profile for the lab. This controls settings such as web access to lab resources or whether RDP or SSH ports are open. */
  connectionProfile?: ConnectionProfile;
  /** The profile used for creating lab virtual machines. */
  virtualMachineProfile?: VirtualMachineProfile;
  /** The lab security profile. */
  securityProfile?: SecurityProfile;
  /** The lab user list management profile. */
  rosterProfile?: RosterProfile;
  /** The ID of the lab plan. Used during resource creation to provide defaults and acts as a permission container when creating a lab via labs.azure.com. Setting a labPlanId on an existing lab provides organization.. */
  labPlanId?: string;
  /** The title of the lab. */
  title?: string;
  /** The description of the lab. */
  description?: string;
}

/** Properties of a lab resource. */
export interface LabProperties extends LabUpdateProperties {
  /**
   * Current provisioning state of the lab.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The network profile for the lab, typically applied via a lab plan. This profile cannot be modified once a lab has been created. */
  networkProfile?: LabNetworkProfile;
  /**
   * The lab state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: LabState;
}

/** Schedule resource properties */
export interface ScheduleProperties extends ScheduleUpdateProperties {
  /**
   * Current provisioning state of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** User resource properties */
export interface UserProperties extends UserUpdateProperties {
  /**
   * Current provisioning state of the user resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Display name of the user, for example user's full name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /** Email address of the user. */
  email: string;
  /**
   * State of the user's registration within the lab.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly registrationState?: RegistrationState;
  /**
   * State of the invitation message for the user.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly invitationState?: InvitationState;
  /**
   * Date and time when the invitation message was sent to the user.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly invitationSent?: Date;
  /**
   * How long the user has used their virtual machines in this lab.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalUsage?: string;
}

/** Lab services virtual machine image */
export interface Image extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Is the image enabled */
  enabledState?: EnableState;
  /**
   * Current provisioning state of the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The image display name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /**
   * A description of the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * URL of the image icon.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly iconUrl?: string;
  /**
   * The image author.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly author?: string;
  /**
   * The OS Type of the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osType?: OsType;
  /**
   * The ID of marketplace plan associated with the image (optional).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly plan?: string;
  /**
   * The status of image terms of use (enabled = accepted, disabled = not accepted).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly termsStatus?: EnableState;
  /**
   * The ID of an offer associated with the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly offer?: string;
  /**
   * The ID of the publisher of the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publisher?: string;
  /**
   * The image SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: string;
  /**
   * The image version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly version?: string;
  /**
   * The ID for the image in the shared gallery.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sharedGalleryId?: string;
  /** The available regions of the image in the shared gallery. */
  availableRegions?: string[];
  /**
   * The OS State of the image.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly osState?: OsState;
}

/** Schedule for automatically turning virtual machines in a lab on and off at specified times. */
export interface Schedule extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** When lab user virtual machines will be started. Timestamp offsets will be ignored and timeZoneId is used instead. */
  startAt?: Date;
  /** When lab user virtual machines will be stopped. Timestamp offsets will be ignored and timeZoneId is used instead. */
  stopAt?: Date;
  /** The recurrence pattern of the scheduled actions. */
  recurrencePattern?: RecurrencePattern;
  /** The IANA timezone id for the schedule. */
  timeZoneId?: string;
  /** Notes for this schedule. */
  notes?: string;
  /**
   * Current provisioning state of the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** User of a lab that can register for and use virtual machines within the lab. */
export interface User extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the user resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The amount of usage quota time the user gets in addition to the lab usage quota. */
  additionalUsageQuota?: string;
  /**
   * Current provisioning state of the user resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * Display name of the user, for example user's full name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayName?: string;
  /** Email address of the user. */
  email: string;
  /**
   * State of the user's registration within the lab.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly registrationState?: RegistrationState;
  /**
   * State of the invitation message for the user.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly invitationState?: InvitationState;
  /**
   * Date and time when the invitation message was sent to the user.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly invitationSent?: Date;
  /**
   * How long the user has used their virtual machines in this lab.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalUsage?: string;
}

/** A lab virtual machine resource. */
export interface VirtualMachine extends ProxyResource {
  /**
   * System data of the Lab virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * Current provisioning state of the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The current state of the virtual machine
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: VirtualMachineState;
  /**
   * Profile for information about connecting to the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionProfile?: VirtualMachineConnectionProfile;
  /**
   * The lab user ID (not the PUID!) of who claimed the virtual machine.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly claimedByUserId?: string;
  /**
   * The type of this VM resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vmType?: VirtualMachineType;
}

/** Lab Plans act as a permission container for creating labs via labs.azure.com. Additionally, they can provide a set of default configurations that will apply at the time of creating a lab, but these defaults can still be overwritten. */
export interface LabPlan extends TrackedResource {
  /**
   * Metadata pertaining to creation and last modification of the lab plan.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Managed Identity Information */
  identity?: Identity;
  /** The default lab connection profile. This can be changed on a lab resource and only provides a default profile. */
  defaultConnectionProfile?: ConnectionProfile;
  /** The default lab shutdown profile. This can be changed on a lab resource and only provides a default profile. */
  defaultAutoShutdownProfile?: AutoShutdownProfile;
  /** The lab plan network profile. To enforce lab network policies they must be defined here and cannot be changed when there are existing labs associated with this lab plan. */
  defaultNetworkProfile?: LabPlanNetworkProfile;
  /** The allowed regions for the lab creator to use when creating labs using this lab plan. */
  allowedRegions?: string[];
  /** Resource ID of the Shared Image Gallery attached to this lab plan. When saving a lab template virtual machine image it will be persisted in this gallery. Shared images from the gallery can be made available to use when creating new labs. */
  sharedGalleryId?: string;
  /** Support contact information and instructions for users of the lab plan. This information is displayed to lab owners and virtual machine users for all labs in the lab plan. */
  supportInfo?: SupportInfo;
  /** Base Url of the lms instance this lab plan can link lab rosters against. */
  linkedLmsInstance?: string;
  /**
   * Current provisioning state of the lab plan.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The lab resource. */
export interface Lab extends TrackedResource {
  /**
   * Metadata pertaining to creation and last modification of the lab.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The resource auto shutdown configuration for the lab. This controls whether actions are taken on resources that are sitting idle. */
  autoShutdownProfile?: AutoShutdownProfile;
  /** The connection profile for the lab. This controls settings such as web access to lab resources or whether RDP or SSH ports are open. */
  connectionProfile?: ConnectionProfile;
  /** The profile used for creating lab virtual machines. */
  virtualMachineProfile?: VirtualMachineProfile;
  /** The lab security profile. */
  securityProfile?: SecurityProfile;
  /** The lab user list management profile. */
  rosterProfile?: RosterProfile;
  /** The ID of the lab plan. Used during resource creation to provide defaults and acts as a permission container when creating a lab via labs.azure.com. Setting a labPlanId on an existing lab provides organization.. */
  labPlanId?: string;
  /** The title of the lab. */
  title?: string;
  /** The description of the lab. */
  description?: string;
  /**
   * Current provisioning state of the lab.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The network profile for the lab, typically applied via a lab plan. This profile cannot be modified once a lab has been created. */
  networkProfile?: LabNetworkProfile;
  /**
   * The lab state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: LabState;
}

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link LabServicesSkuTier} that the service accepts. */
export enum KnownLabServicesSkuTier {
  /** Standard */
  Standard = "Standard",
  /** Premium */
  Premium = "Premium"
}

/**
 * Defines values for LabServicesSkuTier. \
 * {@link KnownLabServicesSkuTier} can be used interchangeably with LabServicesSkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **Premium**
 */
export type LabServicesSkuTier = string;

/** Known values of {@link ScaleType} that the service accepts. */
export enum KnownScaleType {
  /** The capacity is not adjustable in any way. */
  None = "None",
  /** The user must manually scale this SKU in and out. */
  Manual = "Manual",
  /** The user is permitted to scale this SKU in and out. */
  Automatic = "Automatic"
}

/**
 * Defines values for ScaleType. \
 * {@link KnownScaleType} can be used interchangeably with ScaleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: The capacity is not adjustable in any way. \
 * **Manual**: The user must manually scale this SKU in and out. \
 * **Automatic**: The user is permitted to scale this SKU in and out.
 */
export type ScaleType = string;

/** Known values of {@link RestrictionType} that the service accepts. */
export enum KnownRestrictionType {
  /** Location */
  Location = "Location"
}

/**
 * Defines values for RestrictionType. \
 * {@link KnownRestrictionType} can be used interchangeably with RestrictionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Location**
 */
export type RestrictionType = string;

/** Known values of {@link RestrictionReasonCode} that the service accepts. */
export enum KnownRestrictionReasonCode {
  /** QuotaId */
  QuotaId = "QuotaId",
  /** NotAvailableForSubscription */
  NotAvailableForSubscription = "NotAvailableForSubscription"
}

/**
 * Defines values for RestrictionReasonCode. \
 * {@link KnownRestrictionReasonCode} can be used interchangeably with RestrictionReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **QuotaId** \
 * **NotAvailableForSubscription**
 */
export type RestrictionReasonCode = string;

/** Known values of {@link UsageUnit} that the service accepts. */
export enum KnownUsageUnit {
  /** Count */
  Count = "Count"
}

/**
 * Defines values for UsageUnit. \
 * {@link KnownUsageUnit} can be used interchangeably with UsageUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Count**
 */
export type UsageUnit = string;
/** Defines values for ProvisioningState. */
export type ProvisioningState =
  | "Creating"
  | "Updating"
  | "Deleting"
  | "Succeeded"
  | "Failed"
  | "Locked";
/** Defines values for OsType. */
export type OsType = "Windows" | "Linux";
/** Defines values for EnableState. */
export type EnableState = "Enabled" | "Disabled";
/** Defines values for OsState. */
export type OsState = "Generalized" | "Specialized";
/** Defines values for ConnectionType. */
export type ConnectionType = "Public" | "Private" | "None";
/** Defines values for ShutdownOnIdleMode. */
export type ShutdownOnIdleMode = "None" | "UserAbsence" | "LowUsage";
/** Defines values for LabState. */
export type LabState =
  | "Draft"
  | "Publishing"
  | "Scaling"
  | "Syncing"
  | "Published";
/** Defines values for CreateOption. */
export type CreateOption = "Image" | "TemplateVM";
/** Defines values for SkuTier. */
export type SkuTier = "Free" | "Basic" | "Standard" | "Premium";
/** Defines values for OperationStatus. */
export type OperationStatus =
  | "NotStarted"
  | "InProgress"
  | "Succeeded"
  | "Failed"
  | "Canceled";
/** Defines values for RecurrenceFrequency. */
export type RecurrenceFrequency = "Daily" | "Weekly";
/** Defines values for WeekDay. */
export type WeekDay =
  | "Sunday"
  | "Monday"
  | "Tuesday"
  | "Wednesday"
  | "Thursday"
  | "Friday"
  | "Saturday";
/** Defines values for RegistrationState. */
export type RegistrationState = "Registered" | "NotRegistered";
/** Defines values for InvitationState. */
export type InvitationState = "NotSent" | "Sending" | "Sent" | "Failed";
/** Defines values for VirtualMachineState. */
export type VirtualMachineState =
  | "Stopped"
  | "Starting"
  | "Running"
  | "Stopping"
  | "ResettingPassword"
  | "Reimaging"
  | "Redeploying";
/** Defines values for VirtualMachineType. */
export type VirtualMachineType = "User" | "Template";

/** Optional parameters. */
export interface ImagesListByLabPlanOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. */
  filter?: string;
}

/** Contains response data for the listByLabPlan operation. */
export type ImagesListByLabPlanResponse = PagedImages;

/** Optional parameters. */
export interface ImagesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ImagesGetResponse = Image;

/** Optional parameters. */
export interface ImagesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ImagesCreateOrUpdateResponse = Image;

/** Optional parameters. */
export interface ImagesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ImagesUpdateResponse = Image;

/** Optional parameters. */
export interface ImagesListByLabPlanNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLabPlanNext operation. */
export type ImagesListByLabPlanNextResponse = PagedImages;

/** Optional parameters. */
export interface LabPlansListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. */
  filter?: string;
}

/** Contains response data for the listBySubscription operation. */
export type LabPlansListBySubscriptionResponse = PagedLabPlans;

/** Optional parameters. */
export interface LabPlansListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type LabPlansListByResourceGroupResponse = PagedLabPlans;

/** Optional parameters. */
export interface LabPlansGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LabPlansGetResponse = LabPlan;

/** Optional parameters. */
export interface LabPlansCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type LabPlansCreateOrUpdateResponse = LabPlan;

/** Optional parameters. */
export interface LabPlansUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type LabPlansUpdateResponse = LabPlan;

/** Optional parameters. */
export interface LabPlansDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabPlansSaveImageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabPlansListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type LabPlansListBySubscriptionNextResponse = PagedLabPlans;

/** Optional parameters. */
export interface LabPlansListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type LabPlansListByResourceGroupNextResponse = PagedLabPlans;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface LabsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. */
  filter?: string;
}

/** Contains response data for the listBySubscription operation. */
export type LabsListBySubscriptionResponse = PagedLabs;

/** Optional parameters. */
export interface LabsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type LabsListByResourceGroupResponse = PagedLabs;

/** Optional parameters. */
export interface LabsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LabsGetResponse = Lab;

/** Optional parameters. */
export interface LabsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type LabsCreateOrUpdateResponse = Lab;

/** Optional parameters. */
export interface LabsUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type LabsUpdateResponse = Lab;

/** Optional parameters. */
export interface LabsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabsPublishOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabsSyncGroupOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface LabsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type LabsListBySubscriptionNextResponse = PagedLabs;

/** Optional parameters. */
export interface LabsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type LabsListByResourceGroupNextResponse = PagedLabs;

/** Optional parameters. */
export interface OperationResultsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type OperationResultsGetResponse = OperationResult;

/** Optional parameters. */
export interface SchedulesListByLabOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. */
  filter?: string;
}

/** Contains response data for the listByLab operation. */
export type SchedulesListByLabResponse = PagedSchedules;

/** Optional parameters. */
export interface SchedulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SchedulesGetResponse = Schedule;

/** Optional parameters. */
export interface SchedulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type SchedulesCreateOrUpdateResponse = Schedule;

/** Optional parameters. */
export interface SchedulesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type SchedulesUpdateResponse = Schedule;

/** Optional parameters. */
export interface SchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SchedulesListByLabNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLabNext operation. */
export type SchedulesListByLabNextResponse = PagedSchedules;

/** Optional parameters. */
export interface SkusListOptionalParams extends coreClient.OperationOptions {
  /** The filter to apply to the operation. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type SkusListResponse = PagedLabServicesSkus;

/** Optional parameters. */
export interface SkusListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SkusListNextResponse = PagedLabServicesSkus;

/** Optional parameters. */
export interface UsagesListByLocationOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. */
  filter?: string;
}

/** Contains response data for the listByLocation operation. */
export type UsagesListByLocationResponse = ListUsagesResult;

/** Optional parameters. */
export interface UsagesListByLocationNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLocationNext operation. */
export type UsagesListByLocationNextResponse = ListUsagesResult;

/** Optional parameters. */
export interface UsersListByLabOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. */
  filter?: string;
}

/** Contains response data for the listByLab operation. */
export type UsersListByLabResponse = PagedUsers;

/** Optional parameters. */
export interface UsersGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type UsersGetResponse = User;

/** Optional parameters. */
export interface UsersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type UsersCreateOrUpdateResponse = User;

/** Optional parameters. */
export interface UsersUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type UsersUpdateResponse = User;

/** Optional parameters. */
export interface UsersDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface UsersInviteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface UsersListByLabNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLabNext operation. */
export type UsersListByLabNextResponse = PagedUsers;

/** Optional parameters. */
export interface VirtualMachinesListByLabOptionalParams
  extends coreClient.OperationOptions {
  /** The filter to apply to the operation. */
  filter?: string;
}

/** Contains response data for the listByLab operation. */
export type VirtualMachinesListByLabResponse = PagedVirtualMachines;

/** Optional parameters. */
export interface VirtualMachinesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VirtualMachinesGetResponse = VirtualMachine;

/** Optional parameters. */
export interface VirtualMachinesStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesStopOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesReimageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesRedeployOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesResetPasswordOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VirtualMachinesListByLabNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByLabNext operation. */
export type VirtualMachinesListByLabNextResponse = PagedVirtualMachines;

/** Optional parameters. */
export interface LabServicesClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
