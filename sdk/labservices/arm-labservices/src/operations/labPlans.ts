/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/labPlansMappers";
import * as Parameters from "../models/parameters";
import { LabServicesClientContext } from "../labServicesClientContext";

/** Class representing a LabPlans. */
export class LabPlans {
  private readonly client: LabServicesClientContext;

  /**
   * Create a LabPlans.
   * @param {LabServicesClientContext} client Reference to the service client.
   */
  constructor(client: LabServicesClientContext) {
    this.client = client;
  }

  /**
   * Returns a list of all lab plans within a subscription
   * @summary Get all lab plans for a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabPlansListBySubscriptionResponse>
   */
  listBySubscription(options?: Models.LabPlansListBySubscriptionOptionalParams): Promise<Models.LabPlansListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.PagedLabPlans>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: Models.LabPlansListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.PagedLabPlans>): void;
  listBySubscription(options?: Models.LabPlansListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.PagedLabPlans>, callback?: msRest.ServiceCallback<Models.PagedLabPlans>): Promise<Models.LabPlansListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.LabPlansListBySubscriptionResponse>;
  }

  /**
   * Returns a list of all lab plans for a subscription and resource group.
   * @summary Get all lab plans for a subscription and resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabPlansListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.LabPlansListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PagedLabPlans>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PagedLabPlans>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PagedLabPlans>, callback?: msRest.ServiceCallback<Models.PagedLabPlans>): Promise<Models.LabPlansListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.LabPlansListByResourceGroupResponse>;
  }

  /**
   * Retrieves the properties of a Lab Plan.
   * @summary Retrieves a Lab Plan resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing
   * resource group. Used in resource URIs and in UI.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabPlansGetResponse>
   */
  get(resourceGroupName: string, labPlanName: string, options?: msRest.RequestOptionsBase): Promise<Models.LabPlansGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing
   * resource group. Used in resource URIs and in UI.
   * @param callback The callback
   */
  get(resourceGroupName: string, labPlanName: string, callback: msRest.ServiceCallback<Models.LabPlan>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing
   * resource group. Used in resource URIs and in UI.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, labPlanName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LabPlan>): void;
  get(resourceGroupName: string, labPlanName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LabPlan>, callback?: msRest.ServiceCallback<Models.LabPlan>): Promise<Models.LabPlansGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labPlanName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LabPlansGetResponse>;
  }

  /**
   * Operation to create or update a Lab Plan resource.
   * @summary Updates or creates a Lab Plan resource.
   * @param body The request body.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing
   * resource group. Used in resource URIs and in UI.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabPlansCreateOrUpdateResponse>
   */
  createOrUpdate(body: Models.LabPlan, resourceGroupName: string, labPlanName: string, options?: msRest.RequestOptionsBase): Promise<Models.LabPlansCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(body,resourceGroupName,labPlanName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LabPlansCreateOrUpdateResponse>;
  }

  /**
   * Operation to update a Lab Plan resource.
   * @summary Updates a Lab Plan resource.
   * @param body The request body.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing
   * resource group. Used in resource URIs and in UI.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabPlansUpdateResponse>
   */
  update(body: Models.LabPlanUpdate, resourceGroupName: string, labPlanName: string, options?: msRest.RequestOptionsBase): Promise<Models.LabPlansUpdateResponse> {
    return this.beginUpdate(body,resourceGroupName,labPlanName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LabPlansUpdateResponse>;
  }

  /**
   * Operation to delete a Lab Plan resource. Deleting a lab plan does not delete labs associated
   * with a lab plan, nor does it delete shared images added to a gallery via the lab plan permission
   * container.
   * @summary Deletes a Lab Plan resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing
   * resource group. Used in resource URIs and in UI.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, labPlanName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,labPlanName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Saves an image from a lab VM to the attached shared image gallery.
   * @summary Save an image from a lab VM to the attached shared image gallery.
   * @param body The request body.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing
   * resource group. Used in resource URIs and in UI.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  saveImage(body: Models.SaveImageBody, resourceGroupName: string, labPlanName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginSaveImage(body,resourceGroupName,labPlanName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Operation to create or update a Lab Plan resource.
   * @summary Updates or creates a Lab Plan resource.
   * @param body The request body.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing
   * resource group. Used in resource URIs and in UI.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(body: Models.LabPlan, resourceGroupName: string, labPlanName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        body,
        resourceGroupName,
        labPlanName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Operation to update a Lab Plan resource.
   * @summary Updates a Lab Plan resource.
   * @param body The request body.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing
   * resource group. Used in resource URIs and in UI.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(body: Models.LabPlanUpdate, resourceGroupName: string, labPlanName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        body,
        resourceGroupName,
        labPlanName,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Operation to delete a Lab Plan resource. Deleting a lab plan does not delete labs associated
   * with a lab plan, nor does it delete shared images added to a gallery via the lab plan permission
   * container.
   * @summary Deletes a Lab Plan resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing
   * resource group. Used in resource URIs and in UI.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, labPlanName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labPlanName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Saves an image from a lab VM to the attached shared image gallery.
   * @summary Save an image from a lab VM to the attached shared image gallery.
   * @param body The request body.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing
   * resource group. Used in resource URIs and in UI.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginSaveImage(body: Models.SaveImageBody, resourceGroupName: string, labPlanName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        body,
        resourceGroupName,
        labPlanName,
        options
      },
      beginSaveImageOperationSpec,
      options);
  }

  /**
   * Returns a list of all lab plans within a subscription
   * @summary Get all lab plans for a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabPlansListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: Models.LabPlansListBySubscriptionNextOptionalParams): Promise<Models.LabPlansListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PagedLabPlans>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: Models.LabPlansListBySubscriptionNextOptionalParams, callback: msRest.ServiceCallback<Models.PagedLabPlans>): void;
  listBySubscriptionNext(nextPageLink: string, options?: Models.LabPlansListBySubscriptionNextOptionalParams | msRest.ServiceCallback<Models.PagedLabPlans>, callback?: msRest.ServiceCallback<Models.PagedLabPlans>): Promise<Models.LabPlansListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.LabPlansListBySubscriptionNextResponse>;
  }

  /**
   * Returns a list of all lab plans for a subscription and resource group.
   * @summary Get all lab plans for a subscription and resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabPlansListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LabPlansListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PagedLabPlans>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PagedLabPlans>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PagedLabPlans>, callback?: msRest.ServiceCallback<Models.PagedLabPlans>): Promise<Models.LabPlansListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.LabPlansListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.LabServices/labPlans",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedLabPlans
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labPlans",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedLabPlans
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labPlans/{labPlanName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labPlanName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LabPlan
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labPlans/{labPlanName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labPlanName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.LabPlan,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LabPlan
    },
    201: {
      bodyMapper: Mappers.LabPlan
    },
    202: {
      bodyMapper: Mappers.LabPlan
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labPlans/{labPlanName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labPlanName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.LabPlanUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LabPlan
    },
    202: {
      bodyMapper: Mappers.LabPlan
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labPlans/{labPlanName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labPlanName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginSaveImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labPlans/{labPlanName}/saveImage",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labPlanName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.SaveImageBody,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedLabPlans
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedLabPlans
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
