/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Images } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LabServicesClient } from "../labServicesClient";
import {
  Image,
  ImagesListByLabPlanNextOptionalParams,
  ImagesListByLabPlanOptionalParams,
  ImagesListByLabPlanResponse,
  ImagesGetOptionalParams,
  ImagesGetResponse,
  ImagesCreateOrUpdateOptionalParams,
  ImagesCreateOrUpdateResponse,
  ImageUpdate,
  ImagesUpdateOptionalParams,
  ImagesUpdateResponse,
  ImagesListByLabPlanNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Images operations. */
export class ImagesImpl implements Images {
  private readonly client: LabServicesClient;

  /**
   * Initialize a new instance of the class Images class.
   * @param client Reference to the service client
   */
  constructor(client: LabServicesClient) {
    this.client = client;
  }

  /**
   * Gets all images from galleries attached to a lab plan.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
   *                    group. Used in resource URIs and in UI.
   * @param options The options parameters.
   */
  public listByLabPlan(
    resourceGroupName: string,
    labPlanName: string,
    options?: ImagesListByLabPlanOptionalParams
  ): PagedAsyncIterableIterator<Image> {
    const iter = this.listByLabPlanPagingAll(
      resourceGroupName,
      labPlanName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByLabPlanPagingPage(
          resourceGroupName,
          labPlanName,
          options
        );
      }
    };
  }

  private async *listByLabPlanPagingPage(
    resourceGroupName: string,
    labPlanName: string,
    options?: ImagesListByLabPlanOptionalParams
  ): AsyncIterableIterator<Image[]> {
    let result = await this._listByLabPlan(
      resourceGroupName,
      labPlanName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByLabPlanNext(
        resourceGroupName,
        labPlanName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByLabPlanPagingAll(
    resourceGroupName: string,
    labPlanName: string,
    options?: ImagesListByLabPlanOptionalParams
  ): AsyncIterableIterator<Image> {
    for await (const page of this.listByLabPlanPagingPage(
      resourceGroupName,
      labPlanName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets all images from galleries attached to a lab plan.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
   *                    group. Used in resource URIs and in UI.
   * @param options The options parameters.
   */
  private _listByLabPlan(
    resourceGroupName: string,
    labPlanName: string,
    options?: ImagesListByLabPlanOptionalParams
  ): Promise<ImagesListByLabPlanResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, labPlanName, options },
      listByLabPlanOperationSpec
    );
  }

  /**
   * Gets an image resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
   *                    group. Used in resource URIs and in UI.
   * @param imageName The image name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    labPlanName: string,
    imageName: string,
    options?: ImagesGetOptionalParams
  ): Promise<ImagesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, labPlanName, imageName, options },
      getOperationSpec
    );
  }

  /**
   * Updates an image resource via PUT. Creating new resources via PUT will not function.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
   *                    group. Used in resource URIs and in UI.
   * @param imageName The image name.
   * @param body The request body.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    labPlanName: string,
    imageName: string,
    body: Image,
    options?: ImagesCreateOrUpdateOptionalParams
  ): Promise<ImagesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, labPlanName, imageName, body, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Updates an image resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
   *                    group. Used in resource URIs and in UI.
   * @param imageName The image name.
   * @param body The request body.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    labPlanName: string,
    imageName: string,
    body: ImageUpdate,
    options?: ImagesUpdateOptionalParams
  ): Promise<ImagesUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, labPlanName, imageName, body, options },
      updateOperationSpec
    );
  }

  /**
   * ListByLabPlanNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labPlanName The name of the lab plan that uniquely identifies it within containing resource
   *                    group. Used in resource URIs and in UI.
   * @param nextLink The nextLink from the previous successful call to the ListByLabPlan method.
   * @param options The options parameters.
   */
  private _listByLabPlanNext(
    resourceGroupName: string,
    labPlanName: string,
    nextLink: string,
    options?: ImagesListByLabPlanNextOptionalParams
  ): Promise<ImagesListByLabPlanNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, labPlanName, nextLink, options },
      listByLabPlanNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByLabPlanOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labPlans/{labPlanName}/images",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PagedImages
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labPlanName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labPlans/{labPlanName}/images/{imageName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Image
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labPlanName,
    Parameters.imageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labPlans/{labPlanName}/images/{imageName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Image
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labPlanName,
    Parameters.imageName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labPlans/{labPlanName}/images/{imageName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Image
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labPlanName,
    Parameters.imageName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByLabPlanNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PagedImages
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labPlanName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
