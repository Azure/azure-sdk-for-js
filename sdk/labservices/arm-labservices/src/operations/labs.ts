/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/labsMappers";
import * as Parameters from "../models/parameters";
import { LabServicesClientContext } from "../labServicesClientContext";

/** Class representing a Labs. */
export class Labs {
  private readonly client: LabServicesClientContext;

  /**
   * Create a Labs.
   * @param {LabServicesClientContext} client Reference to the service client.
   */
  constructor(client: LabServicesClientContext) {
    this.client = client;
  }

  /**
   * Returns a list of all labs for a subscription.
   * @summary Get all labs for a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsListBySubscriptionResponse>
   */
  listBySubscription(options?: Models.LabsListBySubscriptionOptionalParams): Promise<Models.LabsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.PagedLabs>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: Models.LabsListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.PagedLabs>): void;
  listBySubscription(options?: Models.LabsListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.PagedLabs>, callback?: msRest.ServiceCallback<Models.PagedLabs>): Promise<Models.LabsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.LabsListBySubscriptionResponse>;
  }

  /**
   * Returns a list of all labs in a resource group.
   * @summary Get all labs for a subscription and resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.LabsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PagedLabs>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PagedLabs>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PagedLabs>, callback?: msRest.ServiceCallback<Models.PagedLabs>): Promise<Models.LabsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.LabsListByResourceGroupResponse>;
  }

  /**
   * Returns the properties of a lab resource.
   * @summary Get a lab resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labName The name of the lab that uniquely identifies it within containing lab account.
   * Used in resource URIs.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsGetResponse>
   */
  get(resourceGroupName: string, labName: string, options?: msRest.RequestOptionsBase): Promise<Models.LabsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labName The name of the lab that uniquely identifies it within containing lab account.
   * Used in resource URIs.
   * @param callback The callback
   */
  get(resourceGroupName: string, labName: string, callback: msRest.ServiceCallback<Models.Lab>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labName The name of the lab that uniquely identifies it within containing lab account.
   * Used in resource URIs.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, labName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Lab>): void;
  get(resourceGroupName: string, labName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Lab>, callback?: msRest.ServiceCallback<Models.Lab>): Promise<Models.LabsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        labName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LabsGetResponse>;
  }

  /**
   * Operation to create or update a lab resource.
   * @summary Create or update a lab resource.
   * @param body The request body.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labName The name of the lab that uniquely identifies it within containing lab account.
   * Used in resource URIs.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsCreateOrUpdateResponse>
   */
  createOrUpdate(body: Models.Lab, resourceGroupName: string, labName: string, options?: msRest.RequestOptionsBase): Promise<Models.LabsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(body,resourceGroupName,labName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LabsCreateOrUpdateResponse>;
  }

  /**
   * Operation to update a lab resource.
   * @summary Update a lab resource.
   * @param body The request body.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labName The name of the lab that uniquely identifies it within containing lab account.
   * Used in resource URIs.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsUpdateResponse>
   */
  update(body: Models.LabUpdate, resourceGroupName: string, labName: string, options?: msRest.RequestOptionsBase): Promise<Models.LabsUpdateResponse> {
    return this.beginUpdate(body,resourceGroupName,labName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LabsUpdateResponse>;
  }

  /**
   * Operation to delete a lab resource.
   * @summary Deletes a lab resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labName The name of the lab that uniquely identifies it within containing lab account.
   * Used in resource URIs.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, labName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,labName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Publish or re-publish a lab. This will create or update all lab resources, such as virtual
   * machines.
   * @summary Publish or re-publish a lab.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labName The name of the lab that uniquely identifies it within containing lab account.
   * Used in resource URIs.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  publish(resourceGroupName: string, labName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginPublish(resourceGroupName,labName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Action used to manually kick off an AAD group sync job.
   * @summary Manually sync the lab group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labName The name of the lab that uniquely identifies it within containing lab account.
   * Used in resource URIs.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  syncGroup(resourceGroupName: string, labName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginSyncGroup(resourceGroupName,labName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Operation to create or update a lab resource.
   * @summary Create or update a lab resource.
   * @param body The request body.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labName The name of the lab that uniquely identifies it within containing lab account.
   * Used in resource URIs.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(body: Models.Lab, resourceGroupName: string, labName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        body,
        resourceGroupName,
        labName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Operation to update a lab resource.
   * @summary Update a lab resource.
   * @param body The request body.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labName The name of the lab that uniquely identifies it within containing lab account.
   * Used in resource URIs.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(body: Models.LabUpdate, resourceGroupName: string, labName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        body,
        resourceGroupName,
        labName,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Operation to delete a lab resource.
   * @summary Deletes a lab resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labName The name of the lab that uniquely identifies it within containing lab account.
   * Used in resource URIs.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, labName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Publish or re-publish a lab. This will create or update all lab resources, such as virtual
   * machines.
   * @summary Publish or re-publish a lab.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labName The name of the lab that uniquely identifies it within containing lab account.
   * Used in resource URIs.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginPublish(resourceGroupName: string, labName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        options
      },
      beginPublishOperationSpec,
      options);
  }

  /**
   * Action used to manually kick off an AAD group sync job.
   * @summary Manually sync the lab group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param labName The name of the lab that uniquely identifies it within containing lab account.
   * Used in resource URIs.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginSyncGroup(resourceGroupName: string, labName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        labName,
        options
      },
      beginSyncGroupOperationSpec,
      options);
  }

  /**
   * Returns a list of all labs for a subscription.
   * @summary Get all labs for a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: Models.LabsListBySubscriptionNextOptionalParams): Promise<Models.LabsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PagedLabs>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: Models.LabsListBySubscriptionNextOptionalParams, callback: msRest.ServiceCallback<Models.PagedLabs>): void;
  listBySubscriptionNext(nextPageLink: string, options?: Models.LabsListBySubscriptionNextOptionalParams | msRest.ServiceCallback<Models.PagedLabs>, callback?: msRest.ServiceCallback<Models.PagedLabs>): Promise<Models.LabsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.LabsListBySubscriptionNextResponse>;
  }

  /**
   * Returns a list of all labs in a resource group.
   * @summary Get all labs for a subscription and resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LabsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.LabsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PagedLabs>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PagedLabs>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PagedLabs>, callback?: msRest.ServiceCallback<Models.PagedLabs>): Promise<Models.LabsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.LabsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.LabServices/labs",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedLabs
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labs",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedLabs
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labs/{labName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Lab
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labs/{labName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Lab,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Lab
    },
    201: {
      bodyMapper: Mappers.Lab
    },
    202: {
      bodyMapper: Mappers.Lab
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labs/{labName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.LabUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Lab
    },
    202: {
      bodyMapper: Mappers.Lab
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labs/{labName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginPublishOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labs/{labName}/publish",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginSyncGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LabServices/labs/{labName}/syncGroup",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.labName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedLabs
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PagedLabs
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
