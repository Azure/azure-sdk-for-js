/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/ouContainerOperationsOperationsMappers";
import * as Parameters from "../models/parameters";
import { DomainservicesManagementClientContext } from "../domainservicesManagementClientContext";

/** Class representing a OuContainerOperationsOperations. */
export class OuContainerOperationsOperations {
  private readonly client: DomainservicesManagementClientContext;

  /**
   * Create a OuContainerOperationsOperations.
   * @param {DomainservicesManagementClientContext} client Reference to the service client.
   */
  constructor(client: DomainservicesManagementClientContext) {
    this.client = client;
  }

  /**
   * The List of OuContainers in DomainService instance.
   * @summary List of OuContainers in DomainService instance
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param [options] The optional parameters
   * @returns Promise<Models.OuContainerListResponse>
   */
  list(resourceGroupName: string, domainServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.OuContainerListResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param callback The callback
   */
  list(resourceGroupName: string, domainServiceName: string, callback: msRest.ServiceCallback<Models.OuContainerListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, domainServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OuContainerListResult>): void;
  list(resourceGroupName: string, domainServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OuContainerListResult>, callback?: msRest.ServiceCallback<Models.OuContainerListResult>): Promise<Models.OuContainerListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainServiceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.OuContainerListResponse>;
  }

  /**
   * Get OuContainer in DomainService instance.
   * @summary Get particular OuContainer in DomainService instance
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param ouContainerName The name of the OuContainer.
   * @param [options] The optional parameters
   * @returns Promise<Models.OuContainerGetResponse>
   */
  get(resourceGroupName: string, domainServiceName: string, ouContainerName: string, options?: msRest.RequestOptionsBase): Promise<Models.OuContainerGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param ouContainerName The name of the OuContainer.
   * @param callback The callback
   */
  get(resourceGroupName: string, domainServiceName: string, ouContainerName: string, callback: msRest.ServiceCallback<Models.OuContainer>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param ouContainerName The name of the OuContainer.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, domainServiceName: string, ouContainerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OuContainer>): void;
  get(resourceGroupName: string, domainServiceName: string, ouContainerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OuContainer>, callback?: msRest.ServiceCallback<Models.OuContainer>): Promise<Models.OuContainerGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainServiceName,
        ouContainerName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.OuContainerGetResponse>;
  }

  /**
   * The Create OuContainer operation creates a new OuContainer under the specified Domain Service
   * instance.
   * @summary Create OuContainer
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param ouContainerName The name of the OuContainer.
   * @param containerAccount Container Account Description.
   * @param [options] The optional parameters
   * @returns Promise<Models.OuContainerCreateResponse>
   */
  create(resourceGroupName: string, domainServiceName: string, ouContainerName: string, containerAccount: Models.ContainerAccount, options?: msRest.RequestOptionsBase): Promise<Models.OuContainerCreateResponse> {
    return this.beginCreate(resourceGroupName,domainServiceName,ouContainerName,containerAccount,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.OuContainerCreateResponse>;
  }

  /**
   * The Delete OuContainer operation deletes specified OuContainer.
   * @summary Delete OuContainer
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param ouContainerName The name of the OuContainer.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, domainServiceName: string, ouContainerName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,domainServiceName,ouContainerName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The Update OuContainer operation can be used to update the existing OuContainers.
   * @summary Update OuContainer (PATCH Resource)
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param ouContainerName The name of the OuContainer.
   * @param containerAccount Container Account Description.
   * @param [options] The optional parameters
   * @returns Promise<Models.OuContainerUpdateResponse>
   */
  update(resourceGroupName: string, domainServiceName: string, ouContainerName: string, containerAccount: Models.ContainerAccount, options?: msRest.RequestOptionsBase): Promise<Models.OuContainerUpdateResponse> {
    return this.beginUpdate(resourceGroupName,domainServiceName,ouContainerName,containerAccount,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.OuContainerUpdateResponse>;
  }

  /**
   * The Create OuContainer operation creates a new OuContainer under the specified Domain Service
   * instance.
   * @summary Create OuContainer
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param ouContainerName The name of the OuContainer.
   * @param containerAccount Container Account Description.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, domainServiceName: string, ouContainerName: string, containerAccount: Models.ContainerAccount, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        domainServiceName,
        ouContainerName,
        containerAccount,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * The Delete OuContainer operation deletes specified OuContainer.
   * @summary Delete OuContainer
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param ouContainerName The name of the OuContainer.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, domainServiceName: string, ouContainerName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        domainServiceName,
        ouContainerName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * The Update OuContainer operation can be used to update the existing OuContainers.
   * @summary Update OuContainer (PATCH Resource)
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param ouContainerName The name of the OuContainer.
   * @param containerAccount Container Account Description.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, domainServiceName: string, ouContainerName: string, containerAccount: Models.ContainerAccount, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        domainServiceName,
        ouContainerName,
        containerAccount,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * The List of OuContainers in DomainService instance.
   * @summary List of OuContainers in DomainService instance
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.OuContainerListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.OuContainerListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.OuContainerListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OuContainerListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OuContainerListResult>, callback?: msRest.ServiceCallback<Models.OuContainerListResult>): Promise<Models.OuContainerListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.OuContainerListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Aad/domainServices/{domainServiceName}/ouContainer",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OuContainerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Aad/domainServices/{domainServiceName}/ouContainer/{ouContainerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainServiceName,
    Parameters.ouContainerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OuContainer
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Aad/domainServices/{domainServiceName}/ouContainer/{ouContainerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainServiceName,
    Parameters.ouContainerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "containerAccount",
    mapper: {
      ...Mappers.ContainerAccount,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OuContainer
    },
    201: {
      bodyMapper: Mappers.OuContainer
    },
    202: {
      bodyMapper: Mappers.OuContainer
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Aad/domainServices/{domainServiceName}/ouContainer/{ouContainerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainServiceName,
    Parameters.ouContainerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Aad/domainServices/{domainServiceName}/ouContainer/{ouContainerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainServiceName,
    Parameters.ouContainerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "containerAccount",
    mapper: {
      ...Mappers.ContainerAccount,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OuContainer
    },
    202: {
      bodyMapper: Mappers.OuContainer
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OuContainerListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
