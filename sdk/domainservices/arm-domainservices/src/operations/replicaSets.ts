/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/replicaSetsMappers";
import * as Parameters from "../models/parameters";
import { DomainservicesManagementClientContext } from "../domainservicesManagementClientContext";

/** Class representing a ReplicaSets. */
export class ReplicaSets {
  private readonly client: DomainservicesManagementClientContext;

  /**
   * Create a ReplicaSets.
   * @param {DomainservicesManagementClientContext} client Reference to the service client.
   */
  constructor(client: DomainservicesManagementClientContext) {
    this.client = client;
  }

  /**
   * The List ReplicaSets in Resource Group operation lists all the domain services available under
   * the given resource group.
   * @summary List ReplicaSets in Resource Group
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicaSetsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, domainServiceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicaSetsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, domainServiceName: string, callback: msRest.ServiceCallback<Models.ReplicaSetListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, domainServiceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ReplicaSetListResult>): void;
  listByResourceGroup(resourceGroupName: string, domainServiceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ReplicaSetListResult>, callback?: msRest.ServiceCallback<Models.ReplicaSetListResult>): Promise<Models.ReplicaSetsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainServiceName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ReplicaSetsListByResourceGroupResponse>;
  }

  /**
   * The Create ReplicaSet operation creates a new domain service with the specified parameters.
   * @summary Create or Update ReplicaSet (PUT Resource)
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param replicaSetName The name of the replica set.
   * @param replicaSet Properties supplied to the Create ReplicaSet operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicaSetsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, domainServiceName: string, replicaSetName: string, replicaSet: Models.ReplicaSet, options?: msRest.RequestOptionsBase): Promise<Models.ReplicaSetsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,domainServiceName,replicaSetName,replicaSet,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicaSetsCreateOrUpdateResponse>;
  }

  /**
   * The Get ReplicaSet operation retrieves a json representation of the ReplicaSet.
   * @summary Get ReplicaSet
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param replicaSetName The name of the replica set.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicaSetsGetResponse>
   */
  get(resourceGroupName: string, domainServiceName: string, replicaSetName: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicaSetsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param replicaSetName The name of the replica set.
   * @param callback The callback
   */
  get(resourceGroupName: string, domainServiceName: string, replicaSetName: string, callback: msRest.ServiceCallback<Models.ReplicaSet>): void;
  /**
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param replicaSetName The name of the replica set.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, domainServiceName: string, replicaSetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ReplicaSet>): void;
  get(resourceGroupName: string, domainServiceName: string, replicaSetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ReplicaSet>, callback?: msRest.ServiceCallback<Models.ReplicaSet>): Promise<Models.ReplicaSetsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        domainServiceName,
        replicaSetName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ReplicaSetsGetResponse>;
  }

  /**
   * The Delete ReplicaSet operation deletes an existing ReplicaSet.
   * @summary Delete ReplicaSet (DELETE Resource)
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param replicaSetName The name of the replica set.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicaSetsDeleteMethodResponse>
   */
  deleteMethod(resourceGroupName: string, domainServiceName: string, replicaSetName: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicaSetsDeleteMethodResponse> {
    return this.beginDeleteMethod(resourceGroupName,domainServiceName,replicaSetName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicaSetsDeleteMethodResponse>;
  }

  /**
   * The Update ReplicaSet operation can be used to update the existing deployment. The update call
   * only supports the properties listed in the PATCH body.
   * @summary Update ReplicaSet (PATCH Resource)
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param replicaSetName The name of the replica set.
   * @param replicaSet Properties supplied to the Update a ReplicaSet operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicaSetsUpdateResponse>
   */
  update(resourceGroupName: string, domainServiceName: string, replicaSetName: string, replicaSet: Models.ReplicaSet, options?: msRest.RequestOptionsBase): Promise<Models.ReplicaSetsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,domainServiceName,replicaSetName,replicaSet,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicaSetsUpdateResponse>;
  }

  /**
   * The Create ReplicaSet operation creates a new domain service with the specified parameters.
   * @summary Create or Update ReplicaSet (PUT Resource)
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param replicaSetName The name of the replica set.
   * @param replicaSet Properties supplied to the Create ReplicaSet operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, domainServiceName: string, replicaSetName: string, replicaSet: Models.ReplicaSet, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        domainServiceName,
        replicaSetName,
        replicaSet,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * The Delete ReplicaSet operation deletes an existing ReplicaSet.
   * @summary Delete ReplicaSet (DELETE Resource)
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param replicaSetName The name of the replica set.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, domainServiceName: string, replicaSetName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        domainServiceName,
        replicaSetName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * The Update ReplicaSet operation can be used to update the existing deployment. The update call
   * only supports the properties listed in the PATCH body.
   * @summary Update ReplicaSet (PATCH Resource)
   * @param resourceGroupName The name of the resource group within the user's subscription. The name
   * is case insensitive.
   * @param domainServiceName The name of the domain service.
   * @param replicaSetName The name of the replica set.
   * @param replicaSet Properties supplied to the Update a ReplicaSet operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, domainServiceName: string, replicaSetName: string, replicaSet: Models.ReplicaSet, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        domainServiceName,
        replicaSetName,
        replicaSet,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * The List ReplicaSets in Resource Group operation lists all the domain services available under
   * the given resource group.
   * @summary List ReplicaSets in Resource Group
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicaSetsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicaSetsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ReplicaSetListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ReplicaSetListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ReplicaSetListResult>, callback?: msRest.ServiceCallback<Models.ReplicaSetListResult>): Promise<Models.ReplicaSetsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.ReplicaSetsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}/replicaSets",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainServiceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicaSetListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}/replicaSets/{replicaSetName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainServiceName,
    Parameters.replicaSetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicaSet
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}/replicaSets/{replicaSetName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainServiceName,
    Parameters.replicaSetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "replicaSet",
    mapper: {
      ...Mappers.ReplicaSet,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReplicaSet
    },
    201: {
      bodyMapper: Mappers.ReplicaSet
    },
    202: {
      bodyMapper: Mappers.ReplicaSet
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}/replicaSets/{replicaSetName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainServiceName,
    Parameters.replicaSetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {
      bodyMapper: Mappers.ReplicaSet
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AAD/domainServices/{domainServiceName}/replicaSets/{replicaSetName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.domainServiceName,
    Parameters.replicaSetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "replicaSet",
    mapper: {
      ...Mappers.ReplicaSet,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReplicaSet
    },
    202: {
      bodyMapper: Mappers.ReplicaSet
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicaSetListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
