/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Project,
  ProjectsListBySubscriptionOptionalParams,
  ProjectsListByResourceGroupOptionalParams,
  ProjectsGetOptionalParams,
  ProjectsGetResponse,
  ProjectsCreateOrUpdateOptionalParams,
  ProjectsCreateOrUpdateResponse,
  ProjectUpdate,
  ProjectsUpdateOptionalParams,
  ProjectsUpdateResponse,
  ProjectsDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Projects. */
export interface Projects {
  /**
   * Lists all projects in the subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: ProjectsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Project>;
  /**
   * Lists all projects in the resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: ProjectsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Project>;
  /**
   * Gets a specific project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName The name of the project.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    projectName: string,
    options?: ProjectsGetOptionalParams
  ): Promise<ProjectsGetResponse>;
  /**
   * Creates or updates a project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName The name of the project.
   * @param body Represents a project.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    projectName: string,
    body: Project,
    options?: ProjectsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ProjectsCreateOrUpdateResponse>,
      ProjectsCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates a project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName The name of the project.
   * @param body Represents a project.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    projectName: string,
    body: Project,
    options?: ProjectsCreateOrUpdateOptionalParams
  ): Promise<ProjectsCreateOrUpdateResponse>;
  /**
   * Partially updates a project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName The name of the project.
   * @param body Updatable project properties.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    projectName: string,
    body: ProjectUpdate,
    options?: ProjectsUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<ProjectsUpdateResponse>,
      ProjectsUpdateResponse
    >
  >;
  /**
   * Partially updates a project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName The name of the project.
   * @param body Updatable project properties.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    projectName: string,
    body: ProjectUpdate,
    options?: ProjectsUpdateOptionalParams
  ): Promise<ProjectsUpdateResponse>;
  /**
   * Deletes a project resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName The name of the project.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    projectName: string,
    options?: ProjectsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a project resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param projectName The name of the project.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    projectName: string,
    options?: ProjectsDeleteOptionalParams
  ): Promise<void>;
}
