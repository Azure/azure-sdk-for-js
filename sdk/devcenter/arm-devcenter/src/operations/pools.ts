/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Pools } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DevCenterClient } from "../devCenterClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Pool,
  PoolsListByProjectNextOptionalParams,
  PoolsListByProjectOptionalParams,
  PoolsListByProjectResponse,
  PoolsGetOptionalParams,
  PoolsGetResponse,
  PoolsCreateOrUpdateOptionalParams,
  PoolsCreateOrUpdateResponse,
  PoolUpdate,
  PoolsUpdateOptionalParams,
  PoolsUpdateResponse,
  PoolsDeleteOptionalParams,
  PoolsListByProjectNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Pools operations. */
export class PoolsImpl implements Pools {
  private readonly client: DevCenterClient;

  /**
   * Initialize a new instance of the class Pools class.
   * @param client Reference to the service client
   */
  constructor(client: DevCenterClient) {
    this.client = client;
  }

  /**
   * Lists pools for a project
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param projectName The name of the project.
   * @param options The options parameters.
   */
  public listByProject(
    resourceGroupName: string,
    projectName: string,
    options?: PoolsListByProjectOptionalParams
  ): PagedAsyncIterableIterator<Pool> {
    const iter = this.listByProjectPagingAll(
      resourceGroupName,
      projectName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByProjectPagingPage(
          resourceGroupName,
          projectName,
          options
        );
      }
    };
  }

  private async *listByProjectPagingPage(
    resourceGroupName: string,
    projectName: string,
    options?: PoolsListByProjectOptionalParams
  ): AsyncIterableIterator<Pool[]> {
    let result = await this._listByProject(
      resourceGroupName,
      projectName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByProjectNext(
        resourceGroupName,
        projectName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByProjectPagingAll(
    resourceGroupName: string,
    projectName: string,
    options?: PoolsListByProjectOptionalParams
  ): AsyncIterableIterator<Pool> {
    for await (const page of this.listByProjectPagingPage(
      resourceGroupName,
      projectName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists pools for a project
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param projectName The name of the project.
   * @param options The options parameters.
   */
  private _listByProject(
    resourceGroupName: string,
    projectName: string,
    options?: PoolsListByProjectOptionalParams
  ): Promise<PoolsListByProjectResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, options },
      listByProjectOperationSpec
    );
  }

  /**
   * Gets a machine pool
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param projectName The name of the project.
   * @param poolName Name of the pool.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    projectName: string,
    poolName: string,
    options?: PoolsGetOptionalParams
  ): Promise<PoolsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, poolName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a machine pool
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param projectName The name of the project.
   * @param poolName Name of the pool.
   * @param body Represents a machine pool
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    projectName: string,
    poolName: string,
    body: Pool,
    options?: PoolsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<PoolsCreateOrUpdateResponse>,
      PoolsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PoolsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, projectName, poolName, body, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates a machine pool
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param projectName The name of the project.
   * @param poolName Name of the pool.
   * @param body Represents a machine pool
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    projectName: string,
    poolName: string,
    body: Pool,
    options?: PoolsCreateOrUpdateOptionalParams
  ): Promise<PoolsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      projectName,
      poolName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Partially updates a machine pool
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param projectName The name of the project.
   * @param poolName Name of the pool.
   * @param body Represents a machine pool
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    projectName: string,
    poolName: string,
    body: PoolUpdate,
    options?: PoolsUpdateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<PoolsUpdateResponse>, PoolsUpdateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PoolsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, projectName, poolName, body, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Partially updates a machine pool
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param projectName The name of the project.
   * @param poolName Name of the pool.
   * @param body Represents a machine pool
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    projectName: string,
    poolName: string,
    body: PoolUpdate,
    options?: PoolsUpdateOptionalParams
  ): Promise<PoolsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      projectName,
      poolName,
      body,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a machine pool
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param projectName The name of the project.
   * @param poolName Name of the pool.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    projectName: string,
    poolName: string,
    options?: PoolsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, projectName, poolName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a machine pool
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param projectName The name of the project.
   * @param poolName Name of the pool.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    projectName: string,
    poolName: string,
    options?: PoolsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      projectName,
      poolName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByProjectNext
   * @param resourceGroupName Name of the resource group within the Azure subscription.
   * @param projectName The name of the project.
   * @param nextLink The nextLink from the previous successful call to the ListByProject method.
   * @param options The options parameters.
   */
  private _listByProjectNext(
    resourceGroupName: string,
    projectName: string,
    nextLink: string,
    options?: PoolsListByProjectNextOptionalParams
  ): Promise<PoolsListByProjectNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, projectName, nextLink, options },
      listByProjectNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByProjectOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/pools",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PoolListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/pools/{poolName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Pool
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.poolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/pools/{poolName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Pool
    },
    201: {
      bodyMapper: Mappers.Pool
    },
    202: {
      bodyMapper: Mappers.Pool
    },
    204: {
      bodyMapper: Mappers.Pool
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.body14,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.poolName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/pools/{poolName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Pool
    },
    201: {
      bodyMapper: Mappers.Pool
    },
    202: {
      bodyMapper: Mappers.Pool
    },
    204: {
      bodyMapper: Mappers.Pool
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.body15,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.poolName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/pools/{poolName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.projectName,
    Parameters.poolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByProjectNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PoolListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.projectName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
