/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const DevCenterListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevCenterListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DevCenter"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudErrorBody"
            }
          }
        }
      }
    }
  }
};

export const TrackedResourceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResourceUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProjectListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Project"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProjectUpdateProperties",
    modelProperties: {
      devCenterId: {
        serializedName: "devCenterId",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      maxDevBoxesPerUser: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "maxDevBoxesPerUser",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AttachedNetworkListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttachedNetworkListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AttachedNetworkConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GalleryListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GalleryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Gallery"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Image"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecommendedMachineConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecommendedMachineConfiguration",
    modelProperties: {
      memory: {
        serializedName: "memory",
        type: {
          name: "Composite",
          className: "ResourceRange"
        }
      },
      vCPUs: {
        serializedName: "vCPUs",
        type: {
          name: "Composite",
          className: "ResourceRange"
        }
      }
    }
  }
};

export const ResourceRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceRange",
    modelProperties: {
      min: {
        serializedName: "min",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      max: {
        serializedName: "max",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ImageVersionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageVersionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImageVersion"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CatalogListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CatalogListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Catalog"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CatalogUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CatalogUpdateProperties",
    modelProperties: {
      gitHub: {
        serializedName: "gitHub",
        type: {
          name: "Composite",
          className: "GitCatalog"
        }
      },
      adoGit: {
        serializedName: "adoGit",
        type: {
          name: "Composite",
          className: "GitCatalog"
        }
      }
    }
  }
};

export const GitCatalog: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GitCatalog",
    modelProperties: {
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      },
      branch: {
        serializedName: "branch",
        type: {
          name: "String"
        }
      },
      secretIdentifier: {
        serializedName: "secretIdentifier",
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CatalogUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CatalogUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      gitHub: {
        serializedName: "properties.gitHub",
        type: {
          name: "Composite",
          className: "GitCatalog"
        }
      },
      adoGit: {
        serializedName: "properties.adoGit",
        type: {
          name: "Composite",
          className: "GitCatalog"
        }
      }
    }
  }
};

export const EnvironmentTypeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentTypeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentType"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentTypeUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentTypeUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AllowedEnvironmentTypeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AllowedEnvironmentTypeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AllowedEnvironmentType"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectEnvironmentTypeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProjectEnvironmentTypeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProjectEnvironmentType"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectEnvironmentTypeUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProjectEnvironmentTypeUpdateProperties",
    modelProperties: {
      deploymentTargetId: {
        serializedName: "deploymentTargetId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      creatorRoleAssignment: {
        serializedName: "creatorRoleAssignment",
        type: {
          name: "Composite",
          className:
            "ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment"
        }
      },
      userRoleAssignments: {
        serializedName: "userRoleAssignments",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserRoleAssignmentValue" }
          }
        }
      }
    }
  }
};

export const ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment",
    modelProperties: {
      roles: {
        serializedName: "roles",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "EnvironmentRole" } }
        }
      }
    }
  }
};

export const EnvironmentRole: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentRole",
    modelProperties: {
      roleName: {
        serializedName: "roleName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserRoleAssignmentValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserRoleAssignmentValue",
    modelProperties: {
      roles: {
        serializedName: "roles",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "EnvironmentRole" } }
        }
      }
    }
  }
};

export const ProjectEnvironmentTypeUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProjectEnvironmentTypeUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      deploymentTargetId: {
        serializedName: "properties.deploymentTargetId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      creatorRoleAssignment: {
        serializedName: "properties.creatorRoleAssignment",
        type: {
          name: "Composite",
          className:
            "ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment"
        }
      },
      userRoleAssignments: {
        serializedName: "properties.userRoleAssignments",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserRoleAssignmentValue" }
          }
        }
      }
    }
  }
};

export const DevBoxDefinitionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevBoxDefinitionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DevBoxDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageValidationErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageValidationErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageReference",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      exactVersion: {
        serializedName: "exactVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DevBoxDefinitionUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevBoxDefinitionUpdateProperties",
    modelProperties: {
      imageReference: {
        serializedName: "imageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      osStorageType: {
        serializedName: "osStorageType",
        type: {
          name: "String"
        }
      },
      hibernateSupport: {
        serializedName: "hibernateSupport",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "Enum",
          allowedValues: ["Free", "Basic", "Standard", "Premium"]
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationStatusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatusResult",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      percentComplete: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "percentComplete",
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      operations: {
        serializedName: "operations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationStatusResult"
            }
          }
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ListUsagesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListUsagesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      currentValue: {
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const UsageName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponse",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const SkuListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DevCenterSku"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Capability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Capability",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Pool"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthStatusDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthStatusDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolUpdateProperties",
    modelProperties: {
      devBoxDefinitionName: {
        serializedName: "devBoxDefinitionName",
        type: {
          name: "String"
        }
      },
      networkConnectionName: {
        serializedName: "networkConnectionName",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      localAdministrator: {
        serializedName: "localAdministrator",
        type: {
          name: "String"
        }
      },
      stopOnDisconnect: {
        serializedName: "stopOnDisconnect",
        type: {
          name: "Composite",
          className: "StopOnDisconnectConfiguration"
        }
      }
    }
  }
};

export const StopOnDisconnectConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StopOnDisconnectConfiguration",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      gracePeriodMinutes: {
        serializedName: "gracePeriodMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ScheduleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Schedule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScheduleUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleUpdateProperties",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      frequency: {
        serializedName: "frequency",
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "time",
        type: {
          name: "String"
        }
      },
      timeZone: {
        serializedName: "timeZone",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkConnectionUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConnectionUpdateProperties",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      },
      domainName: {
        serializedName: "domainName",
        type: {
          name: "String"
        }
      },
      organizationUnit: {
        serializedName: "organizationUnit",
        type: {
          name: "String"
        }
      },
      domainUsername: {
        serializedName: "domainUsername",
        type: {
          name: "String"
        }
      },
      domainPassword: {
        serializedName: "domainPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthCheckStatusDetailsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthCheckStatusDetailsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthCheckStatusDetails"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthCheck: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthCheck",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startDateTime: {
        serializedName: "startDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endDateTime: {
        serializedName: "endDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      errorType: {
        serializedName: "errorType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedAction: {
        serializedName: "recommendedAction",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      additionalDetails: {
        serializedName: "additionalDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutboundEnvironmentEndpointCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutboundEnvironmentEndpointCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OutboundEnvironmentEndpoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutboundEnvironmentEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutboundEnvironmentEndpoint",
    modelProperties: {
      category: {
        serializedName: "category",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endpoints: {
        serializedName: "endpoints",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EndpointDependency"
            }
          }
        }
      }
    }
  }
};

export const EndpointDependency: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointDependency",
    modelProperties: {
      domainName: {
        serializedName: "domainName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endpointDetails: {
        serializedName: "endpointDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EndpointDetail"
            }
          }
        }
      }
    }
  }
};

export const EndpointDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointDetail",
    modelProperties: {
      port: {
        serializedName: "port",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AttachedNetworkConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttachedNetworkConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkConnectionId: {
        serializedName: "properties.networkConnectionId",
        type: {
          name: "String"
        }
      },
      networkConnectionLocation: {
        serializedName: "properties.networkConnectionLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthCheckStatus: {
        serializedName: "properties.healthCheckStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      domainJoinType: {
        serializedName: "properties.domainJoinType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Gallery: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Gallery",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      galleryResourceId: {
        serializedName: "properties.galleryResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const Catalog: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Catalog",
    modelProperties: {
      ...Resource.type.modelProperties,
      gitHub: {
        serializedName: "properties.gitHub",
        type: {
          name: "Composite",
          className: "GitCatalog"
        }
      },
      adoGit: {
        serializedName: "properties.adoGit",
        type: {
          name: "Composite",
          className: "GitCatalog"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      syncState: {
        serializedName: "properties.syncState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastSyncTime: {
        serializedName: "properties.lastSyncTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const EnvironmentType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentType",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AllowedEnvironmentType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AllowedEnvironmentType",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectEnvironmentType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProjectEnvironmentType",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      deploymentTargetId: {
        serializedName: "properties.deploymentTargetId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      creatorRoleAssignment: {
        serializedName: "properties.creatorRoleAssignment",
        type: {
          name: "Composite",
          className:
            "ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment"
        }
      },
      userRoleAssignments: {
        serializedName: "properties.userRoleAssignments",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserRoleAssignmentValue" }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Schedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Schedule",
    modelProperties: {
      ...Resource.type.modelProperties,
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      frequency: {
        serializedName: "properties.frequency",
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "properties.time",
        type: {
          name: "String"
        }
      },
      timeZone: {
        serializedName: "properties.timeZone",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthCheckStatusDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthCheckStatusDetails",
    modelProperties: {
      ...Resource.type.modelProperties,
      startDateTime: {
        serializedName: "properties.startDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endDateTime: {
        serializedName: "properties.endDateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      healthChecks: {
        serializedName: "properties.healthChecks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthCheck"
            }
          }
        }
      }
    }
  }
};

export const DevCenterUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevCenterUpdate",
    modelProperties: {
      ...TrackedResourceUpdate.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      }
    }
  }
};

export const ProjectUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProjectUpdate",
    modelProperties: {
      ...TrackedResourceUpdate.type.modelProperties,
      devCenterId: {
        serializedName: "properties.devCenterId",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      maxDevBoxesPerUser: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "properties.maxDevBoxesPerUser",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DevBoxDefinitionUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevBoxDefinitionUpdate",
    modelProperties: {
      ...TrackedResourceUpdate.type.modelProperties,
      imageReference: {
        serializedName: "properties.imageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      },
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      osStorageType: {
        serializedName: "properties.osStorageType",
        type: {
          name: "String"
        }
      },
      hibernateSupport: {
        serializedName: "properties.hibernateSupport",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PoolUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolUpdate",
    modelProperties: {
      ...TrackedResourceUpdate.type.modelProperties,
      devBoxDefinitionName: {
        serializedName: "properties.devBoxDefinitionName",
        type: {
          name: "String"
        }
      },
      networkConnectionName: {
        serializedName: "properties.networkConnectionName",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      localAdministrator: {
        serializedName: "properties.localAdministrator",
        type: {
          name: "String"
        }
      },
      stopOnDisconnect: {
        serializedName: "properties.stopOnDisconnect",
        type: {
          name: "Composite",
          className: "StopOnDisconnectConfiguration"
        }
      }
    }
  }
};

export const ScheduleUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleUpdate",
    modelProperties: {
      ...TrackedResourceUpdate.type.modelProperties,
      type: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      frequency: {
        serializedName: "properties.frequency",
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "properties.time",
        type: {
          name: "String"
        }
      },
      timeZone: {
        serializedName: "properties.timeZone",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkConnectionUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConnectionUpdate",
    modelProperties: {
      ...TrackedResourceUpdate.type.modelProperties,
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      domainName: {
        serializedName: "properties.domainName",
        type: {
          name: "String"
        }
      },
      organizationUnit: {
        serializedName: "properties.organizationUnit",
        type: {
          name: "String"
        }
      },
      domainUsername: {
        serializedName: "properties.domainUsername",
        type: {
          name: "String"
        }
      },
      domainPassword: {
        serializedName: "properties.domainPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProjectProperties",
    modelProperties: {
      ...ProjectUpdateProperties.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      devCenterUri: {
        serializedName: "devCenterUri",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CatalogProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CatalogProperties",
    modelProperties: {
      ...CatalogUpdateProperties.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      syncState: {
        serializedName: "syncState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastSyncTime: {
        serializedName: "lastSyncTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ProjectEnvironmentTypeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProjectEnvironmentTypeProperties",
    modelProperties: {
      ...ProjectEnvironmentTypeUpdateProperties.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DevBoxDefinitionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevBoxDefinitionProperties",
    modelProperties: {
      ...DevBoxDefinitionUpdateProperties.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      imageValidationStatus: {
        serializedName: "imageValidationStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      imageValidationErrorDetails: {
        serializedName: "imageValidationErrorDetails",
        type: {
          name: "Composite",
          className: "ImageValidationErrorDetails"
        }
      },
      activeImageReference: {
        serializedName: "activeImageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      }
    }
  }
};

export const DevCenterSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevCenterSku",
    modelProperties: {
      ...Sku.type.modelProperties,
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      }
    }
  }
};

export const OperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatus",
    modelProperties: {
      ...OperationStatusResult.type.modelProperties,
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const PoolProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PoolProperties",
    modelProperties: {
      ...PoolUpdateProperties.type.modelProperties,
      healthStatus: {
        serializedName: "healthStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthStatusDetails: {
        serializedName: "healthStatusDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthStatusDetail"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScheduleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleProperties",
    modelProperties: {
      ...ScheduleUpdateProperties.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkProperties",
    modelProperties: {
      ...NetworkConnectionUpdateProperties.type.modelProperties,
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthCheckStatus: {
        serializedName: "healthCheckStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkingResourceGroupName: {
        serializedName: "networkingResourceGroupName",
        type: {
          name: "String"
        }
      },
      domainJoinType: {
        serializedName: "domainJoinType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DevCenter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevCenter",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      devCenterUri: {
        serializedName: "properties.devCenterUri",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Project: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Project",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      devCenterId: {
        serializedName: "properties.devCenterId",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      maxDevBoxesPerUser: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "properties.maxDevBoxesPerUser",
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      devCenterUri: {
        serializedName: "properties.devCenterUri",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DevBoxDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevBoxDefinition",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      imageReference: {
        serializedName: "properties.imageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      },
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      osStorageType: {
        serializedName: "properties.osStorageType",
        type: {
          name: "String"
        }
      },
      hibernateSupport: {
        serializedName: "properties.hibernateSupport",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      imageValidationStatus: {
        serializedName: "properties.imageValidationStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      imageValidationErrorDetails: {
        serializedName: "properties.imageValidationErrorDetails",
        type: {
          name: "Composite",
          className: "ImageValidationErrorDetails"
        }
      },
      activeImageReference: {
        serializedName: "properties.activeImageReference",
        type: {
          name: "Composite",
          className: "ImageReference"
        }
      }
    }
  }
};

export const Pool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Pool",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      devBoxDefinitionName: {
        serializedName: "properties.devBoxDefinitionName",
        type: {
          name: "String"
        }
      },
      networkConnectionName: {
        serializedName: "properties.networkConnectionName",
        type: {
          name: "String"
        }
      },
      licenseType: {
        serializedName: "properties.licenseType",
        type: {
          name: "String"
        }
      },
      localAdministrator: {
        serializedName: "properties.localAdministrator",
        type: {
          name: "String"
        }
      },
      stopOnDisconnect: {
        serializedName: "properties.stopOnDisconnect",
        type: {
          name: "Composite",
          className: "StopOnDisconnectConfiguration"
        }
      },
      healthStatus: {
        serializedName: "properties.healthStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthStatusDetails: {
        serializedName: "properties.healthStatusDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthStatusDetail"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkConnection",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      subnetId: {
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      domainName: {
        serializedName: "properties.domainName",
        type: {
          name: "String"
        }
      },
      organizationUnit: {
        serializedName: "properties.organizationUnit",
        type: {
          name: "String"
        }
      },
      domainUsername: {
        serializedName: "properties.domainUsername",
        type: {
          name: "String"
        }
      },
      domainPassword: {
        serializedName: "properties.domainPassword",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthCheckStatus: {
        serializedName: "properties.healthCheckStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkingResourceGroupName: {
        serializedName: "properties.networkingResourceGroupName",
        type: {
          name: "String"
        }
      },
      domainJoinType: {
        serializedName: "properties.domainJoinType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Image: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Image",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publisher: {
        serializedName: "properties.publisher",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      offer: {
        serializedName: "properties.offer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "properties.sku",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendedMachineConfiguration: {
        serializedName: "properties.recommendedMachineConfiguration",
        type: {
          name: "Composite",
          className: "RecommendedMachineConfiguration"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hibernateSupport: {
        serializedName: "properties.hibernateSupport",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageVersion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageVersion",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      namePropertiesName: {
        serializedName: "properties.name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publishedDate: {
        serializedName: "properties.publishedDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      excludeFromLatest: {
        serializedName: "properties.excludeFromLatest",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      osDiskImageSizeInGb: {
        serializedName: "properties.osDiskImageSizeInGb",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};
