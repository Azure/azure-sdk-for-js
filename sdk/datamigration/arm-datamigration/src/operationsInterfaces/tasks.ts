/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  ProjectTask,
  TasksListOptionalParams,
  TasksCreateOrUpdateOptionalParams,
  TasksCreateOrUpdateResponse,
  TasksGetOptionalParams,
  TasksGetResponse,
  TasksDeleteOptionalParams,
  TasksUpdateOptionalParams,
  TasksUpdateResponse,
  TasksCancelOptionalParams,
  TasksCancelResponse,
  CommandPropertiesUnion,
  TasksCommandOptionalParams,
  TasksCommandResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Tasks. */
export interface Tasks {
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. This
   * method returns a list of tasks owned by a service resource. Some tasks may have a status of Unknown,
   * which indicates that an error occurred while querying the status of that task.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param projectName Name of the project
   * @param options The options parameters.
   */
  list(
    groupName: string,
    serviceName: string,
    projectName: string,
    options?: TasksListOptionalParams
  ): PagedAsyncIterableIterator<ProjectTask>;
  /**
   * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance.
   * The PUT method creates a new task or updates an existing one, although since tasks have no mutable
   * custom properties, there is little reason to update an existing one.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param projectName Name of the project
   * @param taskName Name of the Task
   * @param parameters Information about the task
   * @param options The options parameters.
   */
  createOrUpdate(
    groupName: string,
    serviceName: string,
    projectName: string,
    taskName: string,
    parameters: ProjectTask,
    options?: TasksCreateOrUpdateOptionalParams
  ): Promise<TasksCreateOrUpdateResponse>;
  /**
   * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance.
   * The GET method retrieves information about a task.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param projectName Name of the project
   * @param taskName Name of the Task
   * @param options The options parameters.
   */
  get(
    groupName: string,
    serviceName: string,
    projectName: string,
    taskName: string,
    options?: TasksGetOptionalParams
  ): Promise<TasksGetResponse>;
  /**
   * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance.
   * The DELETE method deletes a task, canceling it first if it's running.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param projectName Name of the project
   * @param taskName Name of the Task
   * @param options The options parameters.
   */
  delete(
    groupName: string,
    serviceName: string,
    projectName: string,
    taskName: string,
    options?: TasksDeleteOptionalParams
  ): Promise<void>;
  /**
   * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance.
   * The PATCH method updates an existing task, but since tasks have no mutable custom properties, there
   * is little reason to do so.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param projectName Name of the project
   * @param taskName Name of the Task
   * @param parameters Information about the task
   * @param options The options parameters.
   */
  update(
    groupName: string,
    serviceName: string,
    projectName: string,
    taskName: string,
    parameters: ProjectTask,
    options?: TasksUpdateOptionalParams
  ): Promise<TasksUpdateResponse>;
  /**
   * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance.
   * This method cancels a task if it's currently queued or running.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param projectName Name of the project
   * @param taskName Name of the Task
   * @param options The options parameters.
   */
  cancel(
    groupName: string,
    serviceName: string,
    projectName: string,
    taskName: string,
    options?: TasksCancelOptionalParams
  ): Promise<TasksCancelResponse>;
  /**
   * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance.
   * This method executes a command on a running task.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param projectName Name of the project
   * @param taskName Name of the Task
   * @param parameters Command to execute
   * @param options The options parameters.
   */
  command(
    groupName: string,
    serviceName: string,
    projectName: string,
    taskName: string,
    parameters: CommandPropertiesUnion,
    options?: TasksCommandOptionalParams
  ): Promise<TasksCommandResponse>;
}
