/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  AvailableServiceSku,
  ServicesListSkusOptionalParams,
  DataMigrationService,
  ServicesListByResourceGroupOptionalParams,
  ServicesListOptionalParams,
  ServicesCreateOrUpdateOptionalParams,
  ServicesCreateOrUpdateResponse,
  ServicesGetOptionalParams,
  ServicesGetResponse,
  ServicesDeleteOptionalParams,
  ServicesUpdateOptionalParams,
  ServicesUpdateResponse,
  ServicesCheckStatusOptionalParams,
  ServicesCheckStatusResponse,
  ServicesStartOptionalParams,
  ServicesStopOptionalParams,
  NameAvailabilityRequest,
  ServicesCheckChildrenNameAvailabilityOptionalParams,
  ServicesCheckChildrenNameAvailabilityResponse,
  ServicesCheckNameAvailabilityOptionalParams,
  ServicesCheckNameAvailabilityResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Services. */
export interface Services {
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. The
   * skus action returns the list of SKUs that a service resource can be updated to.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param options The options parameters.
   */
  listSkus(
    groupName: string,
    serviceName: string,
    options?: ServicesListSkusOptionalParams
  ): PagedAsyncIterableIterator<AvailableServiceSku>;
  /**
   * The Services resource is the top-level resource that represents the Database Migration Service. This
   * method returns a list of service resources in a resource group.
   * @param groupName Name of the resource group
   * @param options The options parameters.
   */
  listByResourceGroup(
    groupName: string,
    options?: ServicesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<DataMigrationService>;
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. This
   * method returns a list of service resources in a subscription.
   * @param options The options parameters.
   */
  list(
    options?: ServicesListOptionalParams
  ): PagedAsyncIterableIterator<DataMigrationService>;
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. The
   * PUT method creates a new service or updates an existing one. When a service is updated, existing
   * child resources (i.e. tasks) are unaffected. Services currently support a single kind, "vm", which
   * refers to a VM-based service, although other kinds may be added in the future. This method can
   * change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the
   * service is busy), this will fail with 400 Bad Request ("ServiceIsBusy"). The provider will reply
   * when successful with 200 OK or 201 Created. Long-running operations use the provisioningState
   * property.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param parameters Information about the service
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    groupName: string,
    serviceName: string,
    parameters: DataMigrationService,
    options?: ServicesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ServicesCreateOrUpdateResponse>,
      ServicesCreateOrUpdateResponse
    >
  >;
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. The
   * PUT method creates a new service or updates an existing one. When a service is updated, existing
   * child resources (i.e. tasks) are unaffected. Services currently support a single kind, "vm", which
   * refers to a VM-based service, although other kinds may be added in the future. This method can
   * change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the
   * service is busy), this will fail with 400 Bad Request ("ServiceIsBusy"). The provider will reply
   * when successful with 200 OK or 201 Created. Long-running operations use the provisioningState
   * property.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param parameters Information about the service
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    groupName: string,
    serviceName: string,
    parameters: DataMigrationService,
    options?: ServicesCreateOrUpdateOptionalParams
  ): Promise<ServicesCreateOrUpdateResponse>;
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. The
   * GET method retrieves information about a service instance.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param options The options parameters.
   */
  get(
    groupName: string,
    serviceName: string,
    options?: ServicesGetOptionalParams
  ): Promise<ServicesGetResponse>;
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. The
   * DELETE method deletes a service. Any running tasks will be canceled.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param options The options parameters.
   */
  beginDelete(
    groupName: string,
    serviceName: string,
    options?: ServicesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. The
   * DELETE method deletes a service. Any running tasks will be canceled.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    groupName: string,
    serviceName: string,
    options?: ServicesDeleteOptionalParams
  ): Promise<void>;
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. The
   * PATCH method updates an existing service. This method can change the kind, SKU, and network of the
   * service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad
   * Request ("ServiceIsBusy").
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param parameters Information about the service
   * @param options The options parameters.
   */
  beginUpdate(
    groupName: string,
    serviceName: string,
    parameters: DataMigrationService,
    options?: ServicesUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<ServicesUpdateResponse>,
      ServicesUpdateResponse
    >
  >;
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. The
   * PATCH method updates an existing service. This method can change the kind, SKU, and network of the
   * service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad
   * Request ("ServiceIsBusy").
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param parameters Information about the service
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    groupName: string,
    serviceName: string,
    parameters: DataMigrationService,
    options?: ServicesUpdateOptionalParams
  ): Promise<ServicesUpdateResponse>;
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. This
   * action performs a health check and returns the status of the service and virtual machine size.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param options The options parameters.
   */
  checkStatus(
    groupName: string,
    serviceName: string,
    options?: ServicesCheckStatusOptionalParams
  ): Promise<ServicesCheckStatusResponse>;
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. This
   * action starts the service and the service can be used for data migration.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param options The options parameters.
   */
  beginStart(
    groupName: string,
    serviceName: string,
    options?: ServicesStartOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. This
   * action starts the service and the service can be used for data migration.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param options The options parameters.
   */
  beginStartAndWait(
    groupName: string,
    serviceName: string,
    options?: ServicesStartOptionalParams
  ): Promise<void>;
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. This
   * action stops the service and the service cannot be used for data migration. The service owner won't
   * be billed when the service is stopped.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param options The options parameters.
   */
  beginStop(
    groupName: string,
    serviceName: string,
    options?: ServicesStopOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * The services resource is the top-level resource that represents the Database Migration Service. This
   * action stops the service and the service cannot be used for data migration. The service owner won't
   * be billed when the service is stopped.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param options The options parameters.
   */
  beginStopAndWait(
    groupName: string,
    serviceName: string,
    options?: ServicesStopOptionalParams
  ): Promise<void>;
  /**
   * This method checks whether a proposed nested resource name is valid and available.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param parameters Requested name to validate
   * @param options The options parameters.
   */
  checkChildrenNameAvailability(
    groupName: string,
    serviceName: string,
    parameters: NameAvailabilityRequest,
    options?: ServicesCheckChildrenNameAvailabilityOptionalParams
  ): Promise<ServicesCheckChildrenNameAvailabilityResponse>;
  /**
   * This method checks whether a proposed top-level resource name is valid and available.
   * @param location The Azure region of the operation
   * @param parameters Requested name to validate
   * @param options The options parameters.
   */
  checkNameAvailability(
    location: string,
    parameters: NameAvailabilityRequest,
    options?: ServicesCheckNameAvailabilityOptionalParams
  ): Promise<ServicesCheckNameAvailabilityResponse>;
}
