// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { MigrationServices } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { DataMigrationManagementClient } from "../dataMigrationManagementClient.js";
import { SimplePollerLike, OperationState, createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  MigrationService,
  MigrationServicesListByResourceGroupNextOptionalParams,
  MigrationServicesListByResourceGroupOptionalParams,
  MigrationServicesListByResourceGroupResponse,
  MigrationServicesListBySubscriptionNextOptionalParams,
  MigrationServicesListBySubscriptionOptionalParams,
  MigrationServicesListBySubscriptionResponse,
  DatabaseMigrationBase,
  MigrationServicesListMigrationsNextOptionalParams,
  MigrationServicesListMigrationsOptionalParams,
  MigrationServicesListMigrationsResponse,
  MigrationServicesGetOptionalParams,
  MigrationServicesGetResponse,
  MigrationServicesCreateOrUpdateOptionalParams,
  MigrationServicesCreateOrUpdateResponse,
  MigrationServicesDeleteOptionalParams,
  MigrationServicesDeleteResponse,
  MigrationServiceUpdate,
  MigrationServicesUpdateOptionalParams,
  MigrationServicesUpdateResponse,
  MigrationServicesListByResourceGroupNextResponse,
  MigrationServicesListBySubscriptionNextResponse,
  MigrationServicesListMigrationsNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing MigrationServices operations. */
export class MigrationServicesImpl implements MigrationServices {
  private readonly client: DataMigrationManagementClient;

  /**
   * Initialize a new instance of the class MigrationServices class.
   * @param client Reference to the service client
   */
  constructor(client: DataMigrationManagementClient) {
    this.client = client;
  }

  /**
   * Retrieve all migration services in the resource group.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: MigrationServicesListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<MigrationService> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
      },
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: MigrationServicesListByResourceGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<MigrationService[]> {
    let result: MigrationServicesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(resourceGroupName, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: MigrationServicesListByResourceGroupOptionalParams,
  ): AsyncIterableIterator<MigrationService> {
    for await (const page of this.listByResourceGroupPagingPage(resourceGroupName, options)) {
      yield* page;
    }
  }

  /**
   * Retrieve all migration services in the subscriptions.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: MigrationServicesListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<MigrationService> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      },
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: MigrationServicesListBySubscriptionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<MigrationService[]> {
    let result: MigrationServicesListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: MigrationServicesListBySubscriptionOptionalParams,
  ): AsyncIterableIterator<MigrationService> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Retrieve the List of database migrations attached to the service.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param migrationServiceName Name of the Migration Service.
   * @param options The options parameters.
   */
  public listMigrations(
    resourceGroupName: string,
    migrationServiceName: string,
    options?: MigrationServicesListMigrationsOptionalParams,
  ): PagedAsyncIterableIterator<DatabaseMigrationBase> {
    const iter = this.listMigrationsPagingAll(resourceGroupName, migrationServiceName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listMigrationsPagingPage(
          resourceGroupName,
          migrationServiceName,
          options,
          settings,
        );
      },
    };
  }

  private async *listMigrationsPagingPage(
    resourceGroupName: string,
    migrationServiceName: string,
    options?: MigrationServicesListMigrationsOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<DatabaseMigrationBase[]> {
    let result: MigrationServicesListMigrationsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listMigrations(resourceGroupName, migrationServiceName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listMigrationsNext(
        resourceGroupName,
        migrationServiceName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listMigrationsPagingAll(
    resourceGroupName: string,
    migrationServiceName: string,
    options?: MigrationServicesListMigrationsOptionalParams,
  ): AsyncIterableIterator<DatabaseMigrationBase> {
    for await (const page of this.listMigrationsPagingPage(
      resourceGroupName,
      migrationServiceName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Retrieve the Database Migration Service
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param migrationServiceName Name of the Migration Service.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    migrationServiceName: string,
    options?: MigrationServicesGetOptionalParams,
  ): Promise<MigrationServicesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrationServiceName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or Update Database Migration Service.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param migrationServiceName Name of the Migration Service.
   * @param parameters Details of MigrationService resource.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    migrationServiceName: string,
    parameters: MigrationService,
    options?: MigrationServicesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<MigrationServicesCreateOrUpdateResponse>,
      MigrationServicesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<MigrationServicesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, migrationServiceName, parameters, options },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      MigrationServicesCreateOrUpdateResponse,
      OperationState<MigrationServicesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or Update Database Migration Service.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param migrationServiceName Name of the Migration Service.
   * @param parameters Details of MigrationService resource.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    migrationServiceName: string,
    parameters: MigrationService,
    options?: MigrationServicesCreateOrUpdateOptionalParams,
  ): Promise<MigrationServicesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      migrationServiceName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete Database Migration Service.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param migrationServiceName Name of the Migration Service.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    migrationServiceName: string,
    options?: MigrationServicesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<MigrationServicesDeleteResponse>,
      MigrationServicesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<MigrationServicesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, migrationServiceName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      MigrationServicesDeleteResponse,
      OperationState<MigrationServicesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete Database Migration Service.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param migrationServiceName Name of the Migration Service.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    migrationServiceName: string,
    options?: MigrationServicesDeleteOptionalParams,
  ): Promise<MigrationServicesDeleteResponse> {
    const poller = await this.beginDelete(resourceGroupName, migrationServiceName, options);
    return poller.pollUntilDone();
  }

  /**
   * Update Database Migration Service.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param migrationServiceName Name of the Migration Service.
   * @param parameters Details of MigrationService resource.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    migrationServiceName: string,
    parameters: MigrationServiceUpdate,
    options?: MigrationServicesUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<MigrationServicesUpdateResponse>,
      MigrationServicesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<MigrationServicesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, migrationServiceName, parameters, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      MigrationServicesUpdateResponse,
      OperationState<MigrationServicesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update Database Migration Service.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param migrationServiceName Name of the Migration Service.
   * @param parameters Details of MigrationService resource.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    migrationServiceName: string,
    parameters: MigrationServiceUpdate,
    options?: MigrationServicesUpdateOptionalParams,
  ): Promise<MigrationServicesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      migrationServiceName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Retrieve all migration services in the resource group.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: MigrationServicesListByResourceGroupOptionalParams,
  ): Promise<MigrationServicesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec,
    );
  }

  /**
   * Retrieve all migration services in the subscriptions.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: MigrationServicesListBySubscriptionOptionalParams,
  ): Promise<MigrationServicesListBySubscriptionResponse> {
    return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
  }

  /**
   * Retrieve the List of database migrations attached to the service.
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param migrationServiceName Name of the Migration Service.
   * @param options The options parameters.
   */
  private _listMigrations(
    resourceGroupName: string,
    migrationServiceName: string,
    options?: MigrationServicesListMigrationsOptionalParams,
  ): Promise<MigrationServicesListMigrationsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrationServiceName, options },
      listMigrationsOperationSpec,
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: MigrationServicesListByResourceGroupNextOptionalParams,
  ): Promise<MigrationServicesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec,
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: MigrationServicesListBySubscriptionNextOptionalParams,
  ): Promise<MigrationServicesListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec,
    );
  }

  /**
   * ListMigrationsNext
   * @param resourceGroupName Name of the resource group that contains the resource. You can obtain this
   *                          value from the Azure Resource Manager API or the portal.
   * @param migrationServiceName Name of the Migration Service.
   * @param nextLink The nextLink from the previous successful call to the ListMigrations method.
   * @param options The options parameters.
   */
  private _listMigrationsNext(
    resourceGroupName: string,
    migrationServiceName: string,
    nextLink: string,
    options?: MigrationServicesListMigrationsNextOptionalParams,
  ): Promise<MigrationServicesListMigrationsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, migrationServiceName, nextLink, options },
      listMigrationsNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataMigration/migrationServices/{migrationServiceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationService,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.migrationServiceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataMigration/migrationServices/{migrationServiceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationService,
    },
    201: {
      bodyMapper: Mappers.MigrationService,
    },
    202: {
      bodyMapper: Mappers.MigrationService,
    },
    204: {
      bodyMapper: Mappers.MigrationService,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.migrationServiceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataMigration/migrationServices/{migrationServiceName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.MigrationServicesDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.MigrationServicesDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.MigrationServicesDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.MigrationServicesDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.migrationServiceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataMigration/migrationServices/{migrationServiceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationService,
    },
    201: {
      bodyMapper: Mappers.MigrationService,
    },
    202: {
      bodyMapper: Mappers.MigrationService,
    },
    204: {
      bodyMapper: Mappers.MigrationService,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.migrationServiceName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataMigration/migrationServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationServiceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.resourceGroupName, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/migrationServices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationServiceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listMigrationsOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataMigration/migrationServices/{migrationServiceName}/listMigrations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseMigrationBaseListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.migrationServiceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationServiceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MigrationServiceListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.subscriptionId, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer,
};
const listMigrationsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DatabaseMigrationBaseListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.migrationServiceName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
