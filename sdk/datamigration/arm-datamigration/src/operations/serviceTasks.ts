/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ServiceTasks } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataMigrationManagementClient } from "../dataMigrationManagementClient";
import {
  ProjectTask,
  ServiceTasksListNextOptionalParams,
  ServiceTasksListOptionalParams,
  ServiceTasksListResponse,
  ServiceTasksCreateOrUpdateOptionalParams,
  ServiceTasksCreateOrUpdateResponse,
  ServiceTasksGetOptionalParams,
  ServiceTasksGetResponse,
  ServiceTasksDeleteOptionalParams,
  ServiceTasksUpdateOptionalParams,
  ServiceTasksUpdateResponse,
  ServiceTasksCancelOptionalParams,
  ServiceTasksCancelResponse,
  ServiceTasksListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ServiceTasks operations. */
export class ServiceTasksImpl implements ServiceTasks {
  private readonly client: DataMigrationManagementClient;

  /**
   * Initialize a new instance of the class ServiceTasks class.
   * @param client Reference to the service client
   */
  constructor(client: DataMigrationManagementClient) {
    this.client = client;
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service. This
   * method returns a list of service level tasks owned by a service resource. Some tasks may have a
   * status of Unknown, which indicates that an error occurred while querying the status of that task.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param options The options parameters.
   */
  public list(
    groupName: string,
    serviceName: string,
    options?: ServiceTasksListOptionalParams
  ): PagedAsyncIterableIterator<ProjectTask> {
    const iter = this.listPagingAll(groupName, serviceName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(groupName, serviceName, options, settings);
      }
    };
  }

  private async *listPagingPage(
    groupName: string,
    serviceName: string,
    options?: ServiceTasksListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProjectTask[]> {
    let result: ServiceTasksListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(groupName, serviceName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        groupName,
        serviceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    groupName: string,
    serviceName: string,
    options?: ServiceTasksListOptionalParams
  ): AsyncIterableIterator<ProjectTask> {
    for await (const page of this.listPagingPage(
      groupName,
      serviceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service. This
   * method returns a list of service level tasks owned by a service resource. Some tasks may have a
   * status of Unknown, which indicates that an error occurred while querying the status of that task.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param options The options parameters.
   */
  private _list(
    groupName: string,
    serviceName: string,
    options?: ServiceTasksListOptionalParams
  ): Promise<ServiceTasksListResponse> {
    return this.client.sendOperationRequest(
      { groupName, serviceName, options },
      listOperationSpec
    );
  }

  /**
   * The service tasks resource is a nested, proxy-only resource representing work performed by a DMS
   * instance. The PUT method creates a new service task or updates an existing one, although since
   * service tasks have no mutable custom properties, there is little reason to update an existing one.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param taskName Name of the Task
   * @param parameters Information about the task
   * @param options The options parameters.
   */
  createOrUpdate(
    groupName: string,
    serviceName: string,
    taskName: string,
    parameters: ProjectTask,
    options?: ServiceTasksCreateOrUpdateOptionalParams
  ): Promise<ServiceTasksCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { groupName, serviceName, taskName, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * The service tasks resource is a nested, proxy-only resource representing work performed by a DMS
   * instance. The GET method retrieves information about a service task.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param taskName Name of the Task
   * @param options The options parameters.
   */
  get(
    groupName: string,
    serviceName: string,
    taskName: string,
    options?: ServiceTasksGetOptionalParams
  ): Promise<ServiceTasksGetResponse> {
    return this.client.sendOperationRequest(
      { groupName, serviceName, taskName, options },
      getOperationSpec
    );
  }

  /**
   * The service tasks resource is a nested, proxy-only resource representing work performed by a DMS
   * instance. The DELETE method deletes a service task, canceling it first if it's running.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param taskName Name of the Task
   * @param options The options parameters.
   */
  delete(
    groupName: string,
    serviceName: string,
    taskName: string,
    options?: ServiceTasksDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { groupName, serviceName, taskName, options },
      deleteOperationSpec
    );
  }

  /**
   * The service tasks resource is a nested, proxy-only resource representing work performed by a DMS
   * instance. The PATCH method updates an existing service task, but since service tasks have no mutable
   * custom properties, there is little reason to do so.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param taskName Name of the Task
   * @param parameters Information about the task
   * @param options The options parameters.
   */
  update(
    groupName: string,
    serviceName: string,
    taskName: string,
    parameters: ProjectTask,
    options?: ServiceTasksUpdateOptionalParams
  ): Promise<ServiceTasksUpdateResponse> {
    return this.client.sendOperationRequest(
      { groupName, serviceName, taskName, parameters, options },
      updateOperationSpec
    );
  }

  /**
   * The service tasks resource is a nested, proxy-only resource representing work performed by a DMS
   * instance. This method cancels a service task if it's currently queued or running.
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param taskName Name of the Task
   * @param options The options parameters.
   */
  cancel(
    groupName: string,
    serviceName: string,
    taskName: string,
    options?: ServiceTasksCancelOptionalParams
  ): Promise<ServiceTasksCancelResponse> {
    return this.client.sendOperationRequest(
      { groupName, serviceName, taskName, options },
      cancelOperationSpec
    );
  }

  /**
   * ListNext
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    groupName: string,
    serviceName: string,
    nextLink: string,
    options?: ServiceTasksListNextOptionalParams
  ): Promise<ServiceTasksListNextResponse> {
    return this.client.sendOperationRequest(
      { groupName, serviceName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TaskList
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.taskType],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTask
    },
    201: {
      bodyMapper: Mappers.ProjectTask
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName,
    Parameters.taskName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTask
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.expand, Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName,
    Parameters.taskName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.deleteRunningTasks],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName,
    Parameters.taskName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTask
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName,
    Parameters.taskName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const cancelOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/serviceTasks/{taskName}/cancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ProjectTask
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName,
    Parameters.taskName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TaskList
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.taskType],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.groupName,
    Parameters.serviceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
