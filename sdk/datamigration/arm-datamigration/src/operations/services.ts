/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/servicesMappers";
import * as Parameters from "../models/parameters";
import { DataMigrationServiceClientContext } from "../dataMigrationServiceClientContext";

/** Class representing a Services. */
export class Services {
  private readonly client: DataMigrationServiceClientContext;

  /**
   * Create a Services.
   * @param {DataMigrationServiceClientContext} client Reference to the service client.
   */
  constructor(client: DataMigrationServiceClientContext) {
    this.client = client;
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * The PUT method creates a new service or updates an existing one. When a service is updated,
   * existing child resources (i.e. tasks) are unaffected. Services currently support a single kind,
   * "vm", which refers to a VM-based service, although other kinds may be added in the future. This
   * method can change the kind, SKU, and network of the service, but if tasks are currently running
   * (i.e. the service is busy), this will fail with 400 Bad Request ("ServiceIsBusy"). The provider
   * will reply when successful with 200 OK or 201 Created. Long-running operations use the
   * provisioningState property.
   * @summary Create or update DMS Instance
   * @param parameters Information about the service
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesCreateOrUpdateResponse>
   */
  createOrUpdate(parameters: Models.DataMigrationService, groupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServicesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(parameters,groupName,serviceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ServicesCreateOrUpdateResponse>;
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * The GET method retrieves information about a service instance.
   * @summary Get DMS Service Instance
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesGetResponse>
   */
  get(groupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServicesGetResponse>;
  /**
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param callback The callback
   */
  get(groupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.DataMigrationService>): void;
  /**
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param options The optional parameters
   * @param callback The callback
   */
  get(groupName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataMigrationService>): void;
  get(groupName: string, serviceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataMigrationService>, callback?: msRest.ServiceCallback<Models.DataMigrationService>): Promise<Models.ServicesGetResponse> {
    return this.client.sendOperationRequest(
      {
        groupName,
        serviceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ServicesGetResponse>;
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * The DELETE method deletes a service. Any running tasks will be canceled.
   * @summary Delete DMS Service Instance
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(groupName: string, serviceName: string, options?: Models.ServicesDeleteMethodOptionalParams): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(groupName,serviceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * The PATCH method updates an existing service. This method can change the kind, SKU, and network
   * of the service, but if tasks are currently running (i.e. the service is busy), this will fail
   * with 400 Bad Request ("ServiceIsBusy").
   * @summary Create or update DMS Service Instance
   * @param parameters Information about the service
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesUpdateResponse>
   */
  update(parameters: Models.DataMigrationService, groupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServicesUpdateResponse> {
    return this.beginUpdate(parameters,groupName,serviceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ServicesUpdateResponse>;
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * This action performs a health check and returns the status of the service and virtual machine
   * size.
   * @summary Check service health status
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesCheckStatusResponse>
   */
  checkStatus(groupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServicesCheckStatusResponse>;
  /**
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param callback The callback
   */
  checkStatus(groupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.DataMigrationServiceStatusResponse>): void;
  /**
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param options The optional parameters
   * @param callback The callback
   */
  checkStatus(groupName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataMigrationServiceStatusResponse>): void;
  checkStatus(groupName: string, serviceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataMigrationServiceStatusResponse>, callback?: msRest.ServiceCallback<Models.DataMigrationServiceStatusResponse>): Promise<Models.ServicesCheckStatusResponse> {
    return this.client.sendOperationRequest(
      {
        groupName,
        serviceName,
        options
      },
      checkStatusOperationSpec,
      callback) as Promise<Models.ServicesCheckStatusResponse>;
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * This action starts the service and the service can be used for data migration.
   * @summary Start service
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  start(groupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStart(groupName,serviceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * This action stops the service and the service cannot be used for data migration. The service
   * owner won't be billed when the service is stopped.
   * @summary Stop service
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stop(groupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStop(groupName,serviceName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * The skus action returns the list of SKUs that a service resource can be updated to.
   * @summary Get compatible SKUs
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesListSkusResponse>
   */
  listSkus(groupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServicesListSkusResponse>;
  /**
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param callback The callback
   */
  listSkus(groupName: string, serviceName: string, callback: msRest.ServiceCallback<Models.ServiceSkuList>): void;
  /**
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param options The optional parameters
   * @param callback The callback
   */
  listSkus(groupName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceSkuList>): void;
  listSkus(groupName: string, serviceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServiceSkuList>, callback?: msRest.ServiceCallback<Models.ServiceSkuList>): Promise<Models.ServicesListSkusResponse> {
    return this.client.sendOperationRequest(
      {
        groupName,
        serviceName,
        options
      },
      listSkusOperationSpec,
      callback) as Promise<Models.ServicesListSkusResponse>;
  }

  /**
   * This method checks whether a proposed nested resource name is valid and available.
   * @summary Check nested resource name validity and availability
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param parameters Requested name to validate
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesCheckChildrenNameAvailabilityResponse>
   */
  checkChildrenNameAvailability(groupName: string, serviceName: string, parameters: Models.NameAvailabilityRequest, options?: msRest.RequestOptionsBase): Promise<Models.ServicesCheckChildrenNameAvailabilityResponse>;
  /**
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param parameters Requested name to validate
   * @param callback The callback
   */
  checkChildrenNameAvailability(groupName: string, serviceName: string, parameters: Models.NameAvailabilityRequest, callback: msRest.ServiceCallback<Models.NameAvailabilityResponse>): void;
  /**
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param parameters Requested name to validate
   * @param options The optional parameters
   * @param callback The callback
   */
  checkChildrenNameAvailability(groupName: string, serviceName: string, parameters: Models.NameAvailabilityRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NameAvailabilityResponse>): void;
  checkChildrenNameAvailability(groupName: string, serviceName: string, parameters: Models.NameAvailabilityRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NameAvailabilityResponse>, callback?: msRest.ServiceCallback<Models.NameAvailabilityResponse>): Promise<Models.ServicesCheckChildrenNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        groupName,
        serviceName,
        parameters,
        options
      },
      checkChildrenNameAvailabilityOperationSpec,
      callback) as Promise<Models.ServicesCheckChildrenNameAvailabilityResponse>;
  }

  /**
   * The Services resource is the top-level resource that represents the Database Migration Service.
   * This method returns a list of service resources in a resource group.
   * @summary Get services in resource group
   * @param groupName Name of the resource group
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesListByResourceGroupResponse>
   */
  listByResourceGroup(groupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServicesListByResourceGroupResponse>;
  /**
   * @param groupName Name of the resource group
   * @param callback The callback
   */
  listByResourceGroup(groupName: string, callback: msRest.ServiceCallback<Models.DataMigrationServiceList>): void;
  /**
   * @param groupName Name of the resource group
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(groupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataMigrationServiceList>): void;
  listByResourceGroup(groupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataMigrationServiceList>, callback?: msRest.ServiceCallback<Models.DataMigrationServiceList>): Promise<Models.ServicesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        groupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.ServicesListByResourceGroupResponse>;
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * This method returns a list of service resources in a subscription.
   * @summary Get services in subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.ServicesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.DataMigrationServiceList>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataMigrationServiceList>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataMigrationServiceList>, callback?: msRest.ServiceCallback<Models.DataMigrationServiceList>): Promise<Models.ServicesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ServicesListResponse>;
  }

  /**
   * This method checks whether a proposed top-level resource name is valid and available.
   * @summary Check name validity and availability
   * @param location The Azure region of the operation
   * @param parameters Requested name to validate
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesCheckNameAvailabilityResponse>
   */
  checkNameAvailability(location: string, parameters: Models.NameAvailabilityRequest, options?: msRest.RequestOptionsBase): Promise<Models.ServicesCheckNameAvailabilityResponse>;
  /**
   * @param location The Azure region of the operation
   * @param parameters Requested name to validate
   * @param callback The callback
   */
  checkNameAvailability(location: string, parameters: Models.NameAvailabilityRequest, callback: msRest.ServiceCallback<Models.NameAvailabilityResponse>): void;
  /**
   * @param location The Azure region of the operation
   * @param parameters Requested name to validate
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(location: string, parameters: Models.NameAvailabilityRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.NameAvailabilityResponse>): void;
  checkNameAvailability(location: string, parameters: Models.NameAvailabilityRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.NameAvailabilityResponse>, callback?: msRest.ServiceCallback<Models.NameAvailabilityResponse>): Promise<Models.ServicesCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        parameters,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.ServicesCheckNameAvailabilityResponse>;
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * The PUT method creates a new service or updates an existing one. When a service is updated,
   * existing child resources (i.e. tasks) are unaffected. Services currently support a single kind,
   * "vm", which refers to a VM-based service, although other kinds may be added in the future. This
   * method can change the kind, SKU, and network of the service, but if tasks are currently running
   * (i.e. the service is busy), this will fail with 400 Bad Request ("ServiceIsBusy"). The provider
   * will reply when successful with 200 OK or 201 Created. Long-running operations use the
   * provisioningState property.
   * @summary Create or update DMS Instance
   * @param parameters Information about the service
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(parameters: Models.DataMigrationService, groupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        parameters,
        groupName,
        serviceName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * The DELETE method deletes a service. Any running tasks will be canceled.
   * @summary Delete DMS Service Instance
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(groupName: string, serviceName: string, options?: Models.ServicesBeginDeleteMethodOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        groupName,
        serviceName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * The PATCH method updates an existing service. This method can change the kind, SKU, and network
   * of the service, but if tasks are currently running (i.e. the service is busy), this will fail
   * with 400 Bad Request ("ServiceIsBusy").
   * @summary Create or update DMS Service Instance
   * @param parameters Information about the service
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(parameters: Models.DataMigrationService, groupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        parameters,
        groupName,
        serviceName,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * This action starts the service and the service can be used for data migration.
   * @summary Start service
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStart(groupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        groupName,
        serviceName,
        options
      },
      beginStartOperationSpec,
      options);
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * This action stops the service and the service cannot be used for data migration. The service
   * owner won't be billed when the service is stopped.
   * @summary Stop service
   * @param groupName Name of the resource group
   * @param serviceName Name of the service
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStop(groupName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        groupName,
        serviceName,
        options
      },
      beginStopOperationSpec,
      options);
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * The skus action returns the list of SKUs that a service resource can be updated to.
   * @summary Get compatible SKUs
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesListSkusNextResponse>
   */
  listSkusNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ServicesListSkusNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSkusNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ServiceSkuList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSkusNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceSkuList>): void;
  listSkusNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ServiceSkuList>, callback?: msRest.ServiceCallback<Models.ServiceSkuList>): Promise<Models.ServicesListSkusNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSkusNextOperationSpec,
      callback) as Promise<Models.ServicesListSkusNextResponse>;
  }

  /**
   * The Services resource is the top-level resource that represents the Database Migration Service.
   * This method returns a list of service resources in a resource group.
   * @summary Get services in resource group
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ServicesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DataMigrationServiceList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataMigrationServiceList>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataMigrationServiceList>, callback?: msRest.ServiceCallback<Models.DataMigrationServiceList>): Promise<Models.ServicesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.ServicesListByResourceGroupNextResponse>;
  }

  /**
   * The services resource is the top-level resource that represents the Database Migration Service.
   * This method returns a list of service resources in a subscription.
   * @summary Get services in subscription
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ServicesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ServicesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DataMigrationServiceList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataMigrationServiceList>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataMigrationServiceList>, callback?: msRest.ServiceCallback<Models.DataMigrationServiceList>): Promise<Models.ServicesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ServicesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataMigrationService
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const checkStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/checkStatus",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataMigrationServiceStatusResponse
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listSkusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/skus",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceSkuList
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const checkChildrenNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/checkNameAvailability",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NameAvailabilityRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NameAvailabilityResponse
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.groupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataMigrationServiceList
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/services",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataMigrationServiceList
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/locations/{location}/checkNameAvailability",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.NameAvailabilityRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.NameAvailabilityResponse
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.DataMigrationService,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DataMigrationService
    },
    201: {
      bodyMapper: Mappers.DataMigrationService
    },
    202: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.deleteRunningTasks,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.DataMigrationService,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DataMigrationService
    },
    202: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginStartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/start",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginStopOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/stop",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.groupName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listSkusNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceSkuList
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataMigrationServiceList
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataMigrationServiceList
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};
