/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  DatabaseMigrationsSqlMiImpl,
  DatabaseMigrationsSqlVmImpl,
  OperationsImpl,
  SqlMigrationServicesImpl,
  ResourceSkusImpl,
  ServicesImpl,
  TasksImpl,
  ServiceTasksImpl,
  ProjectsImpl,
  UsagesImpl,
  FilesImpl
} from "./operations";
import {
  DatabaseMigrationsSqlMi,
  DatabaseMigrationsSqlVm,
  Operations,
  SqlMigrationServices,
  ResourceSkus,
  Services,
  Tasks,
  ServiceTasks,
  Projects,
  Usages,
  Files
} from "./operationsInterfaces";
import { DataMigrationManagementClientOptionalParams } from "./models";

export class DataMigrationManagementClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the DataMigrationManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Subscription ID that identifies an Azure subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: DataMigrationManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: DataMigrationManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-datamigration/3.0.0-beta.3`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
      if (!bearerTokenAuthenticationPolicyFound) {
        this.pipeline.removePolicy({
          name: coreRestPipeline.bearerTokenAuthenticationPolicyName
        });
        this.pipeline.addPolicy(
          coreRestPipeline.bearerTokenAuthenticationPolicy({
            scopes: `${optionsWithDefaults.baseUri}/.default`,
            challengeCallbacks: {
              authorizeRequestOnChallenge:
                coreClient.authorizeRequestOnClaimChallenge
            }
          })
        );
      }
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2021-10-30-preview";
    this.databaseMigrationsSqlMi = new DatabaseMigrationsSqlMiImpl(this);
    this.databaseMigrationsSqlVm = new DatabaseMigrationsSqlVmImpl(this);
    this.operations = new OperationsImpl(this);
    this.sqlMigrationServices = new SqlMigrationServicesImpl(this);
    this.resourceSkus = new ResourceSkusImpl(this);
    this.services = new ServicesImpl(this);
    this.tasks = new TasksImpl(this);
    this.serviceTasks = new ServiceTasksImpl(this);
    this.projects = new ProjectsImpl(this);
    this.usages = new UsagesImpl(this);
    this.files = new FilesImpl(this);
  }

  databaseMigrationsSqlMi: DatabaseMigrationsSqlMi;
  databaseMigrationsSqlVm: DatabaseMigrationsSqlVm;
  operations: Operations;
  sqlMigrationServices: SqlMigrationServices;
  resourceSkus: ResourceSkus;
  services: Services;
  tasks: Tasks;
  serviceTasks: ServiceTasks;
  projects: Projects;
  usages: Usages;
  files: Files;
}
