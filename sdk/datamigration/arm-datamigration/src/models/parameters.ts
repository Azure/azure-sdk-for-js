/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  DatabaseMigrationSqlMi as DatabaseMigrationSqlMiMapper,
  MigrationOperationInput as MigrationOperationInputMapper,
  DatabaseMigrationSqlVm as DatabaseMigrationSqlVmMapper,
  SqlMigrationService as SqlMigrationServiceMapper,
  SqlMigrationServiceUpdate as SqlMigrationServiceUpdateMapper,
  RegenAuthKeys as RegenAuthKeysMapper,
  DeleteNode as DeleteNodeMapper,
  DataMigrationService as DataMigrationServiceMapper,
  NameAvailabilityRequest as NameAvailabilityRequestMapper,
  ProjectTask as ProjectTaskMapper,
  CommandProperties as CommandPropertiesMapper,
  Project as ProjectMapper,
  ProjectFile as ProjectFileMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const managedInstanceName: OperationURLParameter = {
  parameterPath: "managedInstanceName",
  mapper: {
    serializedName: "managedInstanceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const targetDbName: OperationURLParameter = {
  parameterPath: "targetDbName",
  mapper: {
    serializedName: "targetDbName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const migrationOperationId: OperationQueryParameter = {
  parameterPath: ["options", "migrationOperationId"],
  mapper: {
    serializedName: "migrationOperationId",
    type: {
      name: "Uuid"
    }
  }
};

export const expand: OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2021-10-30-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabaseMigrationSqlMiMapper
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: MigrationOperationInputMapper
};

export const sqlVirtualMachineName: OperationURLParameter = {
  parameterPath: "sqlVirtualMachineName",
  mapper: {
    serializedName: "sqlVirtualMachineName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabaseMigrationSqlVmMapper
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const sqlMigrationServiceName: OperationURLParameter = {
  parameterPath: "sqlMigrationServiceName",
  mapper: {
    serializedName: "sqlMigrationServiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: SqlMigrationServiceMapper
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: SqlMigrationServiceUpdateMapper
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: RegenAuthKeysMapper
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: DeleteNodeMapper
};

export const parameters7: OperationParameter = {
  parameterPath: "parameters",
  mapper: DataMigrationServiceMapper
};

export const groupName: OperationURLParameter = {
  parameterPath: "groupName",
  mapper: {
    serializedName: "groupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const serviceName: OperationURLParameter = {
  parameterPath: "serviceName",
  mapper: {
    serializedName: "serviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const deleteRunningTasks: OperationQueryParameter = {
  parameterPath: ["options", "deleteRunningTasks"],
  mapper: {
    serializedName: "deleteRunningTasks",
    type: {
      name: "Boolean"
    }
  }
};

export const parameters8: OperationParameter = {
  parameterPath: "parameters",
  mapper: NameAvailabilityRequestMapper
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const projectName: OperationURLParameter = {
  parameterPath: "projectName",
  mapper: {
    serializedName: "projectName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const taskType: OperationQueryParameter = {
  parameterPath: ["options", "taskType"],
  mapper: {
    serializedName: "taskType",
    type: {
      name: "String"
    }
  }
};

export const parameters9: OperationParameter = {
  parameterPath: "parameters",
  mapper: ProjectTaskMapper
};

export const taskName: OperationURLParameter = {
  parameterPath: "taskName",
  mapper: {
    serializedName: "taskName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters10: OperationParameter = {
  parameterPath: "parameters",
  mapper: CommandPropertiesMapper
};

export const parameters11: OperationParameter = {
  parameterPath: "parameters",
  mapper: ProjectMapper
};

export const fileName: OperationURLParameter = {
  parameterPath: "fileName",
  mapper: {
    serializedName: "fileName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters12: OperationParameter = {
  parameterPath: "parameters",
  mapper: ProjectFileMapper
};
