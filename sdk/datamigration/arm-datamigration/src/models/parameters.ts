/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter,
} from "@azure/core-client";
import {
  DatabaseMigrationCosmosDbMongo as DatabaseMigrationCosmosDbMongoMapper,
  DatabaseMigrationSqlDb as DatabaseMigrationSqlDbMapper,
  MigrationOperationInput as MigrationOperationInputMapper,
  DatabaseMigrationSqlMi as DatabaseMigrationSqlMiMapper,
  DatabaseMigrationSqlVm as DatabaseMigrationSqlVmMapper,
  MigrationService as MigrationServiceMapper,
  MigrationServiceUpdate as MigrationServiceUpdateMapper,
  SqlMigrationService as SqlMigrationServiceMapper,
  SqlMigrationServiceUpdate as SqlMigrationServiceUpdateMapper,
  RegenAuthKeys as RegenAuthKeysMapper,
  DeleteNode as DeleteNodeMapper,
  DataMigrationService as DataMigrationServiceMapper,
  NameAvailabilityRequest as NameAvailabilityRequestMapper,
  ProjectTask as ProjectTaskMapper,
  CommandProperties as CommandPropertiesMapper,
  Project as ProjectMapper,
  ProjectFile as ProjectFileMapper,
} from "../models/mappers.js";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String",
    },
  },
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const targetResourceName: OperationURLParameter = {
  parameterPath: "targetResourceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z][A-Za-z0-9_-]*$"),
    },
    serializedName: "targetResourceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const migrationName: OperationURLParameter = {
  parameterPath: "migrationName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z][A-Za-z0-9_-]*$"),
    },
    serializedName: "migrationName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2025-03-15-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String",
    },
  },
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String",
    },
  },
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabaseMigrationCosmosDbMongoMapper,
};

export const force: OperationQueryParameter = {
  parameterPath: ["options", "force"],
  mapper: {
    serializedName: "force",
    type: {
      name: "Boolean",
    },
  },
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String",
    },
  },
  skipEncoding: true,
};

export const sqlDbInstanceName: OperationURLParameter = {
  parameterPath: "sqlDbInstanceName",
  mapper: {
    serializedName: "sqlDbInstanceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const targetDbName: OperationURLParameter = {
  parameterPath: "targetDbName",
  mapper: {
    serializedName: "targetDbName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const migrationOperationId: OperationQueryParameter = {
  parameterPath: ["options", "migrationOperationId"],
  mapper: {
    serializedName: "migrationOperationId",
    type: {
      name: "Uuid",
    },
  },
};

export const expand: OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String",
    },
  },
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabaseMigrationSqlDbMapper,
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: MigrationOperationInputMapper,
};

export const managedInstanceName: OperationURLParameter = {
  parameterPath: "managedInstanceName",
  mapper: {
    serializedName: "managedInstanceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabaseMigrationSqlMiMapper,
};

export const sqlVirtualMachineName: OperationURLParameter = {
  parameterPath: "sqlVirtualMachineName",
  mapper: {
    serializedName: "sqlVirtualMachineName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabaseMigrationSqlVmMapper,
};

export const migrationServiceName: OperationURLParameter = {
  parameterPath: "migrationServiceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z][A-Za-z0-9_-]*$"),
    },
    serializedName: "migrationServiceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: MigrationServiceMapper,
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: MigrationServiceUpdateMapper,
};

export const sqlMigrationServiceName: OperationURLParameter = {
  parameterPath: "sqlMigrationServiceName",
  mapper: {
    serializedName: "sqlMigrationServiceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters7: OperationParameter = {
  parameterPath: "parameters",
  mapper: SqlMigrationServiceMapper,
};

export const parameters8: OperationParameter = {
  parameterPath: "parameters",
  mapper: SqlMigrationServiceUpdateMapper,
};

export const parameters9: OperationParameter = {
  parameterPath: "parameters",
  mapper: RegenAuthKeysMapper,
};

export const parameters10: OperationParameter = {
  parameterPath: "parameters",
  mapper: DeleteNodeMapper,
};

export const parameters11: OperationParameter = {
  parameterPath: "parameters",
  mapper: DataMigrationServiceMapper,
};

export const groupName: OperationURLParameter = {
  parameterPath: "groupName",
  mapper: {
    serializedName: "groupName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const serviceName: OperationURLParameter = {
  parameterPath: "serviceName",
  mapper: {
    serializedName: "serviceName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const deleteRunningTasks: OperationQueryParameter = {
  parameterPath: ["options", "deleteRunningTasks"],
  mapper: {
    serializedName: "deleteRunningTasks",
    type: {
      name: "Boolean",
    },
  },
};

export const parameters12: OperationParameter = {
  parameterPath: "parameters",
  mapper: NameAvailabilityRequestMapper,
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const projectName: OperationURLParameter = {
  parameterPath: "projectName",
  mapper: {
    serializedName: "projectName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const taskType: OperationQueryParameter = {
  parameterPath: ["options", "taskType"],
  mapper: {
    serializedName: "taskType",
    type: {
      name: "String",
    },
  },
};

export const parameters13: OperationParameter = {
  parameterPath: "parameters",
  mapper: ProjectTaskMapper,
};

export const taskName: OperationURLParameter = {
  parameterPath: "taskName",
  mapper: {
    serializedName: "taskName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters14: OperationParameter = {
  parameterPath: "parameters",
  mapper: CommandPropertiesMapper,
};

export const parameters15: OperationParameter = {
  parameterPath: "parameters",
  mapper: ProjectMapper,
};

export const fileName: OperationURLParameter = {
  parameterPath: "fileName",
  mapper: {
    serializedName: "fileName",
    required: true,
    type: {
      name: "String",
    },
  },
};

export const parameters16: OperationParameter = {
  parameterPath: "parameters",
  mapper: ProjectFileMapper,
};
