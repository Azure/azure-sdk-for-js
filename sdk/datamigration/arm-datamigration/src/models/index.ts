/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * ARM resource.
 */
export interface Resource extends BaseResource {
  /**
   * Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * ARM tracked top level resource.
 */
export interface TrackedResource extends Resource {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Resource location.
   */
  location: string;
}

/**
 * Base class for file properties.
 */
export interface ProjectFileProperties {
  /**
   * Optional File extension. If submitted it should not have a leading period and must match the
   * extension from filePath.
   */
  extension?: string;
  /**
   * Relative path of this file resource. This property can be set when creating or updating the
   * file resource.
   */
  filePath?: string;
  /**
   * Modification DateTime.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModified?: Date;
  /**
   * File content type. This property can be modified to reflect the file content type.
   */
  mediaType?: string;
  /**
   * File size.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly size?: number;
}

/**
 * A file resource
 */
export interface ProjectFile extends Resource {
  /**
   * HTTP strong entity tag value. This is ignored if submitted.
   */
  etag?: string;
  /**
   * Custom file properties
   */
  properties?: ProjectFileProperties;
}

/**
 * Error information in OData format.
 */
export interface ODataError {
  /**
   * The machine-readable description of the error, such as 'InvalidRequest' or
   * 'InternalServerError'
   */
  code?: string;
  /**
   * The human-readable description of the error
   */
  message?: string;
  /**
   * Inner errors that caused this error
   */
  details?: ODataError[];
}

/**
 * Exception object for all custom exceptions
 */
export interface ReportableException {
  /**
   * Error message
   */
  message?: string;
  /**
   * Actionable steps for this exception
   */
  actionableMessage?: string;
  /**
   * The path to the file where exception occurred
   */
  filePath?: string;
  /**
   * The line number where exception occurred
   */
  lineNumber?: string;
  /**
   * Coded numerical value that is assigned to a specific exception
   */
  hResult?: number;
  /**
   * Stack trace
   */
  stackTrace?: string;
}

/**
 * Output for command that completes online migration for an Azure SQL Database Managed Instance.
 */
export interface MigrateMISyncCompleteCommandOutput {
  /**
   * List of errors that happened during the command execution
   */
  errors?: ReportableException[];
}

/**
 * Input for command that completes online migration for an Azure SQL Database Managed Instance.
 */
export interface MigrateMISyncCompleteCommandInput {
  /**
   * Name of managed instance database
   */
  sourceDatabaseName: string;
}

/**
 * Contains the possible cases for CommandProperties.
 */
export type CommandPropertiesUnion = CommandProperties | MigrateMISyncCompleteCommandProperties | MigrateSyncCompleteCommandProperties | MongoDbCancelCommand | MongoDbFinishCommand | MongoDbRestartCommand;

/**
 * Base class for all types of DMS command properties. If command is not supported by current
 * client, this object is returned.
 */
export interface CommandProperties {
  /**
   * Polymorphic Discriminator
   */
  commandType: "CommandProperties";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the command. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Accepted', 'Running', 'Succeeded', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: CommandState;
}

/**
 * Properties for the command that completes online migration for an Azure SQL Database Managed
 * Instance.
 */
export interface MigrateMISyncCompleteCommandProperties {
  /**
   * Polymorphic Discriminator
   */
  commandType: "Migrate.SqlServer.AzureDbSqlMi.Complete";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the command. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Accepted', 'Running', 'Succeeded', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: CommandState;
  /**
   * Command input
   */
  input?: MigrateMISyncCompleteCommandInput;
  /**
   * Command output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: MigrateMISyncCompleteCommandOutput;
}

/**
 * Output for command that completes sync migration for a database.
 */
export interface MigrateSyncCompleteCommandOutput {
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * List of errors that happened during the command execution
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ReportableException[];
}

/**
 * Input for command that completes sync migration for a database.
 */
export interface MigrateSyncCompleteCommandInput {
  /**
   * Name of database
   */
  databaseName: string;
  /**
   * Time stamp to complete
   */
  commitTimeStamp?: Date;
}

/**
 * Properties for the command that completes sync migration for a database.
 */
export interface MigrateSyncCompleteCommandProperties {
  /**
   * Polymorphic Discriminator
   */
  commandType: "Migrate.Sync.Complete.Database";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the command. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Accepted', 'Running', 'Succeeded', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: CommandState;
  /**
   * Command input
   */
  input?: MigrateSyncCompleteCommandInput;
  /**
   * Command output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: MigrateSyncCompleteCommandOutput;
}

/**
 * Contains the possible cases for MigrateSsisTaskOutput.
 */
export type MigrateSsisTaskOutputUnion = MigrateSsisTaskOutput | MigrateSsisTaskOutputProjectLevel | MigrateSsisTaskOutputMigrationLevel;

/**
 * Output for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed
 * Instance.
 */
export interface MigrateSsisTaskOutput {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrateSsisTaskOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
}

/**
 * An interface representing MigrateSsisTaskOutputProjectLevel.
 */
export interface MigrateSsisTaskOutputProjectLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "SsisProjectLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the folder
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly folderName?: string;
  /**
   * Name of the project
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly projectName?: string;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: MigrationState;
  /**
   * Stage of SSIS migration. Possible values include: 'None', 'Initialize', 'InProgress',
   * 'Completed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly stage?: SsisMigrationStage;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Migration progress message
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Migration exceptions and warnings
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * An interface representing MigrateSsisTaskOutputMigrationLevel.
 */
export interface MigrateSsisTaskOutputMigrationLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Current status of migration. Possible values include: 'Default', 'Connecting',
   * 'SourceAndTargetSelected', 'SelectLogins', 'Configured', 'Running', 'Error', 'Stopped',
   * 'Completed', 'CompletedWithWarnings'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: MigrationStatus;
  /**
   * Migration progress message
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Source server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Migration exceptions and warnings.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
  /**
   * Stage of SSIS migration. Possible values include: 'None', 'Initialize', 'InProgress',
   * 'Completed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly stage?: SsisMigrationStage;
}

/**
 * SSIS migration info with SSIS store type, overwrite policy.
 */
export interface SsisMigrationInfo {
  /**
   * The SSIS store type of source, only SSIS catalog is supported now in DMS. Possible values
   * include: 'SsisCatalog'
   */
  ssisStoreType?: SsisStoreType;
  /**
   * The overwrite option for the SSIS project migration. Possible values include: 'Ignore',
   * 'Overwrite'
   */
  projectOverwriteOption?: SsisMigrationOverwriteOption;
  /**
   * The overwrite option for the SSIS environment migration. Possible values include: 'Ignore',
   * 'Overwrite'
   */
  environmentOverwriteOption?: SsisMigrationOverwriteOption;
}

/**
 * Contains the possible cases for ConnectionInfo.
 */
export type ConnectionInfoUnion = ConnectionInfo | MiSqlConnectionInfo | PostgreSqlConnectionInfo | OracleConnectionInfo | MySqlConnectionInfo | MongoDbConnectionInfo | SqlConnectionInfo;

/**
 * Defines the connection properties of a server
 */
export interface ConnectionInfo {
  /**
   * Polymorphic Discriminator
   */
  type: "ConnectionInfo";
  /**
   * User name
   */
  userName?: string;
  /**
   * Password credential.
   */
  password?: string;
}

/**
 * Properties required to create a connection to Azure SQL database Managed instance
 */
export interface MiSqlConnectionInfo {
  /**
   * Polymorphic Discriminator
   */
  type: "MiSqlConnectionInfo";
  /**
   * User name
   */
  userName?: string;
  /**
   * Password credential.
   */
  password?: string;
  /**
   * Resource id for Azure SQL database Managed instance
   */
  managedInstanceResourceId: string;
}

/**
 * Information for connecting to PostgreSQL server
 */
export interface PostgreSqlConnectionInfo {
  /**
   * Polymorphic Discriminator
   */
  type: "PostgreSqlConnectionInfo";
  /**
   * User name
   */
  userName?: string;
  /**
   * Password credential.
   */
  password?: string;
  /**
   * Name of the server
   */
  serverName: string;
  /**
   * Name of the database
   */
  databaseName?: string;
  /**
   * Port for Server
   */
  port: number;
}

/**
 * Information for connecting to Oracle server
 */
export interface OracleConnectionInfo {
  /**
   * Polymorphic Discriminator
   */
  type: "OracleConnectionInfo";
  /**
   * User name
   */
  userName?: string;
  /**
   * Password credential.
   */
  password?: string;
  /**
   * EZConnect or TNSName connection string.
   */
  dataSource: string;
}

/**
 * Information for connecting to MySQL server
 */
export interface MySqlConnectionInfo {
  /**
   * Polymorphic Discriminator
   */
  type: "MySqlConnectionInfo";
  /**
   * User name
   */
  userName?: string;
  /**
   * Password credential.
   */
  password?: string;
  /**
   * Name of the server
   */
  serverName: string;
  /**
   * Port for Server
   */
  port: number;
}

/**
 * Describes a connection to a MongoDB data source
 */
export interface MongoDbConnectionInfo {
  /**
   * Polymorphic Discriminator
   */
  type: "MongoDbConnectionInfo";
  /**
   * User name
   */
  userName?: string;
  /**
   * Password credential.
   */
  password?: string;
  /**
   * A MongoDB connection string or blob container URL. The user name and password can be specified
   * here or in the userName and password properties
   */
  connectionString: string;
}

/**
 * Information for connecting to SQL database server
 */
export interface SqlConnectionInfo {
  /**
   * Polymorphic Discriminator
   */
  type: "SqlConnectionInfo";
  /**
   * User name
   */
  userName?: string;
  /**
   * Password credential.
   */
  password?: string;
  /**
   * Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
   */
  dataSource: string;
  /**
   * Authentication type to use for connection. Possible values include: 'None',
   * 'WindowsAuthentication', 'SqlAuthentication', 'ActiveDirectoryIntegrated',
   * 'ActiveDirectoryPassword'
   */
  authentication?: AuthenticationType;
  /**
   * Whether to encrypt the connection. Default value: true.
   */
  encryptConnection?: boolean;
  /**
   * Additional connection settings
   */
  additionalSettings?: string;
  /**
   * Whether to trust the server certificate. Default value: false.
   */
  trustServerCertificate?: boolean;
  /**
   * Server platform type for connection. Possible values include: 'SqlOnPrem'
   */
  platform?: SqlSourcePlatform;
}

/**
 * Base class for migration task input
 */
export interface SqlMigrationTaskInput {
  /**
   * Information for connecting to source
   */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * Information for connecting to target
   */
  targetConnectionInfo: SqlConnectionInfo;
}

/**
 * Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed
 * Instance.
 */
export interface MigrateSsisTaskInput extends SqlMigrationTaskInput {
  /**
   * SSIS package migration information.
   */
  ssisMigrationInfo: SsisMigrationInfo;
}

/**
 * Contains the possible cases for ProjectTaskProperties.
 */
export type ProjectTaskPropertiesUnion = ProjectTaskProperties | MigrateSsisTaskProperties | GetTdeCertificatesSqlTaskProperties | ValidateOracleAzureDbForPostgreSqlSyncTaskProperties | ValidateMongoDbTaskProperties | ValidateMigrationInputSqlServerSqlMISyncTaskProperties | ValidateMigrationInputSqlServerSqlMITaskProperties | ValidateMigrationInputSqlServerSqlDbSyncTaskProperties | MigrateOracleAzureDbForPostgreSqlSyncTaskProperties | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties | MigrateMySqlAzureDbForMySqlSyncTaskProperties | MigrateSqlServerSqlDbSyncTaskProperties | MigrateSqlServerSqlDbTaskProperties | MigrateSqlServerSqlMISyncTaskProperties | MigrateSqlServerSqlMITaskProperties | MigrateMongoDbTaskProperties | ConnectToTargetAzureDbForMySqlTaskProperties | ConnectToTargetSqlMISyncTaskProperties | ConnectToTargetSqlMITaskProperties | GetUserTablesPostgreSqlTaskProperties | GetUserTablesOracleTaskProperties | GetUserTablesSqlSyncTaskProperties | GetUserTablesSqlTaskProperties | ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties | ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties | ConnectToTargetSqlSqlDbSyncTaskProperties | ConnectToTargetSqlDbTaskProperties | ConnectToSourceOracleSyncTaskProperties | ConnectToSourcePostgreSqlSyncTaskProperties | ConnectToSourceSqlServerSyncTaskProperties | ConnectToSourceSqlServerTaskProperties | ConnectToMongoDbTaskProperties | ConnectToSourceMySqlTaskProperties | MigrateSchemaSqlServerSqlDbTaskProperties | CheckOCIDriverTaskProperties | UploadOCIDriverTaskProperties | InstallOCIDriverTaskProperties;

/**
 * Base class for all types of DMS task properties. If task is not supported by current client,
 * this object is returned.
 */
export interface ProjectTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ProjectTaskProperties";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
}

/**
 * Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database
 * Managed Instance.
 */
export interface MigrateSsisTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Migrate.Ssis";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: MigrateSsisTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: MigrateSsisTaskOutputUnion[];
}

/**
 * Output of the task that gets TDE certificates in Base64 encoded format.
 */
export interface GetTdeCertificatesSqlTaskOutput {
  /**
   * Mapping from certificate name to base 64 encoded format.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly base64EncodedCertificates?: { [propertyName: string]: string[] };
  /**
   * Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Info for certificate to be exported for TDE enabled databases.
 */
export interface SelectedCertificateInput {
  /**
   * Name of certificate to be exported.
   */
  certificateName: string;
  /**
   * Password to use for encrypting the exported certificate.
   */
  password: string;
}

/**
 * File share information with Path, Username, and Password.
 */
export interface FileShare {
  /**
   * User name credential to connect to the share location
   */
  userName?: string;
  /**
   * Password credential used to connect to the share location.
   */
  password?: string;
  /**
   * The folder path for this share.
   */
  path: string;
}

/**
 * Input for the task that gets TDE certificates in Base64 encoded format.
 */
export interface GetTdeCertificatesSqlTaskInput {
  /**
   * Connection information for SQL Server
   */
  connectionInfo: SqlConnectionInfo;
  /**
   * Backup file share information for file share to be used for temporarily storing files.
   */
  backupFileShare: FileShare;
  /**
   * List containing certificate names and corresponding password to use for encrypting the
   * exported certificate.
   */
  selectedCertificates: SelectedCertificateInput[];
}

/**
 * Properties for the task that gets TDE certificates in Base64 encoded format.
 */
export interface GetTdeCertificatesSqlTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "GetTDECertificates.Sql";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: GetTdeCertificatesSqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: GetTdeCertificatesSqlTaskOutput[];
}

/**
 * Output for task that validates migration input for Oracle to Azure Database for PostgreSQL for
 * online migrations
 */
export interface ValidateOracleAzureDbPostgreSqlSyncTaskOutput {
  /**
   * Errors associated with a selected database object
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs
 */
export interface MigrateOracleAzureDbPostgreSqlSyncDatabaseInput {
  /**
   * How to handle object name casing: either Preserve or ToLower
   */
  caseManipulation?: string;
  /**
   * Name of the migration pipeline
   */
  name?: string;
  /**
   * Name of the source schema
   */
  schemaName?: string;
  /**
   * Mapping of source to target tables
   */
  tableMap?: { [propertyName: string]: string };
  /**
   * Name of target database. Note: Target database will be truncated before starting migration.
   */
  targetDatabaseName?: string;
  /**
   * Migration settings which tune the migration behavior
   */
  migrationSetting?: { [propertyName: string]: string };
  /**
   * Source settings to tune source endpoint migration behavior
   */
  sourceSetting?: { [propertyName: string]: string };
  /**
   * Target settings to tune target endpoint migration behavior
   */
  targetSetting?: { [propertyName: string]: string };
}

/**
 * Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online
 * migrations
 */
export interface MigrateOracleAzureDbPostgreSqlSyncTaskInput {
  /**
   * Databases to migrate
   */
  selectedDatabases: MigrateOracleAzureDbPostgreSqlSyncDatabaseInput[];
  /**
   * Connection information for target Azure Database for PostgreSQL
   */
  targetConnectionInfo: PostgreSqlConnectionInfo;
  /**
   * Connection information for source Oracle
   */
  sourceConnectionInfo: OracleConnectionInfo;
}

/**
 * Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL
 * for online migrations
 */
export interface ValidateOracleAzureDbForPostgreSqlSyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Validate.Oracle.AzureDbPostgreSql.Sync";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  input?: MigrateOracleAzureDbPostgreSqlSyncTaskInput;
  /**
   * An array containing a single validation error response object
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ValidateOracleAzureDbPostgreSqlSyncTaskOutput[];
}

/**
 * Describes an error or warning that occurred during a MongoDB migration
 */
export interface MongoDbError {
  /**
   * The non-localized, machine-readable code that describes the error or warning
   */
  code?: string;
  /**
   * The number of times the error or warning has occurred
   */
  count?: number;
  /**
   * The localized, human-readable message that describes the error or warning
   */
  message?: string;
  /**
   * The type of error or warning. Possible values include: 'Error', 'ValidationError', 'Warning'
   */
  type?: MongoDbErrorType;
}

/**
 * Base class for MongoDB migration outputs
 */
export interface MongoDbProgress {
  /**
   * The number of document bytes copied during the Copying stage
   */
  bytesCopied: number;
  /**
   * The number of documents copied during the Copying stage
   */
  documentsCopied: number;
  /**
   * The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format)
   */
  elapsedTime: string;
  /**
   * The errors and warnings that have occurred for the current object. The keys are the error
   * codes.
   */
  errors: { [propertyName: string]: MongoDbError };
  /**
   * The number of oplog events awaiting replay
   */
  eventsPending: number;
  /**
   * The number of oplog events replayed so far
   */
  eventsReplayed: number;
  /**
   * The timestamp of the last oplog event received, or null if no oplog event has been received
   * yet
   */
  lastEventTime?: Date;
  /**
   * The timestamp of the last oplog event replayed, or null if no oplog event has been replayed
   * yet
   */
  lastReplayTime?: Date;
  /**
   * The name of the progress object. For a collection, this is the unqualified collection name.
   * For a database, this is the database name. For the overall migration, this is null.
   */
  name?: string;
  /**
   * The qualified name of the progress object. For a collection, this is the database-qualified
   * name. For a database, this is the database name. For the overall migration, this is null.
   */
  qualifiedName?: string;
  /**
   * The type of progress object. Possible values include: 'Migration', 'Database', 'Collection'
   */
  resultType: ResultType;
  /**
   * Possible values include: 'NotStarted', 'ValidatingInput', 'Initializing', 'Restarting',
   * 'Copying', 'InitialReplay', 'Replaying', 'Finalizing', 'Complete', 'Canceled', 'Failed'
   */
  state: MongoDbMigrationState;
  /**
   * The total number of document bytes on the source at the beginning of the Copying stage, or -1
   * if the total size was unknown
   */
  totalBytes: number;
  /**
   * The total number of documents on the source at the beginning of the Copying stage, or -1 if
   * the total count was unknown
   */
  totalDocuments: number;
}

/**
 * Describes the progress of a collection
 */
export interface MongoDbCollectionProgress extends MongoDbProgress {
}

/**
 * Describes the progress of a database
 */
export interface MongoDbDatabaseProgress extends MongoDbProgress {
  /**
   * The progress of the collections in the database. The keys are the unqualified names of the
   * collections
   */
  collections?: { [propertyName: string]: MongoDbCollectionProgress };
}

/**
 * Describes the progress of the overall migration
 */
export interface MongoDbMigrationProgress extends MongoDbProgress {
  /**
   * The progress of the databases in the migration. The keys are the names of the databases
   */
  databases?: { [propertyName: string]: MongoDbDatabaseProgress };
}

/**
 * Specifies resource limits for the migration
 */
export interface MongoDbThrottlingSettings {
  /**
   * The percentage of CPU time that the migrator will try to avoid using, from 0 to 100
   */
  minFreeCpu?: number;
  /**
   * The number of megabytes of RAM that the migrator will try to avoid using
   */
  minFreeMemoryMb?: number;
  /**
   * The maximum number of work items (e.g. collection copies) that will be processed in parallel
   */
  maxParallelism?: number;
}

/**
 * Describes a field reference within a MongoDB shard key
 */
export interface MongoDbShardKeyField {
  /**
   * The name of the field
   */
  name: string;
  /**
   * The field ordering. Possible values include: 'Forward', 'Reverse', 'Hashed'
   */
  order: MongoDbShardKeyOrder;
}

/**
 * Describes a MongoDB shard key
 */
export interface MongoDbShardKeySetting {
  /**
   * The fields within the shard key
   */
  fields: MongoDbShardKeyField[];
  /**
   * Whether the shard key is unique
   */
  isUnique: boolean;
}

/**
 * Describes how an individual MongoDB collection should be migrated
 */
export interface MongoDbCollectionSettings {
  /**
   * Whether the migrator is allowed to drop the target collection in the course of performing a
   * migration. The default is true.
   */
  canDelete?: boolean;
  shardKey?: MongoDbShardKeySetting;
  /**
   * The RUs that should be configured on a CosmosDB target, or null to use the default. This has
   * no effect on non-CosmosDB targets.
   */
  targetRUs?: number;
}

/**
 * Describes how an individual MongoDB database should be migrated
 */
export interface MongoDbDatabaseSettings {
  /**
   * The collections on the source database to migrate to the target. The keys are the unqualified
   * names of the collections.
   */
  collections: { [propertyName: string]: MongoDbCollectionSettings };
  /**
   * The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if
   * throughput should not be provisioned for the database. This has no effect on non-CosmosDB
   * targets.
   */
  targetRUs?: number;
}

/**
 * Describes how a MongoDB data migration should be performed
 */
export interface MongoDbMigrationSettings {
  /**
   * The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower)
   * during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default
   * boost (which is generally the maximum), or null to not boost the RUs. This setting has no
   * effect on non-CosmosDB targets.
   */
  boostRUs?: number;
  /**
   * The databases on the source cluster to migrate to the target. The keys are the names of the
   * databases.
   */
  databases: { [propertyName: string]: MongoDbDatabaseSettings };
  /**
   * Describes how changes will be replicated from the source to the target. The default is
   * OneTime. Possible values include: 'Disabled', 'OneTime', 'Continuous'
   */
  replication?: MongoDbReplication;
  /**
   * Settings used to connect to the source cluster
   */
  source: MongoDbConnectionInfo;
  /**
   * Settings used to connect to the target cluster
   */
  target: MongoDbConnectionInfo;
  /**
   * Settings used to limit the resource usage of the migration
   */
  throttling?: MongoDbThrottlingSettings;
}

/**
 * Properties for the task that validates a migration between MongoDB data sources
 */
export interface ValidateMongoDbTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Validate.MongoDb";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  input?: MongoDbMigrationSettings;
  /**
   * An array containing a single MongoDbMigrationProgress object
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: MongoDbMigrationProgress[];
}

/**
 * Output for task that validates migration input for Azure SQL Database Managed Instance online
 * migration
 */
export interface ValidateMigrationInputSqlServerSqlMISyncTaskOutput {
  /**
   * Database identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Errors associated with a selected database object
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Azure Active Directory Application
 */
export interface AzureActiveDirectoryApp {
  /**
   * Application ID of the Azure Active Directory Application
   */
  applicationId: string;
  /**
   * Key used to authenticate to the Azure Active Directory Application
   */
  appKey: string;
  /**
   * Tenant id of the customer
   */
  tenantId: string;
}

/**
 * Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
 */
export interface MigrateSqlServerSqlMIDatabaseInput {
  /**
   * Name of the database
   */
  name: string;
  /**
   * Name of the database at destination
   */
  restoreDatabaseName: string;
  /**
   * Backup file share information for backing up this database.
   */
  backupFileShare?: FileShare;
  /**
   * The list of backup files to be used in case of existing backups.
   */
  backupFilePaths?: string[];
}

/**
 * Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online
 * scenario.
 */
export interface SqlServerSqlMISyncTaskInput {
  /**
   * Databases to migrate
   */
  selectedDatabases: MigrateSqlServerSqlMIDatabaseInput[];
  /**
   * Backup file share information for all selected databases.
   */
  backupFileShare?: FileShare;
  /**
   * Fully qualified resourceId of storage
   */
  storageResourceId: string;
  /**
   * Connection information for source SQL Server
   */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * Connection information for Azure SQL Database Managed Instance
   */
  targetConnectionInfo: MiSqlConnectionInfo;
  /**
   * Azure Active Directory Application the DMS instance will use to connect to the target instance
   * of Azure SQL Database Managed Instance and the Azure Storage Account
   */
  azureApp: AzureActiveDirectoryApp;
}

/**
 * Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online
 * scenario.
 */
export interface ValidateMigrationInputSqlServerSqlMISyncTaskInput extends SqlServerSqlMISyncTaskInput {
}

/**
 * Properties for task that validates migration input for SQL to Azure SQL Database Managed
 * Instance sync scenario
 */
export interface ValidateMigrationInputSqlServerSqlMISyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ValidateMigrationInputSqlServerSqlMISyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ValidateMigrationInputSqlServerSqlMISyncTaskOutput[];
}

/**
 * Information about backup files when existing backup mode is used.
 */
export interface DatabaseBackupInfo {
  /**
   * Database name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * Backup Type. Possible values include: 'Database', 'TransactionLog', 'File',
   * 'DifferentialDatabase', 'DifferentialFile', 'Partial', 'DifferentialPartial'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly backupType?: BackupType;
  /**
   * The list of backup files for the current database.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly backupFiles?: string[];
  /**
   * Position of current database backup in the file.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly position?: number;
  /**
   * Database was damaged when backed up, but the backup operation was requested to continue
   * despite errors.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isDamaged?: boolean;
  /**
   * Whether the backup set is compressed
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isCompressed?: boolean;
  /**
   * Number of files in the backup set.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly familyCount?: number;
  /**
   * Date and time when the backup operation finished.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly backupFinishDate?: Date;
}

/**
 * Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
 */
export interface ValidateMigrationInputSqlServerSqlMITaskOutput {
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Errors associated with the RestoreDatabaseName
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly restoreDatabaseNameErrors?: ReportableException[];
  /**
   * Errors associated with the BackupFolder path
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly backupFolderErrors?: ReportableException[];
  /**
   * Errors associated with backup share user name and password credentials
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly backupShareCredentialsErrors?: ReportableException[];
  /**
   * Errors associated with the storage account provided.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly backupStorageAccountErrors?: ReportableException[];
  /**
   * Errors associated with existing backup files.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly existingBackupErrors?: ReportableException[];
  /**
   * Information about backup files when existing backup mode is used.
   */
  databaseBackupInfo?: DatabaseBackupInfo;
}

/**
 * Blob container storage information.
 */
export interface BlobShare {
  /**
   * SAS URI of Azure Storage Account Container.
   */
  sasUri: string;
}

/**
 * Input for task that validates migration input for SQL to Azure SQL Managed Instance
 */
export interface ValidateMigrationInputSqlServerSqlMITaskInput {
  /**
   * Information for connecting to source
   */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * Information for connecting to target
   */
  targetConnectionInfo: SqlConnectionInfo;
  /**
   * Databases to migrate
   */
  selectedDatabases: MigrateSqlServerSqlMIDatabaseInput[];
  /**
   * Logins to migrate
   */
  selectedLogins?: string[];
  /**
   * Backup file share information for all selected databases.
   */
  backupFileShare?: FileShare;
  /**
   * SAS URI of Azure Storage Account Container to be used for storing backup files.
   */
  backupBlobShare: BlobShare;
  /**
   * Backup Mode to specify whether to use existing backup or create new backup. Possible values
   * include: 'CreateBackup', 'ExistingBackup'
   */
  backupMode?: BackupMode;
}

/**
 * Properties for task that validates migration input for SQL to Azure SQL Database Managed
 * Instance
 */
export interface ValidateMigrationInputSqlServerSqlMITaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ValidateMigrationInput.SqlServer.AzureSqlDbMI";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ValidateMigrationInputSqlServerSqlMITaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ValidateMigrationInputSqlServerSqlMITaskOutput[];
}

/**
 * Output for task that validates migration input for SQL sync migrations
 */
export interface ValidateSyncMigrationInputSqlServerTaskOutput {
  /**
   * Database identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Errors associated with a selected database object
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Database specific information for SQL to Azure SQL DB sync migration task inputs
 */
export interface MigrateSqlServerSqlDbSyncDatabaseInput {
  /**
   * Unique identifier for database
   */
  id?: string;
  /**
   * Name of database
   */
  name?: string;
  /**
   * Target database name
   */
  targetDatabaseName?: string;
  /**
   * Schema name to be migrated
   */
  schemaName?: string;
  /**
   * Mapping of source to target tables
   */
  tableMap?: { [propertyName: string]: string };
  /**
   * Migration settings which tune the migration behavior
   */
  migrationSetting?: { [propertyName: string]: string };
  /**
   * Source settings to tune source endpoint migration behavior
   */
  sourceSetting?: { [propertyName: string]: string };
  /**
   * Target settings to tune target endpoint migration behavior
   */
  targetSetting?: { [propertyName: string]: string };
}

/**
 * Input for task that validates migration input for SQL sync migrations
 */
export interface ValidateSyncMigrationInputSqlServerTaskInput {
  /**
   * Information for connecting to source SQL server
   */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * Information for connecting to target
   */
  targetConnectionInfo: SqlConnectionInfo;
  /**
   * Databases to migrate
   */
  selectedDatabases: MigrateSqlServerSqlDbSyncDatabaseInput[];
}

/**
 * Properties for task that validates migration input for SQL to Azure SQL DB sync migrations
 */
export interface ValidateMigrationInputSqlServerSqlDbSyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ValidateMigrationInput.SqlServer.SqlDb.Sync";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ValidateSyncMigrationInputSqlServerTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ValidateSyncMigrationInputSqlServerTaskOutput[];
}

/**
 * Database migration errors for online migration
 */
export interface SyncMigrationDatabaseErrorEvent {
  /**
   * String value of timestamp.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timestampString?: string;
  /**
   * Event type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly eventTypeString?: string;
  /**
   * Event text.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly eventText?: string;
}

/**
 * Contains the possible cases for MigrateOracleAzureDbPostgreSqlSyncTaskOutput.
 */
export type MigrateOracleAzureDbPostgreSqlSyncTaskOutputUnion = MigrateOracleAzureDbPostgreSqlSyncTaskOutput | MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError | MigrateOracleAzureDbPostgreSqlSyncTaskOutputError | MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel | MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel | MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel;

/**
 * Output for the task that migrates Oracle databases to Azure Database for PostgreSQL for online
 * migrations
 */
export interface MigrateOracleAzureDbPostgreSqlSyncTaskOutput {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrateOracleAzureDbPostgreSqlSyncTaskOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
}

/**
 * An interface representing MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError.
 */
export interface MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError {
  /**
   * Polymorphic Discriminator
   */
  resultType: "DatabaseLevelErrorOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Error message
   */
  errorMessage?: string;
  /**
   * List of error events.
   */
  events?: SyncMigrationDatabaseErrorEvent[];
}

/**
 * An interface representing MigrateOracleAzureDbPostgreSqlSyncTaskOutputError.
 */
export interface MigrateOracleAzureDbPostgreSqlSyncTaskOutputError {
  /**
   * Polymorphic Discriminator
   */
  resultType: "ErrorOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration error
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: ReportableException;
}

/**
 * An interface representing MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel.
 */
export interface MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "TableLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the table
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tableName?: string;
  /**
   * Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * Number of applied inserts
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcInsertCounter?: number;
  /**
   * Number of applied updates
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of applied deletes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcDeleteCounter?: number;
  /**
   * Estimate to finish full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadEstFinishTime?: Date;
  /**
   * Full load start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadStartedOn?: Date;
  /**
   * Full load end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadEndedOn?: Date;
  /**
   * Number of rows applied in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadTotalRows?: number;
  /**
   * Current state of the table migration. Possible values include: 'BEFORE_LOAD', 'FULL_LOAD',
   * 'COMPLETED', 'CANCELED', 'ERROR', 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: SyncTableMigrationState;
  /**
   * Total number of applied changes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalChangesApplied?: number;
  /**
   * Number of data errors occurred
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataErrorsCounter?: number;
  /**
   * Last modified time on target
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModifiedTime?: Date;
}

/**
 * An interface representing MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel.
 */
export interface MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Migration state that this database is in. Possible values include: 'UNDEFINED', 'CONFIGURING',
   * 'INITIALIAZING', 'STARTING', 'RUNNING', 'READY_TO_COMPLETE', 'COMPLETING', 'COMPLETE',
   * 'CANCELLING', 'CANCELLED', 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly migrationState?: SyncDatabaseMigrationReportingState;
  /**
   * Number of incoming changes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly incomingChanges?: number;
  /**
   * Number of applied changes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly appliedChanges?: number;
  /**
   * Number of cdc inserts
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcInsertCounter?: number;
  /**
   * Number of cdc deletes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcDeleteCounter?: number;
  /**
   * Number of cdc updates
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of tables completed in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadCompletedTables?: number;
  /**
   * Number of tables loading in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadLoadingTables?: number;
  /**
   * Number of tables queued in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadQueuedTables?: number;
  /**
   * Number of tables errored in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadErroredTables?: number;
  /**
   * Indicates if initial load (full load) has been completed
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly initializationCompleted?: boolean;
  /**
   * CDC apply latency
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly latency?: number;
}

/**
 * An interface representing MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel.
 */
export interface MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Source server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServer?: string;
  /**
   * Target server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * Target server name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServer?: string;
}

/**
 * Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online
 * migrations
 */
export interface MigrateOracleAzureDbForPostgreSqlSyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Migrate.Oracle.AzureDbForPostgreSql.Sync";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: MigrateOracleAzureDbPostgreSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: MigrateOracleAzureDbPostgreSqlSyncTaskOutputUnion[];
}

/**
 * Contains the possible cases for MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput.
 */
export type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputUnion = MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel;

/**
 * Output for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for
 * online migrations
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
}

/**
 * An interface representing MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError.
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError {
  /**
   * Polymorphic Discriminator
   */
  resultType: "DatabaseLevelErrorOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Error message
   */
  errorMessage?: string;
  /**
   * List of error events.
   */
  events?: SyncMigrationDatabaseErrorEvent[];
}

/**
 * An interface representing MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError.
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError {
  /**
   * Polymorphic Discriminator
   */
  resultType: "ErrorOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration error
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: ReportableException;
}

/**
 * An interface representing MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel.
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "TableLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the table
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tableName?: string;
  /**
   * Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * Number of applied inserts
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcInsertCounter?: number;
  /**
   * Number of applied updates
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of applied deletes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcDeleteCounter?: number;
  /**
   * Estimate to finish full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadEstFinishTime?: Date;
  /**
   * Full load start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadStartedOn?: Date;
  /**
   * Full load end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadEndedOn?: Date;
  /**
   * Number of rows applied in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadTotalRows?: number;
  /**
   * Current state of the table migration. Possible values include: 'BEFORE_LOAD', 'FULL_LOAD',
   * 'COMPLETED', 'CANCELED', 'ERROR', 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: SyncTableMigrationState;
  /**
   * Total number of applied changes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalChangesApplied?: number;
  /**
   * Number of data errors occurred
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataErrorsCounter?: number;
  /**
   * Last modified time on target
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModifiedTime?: Date;
}

/**
 * An interface representing MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel.
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Migration state that this database is in. Possible values include: 'UNDEFINED', 'CONFIGURING',
   * 'INITIALIAZING', 'STARTING', 'RUNNING', 'READY_TO_COMPLETE', 'COMPLETING', 'COMPLETE',
   * 'CANCELLING', 'CANCELLED', 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly migrationState?: SyncDatabaseMigrationReportingState;
  /**
   * Number of incoming changes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly incomingChanges?: number;
  /**
   * Number of applied changes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly appliedChanges?: number;
  /**
   * Number of cdc inserts
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcInsertCounter?: number;
  /**
   * Number of cdc deletes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcDeleteCounter?: number;
  /**
   * Number of cdc updates
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of tables completed in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadCompletedTables?: number;
  /**
   * Number of tables loading in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadLoadingTables?: number;
  /**
   * Number of tables queued in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadQueuedTables?: number;
  /**
   * Number of tables errored in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadErroredTables?: number;
  /**
   * Indicates if initial load (full load) has been completed
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly initializationCompleted?: boolean;
  /**
   * CDC apply latency
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly latency?: number;
}

/**
 * An interface representing MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel.
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Source server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServer?: string;
  /**
   * Target server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * Target server name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServer?: string;
}

/**
 * Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task
 * inputs
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput {
  /**
   * Name of the database
   */
  name?: string;
  /**
   * Name of target database. Note: Target database will be truncated before starting migration.
   */
  targetDatabaseName?: string;
  /**
   * Migration settings which tune the migration behavior
   */
  migrationSetting?: { [propertyName: string]: string };
  /**
   * Source settings to tune source endpoint migration behavior
   */
  sourceSetting?: { [propertyName: string]: string };
  /**
   * Target settings to tune target endpoint migration behavior
   */
  targetSetting?: { [propertyName: string]: string };
}

/**
 * Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for
 * online migrations
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput {
  /**
   * Databases to migrate
   */
  selectedDatabases: MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput[];
  /**
   * Connection information for target Azure Database for PostgreSQL
   */
  targetConnectionInfo: PostgreSqlConnectionInfo;
  /**
   * Connection information for source PostgreSQL
   */
  sourceConnectionInfo: PostgreSqlConnectionInfo;
}

/**
 * Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for
 * online migrations
 */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Migrate.PostgreSql.AzureDbForPostgreSql.Sync";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputUnion[];
}

/**
 * Contains the possible cases for MigrateMySqlAzureDbForMySqlSyncTaskOutput.
 */
export type MigrateMySqlAzureDbForMySqlSyncTaskOutputUnion = MigrateMySqlAzureDbForMySqlSyncTaskOutput | MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError | MigrateMySqlAzureDbForMySqlSyncTaskOutputError | MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel | MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel | MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel;

/**
 * Output for the task that migrates MySQL databases to Azure Database for MySQL for online
 * migrations
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskOutput {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrateMySqlAzureDbForMySqlSyncTaskOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
}

/**
 * An interface representing MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError.
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError {
  /**
   * Polymorphic Discriminator
   */
  resultType: "DatabaseLevelErrorOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Error message
   */
  errorMessage?: string;
  /**
   * List of error events.
   */
  events?: SyncMigrationDatabaseErrorEvent[];
}

/**
 * An interface representing MigrateMySqlAzureDbForMySqlSyncTaskOutputError.
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputError {
  /**
   * Polymorphic Discriminator
   */
  resultType: "ErrorOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration error
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: ReportableException;
}

/**
 * An interface representing MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel.
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "TableLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the table
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tableName?: string;
  /**
   * Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * Number of applied inserts
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcInsertCounter?: string;
  /**
   * Number of applied updates
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcUpdateCounter?: string;
  /**
   * Number of applied deletes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcDeleteCounter?: string;
  /**
   * Estimate to finish full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadEstFinishTime?: Date;
  /**
   * Full load start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadStartedOn?: Date;
  /**
   * Full load end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadEndedOn?: Date;
  /**
   * Number of rows applied in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadTotalRows?: number;
  /**
   * Current state of the table migration. Possible values include: 'BEFORE_LOAD', 'FULL_LOAD',
   * 'COMPLETED', 'CANCELED', 'ERROR', 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: SyncTableMigrationState;
  /**
   * Total number of applied changes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalChangesApplied?: number;
  /**
   * Number of data errors occurred
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataErrorsCounter?: number;
  /**
   * Last modified time on target
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModifiedTime?: Date;
}

/**
 * An interface representing MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel.
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Migration state that this database is in. Possible values include: 'UNDEFINED', 'CONFIGURING',
   * 'INITIALIAZING', 'STARTING', 'RUNNING', 'READY_TO_COMPLETE', 'COMPLETING', 'COMPLETE',
   * 'CANCELLING', 'CANCELLED', 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly migrationState?: SyncDatabaseMigrationReportingState;
  /**
   * Number of incoming changes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly incomingChanges?: number;
  /**
   * Number of applied changes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly appliedChanges?: number;
  /**
   * Number of cdc inserts
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcInsertCounter?: number;
  /**
   * Number of cdc deletes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcDeleteCounter?: number;
  /**
   * Number of cdc updates
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of tables completed in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadCompletedTables?: number;
  /**
   * Number of tables loading in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadLoadingTables?: number;
  /**
   * Number of tables queued in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadQueuedTables?: number;
  /**
   * Number of tables errored in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadErroredTables?: number;
  /**
   * Indicates if initial load (full load) has been completed
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly initializationCompleted?: boolean;
  /**
   * CDC apply latency
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly latency?: number;
}

/**
 * An interface representing MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel.
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Source server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServer?: string;
  /**
   * Target server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * Target server name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServer?: string;
}

/**
 * Database specific information for MySQL to Azure Database for MySQL migration task inputs
 */
export interface MigrateMySqlAzureDbForMySqlSyncDatabaseInput {
  /**
   * Name of the database
   */
  name?: string;
  /**
   * Name of target database. Note: Target database will be truncated before starting migration.
   */
  targetDatabaseName?: string;
  /**
   * Migration settings which tune the migration behavior
   */
  migrationSetting?: { [propertyName: string]: string };
  /**
   * Source settings to tune source endpoint migration behavior
   */
  sourceSetting?: { [propertyName: string]: string };
  /**
   * Target settings to tune target endpoint migration behavior
   */
  targetSetting?: { [propertyName: string]: string };
}

/**
 * Input for the task that migrates MySQL databases to Azure Database for MySQL for online
 * migrations
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskInput {
  /**
   * Connection information for source MySQL
   */
  sourceConnectionInfo: MySqlConnectionInfo;
  /**
   * Connection information for target Azure Database for MySQL
   */
  targetConnectionInfo: MySqlConnectionInfo;
  /**
   * Databases to migrate
   */
  selectedDatabases: MigrateMySqlAzureDbForMySqlSyncDatabaseInput[];
}

/**
 * Properties for the task that migrates MySQL databases to Azure Database for MySQL for online
 * migrations
 */
export interface MigrateMySqlAzureDbForMySqlSyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Migrate.MySql.AzureDbForMySql.Sync";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: MigrateMySqlAzureDbForMySqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: MigrateMySqlAzureDbForMySqlSyncTaskOutputUnion[];
}

/**
 * Contains the possible cases for MigrateSqlServerSqlDbSyncTaskOutput.
 */
export type MigrateSqlServerSqlDbSyncTaskOutputUnion = MigrateSqlServerSqlDbSyncTaskOutput | MigrateSqlServerSqlDbSyncTaskOutputDatabaseError | MigrateSqlServerSqlDbSyncTaskOutputError | MigrateSqlServerSqlDbSyncTaskOutputTableLevel | MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel | MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel;

/**
 * Output for the task that migrates on-prem SQL Server databases to Azure SQL Database for online
 * migrations
 */
export interface MigrateSqlServerSqlDbSyncTaskOutput {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrateSqlServerSqlDbSyncTaskOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
}

/**
 * An interface representing MigrateSqlServerSqlDbSyncTaskOutputDatabaseError.
 */
export interface MigrateSqlServerSqlDbSyncTaskOutputDatabaseError {
  /**
   * Polymorphic Discriminator
   */
  resultType: "DatabaseLevelErrorOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Error message
   */
  errorMessage?: string;
  /**
   * List of error events.
   */
  events?: SyncMigrationDatabaseErrorEvent[];
}

/**
 * An interface representing MigrateSqlServerSqlDbSyncTaskOutputError.
 */
export interface MigrateSqlServerSqlDbSyncTaskOutputError {
  /**
   * Polymorphic Discriminator
   */
  resultType: "ErrorOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration error
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: ReportableException;
}

/**
 * An interface representing MigrateSqlServerSqlDbSyncTaskOutputTableLevel.
 */
export interface MigrateSqlServerSqlDbSyncTaskOutputTableLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "TableLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the table
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tableName?: string;
  /**
   * Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * Number of applied inserts
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcInsertCounter?: number;
  /**
   * Number of applied updates
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of applied deletes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcDeleteCounter?: number;
  /**
   * Estimate to finish full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadEstFinishTime?: Date;
  /**
   * Full load start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadStartedOn?: Date;
  /**
   * Full load end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadEndedOn?: Date;
  /**
   * Number of rows applied in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadTotalRows?: number;
  /**
   * Current state of the table migration. Possible values include: 'BEFORE_LOAD', 'FULL_LOAD',
   * 'COMPLETED', 'CANCELED', 'ERROR', 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: SyncTableMigrationState;
  /**
   * Total number of applied changes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly totalChangesApplied?: number;
  /**
   * Number of data errors occurred
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataErrorsCounter?: number;
  /**
   * Last modified time on target
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModifiedTime?: Date;
}

/**
 * An interface representing MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel.
 */
export interface MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Migration state that this database is in. Possible values include: 'UNDEFINED', 'CONFIGURING',
   * 'INITIALIAZING', 'STARTING', 'RUNNING', 'READY_TO_COMPLETE', 'COMPLETING', 'COMPLETE',
   * 'CANCELLING', 'CANCELLED', 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly migrationState?: SyncDatabaseMigrationReportingState;
  /**
   * Number of incoming changes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly incomingChanges?: number;
  /**
   * Number of applied changes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly appliedChanges?: number;
  /**
   * Number of cdc inserts
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcInsertCounter?: number;
  /**
   * Number of cdc deletes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcDeleteCounter?: number;
  /**
   * Number of cdc updates
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of tables completed in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadCompletedTables?: number;
  /**
   * Number of tables loading in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadLoadingTables?: number;
  /**
   * Number of tables queued in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadQueuedTables?: number;
  /**
   * Number of tables errored in full load
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullLoadErroredTables?: number;
  /**
   * Indicates if initial load (full load) has been completed
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly initializationCompleted?: boolean;
  /**
   * CDC apply latency
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly latency?: number;
}

/**
 * An interface representing MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel.
 */
export interface MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Source server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServer?: string;
  /**
   * Target server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * Target server name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServer?: string;
  /**
   * Count of databases
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseCount?: number;
}

/**
 * Types of validations to run after the migration
 */
export interface MigrationValidationOptions {
  /**
   * Allows to compare the schema information between source and target.
   */
  enableSchemaValidation?: boolean;
  /**
   * Allows to perform a checksum based data integrity validation between source and target for the
   * selected database / tables .
   */
  enableDataIntegrityValidation?: boolean;
  /**
   * Allows to perform a quick and intelligent query analysis by retrieving queries from the source
   * database and executes them in the target. The result will have execution statistics for
   * executions in source and target databases for the extracted queries.
   */
  enableQueryAnalysisValidation?: boolean;
}

/**
 * Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online
 * migrations
 */
export interface MigrateSqlServerSqlDbSyncTaskInput extends SqlMigrationTaskInput {
  /**
   * Databases to migrate
   */
  selectedDatabases: MigrateSqlServerSqlDbSyncDatabaseInput[];
  /**
   * Validation options
   */
  validationOptions?: MigrationValidationOptions;
}

/**
 * Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for
 * online migrations
 */
export interface MigrateSqlServerSqlDbSyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Migrate.SqlServer.AzureSqlDb.Sync";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: MigrateSqlServerSqlDbSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: MigrateSqlServerSqlDbSyncTaskOutputUnion[];
}

/**
 * Description about the errors happen while performing migration validation
 */
export interface ValidationError {
  /**
   * Error Text
   */
  text?: string;
  /**
   * Severity of the error. Possible values include: 'Message', 'Warning', 'Error'
   */
  severity?: Severity;
}

/**
 * Wait statistics gathered during query batch execution
 */
export interface WaitStatistics {
  /**
   * Type of the Wait
   */
  waitType?: string;
  /**
   * Total wait time in millisecond(s). Default value: 0.
   */
  waitTimeMs?: number;
  /**
   * Total no. of waits
   */
  waitCount?: number;
}

/**
 * Description about the errors happen while performing migration validation
 */
export interface ExecutionStatistics {
  /**
   * No. of query executions
   */
  executionCount?: number;
  /**
   * CPU Time in millisecond(s) for the query execution
   */
  cpuTimeMs?: number;
  /**
   * Time taken in millisecond(s) for executing the query
   */
  elapsedTimeMs?: number;
  /**
   * Dictionary of sql query execution wait types and the respective statistics
   */
  waitStats?: { [propertyName: string]: WaitStatistics };
  /**
   * Indicates whether the query resulted in an error
   */
  hasErrors?: boolean;
  /**
   * List of sql Errors
   */
  sqlErrors?: string[];
}

/**
 * Describes query analysis results for execution in source and target
 */
export interface QueryExecutionResult {
  /**
   * Query text retrieved from the source server
   */
  queryText?: string;
  /**
   * Total no. of statements in the batch
   */
  statementsInBatch?: number;
  /**
   * Query analysis result from the source
   */
  sourceResult?: ExecutionStatistics;
  /**
   * Query analysis result from the target
   */
  targetResult?: ExecutionStatistics;
}

/**
 * Results for query analysis comparison between the source and target
 */
export interface QueryAnalysisValidationResult {
  /**
   * List of queries executed and it's execution results in source and target
   */
  queryResults?: QueryExecutionResult;
  /**
   * Errors that are part of the execution
   */
  validationErrors?: ValidationError;
}

/**
 * Description about the errors happen while performing migration validation
 */
export interface SchemaComparisonValidationResultType {
  /**
   * Name of the object that has the difference
   */
  objectName?: string;
  /**
   * Type of the object that has the difference. e.g (Table/View/StoredProcedure). Possible values
   * include: 'StoredProcedures', 'Table', 'User', 'View', 'Function'
   */
  objectType?: ObjectType;
  /**
   * Update action type with respect to target. Possible values include: 'DeletedOnTarget',
   * 'ChangedOnTarget', 'AddedOnTarget'
   */
  updateAction?: UpdateActionType;
}

/**
 * Results for schema comparison between the source and target
 */
export interface SchemaComparisonValidationResult {
  /**
   * List of schema differences between the source and target databases
   */
  schemaDifferences?: SchemaComparisonValidationResultType;
  /**
   * List of errors that happened while performing schema compare validation
   */
  validationErrors?: ValidationError;
  /**
   * Count of source database objects
   */
  sourceDatabaseObjectCount?: { [propertyName: string]: number };
  /**
   * Count of target database objects
   */
  targetDatabaseObjectCount?: { [propertyName: string]: number };
}

/**
 * Results for checksum based Data Integrity validation results
 */
export interface DataIntegrityValidationResult {
  /**
   * List of failed table names of source and target pair
   */
  failedObjects?: { [propertyName: string]: string };
  /**
   * List of errors that happened while performing data integrity validation
   */
  validationErrors?: ValidationError;
}

/**
 * Database level validation results
 */
export interface MigrationValidationDatabaseLevelResult {
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration Identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly migrationId?: string;
  /**
   * Name of the source database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceDatabaseName?: string;
  /**
   * Name of the target database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetDatabaseName?: string;
  /**
   * Validation start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Validation end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Provides data integrity validation result between the source and target tables that are
   * migrated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataIntegrityValidationResult?: DataIntegrityValidationResult;
  /**
   * Provides schema comparison result between source and target database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly schemaValidationResult?: SchemaComparisonValidationResult;
  /**
   * Results of some of the query execution result between source and target database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly queryAnalysisValidationResult?: QueryAnalysisValidationResult;
  /**
   * Current status of validation at the database level. Possible values include: 'Default',
   * 'NotStarted', 'Initialized', 'InProgress', 'Completed', 'CompletedWithIssues', 'Stopped',
   * 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: ValidationStatus;
}

/**
 * Migration Validation Database level summary result
 */
export interface MigrationValidationDatabaseSummaryResult {
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration Identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly migrationId?: string;
  /**
   * Name of the source database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceDatabaseName?: string;
  /**
   * Name of the target database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetDatabaseName?: string;
  /**
   * Validation start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Validation end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Current status of validation at the database level. Possible values include: 'Default',
   * 'NotStarted', 'Initialized', 'InProgress', 'Completed', 'CompletedWithIssues', 'Stopped',
   * 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: ValidationStatus;
}

/**
 * Migration Validation Result
 */
export interface MigrationValidationResult {
  /**
   * Migration validation result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration Identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly migrationId?: string;
  /**
   * Validation summary results for each database
   */
  summaryResults?: { [propertyName: string]: MigrationValidationDatabaseSummaryResult };
  /**
   * Current status of validation at the migration level. Status from the database validation
   * result status will be aggregated here. Possible values include: 'Default', 'NotStarted',
   * 'Initialized', 'InProgress', 'Completed', 'CompletedWithIssues', 'Stopped', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: ValidationStatus;
}

/**
 * Contains the possible cases for MigrateSqlServerSqlDbTaskOutput.
 */
export type MigrateSqlServerSqlDbTaskOutputUnion = MigrateSqlServerSqlDbTaskOutput | MigrateSqlServerSqlDbTaskOutputError | MigrateSqlServerSqlDbTaskOutputTableLevel | MigrateSqlServerSqlDbTaskOutputDatabaseLevel | MigrateSqlServerSqlDbTaskOutputMigrationLevel;

/**
 * Output for the task that migrates on-prem SQL Server databases to Azure SQL Database
 */
export interface MigrateSqlServerSqlDbTaskOutput {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrateSqlServerSqlDbTaskOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
}

/**
 * An interface representing MigrateSqlServerSqlDbTaskOutputError.
 */
export interface MigrateSqlServerSqlDbTaskOutputError {
  /**
   * Polymorphic Discriminator
   */
  resultType: "ErrorOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration error
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: ReportableException;
}

/**
 * An interface representing MigrateSqlServerSqlDbTaskOutputTableLevel.
 */
export interface MigrateSqlServerSqlDbTaskOutputTableLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "TableLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly objectName?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: MigrationState;
  /**
   * Status message
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly statusMessage?: string;
  /**
   * Number of items
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly itemsCount?: number;
  /**
   * Number of successfully completed items
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly itemsCompletedCount?: number;
  /**
   * Wildcard string prefix to use for querying all errors of the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorPrefix?: string;
  /**
   * Wildcard string prefix to use for querying all sub-tem results of the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resultPrefix?: string;
}

/**
 * Basic summary of a data item migration
 */
export interface DataItemMigrationSummaryResult {
  /**
   * Name of the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: MigrationState;
  /**
   * Status message
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly statusMessage?: string;
  /**
   * Number of items
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly itemsCount?: number;
  /**
   * Number of successfully completed items
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly itemsCompletedCount?: number;
  /**
   * Wildcard string prefix to use for querying all errors of the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorPrefix?: string;
  /**
   * Wildcard string prefix to use for querying all sub-tem results of the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resultPrefix?: string;
}

/**
 * An interface representing MigrateSqlServerSqlDbTaskOutputDatabaseLevel.
 */
export interface MigrateSqlServerSqlDbTaskOutputDatabaseLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: MigrationState;
  /**
   * Migration stage that this database is in. Possible values include: 'None', 'Initialize',
   * 'Backup', 'FileCopy', 'Restore', 'Completed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly stage?: DatabaseMigrationStage;
  /**
   * Status message
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly statusMessage?: string;
  /**
   * Migration progress message
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Number of objects
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly numberOfObjects?: number;
  /**
   * Number of successfully completed objects
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly numberOfObjectsCompleted?: number;
  /**
   * Number of database/object errors.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorCount?: number;
  /**
   * Wildcard string prefix to use for querying all errors of the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorPrefix?: string;
  /**
   * Wildcard string prefix to use for querying all sub-tem results of the item
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resultPrefix?: string;
  /**
   * Migration exceptions and warnings.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
  /**
   * Summary of object results in the migration
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly objectSummary?: { [propertyName: string]: DataItemMigrationSummaryResult };
}

/**
 * Migration validation report result, contains the url for downloading the generated report.
 */
export interface MigrationReportResult {
  /**
   * Migration validation result identifier
   */
  id?: string;
  /**
   * The url of the report.
   */
  reportUrl?: string;
}

/**
 * Summary of database results in the migration
 */
export interface DatabaseSummaryResult extends DataItemMigrationSummaryResult {
  /**
   * Size of the database in megabytes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sizeMB?: number;
}

/**
 * An interface representing MigrateSqlServerSqlDbTaskOutputMigrationLevel.
 */
export interface MigrateSqlServerSqlDbTaskOutputMigrationLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Duration of task execution in seconds.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly durationInSeconds?: number;
  /**
   * Current status of migration. Possible values include: 'Default', 'Connecting',
   * 'SourceAndTargetSelected', 'SelectLogins', 'Configured', 'Running', 'Error', 'Stopped',
   * 'Completed', 'CompletedWithWarnings'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: MigrationStatus;
  /**
   * Migration status message
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly statusMessage?: string;
  /**
   * Migration progress message
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Selected databases as a map from database name to database id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databases?: { [propertyName: string]: string };
  /**
   * Summary of database results in the migration
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseSummary?: { [propertyName: string]: DatabaseSummaryResult };
  /**
   * Migration Validation Results
   */
  migrationValidationResult?: MigrationValidationResult;
  /**
   * Migration Report Result, provides unique url for downloading your migration report.
   */
  migrationReportResult?: MigrationReportResult;
  /**
   * Source server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Migration exceptions and warnings.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * Database specific information for SQL to Azure SQL DB migration task inputs
 */
export interface MigrateSqlServerSqlDbDatabaseInput {
  /**
   * Name of the database
   */
  name?: string;
  /**
   * Name of target database. Note: Target database will be truncated before starting migration.
   */
  targetDatabaseName?: string;
  /**
   * Whether to set database read only before migration
   */
  makeSourceDbReadOnly?: boolean;
  /**
   * Mapping of source to target tables
   */
  tableMap?: { [propertyName: string]: string };
}

/**
 * Input for the task that migrates on-prem SQL Server databases to Azure SQL Database
 */
export interface MigrateSqlServerSqlDbTaskInput extends SqlMigrationTaskInput {
  /**
   * Databases to migrate
   */
  selectedDatabases: MigrateSqlServerSqlDbDatabaseInput[];
  /**
   * Options for enabling various post migration validations. Available options,
   * 1.) Data Integrity Check: Performs a checksum based comparison on source and target tables
   * after the migration to ensure the correctness of the data.
   * 2.) Schema Validation: Performs a thorough schema comparison between the source and target
   * tables and provides a list of differences between the source and target database, 3.) Query
   * Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache
   * or Query Store and execute them and compares the execution time between the source and target
   * database.
   */
  validationOptions?: MigrationValidationOptions;
}

/**
 * Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database
 */
export interface MigrateSqlServerSqlDbTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Migrate.SqlServer.SqlDb";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: MigrateSqlServerSqlDbTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: MigrateSqlServerSqlDbTaskOutputUnion[];
}

/**
 * Contains the possible cases for MigrateSqlServerSqlMISyncTaskOutput.
 */
export type MigrateSqlServerSqlMISyncTaskOutputUnion = MigrateSqlServerSqlMISyncTaskOutput | MigrateSqlServerSqlMISyncTaskOutputError | MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel | MigrateSqlServerSqlMISyncTaskOutputMigrationLevel;

/**
 * Output for task that migrates SQL Server databases to Azure SQL Database Managed Instance using
 * Log Replay Service.
 */
export interface MigrateSqlServerSqlMISyncTaskOutput {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrateSqlServerSqlMISyncTaskOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
}

/**
 * An interface representing MigrateSqlServerSqlMISyncTaskOutputError.
 */
export interface MigrateSqlServerSqlMISyncTaskOutputError {
  /**
   * Polymorphic Discriminator
   */
  resultType: "ErrorOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration error
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: ReportableException;
}

/**
 * Information of the backup file
 */
export interface BackupFileInfo {
  /**
   * Location of the backup file in shared folder
   */
  fileLocation?: string;
  /**
   * Sequence number of the backup file in the backup set
   */
  familySequenceNumber?: number;
  /**
   * Status of the backup file during migration. Possible values include: 'Arrived', 'Queued',
   * 'Uploading', 'Uploaded', 'Restoring', 'Restored', 'Cancelled'
   */
  status?: BackupFileStatus;
}

/**
 * Information of backup set
 */
export interface BackupSetInfo {
  /**
   * Id for the set of backup files
   */
  backupSetId?: string;
  /**
   * First log sequence number of the backup file
   */
  firstLsn?: string;
  /**
   * Last log sequence number of the backup file
   */
  lastLsn?: string;
  /**
   * Last modified time of the backup file in share location
   */
  lastModifiedTime?: Date;
  /**
   * Enum of the different backup types. Possible values include: 'Database', 'TransactionLog',
   * 'File', 'DifferentialDatabase', 'DifferentialFile', 'Partial', 'DifferentialPartial'
   */
  backupType?: BackupType;
  /**
   * List of files in the backup set
   */
  listOfBackupFiles?: BackupFileInfo[];
  /**
   * Name of the database to which the backup set belongs
   */
  databaseName?: string;
  /**
   * Date and time that the backup operation began
   */
  backupStartDate?: Date;
  /**
   * Date and time that the backup operation finished
   */
  backupFinishedDate?: Date;
  /**
   * Whether the backup set is restored or not
   */
  isBackupRestored?: boolean;
}

/**
 * An interface representing MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel.
 */
export interface MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceDatabaseName?: string;
  /**
   * Current state of database. Possible values include: 'UNDEFINED', 'INITIAL',
   * 'FULL_BACKUP_UPLOAD_START', 'LOG_SHIPPING_START', 'UPLOAD_LOG_FILES_START', 'CUTOVER_START',
   * 'POST_CUTOVER_COMPLETE', 'COMPLETED', 'CANCELLED', 'FAILED'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly migrationState?: DatabaseMigrationState;
  /**
   * Database migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Database migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Details of full backup set
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fullBackupSetInfo?: BackupSetInfo;
  /**
   * Last applied backup set information
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastRestoredBackupSetInfo?: BackupSetInfo;
  /**
   * Backup sets that are currently active (Either being uploaded or getting restored)
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly activeBackupSets?: BackupSetInfo[];
  /**
   * Name of container created in the Azure Storage account where backups are copied to
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly containerName?: string;
  /**
   * prefix string to use for querying errors for this database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorPrefix?: string;
  /**
   * Whether full backup has been applied to the target database or not
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isFullBackupRestored?: boolean;
  /**
   * Migration exceptions and warnings
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * An interface representing MigrateSqlServerSqlMISyncTaskOutputMigrationLevel.
 */
export interface MigrateSqlServerSqlMISyncTaskOutputMigrationLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Count of databases
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseCount?: number;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: MigrationState;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Source server name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerName?: string;
  /**
   * Source server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerName?: string;
  /**
   * Target server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Number of database level errors
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseErrorCount?: number;
}

/**
 * Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online
 * scenario.
 */
export interface MigrateSqlServerSqlMISyncTaskInput extends SqlServerSqlMISyncTaskInput {
}

/**
 * Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
 * sync scenario
 */
export interface MigrateSqlServerSqlMISyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Migrate.SqlServer.AzureSqlDbMI.Sync.LRS";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: MigrateSqlServerSqlMISyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: MigrateSqlServerSqlMISyncTaskOutputUnion[];
}

/**
 * Contains the possible cases for MigrateSqlServerSqlMITaskOutput.
 */
export type MigrateSqlServerSqlMITaskOutputUnion = MigrateSqlServerSqlMITaskOutput | MigrateSqlServerSqlMITaskOutputError | MigrateSqlServerSqlMITaskOutputLoginLevel | MigrateSqlServerSqlMITaskOutputAgentJobLevel | MigrateSqlServerSqlMITaskOutputDatabaseLevel | MigrateSqlServerSqlMITaskOutputMigrationLevel;

/**
 * Output for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
 */
export interface MigrateSqlServerSqlMITaskOutput {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrateSqlServerSqlMITaskOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
}

/**
 * An interface representing MigrateSqlServerSqlMITaskOutputError.
 */
export interface MigrateSqlServerSqlMITaskOutputError {
  /**
   * Polymorphic Discriminator
   */
  resultType: "ErrorOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration error
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: ReportableException;
}

/**
 * An interface representing MigrateSqlServerSqlMITaskOutputLoginLevel.
 */
export interface MigrateSqlServerSqlMITaskOutputLoginLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "LoginLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Login name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly loginName?: string;
  /**
   * Current state of login. Possible values include: 'None', 'InProgress', 'Failed', 'Warning',
   * 'Completed', 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: MigrationState;
  /**
   * Current stage of login. Possible values include: 'None', 'Initialize', 'LoginMigration',
   * 'EstablishUserMapping', 'AssignRoleMembership', 'AssignRoleOwnership',
   * 'EstablishServerPermissions', 'EstablishObjectPermissions', 'Completed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly stage?: LoginMigrationStage;
  /**
   * Login migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Login migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Login migration progress message
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Login migration errors and warnings per login
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * An interface representing MigrateSqlServerSqlMITaskOutputAgentJobLevel.
 */
export interface MigrateSqlServerSqlMITaskOutputAgentJobLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "AgentJobLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Agent Job name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The state of the original Agent Job.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isEnabled?: boolean;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: MigrationState;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Migration progress message
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Migration errors and warnings per job
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * An interface representing MigrateSqlServerSqlMITaskOutputDatabaseLevel.
 */
export interface MigrateSqlServerSqlMITaskOutputDatabaseLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * Size of the database in megabytes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sizeMB?: number;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: MigrationState;
  /**
   * Current stage of migration. Possible values include: 'None', 'Initialize', 'Backup',
   * 'FileCopy', 'Restore', 'Completed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly stage?: DatabaseMigrationStage;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Migration progress message
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Migration exceptions and warnings
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * Information of orphaned users on the SQL server database.
 */
export interface OrphanedUserInfo {
  /**
   * Name of the orphaned user
   */
  name?: string;
  /**
   * Parent database of the user
   */
  databaseName?: string;
}

/**
 * Server role migration result
 */
export interface StartMigrationScenarioServerRoleResult {
  /**
   * Name of server role.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: MigrationState;
  /**
   * Migration exceptions and warnings.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * An interface representing MigrateSqlServerSqlMITaskOutputMigrationLevel.
 */
export interface MigrateSqlServerSqlMITaskOutputMigrationLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Current status of migration. Possible values include: 'Default', 'Connecting',
   * 'SourceAndTargetSelected', 'SelectLogins', 'Configured', 'Running', 'Error', 'Stopped',
   * 'Completed', 'CompletedWithWarnings'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: MigrationStatus;
  /**
   * Current state of migration. Possible values include: 'None', 'InProgress', 'Failed',
   * 'Warning', 'Completed', 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: MigrationState;
  /**
   * Selected agent jobs as a map from name to id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly agentJobs?: { [propertyName: string]: string };
  /**
   * Selected logins as a map from name to id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly logins?: { [propertyName: string]: string };
  /**
   * Migration progress message
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Map of server role migration results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serverRoleResults?: { [propertyName: string]: StartMigrationScenarioServerRoleResult };
  /**
   * List of orphaned users.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly orphanedUsersInfo?: OrphanedUserInfo[];
  /**
   * Selected databases as a map from database name to database id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databases?: { [propertyName: string]: string };
  /**
   * Source server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Migration exceptions and warnings.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/**
 * Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance.
 */
export interface MigrateSqlServerSqlMITaskInput extends SqlMigrationTaskInput {
  /**
   * Databases to migrate
   */
  selectedDatabases: MigrateSqlServerSqlMIDatabaseInput[];
  /**
   * Logins to migrate.
   */
  selectedLogins?: string[];
  /**
   * Agent Jobs to migrate.
   */
  selectedAgentJobs?: string[];
  /**
   * Backup file share information for all selected databases.
   */
  backupFileShare?: FileShare;
  /**
   * SAS URI of Azure Storage Account Container to be used for storing backup files.
   */
  backupBlobShare: BlobShare;
  /**
   * Backup Mode to specify whether to use existing backup or create new backup. If using existing
   * backups, backup file paths are required to be provided in selectedDatabases. Possible values
   * include: 'CreateBackup', 'ExistingBackup'
   */
  backupMode?: BackupMode;
  /**
   * Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or
   * 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are
   * selected
   */
  aadDomainName?: string;
}

/**
 * Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance
 */
export interface MigrateSqlServerSqlMITaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Migrate.SqlServer.AzureSqlDbMI";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: MigrateSqlServerSqlMITaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: MigrateSqlServerSqlMITaskOutputUnion[];
}

/**
 * Properties for the task that migrates data between MongoDB data sources
 */
export interface MigrateMongoDbTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Migrate.MongoDb";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  input?: MongoDbMigrationSettings;
  /**
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: MongoDbProgress[];
}

/**
 * Output for the task that validates connection to Azure Database for MySQL and target server
 * requirements
 */
export interface ConnectToTargetAzureDbForMySqlTaskOutput {
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Version of the target server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serverVersion?: string;
  /**
   * List of databases on target server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databases?: string[];
  /**
   * Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Validation errors associated with the task
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that validates connection to Azure Database for MySQL and target server
 * requirements
 */
export interface ConnectToTargetAzureDbForMySqlTaskInput {
  /**
   * Connection information for source MySQL server
   */
  sourceConnectionInfo: MySqlConnectionInfo;
  /**
   * Connection information for target Azure Database for MySQL server
   */
  targetConnectionInfo: MySqlConnectionInfo;
}

/**
 * Properties for the task that validates connection to Azure Database for MySQL and target server
 * requirements
 */
export interface ConnectToTargetAzureDbForMySqlTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ConnectToTarget.AzureDbForMySql";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ConnectToTargetAzureDbForMySqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ConnectToTargetAzureDbForMySqlTaskOutput[];
}

/**
 * Output for the task that validates connection to Azure SQL Database Managed Instance.
 */
export interface ConnectToTargetSqlMISyncTaskOutput {
  /**
   * Target server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that validates connection to Azure SQL Database Managed Instance online
 * scenario.
 */
export interface ConnectToTargetSqlMISyncTaskInput {
  /**
   * Connection information for Azure SQL Database Managed Instance
   */
  targetConnectionInfo: MiSqlConnectionInfo;
  /**
   * Azure Active Directory Application the DMS instance will use to connect to the target instance
   * of Azure SQL Database Managed Instance and the Azure Storage Account
   */
  azureApp: AzureActiveDirectoryApp;
}

/**
 * Properties for the task that validates connection to Azure SQL Database Managed Instance
 */
export interface ConnectToTargetSqlMISyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ConnectToTarget.AzureSqlDbMI.Sync.LRS";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ConnectToTargetSqlMISyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ConnectToTargetSqlMISyncTaskOutput[];
}

/**
 * Output for the task that validates connection to Azure SQL Database Managed Instance.
 */
export interface ConnectToTargetSqlMITaskOutput {
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Target server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerBrandVersion?: string;
  /**
   * List of logins on the target server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly logins?: string[];
  /**
   * List of agent jobs on the target server.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly agentJobs?: string[];
  /**
   * Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that validates connection to Azure SQL Database Managed Instance.
 */
export interface ConnectToTargetSqlMITaskInput {
  /**
   * Connection information for target SQL Server
   */
  targetConnectionInfo: SqlConnectionInfo;
  /**
   * Flag for whether to collect logins from target SQL MI server. Default value: true.
   */
  collectLogins?: boolean;
  /**
   * Flag for whether to collect agent jobs from target SQL MI server. Default value: true.
   */
  collectAgentJobs?: boolean;
  /**
   * Flag for whether to validate SSIS catalog is reachable on the target SQL MI server. Default
   * value: false.
   */
  validateSsisCatalogOnly?: boolean;
}

/**
 * Properties for the task that validates connection to Azure SQL Database Managed Instance
 */
export interface ConnectToTargetSqlMITaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ConnectToTarget.AzureSqlDbMI";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ConnectToTargetSqlMITaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ConnectToTargetSqlMITaskOutput[];
}

/**
 * Table properties
 */
export interface DatabaseTable {
  /**
   * Indicates whether table is empty or not
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly hasRows?: boolean;
  /**
   * Schema-qualified name of the table
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
}

/**
 * Output for the task that gets the list of tables for a provided list of PostgreSQL databases.
 */
export interface GetUserTablesPostgreSqlTaskOutput {
  /**
   * The database this result is for
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * List of valid tables found for this database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tables?: DatabaseTable[];
  /**
   * Validation errors associated with the task
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that gets the list of tables for a provided list of PostgreSQL databases.
 */
export interface GetUserTablesPostgreSqlTaskInput {
  /**
   * Information for connecting to PostgreSQL source
   */
  connectionInfo: PostgreSqlConnectionInfo;
  /**
   * List of PostgreSQL databases for which to collect tables
   */
  selectedDatabases: string[];
}

/**
 * Properties for the task that collects user tables for the given list of databases
 */
export interface GetUserTablesPostgreSqlTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "GetUserTablesPostgreSql";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: GetUserTablesPostgreSqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: GetUserTablesPostgreSqlTaskOutput[];
}

/**
 * Output for the task that gets the list of tables contained within a provided list of Oracle
 * schemas.
 */
export interface GetUserTablesOracleTaskOutput {
  /**
   * The schema this result is for
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly schemaName?: string;
  /**
   * List of valid tables found for this schema
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tables?: DatabaseTable[];
  /**
   * Validation errors associated with the task
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that gets the list of tables contained within a provided list of Oracle
 * schemas.
 */
export interface GetUserTablesOracleTaskInput {
  /**
   * Information for connecting to Oracle source
   */
  connectionInfo: OracleConnectionInfo;
  /**
   * List of Oracle schemas for which to collect tables
   */
  selectedSchemas: string[];
}

/**
 * Properties for the task that collects user tables for the given list of Oracle schemas
 */
export interface GetUserTablesOracleTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "GetUserTablesOracle";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: GetUserTablesOracleTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: GetUserTablesOracleTaskOutput[];
}

/**
 * Output of the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlSyncTaskOutput {
  /**
   * Mapping from database name to list of source tables
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databasesToSourceTables?: { [propertyName: string]: DatabaseTable[] };
  /**
   * Mapping from database name to list of target tables
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databasesToTargetTables?: { [propertyName: string]: DatabaseTable[] };
  /**
   * Mapping from database name to list of validation errors
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tableValidationErrors?: { [propertyName: string]: string[] };
  /**
   * Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlSyncTaskInput {
  /**
   * Connection information for SQL Server
   */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * Connection information for SQL DB
   */
  targetConnectionInfo: SqlConnectionInfo;
  /**
   * List of source database names to collect tables for
   */
  selectedSourceDatabases: string[];
  /**
   * List of target database names to collect tables for
   */
  selectedTargetDatabases: string[];
}

/**
 * Properties for the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlSyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "GetUserTables.AzureSqlDb.Sync";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: GetUserTablesSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: GetUserTablesSqlSyncTaskOutput[];
}

/**
 * Output of the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlTaskOutput {
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Mapping from database name to list of tables
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databasesToTables?: { [propertyName: string]: DatabaseTable[] };
  /**
   * Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlTaskInput {
  /**
   * Connection information for SQL Server
   */
  connectionInfo: SqlConnectionInfo;
  /**
   * List of database names to collect tables for
   */
  selectedDatabases: string[];
}

/**
 * Properties for the task that collects user tables for the given list of databases
 */
export interface GetUserTablesSqlTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "GetUserTables.Sql";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: GetUserTablesSqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: GetUserTablesSqlTaskOutput[];
}

/**
 * An interface representing
 * ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem.
 */
export interface ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem {
  database?: string;
  schemas?: string[];
}

/**
 * Output for the task that validates connection to Azure Database for PostgreSQL and target server
 * requirements for Oracle source.
 */
export interface ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput {
  /**
   * Version of the target server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * List of databases on target server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databases?: string[];
  /**
   * Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Validation errors associated with the task
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
  /**
   * Mapping of schemas per database
   */
  databaseSchemaMap?: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem[];
}

/**
 * Input for the task that validates connection to Azure Database for PostgreSQL and target server
 * requirements for Oracle source.
 */
export interface ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput {
  /**
   * Connection information for target Azure Database for PostgreSQL server
   */
  targetConnectionInfo: PostgreSqlConnectionInfo;
}

/**
 * Properties for the task that validates connection to Azure Database For PostgreSQL server and
 * target server requirements for online migration for Oracle source.
 */
export interface ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput[];
}

/**
 * Output for the task that validates connection to Azure Database for PostgreSQL and target server
 * requirements
 */
export interface ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput {
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Version of the target server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * List of databases on target server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databases?: string[];
  /**
   * Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Validation errors associated with the task
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that validates connection to Azure Database for PostgreSQL and target server
 * requirements
 */
export interface ConnectToTargetAzureDbForPostgreSqlSyncTaskInput {
  /**
   * Connection information for source PostgreSQL server
   */
  sourceConnectionInfo: PostgreSqlConnectionInfo;
  /**
   * Connection information for target Azure Database for PostgreSQL server
   */
  targetConnectionInfo: PostgreSqlConnectionInfo;
}

/**
 * Properties for the task that validates connection to Azure Database For PostgreSQL server and
 * target server requirements for online migration
 */
export interface ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ConnectToTarget.AzureDbForPostgreSql.Sync";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ConnectToTargetAzureDbForPostgreSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput[];
}

/**
 * Output for the task that validates connection to SQL DB and target server requirements
 */
export interface ConnectToTargetSqlDbTaskOutput {
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Source databases as a map from database name to database id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databases?: { [propertyName: string]: string };
  /**
   * Version of the target server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerBrandVersion?: string;
}

/**
 * Input for the task that validates connection to Azure SQL DB and target server requirements
 */
export interface ConnectToTargetSqlSqlDbSyncTaskInput {
  /**
   * Connection information for source SQL Server
   */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * Connection information for target SQL DB
   */
  targetConnectionInfo: SqlConnectionInfo;
}

/**
 * Properties for the task that validates connection to SQL DB and target server requirements for
 * online migration
 */
export interface ConnectToTargetSqlSqlDbSyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ConnectToTarget.SqlDb.Sync";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ConnectToTargetSqlSqlDbSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ConnectToTargetSqlDbTaskOutput[];
}

/**
 * Input for the task that validates connection to SQL DB and target server requirements
 */
export interface ConnectToTargetSqlDbTaskInput {
  /**
   * Connection information for target SQL DB
   */
  targetConnectionInfo: SqlConnectionInfo;
}

/**
 * Properties for the task that validates connection to SQL DB and target server requirements
 */
export interface ConnectToTargetSqlDbTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ConnectToTarget.SqlDb";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ConnectToTargetSqlDbTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ConnectToTargetSqlDbTaskOutput[];
}

/**
 * Output for the task that validates Oracle database connection
 */
export interface ConnectToSourceOracleSyncTaskOutput {
  /**
   * Version of the source server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * List of schemas on source server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databases?: string[];
  /**
   * Source server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Validation errors associated with the task
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that validates Oracle database connection
 */
export interface ConnectToSourceOracleSyncTaskInput {
  /**
   * Information for connecting to Oracle source
   */
  sourceConnectionInfo: OracleConnectionInfo;
}

/**
 * Properties for the task that validates Oracle database connection
 */
export interface ConnectToSourceOracleSyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ConnectToSource.Oracle.Sync";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ConnectToSourceOracleSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ConnectToSourceOracleSyncTaskOutput[];
}

/**
 * Output for the task that validates connection to PostgreSQL and source server requirements
 */
export interface ConnectToSourcePostgreSqlSyncTaskOutput {
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Version of the source server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * List of databases on source server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databases?: string[];
  /**
   * Source server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Validation errors associated with the task
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that validates connection to PostgreSQL and source server requirements
 */
export interface ConnectToSourcePostgreSqlSyncTaskInput {
  /**
   * Connection information for source PostgreSQL server
   */
  sourceConnectionInfo: PostgreSqlConnectionInfo;
}

/**
 * Properties for the task that validates connection to PostgreSQL server and source server
 * requirements for online migration
 */
export interface ConnectToSourcePostgreSqlSyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ConnectToSource.PostgreSql.Sync";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ConnectToSourcePostgreSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ConnectToSourcePostgreSqlSyncTaskOutput[];
}

/**
 * Information about migration eligibility of a server object
 */
export interface MigrationEligibilityInfo {
  /**
   * Whether object is eligible for migration or not.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isEligibleForMigration?: boolean;
  /**
   * Information about eligibility failure for the server object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationMessages?: string[];
}

/**
 * Contains the possible cases for ConnectToSourceSqlServerTaskOutput.
 */
export type ConnectToSourceSqlServerTaskOutputUnion = ConnectToSourceSqlServerTaskOutput | ConnectToSourceSqlServerTaskOutputAgentJobLevel | ConnectToSourceSqlServerTaskOutputLoginLevel | ConnectToSourceSqlServerTaskOutputDatabaseLevel | ConnectToSourceSqlServerTaskOutputTaskLevel;

/**
 * Output for the task that validates connection to SQL Server and also validates source server
 * requirements
 */
export interface ConnectToSourceSqlServerTaskOutput {
  /**
   * Polymorphic Discriminator
   */
  resultType: "ConnectToSourceSqlServerTaskOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
}

/**
 * Agent Job level output for the task that validates connection to SQL Server and also validates
 * source server requirements
 */
export interface ConnectToSourceSqlServerTaskOutputAgentJobLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "AgentJobLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Agent Job name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of Agent Job.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly jobCategory?: string;
  /**
   * The state of the original Agent Job.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isEnabled?: boolean;
  /**
   * The owner of the Agent Job
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly jobOwner?: string;
  /**
   * UTC Date and time when the Agent Job was last executed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastExecutedOn?: Date;
  /**
   * Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
  /**
   * Information about eligibility of agent job for migration.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly migrationEligibility?: MigrationEligibilityInfo;
}

/**
 * Login level output for the task that validates connection to SQL Server and also validates
 * source server requirements
 */
export interface ConnectToSourceSqlServerTaskOutputLoginLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "LoginLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Login name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of login. Possible values include: 'WindowsUser', 'WindowsGroup', 'SqlLogin',
   * 'Certificate', 'AsymmetricKey', 'ExternalUser', 'ExternalGroup'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly loginType?: LoginType;
  /**
   * The default database for the login.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly defaultDatabase?: string;
  /**
   * The state of the login.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isEnabled?: boolean;
  /**
   * Information about eligibility of login for migration.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly migrationEligibility?: MigrationEligibilityInfo;
}

/**
 * Database file specific information
 */
export interface DatabaseFileInfo {
  /**
   * Name of the database
   */
  databaseName?: string;
  /**
   * Unique identifier for database file
   */
  id?: string;
  /**
   * Logical name of the file
   */
  logicalName?: string;
  /**
   * Operating-system full path of the file
   */
  physicalFullName?: string;
  /**
   * Suggested full path of the file for restoring
   */
  restoreFullName?: string;
  /**
   * Database file type. Possible values include: 'Rows', 'Log', 'Filestream', 'NotSupported',
   * 'Fulltext'
   */
  fileType?: DatabaseFileType;
  /**
   * Size of the file in megabytes
   */
  sizeMB?: number;
}

/**
 * Database level output for the task that validates connection to SQL Server and also validates
 * source server requirements
 */
export interface ConnectToSourceSqlServerTaskOutputDatabaseLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Database name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Size of the file in megabytes
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sizeMB?: number;
  /**
   * The list of database files
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseFiles?: DatabaseFileInfo[];
  /**
   * SQL Server compatibility level of database. Possible values include: 'CompatLevel80',
   * 'CompatLevel90', 'CompatLevel100', 'CompatLevel110', 'CompatLevel120', 'CompatLevel130',
   * 'CompatLevel140'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly compatibilityLevel?: DatabaseCompatLevel;
  /**
   * State of the database. Possible values include: 'Online', 'Restoring', 'Recovering',
   * 'RecoveryPending', 'Suspect', 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseState?: DatabaseState;
}

/**
 * Task level output for the task that validates connection to SQL Server and also validates source
 * server requirements
 */
export interface ConnectToSourceSqlServerTaskOutputTaskLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "TaskLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Source databases as a map from database name to database id
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databases?: { [propertyName: string]: string };
  /**
   * Source logins as a map from login name to login id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly logins?: { [propertyName: string]: string };
  /**
   * Source agent jobs as a map from agent job name to id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly agentJobs?: { [propertyName: string]: string };
  /**
   * Mapping from database name to TDE certificate name, if applicable
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseTdeCertificateMapping?: { [propertyName: string]: string };
  /**
   * Source server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the task that validates connection to SQL Server and also validates source server
 * requirements
 */
export interface ConnectToSourceSqlServerTaskInput {
  /**
   * Connection information for Source SQL Server
   */
  sourceConnectionInfo: SqlConnectionInfo;
  /**
   * Permission group for validations. Possible values include: 'Default',
   * 'MigrationFromSqlServerToAzureDB', 'MigrationFromSqlServerToAzureMI',
   * 'MigrationFromMySQLToAzureDBForMySQL'
   */
  checkPermissionsGroup?: ServerLevelPermissionsGroup;
  /**
   * Flag for whether to collect databases from source server. Default value: true.
   */
  collectDatabases?: boolean;
  /**
   * Flag for whether to collect logins from source server. Default value: false.
   */
  collectLogins?: boolean;
  /**
   * Flag for whether to collect agent jobs from source server. Default value: false.
   */
  collectAgentJobs?: boolean;
  /**
   * Flag for whether to collect TDE Certificate names from source server. Default value: false.
   */
  collectTdeCertificateInfo?: boolean;
  /**
   * Flag for whether to validate SSIS catalog is reachable on the source server. Default value:
   * false.
   */
  validateSsisCatalogOnly?: boolean;
}

/**
 * Properties for the task that validates connection to SQL Server and source server requirements
 * for online migration
 */
export interface ConnectToSourceSqlServerSyncTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ConnectToSource.SqlServer.Sync";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ConnectToSourceSqlServerTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ConnectToSourceSqlServerTaskOutputUnion[];
}

/**
 * Properties for the task that validates connection to SQL Server and also validates source server
 * requirements
 */
export interface ConnectToSourceSqlServerTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ConnectToSource.SqlServer";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ConnectToSourceSqlServerTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ConnectToSourceSqlServerTaskOutputUnion[];
}

/**
 * Describes a MongoDB shard key
 */
export interface MongoDbShardKeyInfo {
  /**
   * The fields within the shard key
   */
  fields: MongoDbShardKeyField[];
  /**
   * Whether the shard key is unique
   */
  isUnique: boolean;
}

/**
 * Describes a database or collection within a MongoDB data source
 */
export interface MongoDbObjectInfo {
  /**
   * The average document size, or -1 if the average size is unknown
   */
  averageDocumentSize: number;
  /**
   * The estimated total data size, in bytes, or -1 if the size is unknown.
   */
  dataSize: number;
  /**
   * The estimated total number of documents, or -1 if the document count is unknown
   */
  documentCount: number;
  /**
   * The unqualified name of the database or collection
   */
  name: string;
  /**
   * The qualified name of the database or collection. For a collection, this is the
   * database-qualified name.
   */
  qualifiedName: string;
}

/**
 * Describes a supported collection within a MongoDB database
 */
export interface MongoDbCollectionInfo extends MongoDbObjectInfo {
  /**
   * The name of the database containing the collection
   */
  databaseName: string;
  /**
   * Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like
   * a circular buffer)
   */
  isCapped: boolean;
  /**
   * Whether the collection is system collection
   */
  isSystemCollection: boolean;
  /**
   * Whether the collection is a view of another collection
   */
  isView: boolean;
  /**
   * The shard key on the collection, or null if the collection is not sharded
   */
  shardKey?: MongoDbShardKeyInfo;
  /**
   * Whether the database has sharding enabled. Note that the migration task will enable sharding
   * on the target if necessary.
   */
  supportsSharding: boolean;
  /**
   * The name of the collection that this is a view of, if IsView is true
   */
  viewOf?: string;
}

/**
 * Describes a database within a MongoDB data source
 */
export interface MongoDbDatabaseInfo extends MongoDbObjectInfo {
  /**
   * A list of supported collections in a MongoDB database
   */
  collections: MongoDbCollectionInfo[];
  /**
   * Whether the database has sharding enabled. Note that the migration task will enable sharding
   * on the target if necessary.
   */
  supportsSharding: boolean;
}

/**
 * Describes a MongoDB data source
 */
export interface MongoDbClusterInfo {
  /**
   * A list of non-system databases in the cluster
   */
  databases: MongoDbDatabaseInfo[];
  /**
   * Whether the cluster supports sharded collections
   */
  supportsSharding: boolean;
  /**
   * The type of data source. Possible values include: 'BlobContainer', 'CosmosDb', 'MongoDb'
   */
  type: MongoDbClusterType;
  /**
   * The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is
   * BlobContainer.
   */
  version: string;
}

/**
 * Properties for the task that validates the connection to and provides information about a
 * MongoDB server
 */
export interface ConnectToMongoDbTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Connect.MongoDb";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  input?: MongoDbConnectionInfo;
  /**
   * An array containing a single MongoDbClusterInfo object
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: MongoDbClusterInfo[];
}

/**
 * A task resource
 */
export interface ProjectTask extends Resource {
  /**
   * HTTP strong entity tag value. This is ignored if submitted.
   */
  etag?: string;
  /**
   * Custom task properties
   */
  properties?: ProjectTaskPropertiesUnion;
}

/**
 * An Azure SKU instance
 */
export interface ServiceSku {
  /**
   * The unique name of the SKU, such as 'P3'
   */
  name?: string;
  /**
   * The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical'
   */
  tier?: string;
  /**
   * The SKU family, used when the service has multiple performance classes within a tier, such as
   * 'A', 'D', etc. for virtual machines
   */
  family?: string;
  /**
   * The size of the SKU, used when the name alone does not denote a service size or when a SKU has
   * multiple performance classes within a family, e.g. 'A1' for virtual machines
   */
  size?: string;
  /**
   * The capacity of the SKU, if it supports scaling
   */
  capacity?: number;
}

/**
 * A Database Migration Service resource
 */
export interface DataMigrationService extends TrackedResource {
  /**
   * HTTP strong entity tag value. Ignored if submitted
   */
  etag?: string;
  /**
   * The resource kind. Only 'vm' (the default) is supported.
   */
  kind?: string;
  /**
   * The resource's provisioning state. Possible values include: 'Accepted', 'Deleting',
   * 'Deploying', 'Stopped', 'Stopping', 'Starting', 'FailedToStart', 'FailedToStop', 'Succeeded',
   * 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ServiceProvisioningState;
  /**
   * The public key of the service, used to encrypt secrets sent to the service
   */
  publicKey?: string;
  /**
   * The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should
   * be joined
   */
  virtualSubnetId: string;
  /**
   * Service SKU
   */
  sku?: ServiceSku;
}

/**
 * A resource type and proposed name
 */
export interface NameAvailabilityRequest {
  /**
   * The proposed resource name
   */
  name?: string;
  /**
   * The resource type chain (e.g. virtualMachines/extensions)
   */
  type?: string;
}

/**
 * Project Database Details
 */
export interface DatabaseInfo {
  /**
   * Name of the database
   */
  sourceDatabaseName: string;
}

/**
 * A project resource
 */
export interface Project extends TrackedResource {
  /**
   * Source platform for the project. Possible values include: 'SQL', 'MySQL', 'PostgreSql',
   * 'MongoDb', 'Unknown'
   */
  sourcePlatform: ProjectSourcePlatform;
  /**
   * Target platform for the project. Possible values include: 'SQLDB', 'SQLMI', 'AzureDbForMySql',
   * 'AzureDbForPostgreSql', 'MongoDb', 'Unknown'
   */
  targetPlatform: ProjectTargetPlatform;
  /**
   * UTC Date and time when project was created
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationTime?: Date;
  /**
   * Information for connecting to source
   */
  sourceConnectionInfo?: ConnectionInfoUnion;
  /**
   * Information for connecting to target
   */
  targetConnectionInfo?: ConnectionInfoUnion;
  /**
   * List of DatabaseInfo
   */
  databasesInfo?: DatabaseInfo[];
  /**
   * The project's provisioning state. Possible values include: 'Deleting', 'Succeeded'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProjectProvisioningState;
}

/**
 * Error information.
 */
export interface ApiError {
  /**
   * Error information in OData format
   */
  error?: ODataError;
}

/**
 * File storage information.
 */
export interface FileStorageInfo {
  /**
   * A URI that can be used to access the file content.
   */
  uri?: string;
  headers?: { [propertyName: string]: string };
}

/**
 * Localized display text
 */
export interface ServiceOperationDisplay {
  /**
   * The localized resource provider name
   */
  provider?: string;
  /**
   * The localized resource type name
   */
  resource?: string;
  /**
   * The localized operation name
   */
  operation?: string;
  /**
   * The localized operation description
   */
  description?: string;
}

/**
 * Description of an action supported by the Database Migration Service
 */
export interface ServiceOperation {
  /**
   * The fully qualified action name, e.g. Microsoft.DataMigration/services/read
   */
  name?: string;
  /**
   * Localized display text
   */
  display?: ServiceOperationDisplay;
}

/**
 * The name of the quota
 */
export interface QuotaName {
  /**
   * The localized name of the quota
   */
  localizedValue?: string;
  /**
   * The unlocalized name (or ID) of the quota
   */
  value?: string;
}

/**
 * Describes a quota for or usage details about a resource
 */
export interface Quota {
  /**
   * The current value of the quota. If null or missing, the current value cannot be determined in
   * the context of the request.
   */
  currentValue?: number;
  /**
   * The resource ID of the quota object
   */
  id?: string;
  /**
   * The maximum value of the quota. If null or missing, the quota has no maximum, in which case it
   * merely tracks usage.
   */
  limit?: number;
  /**
   * The name of the quota
   */
  name?: QuotaName;
  /**
   * The unit for the quota, such as Count, Bytes, BytesPerSecond, etc.
   */
  unit?: string;
}

/**
 * Indicates whether a proposed resource name is available
 */
export interface NameAvailabilityResponse {
  /**
   * If true, the name is valid and available. If false, 'reason' describes why not.
   */
  nameAvailable?: boolean;
  /**
   * The reason why the name is not available, if nameAvailable is false. Possible values include:
   * 'AlreadyExists', 'Invalid'
   */
  reason?: NameCheckFailureReason;
  /**
   * The localized reason why the name is not available, if nameAvailable is false
   */
  message?: string;
}

/**
 * SKU name, tier, etc.
 */
export interface AvailableServiceSkuSku {
  /**
   * The name of the SKU
   */
  name?: string;
  /**
   * SKU family
   */
  family?: string;
  /**
   * SKU size
   */
  size?: string;
  /**
   * The tier of the SKU, such as "Basic", "General Purpose", or "Business Critical"
   */
  tier?: string;
}

/**
 * A description of the scaling capacities of the SKU
 */
export interface AvailableServiceSkuCapacity {
  /**
   * The minimum capacity, usually 0 or 1.
   */
  minimum?: number;
  /**
   * The maximum capacity
   */
  maximum?: number;
  /**
   * The default capacity
   */
  default?: number;
  /**
   * The scalability approach. Possible values include: 'none', 'manual', 'automatic'
   */
  scaleType?: ServiceScalability;
}

/**
 * Describes the available service SKU.
 */
export interface AvailableServiceSku {
  /**
   * The resource type, including the provider namespace
   */
  resourceType?: string;
  /**
   * SKU name, tier, etc.
   */
  sku?: AvailableServiceSkuSku;
  /**
   * A description of the scaling capacities of the SKU
   */
  capacity?: AvailableServiceSkuCapacity;
}

/**
 * Service health status
 */
export interface DataMigrationServiceStatusResponse {
  /**
   * The DMS instance agent version
   */
  agentVersion?: string;
  /**
   * The machine-readable status, such as 'Initializing', 'Offline', 'Online', 'Deploying',
   * 'Deleting', 'Stopped', 'Stopping', 'Starting', 'FailedToStart', 'FailedToStop' or 'Failed'
   */
  status?: string;
  /**
   * The services virtual machine size, such as 'Standard_D2_v2'
   */
  vmSize?: string;
  /**
   * The list of supported task types
   */
  supportedTaskTypes?: string[];
}

/**
 * Describes scaling information of a SKU.
 */
export interface ResourceSkuRestrictions {
  /**
   * The type of restrictions. Possible values include: 'location'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: ResourceSkuRestrictionsType;
  /**
   * The value of restrictions. If the restriction type is set to location. This would be different
   * locations where the SKU is restricted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly values?: string[];
  /**
   * The reason code for restriction. Possible values include: 'QuotaId',
   * 'NotAvailableForSubscription'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly reasonCode?: ResourceSkuRestrictionsReasonCode;
}

/**
 * Describes The SKU capabilities object.
 */
export interface ResourceSkuCapabilities {
  /**
   * An invariant to describe the feature.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * An invariant if the feature is measured by quantity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: string;
}

/**
 * Describes metadata for retrieving price info.
 */
export interface ResourceSkuCosts {
  /**
   * Used for querying price from commerce.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly meterID?: string;
  /**
   * The multiplier is needed to extend the base metered cost.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly quantity?: number;
  /**
   * An invariant to show the extended unit.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly extendedUnit?: string;
}

/**
 * Describes scaling information of a SKU.
 */
export interface ResourceSkuCapacity {
  /**
   * The minimum capacity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly minimum?: number;
  /**
   * The maximum capacity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly maximum?: number;
  /**
   * The default capacity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly default?: number;
  /**
   * The scale type applicable to the SKU. Possible values include: 'Automatic', 'Manual', 'None'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scaleType?: ResourceSkuCapacityScaleType;
}

/**
 * Describes an available DMS SKU.
 */
export interface ResourceSku {
  /**
   * The type of resource the SKU applies to.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceType?: string;
  /**
   * The name of SKU.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Specifies the tier of DMS in a scale set.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tier?: string;
  /**
   * The Size of the SKU.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly size?: string;
  /**
   * The Family of this particular SKU.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly family?: string;
  /**
   * The Kind of resources that are supported in this SKU.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
  /**
   * Not used.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly capacity?: ResourceSkuCapacity;
  /**
   * The set of locations that the SKU is available.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly locations?: string[];
  /**
   * The api versions that support this SKU.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly apiVersions?: string[];
  /**
   * Metadata for retrieving price info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly costs?: ResourceSkuCosts[];
  /**
   * A name value pair to describe the capability.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly capabilities?: ResourceSkuCapabilities[];
  /**
   * The restrictions because of which SKU cannot be used. This is empty if there are no
   * restrictions.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly restrictions?: ResourceSkuRestrictions[];
}

/**
 * Input for the task that validates MySQL database connection
 */
export interface ConnectToSourceMySqlTaskInput {
  /**
   * Information for connecting to MySQL source
   */
  sourceConnectionInfo: MySqlConnectionInfo;
  /**
   * Target Platform for the migration. Possible values include: 'SqlServer', 'AzureDbForMySQL'
   */
  targetPlatform?: MySqlTargetPlatformType;
  /**
   * Permission group for validations. Possible values include: 'Default',
   * 'MigrationFromSqlServerToAzureDB', 'MigrationFromSqlServerToAzureMI',
   * 'MigrationFromMySQLToAzureDBForMySQL'
   */
  checkPermissionsGroup?: ServerLevelPermissionsGroup;
}

/**
 * Server properties for MySQL type source
 */
export interface ServerProperties {
  /**
   * Name of the server platform
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serverPlatform?: string;
  /**
   * Name of the server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serverName?: string;
  /**
   * Version of the database server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serverVersion?: string;
  /**
   * Edition of the database server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serverEdition?: string;
  /**
   * Version of the operating system
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serverOperatingSystemVersion?: string;
  /**
   * Number of databases in the server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serverDatabaseCount?: number;
}

/**
 * Output for connect to MySQL type source
 */
export interface ConnectToSourceNonSqlTaskOutput {
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Server properties
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly serverProperties?: ServerProperties;
  /**
   * List of databases on the server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databases?: string[];
  /**
   * Validation errors associated with the task
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Properties for the task that validates MySQL database connection
 */
export interface ConnectToSourceMySqlTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "ConnectToSource.MySql";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: ConnectToSourceMySqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: ConnectToSourceNonSqlTaskOutput[];
}

/**
 * Settings for migrating schema from source to target
 */
export interface SchemaMigrationSetting {
  /**
   * Option on how to migrate the schema. Possible values include: 'None', 'ExtractFromSource',
   * 'UseStorageFile'
   */
  schemaOption?: SchemaMigrationOption;
  /**
   * Resource Identifier of a file resource containing the uploaded schema file
   */
  fileId?: string;
}

/**
 * Database input for migrate schema Sql Server to Azure SQL Server scenario
 */
export interface MigrateSchemaSqlServerSqlDbDatabaseInput {
  /**
   * Name of source database
   */
  name?: string;
  /**
   * Name of target database
   */
  targetDatabaseName?: string;
  /**
   * Database schema migration settings
   */
  schemaSetting?: SchemaMigrationSetting;
}

/**
 * Input for task that migrates Schema for SQL Server databases to Azure SQL databases
 */
export interface MigrateSchemaSqlServerSqlDbTaskInput extends SqlMigrationTaskInput {
  /**
   * Databases to migrate
   */
  selectedDatabases: MigrateSchemaSqlServerSqlDbDatabaseInput[];
}

/**
 * Contains the possible cases for MigrateSchemaSqlServerSqlDbTaskOutput.
 */
export type MigrateSchemaSqlServerSqlDbTaskOutputUnion = MigrateSchemaSqlServerSqlDbTaskOutput | MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel | MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel | MigrateSchemaSqlServerSqlDbTaskOutputError | MigrateSchemaSqlTaskOutputError;

/**
 * Output for the task that migrates Schema for SQL Server databases to Azure SQL databases
 */
export interface MigrateSchemaSqlServerSqlDbTaskOutput {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrateSchemaSqlServerSqlDbTaskOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
}

/**
 * Properties for task that migrates Schema for SQL Server databases to Azure SQL databases
 */
export interface MigrateSchemaSqlServerSqlDbTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "MigrateSchemaSqlServerSqlDb";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  /**
   * Task input
   */
  input?: MigrateSchemaSqlServerSqlDbTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: MigrateSchemaSqlServerSqlDbTaskOutputUnion[];
}

/**
 * An interface representing MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel.
 */
export interface MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "MigrationLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Overall state of the schema migration. Possible values include: 'None', 'InProgress',
   * 'Failed', 'Warning', 'Completed', 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: MigrationState;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Source server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerBrandVersion?: string;
}

/**
 * An interface representing MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel.
 */
export interface MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel {
  /**
   * Polymorphic Discriminator
   */
  resultType: "DatabaseLevelOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * State of the schema migration for this database. Possible values include: 'None',
   * 'InProgress', 'Failed', 'Warning', 'Completed', 'Skipped', 'Stopped'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: MigrationState;
  /**
   * Schema migration stage for this database. Possible values include: 'NotStarted',
   * 'ValidatingInputs', 'CollectingObjects', 'DownloadingScript', 'GeneratingScript',
   * 'UploadingScript', 'DeployingSchema', 'Completed', 'CompletedWithWarnings', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly stage?: SchemaMigrationStage;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Prefix string to use for querying errors for this database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseErrorResultPrefix?: string;
  /**
   * Prefix string to use for querying schema errors for this database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly schemaErrorResultPrefix?: string;
  /**
   * Number of successful operations for this database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly numberOfSuccessfulOperations?: number;
  /**
   * Number of failed operations for this database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly numberOfFailedOperations?: number;
  /**
   * Identifier for the file resource containing the schema of this database
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly fileId?: string;
}

/**
 * An interface representing MigrateSchemaSqlServerSqlDbTaskOutputError.
 */
export interface MigrateSchemaSqlServerSqlDbTaskOutputError {
  /**
   * Polymorphic Discriminator
   */
  resultType: "SchemaErrorOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Schema command which failed
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commandText?: string;
  /**
   * Reason of failure
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errorText?: string;
}

/**
 * An interface representing MigrateSchemaSqlTaskOutputError.
 */
export interface MigrateSchemaSqlTaskOutputError {
  /**
   * Polymorphic Discriminator
   */
  resultType: "ErrorOutput";
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration error
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly error?: ReportableException;
}

/**
 * Describes the input to the 'cancel' and 'restart' MongoDB migration commands
 */
export interface MongoDbCommandInput {
  /**
   * The qualified name of a database or collection to act upon, or null to act upon the entire
   * migration
   */
  objectName?: string;
}

/**
 * Properties for the command that cancels a migration in whole or in part
 */
export interface MongoDbCancelCommand {
  /**
   * Polymorphic Discriminator
   */
  commandType: "cancel";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the command. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Accepted', 'Running', 'Succeeded', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: CommandState;
  /**
   * Command input
   */
  input?: MongoDbCommandInput;
}

/**
 * Describes the input to the 'finish' MongoDB migration command
 */
export interface MongoDbFinishCommandInput extends MongoDbCommandInput {
  /**
   * If true, replication for the affected objects will be stopped immediately. If false, the
   * migrator will finish replaying queued events before finishing the replication.
   */
  immediate: boolean;
}

/**
 * Properties for the command that finishes a migration in whole or in part
 */
export interface MongoDbFinishCommand {
  /**
   * Polymorphic Discriminator
   */
  commandType: "finish";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the command. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Accepted', 'Running', 'Succeeded', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: CommandState;
  /**
   * Command input
   */
  input?: MongoDbFinishCommandInput;
}

/**
 * Properties for the command that restarts a migration in whole or in part
 */
export interface MongoDbRestartCommand {
  /**
   * Polymorphic Discriminator
   */
  commandType: "restart";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the command. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Accepted', 'Running', 'Succeeded', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: CommandState;
  /**
   * Command input
   */
  input?: MongoDbCommandInput;
}

/**
 * Information about an Oracle OCI driver.
 */
export interface OracleOCIDriverInfo {
  /**
   * The name of the driver package
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly driverName?: string;
  /**
   * The size in bytes of the driver package
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly driverSize?: string;
  /**
   * The MD5 Base64 encoded checksum for the driver package.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly archiveChecksum?: string;
  /**
   * The checksum for the driver package provided by Oracle.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly oracleChecksum?: string;
  /**
   * Version listed in the OCI assembly 'oci.dll'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly assemblyVersion?: string;
  /**
   * List of Oracle database versions supported by this driver. Only major minor of the version is
   * listed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly supportedOracleVersions?: string[];
}

/**
 * Input for the service task to check for OCI drivers.
 */
export interface CheckOCIDriverTaskInput {
  /**
   * Version of the source server to check against.  Optional.
   */
  serverVersion?: string;
}

/**
 * Output for the service task to check for OCI drivers.
 */
export interface CheckOCIDriverTaskOutput {
  /**
   * Information about the installed driver if found and valid.
   */
  installedDriver?: OracleOCIDriverInfo;
  /**
   * Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the service task to upload an OCI driver.
 */
export interface UploadOCIDriverTaskInput {
  /**
   * File share information for the OCI driver archive.
   */
  driverShare?: FileShare;
}

/**
 * Output for the service task to upload an OCI driver.
 */
export interface UploadOCIDriverTaskOutput {
  /**
   * The name of the driver package that was validated and uploaded.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly driverPackageName?: string;
  /**
   * Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Input for the service task to install an OCI driver.
 */
export interface InstallOCIDriverTaskInput {
  /**
   * Name of the uploaded driver package to install.
   */
  driverPackageName?: string;
}

/**
 * Output for the service task to install an OCI driver.
 */
export interface InstallOCIDriverTaskOutput {
  /**
   * Validation errors
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationErrors?: ReportableException[];
}

/**
 * Properties for the task that checks for OCI drivers.
 */
export interface CheckOCIDriverTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Service.Check.OCI";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  input?: CheckOCIDriverTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: CheckOCIDriverTaskOutput[];
}

/**
 * Properties for the task that uploads an OCI driver.
 */
export interface UploadOCIDriverTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Service.Upload.OCI";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  input?: UploadOCIDriverTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: UploadOCIDriverTaskOutput[];
}

/**
 * Properties for the task that installs an OCI driver.
 */
export interface InstallOCIDriverTaskProperties {
  /**
   * Polymorphic Discriminator
   */
  taskType: "Service.Install.OCI";
  /**
   * Array of errors. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted. Possible values include: 'Unknown',
   * 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed', 'FailedInputValidation', 'Faulted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly commands?: CommandPropertiesUnion[];
  /**
   * Key value pairs of client data to attach meta data information to task
   */
  clientData?: { [propertyName: string]: string };
  input?: InstallOCIDriverTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly output?: InstallOCIDriverTaskOutput[];
}

/**
 * Information about a single database
 */
export interface Database {
  /**
   * Unique identifier for the database
   */
  id?: string;
  /**
   * Name of the database
   */
  name?: string;
  /**
   * SQL Server compatibility level of database. Possible values include: 'CompatLevel80',
   * 'CompatLevel90', 'CompatLevel100', 'CompatLevel110', 'CompatLevel120', 'CompatLevel130',
   * 'CompatLevel140'
   */
  compatibilityLevel?: DatabaseCompatLevel;
  /**
   * Collation name of the database
   */
  collation?: string;
  /**
   * Name of the server
   */
  serverName?: string;
  /**
   * Fully qualified name
   */
  fqdn?: string;
  /**
   * Install id of the database
   */
  installId?: string;
  /**
   * Version of the server
   */
  serverVersion?: string;
  /**
   * Edition of the server
   */
  serverEdition?: string;
  /**
   * Product level of the server (RTM, SP, CTP).
   */
  serverLevel?: string;
  /**
   * Default path of the data files
   */
  serverDefaultDataPath?: string;
  /**
   * Default path of the log files
   */
  serverDefaultLogPath?: string;
  /**
   * Default path of the backup folder
   */
  serverDefaultBackupPath?: string;
  /**
   * Number of cores on the server
   */
  serverCoreCount?: number;
  /**
   * Number of cores on the server that have VISIBLE ONLINE status
   */
  serverVisibleOnlineCoreCount?: number;
  /**
   * State of the database. Possible values include: 'Online', 'Restoring', 'Recovering',
   * 'RecoveryPending', 'Suspect', 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'
   */
  databaseState?: DatabaseState;
  /**
   * The unique Server Id
   */
  serverId?: string;
}

/**
 * A representation of the name of an object in a database
 */
export interface DatabaseObjectName {
  /**
   * The unescaped name of the database containing the object
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
  /**
   * The unescaped name of the object
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly objectName?: string;
  /**
   * The unescaped name of the schema containing the object
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly schemaName?: string;
  /**
   * Type of the object in the database. Possible values include: 'StoredProcedures', 'Table',
   * 'User', 'View', 'Function'
   */
  objectType?: ObjectType;
}

/**
 * Metadata for tables selected in migration project
 */
export interface MigrationTableMetadata {
  /**
   * Source table name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceTableName?: string;
  /**
   * Target table name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetTableName?: string;
}

/**
 * Common metadata for migration projects
 */
export interface DataMigrationProjectMetadata {
  /**
   * Source server name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerName?: string;
  /**
   * Source server port number
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerPort?: string;
  /**
   * Source username
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceUsername?: string;
  /**
   * Target server name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerName?: string;
  /**
   * Target username
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetUsername?: string;
  /**
   * Target database name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetDbName?: string;
  /**
   * Whether target connection is Windows authentication
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetUsingWinAuth?: boolean;
  /**
   * List of tables selected for migration
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly selectedMigrationTables?: MigrationTableMetadata[];
}

/**
 * Input for the task that reads configuration from project artifacts
 */
export interface GetProjectDetailsNonSqlTaskInput {
  /**
   * Name of the migration project
   */
  projectName: string;
  /**
   * A URL that points to the location to access project artifacts
   */
  projectLocation: string;
}

/**
 * Defines metadata for table to be migrated
 */
export interface NonSqlDataMigrationTable {
  /**
   * Source table name
   */
  sourceName?: string;
}

/**
 * Base class for non sql migration task input
 */
export interface NonSqlMigrationTaskInput {
  /**
   * Information for connecting to target
   */
  targetConnectionInfo: SqlConnectionInfo;
  /**
   * Target database name
   */
  targetDatabaseName: string;
  /**
   * Name of the migration project
   */
  projectName: string;
  /**
   * A URL that points to the drop location to access project artifacts
   */
  projectLocation: string;
  /**
   * Metadata of the tables selected for migration
   */
  selectedTables: NonSqlDataMigrationTable[];
}

/**
 * Migration Task errors
 */
export interface DataMigrationError {
  /**
   * Error description
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Possible values include: 'Default', 'Warning', 'Error'
   */
  type?: ErrorType;
}

/**
 * Object used to report the data migration results of a table
 */
export interface NonSqlDataMigrationTableResult {
  /**
   * Result code of the data migration. Possible values include: 'Initial', 'Completed',
   * 'ObjectNotExistsInSource', 'ObjectNotExistsInTarget', 'TargetObjectIsInaccessible',
   * 'FatalError'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resultCode?: DataMigrationResultCode;
  /**
   * Name of the source table
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceName?: string;
  /**
   * Name of the target table
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetName?: string;
  /**
   * Number of rows in the source table
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceRowCount?: number;
  /**
   * Number of rows in the target table
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetRowCount?: number;
  /**
   * Time taken to migrate the data
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly elapsedTimeInMiliseconds?: number;
  /**
   * List of errors, if any, during migration
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: DataMigrationError[];
}

/**
 * Base class for non sql migration task output
 */
export interface NonSqlMigrationTaskOutput {
  /**
   * Result identifier
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Migration start time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endedOn?: Date;
  /**
   * Current state of migration. Possible values include: 'Default', 'Connecting',
   * 'SourceAndTargetSelected', 'SelectLogins', 'Configured', 'Running', 'Error', 'Stopped',
   * 'Completed', 'CompletedWithWarnings'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: MigrationStatus;
  /**
   * Results of the migration. The key contains the table name and the value the table result
   * object
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataMigrationTableResults?: { [propertyName: string]: NonSqlDataMigrationTableResult };
  /**
   * Message about the progress of the migration
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly progressMessage?: string;
  /**
   * Name of source server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sourceServerName?: string;
  /**
   * Name of target server
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly targetServerName?: string;
}

/**
 * Database file specific information for input
 */
export interface DatabaseFileInput {
  /**
   * Unique identifier for database file
   */
  id?: string;
  /**
   * Logical name of the file
   */
  logicalName?: string;
  /**
   * Operating-system full path of the file
   */
  physicalFullName?: string;
  /**
   * Suggested full path of the file for restoring
   */
  restoreFullName?: string;
  /**
   * Database file type. Possible values include: 'Rows', 'Log', 'Filestream', 'NotSupported',
   * 'Fulltext'
   */
  fileType?: DatabaseFileType;
}

/**
 * Database specific information for SQL to SQL migration task inputs
 */
export interface MigrateSqlServerSqlServerDatabaseInput {
  /**
   * Name of the database
   */
  name?: string;
  /**
   * Name of the database at destination
   */
  restoreDatabaseName?: string;
  /**
   * The backup and restore folder
   */
  backupAndRestoreFolder?: string;
  /**
   * The list of database files
   */
  databaseFiles?: DatabaseFileInput[];
}

/**
 * Optional Parameters.
 */
export interface ServicesDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Delete the resource even if it contains running tasks
   */
  deleteRunningTasks?: boolean;
}

/**
 * Optional Parameters.
 */
export interface ServicesBeginDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Delete the resource even if it contains running tasks
   */
  deleteRunningTasks?: boolean;
}

/**
 * Optional Parameters.
 */
export interface TasksListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Filter tasks by task type
   */
  taskType?: string;
}

/**
 * Optional Parameters.
 */
export interface TasksGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expand the response
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface TasksDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Delete the resource even if it contains running tasks
   */
  deleteRunningTasks?: boolean;
}

/**
 * Optional Parameters.
 */
export interface ServiceTasksListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Filter tasks by task type
   */
  taskType?: string;
}

/**
 * Optional Parameters.
 */
export interface ServiceTasksGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Expand the response
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface ServiceTasksDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Delete the resource even if it contains running tasks
   */
  deleteRunningTasks?: boolean;
}

/**
 * Optional Parameters.
 */
export interface ProjectsDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Delete the resource even if it contains running tasks
   */
  deleteRunningTasks?: boolean;
}

/**
 * An interface representing DataMigrationServiceClientOptions.
 */
export interface DataMigrationServiceClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * The DMS List SKUs operation response.
 * @extends Array<ResourceSku>
 */
export interface ResourceSkusResult extends Array<ResourceSku> {
  /**
   * The uri to fetch the next page of DMS SKUs. Call ListNext() with this to fetch the next page
   * of DMS SKUs.
   */
  nextLink?: string;
}

/**
 * @interface
 * OData page of available SKUs
 * @extends Array<AvailableServiceSku>
 */
export interface ServiceSkuList extends Array<AvailableServiceSku> {
  /**
   * URL to load the next page of service SKUs
   */
  nextLink?: string;
}

/**
 * @interface
 * OData page of service objects
 * @extends Array<DataMigrationService>
 */
export interface DataMigrationServiceList extends Array<DataMigrationService> {
  /**
   * URL to load the next page of services
   */
  nextLink?: string;
}

/**
 * @interface
 * OData page of tasks
 * @extends Array<ProjectTask>
 */
export interface TaskList extends Array<ProjectTask> {
  /**
   * URL to load the next page of tasks
   */
  nextLink?: string;
}

/**
 * @interface
 * OData page of project resources
 * @extends Array<Project>
 */
export interface ProjectList extends Array<Project> {
  /**
   * URL to load the next page of projects
   */
  nextLink?: string;
}

/**
 * @interface
 * OData page of quota objects
 * @extends Array<Quota>
 */
export interface QuotaList extends Array<Quota> {
  /**
   * URL to load the next page of quotas, or null or missing if this is the last page
   */
  nextLink?: string;
}

/**
 * @interface
 * OData page of action (operation) objects
 * @extends Array<ServiceOperation>
 */
export interface ServiceOperationList extends Array<ServiceOperation> {
  /**
   * URL to load the next page of actions
   */
  nextLink?: string;
}

/**
 * @interface
 * OData page of files
 * @extends Array<ProjectFile>
 */
export interface FileList extends Array<ProjectFile> {
  /**
   * URL to load the next page of files
   */
  nextLink?: string;
}

/**
 * Defines values for CommandState.
 * Possible values include: 'Unknown', 'Accepted', 'Running', 'Succeeded', 'Failed'
 * @readonly
 * @enum {string}
 */
export type CommandState = 'Unknown' | 'Accepted' | 'Running' | 'Succeeded' | 'Failed';

/**
 * Defines values for SsisMigrationStage.
 * Possible values include: 'None', 'Initialize', 'InProgress', 'Completed'
 * @readonly
 * @enum {string}
 */
export type SsisMigrationStage = 'None' | 'Initialize' | 'InProgress' | 'Completed';

/**
 * Defines values for MigrationState.
 * Possible values include: 'None', 'InProgress', 'Failed', 'Warning', 'Completed', 'Skipped',
 * 'Stopped'
 * @readonly
 * @enum {string}
 */
export type MigrationState = 'None' | 'InProgress' | 'Failed' | 'Warning' | 'Completed' | 'Skipped' | 'Stopped';

/**
 * Defines values for MigrationStatus.
 * Possible values include: 'Default', 'Connecting', 'SourceAndTargetSelected', 'SelectLogins',
 * 'Configured', 'Running', 'Error', 'Stopped', 'Completed', 'CompletedWithWarnings'
 * @readonly
 * @enum {string}
 */
export type MigrationStatus = 'Default' | 'Connecting' | 'SourceAndTargetSelected' | 'SelectLogins' | 'Configured' | 'Running' | 'Error' | 'Stopped' | 'Completed' | 'CompletedWithWarnings';

/**
 * Defines values for SsisMigrationOverwriteOption.
 * Possible values include: 'Ignore', 'Overwrite'
 * @readonly
 * @enum {string}
 */
export type SsisMigrationOverwriteOption = 'Ignore' | 'Overwrite';

/**
 * Defines values for SsisStoreType.
 * Possible values include: 'SsisCatalog'
 * @readonly
 * @enum {string}
 */
export type SsisStoreType = 'SsisCatalog';

/**
 * Defines values for SqlSourcePlatform.
 * Possible values include: 'SqlOnPrem'
 * @readonly
 * @enum {string}
 */
export type SqlSourcePlatform = 'SqlOnPrem';

/**
 * Defines values for AuthenticationType.
 * Possible values include: 'None', 'WindowsAuthentication', 'SqlAuthentication',
 * 'ActiveDirectoryIntegrated', 'ActiveDirectoryPassword'
 * @readonly
 * @enum {string}
 */
export type AuthenticationType = 'None' | 'WindowsAuthentication' | 'SqlAuthentication' | 'ActiveDirectoryIntegrated' | 'ActiveDirectoryPassword';

/**
 * Defines values for MongoDbErrorType.
 * Possible values include: 'Error', 'ValidationError', 'Warning'
 * @readonly
 * @enum {string}
 */
export type MongoDbErrorType = 'Error' | 'ValidationError' | 'Warning';

/**
 * Defines values for MongoDbMigrationState.
 * Possible values include: 'NotStarted', 'ValidatingInput', 'Initializing', 'Restarting',
 * 'Copying', 'InitialReplay', 'Replaying', 'Finalizing', 'Complete', 'Canceled', 'Failed'
 * @readonly
 * @enum {string}
 */
export type MongoDbMigrationState = 'NotStarted' | 'ValidatingInput' | 'Initializing' | 'Restarting' | 'Copying' | 'InitialReplay' | 'Replaying' | 'Finalizing' | 'Complete' | 'Canceled' | 'Failed';

/**
 * Defines values for MongoDbShardKeyOrder.
 * Possible values include: 'Forward', 'Reverse', 'Hashed'
 * @readonly
 * @enum {string}
 */
export type MongoDbShardKeyOrder = 'Forward' | 'Reverse' | 'Hashed';

/**
 * Defines values for MongoDbReplication.
 * Possible values include: 'Disabled', 'OneTime', 'Continuous'
 * @readonly
 * @enum {string}
 */
export type MongoDbReplication = 'Disabled' | 'OneTime' | 'Continuous';

/**
 * Defines values for BackupType.
 * Possible values include: 'Database', 'TransactionLog', 'File', 'DifferentialDatabase',
 * 'DifferentialFile', 'Partial', 'DifferentialPartial'
 * @readonly
 * @enum {string}
 */
export type BackupType = 'Database' | 'TransactionLog' | 'File' | 'DifferentialDatabase' | 'DifferentialFile' | 'Partial' | 'DifferentialPartial';

/**
 * Defines values for BackupMode.
 * Possible values include: 'CreateBackup', 'ExistingBackup'
 * @readonly
 * @enum {string}
 */
export type BackupMode = 'CreateBackup' | 'ExistingBackup';

/**
 * Defines values for SyncTableMigrationState.
 * Possible values include: 'BEFORE_LOAD', 'FULL_LOAD', 'COMPLETED', 'CANCELED', 'ERROR', 'FAILED'
 * @readonly
 * @enum {string}
 */
export type SyncTableMigrationState = 'BEFORE_LOAD' | 'FULL_LOAD' | 'COMPLETED' | 'CANCELED' | 'ERROR' | 'FAILED';

/**
 * Defines values for SyncDatabaseMigrationReportingState.
 * Possible values include: 'UNDEFINED', 'CONFIGURING', 'INITIALIAZING', 'STARTING', 'RUNNING',
 * 'READY_TO_COMPLETE', 'COMPLETING', 'COMPLETE', 'CANCELLING', 'CANCELLED', 'FAILED'
 * @readonly
 * @enum {string}
 */
export type SyncDatabaseMigrationReportingState = 'UNDEFINED' | 'CONFIGURING' | 'INITIALIAZING' | 'STARTING' | 'RUNNING' | 'READY_TO_COMPLETE' | 'COMPLETING' | 'COMPLETE' | 'CANCELLING' | 'CANCELLED' | 'FAILED';

/**
 * Defines values for ValidationStatus.
 * Possible values include: 'Default', 'NotStarted', 'Initialized', 'InProgress', 'Completed',
 * 'CompletedWithIssues', 'Stopped', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ValidationStatus = 'Default' | 'NotStarted' | 'Initialized' | 'InProgress' | 'Completed' | 'CompletedWithIssues' | 'Stopped' | 'Failed';

/**
 * Defines values for Severity.
 * Possible values include: 'Message', 'Warning', 'Error'
 * @readonly
 * @enum {string}
 */
export type Severity = 'Message' | 'Warning' | 'Error';

/**
 * Defines values for UpdateActionType.
 * Possible values include: 'DeletedOnTarget', 'ChangedOnTarget', 'AddedOnTarget'
 * @readonly
 * @enum {string}
 */
export type UpdateActionType = 'DeletedOnTarget' | 'ChangedOnTarget' | 'AddedOnTarget';

/**
 * Defines values for ObjectType.
 * Possible values include: 'StoredProcedures', 'Table', 'User', 'View', 'Function'
 * @readonly
 * @enum {string}
 */
export type ObjectType = 'StoredProcedures' | 'Table' | 'User' | 'View' | 'Function';

/**
 * Defines values for DatabaseMigrationStage.
 * Possible values include: 'None', 'Initialize', 'Backup', 'FileCopy', 'Restore', 'Completed'
 * @readonly
 * @enum {string}
 */
export type DatabaseMigrationStage = 'None' | 'Initialize' | 'Backup' | 'FileCopy' | 'Restore' | 'Completed';

/**
 * Defines values for BackupFileStatus.
 * Possible values include: 'Arrived', 'Queued', 'Uploading', 'Uploaded', 'Restoring', 'Restored',
 * 'Cancelled'
 * @readonly
 * @enum {string}
 */
export type BackupFileStatus = 'Arrived' | 'Queued' | 'Uploading' | 'Uploaded' | 'Restoring' | 'Restored' | 'Cancelled';

/**
 * Defines values for DatabaseMigrationState.
 * Possible values include: 'UNDEFINED', 'INITIAL', 'FULL_BACKUP_UPLOAD_START',
 * 'LOG_SHIPPING_START', 'UPLOAD_LOG_FILES_START', 'CUTOVER_START', 'POST_CUTOVER_COMPLETE',
 * 'COMPLETED', 'CANCELLED', 'FAILED'
 * @readonly
 * @enum {string}
 */
export type DatabaseMigrationState = 'UNDEFINED' | 'INITIAL' | 'FULL_BACKUP_UPLOAD_START' | 'LOG_SHIPPING_START' | 'UPLOAD_LOG_FILES_START' | 'CUTOVER_START' | 'POST_CUTOVER_COMPLETE' | 'COMPLETED' | 'CANCELLED' | 'FAILED';

/**
 * Defines values for LoginMigrationStage.
 * Possible values include: 'None', 'Initialize', 'LoginMigration', 'EstablishUserMapping',
 * 'AssignRoleMembership', 'AssignRoleOwnership', 'EstablishServerPermissions',
 * 'EstablishObjectPermissions', 'Completed'
 * @readonly
 * @enum {string}
 */
export type LoginMigrationStage = 'None' | 'Initialize' | 'LoginMigration' | 'EstablishUserMapping' | 'AssignRoleMembership' | 'AssignRoleOwnership' | 'EstablishServerPermissions' | 'EstablishObjectPermissions' | 'Completed';

/**
 * Defines values for LoginType.
 * Possible values include: 'WindowsUser', 'WindowsGroup', 'SqlLogin', 'Certificate',
 * 'AsymmetricKey', 'ExternalUser', 'ExternalGroup'
 * @readonly
 * @enum {string}
 */
export type LoginType = 'WindowsUser' | 'WindowsGroup' | 'SqlLogin' | 'Certificate' | 'AsymmetricKey' | 'ExternalUser' | 'ExternalGroup';

/**
 * Defines values for DatabaseState.
 * Possible values include: 'Online', 'Restoring', 'Recovering', 'RecoveryPending', 'Suspect',
 * 'Emergency', 'Offline', 'Copying', 'OfflineSecondary'
 * @readonly
 * @enum {string}
 */
export type DatabaseState = 'Online' | 'Restoring' | 'Recovering' | 'RecoveryPending' | 'Suspect' | 'Emergency' | 'Offline' | 'Copying' | 'OfflineSecondary';

/**
 * Defines values for DatabaseCompatLevel.
 * Possible values include: 'CompatLevel80', 'CompatLevel90', 'CompatLevel100', 'CompatLevel110',
 * 'CompatLevel120', 'CompatLevel130', 'CompatLevel140'
 * @readonly
 * @enum {string}
 */
export type DatabaseCompatLevel = 'CompatLevel80' | 'CompatLevel90' | 'CompatLevel100' | 'CompatLevel110' | 'CompatLevel120' | 'CompatLevel130' | 'CompatLevel140';

/**
 * Defines values for DatabaseFileType.
 * Possible values include: 'Rows', 'Log', 'Filestream', 'NotSupported', 'Fulltext'
 * @readonly
 * @enum {string}
 */
export type DatabaseFileType = 'Rows' | 'Log' | 'Filestream' | 'NotSupported' | 'Fulltext';

/**
 * Defines values for ServerLevelPermissionsGroup.
 * Possible values include: 'Default', 'MigrationFromSqlServerToAzureDB',
 * 'MigrationFromSqlServerToAzureMI', 'MigrationFromMySQLToAzureDBForMySQL'
 * @readonly
 * @enum {string}
 */
export type ServerLevelPermissionsGroup = 'Default' | 'MigrationFromSqlServerToAzureDB' | 'MigrationFromSqlServerToAzureMI' | 'MigrationFromMySQLToAzureDBForMySQL';

/**
 * Defines values for MongoDbClusterType.
 * Possible values include: 'BlobContainer', 'CosmosDb', 'MongoDb'
 * @readonly
 * @enum {string}
 */
export type MongoDbClusterType = 'BlobContainer' | 'CosmosDb' | 'MongoDb';

/**
 * Defines values for TaskState.
 * Possible values include: 'Unknown', 'Queued', 'Running', 'Canceled', 'Succeeded', 'Failed',
 * 'FailedInputValidation', 'Faulted'
 * @readonly
 * @enum {string}
 */
export type TaskState = 'Unknown' | 'Queued' | 'Running' | 'Canceled' | 'Succeeded' | 'Failed' | 'FailedInputValidation' | 'Faulted';

/**
 * Defines values for ServiceProvisioningState.
 * Possible values include: 'Accepted', 'Deleting', 'Deploying', 'Stopped', 'Stopping', 'Starting',
 * 'FailedToStart', 'FailedToStop', 'Succeeded', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ServiceProvisioningState = 'Accepted' | 'Deleting' | 'Deploying' | 'Stopped' | 'Stopping' | 'Starting' | 'FailedToStart' | 'FailedToStop' | 'Succeeded' | 'Failed';

/**
 * Defines values for ProjectTargetPlatform.
 * Possible values include: 'SQLDB', 'SQLMI', 'AzureDbForMySql', 'AzureDbForPostgreSql', 'MongoDb',
 * 'Unknown'
 * @readonly
 * @enum {string}
 */
export type ProjectTargetPlatform = 'SQLDB' | 'SQLMI' | 'AzureDbForMySql' | 'AzureDbForPostgreSql' | 'MongoDb' | 'Unknown';

/**
 * Defines values for ProjectSourcePlatform.
 * Possible values include: 'SQL', 'MySQL', 'PostgreSql', 'MongoDb', 'Unknown'
 * @readonly
 * @enum {string}
 */
export type ProjectSourcePlatform = 'SQL' | 'MySQL' | 'PostgreSql' | 'MongoDb' | 'Unknown';

/**
 * Defines values for ProjectProvisioningState.
 * Possible values include: 'Deleting', 'Succeeded'
 * @readonly
 * @enum {string}
 */
export type ProjectProvisioningState = 'Deleting' | 'Succeeded';

/**
 * Defines values for NameCheckFailureReason.
 * Possible values include: 'AlreadyExists', 'Invalid'
 * @readonly
 * @enum {string}
 */
export type NameCheckFailureReason = 'AlreadyExists' | 'Invalid';

/**
 * Defines values for ServiceScalability.
 * Possible values include: 'none', 'manual', 'automatic'
 * @readonly
 * @enum {string}
 */
export type ServiceScalability = 'none' | 'manual' | 'automatic';

/**
 * Defines values for ResourceSkuRestrictionsType.
 * Possible values include: 'location'
 * @readonly
 * @enum {string}
 */
export type ResourceSkuRestrictionsType = 'location';

/**
 * Defines values for ResourceSkuRestrictionsReasonCode.
 * Possible values include: 'QuotaId', 'NotAvailableForSubscription'
 * @readonly
 * @enum {string}
 */
export type ResourceSkuRestrictionsReasonCode = 'QuotaId' | 'NotAvailableForSubscription';

/**
 * Defines values for ResourceSkuCapacityScaleType.
 * Possible values include: 'Automatic', 'Manual', 'None'
 * @readonly
 * @enum {string}
 */
export type ResourceSkuCapacityScaleType = 'Automatic' | 'Manual' | 'None';

/**
 * Defines values for MySqlTargetPlatformType.
 * Possible values include: 'SqlServer', 'AzureDbForMySQL'
 * @readonly
 * @enum {string}
 */
export type MySqlTargetPlatformType = 'SqlServer' | 'AzureDbForMySQL';

/**
 * Defines values for SchemaMigrationOption.
 * Possible values include: 'None', 'ExtractFromSource', 'UseStorageFile'
 * @readonly
 * @enum {string}
 */
export type SchemaMigrationOption = 'None' | 'ExtractFromSource' | 'UseStorageFile';

/**
 * Defines values for SchemaMigrationStage.
 * Possible values include: 'NotStarted', 'ValidatingInputs', 'CollectingObjects',
 * 'DownloadingScript', 'GeneratingScript', 'UploadingScript', 'DeployingSchema', 'Completed',
 * 'CompletedWithWarnings', 'Failed'
 * @readonly
 * @enum {string}
 */
export type SchemaMigrationStage = 'NotStarted' | 'ValidatingInputs' | 'CollectingObjects' | 'DownloadingScript' | 'GeneratingScript' | 'UploadingScript' | 'DeployingSchema' | 'Completed' | 'CompletedWithWarnings' | 'Failed';

/**
 * Defines values for DataMigrationResultCode.
 * Possible values include: 'Initial', 'Completed', 'ObjectNotExistsInSource',
 * 'ObjectNotExistsInTarget', 'TargetObjectIsInaccessible', 'FatalError'
 * @readonly
 * @enum {string}
 */
export type DataMigrationResultCode = 'Initial' | 'Completed' | 'ObjectNotExistsInSource' | 'ObjectNotExistsInTarget' | 'TargetObjectIsInaccessible' | 'FatalError';

/**
 * Defines values for ErrorType.
 * Possible values include: 'Default', 'Warning', 'Error'
 * @readonly
 * @enum {string}
 */
export type ErrorType = 'Default' | 'Warning' | 'Error';

/**
 * Defines values for ResultType.
 * Possible values include: 'Migration', 'Database', 'Collection'
 * @readonly
 * @enum {string}
 */
export type ResultType = 'Migration' | 'Database' | 'Collection';

/**
 * Contains response data for the listSkus operation.
 */
export type ResourceSkusListSkusResponse = ResourceSkusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceSkusResult;
    };
};

/**
 * Contains response data for the listSkusNext operation.
 */
export type ResourceSkusListSkusNextResponse = ResourceSkusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ResourceSkusResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServicesCreateOrUpdateResponse = DataMigrationService & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationService;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServicesGetResponse = DataMigrationService & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationService;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ServicesUpdateResponse = DataMigrationService & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationService;
    };
};

/**
 * Contains response data for the checkStatus operation.
 */
export type ServicesCheckStatusResponse = DataMigrationServiceStatusResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationServiceStatusResponse;
    };
};

/**
 * Contains response data for the listSkus operation.
 */
export type ServicesListSkusResponse = ServiceSkuList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceSkuList;
    };
};

/**
 * Contains response data for the checkChildrenNameAvailability operation.
 */
export type ServicesCheckChildrenNameAvailabilityResponse = NameAvailabilityResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NameAvailabilityResponse;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ServicesListByResourceGroupResponse = DataMigrationServiceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationServiceList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ServicesListResponse = DataMigrationServiceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationServiceList;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type ServicesCheckNameAvailabilityResponse = NameAvailabilityResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NameAvailabilityResponse;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ServicesBeginCreateOrUpdateResponse = DataMigrationService & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationService;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type ServicesBeginUpdateResponse = DataMigrationService & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationService;
    };
};

/**
 * Contains response data for the listSkusNext operation.
 */
export type ServicesListSkusNextResponse = ServiceSkuList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceSkuList;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type ServicesListByResourceGroupNextResponse = DataMigrationServiceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationServiceList;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ServicesListNextResponse = DataMigrationServiceList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataMigrationServiceList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TasksListResponse = TaskList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskList;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type TasksCreateOrUpdateResponse = ProjectTask & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectTask;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TasksGetResponse = ProjectTask & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectTask;
    };
};

/**
 * Contains response data for the update operation.
 */
export type TasksUpdateResponse = ProjectTask & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectTask;
    };
};

/**
 * Contains response data for the cancel operation.
 */
export type TasksCancelResponse = ProjectTask & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectTask;
    };
};

/**
 * Contains response data for the command operation.
 */
export type TasksCommandResponse = CommandPropertiesUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CommandPropertiesUnion;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type TasksListNextResponse = TaskList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ServiceTasksListResponse = TaskList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskList;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ServiceTasksCreateOrUpdateResponse = ProjectTask & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectTask;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ServiceTasksGetResponse = ProjectTask & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectTask;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ServiceTasksUpdateResponse = ProjectTask & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectTask;
    };
};

/**
 * Contains response data for the cancel operation.
 */
export type ServiceTasksCancelResponse = ProjectTask & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectTask;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ServiceTasksListNextResponse = TaskList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ProjectsListResponse = ProjectList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectList;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ProjectsCreateOrUpdateResponse = Project & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Project;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ProjectsGetResponse = Project & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Project;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ProjectsUpdateResponse = Project & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Project;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ProjectsListNextResponse = ProjectList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type UsagesListResponse = QuotaList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QuotaList;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type UsagesListNextResponse = QuotaList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QuotaList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = ServiceOperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceOperationList;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = ServiceOperationList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ServiceOperationList;
    };
};

/**
 * Contains response data for the list operation.
 */
export type FilesListResponse = FileList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FileList;
    };
};

/**
 * Contains response data for the get operation.
 */
export type FilesGetResponse = ProjectFile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectFile;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type FilesCreateOrUpdateResponse = ProjectFile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectFile;
    };
};

/**
 * Contains response data for the update operation.
 */
export type FilesUpdateResponse = ProjectFile & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProjectFile;
    };
};

/**
 * Contains response data for the read operation.
 */
export type FilesReadResponse = FileStorageInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FileStorageInfo;
    };
};

/**
 * Contains response data for the readWrite operation.
 */
export type FilesReadWriteResponse = FileStorageInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FileStorageInfo;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type FilesListNextResponse = FileList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FileList;
    };
};
