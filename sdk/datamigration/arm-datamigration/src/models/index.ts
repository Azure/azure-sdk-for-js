/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type DatabaseMigrationPropertiesUnion =
  | DatabaseMigrationProperties
  | DatabaseMigrationPropertiesSqlMi
  | DatabaseMigrationPropertiesSqlVm;
export type ProjectTaskPropertiesUnion =
  | ProjectTaskProperties
  | MigrateSchemaSqlServerSqlDbTaskProperties
  | CheckOCIDriverTaskProperties
  | UploadOCIDriverTaskProperties
  | InstallOCIDriverTaskProperties
  | ConnectToMongoDbTaskProperties
  | ConnectToSourceSqlServerTaskProperties
  | ConnectToSourceSqlServerSyncTaskProperties
  | ConnectToSourcePostgreSqlSyncTaskProperties
  | ConnectToSourceMySqlTaskProperties
  | ConnectToSourceOracleSyncTaskProperties
  | ConnectToTargetSqlDbTaskProperties
  | ConnectToTargetSqlDbSyncTaskProperties
  | ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties
  | ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties
  | GetUserTablesSqlTaskProperties
  | GetUserTablesSqlSyncTaskProperties
  | GetUserTablesOracleTaskProperties
  | GetUserTablesPostgreSqlTaskProperties
  | GetUserTablesMySqlTaskProperties
  | ConnectToTargetSqlMITaskProperties
  | ConnectToTargetSqlMISyncTaskProperties
  | ConnectToTargetAzureDbForMySqlTaskProperties
  | MigrateMongoDbTaskProperties
  | MigrateSqlServerSqlMITaskProperties
  | MigrateSqlServerSqlMISyncTaskProperties
  | MigrateSqlServerSqlDbTaskProperties
  | MigrateSqlServerSqlDbSyncTaskProperties
  | MigrateMySqlAzureDbForMySqlSyncTaskProperties
  | MigrateMySqlAzureDbForMySqlOfflineTaskProperties
  | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties
  | MigrateOracleAzureDbForPostgreSqlSyncTaskProperties
  | ValidateMigrationInputSqlServerSqlDbSyncTaskProperties
  | ValidateMigrationInputSqlServerSqlMITaskProperties
  | ValidateMigrationInputSqlServerSqlMISyncTaskProperties
  | ValidateMongoDbTaskProperties
  | ValidateOracleAzureDbForPostgreSqlSyncTaskProperties
  | GetTdeCertificatesSqlTaskProperties
  | MigrateSsisTaskProperties;
export type CommandPropertiesUnion =
  | CommandProperties
  | MigrateSyncCompleteCommandProperties
  | MigrateMISyncCompleteCommandProperties
  | MongoDbCancelCommand
  | MongoDbFinishCommand
  | MongoDbRestartCommand;
export type ConnectionInfoUnion =
  | ConnectionInfo
  | MongoDbConnectionInfo
  | SqlConnectionInfo
  | MySqlConnectionInfo
  | OracleConnectionInfo
  | PostgreSqlConnectionInfo
  | MiSqlConnectionInfo;
export type ConnectToSourceSqlServerTaskOutputUnion =
  | ConnectToSourceSqlServerTaskOutput
  | ConnectToSourceSqlServerTaskOutputTaskLevel
  | ConnectToSourceSqlServerTaskOutputDatabaseLevel
  | ConnectToSourceSqlServerTaskOutputLoginLevel
  | ConnectToSourceSqlServerTaskOutputAgentJobLevel;
export type MigrateSchemaSqlServerSqlDbTaskOutputUnion =
  | MigrateSchemaSqlServerSqlDbTaskOutput
  | MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel
  | MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel
  | MigrateSchemaSqlServerSqlDbTaskOutputError
  | MigrateSchemaSqlTaskOutputError;
export type MigrateMySqlAzureDbForMySqlSyncTaskOutputUnion =
  | MigrateMySqlAzureDbForMySqlSyncTaskOutput
  | MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel
  | MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel
  | MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel
  | MigrateMySqlAzureDbForMySqlSyncTaskOutputError
  | MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError;
export type MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputUnion =
  | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput
  | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel
  | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel
  | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel
  | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError
  | MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError;
export type MigrateSqlServerSqlDbSyncTaskOutputUnion =
  | MigrateSqlServerSqlDbSyncTaskOutput
  | MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel
  | MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel
  | MigrateSqlServerSqlDbSyncTaskOutputTableLevel
  | MigrateSqlServerSqlDbSyncTaskOutputError
  | MigrateSqlServerSqlDbSyncTaskOutputDatabaseError;
export type MigrateSqlServerSqlDbTaskOutputUnion =
  | MigrateSqlServerSqlDbTaskOutput
  | MigrateSqlServerSqlDbTaskOutputMigrationLevel
  | MigrateSqlServerSqlDbTaskOutputDatabaseLevel
  | MigrateSqlServerSqlDbTaskOutputTableLevel
  | MigrateSqlServerSqlDbTaskOutputError
  | MigrateSqlServerSqlDbTaskOutputValidationResult
  | MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult;
export type MigrateSqlServerSqlMISyncTaskOutputUnion =
  | MigrateSqlServerSqlMISyncTaskOutput
  | MigrateSqlServerSqlMISyncTaskOutputMigrationLevel
  | MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel
  | MigrateSqlServerSqlMISyncTaskOutputError;
export type MigrateSqlServerSqlMITaskOutputUnion =
  | MigrateSqlServerSqlMITaskOutput
  | MigrateSqlServerSqlMITaskOutputMigrationLevel
  | MigrateSqlServerSqlMITaskOutputDatabaseLevel
  | MigrateSqlServerSqlMITaskOutputAgentJobLevel
  | MigrateSqlServerSqlMITaskOutputLoginLevel
  | MigrateSqlServerSqlMITaskOutputError;
export type MigrateSsisTaskOutputUnion =
  | MigrateSsisTaskOutput
  | MigrateSsisTaskOutputMigrationLevel
  | MigrateSsisTaskOutputProjectLevel;
export type MongoDbProgressUnion =
  | MongoDbProgress
  | MongoDbCollectionProgress
  | MongoDbDatabaseProgress
  | MongoDbMigrationProgress;
export type MigrateOracleAzureDbPostgreSqlSyncTaskOutputUnion =
  | MigrateOracleAzureDbPostgreSqlSyncTaskOutput
  | MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel
  | MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel
  | MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel
  | MigrateOracleAzureDbPostgreSqlSyncTaskOutputError
  | MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError;
export type MigrateMySqlAzureDbForMySqlOfflineTaskOutputUnion =
  | MigrateMySqlAzureDbForMySqlOfflineTaskOutput
  | MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevel
  | MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevel
  | MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevel
  | MigrateMySqlAzureDbForMySqlOfflineTaskOutputError;

export interface SystemData {
  createdBy?: string;
  createdByType?: CreatedByType;
  createdAt?: Date;
  lastModifiedBy?: string;
  lastModifiedByType?: CreatedByType;
  lastModifiedAt?: Date;
}

/** Detailed status of current migration. */
export interface MigrationStatusDetails {
  /**
   * Current State of Migration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationState?: string;
  /**
   * Details of full backup set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullBackupSetInfo?: SqlBackupSetInfo;
  /**
   * Last applied backup set information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastRestoredBackupSetInfo?: SqlBackupSetInfo;
  /**
   * Backup sets that are currently active.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly activeBackupSets?: SqlBackupSetInfo[];
  /**
   * Files that are not valid backup files.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly invalidFiles?: string[];
  /**
   * Name of blob container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly blobContainerName?: string;
  /**
   * Whether full backup has been applied to the target database or not.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isFullBackupRestored?: boolean;
  /**
   * Restore blocking reason, if any
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly restoreBlockingReason?: string;
  /**
   * Complete restore error message, if any
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly completeRestoreErrorMessage?: string;
  /**
   * File upload blocking errors, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fileUploadBlockingErrors?: string[];
  /**
   * File name that is currently being restored.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currentRestoringFilename?: string;
  /**
   * Last restored file name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastRestoredFilename?: string;
  /**
   * Total pending log backups.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly pendingLogBackupsCount?: number;
}

/** Information of backup set */
export interface SqlBackupSetInfo {
  /**
   * Backup set id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupSetId?: string;
  /**
   * First LSN of the backup set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly firstLSN?: string;
  /**
   * Last LSN of the backup set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastLSN?: string;
  /**
   * Backup type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupType?: string;
  /**
   * List of files in the backup set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly listOfBackupFiles?: SqlBackupFileInfo[];
  /**
   * Backup start date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupStartDate?: Date;
  /**
   * Backup end time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupFinishDate?: Date;
  /**
   * Whether this backup set has been restored or not.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isBackupRestored?: boolean;
  /**
   * Has Backup Checksums
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasBackupChecksums?: boolean;
  /**
   * Media family count
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly familyCount?: number;
  /**
   * The reasons why the backup set is ignored
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ignoreReasons?: string[];
}

/** Information of backup file */
export interface SqlBackupFileInfo {
  /**
   * File name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fileName?: string;
  /**
   * Status of the file. (Initial, Uploading, Uploaded, Restoring, Restored or Skipped)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: string;
  /**
   * File size in bytes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalSize?: number;
  /**
   * Bytes read
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataRead?: number;
  /**
   * Bytes written
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataWritten?: number;
  /**
   * Copy throughput in KBps
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly copyThroughput?: number;
  /**
   * Copy Duration in seconds
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly copyDuration?: number;
  /**
   * Media family sequence number
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly familySequenceNumber?: number;
}

/** Backup Configuration */
export interface BackupConfiguration {
  /** Source location of backups. */
  sourceLocation?: SourceLocation;
  /** Target location for copying backups. */
  targetLocation?: TargetLocation;
}

/** Source Location details of backups. */
export interface SourceLocation {
  /** Source File share. */
  fileShare?: SqlFileShare;
  /** Source Azure Blob. */
  azureBlob?: AzureBlob;
}

/** File share */
export interface SqlFileShare {
  /** Location as SMB share or local drive where backups are placed. */
  path?: string;
  /** Username to access the file share location for backups. */
  username?: string;
  /** Password for username to access file share location. */
  password?: string;
}

/** Azure Blob Details */
export interface AzureBlob {
  /** Resource Id of the storage account where backups are stored. */
  storageAccountResourceId?: string;
  /** Storage Account Key. */
  accountKey?: string;
  /** Blob container name where backups are stored. */
  blobContainerName?: string;
}

/** Target Location details for optional copy of backups */
export interface TargetLocation {
  /** Resource Id of the storage account copying backups. */
  storageAccountResourceId?: string;
  /** Storage Account Key. */
  accountKey?: string;
}

/** Offline configuration */
export interface OfflineConfiguration {
  /** Offline migration */
  offline?: boolean;
  /** Last backup name for offline migration. This is optional for migrations from file share. If it is not provided, then the service will determine the last backup file name based on latest backup files present in file share. */
  lastBackupName?: string;
}

/** Database Migration Resource properties. */
export interface DatabaseMigrationProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "SqlMi" | "SqlVm";
  /** Scope of the database. */
  scope?: string;
  /**
   * Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and migration has started.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * Migration status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationStatus?: string;
  /**
   * Database migration start time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Database migration end time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /** Source SQL Server connection details. */
  sourceSqlConnection?: SqlConnectionInformation;
  /** Name of the source database. */
  sourceDatabaseName?: string;
  /** Resource Id of the Migration Service. */
  migrationService?: string;
  /** ID tracking current migration operation. */
  migrationOperationId?: string;
  /**
   * Error details in case of migration failure.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationFailureError?: ErrorInfo;
}

/** Source SQL Connection */
export interface SqlConnectionInformation {
  /** Data source. */
  dataSource?: string;
  /** Authentication type. */
  authentication?: string;
  /** User name to connect to source SQL. */
  userName?: string;
  /** Password to connect to source SQL. */
  password?: string;
  /** Whether to encrypt connection or not. */
  encryptConnection?: boolean;
  /** Whether to trust server certificate or not. */
  trustServerCertificate?: boolean;
}

/** Error details */
export interface ErrorInfo {
  /**
   * Error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

export interface ProxyResource {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly id?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly type?: string;
}

/** Migration Operation Input */
export interface MigrationOperationInput {
  /** ID tracking migration operation. */
  migrationOperationId?: string;
}

/** Result of the request to list SQL operations. */
export interface OperationListResult {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly value?: OperationsDefinition[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

export interface OperationsDefinition {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
  /** Indicates whether the operation is a data action */
  isDataAction?: boolean;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly display?: OperationsDisplayDefinition;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly origin?: OperationOrigin;
  /**
   * Dictionary of <AnyObject>
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly properties?: { [propertyName: string]: Record<string, unknown> };
}

export interface OperationsDisplayDefinition {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly provider?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly resource?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly operation?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly description?: string;
}

export interface TrackedResource {
  location?: string;
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly id?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly name?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly type?: string;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly systemData?: SystemData;
}

/** An update to a SQL Migration Service. */
export interface SqlMigrationServiceUpdate {
  /** Dictionary of <string> */
  tags?: { [propertyName: string]: string };
}

/** A list of SQL Migration Service. */
export interface SqlMigrationListResult {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly value?: SqlMigrationService[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

/** An authentication key. */
export interface AuthenticationKeys {
  /** The first authentication key. */
  authKey1?: string;
  /** The second authentication key. */
  authKey2?: string;
}

/** An authentication key to regenerate. */
export interface RegenAuthKeys {
  /** The name of authentication key to generate. */
  keyName?: string;
  /** The first authentication key. */
  authKey1?: string;
  /** The second authentication key. */
  authKey2?: string;
}

/** Details of node to be deleted. */
export interface DeleteNode {
  /** The name of node to delete. */
  nodeName?: string;
  /** The name of integration runtime. */
  integrationRuntimeName?: string;
}

/** A list of Database Migrations. */
export interface DatabaseMigrationListResult {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly value?: DatabaseMigration[];
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly nextLink?: string;
}

/** Integration Runtime Monitoring Data. */
export interface IntegrationRuntimeMonitoringData {
  /**
   * The name of Integration Runtime.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Integration Runtime node monitoring data.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodes?: NodeMonitoringData[];
}

export interface NodeMonitoringData {
  /**
   *  Unmatched properties from the message are deserialized in this collection.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalProperties?: {
    [propertyName: string]: Record<string, unknown>;
  };
  /**
   * Name of the integration runtime node.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nodeName?: string;
  /**
   * Available memory (MB) on the integration runtime node.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly availableMemoryInMB?: number;
  /**
   * CPU percentage on the integration runtime node.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cpuUtilization?: number;
  /**
   * Maximum concurrent jobs on the integration runtime node.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly concurrentJobsLimit?: number;
  /**
   * The number of jobs currently running on the integration runtime node.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly concurrentJobsRunning?: number;
  /**
   * The maximum concurrent jobs in this integration runtime.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maxConcurrentJobs?: number;
  /**
   * Sent bytes on the integration runtime node.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sentBytes?: number;
  /**
   * Received bytes on the integration runtime node.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly receivedBytes?: number;
}

/** The DMS List SKUs operation response. */
export interface ResourceSkusResult {
  /** The list of SKUs available for the subscription. */
  value: ResourceSku[];
  /** The uri to fetch the next page of DMS SKUs. Call ListNext() with this to fetch the next page of DMS SKUs. */
  nextLink?: string;
}

/** Describes an available DMS SKU. */
export interface ResourceSku {
  /**
   * The type of resource the SKU applies to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**
   * The name of SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Specifies the tier of DMS in a scale set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: string;
  /**
   * The Size of the SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly size?: string;
  /**
   * The Family of this particular SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly family?: string;
  /**
   * The Kind of resources that are supported in this SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kind?: string;
  /**
   * Not used.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capacity?: ResourceSkuCapacity;
  /**
   * The set of locations that the SKU is available.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locations?: string[];
  /**
   * The api versions that support this SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiVersions?: string[];
  /**
   * Metadata for retrieving price info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly costs?: ResourceSkuCosts[];
  /**
   * A name value pair to describe the capability.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: ResourceSkuCapabilities[];
  /**
   * The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly restrictions?: ResourceSkuRestrictions[];
}

/** Describes scaling information of a SKU. */
export interface ResourceSkuCapacity {
  /**
   * The minimum capacity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minimum?: number;
  /**
   * The maximum capacity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maximum?: number;
  /**
   * The default capacity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly default?: number;
  /**
   * The scale type applicable to the SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scaleType?: ResourceSkuCapacityScaleType;
}

/** Describes metadata for retrieving price info. */
export interface ResourceSkuCosts {
  /**
   * Used for querying price from commerce.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly meterID?: string;
  /**
   * The multiplier is needed to extend the base metered cost.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly quantity?: number;
  /**
   * An invariant to show the extended unit.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly extendedUnit?: string;
}

/** Describes The SKU capabilities object. */
export interface ResourceSkuCapabilities {
  /**
   * An invariant to describe the feature.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * An invariant if the feature is measured by quantity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
}

/** Describes scaling information of a SKU. */
export interface ResourceSkuRestrictions {
  /**
   * The type of restrictions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: ResourceSkuRestrictionsType;
  /**
   * The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly values?: string[];
  /**
   * The reason code for restriction.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reasonCode?: ResourceSkuRestrictionsReasonCode;
}

/** Error information. */
export interface ApiError {
  /** Error information in OData format */
  error?: ODataError;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Error information in OData format. */
export interface ODataError {
  /** The machine-readable description of the error, such as 'InvalidRequest' or 'InternalServerError' */
  code?: string;
  /** The human-readable description of the error */
  message?: string;
  /** Inner errors that caused this error */
  details?: ODataError[];
}

/** An Azure SKU instance */
export interface ServiceSku {
  /** The unique name of the SKU, such as 'P3' */
  name?: string;
  /** The tier of the SKU, such as 'Basic', 'General Purpose', or 'Business Critical' */
  tier?: string;
  /** The SKU family, used when the service has multiple performance classes within a tier, such as 'A', 'D', etc. for virtual machines */
  family?: string;
  /** The size of the SKU, used when the name alone does not denote a service size or when a SKU has multiple performance classes within a family, e.g. 'A1' for virtual machines */
  size?: string;
  /** The capacity of the SKU, if it supports scaling */
  capacity?: number;
}

/** Service health status */
export interface DataMigrationServiceStatusResponse {
  /** The DMS instance agent version */
  agentVersion?: string;
  /** The machine-readable status, such as 'Initializing', 'Offline', 'Online', 'Deploying', 'Deleting', 'Stopped', 'Stopping', 'Starting', 'FailedToStart', 'FailedToStop' or 'Failed' */
  status?: string;
  /** The services virtual machine size, such as 'Standard_D2_v2' */
  vmSize?: string;
  /** The list of supported task types */
  supportedTaskTypes?: string[];
}

/** OData page of available SKUs */
export interface ServiceSkuList {
  /** List of service SKUs */
  value?: AvailableServiceSku[];
  /** URL to load the next page of service SKUs */
  nextLink?: string;
}

/** Describes the available service SKU. */
export interface AvailableServiceSku {
  /** The resource type, including the provider namespace */
  resourceType?: string;
  /** SKU name, tier, etc. */
  sku?: AvailableServiceSkuSku;
  /** A description of the scaling capacities of the SKU */
  capacity?: AvailableServiceSkuCapacity;
}

/** SKU name, tier, etc. */
export interface AvailableServiceSkuSku {
  /** The name of the SKU */
  name?: string;
  /** SKU family */
  family?: string;
  /** SKU size */
  size?: string;
  /** The tier of the SKU, such as "Basic", "General Purpose", or "Business Critical" */
  tier?: string;
}

/** A description of the scaling capacities of the SKU */
export interface AvailableServiceSkuCapacity {
  /** The minimum capacity, usually 0 or 1. */
  minimum?: number;
  /** The maximum capacity */
  maximum?: number;
  /** The default capacity */
  default?: number;
  /** The scalability approach */
  scaleType?: ServiceScalability;
}

/** OData page of tasks */
export interface TaskList {
  /** List of tasks */
  value?: ProjectTask[];
  /** URL to load the next page of tasks */
  nextLink?: string;
}

/** Base class for all types of DMS task properties. If task is not supported by current client, this object is returned. */
export interface ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType:
    | "MigrateSchemaSqlServerSqlDb"
    | "Service.Check.OCI"
    | "Service.Upload.OCI"
    | "Service.Install.OCI"
    | "Connect.MongoDb"
    | "ConnectToSource.SqlServer"
    | "ConnectToSource.SqlServer.Sync"
    | "ConnectToSource.PostgreSql.Sync"
    | "ConnectToSource.MySql"
    | "ConnectToSource.Oracle.Sync"
    | "ConnectToTarget.SqlDb"
    | "ConnectToTarget.SqlDb.Sync"
    | "ConnectToTarget.AzureDbForPostgreSql.Sync"
    | "ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync"
    | "GetUserTables.Sql"
    | "GetUserTables.AzureSqlDb.Sync"
    | "GetUserTablesOracle"
    | "GetUserTablesPostgreSql"
    | "GetUserTablesMySql"
    | "ConnectToTarget.AzureSqlDbMI"
    | "ConnectToTarget.AzureSqlDbMI.Sync.LRS"
    | "ConnectToTarget.AzureDbForMySql"
    | "Migrate.MongoDb"
    | "Migrate.SqlServer.AzureSqlDbMI"
    | "Migrate.SqlServer.AzureSqlDbMI.Sync.LRS"
    | "Migrate.SqlServer.SqlDb"
    | "Migrate.SqlServer.AzureSqlDb.Sync"
    | "Migrate.MySql.AzureDbForMySql.Sync"
    | "Migrate.MySql.AzureDbForMySql"
    | "Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2"
    | "Migrate.Oracle.AzureDbForPostgreSql.Sync"
    | "ValidateMigrationInput.SqlServer.SqlDb.Sync"
    | "ValidateMigrationInput.SqlServer.AzureSqlDbMI"
    | "ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS"
    | "Validate.MongoDb"
    | "Validate.Oracle.AzureDbPostgreSql.Sync"
    | "GetTDECertificates.Sql"
    | "Migrate.Ssis";
  /**
   * Array of errors. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: ODataError[];
  /**
   * The state of the task. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: TaskState;
  /**
   * Array of command properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly commands?: CommandPropertiesUnion[];
  /** Key value pairs of client data to attach meta data information to task */
  clientData?: { [propertyName: string]: string };
}

/** Base class for all types of DMS command properties. If command is not supported by current client, this object is returned. */
export interface CommandProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  commandType:
    | "Migrate.Sync.Complete.Database"
    | "Migrate.SqlServer.AzureDbSqlMi.Complete"
    | "cancel"
    | "finish"
    | "restart";
  /**
   * Array of errors. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: ODataError[];
  /**
   * The state of the command. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: CommandState;
}

/** ARM resource. */
export interface Resource {
  /**
   * Resource ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** A resource type and proposed name */
export interface NameAvailabilityRequest {
  /** The proposed resource name */
  name?: string;
  /** The resource type chain (e.g. virtualMachines/extensions) */
  type?: string;
}

/** Indicates whether a proposed resource name is available */
export interface NameAvailabilityResponse {
  /** If true, the name is valid and available. If false, 'reason' describes why not. */
  nameAvailable?: boolean;
  /** The reason why the name is not available, if nameAvailable is false */
  reason?: NameCheckFailureReason;
  /** The localized reason why the name is not available, if nameAvailable is false */
  message?: string;
}

/** OData page of service objects */
export interface DataMigrationServiceList {
  /** List of services */
  value?: DataMigrationService[];
  /** URL to load the next page of services */
  nextLink?: string;
}

/** OData page of project resources */
export interface ProjectList {
  /** List of projects */
  value?: Project[];
  /** URL to load the next page of projects */
  nextLink?: string;
}

/** Defines the connection properties of a server */
export interface ConnectionInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type:
    | "MongoDbConnectionInfo"
    | "SqlConnectionInfo"
    | "MySqlConnectionInfo"
    | "OracleConnectionInfo"
    | "PostgreSqlConnectionInfo"
    | "MiSqlConnectionInfo";
  /** User name */
  userName?: string;
  /** Password credential. */
  password?: string;
}

/** Project Database Details */
export interface DatabaseInfo {
  /** Name of the database */
  sourceDatabaseName: string;
}

/** OData page of quota objects */
export interface QuotaList {
  /** List of quotas */
  value?: Quota[];
  /** URL to load the next page of quotas, or null or missing if this is the last page */
  nextLink?: string;
}

/** Describes a quota for or usage details about a resource */
export interface Quota {
  /** The current value of the quota. If null or missing, the current value cannot be determined in the context of the request. */
  currentValue?: number;
  /** The resource ID of the quota object */
  id?: string;
  /** The maximum value of the quota. If null or missing, the quota has no maximum, in which case it merely tracks usage. */
  limit?: number;
  /** The name of the quota */
  name?: QuotaName;
  /** The unit for the quota, such as Count, Bytes, BytesPerSecond, etc. */
  unit?: string;
}

/** The name of the quota */
export interface QuotaName {
  /** The localized name of the quota */
  localizedValue?: string;
  /** The unlocalized name (or ID) of the quota */
  value?: string;
}

/** OData page of files */
export interface FileList {
  /** List of files */
  value?: ProjectFile[];
  /** URL to load the next page of files */
  nextLink?: string;
}

/** Base class for file properties. */
export interface ProjectFileProperties {
  /** Optional File extension. If submitted it should not have a leading period and must match the extension from filePath. */
  extension?: string;
  /** Relative path of this file resource. This property can be set when creating or updating the file resource. */
  filePath?: string;
  /**
   * Modification DateTime.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModified?: Date;
  /** File content type. This property can be modified to reflect the file content type. */
  mediaType?: string;
  /**
   * File size.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly size?: number;
}

/** File storage information. */
export interface FileStorageInfo {
  /** A URI that can be used to access the file content. */
  uri?: string;
  /** Dictionary of <string> */
  headers?: { [propertyName: string]: string };
}

/** Input for command that completes sync migration for a database. */
export interface MigrateSyncCompleteCommandInput {
  /** Name of database */
  databaseName: string;
  /** Time stamp to complete */
  commitTimeStamp?: Date;
}

/** Output for command that completes sync migration for a database. */
export interface MigrateSyncCompleteCommandOutput {
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * List of errors that happened during the command execution
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: ReportableException[];
}

/** Exception object for all custom exceptions */
export interface ReportableException {
  /** Error message */
  message?: string;
  /** Actionable steps for this exception */
  actionableMessage?: string;
  /** The path to the file where exception occurred */
  filePath?: string;
  /** The line number where exception occurred */
  lineNumber?: string;
  /** Coded numerical value that is assigned to a specific exception */
  hResult?: number;
  /** Stack trace */
  stackTrace?: string;
}

/** Input for command that completes online migration for an Azure SQL Database Managed Instance. */
export interface MigrateMISyncCompleteCommandInput {
  /** Name of managed instance database */
  sourceDatabaseName: string;
}

/** Output for command that completes online migration for an Azure SQL Database Managed Instance. */
export interface MigrateMISyncCompleteCommandOutput {
  /** List of errors that happened during the command execution */
  errors?: ReportableException[];
}

/** Azure Active Directory Application */
export interface AzureActiveDirectoryApp {
  /** Application ID of the Azure Active Directory Application */
  applicationId: string;
  /** Key used to authenticate to the Azure Active Directory Application */
  appKey: string;
  /** Tenant id of the customer */
  tenantId: string;
}

/** Information of backup set */
export interface BackupSetInfo {
  /** Id for the set of backup files */
  backupSetId?: string;
  /** First log sequence number of the backup file */
  firstLsn?: string;
  /** Last log sequence number of the backup file */
  lastLsn?: string;
  /** Last modified time of the backup file in share location */
  lastModifiedTime?: Date;
  /** Enum of the different backup types */
  backupType?: BackupType;
  /** List of files in the backup set */
  listOfBackupFiles?: BackupFileInfo[];
  /** Name of the database to which the backup set belongs */
  databaseName?: string;
  /** Date and time that the backup operation began */
  backupStartDate?: Date;
  /** Date and time that the backup operation finished */
  backupFinishedDate?: Date;
  /** Whether the backup set is restored or not */
  isBackupRestored?: boolean;
}

/** Information of the backup file */
export interface BackupFileInfo {
  /** Location of the backup file in shared folder */
  fileLocation?: string;
  /** Sequence number of the backup file in the backup set */
  familySequenceNumber?: number;
  /** Status of the backup file during migration */
  status?: BackupFileStatus;
}

/** Information of orphaned users on the SQL server database. */
export interface OrphanedUserInfo {
  /** Name of the orphaned user */
  name?: string;
  /** Parent database of the user */
  databaseName?: string;
}

/** Input for the task that validates MySQL database connection */
export interface ConnectToSourceMySqlTaskInput {
  /** Information for connecting to MySQL source */
  sourceConnectionInfo: MySqlConnectionInfo;
  /** Target Platform for the migration */
  targetPlatform?: MySqlTargetPlatformType;
  /** Permission group for validations */
  checkPermissionsGroup?: ServerLevelPermissionsGroup;
  /** Flag for whether or not the migration is offline */
  isOfflineMigration?: boolean;
}

/** Input for the task that validates connection to SQL Server and also validates source server requirements */
export interface ConnectToSourceSqlServerTaskInput {
  /** Connection information for Source SQL Server */
  sourceConnectionInfo: SqlConnectionInfo;
  /** Permission group for validations */
  checkPermissionsGroup?: ServerLevelPermissionsGroup;
  /** Flag for whether to collect databases from source server. */
  collectDatabases?: boolean;
  /** Flag for whether to collect logins from source server. */
  collectLogins?: boolean;
  /** Flag for whether to collect agent jobs from source server. */
  collectAgentJobs?: boolean;
  /** Flag for whether to collect TDE Certificate names from source server. */
  collectTdeCertificateInfo?: boolean;
  /** Flag for whether to validate SSIS catalog is reachable on the source server. */
  validateSsisCatalogOnly?: boolean;
}

/** Output for the task that validates connection to SQL Server and also validates source server requirements */
export interface ConnectToSourceSqlServerTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType:
    | "TaskLevelOutput"
    | "DatabaseLevelOutput"
    | "LoginLevelOutput"
    | "AgentJobLevelOutput";
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** Database file specific information */
export interface DatabaseFileInfo {
  /** Name of the database */
  databaseName?: string;
  /** Unique identifier for database file */
  id?: string;
  /** Logical name of the file */
  logicalName?: string;
  /** Operating-system full path of the file */
  physicalFullName?: string;
  /** Suggested full path of the file for restoring */
  restoreFullName?: string;
  /** Database file type */
  fileType?: DatabaseFileType;
  /** Size of the file in megabytes */
  sizeMB?: number;
}

/** Information about migration eligibility of a server object */
export interface MigrationEligibilityInfo {
  /**
   * Whether object is eligible for migration or not.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isEligibleForMigration?: boolean;
  /**
   * Information about eligibility failure for the server object.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationMessages?: string[];
}

/** Input for the task that validates connection to PostgreSQL and source server requirements */
export interface ConnectToSourcePostgreSqlSyncTaskInput {
  /** Connection information for source PostgreSQL server */
  sourceConnectionInfo: PostgreSqlConnectionInfo;
}

/** Output for the task that validates connection to PostgreSQL and source server requirements */
export interface ConnectToSourcePostgreSqlSyncTaskOutput {
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Version of the source server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerVersion?: string;
  /**
   * List of databases on source server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databases?: string[];
  /**
   * Source server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Validation errors associated with the task
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Input for the task that validates connection to Azure Database for MySQL and target server requirements */
export interface ConnectToTargetAzureDbForMySqlTaskInput {
  /** Connection information for source MySQL server */
  sourceConnectionInfo: MySqlConnectionInfo;
  /** Connection information for target Azure Database for MySQL server */
  targetConnectionInfo: MySqlConnectionInfo;
  /** Flag for whether or not the migration is offline */
  isOfflineMigration?: boolean;
}

/** Output for the task that validates connection to Azure Database for MySQL and target server requirements */
export interface ConnectToTargetAzureDbForMySqlTaskOutput {
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Version of the target server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverVersion?: string;
  /**
   * List of databases on target server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databases?: string[];
  /**
   * Target server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Validation errors associated with the task
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Input for the task that validates connection to SQL DB and target server requirements */
export interface ConnectToTargetSqlDbTaskInput {
  /** Connection information for target SQL DB */
  targetConnectionInfo: SqlConnectionInfo;
}

/** Output for the task that validates connection to SQL DB and target server requirements */
export interface ConnectToTargetSqlDbTaskOutput {
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Source databases as a map from database name to database id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databases?: string;
  /**
   * Version of the target server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerBrandVersion?: string;
}

/** Input for the task that validates connection to Azure SQL Database Managed Instance online scenario. */
export interface ConnectToTargetSqlMISyncTaskInput {
  /** Connection information for Azure SQL Database Managed Instance */
  targetConnectionInfo: MiSqlConnectionInfo;
  /** Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account */
  azureApp: AzureActiveDirectoryApp;
}

/** Output for the task that validates connection to Azure SQL Database Managed Instance. */
export interface ConnectToTargetSqlMISyncTaskOutput {
  /**
   * Target server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Validation errors
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Input for the task that validates connection to Azure SQL Database Managed Instance. */
export interface ConnectToTargetSqlMITaskInput {
  /** Connection information for target SQL Server */
  targetConnectionInfo: SqlConnectionInfo;
  /** Flag for whether to collect logins from target SQL MI server. */
  collectLogins?: boolean;
  /** Flag for whether to collect agent jobs from target SQL MI server. */
  collectAgentJobs?: boolean;
  /** Flag for whether to validate SSIS catalog is reachable on the target SQL MI server. */
  validateSsisCatalogOnly?: boolean;
}

/** Output for the task that validates connection to Azure SQL Database Managed Instance. */
export interface ConnectToTargetSqlMITaskOutput {
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Target server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerBrandVersion?: string;
  /**
   * List of logins on the target server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly logins?: string[];
  /**
   * List of agent jobs on the target server.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly agentJobs?: string[];
  /**
   * Validation errors
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Input for the task that validates connection to Azure SQL DB and target server requirements */
export interface ConnectToTargetSqlDbSyncTaskInput {
  /** Connection information for source SQL Server */
  sourceConnectionInfo: SqlConnectionInfo;
  /** Connection information for target SQL DB */
  targetConnectionInfo: SqlConnectionInfo;
}

/** Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements */
export interface ConnectToTargetAzureDbForPostgreSqlSyncTaskInput {
  /** Connection information for source PostgreSQL server */
  sourceConnectionInfo: PostgreSqlConnectionInfo;
  /** Connection information for target Azure Database for PostgreSQL server */
  targetConnectionInfo: PostgreSqlConnectionInfo;
}

/** Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements */
export interface ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput {
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Version of the target server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * List of databases on target server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databases?: string[];
  /**
   * Target server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Validation errors associated with the task
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Input for the task that collects user tables for the given list of databases */
export interface GetUserTablesMySqlTaskInput {
  /** Connection information for SQL Server */
  connectionInfo: MySqlConnectionInfo;
  /** List of database names to collect tables for */
  selectedDatabases: string[];
}

/** Output of the task that collects user tables for the given list of databases */
export interface GetUserTablesMySqlTaskOutput {
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Mapping from database name to list of tables
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databasesToTables?: string;
  /**
   * Validation errors
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Table properties */
export interface DatabaseTable {
  /**
   * Indicates whether table is empty or not
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasRows?: boolean;
  /**
   * Schema-qualified name of the table
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
}

/** Input for the task that gets TDE certificates in Base64 encoded format. */
export interface GetTdeCertificatesSqlTaskInput {
  /** Connection information for SQL Server */
  connectionInfo: SqlConnectionInfo;
  /** Backup file share information for file share to be used for temporarily storing files. */
  backupFileShare: FileShare;
  /** List containing certificate names and corresponding password to use for encrypting the exported certificate. */
  selectedCertificates: SelectedCertificateInput[];
}

/** File share information with Path, Username, and Password. */
export interface FileShare {
  /** User name credential to connect to the share location */
  userName?: string;
  /** Password credential used to connect to the share location. */
  password?: string;
  /** The folder path for this share. */
  path: string;
}

/** Info for certificate to be exported for TDE enabled databases. */
export interface SelectedCertificateInput {
  /** Name of certificate to be exported. */
  certificateName: string;
  /** Password to use for encrypting the exported certificate. */
  password: string;
}

/** Output of the task that gets TDE certificates in Base64 encoded format. */
export interface GetTdeCertificatesSqlTaskOutput {
  /**
   * Mapping from certificate name to base 64 encoded format.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly base64EncodedCertificates?: string;
  /**
   * Validation errors
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Input for the task that collects user tables for the given list of databases */
export interface GetUserTablesSqlSyncTaskInput {
  /** Connection information for SQL Server */
  sourceConnectionInfo: SqlConnectionInfo;
  /** Connection information for SQL DB */
  targetConnectionInfo: SqlConnectionInfo;
  /** List of source database names to collect tables for */
  selectedSourceDatabases: string[];
  /** List of target database names to collect tables for */
  selectedTargetDatabases: string[];
}

/** Output of the task that collects user tables for the given list of databases */
export interface GetUserTablesSqlSyncTaskOutput {
  /**
   * Mapping from database name to list of source tables
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databasesToSourceTables?: string;
  /**
   * Mapping from database name to list of target tables
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databasesToTargetTables?: string;
  /**
   * Mapping from database name to list of validation errors
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tableValidationErrors?: string;
  /**
   * Validation errors
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Input for the task that collects user tables for the given list of databases */
export interface GetUserTablesSqlTaskInput {
  /** Connection information for SQL Server */
  connectionInfo: SqlConnectionInfo;
  /** List of database names to collect tables for */
  selectedDatabases: string[];
}

/** Output of the task that collects user tables for the given list of databases */
export interface GetUserTablesSqlTaskOutput {
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Mapping from database name to list of tables
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databasesToTables?: string;
  /**
   * Validation errors
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Database input for migrate schema Sql Server to Azure SQL Server scenario */
export interface MigrateSchemaSqlServerSqlDbDatabaseInput {
  /** Name of source database */
  name?: string;
  /** Id of the source database */
  id?: string;
  /** Name of target database */
  targetDatabaseName?: string;
  /** Database schema migration settings */
  schemaSetting?: SchemaMigrationSetting;
}

/** Settings for migrating schema from source to target */
export interface SchemaMigrationSetting {
  /** Option on how to migrate the schema */
  schemaOption?: SchemaMigrationOption;
  /** Resource Identifier of a file resource containing the uploaded schema file */
  fileId?: string;
  /** Name of the file resource containing the uploaded schema file */
  fileName?: string;
}

/** Base class for migration task input */
export interface SqlMigrationTaskInput {
  /** Information for connecting to source */
  sourceConnectionInfo: SqlConnectionInfo;
  /** Information for connecting to target */
  targetConnectionInfo: SqlConnectionInfo;
}

/** Output for the task that migrates Schema for SQL Server databases to Azure SQL databases */
export interface MigrateSchemaSqlServerSqlDbTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType:
    | "MigrationLevelOutput"
    | "DatabaseLevelOutput"
    | "SchemaErrorOutput"
    | "ErrorOutput";
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** Input for the task that migrates MySQL databases to Azure Database for MySQL for online migrations */
export interface MigrateMySqlAzureDbForMySqlSyncTaskInput {
  /** Connection information for source MySQL */
  sourceConnectionInfo: MySqlConnectionInfo;
  /** Connection information for target Azure Database for MySQL */
  targetConnectionInfo: MySqlConnectionInfo;
  /** Databases to migrate */
  selectedDatabases: MigrateMySqlAzureDbForMySqlSyncDatabaseInput[];
}

/** Database specific information for MySQL to Azure Database for MySQL migration task inputs */
export interface MigrateMySqlAzureDbForMySqlSyncDatabaseInput {
  /** Name of the database */
  name?: string;
  /** Name of target database. Note: Target database will be truncated before starting migration. */
  targetDatabaseName?: string;
  /** Migration settings which tune the migration behavior */
  migrationSetting?: { [propertyName: string]: string };
  /** Source settings to tune source endpoint migration behavior */
  sourceSetting?: { [propertyName: string]: string };
  /** Target settings to tune target endpoint migration behavior */
  targetSetting?: { [propertyName: string]: string };
  /** Mapping of source to target tables */
  tableMap?: { [propertyName: string]: string };
}

/** Output for the task that migrates MySQL databases to Azure Database for MySQL for online migrations */
export interface MigrateMySqlAzureDbForMySqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType:
    | "MigrationLevelOutput"
    | "DatabaseLevelOutput"
    | "TableLevelOutput"
    | "ErrorOutput"
    | "DatabaseLevelErrorOutput";
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** Database migration errors for online migration */
export interface SyncMigrationDatabaseErrorEvent {
  /**
   * String value of timestamp.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timestampString?: string;
  /**
   * Event type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eventTypeString?: string;
  /**
   * Event text.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eventText?: string;
}

/** Input for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput {
  /** Databases to migrate */
  selectedDatabases: MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput[];
  /** Connection information for target Azure Database for PostgreSQL */
  targetConnectionInfo: PostgreSqlConnectionInfo;
  /** Connection information for source PostgreSQL */
  sourceConnectionInfo: PostgreSqlConnectionInfo;
  /** encrypted key for secure fields */
  encryptedKeyForSecureFields?: string;
}

/** Database specific information for PostgreSQL to Azure Database for PostgreSQL migration task inputs */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseInput {
  /** Name of the database */
  name?: string;
  /** Name of target database. Note: Target database will be truncated before starting migration. */
  targetDatabaseName?: string;
  /** Migration settings which tune the migration behavior */
  migrationSetting?: { [propertyName: string]: string };
  /** Source settings to tune source endpoint migration behavior */
  sourceSetting?: { [propertyName: string]: string };
  /** Target settings to tune target endpoint migration behavior */
  targetSetting?: { [propertyName: string]: string };
  /** Tables selected for migration */
  selectedTables?: MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput[];
}

/** Selected tables for the migration */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncDatabaseTableInput {
  /** Name of the table to migrate */
  name?: string;
}

/** Output for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType:
    | "MigrationLevelOutput"
    | "DatabaseLevelOutput"
    | "TableLevelOutput"
    | "ErrorOutput"
    | "DatabaseLevelErrorOutput";
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** Database specific information for SQL to Azure SQL DB sync migration task inputs */
export interface MigrateSqlServerSqlDbSyncDatabaseInput {
  /** Unique identifier for database */
  id?: string;
  /** Name of database */
  name?: string;
  /** Target database name */
  targetDatabaseName?: string;
  /** Schema name to be migrated */
  schemaName?: string;
  /** Mapping of source to target tables */
  tableMap?: { [propertyName: string]: string };
  /** Migration settings which tune the migration behavior */
  migrationSetting?: { [propertyName: string]: string };
  /** Source settings to tune source endpoint migration behavior */
  sourceSetting?: { [propertyName: string]: string };
  /** Target settings to tune target endpoint migration behavior */
  targetSetting?: { [propertyName: string]: string };
}

/** Types of validations to run after the migration */
export interface MigrationValidationOptions {
  /** Allows to compare the schema information between source and target. */
  enableSchemaValidation?: boolean;
  /** Allows to perform a checksum based data integrity validation between source and target for the selected database / tables . */
  enableDataIntegrityValidation?: boolean;
  /** Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target. The result will have execution statistics for executions in source and target databases for the extracted queries. */
  enableQueryAnalysisValidation?: boolean;
}

/** Output for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations */
export interface MigrateSqlServerSqlDbSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType:
    | "MigrationLevelOutput"
    | "DatabaseLevelOutput"
    | "TableLevelOutput"
    | "ErrorOutput"
    | "DatabaseLevelErrorOutput";
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** Database specific information for SQL to Azure SQL DB migration task inputs */
export interface MigrateSqlServerSqlDbDatabaseInput {
  /** Name of the database */
  name?: string;
  /** Name of target database. Note: Target database will be truncated before starting migration. */
  targetDatabaseName?: string;
  /** Whether to set database read only before migration */
  makeSourceDbReadOnly?: boolean;
  /** Mapping of source to target tables */
  tableMap?: { [propertyName: string]: string };
  /** Settings selected for DB schema migration. */
  schemaSetting?: Record<string, unknown>;
  /** id of the database */
  id?: string;
}

/** Output for the task that migrates on-prem SQL Server databases to Azure SQL Database */
export interface MigrateSqlServerSqlDbTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType:
    | "MigrationLevelOutput"
    | "DatabaseLevelOutput"
    | "TableLevelOutput"
    | "ErrorOutput"
    | "MigrationValidationOutput"
    | "MigrationDatabaseLevelValidationOutput";
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** Migration Validation Result */
export interface MigrationValidationResult {
  /**
   * Migration validation result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Migration Identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationId?: string;
  /** Validation summary results for each database */
  summaryResults?: {
    [propertyName: string]: MigrationValidationDatabaseSummaryResult;
  };
  /**
   * Current status of validation at the migration level. Status from the database validation result status will be aggregated here.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ValidationStatus;
}

/** Migration Validation Database level summary result */
export interface MigrationValidationDatabaseSummaryResult {
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Migration Identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationId?: string;
  /**
   * Name of the source database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceDatabaseName?: string;
  /**
   * Name of the target database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetDatabaseName?: string;
  /**
   * Validation start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Validation end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Current status of validation at the database level
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ValidationStatus;
}

/** Migration validation report result, contains the url for downloading the generated report. */
export interface MigrationReportResult {
  /** Migration validation result identifier */
  id?: string;
  /** The url of the report. */
  reportUrl?: string;
}

/** Basic summary of a data item migration */
export interface DataItemMigrationSummaryResult {
  /**
   * Name of the item
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Current state of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: MigrationState;
  /**
   * Status message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusMessage?: string;
  /**
   * Number of items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly itemsCount?: number;
  /**
   * Number of successfully completed items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly itemsCompletedCount?: number;
  /**
   * Wildcard string prefix to use for querying all errors of the item
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorPrefix?: string;
  /**
   * Wildcard string prefix to use for querying all sub-tem results of the item
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resultPrefix?: string;
}

/** Database level validation results */
export interface MigrationValidationDatabaseLevelResult {
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Migration Identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationId?: string;
  /**
   * Name of the source database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceDatabaseName?: string;
  /**
   * Name of the target database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetDatabaseName?: string;
  /**
   * Validation start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Validation end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Provides data integrity validation result between the source and target tables that are migrated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataIntegrityValidationResult?: DataIntegrityValidationResult;
  /**
   * Provides schema comparison result between source and target database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly schemaValidationResult?: SchemaComparisonValidationResult;
  /**
   * Results of some of the query execution result between source and target database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly queryAnalysisValidationResult?: QueryAnalysisValidationResult;
  /**
   * Current status of validation at the database level
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ValidationStatus;
}

/** Results for checksum based Data Integrity validation results */
export interface DataIntegrityValidationResult {
  /** List of failed table names of source and target pair */
  failedObjects?: { [propertyName: string]: string };
  /** List of errors that happened while performing data integrity validation */
  validationErrors?: ValidationError;
}

/** Description about the errors happen while performing migration validation */
export interface ValidationError {
  /** Error Text */
  text?: string;
  /** Severity of the error */
  severity?: Severity;
}

/** Results for schema comparison between the source and target */
export interface SchemaComparisonValidationResult {
  /** List of schema differences between the source and target databases */
  schemaDifferences?: SchemaComparisonValidationResultType;
  /** List of errors that happened while performing schema compare validation */
  validationErrors?: ValidationError;
  /** Count of source database objects */
  sourceDatabaseObjectCount?: { [propertyName: string]: number };
  /** Count of target database objects */
  targetDatabaseObjectCount?: { [propertyName: string]: number };
}

/** Description about the errors happen while performing migration validation */
export interface SchemaComparisonValidationResultType {
  /** Name of the object that has the difference */
  objectName?: string;
  /** Type of the object that has the difference. e.g (Table/View/StoredProcedure) */
  objectType?: ObjectType;
  /** Update action type with respect to target */
  updateAction?: UpdateActionType;
}

/** Results for query analysis comparison between the source and target */
export interface QueryAnalysisValidationResult {
  /** List of queries executed and it's execution results in source and target */
  queryResults?: QueryExecutionResult;
  /** Errors that are part of the execution */
  validationErrors?: ValidationError;
}

/** Describes query analysis results for execution in source and target */
export interface QueryExecutionResult {
  /** Query text retrieved from the source server */
  queryText?: string;
  /** Total no. of statements in the batch */
  statementsInBatch?: number;
  /** Query analysis result from the source */
  sourceResult?: ExecutionStatistics;
  /** Query analysis result from the target */
  targetResult?: ExecutionStatistics;
}

/** Description about the errors happen while performing migration validation */
export interface ExecutionStatistics {
  /** No. of query executions */
  executionCount?: number;
  /** CPU Time in millisecond(s) for the query execution */
  cpuTimeMs?: number;
  /** Time taken in millisecond(s) for executing the query */
  elapsedTimeMs?: number;
  /** Dictionary of sql query execution wait types and the respective statistics */
  waitStats?: { [propertyName: string]: WaitStatistics };
  /** Indicates whether the query resulted in an error */
  hasErrors?: boolean;
  /** List of sql Errors */
  sqlErrors?: string[];
}

/** Wait statistics gathered during query batch execution */
export interface WaitStatistics {
  /** Type of the Wait */
  waitType?: string;
  /** Total wait time in millisecond(s) */
  waitTimeMs?: number;
  /** Total no. of waits */
  waitCount?: number;
}

/** Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario. */
export interface SqlServerSqlMISyncTaskInput {
  /** Databases to migrate */
  selectedDatabases: MigrateSqlServerSqlMIDatabaseInput[];
  /** Backup file share information for all selected databases. */
  backupFileShare?: FileShare;
  /** Fully qualified resourceId of storage */
  storageResourceId: string;
  /** Connection information for source SQL Server */
  sourceConnectionInfo: SqlConnectionInfo;
  /** Connection information for Azure SQL Database Managed Instance */
  targetConnectionInfo: MiSqlConnectionInfo;
  /** Azure Active Directory Application the DMS instance will use to connect to the target instance of Azure SQL Database Managed Instance and the Azure Storage Account */
  azureApp: AzureActiveDirectoryApp;
}

/** Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs */
export interface MigrateSqlServerSqlMIDatabaseInput {
  /** Name of the database */
  name: string;
  /** Name of the database at destination */
  restoreDatabaseName: string;
  /** Backup file share information for backing up this database. */
  backupFileShare?: FileShare;
  /** The list of backup files to be used in case of existing backups. */
  backupFilePaths?: string[];
  /** id of the database */
  id?: string;
}

/** Output for task that migrates SQL Server databases to Azure SQL Database Managed Instance using Log Replay Service. */
export interface MigrateSqlServerSqlMISyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "MigrationLevelOutput" | "DatabaseLevelOutput" | "ErrorOutput";
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** Blob container storage information. */
export interface BlobShare {
  /** SAS URI of Azure Storage Account Container. */
  sasUri: string;
}

/** Output for task that migrates SQL Server databases to Azure SQL Database Managed Instance. */
export interface MigrateSqlServerSqlMITaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType:
    | "MigrationLevelOutput"
    | "DatabaseLevelOutput"
    | "AgentJobLevelOutput"
    | "LoginLevelOutput"
    | "ErrorOutput";
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** SSIS migration info with SSIS store type, overwrite policy. */
export interface SsisMigrationInfo {
  /** The SSIS store type of source, only SSIS catalog is supported now in DMS */
  ssisStoreType?: SsisStoreType;
  /** The overwrite option for the SSIS project migration */
  projectOverwriteOption?: SsisMigrationOverwriteOption;
  /** The overwrite option for the SSIS environment migration */
  environmentOverwriteOption?: SsisMigrationOverwriteOption;
}

/** Output for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance. */
export interface MigrateSsisTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "MigrationLevelOutput" | "SsisProjectLevelOutput";
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** Describes the input to the 'cancel' and 'restart' MongoDB migration commands */
export interface MongoDbCommandInput {
  /** The qualified name of a database or collection to act upon, or null to act upon the entire migration */
  objectName?: string;
}

/** Describes a MongoDB data source */
export interface MongoDbClusterInfo {
  /** A list of non-system databases in the cluster */
  databases: MongoDbDatabaseInfo[];
  /** Whether the cluster supports sharded collections */
  supportsSharding: boolean;
  /** The type of data source */
  type: MongoDbClusterType;
  /** The version of the data source in the form x.y.z (e.g. 3.6.7). Not used if Type is BlobContainer. */
  version: string;
}

/** Describes a MongoDB shard key */
export interface MongoDbShardKeyInfo {
  /** The fields within the shard key */
  fields: MongoDbShardKeyField[];
  /** Whether the shard key is unique */
  isUnique: boolean;
}

/** Describes a field reference within a MongoDB shard key */
export interface MongoDbShardKeyField {
  /** The name of the field */
  name: string;
  /** The field ordering */
  order: MongoDbShardKeyOrder;
}

/** Describes a database or collection within a MongoDB data source */
export interface MongoDbObjectInfo {
  /** The average document size, or -1 if the average size is unknown */
  averageDocumentSize: number;
  /** The estimated total data size, in bytes, or -1 if the size is unknown. */
  dataSize: number;
  /** The estimated total number of documents, or -1 if the document count is unknown */
  documentCount: number;
  /** The unqualified name of the database or collection */
  name: string;
  /** The qualified name of the database or collection. For a collection, this is the database-qualified name. */
  qualifiedName: string;
}

/** Base class for MongoDB migration outputs */
export interface MongoDbProgress {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "Collection" | "Database" | "Migration";
  /** The number of document bytes copied during the Copying stage */
  bytesCopied: number;
  /** The number of documents copied during the Copying stage */
  documentsCopied: number;
  /** The elapsed time in the format [ddd.]hh:mm:ss[.fffffff] (i.e. TimeSpan format) */
  elapsedTime: string;
  /** The errors and warnings that have occurred for the current object. The keys are the error codes. */
  errors: { [propertyName: string]: MongoDbError };
  /** The number of oplog events awaiting replay */
  eventsPending: number;
  /** The number of oplog events replayed so far */
  eventsReplayed: number;
  /** The timestamp of the last oplog event received, or null if no oplog event has been received yet */
  lastEventTime?: Date;
  /** The timestamp of the last oplog event replayed, or null if no oplog event has been replayed yet */
  lastReplayTime?: Date;
  /** The name of the progress object. For a collection, this is the unqualified collection name. For a database, this is the database name. For the overall migration, this is null. */
  name?: string;
  /** The qualified name of the progress object. For a collection, this is the database-qualified name. For a database, this is the database name. For the overall migration, this is null. */
  qualifiedName?: string;
  state: MongoDbMigrationState;
  /** The total number of document bytes on the source at the beginning of the Copying stage, or -1 if the total size was unknown */
  totalBytes: number;
  /** The total number of documents on the source at the beginning of the Copying stage, or -1 if the total count was unknown */
  totalDocuments: number;
}

/** Describes an error or warning that occurred during a MongoDB migration */
export interface MongoDbError {
  /** The non-localized, machine-readable code that describes the error or warning */
  code?: string;
  /** The number of times the error or warning has occurred */
  count?: number;
  /** The localized, human-readable message that describes the error or warning */
  message?: string;
  /** The type of error or warning */
  type?: MongoDbErrorType;
}

/** Describes how an individual MongoDB collection should be migrated */
export interface MongoDbCollectionSettings {
  /** Whether the migrator is allowed to drop the target collection in the course of performing a migration. The default is true. */
  canDelete?: boolean;
  /** Describes a MongoDB shard key */
  shardKey?: MongoDbShardKeySetting;
  /** The RUs that should be configured on a CosmosDB target, or null to use the default. This has no effect on non-CosmosDB targets. */
  targetRUs?: number;
}

/** Describes a MongoDB shard key */
export interface MongoDbShardKeySetting {
  /** The fields within the shard key */
  fields: MongoDbShardKeyField[];
  /** Whether the shard key is unique */
  isUnique: boolean;
}

/** Describes how an individual MongoDB database should be migrated */
export interface MongoDbDatabaseSettings {
  /** The collections on the source database to migrate to the target. The keys are the unqualified names of the collections. */
  collections: { [propertyName: string]: MongoDbCollectionSettings };
  /** The RUs that should be configured on a CosmosDB target, or null to use the default, or 0 if throughput should not be provisioned for the database. This has no effect on non-CosmosDB targets. */
  targetRUs?: number;
}

/** Describes how a MongoDB data migration should be performed */
export interface MongoDbMigrationSettings {
  /** The RU limit on a CosmosDB target that collections will be temporarily increased to (if lower) during the initial copy of a migration, from 10,000 to 1,000,000, or 0 to use the default boost (which is generally the maximum), or null to not boost the RUs. This setting has no effect on non-CosmosDB targets. */
  boostRUs?: number;
  /** The databases on the source cluster to migrate to the target. The keys are the names of the databases. */
  databases: { [propertyName: string]: MongoDbDatabaseSettings };
  /** Describes how changes will be replicated from the source to the target. The default is OneTime. */
  replication?: MongoDbReplication;
  /** Settings used to connect to the source cluster */
  source: MongoDbConnectionInfo;
  /** Settings used to connect to the target cluster */
  target: MongoDbConnectionInfo;
  /** Settings used to limit the resource usage of the migration */
  throttling?: MongoDbThrottlingSettings;
}

/** Specifies resource limits for the migration */
export interface MongoDbThrottlingSettings {
  /** The percentage of CPU time that the migrator will try to avoid using, from 0 to 100 */
  minFreeCpu?: number;
  /** The number of megabytes of RAM that the migrator will try to avoid using */
  minFreeMemoryMb?: number;
  /** The maximum number of work items (e.g. collection copies) that will be processed in parallel */
  maxParallelism?: number;
}

/** Input for the task that validates Oracle database connection */
export interface ConnectToSourceOracleSyncTaskInput {
  /** Information for connecting to Oracle source */
  sourceConnectionInfo: OracleConnectionInfo;
}

/** Output for the task that validates Oracle database connection */
export interface ConnectToSourceOracleSyncTaskOutput {
  /**
   * Version of the source server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerVersion?: string;
  /**
   * List of schemas on source server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databases?: string[];
  /**
   * Source server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Validation errors associated with the task
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Input for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source. */
export interface ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput {
  /** Connection information for target Azure Database for PostgreSQL server */
  targetConnectionInfo: PostgreSqlConnectionInfo;
}

/** Output for the task that validates connection to Azure Database for PostgreSQL and target server requirements for Oracle source. */
export interface ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput {
  /**
   * Version of the target server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * List of databases on target server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databases?: string[];
  /**
   * Target server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Validation errors associated with the task
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
  /** Mapping of schemas per database */
  databaseSchemaMap?: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem[];
}

export interface ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutputDatabaseSchemaMapItem {
  database?: string;
  schemas?: string[];
}

/** Input for the task that gets the list of tables contained within a provided list of Oracle schemas. */
export interface GetUserTablesOracleTaskInput {
  /** Information for connecting to Oracle source */
  connectionInfo: OracleConnectionInfo;
  /** List of Oracle schemas for which to collect tables */
  selectedSchemas: string[];
}

/** Output for the task that gets the list of tables contained within a provided list of Oracle schemas. */
export interface GetUserTablesOracleTaskOutput {
  /**
   * The schema this result is for
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly schemaName?: string;
  /**
   * List of valid tables found for this schema
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tables?: DatabaseTable[];
  /**
   * Validation errors associated with the task
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Input for the task that gets the list of tables for a provided list of PostgreSQL databases. */
export interface GetUserTablesPostgreSqlTaskInput {
  /** Information for connecting to PostgreSQL source */
  connectionInfo: PostgreSqlConnectionInfo;
  /** List of PostgreSQL databases for which to collect tables */
  selectedDatabases: string[];
}

/** Output for the task that gets the list of tables for a provided list of PostgreSQL databases. */
export interface GetUserTablesPostgreSqlTaskOutput {
  /**
   * The database this result is for
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * List of valid tables found for this database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tables?: DatabaseTable[];
  /**
   * Validation errors associated with the task
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Output for task that validates migration input for Oracle to Azure Database for PostgreSQL for online migrations */
export interface ValidateOracleAzureDbPostgreSqlSyncTaskOutput {
  /**
   * Errors associated with a selected database object
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations */
export interface MigrateOracleAzureDbPostgreSqlSyncTaskInput {
  /** Databases to migrate */
  selectedDatabases: MigrateOracleAzureDbPostgreSqlSyncDatabaseInput[];
  /** Connection information for target Azure Database for PostgreSQL */
  targetConnectionInfo: PostgreSqlConnectionInfo;
  /** Connection information for source Oracle */
  sourceConnectionInfo: OracleConnectionInfo;
}

/** Database specific information for Oracle to Azure Database for PostgreSQL migration task inputs */
export interface MigrateOracleAzureDbPostgreSqlSyncDatabaseInput {
  /** How to handle object name casing: either Preserve or ToLower */
  caseManipulation?: string;
  /** Name of the migration pipeline */
  name?: string;
  /** Name of the source schema */
  schemaName?: string;
  /** Mapping of source to target tables */
  tableMap?: { [propertyName: string]: string };
  /** Name of target database. Note: Target database will be truncated before starting migration. */
  targetDatabaseName?: string;
  /** Migration settings which tune the migration behavior */
  migrationSetting?: { [propertyName: string]: string };
  /** Source settings to tune source endpoint migration behavior */
  sourceSetting?: { [propertyName: string]: string };
  /** Target settings to tune target endpoint migration behavior */
  targetSetting?: { [propertyName: string]: string };
}

/** Output for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations */
export interface MigrateOracleAzureDbPostgreSqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType:
    | "MigrationLevelOutput"
    | "DatabaseLevelOutput"
    | "TableLevelOutput"
    | "ErrorOutput"
    | "DatabaseLevelErrorOutput";
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** Information about an Oracle OCI driver. */
export interface OracleOCIDriverInfo {
  /**
   * The name of the driver package
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly driverName?: string;
  /**
   * The size in bytes of the driver package
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly driverSize?: string;
  /**
   * The MD5 Base64 encoded checksum for the driver package.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly archiveChecksum?: string;
  /**
   * The checksum for the driver package provided by Oracle.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly oracleChecksum?: string;
  /**
   * Version listed in the OCI assembly 'oci.dll'
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assemblyVersion?: string;
  /**
   * List of Oracle database versions supported by this driver. Only major minor of the version is listed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly supportedOracleVersions?: string[];
}

/** Input for the service task to check for OCI drivers. */
export interface CheckOCIDriverTaskInput {
  /** Version of the source server to check against.  Optional. */
  serverVersion?: string;
}

/** Output for the service task to check for OCI drivers. */
export interface CheckOCIDriverTaskOutput {
  /** Information about the installed driver if found and valid. */
  installedDriver?: OracleOCIDriverInfo;
  /**
   * Validation errors
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Input for the service task to upload an OCI driver. */
export interface UploadOCIDriverTaskInput {
  /** File share information for the OCI driver archive. */
  driverShare?: FileShare;
}

/** Output for the service task to upload an OCI driver. */
export interface UploadOCIDriverTaskOutput {
  /**
   * The name of the driver package that was validated and uploaded.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly driverPackageName?: string;
  /**
   * Validation errors
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Input for the service task to install an OCI driver. */
export interface InstallOCIDriverTaskInput {
  /** Name of the uploaded driver package to install. */
  driverPackageName?: string;
}

/** Output for the service task to install an OCI driver. */
export interface InstallOCIDriverTaskOutput {
  /**
   * Validation errors
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Description of an action supported by the Database Migration Service */
export interface ServiceOperation {
  /** The fully qualified action name, e.g. Microsoft.DataMigration/services/read */
  name?: string;
  /** Localized display text */
  display?: ServiceOperationDisplay;
}

/** Localized display text */
export interface ServiceOperationDisplay {
  /** The localized resource provider name */
  provider?: string;
  /** The localized resource type name */
  resource?: string;
  /** The localized operation name */
  operation?: string;
  /** The localized operation description */
  description?: string;
}

/** OData page of action (operation) objects */
export interface ServiceOperationList {
  /** List of actions */
  value?: ServiceOperation[];
  /** URL to load the next page of actions */
  nextLink?: string;
}

/** Output for connect to MySQL type source */
export interface ConnectToSourceNonSqlTaskOutput {
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Server properties
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverProperties?: ServerProperties;
  /**
   * List of databases on the server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databases?: string[];
  /**
   * Validation errors associated with the task
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Server properties for MySQL type source */
export interface ServerProperties {
  /**
   * Name of the server platform
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverPlatform?: string;
  /**
   * Name of the server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverName?: string;
  /**
   * Version of the database server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverVersion?: string;
  /**
   * Edition of the database server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverEdition?: string;
  /**
   * Version of the operating system
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverOperatingSystemVersion?: string;
  /**
   * Number of databases in the server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverDatabaseCount?: number;
}

/** Input for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations */
export interface MigrateMySqlAzureDbForMySqlOfflineTaskInput {
  /** Connection information for source MySQL */
  sourceConnectionInfo: MySqlConnectionInfo;
  /** Connection information for target Azure Database for MySQL */
  targetConnectionInfo: MySqlConnectionInfo;
  /** Databases to migrate */
  selectedDatabases: MigrateMySqlAzureDbForMySqlOfflineDatabaseInput[];
  /** Setting to set the source server read only */
  makeSourceServerReadOnly?: boolean;
  /** Parameter to specify when the migration started */
  startedOn?: Date;
  /** Optional parameters for fine tuning the data transfer rate during migration */
  optionalAgentSettings?: { [propertyName: string]: string };
}

/** Database specific information for offline MySQL to Azure Database for MySQL migration task inputs */
export interface MigrateMySqlAzureDbForMySqlOfflineDatabaseInput {
  /** Name of the database */
  name?: string;
  /** Name of target database. Note: Target database will be truncated before starting migration. */
  targetDatabaseName?: string;
  /** Mapping of source to target tables */
  tableMap?: { [propertyName: string]: string };
}

/** Output for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations */
export interface MigrateMySqlAzureDbForMySqlOfflineTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType:
    | "MigrationLevelOutput"
    | "DatabaseLevelOutput"
    | "TableLevelOutput"
    | "ErrorOutput";
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** Input for task that validates migration input for SQL sync migrations */
export interface ValidateSyncMigrationInputSqlServerTaskInput {
  /** Information for connecting to source SQL server */
  sourceConnectionInfo: SqlConnectionInfo;
  /** Information for connecting to target */
  targetConnectionInfo: SqlConnectionInfo;
  /** Databases to migrate */
  selectedDatabases: MigrateSqlServerSqlDbSyncDatabaseInput[];
}

/** Output for task that validates migration input for SQL sync migrations */
export interface ValidateSyncMigrationInputSqlServerTaskOutput {
  /**
   * Database identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Errors associated with a selected database object
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Input for task that validates migration input for SQL to Azure SQL Managed Instance */
export interface ValidateMigrationInputSqlServerSqlMITaskInput {
  /** Information for connecting to source */
  sourceConnectionInfo: SqlConnectionInfo;
  /** Information for connecting to target */
  targetConnectionInfo: SqlConnectionInfo;
  /** Databases to migrate */
  selectedDatabases: MigrateSqlServerSqlMIDatabaseInput[];
  /** Logins to migrate */
  selectedLogins?: string[];
  /** Backup file share information for all selected databases. */
  backupFileShare?: FileShare;
  /** SAS URI of Azure Storage Account Container to be used for storing backup files. */
  backupBlobShare: BlobShare;
  /** Backup Mode to specify whether to use existing backup or create new backup. */
  backupMode?: BackupMode;
}

/** Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations */
export interface ValidateMigrationInputSqlServerSqlMITaskOutput {
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Errors associated with the RestoreDatabaseName
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly restoreDatabaseNameErrors?: ReportableException[];
  /**
   * Errors associated with the BackupFolder path
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupFolderErrors?: ReportableException[];
  /**
   * Errors associated with backup share user name and password credentials
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupShareCredentialsErrors?: ReportableException[];
  /**
   * Errors associated with the storage account provided.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupStorageAccountErrors?: ReportableException[];
  /**
   * Errors associated with existing backup files.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly existingBackupErrors?: ReportableException[];
  /** Information about backup files when existing backup mode is used. */
  databaseBackupInfo?: DatabaseBackupInfo;
}

/** Information about backup files when existing backup mode is used. */
export interface DatabaseBackupInfo {
  /**
   * Database name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * Backup Type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupType?: BackupType;
  /**
   * The list of backup files for the current database.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupFiles?: string[];
  /**
   * Position of current database backup in the file.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly position?: number;
  /**
   * Database was damaged when backed up, but the backup operation was requested to continue despite errors.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDamaged?: boolean;
  /**
   * Whether the backup set is compressed
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isCompressed?: boolean;
  /**
   * Number of files in the backup set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly familyCount?: number;
  /**
   * Date and time when the backup operation finished.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupFinishDate?: Date;
}

/** Output for task that validates migration input for Azure SQL Database Managed Instance online migration */
export interface ValidateMigrationInputSqlServerSqlMISyncTaskOutput {
  /**
   * Database identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Name of database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Errors associated with a selected database object
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Information about a single database */
export interface Database {
  /** Unique identifier for the database */
  id?: string;
  /** Name of the database */
  name?: string;
  /** SQL Server compatibility level of database */
  compatibilityLevel?: DatabaseCompatLevel;
  /** Collation name of the database */
  collation?: string;
  /** Name of the server */
  serverName?: string;
  /** Fully qualified name */
  fqdn?: string;
  /** Install id of the database */
  installId?: string;
  /** Version of the server */
  serverVersion?: string;
  /** Edition of the server */
  serverEdition?: string;
  /** Product level of the server (RTM, SP, CTP). */
  serverLevel?: string;
  /** Default path of the data files */
  serverDefaultDataPath?: string;
  /** Default path of the log files */
  serverDefaultLogPath?: string;
  /** Default path of the backup folder */
  serverDefaultBackupPath?: string;
  /** Number of cores on the server */
  serverCoreCount?: number;
  /** Number of cores on the server that have VISIBLE ONLINE status */
  serverVisibleOnlineCoreCount?: number;
  /** State of the database */
  databaseState?: DatabaseState;
  /** The unique Server Id */
  serverId?: string;
}

/** A representation of the name of an object in a database */
export interface DatabaseObjectName {
  /**
   * The unescaped name of the database containing the object
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * The unescaped name of the object
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectName?: string;
  /**
   * The unescaped name of the schema containing the object
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly schemaName?: string;
  /** Type of the object in the database */
  objectType?: ObjectType;
}

/** Common metadata for migration projects */
export interface DataMigrationProjectMetadata {
  /**
   * Source server name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerName?: string;
  /**
   * Source server port number
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerPort?: string;
  /**
   * Source username
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceUsername?: string;
  /**
   * Target server name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerName?: string;
  /**
   * Target username
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetUsername?: string;
  /**
   * Target database name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetDbName?: string;
  /**
   * Whether target connection is Windows authentication
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetUsingWinAuth?: boolean;
  /**
   * List of tables selected for migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly selectedMigrationTables?: MigrationTableMetadata[];
}

/** Metadata for tables selected in migration project */
export interface MigrationTableMetadata {
  /**
   * Source table name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceTableName?: string;
  /**
   * Target table name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetTableName?: string;
}

/** Input for the task that reads configuration from project artifacts */
export interface GetProjectDetailsNonSqlTaskInput {
  /** Name of the migration project */
  projectName: string;
  /** A URL that points to the location to access project artifacts */
  projectLocation: string;
}

/** Base class for non sql migration task input */
export interface NonSqlMigrationTaskInput {
  /** Information for connecting to target */
  targetConnectionInfo: SqlConnectionInfo;
  /** Target database name */
  targetDatabaseName: string;
  /** Name of the migration project */
  projectName: string;
  /** A URL that points to the drop location to access project artifacts */
  projectLocation: string;
  /** Metadata of the tables selected for migration */
  selectedTables: NonSqlDataMigrationTable[];
}

/** Defines metadata for table to be migrated */
export interface NonSqlDataMigrationTable {
  /** Source table name */
  sourceName?: string;
}

/** Base class for non sql migration task output */
export interface NonSqlMigrationTaskOutput {
  /**
   * Result identifier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Current state of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: MigrationStatus;
  /**
   * Results of the migration. The key contains the table name and the value the table result object
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataMigrationTableResults?: string;
  /**
   * Message about the progress of the migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly progressMessage?: string;
  /**
   * Name of source server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerName?: string;
  /**
   * Name of target server
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerName?: string;
}

/** Object used to report the data migration results of a table */
export interface NonSqlDataMigrationTableResult {
  /**
   * Result code of the data migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resultCode?: DataMigrationResultCode;
  /**
   * Name of the source table
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceName?: string;
  /**
   * Name of the target table
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetName?: string;
  /**
   * Number of rows in the source table
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceRowCount?: number;
  /**
   * Number of rows in the target table
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetRowCount?: number;
  /**
   * Time taken to migrate the data
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly elapsedTimeInMiliseconds?: number;
  /**
   * List of errors, if any, during migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errors?: DataMigrationError[];
}

/** Migration Task errors */
export interface DataMigrationError {
  /**
   * Error description
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /** Error type */
  type?: ErrorType;
}

/** Database specific information for SQL to SQL migration task inputs */
export interface MigrateSqlServerDatabaseInput {
  /** Name of the database */
  name?: string;
  /** Name of the database at destination */
  restoreDatabaseName?: string;
  /** The backup and restore folder */
  backupAndRestoreFolder?: string;
  /** The list of database files */
  databaseFiles?: DatabaseFileInput[];
}

/** Database file specific information for input */
export interface DatabaseFileInput {
  /** Unique identifier for database file */
  id?: string;
  /** Logical name of the file */
  logicalName?: string;
  /** Operating-system full path of the file */
  physicalFullName?: string;
  /** Suggested full path of the file for restoring */
  restoreFullName?: string;
  /** Database file type */
  fileType?: DatabaseFileType;
}

/** Server role migration result */
export interface StartMigrationScenarioServerRoleResult {
  /**
   * Name of server role.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Current state of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: MigrationState;
  /**
   * Migration exceptions and warnings.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/** Database Migration Resource properties for SQL Managed Instance. */
export interface DatabaseMigrationPropertiesSqlMi
  extends DatabaseMigrationProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "SqlMi";
  /**
   * Detailed migration status. Not included by default.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationStatusDetails?: MigrationStatusDetails;
  /** Database collation to be used for the target database. */
  targetDatabaseCollation?: string;
  /** Error message for migration provisioning failure, if any. */
  provisioningError?: string;
  /** Backup configuration info. */
  backupConfiguration?: BackupConfiguration;
  /** Offline configuration. */
  offlineConfiguration?: OfflineConfiguration;
}

/** Database Migration Resource properties for SQL Virtual Machine. */
export interface DatabaseMigrationPropertiesSqlVm
  extends DatabaseMigrationProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "SqlVm";
  /**
   * Detailed migration status. Not included by default.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationStatusDetails?: MigrationStatusDetails;
  /** Database collation to be used for the target database. */
  targetDatabaseCollation?: string;
  /** Error message for migration provisioning failure, if any. */
  provisioningError?: string;
  /** Backup configuration info. */
  backupConfiguration?: BackupConfiguration;
  /** Offline configuration. */
  offlineConfiguration?: OfflineConfiguration;
}

/** Database Migration Resource for SQL Managed Instance. */
export interface DatabaseMigrationSqlMi extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Database Migration Resource properties for SQL Managed Instance. */
  properties?: DatabaseMigrationPropertiesSqlMi;
}

/** Database Migration Resource for SQL Virtual Machine. */
export interface DatabaseMigrationSqlVm extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Database Migration Resource properties for SQL Virtual Machine. */
  properties?: DatabaseMigrationPropertiesSqlVm;
}

/** Database Migration Resource. */
export interface DatabaseMigration extends ProxyResource {
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Database Migration Resource properties. */
  properties?: DatabaseMigrationPropertiesUnion;
}

/** A SQL Migration Service. */
export interface SqlMigrationService extends TrackedResource {
  /**
   * Provisioning state to track the async operation status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * Current state of the Integration runtime.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly integrationRuntimeState?: string;
}

/** A Database Migration Service resource */
export interface DataMigrationService extends TrackedResource {
  /** HTTP strong entity tag value. Ignored if submitted */
  etag?: string;
  /** The resource kind. Only 'vm' (the default) is supported. */
  kind?: string;
  /** Service SKU */
  sku?: ServiceSku;
  /**
   * The resource's provisioning state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ServiceProvisioningState;
  /** The public key of the service, used to encrypt secrets sent to the service */
  publicKey?: string;
  /** The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should be joined */
  virtualSubnetId?: string;
  /** The ID of the Microsoft.Network/networkInterfaces resource which the service have */
  virtualNicId?: string;
  /** The time delay before the service is auto-stopped when idle. */
  autoStopDelay?: string;
  /** Whether service resources should be deleted when stopped. (Turned on by default) */
  deleteResourcesOnStop?: boolean;
}

/** A project resource */
export interface Project extends TrackedResource {
  /** HTTP strong entity tag value. This is ignored if submitted. */
  eTag?: string;
  /** Source platform for the project */
  sourcePlatform?: ProjectSourcePlatform;
  /** Field that defines the Azure active directory application info, used to connect to the target Azure resource */
  azureAuthenticationInfo?: string;
  /** Target platform for the project */
  targetPlatform?: ProjectTargetPlatform;
  /**
   * UTC Date and time when project was created
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationTime?: Date;
  /** Information for connecting to source */
  sourceConnectionInfo?: ConnectionInfoUnion;
  /** Information for connecting to target */
  targetConnectionInfo?: ConnectionInfoUnion;
  /** List of DatabaseInfo */
  databasesInfo?: DatabaseInfo[];
  /**
   * The project's provisioning state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProjectProvisioningState;
}

/** Properties for task that migrates Schema for SQL Server databases to Azure SQL databases */
export interface MigrateSchemaSqlServerSqlDbTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "MigrateSchemaSqlServerSqlDb";
  /** Task input */
  input?: MigrateSchemaSqlServerSqlDbTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: MigrateSchemaSqlServerSqlDbTaskOutputUnion[];
  /** DateTime in UTC when the task was created */
  createdOn?: string;
  /** Task id */
  taskId?: string;
}

/** Properties for the task that checks for OCI drivers. */
export interface CheckOCIDriverTaskProperties extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Service.Check.OCI";
  /** Input for the service task to check for OCI drivers. */
  input?: CheckOCIDriverTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: CheckOCIDriverTaskOutput[];
}

/** Properties for the task that uploads an OCI driver. */
export interface UploadOCIDriverTaskProperties extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Service.Upload.OCI";
  /** Input for the service task to upload an OCI driver. */
  input?: UploadOCIDriverTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: UploadOCIDriverTaskOutput[];
}

/** Properties for the task that installs an OCI driver. */
export interface InstallOCIDriverTaskProperties extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Service.Install.OCI";
  /** Input for the service task to install an OCI driver. */
  input?: InstallOCIDriverTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: InstallOCIDriverTaskOutput[];
}

/** Properties for the task that validates the connection to and provides information about a MongoDB server */
export interface ConnectToMongoDbTaskProperties extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Connect.MongoDb";
  /** Describes a connection to a MongoDB data source */
  input?: MongoDbConnectionInfo;
  /**
   * An array containing a single MongoDbClusterInfo object
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: MongoDbClusterInfo[];
}

/** Properties for the task that validates connection to SQL Server and also validates source server requirements */
export interface ConnectToSourceSqlServerTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ConnectToSource.SqlServer";
  /** Task input */
  input?: ConnectToSourceSqlServerTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ConnectToSourceSqlServerTaskOutputUnion[];
}

/** Properties for the task that validates connection to SQL Server and source server requirements for online migration */
export interface ConnectToSourceSqlServerSyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ConnectToSource.SqlServer.Sync";
  /** Task input */
  input?: ConnectToSourceSqlServerTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ConnectToSourceSqlServerTaskOutputUnion[];
}

/** Properties for the task that validates connection to PostgreSQL server and source server requirements for online migration */
export interface ConnectToSourcePostgreSqlSyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ConnectToSource.PostgreSql.Sync";
  /** Task input */
  input?: ConnectToSourcePostgreSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ConnectToSourcePostgreSqlSyncTaskOutput[];
}

/** Properties for the task that validates MySQL database connection */
export interface ConnectToSourceMySqlTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ConnectToSource.MySql";
  /** Task input */
  input?: ConnectToSourceMySqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ConnectToSourceNonSqlTaskOutput[];
}

/** Properties for the task that validates Oracle database connection */
export interface ConnectToSourceOracleSyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ConnectToSource.Oracle.Sync";
  /** Task input */
  input?: ConnectToSourceOracleSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ConnectToSourceOracleSyncTaskOutput[];
}

/** Properties for the task that validates connection to SQL DB and target server requirements */
export interface ConnectToTargetSqlDbTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ConnectToTarget.SqlDb";
  /** Task input */
  input?: ConnectToTargetSqlDbTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ConnectToTargetSqlDbTaskOutput[];
}

/** Properties for the task that validates connection to SQL DB and target server requirements for online migration */
export interface ConnectToTargetSqlDbSyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ConnectToTarget.SqlDb.Sync";
  /** Task input */
  input?: ConnectToTargetSqlDbSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ConnectToTargetSqlDbTaskOutput[];
}

/** Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration */
export interface ConnectToTargetAzureDbForPostgreSqlSyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ConnectToTarget.AzureDbForPostgreSql.Sync";
  /** Task input */
  input?: ConnectToTargetAzureDbForPostgreSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ConnectToTargetAzureDbForPostgreSqlSyncTaskOutput[];
}

/** Properties for the task that validates connection to Azure Database For PostgreSQL server and target server requirements for online migration for Oracle source. */
export interface ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync";
  /** Task input */
  input?: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ConnectToTargetOracleAzureDbForPostgreSqlSyncTaskOutput[];
}

/** Properties for the task that collects user tables for the given list of databases */
export interface GetUserTablesSqlTaskProperties extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "GetUserTables.Sql";
  /** Task input */
  input?: GetUserTablesSqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: GetUserTablesSqlTaskOutput[];
}

/** Properties for the task that collects user tables for the given list of databases */
export interface GetUserTablesSqlSyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "GetUserTables.AzureSqlDb.Sync";
  /** Task input */
  input?: GetUserTablesSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: GetUserTablesSqlSyncTaskOutput[];
}

/** Properties for the task that collects user tables for the given list of Oracle schemas */
export interface GetUserTablesOracleTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "GetUserTablesOracle";
  /** Task input */
  input?: GetUserTablesOracleTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: GetUserTablesOracleTaskOutput[];
}

/** Properties for the task that collects user tables for the given list of databases */
export interface GetUserTablesPostgreSqlTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "GetUserTablesPostgreSql";
  /** Task input */
  input?: GetUserTablesPostgreSqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: GetUserTablesPostgreSqlTaskOutput[];
}

/** Properties for the task that collects user tables for the given list of databases */
export interface GetUserTablesMySqlTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "GetUserTablesMySql";
  /** Task input */
  input?: GetUserTablesMySqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: GetUserTablesMySqlTaskOutput[];
}

/** Properties for the task that validates connection to Azure SQL Database Managed Instance */
export interface ConnectToTargetSqlMITaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ConnectToTarget.AzureSqlDbMI";
  /** Task input */
  input?: ConnectToTargetSqlMITaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ConnectToTargetSqlMITaskOutput[];
}

/** Properties for the task that validates connection to Azure SQL Database Managed Instance */
export interface ConnectToTargetSqlMISyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ConnectToTarget.AzureSqlDbMI.Sync.LRS";
  /** Task input */
  input?: ConnectToTargetSqlMISyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ConnectToTargetSqlMISyncTaskOutput[];
}

/** Properties for the task that validates connection to Azure Database for MySQL and target server requirements */
export interface ConnectToTargetAzureDbForMySqlTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ConnectToTarget.AzureDbForMySql";
  /** Task input */
  input?: ConnectToTargetAzureDbForMySqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ConnectToTargetAzureDbForMySqlTaskOutput[];
}

/** Properties for the task that migrates data between MongoDB data sources */
export interface MigrateMongoDbTaskProperties extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Migrate.MongoDb";
  /** Describes how a MongoDB data migration should be performed */
  input?: MongoDbMigrationSettings;
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly output?: MongoDbProgressUnion[];
}

/** Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance */
export interface MigrateSqlServerSqlMITaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Migrate.SqlServer.AzureSqlDbMI";
  /** Task input */
  input?: MigrateSqlServerSqlMITaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: MigrateSqlServerSqlMITaskOutputUnion[];
  /** task id */
  taskId?: string;
}

/** Properties for task that migrates SQL Server databases to Azure SQL Database Managed Instance sync scenario */
export interface MigrateSqlServerSqlMISyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Migrate.SqlServer.AzureSqlDbMI.Sync.LRS";
  /** Task input */
  input?: MigrateSqlServerSqlMISyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: MigrateSqlServerSqlMISyncTaskOutputUnion[];
}

/** Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database */
export interface MigrateSqlServerSqlDbTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Migrate.SqlServer.SqlDb";
  /** Task input */
  input?: MigrateSqlServerSqlDbTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: MigrateSqlServerSqlDbTaskOutputUnion[];
  /** task id */
  taskId?: string;
  /** whether the task can be cloned or not */
  isCloneable?: boolean;
}

/** Properties for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations */
export interface MigrateSqlServerSqlDbSyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Migrate.SqlServer.AzureSqlDb.Sync";
  /** Task input */
  input?: MigrateSqlServerSqlDbSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: MigrateSqlServerSqlDbSyncTaskOutputUnion[];
}

/** Properties for the task that migrates MySQL databases to Azure Database for MySQL for online migrations */
export interface MigrateMySqlAzureDbForMySqlSyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Migrate.MySql.AzureDbForMySql.Sync";
  /** Task input */
  input?: MigrateMySqlAzureDbForMySqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: MigrateMySqlAzureDbForMySqlSyncTaskOutputUnion[];
}

/** Properties for the task that migrates MySQL databases to Azure Database for MySQL for offline migrations */
export interface MigrateMySqlAzureDbForMySqlOfflineTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Migrate.MySql.AzureDbForMySql";
  /** Task input */
  input?: MigrateMySqlAzureDbForMySqlOfflineTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: MigrateMySqlAzureDbForMySqlOfflineTaskOutputUnion[];
}

/** Properties for the task that migrates PostgreSQL databases to Azure Database for PostgreSQL for online migrations */
export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2";
  /** Task input */
  input?: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputUnion[];
  /** task id */
  taskId?: string;
  /** DateTime in UTC when the task was created */
  createdOn?: string;
}

/** Properties for the task that migrates Oracle to Azure Database for PostgreSQL for online migrations */
export interface MigrateOracleAzureDbForPostgreSqlSyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Migrate.Oracle.AzureDbForPostgreSql.Sync";
  /** Task input */
  input?: MigrateOracleAzureDbPostgreSqlSyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: MigrateOracleAzureDbPostgreSqlSyncTaskOutputUnion[];
}

/** Properties for task that validates migration input for SQL to Azure SQL DB sync migrations */
export interface ValidateMigrationInputSqlServerSqlDbSyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ValidateMigrationInput.SqlServer.SqlDb.Sync";
  /** Task input */
  input?: ValidateSyncMigrationInputSqlServerTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ValidateSyncMigrationInputSqlServerTaskOutput[];
}

/** Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance */
export interface ValidateMigrationInputSqlServerSqlMITaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ValidateMigrationInput.SqlServer.AzureSqlDbMI";
  /** Task input */
  input?: ValidateMigrationInputSqlServerSqlMITaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ValidateMigrationInputSqlServerSqlMITaskOutput[];
}

/** Properties for task that validates migration input for SQL to Azure SQL Database Managed Instance sync scenario */
export interface ValidateMigrationInputSqlServerSqlMISyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS";
  /** Task input */
  input?: ValidateMigrationInputSqlServerSqlMISyncTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ValidateMigrationInputSqlServerSqlMISyncTaskOutput[];
}

/** Properties for the task that validates a migration between MongoDB data sources */
export interface ValidateMongoDbTaskProperties extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Validate.MongoDb";
  /** Describes how a MongoDB data migration should be performed */
  input?: MongoDbMigrationSettings;
  /**
   * An array containing a single MongoDbMigrationProgress object
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: MongoDbMigrationProgress[];
}

/** Properties for the task that validates a migration for Oracle to Azure Database for PostgreSQL for online migrations */
export interface ValidateOracleAzureDbForPostgreSqlSyncTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Validate.Oracle.AzureDbPostgreSql.Sync";
  /** Input for the task that migrates Oracle databases to Azure Database for PostgreSQL for online migrations */
  input?: MigrateOracleAzureDbPostgreSqlSyncTaskInput;
  /**
   * An array containing a single validation error response object
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: ValidateOracleAzureDbPostgreSqlSyncTaskOutput[];
}

/** Properties for the task that gets TDE certificates in Base64 encoded format. */
export interface GetTdeCertificatesSqlTaskProperties
  extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "GetTDECertificates.Sql";
  /** Task input */
  input?: GetTdeCertificatesSqlTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: GetTdeCertificatesSqlTaskOutput[];
}

/** Properties for task that migrates SSIS packages from SQL Server databases to Azure SQL Database Managed Instance. */
export interface MigrateSsisTaskProperties extends ProjectTaskProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  taskType: "Migrate.Ssis";
  /** Task input */
  input?: MigrateSsisTaskInput;
  /**
   * Task output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: MigrateSsisTaskOutputUnion[];
}

/** Properties for the command that completes sync migration for a database. */
export interface MigrateSyncCompleteCommandProperties
  extends CommandProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  commandType: "Migrate.Sync.Complete.Database";
  /** Command input */
  input?: MigrateSyncCompleteCommandInput;
  /**
   * Command output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: MigrateSyncCompleteCommandOutput;
}

/** Properties for the command that completes online migration for an Azure SQL Database Managed Instance. */
export interface MigrateMISyncCompleteCommandProperties
  extends CommandProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  commandType: "Migrate.SqlServer.AzureDbSqlMi.Complete";
  /** Command input */
  input?: MigrateMISyncCompleteCommandInput;
  /**
   * Command output. This is ignored if submitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly output?: MigrateMISyncCompleteCommandOutput;
}

/** Properties for the command that cancels a migration in whole or in part */
export interface MongoDbCancelCommand extends CommandProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  commandType: "cancel";
  /** Command input */
  input?: MongoDbCommandInput;
}

/** Properties for the command that finishes a migration in whole or in part */
export interface MongoDbFinishCommand extends CommandProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  commandType: "finish";
  /** Command input */
  input?: MongoDbFinishCommandInput;
}

/** Properties for the command that restarts a migration in whole or in part */
export interface MongoDbRestartCommand extends CommandProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  commandType: "restart";
  /** Command input */
  input?: MongoDbCommandInput;
}

/** A task resource */
export interface ProjectTask extends Resource {
  /** HTTP strong entity tag value. This is ignored if submitted. */
  etag?: string;
  /** Custom task properties */
  properties?: ProjectTaskPropertiesUnion;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** A file resource */
export interface ProjectFile extends Resource {
  /** HTTP strong entity tag value. This is ignored if submitted. */
  etag?: string;
  /** Custom file properties */
  properties?: ProjectFileProperties;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Describes a connection to a MongoDB data source */
export interface MongoDbConnectionInfo extends ConnectionInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "MongoDbConnectionInfo";
  /** A MongoDB connection string or blob container URL. The user name and password can be specified here or in the userName and password properties */
  connectionString: string;
  /** Data source */
  dataSource?: string;
  /** Whether to encrypt the connection */
  encryptConnection?: boolean;
  /** server brand version */
  serverBrandVersion?: string;
  enforceSSL?: boolean;
  /** port for server */
  port?: number;
  /** Additional connection settings */
  additionalSettings?: string;
}

/** Information for connecting to SQL database server */
export interface SqlConnectionInfo extends ConnectionInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "SqlConnectionInfo";
  /** Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber */
  dataSource: string;
  /** name of the server */
  serverName?: string;
  /** port for server */
  port?: string;
  /** Represents the ID of an HTTP resource represented by an Azure resource provider. */
  resourceId?: string;
  /** Authentication type to use for connection */
  authentication?: AuthenticationType;
  /** Whether to encrypt the connection */
  encryptConnection?: boolean;
  /** Additional connection settings */
  additionalSettings?: string;
  /** Whether to trust the server certificate */
  trustServerCertificate?: boolean;
  /** Server platform type for connection */
  platform?: SqlSourcePlatform;
}

/** Information for connecting to MySQL server */
export interface MySqlConnectionInfo extends ConnectionInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "MySqlConnectionInfo";
  /** Name of the server */
  serverName: string;
  /** Data source */
  dataSource?: string;
  /** Port for Server */
  port: number;
  /** Whether to encrypt the connection */
  encryptConnection?: boolean;
}

/** Information for connecting to Oracle server */
export interface OracleConnectionInfo extends ConnectionInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "OracleConnectionInfo";
  /** EZConnect or TNSName connection string. */
  dataSource: string;
}

/** Information for connecting to PostgreSQL server */
export interface PostgreSqlConnectionInfo extends ConnectionInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "PostgreSqlConnectionInfo";
  /** Name of the server */
  serverName: string;
  /** Data source */
  dataSource?: string;
  /** server version */
  serverVersion?: string;
  /** Name of the database */
  databaseName?: string;
  /** Port for Server */
  port: number;
  /** Whether to encrypt the connection */
  encryptConnection?: boolean;
  /** Whether to trust the server certificate */
  trustServerCertificate?: boolean;
}

/** Properties required to create a connection to Azure SQL database Managed instance */
export interface MiSqlConnectionInfo extends ConnectionInfo {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "MiSqlConnectionInfo";
  /** Resource id for Azure SQL database Managed instance */
  managedInstanceResourceId: string;
}

/** Task level output for the task that validates connection to SQL Server and also validates source server requirements */
export interface ConnectToSourceSqlServerTaskOutputTaskLevel
  extends ConnectToSourceSqlServerTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "TaskLevelOutput";
  /**
   * Source databases as a map from database name to database id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databases?: string;
  /**
   * Source logins as a map from login name to login id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly logins?: string;
  /**
   * Source agent jobs as a map from agent job name to id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly agentJobs?: string;
  /**
   * Mapping from database name to TDE certificate name, if applicable
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseTdeCertificateMapping?: string;
  /**
   * Source server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Validation errors
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
}

/** Database level output for the task that validates connection to SQL Server and also validates source server requirements */
export interface ConnectToSourceSqlServerTaskOutputDatabaseLevel
  extends ConnectToSourceSqlServerTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "DatabaseLevelOutput";
  /**
   * Database name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Size of the file in megabytes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sizeMB?: number;
  /**
   * The list of database files
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseFiles?: DatabaseFileInfo[];
  /**
   * SQL Server compatibility level of database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly compatibilityLevel?: DatabaseCompatLevel;
  /**
   * State of the database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseState?: DatabaseState;
}

/** Login level output for the task that validates connection to SQL Server and also validates source server requirements */
export interface ConnectToSourceSqlServerTaskOutputLoginLevel
  extends ConnectToSourceSqlServerTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "LoginLevelOutput";
  /**
   * Login name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of login.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly loginType?: LoginType;
  /**
   * The default database for the login.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultDatabase?: string;
  /**
   * The state of the login.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isEnabled?: boolean;
  /**
   * Information about eligibility of login for migration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationEligibility?: MigrationEligibilityInfo;
}

/** Agent Job level output for the task that validates connection to SQL Server and also validates source server requirements */
export interface ConnectToSourceSqlServerTaskOutputAgentJobLevel
  extends ConnectToSourceSqlServerTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "AgentJobLevelOutput";
  /**
   * Agent Job name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of Agent Job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly jobCategory?: string;
  /**
   * The state of the original Agent Job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isEnabled?: boolean;
  /**
   * The owner of the Agent Job
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly jobOwner?: string;
  /**
   * UTC Date and time when the Agent Job was last executed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastExecutedOn?: Date;
  /**
   * Validation errors
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationErrors?: ReportableException[];
  /**
   * Information about eligibility of agent job for migration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationEligibility?: MigrationEligibilityInfo;
}

/** Input for task that migrates Schema for SQL Server databases to Azure SQL databases */
export interface MigrateSchemaSqlServerSqlDbTaskInput
  extends SqlMigrationTaskInput {
  /** Databases to migrate */
  selectedDatabases: MigrateSchemaSqlServerSqlDbDatabaseInput[];
  /** encrypted key for secure fields */
  encryptedKeyForSecureFields?: string;
  /** Migration start time */
  startedOn?: string;
}

/** Input for the task that migrates on-prem SQL Server databases to Azure SQL Database for online migrations */
export interface MigrateSqlServerSqlDbSyncTaskInput
  extends SqlMigrationTaskInput {
  /** Databases to migrate */
  selectedDatabases: MigrateSqlServerSqlDbSyncDatabaseInput[];
  /** Validation options */
  validationOptions?: MigrationValidationOptions;
}

/** Input for the task that migrates on-prem SQL Server databases to Azure SQL Database */
export interface MigrateSqlServerSqlDbTaskInput extends SqlMigrationTaskInput {
  /** Databases to migrate */
  selectedDatabases: MigrateSqlServerSqlDbDatabaseInput[];
  /**
   * Options for enabling various post migration validations. Available options,
   *  1.) Data Integrity Check: Performs a checksum based comparison on source and target tables after the migration to ensure the correctness of the data.
   *  2.) Schema Validation: Performs a thorough schema comparison between the source and target tables and provides a list of differences between the source and target database, 3.) Query Analysis: Executes a set of queries picked up automatically either from the Query Plan Cache or Query Store and execute them and compares the execution time between the source and target database.
   */
  validationOptions?: MigrationValidationOptions;
  /** Date and time relative to UTC when the migration was started on */
  startedOn?: string;
  /** encrypted key for secure fields */
  encryptedKeyForSecureFields?: string;
}

/** Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance. */
export interface MigrateSqlServerSqlMITaskInput extends SqlMigrationTaskInput {
  /** Databases to migrate */
  selectedDatabases: MigrateSqlServerSqlMIDatabaseInput[];
  /** Date and time relative to UTC when the migration was started on */
  startedOn?: string;
  /** Logins to migrate. */
  selectedLogins?: string[];
  /** Agent Jobs to migrate. */
  selectedAgentJobs?: string[];
  /** Backup file share information for all selected databases. */
  backupFileShare?: FileShare;
  /** SAS URI of Azure Storage Account Container to be used for storing backup files. */
  backupBlobShare: BlobShare;
  /** Backup Mode to specify whether to use existing backup or create new backup. If using existing backups, backup file paths are required to be provided in selectedDatabases. */
  backupMode?: BackupMode;
  /** Azure Active Directory domain name in the format of 'contoso.com' for federated Azure AD or 'contoso.onmicrosoft.com' for managed domain, required if and only if Windows logins are selected */
  aadDomainName?: string;
}

/** Input for task that migrates SSIS packages from SQL Server to Azure SQL Database Managed Instance. */
export interface MigrateSsisTaskInput extends SqlMigrationTaskInput {
  /** SSIS package migration information. */
  ssisMigrationInfo: SsisMigrationInfo;
}

export interface MigrateSchemaSqlServerSqlDbTaskOutputMigrationLevel
  extends MigrateSchemaSqlServerSqlDbTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "MigrationLevelOutput";
  /**
   * Overall state of the schema migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: MigrationState;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Source server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerBrandVersion?: string;
}

export interface MigrateSchemaSqlServerSqlDbTaskOutputDatabaseLevel
  extends MigrateSchemaSqlServerSqlDbTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "DatabaseLevelOutput";
  /**
   * The name of the database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * State of the schema migration for this database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: MigrationState;
  /**
   * Schema migration stage for this database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly stage?: SchemaMigrationStage;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Prefix string to use for querying errors for this database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseErrorResultPrefix?: string;
  /**
   * Prefix string to use for querying schema errors for this database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly schemaErrorResultPrefix?: string;
  /**
   * Number of successful operations for this database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfSuccessfulOperations?: number;
  /**
   * Number of failed operations for this database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfFailedOperations?: number;
  /**
   * Identifier for the file resource containing the schema of this database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fileId?: string;
}

export interface MigrateSchemaSqlServerSqlDbTaskOutputError
  extends MigrateSchemaSqlServerSqlDbTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "SchemaErrorOutput";
  /**
   * Schema command which failed
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly commandText?: string;
  /**
   * Reason of failure
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorText?: string;
}

export interface MigrateSchemaSqlTaskOutputError
  extends MigrateSchemaSqlServerSqlDbTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "ErrorOutput";
  /**
   * Migration error
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ReportableException;
}

export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputMigrationLevel
  extends MigrateMySqlAzureDbForMySqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "MigrationLevelOutput";
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Source server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServer?: string;
  /**
   * Target server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * Target server name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServer?: string;
}

export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseLevel
  extends MigrateMySqlAzureDbForMySqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "DatabaseLevelOutput";
  /**
   * Name of the database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Migration state that this database is in
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationState?: SyncDatabaseMigrationReportingState;
  /**
   * Number of incoming changes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly incomingChanges?: number;
  /**
   * Number of applied changes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly appliedChanges?: number;
  /**
   * Number of cdc inserts
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcInsertCounter?: number;
  /**
   * Number of cdc deletes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcDeleteCounter?: number;
  /**
   * Number of cdc updates
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of tables completed in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadCompletedTables?: number;
  /**
   * Number of tables loading in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadLoadingTables?: number;
  /**
   * Number of tables queued in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadQueuedTables?: number;
  /**
   * Number of tables errored in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadErroredTables?: number;
  /**
   * Indicates if initial load (full load) has been completed
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly initializationCompleted?: boolean;
  /**
   * CDC apply latency
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly latency?: number;
}

export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputTableLevel
  extends MigrateMySqlAzureDbForMySqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "TableLevelOutput";
  /**
   * Name of the table
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tableName?: string;
  /**
   * Name of the database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * Number of applied inserts
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcInsertCounter?: string;
  /**
   * Number of applied updates
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcUpdateCounter?: string;
  /**
   * Number of applied deletes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcDeleteCounter?: string;
  /**
   * Estimate to finish full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadEstFinishTime?: Date;
  /**
   * Full load start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadStartedOn?: Date;
  /**
   * Full load end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadEndedOn?: Date;
  /**
   * Number of rows applied in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadTotalRows?: number;
  /**
   * Current state of the table migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: SyncTableMigrationState;
  /**
   * Total number of applied changes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalChangesApplied?: number;
  /**
   * Number of data errors occurred
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataErrorsCounter?: number;
  /**
   * Last modified time on target
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
}

export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputError
  extends MigrateMySqlAzureDbForMySqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "ErrorOutput";
  /**
   * Migration error
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ReportableException;
}

export interface MigrateMySqlAzureDbForMySqlSyncTaskOutputDatabaseError
  extends MigrateMySqlAzureDbForMySqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "DatabaseLevelErrorOutput";
  /** Error message */
  errorMessage?: string;
  /** List of error events. */
  events?: SyncMigrationDatabaseErrorEvent[];
}

export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputMigrationLevel
  extends MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "MigrationLevelOutput";
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Source server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServer?: string;
  /**
   * Target server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * Target server name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServer?: string;
  /**
   * Source server type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerType?: ScenarioSource;
  /**
   * Target server type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerType?: ScenarioTarget;
  /**
   * Migration status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: ReplicateMigrationState;
  /** Number of databases to include */
  databaseCount?: number;
}

export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevel
  extends MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "DatabaseLevelOutput";
  /**
   * Name of the database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Migration state that this database is in
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationState?: SyncDatabaseMigrationReportingState;
  /**
   * Number of incoming changes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly incomingChanges?: number;
  /**
   * Number of applied changes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly appliedChanges?: number;
  /**
   * Number of cdc inserts
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcInsertCounter?: number;
  /**
   * Number of cdc deletes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcDeleteCounter?: number;
  /**
   * Number of cdc updates
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of tables completed in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadCompletedTables?: number;
  /**
   * Number of tables loading in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadLoadingTables?: number;
  /**
   * Number of tables queued in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadQueuedTables?: number;
  /**
   * Number of tables errored in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadErroredTables?: number;
  /**
   * Indicates if initial load (full load) has been completed
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly initializationCompleted?: boolean;
  /**
   * CDC apply latency
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly latency?: number;
}

export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputTableLevel
  extends MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "TableLevelOutput";
  /**
   * Name of the table
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tableName?: string;
  /**
   * Name of the database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * Number of applied inserts
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcInsertCounter?: number;
  /**
   * Number of applied updates
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of applied deletes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcDeleteCounter?: number;
  /**
   * Estimate to finish full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadEstFinishTime?: Date;
  /**
   * Full load start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadStartedOn?: Date;
  /**
   * Full load end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadEndedOn?: Date;
  /**
   * Number of rows applied in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadTotalRows?: number;
  /**
   * Current state of the table migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: SyncTableMigrationState;
  /**
   * Total number of applied changes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalChangesApplied?: number;
  /**
   * Number of data errors occurred
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataErrorsCounter?: number;
  /**
   * Last modified time on target
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
}

export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputError
  extends MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "ErrorOutput";
  /**
   * Migration error
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ReportableException;
  /** List of error events */
  events?: SyncMigrationDatabaseErrorEvent[];
}

export interface MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseError
  extends MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "DatabaseLevelErrorOutput";
  /** Error message */
  errorMessage?: string;
  /** List of error events. */
  events?: SyncMigrationDatabaseErrorEvent[];
}

export interface MigrateSqlServerSqlDbSyncTaskOutputMigrationLevel
  extends MigrateSqlServerSqlDbSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "MigrationLevelOutput";
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Source server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServer?: string;
  /**
   * Target server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * Target server name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServer?: string;
  /**
   * Count of databases
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseCount?: number;
}

export interface MigrateSqlServerSqlDbSyncTaskOutputDatabaseLevel
  extends MigrateSqlServerSqlDbSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "DatabaseLevelOutput";
  /**
   * Name of the database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Migration state that this database is in
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationState?: SyncDatabaseMigrationReportingState;
  /**
   * Number of incoming changes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly incomingChanges?: number;
  /**
   * Number of applied changes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly appliedChanges?: number;
  /**
   * Number of cdc inserts
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcInsertCounter?: number;
  /**
   * Number of cdc deletes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcDeleteCounter?: number;
  /**
   * Number of cdc updates
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of tables completed in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadCompletedTables?: number;
  /**
   * Number of tables loading in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadLoadingTables?: number;
  /**
   * Number of tables queued in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadQueuedTables?: number;
  /**
   * Number of tables errored in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadErroredTables?: number;
  /**
   * Indicates if initial load (full load) has been completed
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly initializationCompleted?: boolean;
  /**
   * CDC apply latency
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly latency?: number;
}

export interface MigrateSqlServerSqlDbSyncTaskOutputTableLevel
  extends MigrateSqlServerSqlDbSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "TableLevelOutput";
  /**
   * Name of the table
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tableName?: string;
  /**
   * Name of the database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * Number of applied inserts
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcInsertCounter?: number;
  /**
   * Number of applied updates
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of applied deletes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcDeleteCounter?: number;
  /**
   * Estimate to finish full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadEstFinishTime?: Date;
  /**
   * Full load start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadStartedOn?: Date;
  /**
   * Full load end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadEndedOn?: Date;
  /**
   * Number of rows applied in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadTotalRows?: number;
  /**
   * Current state of the table migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: SyncTableMigrationState;
  /**
   * Total number of applied changes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalChangesApplied?: number;
  /**
   * Number of data errors occurred
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataErrorsCounter?: number;
  /**
   * Last modified time on target
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
}

export interface MigrateSqlServerSqlDbSyncTaskOutputError
  extends MigrateSqlServerSqlDbSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "ErrorOutput";
  /**
   * Migration error
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ReportableException;
}

export interface MigrateSqlServerSqlDbSyncTaskOutputDatabaseError
  extends MigrateSqlServerSqlDbSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "DatabaseLevelErrorOutput";
  /** Error message */
  errorMessage?: string;
  /** List of error events. */
  events?: SyncMigrationDatabaseErrorEvent[];
}

export interface MigrateSqlServerSqlDbTaskOutputMigrationLevel
  extends MigrateSqlServerSqlDbTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "MigrationLevelOutput";
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Duration of task execution in seconds.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly durationInSeconds?: number;
  /**
   * Current status of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: MigrationStatus;
  /**
   * Migration status message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusMessage?: string;
  /**
   * Migration progress message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Selected databases as a map from database name to database id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databases?: string;
  /**
   * Summary of database results in the migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseSummary?: string;
  /** Migration Validation Results */
  migrationValidationResult?: MigrationValidationResult;
  /** Migration Report Result, provides unique url for downloading your migration report. */
  migrationReportResult?: MigrationReportResult;
  /**
   * Source server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Migration exceptions and warnings.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

export interface MigrateSqlServerSqlDbTaskOutputDatabaseLevel
  extends MigrateSqlServerSqlDbTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "DatabaseLevelOutput";
  /**
   * Name of the item
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Current state of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: MigrationState;
  /**
   * Migration stage that this database is in
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly stage?: DatabaseMigrationStage;
  /**
   * Status message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusMessage?: string;
  /**
   * Migration progress message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Number of objects
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfObjects?: number;
  /**
   * Number of successfully completed objects
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfObjectsCompleted?: number;
  /**
   * Number of database/object errors.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorCount?: number;
  /**
   * Wildcard string prefix to use for querying all errors of the item
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorPrefix?: string;
  /**
   * Wildcard string prefix to use for querying all sub-tem results of the item
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resultPrefix?: string;
  /**
   * Migration exceptions and warnings.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exceptionsAndWarnings?: ReportableException[];
  /**
   * Summary of object results in the migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectSummary?: string;
}

export interface MigrateSqlServerSqlDbTaskOutputTableLevel
  extends MigrateSqlServerSqlDbTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "TableLevelOutput";
  /**
   * Name of the item
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectName?: string;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Current state of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: MigrationState;
  /**
   * Status message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusMessage?: string;
  /**
   * Number of items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly itemsCount?: number;
  /**
   * Number of successfully completed items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly itemsCompletedCount?: number;
  /**
   * Wildcard string prefix to use for querying all errors of the item
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorPrefix?: string;
  /**
   * Wildcard string prefix to use for querying all sub-tem results of the item
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resultPrefix?: string;
}

export interface MigrateSqlServerSqlDbTaskOutputError
  extends MigrateSqlServerSqlDbTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "ErrorOutput";
  /**
   * Migration error
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ReportableException;
}

export interface MigrateSqlServerSqlDbTaskOutputValidationResult
  extends MigrateSqlServerSqlDbTaskOutput,
    MigrationValidationResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "MigrationValidationOutput";
}

export interface MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResult
  extends MigrateSqlServerSqlDbTaskOutput,
    MigrationValidationDatabaseLevelResult {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "MigrationDatabaseLevelValidationOutput";
}

/** Summary of database results in the migration */
export interface DatabaseSummaryResult extends DataItemMigrationSummaryResult {
  /**
   * Size of the database in megabytes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sizeMB?: number;
}

/** Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario. */
export interface MigrateSqlServerSqlMISyncTaskInput
  extends SqlServerSqlMISyncTaskInput {}

/** Input for task that migrates SQL Server databases to Azure SQL Database Managed Instance online scenario. */
export interface ValidateMigrationInputSqlServerSqlMISyncTaskInput
  extends SqlServerSqlMISyncTaskInput {}

export interface MigrateSqlServerSqlMISyncTaskOutputMigrationLevel
  extends MigrateSqlServerSqlMISyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "MigrationLevelOutput";
  /**
   * Count of databases
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseCount?: number;
  /**
   * Current state of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: MigrationState;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Source server name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerName?: string;
  /**
   * Source server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerName?: string;
  /**
   * Target server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Number of database level errors
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseErrorCount?: number;
}

export interface MigrateSqlServerSqlMISyncTaskOutputDatabaseLevel
  extends MigrateSqlServerSqlMISyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "DatabaseLevelOutput";
  /**
   * Name of the database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceDatabaseName?: string;
  /**
   * Current state of database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationState?: DatabaseMigrationState;
  /**
   * Database migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Database migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Details of full backup set
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullBackupSetInfo?: BackupSetInfo;
  /**
   * Last applied backup set information
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastRestoredBackupSetInfo?: BackupSetInfo;
  /**
   * Backup sets that are currently active (Either being uploaded or getting restored)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly activeBackupSets?: BackupSetInfo[];
  /**
   * Name of container created in the Azure Storage account where backups are copied to
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly containerName?: string;
  /**
   * prefix string to use for querying errors for this database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorPrefix?: string;
  /**
   * Whether full backup has been applied to the target database or not
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isFullBackupRestored?: boolean;
  /**
   * Migration exceptions and warnings
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

export interface MigrateSqlServerSqlMISyncTaskOutputError
  extends MigrateSqlServerSqlMISyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "ErrorOutput";
  /**
   * Migration error
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ReportableException;
}

export interface MigrateSqlServerSqlMITaskOutputMigrationLevel
  extends MigrateSqlServerSqlMITaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "MigrationLevelOutput";
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Current status of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: MigrationStatus;
  /**
   * Current state of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: MigrationState;
  /**
   * Selected agent jobs as a map from name to id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly agentJobs?: string;
  /**
   * Selected logins as a map from name to id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly logins?: string;
  /**
   * Migration progress message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Map of server role migration results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serverRoleResults?: string;
  /**
   * List of orphaned users.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly orphanedUsersInfo?: OrphanedUserInfo[];
  /**
   * Selected databases as a map from database name to database id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databases?: string;
  /**
   * Source server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Migration exceptions and warnings.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

export interface MigrateSqlServerSqlMITaskOutputDatabaseLevel
  extends MigrateSqlServerSqlMITaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "DatabaseLevelOutput";
  /**
   * Name of the database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * Size of the database in megabytes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sizeMB?: number;
  /**
   * Current state of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: MigrationState;
  /**
   * Current stage of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly stage?: DatabaseMigrationStage;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Migration progress message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Migration exceptions and warnings
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

export interface MigrateSqlServerSqlMITaskOutputAgentJobLevel
  extends MigrateSqlServerSqlMITaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "AgentJobLevelOutput";
  /**
   * Agent Job name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The state of the original Agent Job.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isEnabled?: boolean;
  /**
   * Current state of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: MigrationState;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Migration progress message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Migration errors and warnings per job
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

export interface MigrateSqlServerSqlMITaskOutputLoginLevel
  extends MigrateSqlServerSqlMITaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "LoginLevelOutput";
  /**
   * Login name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly loginName?: string;
  /**
   * Current state of login
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: MigrationState;
  /**
   * Current stage of login
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly stage?: LoginMigrationStage;
  /**
   * Login migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Login migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Login migration progress message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Login migration errors and warnings per login
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

export interface MigrateSqlServerSqlMITaskOutputError
  extends MigrateSqlServerSqlMITaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "ErrorOutput";
  /**
   * Migration error
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ReportableException;
}

export interface MigrateSsisTaskOutputMigrationLevel
  extends MigrateSsisTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "MigrationLevelOutput";
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Current status of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: MigrationStatus;
  /**
   * Migration progress message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Source server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Migration exceptions and warnings.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exceptionsAndWarnings?: ReportableException[];
  /**
   * Stage of SSIS migration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly stage?: SsisMigrationStage;
}

export interface MigrateSsisTaskOutputProjectLevel
  extends MigrateSsisTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "SsisProjectLevelOutput";
  /**
   * Name of the folder
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly folderName?: string;
  /**
   * Name of the project
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly projectName?: string;
  /**
   * Current state of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: MigrationState;
  /**
   * Stage of SSIS migration.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly stage?: SsisMigrationStage;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Migration progress message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Migration exceptions and warnings
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exceptionsAndWarnings?: ReportableException[];
}

/** Describes the input to the 'finish' MongoDB migration command */
export interface MongoDbFinishCommandInput extends MongoDbCommandInput {
  /** If true, replication for the affected objects will be stopped immediately. If false, the migrator will finish replaying queued events before finishing the replication. */
  immediate: boolean;
}

/** Describes a supported collection within a MongoDB database */
export interface MongoDbCollectionInfo extends MongoDbObjectInfo {
  /** The name of the database containing the collection */
  databaseName: string;
  /** Whether the collection is a capped collection (i.e. whether it has a fixed size and acts like a circular buffer) */
  isCapped: boolean;
  /** Whether the collection is system collection */
  isSystemCollection: boolean;
  /** Whether the collection is a view of another collection */
  isView: boolean;
  /** The shard key on the collection, or null if the collection is not sharded */
  shardKey?: MongoDbShardKeyInfo;
  /** Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary. */
  supportsSharding: boolean;
  /** The name of the collection that this is a view of, if IsView is true */
  viewOf?: string;
}

/** Describes a database within a MongoDB data source */
export interface MongoDbDatabaseInfo extends MongoDbObjectInfo {
  /** A list of supported collections in a MongoDB database */
  collections: MongoDbCollectionInfo[];
  /** Whether the database has sharding enabled. Note that the migration task will enable sharding on the target if necessary. */
  supportsSharding: boolean;
}

/** Describes the progress of a collection */
export interface MongoDbCollectionProgress extends MongoDbProgress {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "Collection";
}

/** Describes the progress of a database */
export interface MongoDbDatabaseProgress extends MongoDbProgress {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "Database";
  /** The progress of the collections in the database. The keys are the unqualified names of the collections */
  collections?: { [propertyName: string]: MongoDbCollectionProgress };
}

/** Describes the progress of the overall migration */
export interface MongoDbMigrationProgress extends MongoDbProgress {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "Migration";
  /** The progress of the databases in the migration. The keys are the names of the databases */
  databases?: { [propertyName: string]: MongoDbDatabaseProgress };
}

export interface MigrateOracleAzureDbPostgreSqlSyncTaskOutputMigrationLevel
  extends MigrateOracleAzureDbPostgreSqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "MigrationLevelOutput";
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Source server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServer?: string;
  /**
   * Target server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * Target server name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServer?: string;
}

export interface MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseLevel
  extends MigrateOracleAzureDbPostgreSqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "DatabaseLevelOutput";
  /**
   * Name of the database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Migration state that this database is in
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly migrationState?: SyncDatabaseMigrationReportingState;
  /**
   * Number of incoming changes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly incomingChanges?: number;
  /**
   * Number of applied changes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly appliedChanges?: number;
  /**
   * Number of cdc inserts
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcInsertCounter?: number;
  /**
   * Number of cdc deletes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcDeleteCounter?: number;
  /**
   * Number of cdc updates
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of tables completed in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadCompletedTables?: number;
  /**
   * Number of tables loading in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadLoadingTables?: number;
  /**
   * Number of tables queued in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadQueuedTables?: number;
  /**
   * Number of tables errored in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadErroredTables?: number;
  /**
   * Indicates if initial load (full load) has been completed
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly initializationCompleted?: boolean;
  /**
   * CDC apply latency
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly latency?: number;
}

export interface MigrateOracleAzureDbPostgreSqlSyncTaskOutputTableLevel
  extends MigrateOracleAzureDbPostgreSqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "TableLevelOutput";
  /**
   * Name of the table
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tableName?: string;
  /**
   * Name of the database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * Number of applied inserts
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcInsertCounter?: number;
  /**
   * Number of applied updates
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcUpdateCounter?: number;
  /**
   * Number of applied deletes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly cdcDeleteCounter?: number;
  /**
   * Estimate to finish full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadEstFinishTime?: Date;
  /**
   * Full load start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadStartedOn?: Date;
  /**
   * Full load end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadEndedOn?: Date;
  /**
   * Number of rows applied in full load
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly fullLoadTotalRows?: number;
  /**
   * Current state of the table migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: SyncTableMigrationState;
  /**
   * Total number of applied changes
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalChangesApplied?: number;
  /**
   * Number of data errors occurred
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataErrorsCounter?: number;
  /**
   * Last modified time on target
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModifiedTime?: Date;
}

export interface MigrateOracleAzureDbPostgreSqlSyncTaskOutputError
  extends MigrateOracleAzureDbPostgreSqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "ErrorOutput";
  /**
   * Migration error
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ReportableException;
}

export interface MigrateOracleAzureDbPostgreSqlSyncTaskOutputDatabaseError
  extends MigrateOracleAzureDbPostgreSqlSyncTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "DatabaseLevelErrorOutput";
  /** Error message */
  errorMessage?: string;
  /** List of error events. */
  events?: SyncMigrationDatabaseErrorEvent[];
}

export interface MigrateMySqlAzureDbForMySqlOfflineTaskOutputMigrationLevel
  extends MigrateMySqlAzureDbForMySqlOfflineTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "MigrationLevelOutput";
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Duration of task execution in seconds.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly durationInSeconds?: number;
  /**
   * Current status of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: MigrationStatus;
  /**
   * Migration status message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusMessage?: string;
  /**
   * Migration progress message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /** Selected databases as a map from database name to database id */
  databases?: string;
  /**
   * Summary of database results in the migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseSummary?: string;
  /** Migration Report Result, provides unique url for downloading your migration report. */
  migrationReportResult?: MigrationReportResult;
  /**
   * Source server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerVersion?: string;
  /**
   * Source server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sourceServerBrandVersion?: string;
  /**
   * Target server version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerVersion?: string;
  /**
   * Target server brand version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetServerBrandVersion?: string;
  /**
   * Migration exceptions and warnings.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exceptionsAndWarnings?: ReportableException[];
  /**
   * Last time the storage was updated
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastStorageUpdate?: Date;
}

export interface MigrateMySqlAzureDbForMySqlOfflineTaskOutputDatabaseLevel
  extends MigrateMySqlAzureDbForMySqlOfflineTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "DatabaseLevelOutput";
  /**
   * Name of the database
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly databaseName?: string;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Current state of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: MigrationState;
  /**
   * Migration stage that this database is in
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly stage?: DatabaseMigrationStage;
  /**
   * Status message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusMessage?: string;
  /**
   * Migration progress message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Number of objects
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfObjects?: number;
  /**
   * Number of successfully completed objects
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly numberOfObjectsCompleted?: number;
  /**
   * Number of database/object errors.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorCount?: number;
  /**
   * Wildcard string prefix to use for querying all errors of the item
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorPrefix?: string;
  /**
   * Wildcard string prefix to use for querying all sub-tem results of the item
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resultPrefix?: string;
  /**
   * Migration exceptions and warnings.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly exceptionsAndWarnings?: ReportableException[];
  /**
   * Last time the storage was updated
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastStorageUpdate?: Date;
  /**
   * Summary of object results in the migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectSummary?: string;
}

export interface MigrateMySqlAzureDbForMySqlOfflineTaskOutputTableLevel
  extends MigrateMySqlAzureDbForMySqlOfflineTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "TableLevelOutput";
  /**
   * Name of the item
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly objectName?: string;
  /**
   * Migration start time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly startedOn?: Date;
  /**
   * Migration end time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endedOn?: Date;
  /**
   * Current state of migration
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: MigrationState;
  /**
   * Status message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusMessage?: string;
  /**
   * Number of items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly itemsCount?: number;
  /**
   * Number of successfully completed items
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly itemsCompletedCount?: number;
  /**
   * Wildcard string prefix to use for querying all errors of the item
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly errorPrefix?: string;
  /**
   * Wildcard string prefix to use for querying all sub-tem results of the item
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resultPrefix?: string;
  /**
   * Last time the storage was updated
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastStorageUpdate?: Date;
}

export interface MigrateMySqlAzureDbForMySqlOfflineTaskOutputError
  extends MigrateMySqlAzureDbForMySqlOfflineTaskOutput {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  resultType: "ErrorOutput";
  /**
   * Migration error
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ReportableException;
}

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ResourceType} that the service accepts. */
export enum KnownResourceType {
  /** SqlMi */
  SqlMi = "SqlMi",
  /** SqlVm */
  SqlVm = "SqlVm"
}

/**
 * Defines values for ResourceType. \
 * {@link KnownResourceType} can be used interchangeably with ResourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SqlMi** \
 * **SqlVm**
 */
export type ResourceType = string;

/** Known values of {@link OperationOrigin} that the service accepts. */
export enum KnownOperationOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system"
}

/**
 * Defines values for OperationOrigin. \
 * {@link KnownOperationOrigin} can be used interchangeably with OperationOrigin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system**
 */
export type OperationOrigin = string;

/** Known values of {@link ResourceSkuCapacityScaleType} that the service accepts. */
export enum KnownResourceSkuCapacityScaleType {
  /** Automatic */
  Automatic = "Automatic",
  /** Manual */
  Manual = "Manual",
  /** None */
  None = "None"
}

/**
 * Defines values for ResourceSkuCapacityScaleType. \
 * {@link KnownResourceSkuCapacityScaleType} can be used interchangeably with ResourceSkuCapacityScaleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Automatic** \
 * **Manual** \
 * **None**
 */
export type ResourceSkuCapacityScaleType = string;

/** Known values of {@link ResourceSkuRestrictionsType} that the service accepts. */
export enum KnownResourceSkuRestrictionsType {
  /** Location */
  Location = "location"
}

/**
 * Defines values for ResourceSkuRestrictionsType. \
 * {@link KnownResourceSkuRestrictionsType} can be used interchangeably with ResourceSkuRestrictionsType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **location**
 */
export type ResourceSkuRestrictionsType = string;

/** Known values of {@link ResourceSkuRestrictionsReasonCode} that the service accepts. */
export enum KnownResourceSkuRestrictionsReasonCode {
  /** QuotaId */
  QuotaId = "QuotaId",
  /** NotAvailableForSubscription */
  NotAvailableForSubscription = "NotAvailableForSubscription"
}

/**
 * Defines values for ResourceSkuRestrictionsReasonCode. \
 * {@link KnownResourceSkuRestrictionsReasonCode} can be used interchangeably with ResourceSkuRestrictionsReasonCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **QuotaId** \
 * **NotAvailableForSubscription**
 */
export type ResourceSkuRestrictionsReasonCode = string;

/** Known values of {@link ServiceProvisioningState} that the service accepts. */
export enum KnownServiceProvisioningState {
  /** Accepted */
  Accepted = "Accepted",
  /** Deleting */
  Deleting = "Deleting",
  /** Deploying */
  Deploying = "Deploying",
  /** Stopped */
  Stopped = "Stopped",
  /** Stopping */
  Stopping = "Stopping",
  /** Starting */
  Starting = "Starting",
  /** FailedToStart */
  FailedToStart = "FailedToStart",
  /** FailedToStop */
  FailedToStop = "FailedToStop",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for ServiceProvisioningState. \
 * {@link KnownServiceProvisioningState} can be used interchangeably with ServiceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Deleting** \
 * **Deploying** \
 * **Stopped** \
 * **Stopping** \
 * **Starting** \
 * **FailedToStart** \
 * **FailedToStop** \
 * **Succeeded** \
 * **Failed**
 */
export type ServiceProvisioningState = string;

/** Known values of {@link ServiceScalability} that the service accepts. */
export enum KnownServiceScalability {
  /** None */
  None = "none",
  /** Manual */
  Manual = "manual",
  /** Automatic */
  Automatic = "automatic"
}

/**
 * Defines values for ServiceScalability. \
 * {@link KnownServiceScalability} can be used interchangeably with ServiceScalability,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none** \
 * **manual** \
 * **automatic**
 */
export type ServiceScalability = string;

/** Known values of {@link TaskType} that the service accepts. */
export enum KnownTaskType {
  /** ConnectMongoDb */
  ConnectMongoDb = "Connect.MongoDb",
  /** ConnectToSourceSqlServer */
  ConnectToSourceSqlServer = "ConnectToSource.SqlServer",
  /** ConnectToSourceSqlServerSync */
  ConnectToSourceSqlServerSync = "ConnectToSource.SqlServer.Sync",
  /** ConnectToSourcePostgreSqlSync */
  ConnectToSourcePostgreSqlSync = "ConnectToSource.PostgreSql.Sync",
  /** ConnectToSourceMySql */
  ConnectToSourceMySql = "ConnectToSource.MySql",
  /** ConnectToSourceOracleSync */
  ConnectToSourceOracleSync = "ConnectToSource.Oracle.Sync",
  /** ConnectToTargetSqlDb */
  ConnectToTargetSqlDb = "ConnectToTarget.SqlDb",
  /** ConnectToTargetSqlDbSync */
  ConnectToTargetSqlDbSync = "ConnectToTarget.SqlDb.Sync",
  /** ConnectToTargetAzureDbForPostgreSqlSync */
  ConnectToTargetAzureDbForPostgreSqlSync = "ConnectToTarget.AzureDbForPostgreSql.Sync",
  /** ConnectToTargetOracleAzureDbForPostgreSqlSync */
  ConnectToTargetOracleAzureDbForPostgreSqlSync = "ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync",
  /** ConnectToTargetAzureSqlDbMI */
  ConnectToTargetAzureSqlDbMI = "ConnectToTarget.AzureSqlDbMI",
  /** ConnectToTargetAzureSqlDbMISyncLRS */
  ConnectToTargetAzureSqlDbMISyncLRS = "ConnectToTarget.AzureSqlDbMI.Sync.LRS",
  /** ConnectToTargetAzureDbForMySql */
  ConnectToTargetAzureDbForMySql = "ConnectToTarget.AzureDbForMySql",
  /** GetUserTablesSql */
  GetUserTablesSql = "GetUserTables.Sql",
  /** GetUserTablesAzureSqlDbSync */
  GetUserTablesAzureSqlDbSync = "GetUserTables.AzureSqlDb.Sync",
  /** GetUserTablesOracle */
  GetUserTablesOracle = "GetUserTablesOracle",
  /** GetUserTablesPostgreSql */
  GetUserTablesPostgreSql = "GetUserTablesPostgreSql",
  /** GetUserTablesMySql */
  GetUserTablesMySql = "GetUserTablesMySql",
  /** MigrateMongoDb */
  MigrateMongoDb = "Migrate.MongoDb",
  /** MigrateSqlServerAzureSqlDbMI */
  MigrateSqlServerAzureSqlDbMI = "Migrate.SqlServer.AzureSqlDbMI",
  /** MigrateSqlServerAzureSqlDbMISyncLRS */
  MigrateSqlServerAzureSqlDbMISyncLRS = "Migrate.SqlServer.AzureSqlDbMI.Sync.LRS",
  /** MigrateSqlServerSqlDb */
  MigrateSqlServerSqlDb = "Migrate.SqlServer.SqlDb",
  /** MigrateSqlServerAzureSqlDbSync */
  MigrateSqlServerAzureSqlDbSync = "Migrate.SqlServer.AzureSqlDb.Sync",
  /** MigrateMySqlAzureDbForMySqlSync */
  MigrateMySqlAzureDbForMySqlSync = "Migrate.MySql.AzureDbForMySql.Sync",
  /** MigrateMySqlAzureDbForMySql */
  MigrateMySqlAzureDbForMySql = "Migrate.MySql.AzureDbForMySql",
  /** MigratePostgreSqlAzureDbForPostgreSqlSyncV2 */
  MigratePostgreSqlAzureDbForPostgreSqlSyncV2 = "Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2",
  /** MigrateOracleAzureDbForPostgreSqlSync */
  MigrateOracleAzureDbForPostgreSqlSync = "Migrate.Oracle.AzureDbForPostgreSql.Sync",
  /** ValidateMigrationInputSqlServerSqlDbSync */
  ValidateMigrationInputSqlServerSqlDbSync = "ValidateMigrationInput.SqlServer.SqlDb.Sync",
  /** ValidateMigrationInputSqlServerAzureSqlDbMI */
  ValidateMigrationInputSqlServerAzureSqlDbMI = "ValidateMigrationInput.SqlServer.AzureSqlDbMI",
  /** ValidateMigrationInputSqlServerAzureSqlDbMISyncLRS */
  ValidateMigrationInputSqlServerAzureSqlDbMISyncLRS = "ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS",
  /** ValidateMongoDb */
  ValidateMongoDb = "Validate.MongoDb",
  /** ValidateOracleAzureDbPostgreSqlSync */
  ValidateOracleAzureDbPostgreSqlSync = "Validate.Oracle.AzureDbPostgreSql.Sync",
  /** GetTDECertificatesSql */
  GetTDECertificatesSql = "GetTDECertificates.Sql",
  /** MigrateSsis */
  MigrateSsis = "Migrate.Ssis",
  /** ServiceCheckOCI */
  ServiceCheckOCI = "Service.Check.OCI",
  /** ServiceUploadOCI */
  ServiceUploadOCI = "Service.Upload.OCI",
  /** ServiceInstallOCI */
  ServiceInstallOCI = "Service.Install.OCI",
  /** MigrateSchemaSqlServerSqlDb */
  MigrateSchemaSqlServerSqlDb = "MigrateSchemaSqlServerSqlDb"
}

/**
 * Defines values for TaskType. \
 * {@link KnownTaskType} can be used interchangeably with TaskType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Connect.MongoDb** \
 * **ConnectToSource.SqlServer** \
 * **ConnectToSource.SqlServer.Sync** \
 * **ConnectToSource.PostgreSql.Sync** \
 * **ConnectToSource.MySql** \
 * **ConnectToSource.Oracle.Sync** \
 * **ConnectToTarget.SqlDb** \
 * **ConnectToTarget.SqlDb.Sync** \
 * **ConnectToTarget.AzureDbForPostgreSql.Sync** \
 * **ConnectToTarget.Oracle.AzureDbForPostgreSql.Sync** \
 * **ConnectToTarget.AzureSqlDbMI** \
 * **ConnectToTarget.AzureSqlDbMI.Sync.LRS** \
 * **ConnectToTarget.AzureDbForMySql** \
 * **GetUserTables.Sql** \
 * **GetUserTables.AzureSqlDb.Sync** \
 * **GetUserTablesOracle** \
 * **GetUserTablesPostgreSql** \
 * **GetUserTablesMySql** \
 * **Migrate.MongoDb** \
 * **Migrate.SqlServer.AzureSqlDbMI** \
 * **Migrate.SqlServer.AzureSqlDbMI.Sync.LRS** \
 * **Migrate.SqlServer.SqlDb** \
 * **Migrate.SqlServer.AzureSqlDb.Sync** \
 * **Migrate.MySql.AzureDbForMySql.Sync** \
 * **Migrate.MySql.AzureDbForMySql** \
 * **Migrate.PostgreSql.AzureDbForPostgreSql.SyncV2** \
 * **Migrate.Oracle.AzureDbForPostgreSql.Sync** \
 * **ValidateMigrationInput.SqlServer.SqlDb.Sync** \
 * **ValidateMigrationInput.SqlServer.AzureSqlDbMI** \
 * **ValidateMigrationInput.SqlServer.AzureSqlDbMI.Sync.LRS** \
 * **Validate.MongoDb** \
 * **Validate.Oracle.AzureDbPostgreSql.Sync** \
 * **GetTDECertificates.Sql** \
 * **Migrate.Ssis** \
 * **Service.Check.OCI** \
 * **Service.Upload.OCI** \
 * **Service.Install.OCI** \
 * **MigrateSchemaSqlServerSqlDb**
 */
export type TaskType = string;

/** Known values of {@link TaskState} that the service accepts. */
export enum KnownTaskState {
  /** Unknown */
  Unknown = "Unknown",
  /** Queued */
  Queued = "Queued",
  /** Running */
  Running = "Running",
  /** Canceled */
  Canceled = "Canceled",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** FailedInputValidation */
  FailedInputValidation = "FailedInputValidation",
  /** Faulted */
  Faulted = "Faulted"
}

/**
 * Defines values for TaskState. \
 * {@link KnownTaskState} can be used interchangeably with TaskState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Queued** \
 * **Running** \
 * **Canceled** \
 * **Succeeded** \
 * **Failed** \
 * **FailedInputValidation** \
 * **Faulted**
 */
export type TaskState = string;

/** Known values of {@link CommandType} that the service accepts. */
export enum KnownCommandType {
  /** MigrateSyncCompleteDatabase */
  MigrateSyncCompleteDatabase = "Migrate.Sync.Complete.Database",
  /** MigrateSqlServerAzureDbSqlMiComplete */
  MigrateSqlServerAzureDbSqlMiComplete = "Migrate.SqlServer.AzureDbSqlMi.Complete",
  /** Cancel */
  Cancel = "cancel",
  /** Finish */
  Finish = "finish",
  /** Restart */
  Restart = "restart"
}

/**
 * Defines values for CommandType. \
 * {@link KnownCommandType} can be used interchangeably with CommandType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Migrate.Sync.Complete.Database** \
 * **Migrate.SqlServer.AzureDbSqlMi.Complete** \
 * **cancel** \
 * **finish** \
 * **restart**
 */
export type CommandType = string;

/** Known values of {@link CommandState} that the service accepts. */
export enum KnownCommandState {
  /** Unknown */
  Unknown = "Unknown",
  /** Accepted */
  Accepted = "Accepted",
  /** Running */
  Running = "Running",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for CommandState. \
 * {@link KnownCommandState} can be used interchangeably with CommandState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Accepted** \
 * **Running** \
 * **Succeeded** \
 * **Failed**
 */
export type CommandState = string;

/** Known values of {@link NameCheckFailureReason} that the service accepts. */
export enum KnownNameCheckFailureReason {
  /** AlreadyExists */
  AlreadyExists = "AlreadyExists",
  /** Invalid */
  Invalid = "Invalid"
}

/**
 * Defines values for NameCheckFailureReason. \
 * {@link KnownNameCheckFailureReason} can be used interchangeably with NameCheckFailureReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AlreadyExists** \
 * **Invalid**
 */
export type NameCheckFailureReason = string;

/** Known values of {@link ProjectSourcePlatform} that the service accepts. */
export enum KnownProjectSourcePlatform {
  /** SQL */
  SQL = "SQL",
  /** MySQL */
  MySQL = "MySQL",
  /** PostgreSql */
  PostgreSql = "PostgreSql",
  /** MongoDb */
  MongoDb = "MongoDb",
  /** Unknown */
  Unknown = "Unknown"
}

/**
 * Defines values for ProjectSourcePlatform. \
 * {@link KnownProjectSourcePlatform} can be used interchangeably with ProjectSourcePlatform,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SQL** \
 * **MySQL** \
 * **PostgreSql** \
 * **MongoDb** \
 * **Unknown**
 */
export type ProjectSourcePlatform = string;

/** Known values of {@link ProjectTargetPlatform} that the service accepts. */
export enum KnownProjectTargetPlatform {
  /** Sqldb */
  Sqldb = "SQLDB",
  /** Sqlmi */
  Sqlmi = "SQLMI",
  /** AzureDbForMySql */
  AzureDbForMySql = "AzureDbForMySql",
  /** AzureDbForPostgreSql */
  AzureDbForPostgreSql = "AzureDbForPostgreSql",
  /** MongoDb */
  MongoDb = "MongoDb",
  /** Unknown */
  Unknown = "Unknown"
}

/**
 * Defines values for ProjectTargetPlatform. \
 * {@link KnownProjectTargetPlatform} can be used interchangeably with ProjectTargetPlatform,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SQLDB** \
 * **SQLMI** \
 * **AzureDbForMySql** \
 * **AzureDbForPostgreSql** \
 * **MongoDb** \
 * **Unknown**
 */
export type ProjectTargetPlatform = string;

/** Known values of {@link ProjectProvisioningState} that the service accepts. */
export enum KnownProjectProvisioningState {
  /** Deleting */
  Deleting = "Deleting",
  /** Succeeded */
  Succeeded = "Succeeded"
}

/**
 * Defines values for ProjectProvisioningState. \
 * {@link KnownProjectProvisioningState} can be used interchangeably with ProjectProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Deleting** \
 * **Succeeded**
 */
export type ProjectProvisioningState = string;

/** Known values of {@link AuthenticationType} that the service accepts. */
export enum KnownAuthenticationType {
  /** None */
  None = "None",
  /** WindowsAuthentication */
  WindowsAuthentication = "WindowsAuthentication",
  /** SqlAuthentication */
  SqlAuthentication = "SqlAuthentication",
  /** ActiveDirectoryIntegrated */
  ActiveDirectoryIntegrated = "ActiveDirectoryIntegrated",
  /** ActiveDirectoryPassword */
  ActiveDirectoryPassword = "ActiveDirectoryPassword"
}

/**
 * Defines values for AuthenticationType. \
 * {@link KnownAuthenticationType} can be used interchangeably with AuthenticationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **WindowsAuthentication** \
 * **SqlAuthentication** \
 * **ActiveDirectoryIntegrated** \
 * **ActiveDirectoryPassword**
 */
export type AuthenticationType = string;

/** Known values of {@link SqlSourcePlatform} that the service accepts. */
export enum KnownSqlSourcePlatform {
  /** SqlOnPrem */
  SqlOnPrem = "SqlOnPrem"
}

/**
 * Defines values for SqlSourcePlatform. \
 * {@link KnownSqlSourcePlatform} can be used interchangeably with SqlSourcePlatform,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SqlOnPrem**
 */
export type SqlSourcePlatform = string;

/** Known values of {@link BackupType} that the service accepts. */
export enum KnownBackupType {
  /** Database */
  Database = "Database",
  /** TransactionLog */
  TransactionLog = "TransactionLog",
  /** File */
  File = "File",
  /** DifferentialDatabase */
  DifferentialDatabase = "DifferentialDatabase",
  /** DifferentialFile */
  DifferentialFile = "DifferentialFile",
  /** Partial */
  Partial = "Partial",
  /** DifferentialPartial */
  DifferentialPartial = "DifferentialPartial"
}

/**
 * Defines values for BackupType. \
 * {@link KnownBackupType} can be used interchangeably with BackupType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Database** \
 * **TransactionLog** \
 * **File** \
 * **DifferentialDatabase** \
 * **DifferentialFile** \
 * **Partial** \
 * **DifferentialPartial**
 */
export type BackupType = string;

/** Known values of {@link BackupFileStatus} that the service accepts. */
export enum KnownBackupFileStatus {
  /** Arrived */
  Arrived = "Arrived",
  /** Queued */
  Queued = "Queued",
  /** Uploading */
  Uploading = "Uploading",
  /** Uploaded */
  Uploaded = "Uploaded",
  /** Restoring */
  Restoring = "Restoring",
  /** Restored */
  Restored = "Restored",
  /** Cancelled */
  Cancelled = "Cancelled"
}

/**
 * Defines values for BackupFileStatus. \
 * {@link KnownBackupFileStatus} can be used interchangeably with BackupFileStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Arrived** \
 * **Queued** \
 * **Uploading** \
 * **Uploaded** \
 * **Restoring** \
 * **Restored** \
 * **Cancelled**
 */
export type BackupFileStatus = string;

/** Known values of {@link MySqlTargetPlatformType} that the service accepts. */
export enum KnownMySqlTargetPlatformType {
  /** SqlServer */
  SqlServer = "SqlServer",
  /** AzureDbForMySQL */
  AzureDbForMySQL = "AzureDbForMySQL"
}

/**
 * Defines values for MySqlTargetPlatformType. \
 * {@link KnownMySqlTargetPlatformType} can be used interchangeably with MySqlTargetPlatformType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SqlServer** \
 * **AzureDbForMySQL**
 */
export type MySqlTargetPlatformType = string;

/** Known values of {@link DatabaseFileType} that the service accepts. */
export enum KnownDatabaseFileType {
  /** Rows */
  Rows = "Rows",
  /** Log */
  Log = "Log",
  /** Filestream */
  Filestream = "Filestream",
  /** NotSupported */
  NotSupported = "NotSupported",
  /** Fulltext */
  Fulltext = "Fulltext"
}

/**
 * Defines values for DatabaseFileType. \
 * {@link KnownDatabaseFileType} can be used interchangeably with DatabaseFileType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Rows** \
 * **Log** \
 * **Filestream** \
 * **NotSupported** \
 * **Fulltext**
 */
export type DatabaseFileType = string;

/** Known values of {@link DatabaseCompatLevel} that the service accepts. */
export enum KnownDatabaseCompatLevel {
  /** CompatLevel80 */
  CompatLevel80 = "CompatLevel80",
  /** CompatLevel90 */
  CompatLevel90 = "CompatLevel90",
  /** CompatLevel100 */
  CompatLevel100 = "CompatLevel100",
  /** CompatLevel110 */
  CompatLevel110 = "CompatLevel110",
  /** CompatLevel120 */
  CompatLevel120 = "CompatLevel120",
  /** CompatLevel130 */
  CompatLevel130 = "CompatLevel130",
  /** CompatLevel140 */
  CompatLevel140 = "CompatLevel140"
}

/**
 * Defines values for DatabaseCompatLevel. \
 * {@link KnownDatabaseCompatLevel} can be used interchangeably with DatabaseCompatLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CompatLevel80** \
 * **CompatLevel90** \
 * **CompatLevel100** \
 * **CompatLevel110** \
 * **CompatLevel120** \
 * **CompatLevel130** \
 * **CompatLevel140**
 */
export type DatabaseCompatLevel = string;

/** Known values of {@link DatabaseState} that the service accepts. */
export enum KnownDatabaseState {
  /** Online */
  Online = "Online",
  /** Restoring */
  Restoring = "Restoring",
  /** Recovering */
  Recovering = "Recovering",
  /** RecoveryPending */
  RecoveryPending = "RecoveryPending",
  /** Suspect */
  Suspect = "Suspect",
  /** Emergency */
  Emergency = "Emergency",
  /** Offline */
  Offline = "Offline",
  /** Copying */
  Copying = "Copying",
  /** OfflineSecondary */
  OfflineSecondary = "OfflineSecondary"
}

/**
 * Defines values for DatabaseState. \
 * {@link KnownDatabaseState} can be used interchangeably with DatabaseState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Online** \
 * **Restoring** \
 * **Recovering** \
 * **RecoveryPending** \
 * **Suspect** \
 * **Emergency** \
 * **Offline** \
 * **Copying** \
 * **OfflineSecondary**
 */
export type DatabaseState = string;

/** Known values of {@link LoginType} that the service accepts. */
export enum KnownLoginType {
  /** WindowsUser */
  WindowsUser = "WindowsUser",
  /** WindowsGroup */
  WindowsGroup = "WindowsGroup",
  /** SqlLogin */
  SqlLogin = "SqlLogin",
  /** Certificate */
  Certificate = "Certificate",
  /** AsymmetricKey */
  AsymmetricKey = "AsymmetricKey",
  /** ExternalUser */
  ExternalUser = "ExternalUser",
  /** ExternalGroup */
  ExternalGroup = "ExternalGroup"
}

/**
 * Defines values for LoginType. \
 * {@link KnownLoginType} can be used interchangeably with LoginType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **WindowsUser** \
 * **WindowsGroup** \
 * **SqlLogin** \
 * **Certificate** \
 * **AsymmetricKey** \
 * **ExternalUser** \
 * **ExternalGroup**
 */
export type LoginType = string;

/** Known values of {@link SchemaMigrationOption} that the service accepts. */
export enum KnownSchemaMigrationOption {
  /** None */
  None = "None",
  /** ExtractFromSource */
  ExtractFromSource = "ExtractFromSource",
  /** UseStorageFile */
  UseStorageFile = "UseStorageFile"
}

/**
 * Defines values for SchemaMigrationOption. \
 * {@link KnownSchemaMigrationOption} can be used interchangeably with SchemaMigrationOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **ExtractFromSource** \
 * **UseStorageFile**
 */
export type SchemaMigrationOption = string;

/** Known values of {@link MigrationState} that the service accepts. */
export enum KnownMigrationState {
  /** None */
  None = "None",
  /** InProgress */
  InProgress = "InProgress",
  /** Failed */
  Failed = "Failed",
  /** Warning */
  Warning = "Warning",
  /** Completed */
  Completed = "Completed",
  /** Skipped */
  Skipped = "Skipped",
  /** Stopped */
  Stopped = "Stopped"
}

/**
 * Defines values for MigrationState. \
 * {@link KnownMigrationState} can be used interchangeably with MigrationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **InProgress** \
 * **Failed** \
 * **Warning** \
 * **Completed** \
 * **Skipped** \
 * **Stopped**
 */
export type MigrationState = string;

/** Known values of {@link SchemaMigrationStage} that the service accepts. */
export enum KnownSchemaMigrationStage {
  /** NotStarted */
  NotStarted = "NotStarted",
  /** ValidatingInputs */
  ValidatingInputs = "ValidatingInputs",
  /** CollectingObjects */
  CollectingObjects = "CollectingObjects",
  /** DownloadingScript */
  DownloadingScript = "DownloadingScript",
  /** GeneratingScript */
  GeneratingScript = "GeneratingScript",
  /** UploadingScript */
  UploadingScript = "UploadingScript",
  /** DeployingSchema */
  DeployingSchema = "DeployingSchema",
  /** Completed */
  Completed = "Completed",
  /** CompletedWithWarnings */
  CompletedWithWarnings = "CompletedWithWarnings",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for SchemaMigrationStage. \
 * {@link KnownSchemaMigrationStage} can be used interchangeably with SchemaMigrationStage,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted** \
 * **ValidatingInputs** \
 * **CollectingObjects** \
 * **DownloadingScript** \
 * **GeneratingScript** \
 * **UploadingScript** \
 * **DeployingSchema** \
 * **Completed** \
 * **CompletedWithWarnings** \
 * **Failed**
 */
export type SchemaMigrationStage = string;

/** Known values of {@link SyncDatabaseMigrationReportingState} that the service accepts. */
export enum KnownSyncDatabaseMigrationReportingState {
  /** Undefined */
  Undefined = "UNDEFINED",
  /** Configuring */
  Configuring = "CONFIGURING",
  /** Initialiazing */
  Initialiazing = "INITIALIAZING",
  /** Starting */
  Starting = "STARTING",
  /** Running */
  Running = "RUNNING",
  /** ReadyTOComplete */
  ReadyTOComplete = "READY_TO_COMPLETE",
  /** Completing */
  Completing = "COMPLETING",
  /** Complete */
  Complete = "COMPLETE",
  /** Cancelling */
  Cancelling = "CANCELLING",
  /** Cancelled */
  Cancelled = "CANCELLED",
  /** Failed */
  Failed = "FAILED",
  /** Validating */
  Validating = "VALIDATING",
  /** ValidationComplete */
  ValidationComplete = "VALIDATION_COMPLETE",
  /** ValidationFailed */
  ValidationFailed = "VALIDATION_FAILED",
  /** RestoreINProgress */
  RestoreINProgress = "RESTORE_IN_PROGRESS",
  /** RestoreCompleted */
  RestoreCompleted = "RESTORE_COMPLETED",
  /** BackupINProgress */
  BackupINProgress = "BACKUP_IN_PROGRESS",
  /** BackupCompleted */
  BackupCompleted = "BACKUP_COMPLETED"
}

/**
 * Defines values for SyncDatabaseMigrationReportingState. \
 * {@link KnownSyncDatabaseMigrationReportingState} can be used interchangeably with SyncDatabaseMigrationReportingState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UNDEFINED** \
 * **CONFIGURING** \
 * **INITIALIAZING** \
 * **STARTING** \
 * **RUNNING** \
 * **READY_TO_COMPLETE** \
 * **COMPLETING** \
 * **COMPLETE** \
 * **CANCELLING** \
 * **CANCELLED** \
 * **FAILED** \
 * **VALIDATING** \
 * **VALIDATION_COMPLETE** \
 * **VALIDATION_FAILED** \
 * **RESTORE_IN_PROGRESS** \
 * **RESTORE_COMPLETED** \
 * **BACKUP_IN_PROGRESS** \
 * **BACKUP_COMPLETED**
 */
export type SyncDatabaseMigrationReportingState = string;

/** Known values of {@link SyncTableMigrationState} that the service accepts. */
export enum KnownSyncTableMigrationState {
  /** BeforeLoad */
  BeforeLoad = "BEFORE_LOAD",
  /** FullLoad */
  FullLoad = "FULL_LOAD",
  /** Completed */
  Completed = "COMPLETED",
  /** Canceled */
  Canceled = "CANCELED",
  /** Error */
  Error = "ERROR",
  /** Failed */
  Failed = "FAILED"
}

/**
 * Defines values for SyncTableMigrationState. \
 * {@link KnownSyncTableMigrationState} can be used interchangeably with SyncTableMigrationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BEFORE_LOAD** \
 * **FULL_LOAD** \
 * **COMPLETED** \
 * **CANCELED** \
 * **ERROR** \
 * **FAILED**
 */
export type SyncTableMigrationState = string;

/** Known values of {@link ScenarioSource} that the service accepts. */
export enum KnownScenarioSource {
  /** Access */
  Access = "Access",
  /** DB2 */
  DB2 = "DB2",
  /** MySQL */
  MySQL = "MySQL",
  /** Oracle */
  Oracle = "Oracle",
  /** SQL */
  SQL = "SQL",
  /** Sybase */
  Sybase = "Sybase",
  /** PostgreSQL */
  PostgreSQL = "PostgreSQL",
  /** MongoDB */
  MongoDB = "MongoDB",
  /** Sqlrds */
  Sqlrds = "SQLRDS",
  /** MySqlrds */
  MySqlrds = "MySQLRDS",
  /** PostgreSqlrds */
  PostgreSqlrds = "PostgreSQLRDS"
}

/**
 * Defines values for ScenarioSource. \
 * {@link KnownScenarioSource} can be used interchangeably with ScenarioSource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Access** \
 * **DB2** \
 * **MySQL** \
 * **Oracle** \
 * **SQL** \
 * **Sybase** \
 * **PostgreSQL** \
 * **MongoDB** \
 * **SQLRDS** \
 * **MySQLRDS** \
 * **PostgreSQLRDS**
 */
export type ScenarioSource = string;

/** Known values of {@link ScenarioTarget} that the service accepts. */
export enum KnownScenarioTarget {
  /** SQLServer */
  SQLServer = "SQLServer",
  /** Sqldb */
  Sqldb = "SQLDB",
  /** Sqldw */
  Sqldw = "SQLDW",
  /** Sqlmi */
  Sqlmi = "SQLMI",
  /** AzureDBForMySql */
  AzureDBForMySql = "AzureDBForMySql",
  /** AzureDBForPostgresSQL */
  AzureDBForPostgresSQL = "AzureDBForPostgresSQL",
  /** MongoDB */
  MongoDB = "MongoDB"
}

/**
 * Defines values for ScenarioTarget. \
 * {@link KnownScenarioTarget} can be used interchangeably with ScenarioTarget,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SQLServer** \
 * **SQLDB** \
 * **SQLDW** \
 * **SQLMI** \
 * **AzureDBForMySql** \
 * **AzureDBForPostgresSQL** \
 * **MongoDB**
 */
export type ScenarioTarget = string;

/** Known values of {@link ReplicateMigrationState} that the service accepts. */
export enum KnownReplicateMigrationState {
  /** Undefined */
  Undefined = "UNDEFINED",
  /** Validating */
  Validating = "VALIDATING",
  /** Pending */
  Pending = "PENDING",
  /** Complete */
  Complete = "COMPLETE",
  /** ActionRequired */
  ActionRequired = "ACTION_REQUIRED",
  /** Failed */
  Failed = "FAILED"
}

/**
 * Defines values for ReplicateMigrationState. \
 * {@link KnownReplicateMigrationState} can be used interchangeably with ReplicateMigrationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UNDEFINED** \
 * **VALIDATING** \
 * **PENDING** \
 * **COMPLETE** \
 * **ACTION_REQUIRED** \
 * **FAILED**
 */
export type ReplicateMigrationState = string;

/** Known values of {@link MigrationStatus} that the service accepts. */
export enum KnownMigrationStatus {
  /** Default */
  Default = "Default",
  /** Connecting */
  Connecting = "Connecting",
  /** SourceAndTargetSelected */
  SourceAndTargetSelected = "SourceAndTargetSelected",
  /** SelectLogins */
  SelectLogins = "SelectLogins",
  /** Configured */
  Configured = "Configured",
  /** Running */
  Running = "Running",
  /** Error */
  Error = "Error",
  /** Stopped */
  Stopped = "Stopped",
  /** Completed */
  Completed = "Completed",
  /** CompletedWithWarnings */
  CompletedWithWarnings = "CompletedWithWarnings"
}

/**
 * Defines values for MigrationStatus. \
 * {@link KnownMigrationStatus} can be used interchangeably with MigrationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **Connecting** \
 * **SourceAndTargetSelected** \
 * **SelectLogins** \
 * **Configured** \
 * **Running** \
 * **Error** \
 * **Stopped** \
 * **Completed** \
 * **CompletedWithWarnings**
 */
export type MigrationStatus = string;

/** Known values of {@link ValidationStatus} that the service accepts. */
export enum KnownValidationStatus {
  /** Default */
  Default = "Default",
  /** NotStarted */
  NotStarted = "NotStarted",
  /** Initialized */
  Initialized = "Initialized",
  /** InProgress */
  InProgress = "InProgress",
  /** Completed */
  Completed = "Completed",
  /** CompletedWithIssues */
  CompletedWithIssues = "CompletedWithIssues",
  /** Stopped */
  Stopped = "Stopped",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for ValidationStatus. \
 * {@link KnownValidationStatus} can be used interchangeably with ValidationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **NotStarted** \
 * **Initialized** \
 * **InProgress** \
 * **Completed** \
 * **CompletedWithIssues** \
 * **Stopped** \
 * **Failed**
 */
export type ValidationStatus = string;

/** Known values of {@link DatabaseMigrationStage} that the service accepts. */
export enum KnownDatabaseMigrationStage {
  /** None */
  None = "None",
  /** Initialize */
  Initialize = "Initialize",
  /** Backup */
  Backup = "Backup",
  /** FileCopy */
  FileCopy = "FileCopy",
  /** Restore */
  Restore = "Restore",
  /** Completed */
  Completed = "Completed"
}

/**
 * Defines values for DatabaseMigrationStage. \
 * {@link KnownDatabaseMigrationStage} can be used interchangeably with DatabaseMigrationStage,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Initialize** \
 * **Backup** \
 * **FileCopy** \
 * **Restore** \
 * **Completed**
 */
export type DatabaseMigrationStage = string;

/** Known values of {@link Severity} that the service accepts. */
export enum KnownSeverity {
  /** Message */
  Message = "Message",
  /** Warning */
  Warning = "Warning",
  /** Error */
  Error = "Error"
}

/**
 * Defines values for Severity. \
 * {@link KnownSeverity} can be used interchangeably with Severity,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Message** \
 * **Warning** \
 * **Error**
 */
export type Severity = string;

/** Known values of {@link ObjectType} that the service accepts. */
export enum KnownObjectType {
  /** StoredProcedures */
  StoredProcedures = "StoredProcedures",
  /** Table */
  Table = "Table",
  /** User */
  User = "User",
  /** View */
  View = "View",
  /** Function */
  Function = "Function"
}

/**
 * Defines values for ObjectType. \
 * {@link KnownObjectType} can be used interchangeably with ObjectType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **StoredProcedures** \
 * **Table** \
 * **User** \
 * **View** \
 * **Function**
 */
export type ObjectType = string;

/** Known values of {@link UpdateActionType} that the service accepts. */
export enum KnownUpdateActionType {
  /** DeletedOnTarget */
  DeletedOnTarget = "DeletedOnTarget",
  /** ChangedOnTarget */
  ChangedOnTarget = "ChangedOnTarget",
  /** AddedOnTarget */
  AddedOnTarget = "AddedOnTarget"
}

/**
 * Defines values for UpdateActionType. \
 * {@link KnownUpdateActionType} can be used interchangeably with UpdateActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DeletedOnTarget** \
 * **ChangedOnTarget** \
 * **AddedOnTarget**
 */
export type UpdateActionType = string;

/** Known values of {@link DatabaseMigrationState} that the service accepts. */
export enum KnownDatabaseMigrationState {
  /** Undefined */
  Undefined = "UNDEFINED",
  /** Initial */
  Initial = "INITIAL",
  /** FullBackupUploadStart */
  FullBackupUploadStart = "FULL_BACKUP_UPLOAD_START",
  /** LOGShippingStart */
  LOGShippingStart = "LOG_SHIPPING_START",
  /** UploadLOGFilesStart */
  UploadLOGFilesStart = "UPLOAD_LOG_FILES_START",
  /** CutoverStart */
  CutoverStart = "CUTOVER_START",
  /** PostCutoverComplete */
  PostCutoverComplete = "POST_CUTOVER_COMPLETE",
  /** Completed */
  Completed = "COMPLETED",
  /** Cancelled */
  Cancelled = "CANCELLED",
  /** Failed */
  Failed = "FAILED"
}

/**
 * Defines values for DatabaseMigrationState. \
 * {@link KnownDatabaseMigrationState} can be used interchangeably with DatabaseMigrationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UNDEFINED** \
 * **INITIAL** \
 * **FULL_BACKUP_UPLOAD_START** \
 * **LOG_SHIPPING_START** \
 * **UPLOAD_LOG_FILES_START** \
 * **CUTOVER_START** \
 * **POST_CUTOVER_COMPLETE** \
 * **COMPLETED** \
 * **CANCELLED** \
 * **FAILED**
 */
export type DatabaseMigrationState = string;

/** Known values of {@link BackupMode} that the service accepts. */
export enum KnownBackupMode {
  /** CreateBackup */
  CreateBackup = "CreateBackup",
  /** ExistingBackup */
  ExistingBackup = "ExistingBackup"
}

/**
 * Defines values for BackupMode. \
 * {@link KnownBackupMode} can be used interchangeably with BackupMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CreateBackup** \
 * **ExistingBackup**
 */
export type BackupMode = string;

/** Known values of {@link LoginMigrationStage} that the service accepts. */
export enum KnownLoginMigrationStage {
  /** None */
  None = "None",
  /** Initialize */
  Initialize = "Initialize",
  /** LoginMigration */
  LoginMigration = "LoginMigration",
  /** EstablishUserMapping */
  EstablishUserMapping = "EstablishUserMapping",
  /** AssignRoleMembership */
  AssignRoleMembership = "AssignRoleMembership",
  /** AssignRoleOwnership */
  AssignRoleOwnership = "AssignRoleOwnership",
  /** EstablishServerPermissions */
  EstablishServerPermissions = "EstablishServerPermissions",
  /** EstablishObjectPermissions */
  EstablishObjectPermissions = "EstablishObjectPermissions",
  /** Completed */
  Completed = "Completed"
}

/**
 * Defines values for LoginMigrationStage. \
 * {@link KnownLoginMigrationStage} can be used interchangeably with LoginMigrationStage,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Initialize** \
 * **LoginMigration** \
 * **EstablishUserMapping** \
 * **AssignRoleMembership** \
 * **AssignRoleOwnership** \
 * **EstablishServerPermissions** \
 * **EstablishObjectPermissions** \
 * **Completed**
 */
export type LoginMigrationStage = string;

/** Known values of {@link SsisStoreType} that the service accepts. */
export enum KnownSsisStoreType {
  /** SsisCatalog */
  SsisCatalog = "SsisCatalog"
}

/**
 * Defines values for SsisStoreType. \
 * {@link KnownSsisStoreType} can be used interchangeably with SsisStoreType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SsisCatalog**
 */
export type SsisStoreType = string;

/** Known values of {@link SsisMigrationOverwriteOption} that the service accepts. */
export enum KnownSsisMigrationOverwriteOption {
  /** Ignore */
  Ignore = "Ignore",
  /** Overwrite */
  Overwrite = "Overwrite"
}

/**
 * Defines values for SsisMigrationOverwriteOption. \
 * {@link KnownSsisMigrationOverwriteOption} can be used interchangeably with SsisMigrationOverwriteOption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ignore** \
 * **Overwrite**
 */
export type SsisMigrationOverwriteOption = string;

/** Known values of {@link SsisMigrationStage} that the service accepts. */
export enum KnownSsisMigrationStage {
  /** None */
  None = "None",
  /** Initialize */
  Initialize = "Initialize",
  /** InProgress */
  InProgress = "InProgress",
  /** Completed */
  Completed = "Completed"
}

/**
 * Defines values for SsisMigrationStage. \
 * {@link KnownSsisMigrationStage} can be used interchangeably with SsisMigrationStage,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Initialize** \
 * **InProgress** \
 * **Completed**
 */
export type SsisMigrationStage = string;

/** Known values of {@link MongoDbShardKeyOrder} that the service accepts. */
export enum KnownMongoDbShardKeyOrder {
  /** Forward */
  Forward = "Forward",
  /** Reverse */
  Reverse = "Reverse",
  /** Hashed */
  Hashed = "Hashed"
}

/**
 * Defines values for MongoDbShardKeyOrder. \
 * {@link KnownMongoDbShardKeyOrder} can be used interchangeably with MongoDbShardKeyOrder,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Forward** \
 * **Reverse** \
 * **Hashed**
 */
export type MongoDbShardKeyOrder = string;

/** Known values of {@link MongoDbClusterType} that the service accepts. */
export enum KnownMongoDbClusterType {
  /** BlobContainer */
  BlobContainer = "BlobContainer",
  /** CosmosDb */
  CosmosDb = "CosmosDb",
  /** MongoDb */
  MongoDb = "MongoDb"
}

/**
 * Defines values for MongoDbClusterType. \
 * {@link KnownMongoDbClusterType} can be used interchangeably with MongoDbClusterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BlobContainer** \
 * **CosmosDb** \
 * **MongoDb**
 */
export type MongoDbClusterType = string;

/** Known values of {@link MongoDbErrorType} that the service accepts. */
export enum KnownMongoDbErrorType {
  /** Error */
  Error = "Error",
  /** ValidationError */
  ValidationError = "ValidationError",
  /** Warning */
  Warning = "Warning"
}

/**
 * Defines values for MongoDbErrorType. \
 * {@link KnownMongoDbErrorType} can be used interchangeably with MongoDbErrorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **ValidationError** \
 * **Warning**
 */
export type MongoDbErrorType = string;

/** Known values of {@link MongoDbProgressResultType} that the service accepts. */
export enum KnownMongoDbProgressResultType {
  /** Migration */
  Migration = "Migration",
  /** Database */
  Database = "Database",
  /** Collection */
  Collection = "Collection"
}

/**
 * Defines values for MongoDbProgressResultType. \
 * {@link KnownMongoDbProgressResultType} can be used interchangeably with MongoDbProgressResultType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Migration** \
 * **Database** \
 * **Collection**
 */
export type MongoDbProgressResultType = string;

/** Known values of {@link MongoDbMigrationState} that the service accepts. */
export enum KnownMongoDbMigrationState {
  /** NotStarted */
  NotStarted = "NotStarted",
  /** ValidatingInput */
  ValidatingInput = "ValidatingInput",
  /** Initializing */
  Initializing = "Initializing",
  /** Restarting */
  Restarting = "Restarting",
  /** Copying */
  Copying = "Copying",
  /** InitialReplay */
  InitialReplay = "InitialReplay",
  /** Replaying */
  Replaying = "Replaying",
  /** Finalizing */
  Finalizing = "Finalizing",
  /** Complete */
  Complete = "Complete",
  /** Canceled */
  Canceled = "Canceled",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for MongoDbMigrationState. \
 * {@link KnownMongoDbMigrationState} can be used interchangeably with MongoDbMigrationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotStarted** \
 * **ValidatingInput** \
 * **Initializing** \
 * **Restarting** \
 * **Copying** \
 * **InitialReplay** \
 * **Replaying** \
 * **Finalizing** \
 * **Complete** \
 * **Canceled** \
 * **Failed**
 */
export type MongoDbMigrationState = string;

/** Known values of {@link MongoDbReplication} that the service accepts. */
export enum KnownMongoDbReplication {
  /** Disabled */
  Disabled = "Disabled",
  /** OneTime */
  OneTime = "OneTime",
  /** Continuous */
  Continuous = "Continuous"
}

/**
 * Defines values for MongoDbReplication. \
 * {@link KnownMongoDbReplication} can be used interchangeably with MongoDbReplication,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **OneTime** \
 * **Continuous**
 */
export type MongoDbReplication = string;

/** Known values of {@link DataMigrationResultCode} that the service accepts. */
export enum KnownDataMigrationResultCode {
  /** Initial */
  Initial = "Initial",
  /** Completed */
  Completed = "Completed",
  /** ObjectNotExistsInSource */
  ObjectNotExistsInSource = "ObjectNotExistsInSource",
  /** ObjectNotExistsInTarget */
  ObjectNotExistsInTarget = "ObjectNotExistsInTarget",
  /** TargetObjectIsInaccessible */
  TargetObjectIsInaccessible = "TargetObjectIsInaccessible",
  /** FatalError */
  FatalError = "FatalError"
}

/**
 * Defines values for DataMigrationResultCode. \
 * {@link KnownDataMigrationResultCode} can be used interchangeably with DataMigrationResultCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initial** \
 * **Completed** \
 * **ObjectNotExistsInSource** \
 * **ObjectNotExistsInTarget** \
 * **TargetObjectIsInaccessible** \
 * **FatalError**
 */
export type DataMigrationResultCode = string;

/** Known values of {@link ErrorType} that the service accepts. */
export enum KnownErrorType {
  /** Default */
  Default = "Default",
  /** Warning */
  Warning = "Warning",
  /** Error */
  Error = "Error"
}

/**
 * Defines values for ErrorType. \
 * {@link KnownErrorType} can be used interchangeably with ErrorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **Warning** \
 * **Error**
 */
export type ErrorType = string;
/** Defines values for ServerLevelPermissionsGroup. */
export type ServerLevelPermissionsGroup =
  | "Default"
  | "MigrationFromSqlServerToAzureDB"
  | "MigrationFromSqlServerToAzureMI"
  | "MigrationFromMySQLToAzureDBForMySQL";

/** Optional parameters. */
export interface DatabaseMigrationsSqlMiGetOptionalParams
  extends coreClient.OperationOptions {
  /** Optional migration operation ID. If this is provided, then details of migration operation for that ID are retrieved. If not provided (default), then details related to most recent or current operation are retrieved. */
  migrationOperationId?: string;
  /** The child resources to include in the response. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type DatabaseMigrationsSqlMiGetResponse = DatabaseMigrationSqlMi;

/** Optional parameters. */
export interface DatabaseMigrationsSqlMiCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DatabaseMigrationsSqlMiCreateOrUpdateResponse = DatabaseMigrationSqlMi;

/** Optional parameters. */
export interface DatabaseMigrationsSqlMiCancelOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DatabaseMigrationsSqlMiCutoverOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DatabaseMigrationsSqlVmGetOptionalParams
  extends coreClient.OperationOptions {
  /** Optional migration operation ID. If this is provided, then details of migration operation for that ID are retrieved. If not provided (default), then details related to most recent or current operation are retrieved. */
  migrationOperationId?: string;
  /** The child resources to include in the response. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type DatabaseMigrationsSqlVmGetResponse = DatabaseMigrationSqlVm;

/** Optional parameters. */
export interface DatabaseMigrationsSqlVmCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DatabaseMigrationsSqlVmCreateOrUpdateResponse = DatabaseMigrationSqlVm;

/** Optional parameters. */
export interface DatabaseMigrationsSqlVmCancelOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DatabaseMigrationsSqlVmCutoverOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface SqlMigrationServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SqlMigrationServicesGetResponse = SqlMigrationService;

/** Optional parameters. */
export interface SqlMigrationServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SqlMigrationServicesCreateOrUpdateResponse = SqlMigrationService;

/** Optional parameters. */
export interface SqlMigrationServicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface SqlMigrationServicesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type SqlMigrationServicesUpdateResponse = SqlMigrationService;

/** Optional parameters. */
export interface SqlMigrationServicesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type SqlMigrationServicesListByResourceGroupResponse = SqlMigrationListResult;

/** Optional parameters. */
export interface SqlMigrationServicesListAuthKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAuthKeys operation. */
export type SqlMigrationServicesListAuthKeysResponse = AuthenticationKeys;

/** Optional parameters. */
export interface SqlMigrationServicesRegenerateAuthKeysOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regenerateAuthKeys operation. */
export type SqlMigrationServicesRegenerateAuthKeysResponse = RegenAuthKeys;

/** Optional parameters. */
export interface SqlMigrationServicesDeleteNodeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the deleteNode operation. */
export type SqlMigrationServicesDeleteNodeResponse = DeleteNode;

/** Optional parameters. */
export interface SqlMigrationServicesListMigrationsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMigrations operation. */
export type SqlMigrationServicesListMigrationsResponse = DatabaseMigrationListResult;

/** Optional parameters. */
export interface SqlMigrationServicesListMonitoringDataOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMonitoringData operation. */
export type SqlMigrationServicesListMonitoringDataResponse = IntegrationRuntimeMonitoringData;

/** Optional parameters. */
export interface SqlMigrationServicesListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type SqlMigrationServicesListBySubscriptionResponse = SqlMigrationListResult;

/** Optional parameters. */
export interface SqlMigrationServicesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type SqlMigrationServicesListByResourceGroupNextResponse = SqlMigrationListResult;

/** Optional parameters. */
export interface SqlMigrationServicesListMigrationsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMigrationsNext operation. */
export type SqlMigrationServicesListMigrationsNextResponse = DatabaseMigrationListResult;

/** Optional parameters. */
export interface SqlMigrationServicesListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type SqlMigrationServicesListBySubscriptionNextResponse = SqlMigrationListResult;

/** Optional parameters. */
export interface ResourceSkusListSkusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSkus operation. */
export type ResourceSkusListSkusResponse = ResourceSkusResult;

/** Optional parameters. */
export interface ResourceSkusListSkusNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSkusNext operation. */
export type ResourceSkusListSkusNextResponse = ResourceSkusResult;

/** Optional parameters. */
export interface ServicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ServicesCreateOrUpdateResponse = DataMigrationService;

/** Optional parameters. */
export interface ServicesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServicesGetResponse = DataMigrationService;

/** Optional parameters. */
export interface ServicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delete the resource even if it contains running tasks */
  deleteRunningTasks?: boolean;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServicesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ServicesUpdateResponse = DataMigrationService;

/** Optional parameters. */
export interface ServicesCheckStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkStatus operation. */
export type ServicesCheckStatusResponse = DataMigrationServiceStatusResponse;

/** Optional parameters. */
export interface ServicesStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServicesStopOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ServicesListSkusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSkus operation. */
export type ServicesListSkusResponse = ServiceSkuList;

/** Optional parameters. */
export interface ServicesCheckChildrenNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkChildrenNameAvailability operation. */
export type ServicesCheckChildrenNameAvailabilityResponse = NameAvailabilityResponse;

/** Optional parameters. */
export interface ServicesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ServicesListByResourceGroupResponse = DataMigrationServiceList;

/** Optional parameters. */
export interface ServicesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ServicesListResponse = DataMigrationServiceList;

/** Optional parameters. */
export interface ServicesCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type ServicesCheckNameAvailabilityResponse = NameAvailabilityResponse;

/** Optional parameters. */
export interface ServicesListSkusNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSkusNext operation. */
export type ServicesListSkusNextResponse = ServiceSkuList;

/** Optional parameters. */
export interface ServicesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ServicesListByResourceGroupNextResponse = DataMigrationServiceList;

/** Optional parameters. */
export interface ServicesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ServicesListNextResponse = DataMigrationServiceList;

/** Optional parameters. */
export interface TasksListOptionalParams extends coreClient.OperationOptions {
  /** Filter tasks by task type */
  taskType?: string;
}

/** Contains response data for the list operation. */
export type TasksListResponse = TaskList;

/** Optional parameters. */
export interface TasksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type TasksCreateOrUpdateResponse = ProjectTask;

/** Optional parameters. */
export interface TasksGetOptionalParams extends coreClient.OperationOptions {
  /** Expand the response */
  expand?: string;
}

/** Contains response data for the get operation. */
export type TasksGetResponse = ProjectTask;

/** Optional parameters. */
export interface TasksDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delete the resource even if it contains running tasks */
  deleteRunningTasks?: boolean;
}

/** Optional parameters. */
export interface TasksUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type TasksUpdateResponse = ProjectTask;

/** Optional parameters. */
export interface TasksCancelOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the cancel operation. */
export type TasksCancelResponse = ProjectTask;

/** Optional parameters. */
export interface TasksCommandOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the command operation. */
export type TasksCommandResponse = CommandPropertiesUnion;

/** Optional parameters. */
export interface TasksListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Filter tasks by task type */
  taskType?: string;
}

/** Contains response data for the listNext operation. */
export type TasksListNextResponse = TaskList;

/** Optional parameters. */
export interface ServiceTasksListOptionalParams
  extends coreClient.OperationOptions {
  /** Filter tasks by task type */
  taskType?: string;
}

/** Contains response data for the list operation. */
export type ServiceTasksListResponse = TaskList;

/** Optional parameters. */
export interface ServiceTasksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ServiceTasksCreateOrUpdateResponse = ProjectTask;

/** Optional parameters. */
export interface ServiceTasksGetOptionalParams
  extends coreClient.OperationOptions {
  /** Expand the response */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ServiceTasksGetResponse = ProjectTask;

/** Optional parameters. */
export interface ServiceTasksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delete the resource even if it contains running tasks */
  deleteRunningTasks?: boolean;
}

/** Optional parameters. */
export interface ServiceTasksUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ServiceTasksUpdateResponse = ProjectTask;

/** Optional parameters. */
export interface ServiceTasksCancelOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the cancel operation. */
export type ServiceTasksCancelResponse = ProjectTask;

/** Optional parameters. */
export interface ServiceTasksListNextOptionalParams
  extends coreClient.OperationOptions {
  /** Filter tasks by task type */
  taskType?: string;
}

/** Contains response data for the listNext operation. */
export type ServiceTasksListNextResponse = TaskList;

/** Optional parameters. */
export interface ProjectsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ProjectsListResponse = ProjectList;

/** Optional parameters. */
export interface ProjectsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ProjectsCreateOrUpdateResponse = Project;

/** Optional parameters. */
export interface ProjectsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ProjectsGetResponse = Project;

/** Optional parameters. */
export interface ProjectsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delete the resource even if it contains running tasks */
  deleteRunningTasks?: boolean;
}

/** Optional parameters. */
export interface ProjectsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ProjectsUpdateResponse = Project;

/** Optional parameters. */
export interface ProjectsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ProjectsListNextResponse = ProjectList;

/** Optional parameters. */
export interface UsagesListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type UsagesListResponse = QuotaList;

/** Optional parameters. */
export interface UsagesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type UsagesListNextResponse = QuotaList;

/** Optional parameters. */
export interface FilesListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type FilesListResponse = FileList;

/** Optional parameters. */
export interface FilesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type FilesGetResponse = ProjectFile;

/** Optional parameters. */
export interface FilesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type FilesCreateOrUpdateResponse = ProjectFile;

/** Optional parameters. */
export interface FilesDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface FilesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type FilesUpdateResponse = ProjectFile;

/** Optional parameters. */
export interface FilesReadOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the read operation. */
export type FilesReadResponse = FileStorageInfo;

/** Optional parameters. */
export interface FilesReadWriteOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the readWrite operation. */
export type FilesReadWriteResponse = FileStorageInfo;

/** Optional parameters. */
export interface FilesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type FilesListNextResponse = FileList;

/** Optional parameters. */
export interface DataMigrationManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
