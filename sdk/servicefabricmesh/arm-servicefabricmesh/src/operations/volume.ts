/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Volume } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ServiceFabricMeshManagementClient } from "../serviceFabricMeshManagementClient";
import {
  VolumeResourceDescription,
  VolumeListByResourceGroupNextOptionalParams,
  VolumeListByResourceGroupOptionalParams,
  VolumeListBySubscriptionNextOptionalParams,
  VolumeListBySubscriptionOptionalParams,
  VolumeCreateOptionalParams,
  VolumeCreateResponse,
  VolumeGetOptionalParams,
  VolumeGetResponse,
  VolumeDeleteOptionalParams,
  VolumeListByResourceGroupResponse,
  VolumeListBySubscriptionResponse,
  VolumeListByResourceGroupNextResponse,
  VolumeListBySubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Volume operations. */
export class VolumeImpl implements Volume {
  private readonly client: ServiceFabricMeshManagementClient;

  /**
   * Initialize a new instance of the class Volume class.
   * @param client Reference to the service client
   */
  constructor(client: ServiceFabricMeshManagementClient) {
    this.client = client;
  }

  /**
   * Gets the information about all volume resources in a given resource group. The information include
   * the description and other properties of the Volume.
   * @param resourceGroupName Azure resource group name
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: VolumeListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<VolumeResourceDescription> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: VolumeListByResourceGroupOptionalParams
  ): AsyncIterableIterator<VolumeResourceDescription[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: VolumeListByResourceGroupOptionalParams
  ): AsyncIterableIterator<VolumeResourceDescription> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the information about all volume resources in a given resource group. The information include
   * the description and other properties of the volume.
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: VolumeListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<VolumeResourceDescription> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: VolumeListBySubscriptionOptionalParams
  ): AsyncIterableIterator<VolumeResourceDescription[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: VolumeListBySubscriptionOptionalParams
  ): AsyncIterableIterator<VolumeResourceDescription> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Creates a volume resource with the specified name, description and properties. If a volume resource
   * with the same name exists, then it is updated with the specified description and properties.
   * @param resourceGroupName Azure resource group name
   * @param volumeResourceName The identity of the volume.
   * @param volumeResourceDescription Description for creating a Volume resource.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    volumeResourceName: string,
    volumeResourceDescription: VolumeResourceDescription,
    options?: VolumeCreateOptionalParams
  ): Promise<VolumeCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        volumeResourceName,
        volumeResourceDescription,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Gets the information about the volume resource with the given name. The information include the
   * description and other properties of the volume.
   * @param resourceGroupName Azure resource group name
   * @param volumeResourceName The identity of the volume.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    volumeResourceName: string,
    options?: VolumeGetOptionalParams
  ): Promise<VolumeGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, volumeResourceName, options },
      getOperationSpec
    );
  }

  /**
   * Deletes the volume resource identified by the name.
   * @param resourceGroupName Azure resource group name
   * @param volumeResourceName The identity of the volume.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    volumeResourceName: string,
    options?: VolumeDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, volumeResourceName, options },
      deleteOperationSpec
    );
  }

  /**
   * Gets the information about all volume resources in a given resource group. The information include
   * the description and other properties of the Volume.
   * @param resourceGroupName Azure resource group name
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: VolumeListByResourceGroupOptionalParams
  ): Promise<VolumeListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets the information about all volume resources in a given resource group. The information include
   * the description and other properties of the volume.
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: VolumeListBySubscriptionOptionalParams
  ): Promise<VolumeListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName Azure resource group name
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: VolumeListByResourceGroupNextOptionalParams
  ): Promise<VolumeListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: VolumeListBySubscriptionNextOptionalParams
  ): Promise<VolumeListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes/{volumeResourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.VolumeResourceDescription
    },
    201: {
      bodyMapper: Mappers.VolumeResourceDescription
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.volumeResourceDescription,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.volumeResourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes/{volumeResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VolumeResourceDescription
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.volumeResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes/{volumeResourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.volumeResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VolumeResourceDescriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceFabricMesh/volumes",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VolumeResourceDescriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VolumeResourceDescriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VolumeResourceDescriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
