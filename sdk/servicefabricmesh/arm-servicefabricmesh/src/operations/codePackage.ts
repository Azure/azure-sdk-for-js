/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/codePackageMappers";
import * as Parameters from "../models/parameters";
import { ServiceFabricMeshManagementClientContext } from "../serviceFabricMeshManagementClientContext";

/** Class representing a CodePackage. */
export class CodePackage {
  private readonly client: ServiceFabricMeshManagementClientContext;

  /**
   * Create a CodePackage.
   * @param {ServiceFabricMeshManagementClientContext} client Reference to the service client.
   */
  constructor(client: ServiceFabricMeshManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the logs for the container of the specified code package of the service replica.
   * @summary Gets the logs from the container.
   * @param resourceGroupName Azure resource group name
   * @param applicationResourceName The identity of the application.
   * @param serviceResourceName The identity of the service.
   * @param replicaName Service Fabric replica name.
   * @param codePackageName The name of code package of the service.
   * @param [options] The optional parameters
   * @returns Promise<Models.CodePackageGetContainerLogsResponse>
   */
  getContainerLogs(resourceGroupName: string, applicationResourceName: string, serviceResourceName: string, replicaName: string, codePackageName: string, options?: Models.CodePackageGetContainerLogsOptionalParams): Promise<Models.CodePackageGetContainerLogsResponse>;
  /**
   * @param resourceGroupName Azure resource group name
   * @param applicationResourceName The identity of the application.
   * @param serviceResourceName The identity of the service.
   * @param replicaName Service Fabric replica name.
   * @param codePackageName The name of code package of the service.
   * @param callback The callback
   */
  getContainerLogs(resourceGroupName: string, applicationResourceName: string, serviceResourceName: string, replicaName: string, codePackageName: string, callback: msRest.ServiceCallback<Models.ContainerLogs>): void;
  /**
   * @param resourceGroupName Azure resource group name
   * @param applicationResourceName The identity of the application.
   * @param serviceResourceName The identity of the service.
   * @param replicaName Service Fabric replica name.
   * @param codePackageName The name of code package of the service.
   * @param options The optional parameters
   * @param callback The callback
   */
  getContainerLogs(resourceGroupName: string, applicationResourceName: string, serviceResourceName: string, replicaName: string, codePackageName: string, options: Models.CodePackageGetContainerLogsOptionalParams, callback: msRest.ServiceCallback<Models.ContainerLogs>): void;
  getContainerLogs(resourceGroupName: string, applicationResourceName: string, serviceResourceName: string, replicaName: string, codePackageName: string, options?: Models.CodePackageGetContainerLogsOptionalParams | msRest.ServiceCallback<Models.ContainerLogs>, callback?: msRest.ServiceCallback<Models.ContainerLogs>): Promise<Models.CodePackageGetContainerLogsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        applicationResourceName,
        serviceResourceName,
        replicaName,
        codePackageName,
        options
      },
      getContainerLogsOperationSpec,
      callback) as Promise<Models.CodePackageGetContainerLogsResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getContainerLogsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/applications/{applicationResourceName}/services/{serviceResourceName}/replicas/{replicaName}/codePackages/{codePackageName}/logs",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.applicationResourceName,
    Parameters.serviceResourceName,
    Parameters.replicaName,
    Parameters.codePackageName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.tail
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ContainerLogs
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  serializer
};
