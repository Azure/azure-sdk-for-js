/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type ApplicationScopedVolumeCreationParametersUnion =
  | ApplicationScopedVolumeCreationParameters
  | ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk;
export type AutoScalingTriggerUnion =
  | AutoScalingTrigger
  | AverageLoadScalingTrigger;
export type AutoScalingMechanismUnion =
  | AutoScalingMechanism
  | AddRemoveReplicaScalingMechanism;
export type DiagnosticsSinkPropertiesUnion =
  | DiagnosticsSinkProperties
  | AzureInternalMonitoringPipelineSinkDescription;
export type AutoScalingMetricUnion =
  | AutoScalingMetric
  | AutoScalingResourceMetric;
export type SecretResourcePropertiesBaseUnion =
  | SecretResourcePropertiesBase
  | SecretResourcePropertiesUnion;
export type NetworkResourcePropertiesBaseUnion =
  | NetworkResourcePropertiesBase
  | NetworkResourcePropertiesUnion;
export type SecretResourcePropertiesUnion =
  | SecretResourceProperties
  | InlinedValueSecretResourceProperties;
export type NetworkResourcePropertiesUnion =
  | NetworkResourceProperties
  | LocalNetworkResourceProperties;

/** Describes the result of the request to list Service Fabric operations. */
export interface OperationListResult {
  /** List of Service Fabric operations supported by the Microsoft.ServiceFabric resource provider. */
  value?: OperationResult[];
  /**
   * URL to get the next set of operation list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** List of operations available at the listed Azure resource provider. */
export interface OperationResult {
  /** The name of the operation. */
  name?: string;
  /** The object that represents the operation. */
  display?: AvailableOperationDisplay;
  /** Origin result */
  origin?: string;
  /** The URL to use for getting the next set of results. */
  nextLink?: string;
}

/** An operation available at the listed Azure resource provider. */
export interface AvailableOperationDisplay {
  /** Name of the operation provider. */
  provider?: string;
  /** Name of the resource on which the operation is available. */
  resource?: string;
  /** Name of the available operation. */
  operation?: string;
  /** Description of the available operation. */
  description?: string;
}

/** The error details. */
export interface ErrorModel {
  /** Error model information */
  error: ErrorErrorModel;
}

/** Error model information */
export interface ErrorErrorModel {
  code: string;
  /** Error message. */
  message?: string;
  innerError?: string;
  /** List of error message details. */
  details?: ErrorDetailsModel[];
}

/** Error model details information */
export interface ErrorDetailsModel {
  code: string;
  /** Error message. */
  message: string;
}

/** Describes common properties of a provisioned resource. */
export interface ProvisionedResourceProperties {
  /**
   * State of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** The resource model definition for Azure Resource Manager resource. */
export interface Resource {
  /**
   * Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** A pageable list of secret resources. */
export interface SecretResourceDescriptionList {
  /** One page of the list. */
  value?: SecretResourceDescription[];
  /** URI to fetch the next page of the list. */
  nextLink?: string;
}

/** This type describes properties of secret value resource. */
export interface SecretValueProperties {
  /** The actual value of the secret. */
  value?: string;
}

/** A pageable list of values of a secret resource. The information does not include only the name of the value and not the actual unencrypted value. */
export interface SecretValueResourceDescriptionList {
  /** One page of the list. */
  value?: SecretValueResourceDescription[];
  /** URI to fetch the next page of the list. */
  nextLink?: string;
}

/** This type represents the unencrypted value of the secret. */
export interface SecretValue {
  /** The actual value of the secret. */
  value?: string;
}

/** Describes properties of a volume resource. */
export interface VolumeProperties {
  /** User readable description of the volume. */
  description?: string;
  /**
   * Status of the volume.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ResourceStatus;
  /**
   * Gives additional information about the current status of the volume.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /** Provider of the volume. */
  provider: VolumeProvider;
  /** This type describes a volume provided by an Azure Files file share. */
  azureFileParameters?: VolumeProviderParametersAzureFile;
}

/** This type describes a volume provided by an Azure Files file share. */
export interface VolumeProviderParametersAzureFile {
  /** Name of the Azure storage account for the File Share. */
  accountName: string;
  /** Access key of the Azure storage account for the File Share. */
  accountKey?: string;
  /** Name of the Azure Files file share that provides storage for the volume. */
  shareName: string;
}

/** A pageable list of volume resources. */
export interface VolumeResourceDescriptionList {
  /** One page of the list. */
  value?: VolumeResourceDescription[];
  /** URI to fetch the next page of the list. */
  nextLink?: string;
}

/** A pageable list of network resources. */
export interface NetworkResourceDescriptionList {
  /** One page of the list. */
  value?: NetworkResourceDescription[];
  /** URI to fetch the next page of the list. */
  nextLink?: string;
}

/** Describes properties of a gateway resource. */
export interface GatewayProperties {
  /** User readable description of the gateway. */
  description?: string;
  /** Network the gateway should listen on for requests. */
  sourceNetwork: NetworkRef;
  /** Network that the Application is using. */
  destinationNetwork: NetworkRef;
  /** Configuration for tcp connectivity for this gateway. */
  tcp?: TcpConfig[];
  /** Configuration for http connectivity for this gateway. */
  http?: HttpConfig[];
  /**
   * Status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ResourceStatus;
  /**
   * Gives additional information about the current status of the gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /**
   * IP address of the gateway. This is populated in the response and is ignored for incoming requests.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddress?: string;
}

/** Describes a network reference in a service. */
export interface NetworkRef {
  /** Name of the network */
  name?: string;
  /** A list of endpoints that are exposed on this network. */
  endpointRefs?: EndpointRef[];
}

/** Describes a reference to a service endpoint. */
export interface EndpointRef {
  /** Name of the endpoint. */
  name?: string;
}

/** Describes the tcp configuration for external connectivity for this network. */
export interface TcpConfig {
  /** tcp gateway config name. */
  name: string;
  /** Specifies the port at which the service endpoint below needs to be exposed. */
  port: number;
  /** Describes destination endpoint for routing traffic. */
  destination: GatewayDestination;
}

/** Describes destination endpoint for routing traffic. */
export interface GatewayDestination {
  /** Name of the service fabric Mesh application. */
  applicationName: string;
  /** service that contains the endpoint. */
  serviceName: string;
  /** name of the endpoint in the service. */
  endpointName: string;
}

/** Describes the http configuration for external connectivity for this network. */
export interface HttpConfig {
  /** http gateway config name. */
  name: string;
  /** Specifies the port at which the service endpoint below needs to be exposed. */
  port: number;
  /** description for routing. */
  hosts: HttpHostConfig[];
}

/** Describes the hostname properties for http routing. */
export interface HttpHostConfig {
  /** http hostname config name. */
  name: string;
  /** Route information to use for routing. Routes are processed in the order they are specified. Specify routes that are more specific before routes that can handle general cases. */
  routes: HttpRouteConfig[];
}

/** Describes the hostname properties for http routing. */
export interface HttpRouteConfig {
  /** http route name. */
  name: string;
  /** Describes a rule for http route matching. */
  match: HttpRouteMatchRule;
  /** Describes destination endpoint for routing traffic. */
  destination: GatewayDestination;
}

/** Describes a rule for http route matching. */
export interface HttpRouteMatchRule {
  /** Path to match for routing. */
  path: HttpRouteMatchPath;
  /** headers and their values to match in request. */
  headers?: HttpRouteMatchHeader[];
}

/** Path to match for routing. */
export interface HttpRouteMatchPath {
  /** Uri path to match for request. */
  value: string;
  /** replacement string for matched part of the Uri. */
  rewrite?: string;
  /** how to match value in the Uri */
  type: PathMatchType;
}

/** Describes header information for http route matching. */
export interface HttpRouteMatchHeader {
  /** Name of header to match in request. */
  name: string;
  /** Value of header to match in request. */
  value?: string;
  /** how to match header value */
  type?: HeaderMatchType;
}

/** A pageable list of gateway resources. */
export interface GatewayResourceDescriptionList {
  /** One page of the list. */
  value?: GatewayResourceDescription[];
  /** URI to fetch the next page of the list. */
  nextLink?: string;
}

/** Describes properties of a application resource. */
export interface ApplicationProperties {
  /** User readable description of the application. */
  description?: string;
  /** Describes the services in the application. This property is used to create or modify services of the application. On get only the name of the service is returned. The service description can be obtained by querying for the service resource. */
  services?: ServiceResourceDescription[];
  /** Describes the diagnostics definition and usage for an application resource. */
  diagnostics?: DiagnosticsDescription;
  /** Internal - used by Visual Studio to setup the debugging session on the local development environment. */
  debugParams?: string;
  /**
   * Names of the services in the application.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serviceNames?: string[];
  /**
   * Status of the application.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ResourceStatus;
  /**
   * Gives additional information about the current status of the application.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /**
   * Describes the health state of an application resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthState?: HealthState;
  /**
   * When the application's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the application is marked unhealthy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly unhealthyEvaluation?: string;
}

/** Describes the properties of a service replica. */
export interface ServiceReplicaProperties {
  /** The operation system required by the code in service. */
  osType: OperatingSystemType;
  /** Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.). */
  codePackages: ContainerCodePackageProperties[];
  /** The names of the private networks that this service needs to be part of. */
  networkRefs?: NetworkRef[];
  /** Reference to sinks in DiagnosticsDescription. */
  diagnostics?: DiagnosticsRef;
}

/** Describes a container and its runtime properties. */
export interface ContainerCodePackageProperties {
  /** The name of the code package. */
  name: string;
  /** The Container image to use. */
  image: string;
  /** Image registry credential. */
  imageRegistryCredential?: ImageRegistryCredential;
  /** Override for the default entry point in the container. */
  entrypoint?: string;
  /** Command array to execute within the container in exec form. */
  commands?: string[];
  /** The environment variables to set in this container */
  environmentVariables?: EnvironmentVariable[];
  /** The settings to set in this container. The setting file path can be fetched from environment variable "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is "/var/secrets". */
  settings?: Setting[];
  /** The labels to set in this container. */
  labels?: ContainerLabel[];
  /** The endpoints exposed by this container. */
  endpoints?: EndpointProperties[];
  /** The resources required by this container. */
  resources: ResourceRequirements;
  /** Volumes to be attached to the container. The lifetime of these volumes is independent of the application's lifetime. */
  volumeRefs?: VolumeReference[];
  /** Volumes to be attached to the container. The lifetime of these volumes is scoped to the application's lifetime. */
  volumes?: ApplicationScopedVolume[];
  /** Reference to sinks in DiagnosticsDescription. */
  diagnostics?: DiagnosticsRef;
  /** A list of ReliableCollection resources used by this particular code package. Please refer to ReliableCollectionsRef for more details. */
  reliableCollectionsRefs?: ReliableCollectionsRef[];
  /**
   * Runtime information of a container instance.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly instanceView?: ContainerInstanceView;
}

/** Image registry credential. */
export interface ImageRegistryCredential {
  /** Docker image registry server, without protocol such as `http` and `https`. */
  server: string;
  /** The username for the private registry. */
  username: string;
  /** The password for the private registry. The password is required for create or update operations, however it is not returned in the get or list operations. */
  password?: string;
}

/** Describes an environment variable for the container. */
export interface EnvironmentVariable {
  /** The name of the environment variable. */
  name?: string;
  /** The value of the environment variable. */
  value?: string;
}

/** Describes a setting for the container. The setting file path can be fetched from environment variable "Fabric_SettingPath". The path for Windows container is "C:\\secrets". The path for Linux container is "/var/secrets". */
export interface Setting {
  /** The name of the setting. */
  name?: string;
  /** The value of the setting. */
  value?: string;
}

/** Describes a container label. */
export interface ContainerLabel {
  /** The name of the container label. */
  name: string;
  /** The value of the container label. */
  value: string;
}

/** Describes a container endpoint. */
export interface EndpointProperties {
  /** The name of the endpoint. */
  name: string;
  /** Port used by the container. */
  port?: number;
}

/** This type describes the resource requirements for a container or a service. */
export interface ResourceRequirements {
  /** Describes the requested resources for a given container. */
  requests: ResourceRequests;
  /** Describes the maximum limits on the resources for a given container. */
  limits?: ResourceLimits;
}

/** This type describes the requested resources for a given container. It describes the least amount of resources required for the container. A container can consume more than requested resources up to the specified limits before being restarted. Currently, the requested resources are treated as limits. */
export interface ResourceRequests {
  /** The memory request in GB for this container. */
  memoryInGB: number;
  /** Requested number of CPU cores. At present, only full cores are supported. */
  cpu: number;
}

/** This type describes the resource limits for a given container. It describes the most amount of resources a container is allowed to use before being restarted. */
export interface ResourceLimits {
  /** The memory limit in GB. */
  memoryInGB?: number;
  /** CPU limits in cores. At present, only full cores are supported. */
  cpu?: number;
}

/** Describes a reference to a volume resource. */
export interface VolumeReference {
  /** Name of the volume being referenced. */
  name: string;
  /** The flag indicating whether the volume is read only. Default is 'false'. */
  readOnly?: boolean;
  /** The path within the container at which the volume should be mounted. Only valid path characters are allowed. */
  destinationPath: string;
}

/** Describes parameters for creating application-scoped volumes. */
export interface ApplicationScopedVolumeCreationParameters {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "ServiceFabricVolumeDisk";
  /** User readable description of the volume. */
  description?: string;
}

/** Reference to sinks in DiagnosticsDescription. */
export interface DiagnosticsRef {
  /** Status of whether or not sinks are enabled. */
  enabled?: boolean;
  /** List of sinks to be used if enabled. References the list of sinks in DiagnosticsDescription. */
  sinkRefs?: string[];
}

/** Specifying this parameter adds support for reliable collections */
export interface ReliableCollectionsRef {
  /** Name of ReliableCollection resource. Right now it's not used and you can use any string. */
  name: string;
  /** False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache. */
  doNotPersistState?: boolean;
}

/** Runtime information of a container instance. */
export interface ContainerInstanceView {
  /** The number of times the container has been restarted. */
  restartCount?: number;
  /** Current container instance state. */
  currentState?: ContainerState;
  /** Previous container instance state. */
  previousState?: ContainerState;
  /** The events of this container instance. */
  events?: ContainerEvent[];
}

/** The container state. */
export interface ContainerState {
  /** The state of this container */
  state?: string;
  /** Date/time when the container state started. */
  startTime?: Date;
  /** The container exit code. */
  exitCode?: string;
  /** Date/time when the container state finished. */
  finishTime?: Date;
  /** Human-readable status of this state. */
  detailStatus?: string;
}

/** A container event. */
export interface ContainerEvent {
  /** The name of the container event. */
  name?: string;
  /** The count of the event. */
  count?: number;
  /** Date/time of the first event. */
  firstTimestamp?: string;
  /** Date/time of the last event. */
  lastTimestamp?: string;
  /** The event message */
  message?: string;
  /** The event type. */
  type?: string;
}

/** Describes properties of a service resource. */
export interface ServiceProperties {
  /** User readable description of the service. */
  description?: string;
  /** The number of replicas of the service to create. Defaults to 1 if not specified. */
  replicaCount?: number;
  /** Auto scaling policies */
  autoScalingPolicies?: AutoScalingPolicy[];
  /**
   * Status of the service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ResourceStatus;
  /**
   * Gives additional information about the current status of the service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /**
   * Describes the health state of an application resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthState?: HealthState;
  /**
   * When the service's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the service is marked unhealthy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly unhealthyEvaluation?: string;
}

/** Describes the auto scaling policy */
export interface AutoScalingPolicy {
  /** The name of the auto scaling policy. */
  name: string;
  /** Determines when auto scaling operation will be invoked. */
  trigger: AutoScalingTriggerUnion;
  /** The mechanism that is used to scale when auto scaling operation is invoked. */
  mechanism: AutoScalingMechanismUnion;
}

/** Describes the trigger for performing auto scaling operation. */
export interface AutoScalingTrigger {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AverageLoad";
}

/** Describes the mechanism for performing auto scaling operation. Derived classes will describe the actual mechanism. */
export interface AutoScalingMechanism {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AddRemoveReplica";
}

/** The resource model definition for Azure Resource Manager proxy resource. It will have everything other than required location and tags. This proxy resource is explicitly created or updated by including it in the parent resource. */
export interface ManagedProxyResource {
  /**
   * Fully qualified identifier for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The name of the resource */
  name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Describes the diagnostics options available */
export interface DiagnosticsDescription {
  /** List of supported sinks that can be referenced. */
  sinks?: DiagnosticsSinkPropertiesUnion[];
  /** Status of whether or not sinks are enabled. */
  enabled?: boolean;
  /** The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level. */
  defaultSinkRefs?: string[];
}

/** Properties of a DiagnosticsSink. */
export interface DiagnosticsSinkProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AzureInternalMonitoringPipeline";
  /** Name of the sink. This value is referenced by DiagnosticsReferenceDescription */
  name?: string;
  /** A description of the sink. */
  description?: string;
}

/** A pageable list of application resources. */
export interface ApplicationResourceDescriptionList {
  /** One page of the list. */
  value?: ApplicationResourceDescription[];
  /** URI to fetch the next page of the list. */
  nextLink?: string;
}

/** A pageable list of service resources. */
export interface ServiceResourceDescriptionList {
  /** One page of the list. */
  value?: ServiceResourceDescription[];
  /** URI to fetch the next page of the list. */
  nextLink?: string;
}

/** A pageable list of service replicas. */
export interface ServiceReplicaDescriptionList {
  /** One page of the list. */
  value?: ServiceReplicaDescription[];
  /** URI to fetch the next page of the list. */
  nextLink?: string;
}

/** Container logs. */
export interface ContainerLogs {
  /** Container logs. */
  content?: string;
}

/** Describes the metric that is used for triggering auto scaling operation. Derived classes will describe resources or metrics. */
export interface AutoScalingMetric {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Resource";
}

/** This type describes the properties of a secret resource, including its kind. */
export interface SecretResourcePropertiesBase
  extends ProvisionedResourceProperties {
  /** Describes the kind of secret. */
  kind: SecretKind;
}

/** This type describes properties of a secret value resource. */
export interface SecretValueResourceProperties
  extends ProvisionedResourceProperties,
    SecretValueProperties {}

/** This type describes properties of a volume resource. */
export interface VolumeResourceProperties
  extends ProvisionedResourceProperties,
    VolumeProperties {}

/** This type describes the properties of a network resource, including its kind. */
export interface NetworkResourcePropertiesBase
  extends ProvisionedResourceProperties {
  /** The type of a Service Fabric container network. */
  kind: NetworkKind;
}

/** This type describes properties of a gateway resource. */
export interface GatewayResourceProperties
  extends ProvisionedResourceProperties,
    GatewayProperties {}

/** This type describes properties of a service resource. */
export interface ServiceResourceProperties
  extends ProvisionedResourceProperties,
    ServiceReplicaProperties,
    ServiceProperties {}

/** This type describes properties of an application resource. */
export interface ApplicationResourceProperties
  extends ProvisionedResourceProperties,
    ApplicationProperties {}

/** The resource model definition for Azure Resource Manager tracked top-level resource. */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for Azure Resource Manager proxy resource. It will have everything other than required location and tags. */
export interface ProxyResource extends Resource {}

/** Describes a replica of a service resource. */
export interface ServiceReplicaDescription extends ServiceReplicaProperties {
  /** Name of the replica. */
  replicaName: string;
}

/** Describes a volume whose lifetime is scoped to the application's lifetime. */
export interface ApplicationScopedVolume extends VolumeReference {
  /** Describes parameters for creating application-scoped volumes. */
  creationParameters: ApplicationScopedVolumeCreationParametersUnion;
}

/** Describes parameters for creating application-scoped volumes provided by Service Fabric Volume Disks */
export interface ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk
  extends ApplicationScopedVolumeCreationParameters {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "ServiceFabricVolumeDisk";
  /** Volume size */
  sizeDisk: SizeTypes;
}

/** Describes the average load trigger used for auto scaling. */
export interface AverageLoadScalingTrigger extends AutoScalingTrigger {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AverageLoad";
  /** Description of the metric that is used for scaling. */
  metric: AutoScalingMetricUnion;
  /** Lower load threshold (if average load is below this threshold, service will scale down). */
  lowerLoadThreshold: number;
  /** Upper load threshold (if average load is above this threshold, service will scale up). */
  upperLoadThreshold: number;
  /** Scale interval that indicates how often will this trigger be checked. */
  scaleIntervalInSeconds: number;
}

/** Describes the horizontal auto scaling mechanism that adds or removes replicas (containers or container groups). */
export interface AddRemoveReplicaScalingMechanism extends AutoScalingMechanism {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AddRemoveReplica";
  /** Minimum number of containers (scale down won't be performed below this number). */
  minCount: number;
  /** Maximum number of containers (scale up won't be performed above this number). */
  maxCount: number;
  /** Each time auto scaling is performed, this number of containers will be added or removed. */
  scaleIncrement: number;
}

/** This type describes a service resource. */
export interface ServiceResourceDescription extends ManagedProxyResource {
  /**
   * State of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The operation system required by the code in service. */
  osType: OperatingSystemType;
  /** Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.). */
  codePackages: ContainerCodePackageProperties[];
  /** The names of the private networks that this service needs to be part of. */
  networkRefs?: NetworkRef[];
  /** Reference to sinks in DiagnosticsDescription. */
  diagnostics?: DiagnosticsRef;
  /** User readable description of the service. */
  description?: string;
  /** The number of replicas of the service to create. Defaults to 1 if not specified. */
  replicaCount?: number;
  /** Auto scaling policies */
  autoScalingPolicies?: AutoScalingPolicy[];
  /**
   * Status of the service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ResourceStatus;
  /**
   * Gives additional information about the current status of the service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /**
   * Describes the health state of an application resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthState?: HealthState;
  /**
   * When the service's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the service is marked unhealthy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly unhealthyEvaluation?: string;
}

/** Diagnostics settings for Geneva. */
export interface AzureInternalMonitoringPipelineSinkDescription
  extends DiagnosticsSinkProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "AzureInternalMonitoringPipeline";
  /** Azure Internal monitoring pipeline account. */
  accountName?: string;
  /** Azure Internal monitoring pipeline account namespace. */
  namespace?: string;
  /** Azure Internal monitoring agent configuration. */
  maConfigUrl?: string;
  /** Azure Internal monitoring agent fluentd configuration. */
  fluentdConfigUrl?: any;
  /** Azure Internal monitoring pipeline autokey associated with the certificate. */
  autoKeyConfigUrl?: string;
}

/** Describes the resource that is used for triggering auto scaling. */
export interface AutoScalingResourceMetric extends AutoScalingMetric {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Resource";
  /** Name of the resource. */
  name: AutoScalingResourceMetricName;
}

/** Describes the properties of a secret resource. */
export interface SecretResourceProperties extends SecretResourcePropertiesBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "SecretResourceProperties" | "inlinedValue";
  /** User readable description of the secret. */
  description?: string;
  /**
   * Status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ResourceStatus;
  /**
   * Gives additional information about the current status of the secret.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /** The type of the content stored in the secret value. The value of this property is opaque to Service Fabric. Once set, the value of this property cannot be changed. */
  contentType?: string;
}

/** Describes properties of a network resource. */
export interface NetworkResourceProperties
  extends NetworkResourcePropertiesBase {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "NetworkResourceProperties" | "Local";
  /** User readable description of the network. */
  description?: string;
  /**
   * Status of the network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ResourceStatus;
  /**
   * Gives additional information about the current status of the network.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
}

/** This type describes a secret resource. */
export interface SecretResourceDescription extends TrackedResource {
  /** Describes the properties of a secret resource. */
  properties: SecretResourcePropertiesUnion;
}

/** This type describes a value of a secret resource. The name of this resource is the version identifier corresponding to this secret value. */
export interface SecretValueResourceDescription extends TrackedResource {
  /**
   * State of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The actual value of the secret. */
  value?: string;
}

/** This type describes a volume resource. */
export interface VolumeResourceDescription extends TrackedResource {
  /**
   * State of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** User readable description of the volume. */
  description?: string;
  /**
   * Status of the volume.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ResourceStatus;
  /**
   * Gives additional information about the current status of the volume.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /** Provider of the volume. */
  provider: VolumeProvider;
  /** This type describes a volume provided by an Azure Files file share. */
  azureFileParameters?: VolumeProviderParametersAzureFile;
}

/** This type describes a network resource. */
export interface NetworkResourceDescription extends TrackedResource {
  /** Describes properties of a network resource. */
  properties: NetworkResourcePropertiesUnion;
}

/** This type describes a gateway resource. */
export interface GatewayResourceDescription extends TrackedResource {
  /**
   * State of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** User readable description of the gateway. */
  description?: string;
  /** Network the gateway should listen on for requests. */
  sourceNetwork: NetworkRef;
  /** Network that the Application is using. */
  destinationNetwork: NetworkRef;
  /** Configuration for tcp connectivity for this gateway. */
  tcp?: TcpConfig[];
  /** Configuration for http connectivity for this gateway. */
  http?: HttpConfig[];
  /**
   * Status of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ResourceStatus;
  /**
   * Gives additional information about the current status of the gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /**
   * IP address of the gateway. This is populated in the response and is ignored for incoming requests.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ipAddress?: string;
}

/** This type describes an application resource. */
export interface ApplicationResourceDescription extends TrackedResource {
  /**
   * State of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** User readable description of the application. */
  description?: string;
  /** Describes the services in the application. This property is used to create or modify services of the application. On get only the name of the service is returned. The service description can be obtained by querying for the service resource. */
  services?: ServiceResourceDescription[];
  /** Describes the diagnostics definition and usage for an application resource. */
  diagnostics?: DiagnosticsDescription;
  /** Internal - used by Visual Studio to setup the debugging session on the local development environment. */
  debugParams?: string;
  /**
   * Names of the services in the application.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly serviceNames?: string[];
  /**
   * Status of the application.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: ResourceStatus;
  /**
   * Gives additional information about the current status of the application.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /**
   * Describes the health state of an application resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly healthState?: HealthState;
  /**
   * When the application's health state is not 'Ok', this additional details from service fabric Health Manager for the user to know why the application is marked unhealthy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly unhealthyEvaluation?: string;
}

/** Describes the properties of a secret resource whose value is provided explicitly as plaintext. The secret resource may have multiple values, each being uniquely versioned. The secret value of each version is stored encrypted, and delivered as plaintext into the context of applications referencing it. */
export interface InlinedValueSecretResourceProperties
  extends SecretResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "inlinedValue";
}

/** Information about a Service Fabric container network local to a single Service Fabric cluster. */
export interface LocalNetworkResourceProperties
  extends NetworkResourceProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "Local";
  /** Address space for the local container network. */
  networkAddressPrefix?: string;
}

/** Known values of {@link ResourceStatus} that the service accepts. */
export enum KnownResourceStatus {
  /** Indicates the resource status is unknown. The value is zero. */
  Unknown = "Unknown",
  /** Indicates the resource is ready. The value is 1. */
  Ready = "Ready",
  /** Indicates the resource is upgrading. The value is 2. */
  Upgrading = "Upgrading",
  /** Indicates the resource is being created. The value is 3. */
  Creating = "Creating",
  /** Indicates the resource is being deleted. The value is 4. */
  Deleting = "Deleting",
  /** Indicates the resource is not functional due to persistent failures. See statusDetails property for more details. The value is 5. */
  Failed = "Failed"
}

/**
 * Defines values for ResourceStatus. \
 * {@link KnownResourceStatus} can be used interchangeably with ResourceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Indicates the resource status is unknown. The value is zero. \
 * **Ready**: Indicates the resource is ready. The value is 1. \
 * **Upgrading**: Indicates the resource is upgrading. The value is 2. \
 * **Creating**: Indicates the resource is being created. The value is 3. \
 * **Deleting**: Indicates the resource is being deleted. The value is 4. \
 * **Failed**: Indicates the resource is not functional due to persistent failures. See statusDetails property for more details. The value is 5.
 */
export type ResourceStatus = string;

/** Known values of {@link SecretKind} that the service accepts. */
export enum KnownSecretKind {
  /** A simple secret resource whose plaintext value is provided by the user. */
  InlinedValue = "inlinedValue"
}

/**
 * Defines values for SecretKind. \
 * {@link KnownSecretKind} can be used interchangeably with SecretKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **inlinedValue**: A simple secret resource whose plaintext value is provided by the user.
 */
export type SecretKind = string;

/** Known values of {@link VolumeProvider} that the service accepts. */
export enum KnownVolumeProvider {
  /** Provides volumes that are backed by Azure Files. */
  SFAzureFile = "SFAzureFile"
}

/**
 * Defines values for VolumeProvider. \
 * {@link KnownVolumeProvider} can be used interchangeably with VolumeProvider,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SFAzureFile**: Provides volumes that are backed by Azure Files.
 */
export type VolumeProvider = string;

/** Known values of {@link NetworkKind} that the service accepts. */
export enum KnownNetworkKind {
  /** Indicates a container network local to a single Service Fabric cluster. The value is 1. */
  Local = "Local"
}

/**
 * Defines values for NetworkKind. \
 * {@link KnownNetworkKind} can be used interchangeably with NetworkKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Local**: Indicates a container network local to a single Service Fabric cluster. The value is 1.
 */
export type NetworkKind = string;

/** Known values of {@link PathMatchType} that the service accepts. */
export enum KnownPathMatchType {
  /** Prefix */
  Prefix = "prefix"
}

/**
 * Defines values for PathMatchType. \
 * {@link KnownPathMatchType} can be used interchangeably with PathMatchType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **prefix**
 */
export type PathMatchType = string;

/** Known values of {@link HeaderMatchType} that the service accepts. */
export enum KnownHeaderMatchType {
  /** Exact */
  Exact = "exact"
}

/**
 * Defines values for HeaderMatchType. \
 * {@link KnownHeaderMatchType} can be used interchangeably with HeaderMatchType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **exact**
 */
export type HeaderMatchType = string;

/** Known values of {@link OperatingSystemType} that the service accepts. */
export enum KnownOperatingSystemType {
  /** The required operating system is Linux. */
  Linux = "Linux",
  /** The required operating system is Windows. */
  Windows = "Windows"
}

/**
 * Defines values for OperatingSystemType. \
 * {@link KnownOperatingSystemType} can be used interchangeably with OperatingSystemType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Linux**: The required operating system is Linux. \
 * **Windows**: The required operating system is Windows.
 */
export type OperatingSystemType = string;

/** Known values of {@link ApplicationScopedVolumeKind} that the service accepts. */
export enum KnownApplicationScopedVolumeKind {
  /** Provides Service Fabric High Availability Volume Disk */
  ServiceFabricVolumeDisk = "ServiceFabricVolumeDisk"
}

/**
 * Defines values for ApplicationScopedVolumeKind. \
 * {@link KnownApplicationScopedVolumeKind} can be used interchangeably with ApplicationScopedVolumeKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ServiceFabricVolumeDisk**: Provides Service Fabric High Availability Volume Disk
 */
export type ApplicationScopedVolumeKind = string;

/** Known values of {@link AutoScalingTriggerKind} that the service accepts. */
export enum KnownAutoScalingTriggerKind {
  /** Indicates that scaling should be performed based on average load of all replicas in the service. */
  AverageLoad = "AverageLoad"
}

/**
 * Defines values for AutoScalingTriggerKind. \
 * {@link KnownAutoScalingTriggerKind} can be used interchangeably with AutoScalingTriggerKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AverageLoad**: Indicates that scaling should be performed based on average load of all replicas in the service.
 */
export type AutoScalingTriggerKind = string;

/** Known values of {@link AutoScalingMechanismKind} that the service accepts. */
export enum KnownAutoScalingMechanismKind {
  /** Indicates that scaling should be performed by adding or removing replicas. */
  AddRemoveReplica = "AddRemoveReplica"
}

/**
 * Defines values for AutoScalingMechanismKind. \
 * {@link KnownAutoScalingMechanismKind} can be used interchangeably with AutoScalingMechanismKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AddRemoveReplica**: Indicates that scaling should be performed by adding or removing replicas.
 */
export type AutoScalingMechanismKind = string;

/** Known values of {@link HealthState} that the service accepts. */
export enum KnownHealthState {
  /** Indicates an invalid health state. All Service Fabric enumerations have the invalid type. The value is zero. */
  Invalid = "Invalid",
  /** Indicates the health state is okay. The value is 1. */
  Ok = "Ok",
  /** Indicates the health state is at a warning level. The value is 2. */
  Warning = "Warning",
  /** Indicates the health state is at an error level. Error health state should be investigated, as they can impact the correct functionality of the cluster. The value is 3. */
  Error = "Error",
  /** Indicates an unknown health status. The value is 65535. */
  Unknown = "Unknown"
}

/**
 * Defines values for HealthState. \
 * {@link KnownHealthState} can be used interchangeably with HealthState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid**: Indicates an invalid health state. All Service Fabric enumerations have the invalid type. The value is zero. \
 * **Ok**: Indicates the health state is okay. The value is 1. \
 * **Warning**: Indicates the health state is at a warning level. The value is 2. \
 * **Error**: Indicates the health state is at an error level. Error health state should be investigated, as they can impact the correct functionality of the cluster. The value is 3. \
 * **Unknown**: Indicates an unknown health status. The value is 65535.
 */
export type HealthState = string;

/** Known values of {@link DiagnosticsSinkKind} that the service accepts. */
export enum KnownDiagnosticsSinkKind {
  /** Indicates an invalid sink kind. All Service Fabric enumerations have the invalid type. */
  Invalid = "Invalid",
  /** Diagnostics settings for Geneva. */
  AzureInternalMonitoringPipeline = "AzureInternalMonitoringPipeline"
}

/**
 * Defines values for DiagnosticsSinkKind. \
 * {@link KnownDiagnosticsSinkKind} can be used interchangeably with DiagnosticsSinkKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid**: Indicates an invalid sink kind. All Service Fabric enumerations have the invalid type. \
 * **AzureInternalMonitoringPipeline**: Diagnostics settings for Geneva.
 */
export type DiagnosticsSinkKind = string;

/** Known values of {@link SizeTypes} that the service accepts. */
export enum KnownSizeTypes {
  /** Small */
  Small = "Small",
  /** Medium */
  Medium = "Medium",
  /** Large */
  Large = "Large"
}

/**
 * Defines values for SizeTypes. \
 * {@link KnownSizeTypes} can be used interchangeably with SizeTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Small** \
 * **Medium** \
 * **Large**
 */
export type SizeTypes = string;

/** Known values of {@link AutoScalingMetricKind} that the service accepts. */
export enum KnownAutoScalingMetricKind {
  /** Indicates that the metric is one of resources, like cpu or memory. */
  Resource = "Resource"
}

/**
 * Defines values for AutoScalingMetricKind. \
 * {@link KnownAutoScalingMetricKind} can be used interchangeably with AutoScalingMetricKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Resource**: Indicates that the metric is one of resources, like cpu or memory.
 */
export type AutoScalingMetricKind = string;

/** Known values of {@link AutoScalingResourceMetricName} that the service accepts. */
export enum KnownAutoScalingResourceMetricName {
  /** Indicates that the resource is CPU cores. */
  Cpu = "cpu",
  /** Indicates that the resource is memory in GB. */
  MemoryInGB = "memoryInGB"
}

/**
 * Defines values for AutoScalingResourceMetricName. \
 * {@link KnownAutoScalingResourceMetricName} can be used interchangeably with AutoScalingResourceMetricName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **cpu**: Indicates that the resource is CPU cores. \
 * **memoryInGB**: Indicates that the resource is memory in GB.
 */
export type AutoScalingResourceMetricName = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface SecretCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type SecretCreateResponse = SecretResourceDescription;

/** Optional parameters. */
export interface SecretGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SecretGetResponse = SecretResourceDescription;

/** Optional parameters. */
export interface SecretDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface SecretListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type SecretListByResourceGroupResponse = SecretResourceDescriptionList;

/** Optional parameters. */
export interface SecretListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type SecretListBySubscriptionResponse = SecretResourceDescriptionList;

/** Optional parameters. */
export interface SecretListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type SecretListByResourceGroupNextResponse = SecretResourceDescriptionList;

/** Optional parameters. */
export interface SecretListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type SecretListBySubscriptionNextResponse = SecretResourceDescriptionList;

/** Optional parameters. */
export interface SecretValueCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type SecretValueCreateResponse = SecretValueResourceDescription;

/** Optional parameters. */
export interface SecretValueGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SecretValueGetResponse = SecretValueResourceDescription;

/** Optional parameters. */
export interface SecretValueDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface SecretValueListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SecretValueListResponse = SecretValueResourceDescriptionList;

/** Optional parameters. */
export interface SecretValueListValueOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listValue operation. */
export type SecretValueListValueResponse = SecretValue;

/** Optional parameters. */
export interface SecretValueListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SecretValueListNextResponse = SecretValueResourceDescriptionList;

/** Optional parameters. */
export interface VolumeCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type VolumeCreateResponse = VolumeResourceDescription;

/** Optional parameters. */
export interface VolumeGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VolumeGetResponse = VolumeResourceDescription;

/** Optional parameters. */
export interface VolumeDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface VolumeListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type VolumeListByResourceGroupResponse = VolumeResourceDescriptionList;

/** Optional parameters. */
export interface VolumeListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type VolumeListBySubscriptionResponse = VolumeResourceDescriptionList;

/** Optional parameters. */
export interface VolumeListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type VolumeListByResourceGroupNextResponse = VolumeResourceDescriptionList;

/** Optional parameters. */
export interface VolumeListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type VolumeListBySubscriptionNextResponse = VolumeResourceDescriptionList;

/** Optional parameters. */
export interface NetworkCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type NetworkCreateResponse = NetworkResourceDescription;

/** Optional parameters. */
export interface NetworkGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type NetworkGetResponse = NetworkResourceDescription;

/** Optional parameters. */
export interface NetworkDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface NetworkListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type NetworkListByResourceGroupResponse = NetworkResourceDescriptionList;

/** Optional parameters. */
export interface NetworkListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type NetworkListBySubscriptionResponse = NetworkResourceDescriptionList;

/** Optional parameters. */
export interface NetworkListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type NetworkListByResourceGroupNextResponse = NetworkResourceDescriptionList;

/** Optional parameters. */
export interface NetworkListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type NetworkListBySubscriptionNextResponse = NetworkResourceDescriptionList;

/** Optional parameters. */
export interface GatewayCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type GatewayCreateResponse = GatewayResourceDescription;

/** Optional parameters. */
export interface GatewayGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GatewayGetResponse = GatewayResourceDescription;

/** Optional parameters. */
export interface GatewayDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface GatewayListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type GatewayListByResourceGroupResponse = GatewayResourceDescriptionList;

/** Optional parameters. */
export interface GatewayListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type GatewayListBySubscriptionResponse = GatewayResourceDescriptionList;

/** Optional parameters. */
export interface GatewayListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type GatewayListByResourceGroupNextResponse = GatewayResourceDescriptionList;

/** Optional parameters. */
export interface GatewayListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type GatewayListBySubscriptionNextResponse = GatewayResourceDescriptionList;

/** Optional parameters. */
export interface ApplicationCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type ApplicationCreateResponse = ApplicationResourceDescription;

/** Optional parameters. */
export interface ApplicationGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ApplicationGetResponse = ApplicationResourceDescription;

/** Optional parameters. */
export interface ApplicationDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ApplicationListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ApplicationListByResourceGroupResponse = ApplicationResourceDescriptionList;

/** Optional parameters. */
export interface ApplicationListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type ApplicationListBySubscriptionResponse = ApplicationResourceDescriptionList;

/** Optional parameters. */
export interface ApplicationListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type ApplicationListByResourceGroupNextResponse = ApplicationResourceDescriptionList;

/** Optional parameters. */
export interface ApplicationListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type ApplicationListBySubscriptionNextResponse = ApplicationResourceDescriptionList;

/** Optional parameters. */
export interface ServiceGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServiceGetResponse = ServiceResourceDescription;

/** Optional parameters. */
export interface ServiceListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ServiceListResponse = ServiceResourceDescriptionList;

/** Optional parameters. */
export interface ServiceListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ServiceListNextResponse = ServiceResourceDescriptionList;

/** Optional parameters. */
export interface ServiceReplicaGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ServiceReplicaGetResponse = ServiceReplicaDescription;

/** Optional parameters. */
export interface ServiceReplicaListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ServiceReplicaListResponse = ServiceReplicaDescriptionList;

/** Optional parameters. */
export interface ServiceReplicaListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ServiceReplicaListNextResponse = ServiceReplicaDescriptionList;

/** Optional parameters. */
export interface CodePackageGetContainerLogsOptionalParams
  extends coreClient.OperationOptions {
  /** Number of lines to show from the end of the logs. Default is 100. */
  tail?: number;
}

/** Contains response data for the getContainerLogs operation. */
export type CodePackageGetContainerLogsResponse = ContainerLogs;

/** Optional parameters. */
export interface ServiceFabricMeshManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
