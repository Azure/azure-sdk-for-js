/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationResult"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResult",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "AvailableOperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableOperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorErrorModel"
        }
      }
    }
  }
};

export const ErrorErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetailsModel"
            }
          }
        }
      }
    }
  }
};

export const ErrorDetailsModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetailsModel",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProvisionedResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProvisionedResourceProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretResourceDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretResourceDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecretResourceDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretValueProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretValueProperties",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretValueResourceDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretValueResourceDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SecretValueResourceDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretValue",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        required: true,
        type: {
          name: "String"
        }
      },
      azureFileParameters: {
        serializedName: "azureFileParameters",
        type: {
          name: "Composite",
          className: "VolumeProviderParametersAzureFile"
        }
      }
    }
  }
};

export const VolumeProviderParametersAzureFile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeProviderParametersAzureFile",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        required: true,
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      },
      shareName: {
        serializedName: "shareName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumeResourceDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeResourceDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VolumeResourceDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkResourceDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkResourceDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkResourceDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      sourceNetwork: {
        serializedName: "sourceNetwork",
        type: {
          name: "Composite",
          className: "NetworkRef"
        }
      },
      destinationNetwork: {
        serializedName: "destinationNetwork",
        type: {
          name: "Composite",
          className: "NetworkRef"
        }
      },
      tcp: {
        serializedName: "tcp",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TcpConfig"
            }
          }
        }
      },
      http: {
        serializedName: "http",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HttpConfig"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkRef: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRef",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      endpointRefs: {
        serializedName: "endpointRefs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EndpointRef"
            }
          }
        }
      }
    }
  }
};

export const EndpointRef: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointRef",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TcpConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TcpConfig",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        required: true,
        type: {
          name: "Number"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "GatewayDestination"
        }
      }
    }
  }
};

export const GatewayDestination: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayDestination",
    modelProperties: {
      applicationName: {
        serializedName: "applicationName",
        required: true,
        type: {
          name: "String"
        }
      },
      serviceName: {
        serializedName: "serviceName",
        required: true,
        type: {
          name: "String"
        }
      },
      endpointName: {
        serializedName: "endpointName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpConfig",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        required: true,
        type: {
          name: "Number"
        }
      },
      hosts: {
        serializedName: "hosts",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HttpHostConfig"
            }
          }
        }
      }
    }
  }
};

export const HttpHostConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpHostConfig",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      routes: {
        serializedName: "routes",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HttpRouteConfig"
            }
          }
        }
      }
    }
  }
};

export const HttpRouteConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpRouteConfig",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      match: {
        serializedName: "match",
        type: {
          name: "Composite",
          className: "HttpRouteMatchRule"
        }
      },
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "GatewayDestination"
        }
      }
    }
  }
};

export const HttpRouteMatchRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpRouteMatchRule",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "Composite",
          className: "HttpRouteMatchPath"
        }
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HttpRouteMatchHeader"
            }
          }
        }
      }
    }
  }
};

export const HttpRouteMatchPath: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpRouteMatchPath",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      rewrite: {
        serializedName: "rewrite",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpRouteMatchHeader: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HttpRouteMatchHeader",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayResourceDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayResourceDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GatewayResourceDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      services: {
        serializedName: "services",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceResourceDescription"
            }
          }
        }
      },
      diagnostics: {
        serializedName: "diagnostics",
        type: {
          name: "Composite",
          className: "DiagnosticsDescription"
        }
      },
      debugParams: {
        serializedName: "debugParams",
        type: {
          name: "String"
        }
      },
      serviceNames: {
        serializedName: "serviceNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthState: {
        serializedName: "healthState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unhealthyEvaluation: {
        serializedName: "unhealthyEvaluation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceReplicaProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceReplicaProperties",
    modelProperties: {
      osType: {
        serializedName: "osType",
        required: true,
        type: {
          name: "String"
        }
      },
      codePackages: {
        serializedName: "codePackages",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerCodePackageProperties"
            }
          }
        }
      },
      networkRefs: {
        serializedName: "networkRefs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkRef"
            }
          }
        }
      },
      diagnostics: {
        serializedName: "diagnostics",
        type: {
          name: "Composite",
          className: "DiagnosticsRef"
        }
      }
    }
  }
};

export const ContainerCodePackageProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerCodePackageProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      image: {
        serializedName: "image",
        required: true,
        type: {
          name: "String"
        }
      },
      imageRegistryCredential: {
        serializedName: "imageRegistryCredential",
        type: {
          name: "Composite",
          className: "ImageRegistryCredential"
        }
      },
      entrypoint: {
        serializedName: "entrypoint",
        type: {
          name: "String"
        }
      },
      commands: {
        serializedName: "commands",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      environmentVariables: {
        serializedName: "environmentVariables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnvironmentVariable"
            }
          }
        }
      },
      settings: {
        serializedName: "settings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Setting"
            }
          }
        }
      },
      labels: {
        serializedName: "labels",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerLabel"
            }
          }
        }
      },
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EndpointProperties"
            }
          }
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Composite",
          className: "ResourceRequirements"
        }
      },
      volumeRefs: {
        serializedName: "volumeRefs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VolumeReference"
            }
          }
        }
      },
      volumes: {
        serializedName: "volumes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationScopedVolume"
            }
          }
        }
      },
      diagnostics: {
        serializedName: "diagnostics",
        type: {
          name: "Composite",
          className: "DiagnosticsRef"
        }
      },
      reliableCollectionsRefs: {
        serializedName: "reliableCollectionsRefs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReliableCollectionsRef"
            }
          }
        }
      },
      instanceView: {
        serializedName: "instanceView",
        type: {
          name: "Composite",
          className: "ContainerInstanceView"
        }
      }
    }
  }
};

export const ImageRegistryCredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageRegistryCredential",
    modelProperties: {
      server: {
        serializedName: "server",
        required: true,
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        required: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnvironmentVariable: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnvironmentVariable",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Setting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Setting",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerLabel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerLabel",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointProperties",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ResourceRequirements: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceRequirements",
    modelProperties: {
      requests: {
        serializedName: "requests",
        type: {
          name: "Composite",
          className: "ResourceRequests"
        }
      },
      limits: {
        serializedName: "limits",
        type: {
          name: "Composite",
          className: "ResourceLimits"
        }
      }
    }
  }
};

export const ResourceRequests: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceRequests",
    modelProperties: {
      memoryInGB: {
        serializedName: "memoryInGB",
        required: true,
        type: {
          name: "Number"
        }
      },
      cpu: {
        serializedName: "cpu",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ResourceLimits: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceLimits",
    modelProperties: {
      memoryInGB: {
        serializedName: "memoryInGB",
        type: {
          name: "Number"
        }
      },
      cpu: {
        serializedName: "cpu",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VolumeReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeReference",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      readOnly: {
        serializedName: "readOnly",
        type: {
          name: "Boolean"
        }
      },
      destinationPath: {
        serializedName: "destinationPath",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationScopedVolumeCreationParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationScopedVolumeCreationParameters",
    uberParent: "ApplicationScopedVolumeCreationParameters",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiagnosticsRef: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticsRef",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      sinkRefs: {
        serializedName: "sinkRefs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ReliableCollectionsRef: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReliableCollectionsRef",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      doNotPersistState: {
        serializedName: "doNotPersistState",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ContainerInstanceView: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerInstanceView",
    modelProperties: {
      restartCount: {
        serializedName: "restartCount",
        type: {
          name: "Number"
        }
      },
      currentState: {
        serializedName: "currentState",
        type: {
          name: "Composite",
          className: "ContainerState"
        }
      },
      previousState: {
        serializedName: "previousState",
        type: {
          name: "Composite",
          className: "ContainerState"
        }
      },
      events: {
        serializedName: "events",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerEvent"
            }
          }
        }
      }
    }
  }
};

export const ContainerState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerState",
    modelProperties: {
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        type: {
          name: "String"
        }
      },
      finishTime: {
        serializedName: "finishTime",
        type: {
          name: "DateTime"
        }
      },
      detailStatus: {
        serializedName: "detailStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerEvent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerEvent",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      firstTimestamp: {
        serializedName: "firstTimestamp",
        type: {
          name: "String"
        }
      },
      lastTimestamp: {
        serializedName: "lastTimestamp",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceProperties",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      replicaCount: {
        serializedName: "replicaCount",
        type: {
          name: "Number"
        }
      },
      autoScalingPolicies: {
        serializedName: "autoScalingPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AutoScalingPolicy"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthState: {
        serializedName: "healthState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unhealthyEvaluation: {
        serializedName: "unhealthyEvaluation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoScalingPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoScalingPolicy",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      trigger: {
        serializedName: "trigger",
        type: {
          name: "Composite",
          className: "AutoScalingTrigger"
        }
      },
      mechanism: {
        serializedName: "mechanism",
        type: {
          name: "Composite",
          className: "AutoScalingMechanism"
        }
      }
    }
  }
};

export const AutoScalingTrigger: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoScalingTrigger",
    uberParent: "AutoScalingTrigger",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoScalingMechanism: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoScalingMechanism",
    uberParent: "AutoScalingMechanism",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiagnosticsDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticsDescription",
    modelProperties: {
      sinks: {
        serializedName: "sinks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnosticsSinkProperties"
            }
          }
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      defaultSinkRefs: {
        serializedName: "defaultSinkRefs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DiagnosticsSinkProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnosticsSinkProperties",
    uberParent: "DiagnosticsSinkProperties",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationResourceDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationResourceDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationResourceDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceResourceDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResourceDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceResourceDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceReplicaDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceReplicaDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceReplicaDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerLogs: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerLogs",
    modelProperties: {
      content: {
        serializedName: "content",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoScalingMetric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoScalingMetric",
    uberParent: "AutoScalingMetric",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretResourcePropertiesBase: coreClient.CompositeMapper = {
  serializedName: "SecretResourcePropertiesBase",
  type: {
    name: "Composite",
    className: "SecretResourcePropertiesBase",
    uberParent: "ProvisionedResourceProperties",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...ProvisionedResourceProperties.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretValueResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretValueResourceProperties",
    modelProperties: {
      ...ProvisionedResourceProperties.type.modelProperties,
      ...SecretValueProperties.type.modelProperties
    }
  }
};

export const VolumeResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeResourceProperties",
    modelProperties: {
      ...ProvisionedResourceProperties.type.modelProperties,
      ...VolumeProperties.type.modelProperties
    }
  }
};

export const NetworkResourcePropertiesBase: coreClient.CompositeMapper = {
  serializedName: "NetworkResourcePropertiesBase",
  type: {
    name: "Composite",
    className: "NetworkResourcePropertiesBase",
    uberParent: "ProvisionedResourceProperties",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...ProvisionedResourceProperties.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GatewayResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayResourceProperties",
    modelProperties: {
      ...ProvisionedResourceProperties.type.modelProperties,
      ...GatewayProperties.type.modelProperties
    }
  }
};

export const ServiceResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResourceProperties",
    modelProperties: {
      ...ProvisionedResourceProperties.type.modelProperties,
      ...ServiceReplicaProperties.type.modelProperties,
      ...ServiceProperties.type.modelProperties
    }
  }
};

export const ApplicationResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationResourceProperties",
    modelProperties: {
      ...ProvisionedResourceProperties.type.modelProperties,
      ...ApplicationProperties.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const ServiceReplicaDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceReplicaDescription",
    modelProperties: {
      ...ServiceReplicaProperties.type.modelProperties,
      replicaName: {
        serializedName: "replicaName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationScopedVolume: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationScopedVolume",
    modelProperties: {
      ...VolumeReference.type.modelProperties,
      creationParameters: {
        serializedName: "creationParameters",
        type: {
          name: "Composite",
          className: "ApplicationScopedVolumeCreationParameters"
        }
      }
    }
  }
};

export const ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk: coreClient.CompositeMapper = {
  serializedName: "ServiceFabricVolumeDisk",
  type: {
    name: "Composite",
    className:
      "ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk",
    uberParent: "ApplicationScopedVolumeCreationParameters",
    polymorphicDiscriminator:
      ApplicationScopedVolumeCreationParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...ApplicationScopedVolumeCreationParameters.type.modelProperties,
      sizeDisk: {
        serializedName: "sizeDisk",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AverageLoadScalingTrigger: coreClient.CompositeMapper = {
  serializedName: "AverageLoad",
  type: {
    name: "Composite",
    className: "AverageLoadScalingTrigger",
    uberParent: "AutoScalingTrigger",
    polymorphicDiscriminator: AutoScalingTrigger.type.polymorphicDiscriminator,
    modelProperties: {
      ...AutoScalingTrigger.type.modelProperties,
      metric: {
        serializedName: "metric",
        type: {
          name: "Composite",
          className: "AutoScalingMetric"
        }
      },
      lowerLoadThreshold: {
        serializedName: "lowerLoadThreshold",
        required: true,
        type: {
          name: "Number"
        }
      },
      upperLoadThreshold: {
        serializedName: "upperLoadThreshold",
        required: true,
        type: {
          name: "Number"
        }
      },
      scaleIntervalInSeconds: {
        constraints: {
          InclusiveMinimum: 60
        },
        serializedName: "scaleIntervalInSeconds",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AddRemoveReplicaScalingMechanism: coreClient.CompositeMapper = {
  serializedName: "AddRemoveReplica",
  type: {
    name: "Composite",
    className: "AddRemoveReplicaScalingMechanism",
    uberParent: "AutoScalingMechanism",
    polymorphicDiscriminator:
      AutoScalingMechanism.type.polymorphicDiscriminator,
    modelProperties: {
      ...AutoScalingMechanism.type.modelProperties,
      minCount: {
        serializedName: "minCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      maxCount: {
        serializedName: "maxCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      scaleIncrement: {
        serializedName: "scaleIncrement",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServiceResourceDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceResourceDescription",
    modelProperties: {
      ...ManagedProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "properties.osType",
        required: true,
        type: {
          name: "String"
        }
      },
      codePackages: {
        serializedName: "properties.codePackages",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContainerCodePackageProperties"
            }
          }
        }
      },
      networkRefs: {
        serializedName: "properties.networkRefs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkRef"
            }
          }
        }
      },
      diagnostics: {
        serializedName: "properties.diagnostics",
        type: {
          name: "Composite",
          className: "DiagnosticsRef"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      replicaCount: {
        serializedName: "properties.replicaCount",
        type: {
          name: "Number"
        }
      },
      autoScalingPolicies: {
        serializedName: "properties.autoScalingPolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AutoScalingPolicy"
            }
          }
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "properties.statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthState: {
        serializedName: "properties.healthState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unhealthyEvaluation: {
        serializedName: "properties.unhealthyEvaluation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureInternalMonitoringPipelineSinkDescription: coreClient.CompositeMapper = {
  serializedName: "AzureInternalMonitoringPipeline",
  type: {
    name: "Composite",
    className: "AzureInternalMonitoringPipelineSinkDescription",
    uberParent: "DiagnosticsSinkProperties",
    polymorphicDiscriminator:
      DiagnosticsSinkProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...DiagnosticsSinkProperties.type.modelProperties,
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      maConfigUrl: {
        serializedName: "maConfigUrl",
        type: {
          name: "String"
        }
      },
      fluentdConfigUrl: {
        serializedName: "fluentdConfigUrl",
        type: {
          name: "any"
        }
      },
      autoKeyConfigUrl: {
        serializedName: "autoKeyConfigUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoScalingResourceMetric: coreClient.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "AutoScalingResourceMetric",
    uberParent: "AutoScalingMetric",
    polymorphicDiscriminator: AutoScalingMetric.type.polymorphicDiscriminator,
    modelProperties: {
      ...AutoScalingMetric.type.modelProperties,
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretResourceProperties: coreClient.CompositeMapper = {
  serializedName: "SecretResourceProperties",
  type: {
    name: "Composite",
    className: "SecretResourceProperties",
    uberParent: "SecretResourcePropertiesBase",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...SecretResourcePropertiesBase.type.modelProperties,
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "contentType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkResourceProperties: coreClient.CompositeMapper = {
  serializedName: "NetworkResourceProperties",
  type: {
    name: "Composite",
    className: "NetworkResourceProperties",
    uberParent: "NetworkResourcePropertiesBase",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...NetworkResourcePropertiesBase.type.modelProperties,
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretResourceDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretResourceDescription",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SecretResourceProperties"
        }
      }
    }
  }
};

export const SecretValueResourceDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretValueResourceDescription",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "properties.value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VolumeResourceDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VolumeResourceDescription",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "properties.statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "properties.provider",
        required: true,
        type: {
          name: "String"
        }
      },
      azureFileParameters: {
        serializedName: "properties.azureFileParameters",
        type: {
          name: "Composite",
          className: "VolumeProviderParametersAzureFile"
        }
      }
    }
  }
};

export const NetworkResourceDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkResourceDescription",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "NetworkResourceProperties"
        }
      }
    }
  }
};

export const GatewayResourceDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GatewayResourceDescription",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      sourceNetwork: {
        serializedName: "properties.sourceNetwork",
        type: {
          name: "Composite",
          className: "NetworkRef"
        }
      },
      destinationNetwork: {
        serializedName: "properties.destinationNetwork",
        type: {
          name: "Composite",
          className: "NetworkRef"
        }
      },
      tcp: {
        serializedName: "properties.tcp",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TcpConfig"
            }
          }
        }
      },
      http: {
        serializedName: "properties.http",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HttpConfig"
            }
          }
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "properties.statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      ipAddress: {
        serializedName: "properties.ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationResourceDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplicationResourceDescription",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      services: {
        serializedName: "properties.services",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServiceResourceDescription"
            }
          }
        }
      },
      diagnostics: {
        serializedName: "properties.diagnostics",
        type: {
          name: "Composite",
          className: "DiagnosticsDescription"
        }
      },
      debugParams: {
        serializedName: "properties.debugParams",
        type: {
          name: "String"
        }
      },
      serviceNames: {
        serializedName: "properties.serviceNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      statusDetails: {
        serializedName: "properties.statusDetails",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthState: {
        serializedName: "properties.healthState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unhealthyEvaluation: {
        serializedName: "properties.unhealthyEvaluation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InlinedValueSecretResourceProperties: coreClient.CompositeMapper = {
  serializedName: "inlinedValue",
  type: {
    name: "Composite",
    className: "InlinedValueSecretResourceProperties",
    uberParent: "SecretResourceProperties",
    polymorphicDiscriminator:
      SecretResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...SecretResourceProperties.type.modelProperties
    }
  }
};

export const LocalNetworkResourceProperties: coreClient.CompositeMapper = {
  serializedName: "Local",
  type: {
    name: "Composite",
    className: "LocalNetworkResourceProperties",
    uberParent: "NetworkResourceProperties",
    polymorphicDiscriminator:
      NetworkResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...NetworkResourceProperties.type.modelProperties,
      networkAddressPrefix: {
        serializedName: "networkAddressPrefix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  ApplicationScopedVolumeCreationParameters: ApplicationScopedVolumeCreationParameters,
  AutoScalingTrigger: AutoScalingTrigger,
  AutoScalingMechanism: AutoScalingMechanism,
  DiagnosticsSinkProperties: DiagnosticsSinkProperties,
  AutoScalingMetric: AutoScalingMetric,
  "ProvisionedResourceProperties.SecretResourcePropertiesBase": SecretResourcePropertiesBase,
  "ProvisionedResourceProperties.NetworkResourcePropertiesBase": NetworkResourcePropertiesBase,
  "ApplicationScopedVolumeCreationParameters.ServiceFabricVolumeDisk": ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk,
  "AutoScalingTrigger.AverageLoad": AverageLoadScalingTrigger,
  "AutoScalingMechanism.AddRemoveReplica": AddRemoveReplicaScalingMechanism,
  "DiagnosticsSinkProperties.AzureInternalMonitoringPipeline": AzureInternalMonitoringPipelineSinkDescription,
  "AutoScalingMetric.Resource": AutoScalingResourceMetric,
  "SecretResourcePropertiesBase.SecretResourceProperties": SecretResourceProperties,
  "NetworkResourcePropertiesBase.NetworkResourceProperties": NetworkResourceProperties,
  "SecretResourceProperties.inlinedValue": InlinedValueSecretResourceProperties,
  "NetworkResourceProperties.Local": LocalNetworkResourceProperties
};
