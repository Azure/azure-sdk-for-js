/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/machineLearningServiceMappers";
import * as Parameters from "../models/parameters";
import { AzureMachineLearningWorkspacesContext } from "../azureMachineLearningWorkspacesContext";

/** Class representing a MachineLearningService. */
export class MachineLearningService {
  private readonly client: AzureMachineLearningWorkspacesContext;

  /**
   * Create a MachineLearningService.
   * @param {AzureMachineLearningWorkspacesContext} client Reference to the service client.
   */
  constructor(client: AzureMachineLearningWorkspacesContext) {
    this.client = client;
  }

  /**
   * Gets services in specified workspace.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param [options] The optional parameters
   * @returns Promise<Models.MachineLearningServiceListByWorkspaceResponse>
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, options?: Models.MachineLearningServiceListByWorkspaceOptionalParams): Promise<Models.MachineLearningServiceListByWorkspaceResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param callback The callback
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.PaginatedServiceList>): void;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, options: Models.MachineLearningServiceListByWorkspaceOptionalParams, callback: msRest.ServiceCallback<Models.PaginatedServiceList>): void;
  listByWorkspace(resourceGroupName: string, workspaceName: string, options?: Models.MachineLearningServiceListByWorkspaceOptionalParams | msRest.ServiceCallback<Models.PaginatedServiceList>, callback?: msRest.ServiceCallback<Models.PaginatedServiceList>): Promise<Models.MachineLearningServiceListByWorkspaceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        options
      },
      listByWorkspaceOperationSpec,
      callback) as Promise<Models.MachineLearningServiceListByWorkspaceResponse>;
  }

  /**
   * Get a Service by name.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param serviceName Name of the Azure Machine Learning service.
   * @param [options] The optional parameters
   * @returns Promise<Models.MachineLearningServiceGetResponse>
   */
  get(resourceGroupName: string, workspaceName: string, serviceName: string, options?: Models.MachineLearningServiceGetOptionalParams): Promise<Models.MachineLearningServiceGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param serviceName Name of the Azure Machine Learning service.
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, serviceName: string, callback: msRest.ServiceCallback<Models.ServiceResource>): void;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param serviceName Name of the Azure Machine Learning service.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, serviceName: string, options: Models.MachineLearningServiceGetOptionalParams, callback: msRest.ServiceCallback<Models.ServiceResource>): void;
  get(resourceGroupName: string, workspaceName: string, serviceName: string, options?: Models.MachineLearningServiceGetOptionalParams | msRest.ServiceCallback<Models.ServiceResource>, callback?: msRest.ServiceCallback<Models.ServiceResource>): Promise<Models.MachineLearningServiceGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        serviceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.MachineLearningServiceGetResponse>;
  }

  /**
   * Delete a specific Service..
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param serviceName Name of the Azure Machine Learning service.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param serviceName Name of the Azure Machine Learning service.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, serviceName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param serviceName Name of the Azure Machine Learning service.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, workspaceName: string, serviceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        serviceName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Creates or updates service. This call will update a service if it exists. This is a
   * nonrecoverable operation. If your intent is to create a new service, do a GET first to verify
   * that it does not exist yet.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param serviceName Name of the Azure Machine Learning service.
   * @param properties The payload that is used to create or update the Service.
   * @param [options] The optional parameters
   * @returns Promise<Models.MachineLearningServiceCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, workspaceName: string, serviceName: string, properties: Models.CreateServiceRequestUnion, options?: msRest.RequestOptionsBase): Promise<Models.MachineLearningServiceCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,workspaceName,serviceName,properties,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.MachineLearningServiceCreateOrUpdateResponse>;
  }

  /**
   * Creates or updates service. This call will update a service if it exists. This is a
   * nonrecoverable operation. If your intent is to create a new service, do a GET first to verify
   * that it does not exist yet.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param serviceName Name of the Azure Machine Learning service.
   * @param properties The payload that is used to create or update the Service.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, serviceName: string, properties: Models.CreateServiceRequestUnion, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        workspaceName,
        serviceName,
        properties,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Gets services in specified workspace.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.MachineLearningServiceListByWorkspaceNextResponse>
   */
  listByWorkspaceNext(nextPageLink: string, options?: Models.MachineLearningServiceListByWorkspaceNextOptionalParams): Promise<Models.MachineLearningServiceListByWorkspaceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByWorkspaceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PaginatedServiceList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByWorkspaceNext(nextPageLink: string, options: Models.MachineLearningServiceListByWorkspaceNextOptionalParams, callback: msRest.ServiceCallback<Models.PaginatedServiceList>): void;
  listByWorkspaceNext(nextPageLink: string, options?: Models.MachineLearningServiceListByWorkspaceNextOptionalParams | msRest.ServiceCallback<Models.PaginatedServiceList>, callback?: msRest.ServiceCallback<Models.PaginatedServiceList>): Promise<Models.MachineLearningServiceListByWorkspaceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByWorkspaceNextOperationSpec,
      callback) as Promise<Models.MachineLearningServiceListByWorkspaceNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByWorkspaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/services",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.modelId,
    Parameters.modelName,
    Parameters.tag,
    Parameters.tags,
    Parameters.properties,
    Parameters.runId,
    Parameters.expand0,
    Parameters.orderby
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedServiceList
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/services/{serviceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ServiceResource
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/services/{serviceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/services/{serviceName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.serviceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "properties",
    mapper: {
      ...Mappers.CreateServiceRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ServiceResource,
      headersMapper: Mappers.MachineLearningServiceCreateOrUpdateHeaders
    },
    201: {
      headersMapper: Mappers.MachineLearningServiceCreateOrUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError,
      headersMapper: Mappers.MachineLearningServiceCreateOrUpdateHeaders
    }
  },
  serializer
};

const listByWorkspaceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.modelId,
    Parameters.modelName,
    Parameters.tag,
    Parameters.tags,
    Parameters.properties,
    Parameters.runId,
    Parameters.expand0,
    Parameters.orderby
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedServiceList
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};
