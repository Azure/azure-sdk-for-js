/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/workspaceConnectionsMappers";
import * as Parameters from "../models/parameters";
import { AzureMachineLearningWorkspacesContext } from "../azureMachineLearningWorkspacesContext";

/** Class representing a WorkspaceConnections. */
export class WorkspaceConnections {
  private readonly client: AzureMachineLearningWorkspacesContext;

  /**
   * Create a WorkspaceConnections.
   * @param {AzureMachineLearningWorkspacesContext} client Reference to the service client.
   */
  constructor(client: AzureMachineLearningWorkspacesContext) {
    this.client = client;
  }

  /**
   * List all connections under a AML workspace.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspaceConnectionsListResponse>
   */
  list(resourceGroupName: string, workspaceName: string, options?: Models.WorkspaceConnectionsListOptionalParams): Promise<Models.WorkspaceConnectionsListResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param callback The callback
   */
  list(resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.PaginatedWorkspaceConnectionsList>): void;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, workspaceName: string, options: Models.WorkspaceConnectionsListOptionalParams, callback: msRest.ServiceCallback<Models.PaginatedWorkspaceConnectionsList>): void;
  list(resourceGroupName: string, workspaceName: string, options?: Models.WorkspaceConnectionsListOptionalParams | msRest.ServiceCallback<Models.PaginatedWorkspaceConnectionsList>, callback?: msRest.ServiceCallback<Models.PaginatedWorkspaceConnectionsList>): Promise<Models.WorkspaceConnectionsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.WorkspaceConnectionsListResponse>;
  }

  /**
   * Add a new workspace connection.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param connectionName Friendly name of the workspace connection
   * @param parameters The object for creating or updating a new workspace connection
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspaceConnectionsCreateResponse>
   */
  create(resourceGroupName: string, workspaceName: string, connectionName: string, parameters: Models.WorkspaceConnectionDto, options?: msRest.RequestOptionsBase): Promise<Models.WorkspaceConnectionsCreateResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param connectionName Friendly name of the workspace connection
   * @param parameters The object for creating or updating a new workspace connection
   * @param callback The callback
   */
  create(resourceGroupName: string, workspaceName: string, connectionName: string, parameters: Models.WorkspaceConnectionDto, callback: msRest.ServiceCallback<Models.WorkspaceConnection>): void;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param connectionName Friendly name of the workspace connection
   * @param parameters The object for creating or updating a new workspace connection
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, workspaceName: string, connectionName: string, parameters: Models.WorkspaceConnectionDto, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkspaceConnection>): void;
  create(resourceGroupName: string, workspaceName: string, connectionName: string, parameters: Models.WorkspaceConnectionDto, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkspaceConnection>, callback?: msRest.ServiceCallback<Models.WorkspaceConnection>): Promise<Models.WorkspaceConnectionsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        connectionName,
        parameters,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.WorkspaceConnectionsCreateResponse>;
  }

  /**
   * Get the detail of a workspace connection.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param connectionName Friendly name of the workspace connection
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspaceConnectionsGetResponse>
   */
  get(resourceGroupName: string, workspaceName: string, connectionName: string, options?: msRest.RequestOptionsBase): Promise<Models.WorkspaceConnectionsGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param connectionName Friendly name of the workspace connection
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, connectionName: string, callback: msRest.ServiceCallback<Models.WorkspaceConnection>): void;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param connectionName Friendly name of the workspace connection
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, connectionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkspaceConnection>): void;
  get(resourceGroupName: string, workspaceName: string, connectionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkspaceConnection>, callback?: msRest.ServiceCallback<Models.WorkspaceConnection>): Promise<Models.WorkspaceConnectionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        connectionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.WorkspaceConnectionsGetResponse>;
  }

  /**
   * Delete a workspace connection.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param connectionName Friendly name of the workspace connection
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, connectionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param connectionName Friendly name of the workspace connection
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, connectionName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param connectionName Friendly name of the workspace connection
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, connectionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, workspaceName: string, connectionName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        connectionName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.target,
    Parameters.category
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PaginatedWorkspaceConnectionsList
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.connectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.WorkspaceConnectionDto,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.WorkspaceConnection
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.connectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.WorkspaceConnection
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/connections/{connectionName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.connectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};
