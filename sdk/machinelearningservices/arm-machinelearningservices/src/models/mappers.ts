/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "Operation_display",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const NotebookListCredentialsResult: msRest.CompositeMapper = {
  serializedName: "NotebookListCredentialsResult",
  type: {
    name: "Composite",
    className: "NotebookListCredentialsResult",
    modelProperties: {
      primaryAccessKey: {
        serializedName: "primaryAccessKey",
        type: {
          name: "String"
        }
      },
      secondaryAccessKey: {
        serializedName: "secondaryAccessKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotebookPreparationError: msRest.CompositeMapper = {
  serializedName: "NotebookPreparationError",
  type: {
    name: "Composite",
    className: "NotebookPreparationError",
    modelProperties: {
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      statusCode: {
        serializedName: "statusCode",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NotebookResourceInfo: msRest.CompositeMapper = {
  serializedName: "NotebookResourceInfo",
  type: {
    name: "Composite",
    className: "NotebookResourceInfo",
    modelProperties: {
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      notebookPreparationError: {
        serializedName: "notebookPreparationError",
        type: {
          name: "Composite",
          className: "NotebookPreparationError"
        }
      }
    }
  }
};

export const KeyVaultProperties: msRest.CompositeMapper = {
  serializedName: "KeyVaultProperties",
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyVaultArmId: {
        required: true,
        serializedName: "keyVaultArmId",
        type: {
          name: "String"
        }
      },
      keyIdentifier: {
        required: true,
        serializedName: "keyIdentifier",
        type: {
          name: "String"
        }
      },
      identityClientId: {
        serializedName: "identityClientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionProperty: msRest.CompositeMapper = {
  serializedName: "EncryptionProperty",
  type: {
    name: "Composite",
    className: "EncryptionProperty",
    modelProperties: {
      status: {
        required: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      keyVaultProperties: {
        required: true,
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      }
    }
  }
};

export const PrivateEndpoint: msRest.CompositeMapper = {
  serializedName: "PrivateEndpoint",
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: msRest.CompositeMapper = {
  serializedName: "PrivateLinkServiceConnectionState",
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnection",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        required: true,
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SharedPrivateLinkResource: msRest.CompositeMapper = {
  serializedName: "SharedPrivateLinkResource",
  type: {
    name: "Composite",
    className: "SharedPrivateLinkResource",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      privateLinkResourceId: {
        serializedName: "properties.privateLinkResourceId",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      requestMessage: {
        serializedName: "properties.requestMessage",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      }
    }
  }
};

export const Workspace: msRest.CompositeMapper = {
  serializedName: "Workspace",
  type: {
    name: "Composite",
    className: "Workspace",
    modelProperties: {
      ...Resource.type.modelProperties,
      workspaceId: {
        readOnly: true,
        serializedName: "properties.workspaceId",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      keyVault: {
        serializedName: "properties.keyVault",
        type: {
          name: "String"
        }
      },
      applicationInsights: {
        serializedName: "properties.applicationInsights",
        type: {
          name: "String"
        }
      },
      containerRegistry: {
        serializedName: "properties.containerRegistry",
        type: {
          name: "String"
        }
      },
      storageAccount: {
        serializedName: "properties.storageAccount",
        type: {
          name: "String"
        }
      },
      discoveryUrl: {
        serializedName: "properties.discoveryUrl",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "EncryptionProperty"
        }
      },
      hbiWorkspace: {
        serializedName: "properties.hbiWorkspace",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      serviceProvisionedResourceGroup: {
        readOnly: true,
        serializedName: "properties.serviceProvisionedResourceGroup",
        type: {
          name: "String"
        }
      },
      privateLinkCount: {
        readOnly: true,
        serializedName: "properties.privateLinkCount",
        type: {
          name: "Number"
        }
      },
      imageBuildCompute: {
        serializedName: "properties.imageBuildCompute",
        type: {
          name: "String"
        }
      },
      allowPublicAccessWhenBehindVnet: {
        serializedName: "properties.allowPublicAccessWhenBehindVnet",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      privateEndpointConnections: {
        readOnly: true,
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      sharedPrivateLinkResources: {
        serializedName: "properties.sharedPrivateLinkResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedPrivateLinkResource"
            }
          }
        }
      },
      notebookInfo: {
        readOnly: true,
        serializedName: "properties.notebookInfo",
        type: {
          name: "Composite",
          className: "NotebookResourceInfo"
        }
      }
    }
  }
};

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceUpdateParameters: msRest.CompositeMapper = {
  serializedName: "WorkspaceUpdateParameters",
  type: {
    name: "Composite",
    className: "WorkspaceUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AmlUserFeature: msRest.CompositeMapper = {
  serializedName: "AmlUserFeature",
  type: {
    name: "Composite",
    className: "AmlUserFeature",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageName: msRest.CompositeMapper = {
  serializedName: "UsageName",
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        readOnly: true,
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: msRest.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const EstimatedVMPrice: msRest.CompositeMapper = {
  serializedName: "EstimatedVMPrice",
  type: {
    name: "Composite",
    className: "EstimatedVMPrice",
    modelProperties: {
      retailPrice: {
        required: true,
        serializedName: "retailPrice",
        type: {
          name: "Number"
        }
      },
      osType: {
        required: true,
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      vmTier: {
        required: true,
        serializedName: "vmTier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EstimatedVMPrices: msRest.CompositeMapper = {
  serializedName: "EstimatedVMPrices",
  type: {
    name: "Composite",
    className: "EstimatedVMPrices",
    modelProperties: {
      billingCurrency: {
        required: true,
        isConstant: true,
        serializedName: "billingCurrency",
        defaultValue: 'USD',
        type: {
          name: "String"
        }
      },
      unitOfMeasure: {
        required: true,
        isConstant: true,
        serializedName: "unitOfMeasure",
        defaultValue: 'OneHour',
        type: {
          name: "String"
        }
      },
      values: {
        required: true,
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EstimatedVMPrice"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineSize: msRest.CompositeMapper = {
  serializedName: "VirtualMachineSize",
  type: {
    name: "Composite",
    className: "VirtualMachineSize",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      family: {
        readOnly: true,
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      vCPUs: {
        readOnly: true,
        serializedName: "vCPUs",
        type: {
          name: "Number"
        }
      },
      gpus: {
        readOnly: true,
        serializedName: "gpus",
        type: {
          name: "Number"
        }
      },
      osVhdSizeMB: {
        readOnly: true,
        serializedName: "osVhdSizeMB",
        type: {
          name: "Number"
        }
      },
      maxResourceVolumeMB: {
        readOnly: true,
        serializedName: "maxResourceVolumeMB",
        type: {
          name: "Number"
        }
      },
      memoryGB: {
        readOnly: true,
        serializedName: "memoryGB",
        type: {
          name: "Number"
        }
      },
      lowPriorityCapable: {
        readOnly: true,
        serializedName: "lowPriorityCapable",
        type: {
          name: "Boolean"
        }
      },
      premiumIO: {
        readOnly: true,
        serializedName: "premiumIO",
        type: {
          name: "Boolean"
        }
      },
      estimatedVMPrices: {
        serializedName: "estimatedVMPrices",
        type: {
          name: "Composite",
          className: "EstimatedVMPrices"
        }
      },
      supportedComputeTypes: {
        serializedName: "supportedComputeTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineSizeListResult: msRest.CompositeMapper = {
  serializedName: "VirtualMachineSizeListResult",
  type: {
    name: "Composite",
    className: "VirtualMachineSizeListResult",
    modelProperties: {
      amlCompute: {
        serializedName: "amlCompute",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineSize"
            }
          }
        }
      }
    }
  }
};

export const QuotaBaseProperties: msRest.CompositeMapper = {
  serializedName: "QuotaBaseProperties",
  type: {
    name: "Composite",
    className: "QuotaBaseProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaUpdateParameters: msRest.CompositeMapper = {
  serializedName: "QuotaUpdateParameters",
  type: {
    name: "Composite",
    className: "QuotaUpdateParameters",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QuotaBaseProperties"
            }
          }
        }
      }
    }
  }
};

export const UpdateWorkspaceQuotas: msRest.CompositeMapper = {
  serializedName: "UpdateWorkspaceQuotas",
  type: {
    name: "Composite",
    className: "UpdateWorkspaceQuotas",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateWorkspaceQuotasResult: msRest.CompositeMapper = {
  serializedName: "UpdateWorkspaceQuotasResult",
  type: {
    name: "Composite",
    className: "UpdateWorkspaceQuotasResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateWorkspaceQuotas"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceName: msRest.CompositeMapper = {
  serializedName: "ResourceName",
  type: {
    name: "Composite",
    className: "ResourceName",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        readOnly: true,
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceQuota: msRest.CompositeMapper = {
  serializedName: "ResourceQuota",
  type: {
    name: "Composite",
    className: "ResourceQuota",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Composite",
          className: "ResourceName"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityUserAssignedIdentitiesValue: msRest.CompositeMapper = {
  serializedName: "Identity_userAssignedIdentitiesValue",
  type: {
    name: "Composite",
    className: "IdentityUserAssignedIdentitiesValue",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      clientId: {
        readOnly: true,
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Identity: msRest.CompositeMapper = {
  serializedName: "Identity",
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "SystemAssigned",
            "UserAssigned",
            "SystemAssigned,UserAssigned",
            "None"
          ]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "IdentityUserAssignedIdentitiesValue"
            }
          }
        }
      }
    }
  }
};

export const ResourceId: msRest.CompositeMapper = {
  serializedName: "ResourceId",
  type: {
    name: "Composite",
    className: "ResourceId",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Password: msRest.CompositeMapper = {
  serializedName: "Password",
  type: {
    name: "Composite",
    className: "Password",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistryListCredentialsResult: msRest.CompositeMapper = {
  serializedName: "RegistryListCredentialsResult",
  type: {
    name: "Composite",
    className: "RegistryListCredentialsResult",
    modelProperties: {
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      username: {
        readOnly: true,
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      passwords: {
        serializedName: "passwords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Password"
            }
          }
        }
      }
    }
  }
};

export const ListWorkspaceKeysResult: msRest.CompositeMapper = {
  serializedName: "ListWorkspaceKeysResult",
  type: {
    name: "Composite",
    className: "ListWorkspaceKeysResult",
    modelProperties: {
      userStorageKey: {
        readOnly: true,
        serializedName: "userStorageKey",
        type: {
          name: "String"
        }
      },
      userStorageResourceId: {
        readOnly: true,
        serializedName: "userStorageResourceId",
        type: {
          name: "String"
        }
      },
      appInsightsInstrumentationKey: {
        readOnly: true,
        serializedName: "appInsightsInstrumentationKey",
        type: {
          name: "String"
        }
      },
      containerRegistryCredentials: {
        readOnly: true,
        serializedName: "containerRegistryCredentials",
        type: {
          name: "Composite",
          className: "RegistryListCredentialsResult"
        }
      },
      notebookAccessKeys: {
        serializedName: "notebookAccessKeys",
        type: {
          name: "Composite",
          className: "NotebookListCredentialsResult"
        }
      }
    }
  }
};

export const ErrorDetail: msRest.CompositeMapper = {
  serializedName: "ErrorDetail",
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        readOnly: true,
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      }
    }
  }
};

export const MachineLearningServiceError: msRest.CompositeMapper = {
  serializedName: "MachineLearningServiceError",
  type: {
    name: "Composite",
    className: "MachineLearningServiceError",
    modelProperties: {
      error: {
        readOnly: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponse"
        }
      }
    }
  }
};

export const Compute: msRest.CompositeMapper = {
  serializedName: "Compute",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "computeType",
      clientName: "computeType"
    },
    uberParent: "Compute",
    className: "Compute",
    modelProperties: {
      computeLocation: {
        serializedName: "computeLocation",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      createdOn: {
        readOnly: true,
        serializedName: "createdOn",
        type: {
          name: "DateTime"
        }
      },
      modifiedOn: {
        readOnly: true,
        serializedName: "modifiedOn",
        type: {
          name: "DateTime"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      provisioningErrors: {
        readOnly: true,
        serializedName: "provisioningErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MachineLearningServiceError"
            }
          }
        }
      },
      isAttachedCompute: {
        readOnly: true,
        serializedName: "isAttachedCompute",
        type: {
          name: "Boolean"
        }
      },
      computeType: {
        required: true,
        serializedName: "computeType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeResource: msRest.CompositeMapper = {
  serializedName: "ComputeResource",
  type: {
    name: "Composite",
    className: "ComputeResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "Compute"
        }
      }
    }
  }
};

export const SystemService: msRest.CompositeMapper = {
  serializedName: "SystemService",
  type: {
    name: "Composite",
    className: "SystemService",
    modelProperties: {
      systemServiceType: {
        readOnly: true,
        serializedName: "systemServiceType",
        type: {
          name: "String"
        }
      },
      publicIpAddress: {
        readOnly: true,
        serializedName: "publicIpAddress",
        type: {
          name: "String"
        }
      },
      version: {
        readOnly: true,
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SslConfiguration: msRest.CompositeMapper = {
  serializedName: "SslConfiguration",
  type: {
    name: "Composite",
    className: "SslConfiguration",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      cert: {
        serializedName: "cert",
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      cname: {
        serializedName: "cname",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AksNetworkingConfiguration: msRest.CompositeMapper = {
  serializedName: "AksNetworkingConfiguration",
  type: {
    name: "Composite",
    className: "AksNetworkingConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      },
      serviceCidr: {
        serializedName: "serviceCidr",
        constraints: {
          Pattern: /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/
        },
        type: {
          name: "String"
        }
      },
      dnsServiceIP: {
        serializedName: "dnsServiceIP",
        constraints: {
          Pattern: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
        },
        type: {
          name: "String"
        }
      },
      dockerBridgeCidr: {
        serializedName: "dockerBridgeCidr",
        constraints: {
          Pattern: /^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$/
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AKSProperties: msRest.CompositeMapper = {
  serializedName: "AKS_properties",
  type: {
    name: "Composite",
    className: "AKSProperties",
    modelProperties: {
      clusterFqdn: {
        serializedName: "clusterFqdn",
        type: {
          name: "String"
        }
      },
      systemServices: {
        readOnly: true,
        serializedName: "systemServices",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SystemService"
            }
          }
        }
      },
      agentCount: {
        serializedName: "agentCount",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      agentVMSize: {
        serializedName: "agentVMSize",
        type: {
          name: "String"
        }
      },
      sslConfiguration: {
        serializedName: "sslConfiguration",
        type: {
          name: "Composite",
          className: "SslConfiguration"
        }
      },
      aksNetworkingConfiguration: {
        serializedName: "aksNetworkingConfiguration",
        type: {
          name: "Composite",
          className: "AksNetworkingConfiguration"
        }
      }
    }
  }
};

export const AKS: msRest.CompositeMapper = {
  serializedName: "AKS",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    uberParent: "Compute",
    className: "AKS",
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AKSProperties"
        }
      }
    }
  }
};

export const ScaleSettings: msRest.CompositeMapper = {
  serializedName: "ScaleSettings",
  type: {
    name: "Composite",
    className: "ScaleSettings",
    modelProperties: {
      maxNodeCount: {
        required: true,
        serializedName: "maxNodeCount",
        type: {
          name: "Number"
        }
      },
      minNodeCount: {
        serializedName: "minNodeCount",
        defaultValue: 0,
        type: {
          name: "Number"
        }
      },
      nodeIdleTimeBeforeScaleDown: {
        serializedName: "nodeIdleTimeBeforeScaleDown",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const UserAccountCredentials: msRest.CompositeMapper = {
  serializedName: "UserAccountCredentials",
  type: {
    name: "Composite",
    className: "UserAccountCredentials",
    modelProperties: {
      adminUserName: {
        required: true,
        serializedName: "adminUserName",
        type: {
          name: "String"
        }
      },
      adminUserSshPublicKey: {
        serializedName: "adminUserSshPublicKey",
        type: {
          name: "String"
        }
      },
      adminUserPassword: {
        serializedName: "adminUserPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeStateCounts: msRest.CompositeMapper = {
  serializedName: "NodeStateCounts",
  type: {
    name: "Composite",
    className: "NodeStateCounts",
    modelProperties: {
      idleNodeCount: {
        readOnly: true,
        serializedName: "idleNodeCount",
        type: {
          name: "Number"
        }
      },
      runningNodeCount: {
        readOnly: true,
        serializedName: "runningNodeCount",
        type: {
          name: "Number"
        }
      },
      preparingNodeCount: {
        readOnly: true,
        serializedName: "preparingNodeCount",
        type: {
          name: "Number"
        }
      },
      unusableNodeCount: {
        readOnly: true,
        serializedName: "unusableNodeCount",
        type: {
          name: "Number"
        }
      },
      leavingNodeCount: {
        readOnly: true,
        serializedName: "leavingNodeCount",
        type: {
          name: "Number"
        }
      },
      preemptedNodeCount: {
        readOnly: true,
        serializedName: "preemptedNodeCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AmlComputeProperties: msRest.CompositeMapper = {
  serializedName: "AmlCompute_properties",
  type: {
    name: "Composite",
    className: "AmlComputeProperties",
    modelProperties: {
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      vmPriority: {
        serializedName: "vmPriority",
        type: {
          name: "String"
        }
      },
      scaleSettings: {
        serializedName: "scaleSettings",
        type: {
          name: "Composite",
          className: "ScaleSettings"
        }
      },
      userAccountCredentials: {
        serializedName: "userAccountCredentials",
        type: {
          name: "Composite",
          className: "UserAccountCredentials"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      remoteLoginPortPublicAccess: {
        serializedName: "remoteLoginPortPublicAccess",
        defaultValue: 'NotSpecified',
        type: {
          name: "String"
        }
      },
      allocationState: {
        readOnly: true,
        serializedName: "allocationState",
        type: {
          name: "String"
        }
      },
      allocationStateTransitionTime: {
        readOnly: true,
        serializedName: "allocationStateTransitionTime",
        type: {
          name: "DateTime"
        }
      },
      errors: {
        readOnly: true,
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MachineLearningServiceError"
            }
          }
        }
      },
      currentNodeCount: {
        readOnly: true,
        serializedName: "currentNodeCount",
        type: {
          name: "Number"
        }
      },
      targetNodeCount: {
        readOnly: true,
        serializedName: "targetNodeCount",
        type: {
          name: "Number"
        }
      },
      nodeStateCounts: {
        readOnly: true,
        serializedName: "nodeStateCounts",
        type: {
          name: "Composite",
          className: "NodeStateCounts"
        }
      }
    }
  }
};

export const AmlCompute: msRest.CompositeMapper = {
  serializedName: "AmlCompute",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    uberParent: "Compute",
    className: "AmlCompute",
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AmlComputeProperties"
        }
      }
    }
  }
};

export const ComputeInstanceSshSettings: msRest.CompositeMapper = {
  serializedName: "ComputeInstanceSshSettings",
  type: {
    name: "Composite",
    className: "ComputeInstanceSshSettings",
    modelProperties: {
      sshPublicAccess: {
        serializedName: "sshPublicAccess",
        defaultValue: 'Disabled',
        type: {
          name: "String"
        }
      },
      adminUserName: {
        readOnly: true,
        serializedName: "adminUserName",
        type: {
          name: "String"
        }
      },
      sshPort: {
        readOnly: true,
        serializedName: "sshPort",
        type: {
          name: "Number"
        }
      },
      adminPublicKey: {
        serializedName: "adminPublicKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceConnectivityEndpoints: msRest.CompositeMapper = {
  serializedName: "ComputeInstanceConnectivityEndpoints",
  type: {
    name: "Composite",
    className: "ComputeInstanceConnectivityEndpoints",
    modelProperties: {
      publicIpAddress: {
        readOnly: true,
        serializedName: "publicIpAddress",
        type: {
          name: "String"
        }
      },
      privateIpAddress: {
        readOnly: true,
        serializedName: "privateIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceApplication: msRest.CompositeMapper = {
  serializedName: "ComputeInstanceApplication",
  type: {
    name: "Composite",
    className: "ComputeInstanceApplication",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      endpointUri: {
        serializedName: "endpointUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceCreatedBy: msRest.CompositeMapper = {
  serializedName: "ComputeInstanceCreatedBy",
  type: {
    name: "Composite",
    className: "ComputeInstanceCreatedBy",
    modelProperties: {
      userName: {
        readOnly: true,
        serializedName: "userName",
        type: {
          name: "String"
        }
      },
      userOrgId: {
        readOnly: true,
        serializedName: "userOrgId",
        type: {
          name: "String"
        }
      },
      userId: {
        readOnly: true,
        serializedName: "userId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceLastOperation: msRest.CompositeMapper = {
  serializedName: "ComputeInstanceLastOperation",
  type: {
    name: "Composite",
    className: "ComputeInstanceLastOperation",
    modelProperties: {
      operationName: {
        serializedName: "operationName",
        type: {
          name: "String"
        }
      },
      operationTime: {
        serializedName: "operationTime",
        type: {
          name: "DateTime"
        }
      },
      operationStatus: {
        serializedName: "operationStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceProperties: msRest.CompositeMapper = {
  serializedName: "ComputeInstance_properties",
  type: {
    name: "Composite",
    className: "ComputeInstanceProperties",
    modelProperties: {
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      applicationSharingPolicy: {
        serializedName: "applicationSharingPolicy",
        defaultValue: 'Shared',
        type: {
          name: "String"
        }
      },
      sshSettings: {
        serializedName: "sshSettings",
        type: {
          name: "Composite",
          className: "ComputeInstanceSshSettings"
        }
      },
      connectivityEndpoints: {
        readOnly: true,
        serializedName: "connectivityEndpoints",
        type: {
          name: "Composite",
          className: "ComputeInstanceConnectivityEndpoints"
        }
      },
      applications: {
        readOnly: true,
        serializedName: "applications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeInstanceApplication"
            }
          }
        }
      },
      createdBy: {
        readOnly: true,
        serializedName: "createdBy",
        type: {
          name: "Composite",
          className: "ComputeInstanceCreatedBy"
        }
      },
      errors: {
        readOnly: true,
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MachineLearningServiceError"
            }
          }
        }
      },
      state: {
        readOnly: true,
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      lastOperation: {
        readOnly: true,
        serializedName: "lastOperation",
        type: {
          name: "Composite",
          className: "ComputeInstanceLastOperation"
        }
      }
    }
  }
};

export const ComputeInstance: msRest.CompositeMapper = {
  serializedName: "ComputeInstance",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    uberParent: "Compute",
    className: "ComputeInstance",
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ComputeInstanceProperties"
        }
      }
    }
  }
};

export const VirtualMachineSshCredentials: msRest.CompositeMapper = {
  serializedName: "VirtualMachineSshCredentials",
  type: {
    name: "Composite",
    className: "VirtualMachineSshCredentials",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      publicKeyData: {
        serializedName: "publicKeyData",
        type: {
          name: "String"
        }
      },
      privateKeyData: {
        serializedName: "privateKeyData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineProperties: msRest.CompositeMapper = {
  serializedName: "VirtualMachine_properties",
  type: {
    name: "Composite",
    className: "VirtualMachineProperties",
    modelProperties: {
      virtualMachineSize: {
        serializedName: "virtualMachineSize",
        type: {
          name: "String"
        }
      },
      sshPort: {
        serializedName: "sshPort",
        type: {
          name: "Number"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      administratorAccount: {
        serializedName: "administratorAccount",
        type: {
          name: "Composite",
          className: "VirtualMachineSshCredentials"
        }
      }
    }
  }
};

export const VirtualMachine: msRest.CompositeMapper = {
  serializedName: "VirtualMachine",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    uberParent: "Compute",
    className: "VirtualMachine",
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VirtualMachineProperties"
        }
      }
    }
  }
};

export const HDInsightProperties: msRest.CompositeMapper = {
  serializedName: "HDInsight_properties",
  type: {
    name: "Composite",
    className: "HDInsightProperties",
    modelProperties: {
      sshPort: {
        serializedName: "sshPort",
        type: {
          name: "Number"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      administratorAccount: {
        serializedName: "administratorAccount",
        type: {
          name: "Composite",
          className: "VirtualMachineSshCredentials"
        }
      }
    }
  }
};

export const HDInsight: msRest.CompositeMapper = {
  serializedName: "HDInsight",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    uberParent: "Compute",
    className: "HDInsight",
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "HDInsightProperties"
        }
      }
    }
  }
};

export const DataFactory: msRest.CompositeMapper = {
  serializedName: "DataFactory",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    uberParent: "Compute",
    className: "DataFactory",
    modelProperties: {
      ...Compute.type.modelProperties
    }
  }
};

export const DatabricksProperties: msRest.CompositeMapper = {
  serializedName: "Databricks_properties",
  type: {
    name: "Composite",
    className: "DatabricksProperties",
    modelProperties: {
      databricksAccessToken: {
        serializedName: "databricksAccessToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Databricks: msRest.CompositeMapper = {
  serializedName: "Databricks",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    uberParent: "Compute",
    className: "Databricks",
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DatabricksProperties"
        }
      }
    }
  }
};

export const DataLakeAnalyticsProperties: msRest.CompositeMapper = {
  serializedName: "DataLakeAnalytics_properties",
  type: {
    name: "Composite",
    className: "DataLakeAnalyticsProperties",
    modelProperties: {
      dataLakeStoreAccountName: {
        serializedName: "dataLakeStoreAccountName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeAnalytics: msRest.CompositeMapper = {
  serializedName: "DataLakeAnalytics",
  type: {
    name: "Composite",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    uberParent: "Compute",
    className: "DataLakeAnalytics",
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataLakeAnalyticsProperties"
        }
      }
    }
  }
};

export const ServicePrincipalCredentials: msRest.CompositeMapper = {
  serializedName: "ServicePrincipalCredentials",
  type: {
    name: "Composite",
    className: "ServicePrincipalCredentials",
    modelProperties: {
      clientId: {
        required: true,
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        required: true,
        serializedName: "clientSecret",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterUpdateParameters: msRest.CompositeMapper = {
  serializedName: "ClusterUpdateParameters",
  type: {
    name: "Composite",
    className: "ClusterUpdateParameters",
    modelProperties: {
      scaleSettings: {
        serializedName: "properties.scaleSettings",
        type: {
          name: "Composite",
          className: "ScaleSettings"
        }
      }
    }
  }
};

export const ComputeNodesInformation: msRest.CompositeMapper = {
  serializedName: "ComputeNodesInformation",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "computeType",
      clientName: "computeType"
    },
    uberParent: "ComputeNodesInformation",
    className: "ComputeNodesInformation",
    modelProperties: {
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      computeType: {
        required: true,
        serializedName: "computeType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AmlComputeNodeInformation: msRest.CompositeMapper = {
  serializedName: "AmlCompute",
  type: {
    name: "Composite",
    className: "AmlComputeNodeInformation",
    modelProperties: {
      nodeId: {
        readOnly: true,
        serializedName: "nodeId",
        type: {
          name: "String"
        }
      },
      privateIpAddress: {
        readOnly: true,
        serializedName: "privateIpAddress",
        type: {
          name: "String"
        }
      },
      publicIpAddress: {
        readOnly: true,
        serializedName: "publicIpAddress",
        type: {
          name: "String"
        }
      },
      port: {
        readOnly: true,
        serializedName: "port",
        type: {
          name: "Number"
        }
      },
      nodeState: {
        readOnly: true,
        serializedName: "nodeState",
        type: {
          name: "String"
        }
      },
      runId: {
        readOnly: true,
        serializedName: "runId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AmlComputeNodesInformation: msRest.CompositeMapper = {
  serializedName: "AmlCompute",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ComputeNodesInformation.type.polymorphicDiscriminator,
    uberParent: "ComputeNodesInformation",
    className: "AmlComputeNodesInformation",
    modelProperties: {
      ...ComputeNodesInformation.type.modelProperties,
      nodes: {
        readOnly: true,
        serializedName: "nodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AmlComputeNodeInformation"
            }
          }
        }
      }
    }
  }
};

export const ComputeSecrets: msRest.CompositeMapper = {
  serializedName: "ComputeSecrets",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "computeType",
      clientName: "computeType"
    },
    uberParent: "ComputeSecrets",
    className: "ComputeSecrets",
    modelProperties: {
      computeType: {
        required: true,
        serializedName: "computeType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AksComputeSecrets: msRest.CompositeMapper = {
  serializedName: "AKS",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ComputeSecrets.type.polymorphicDiscriminator,
    uberParent: "ComputeSecrets",
    className: "AksComputeSecrets",
    modelProperties: {
      ...ComputeSecrets.type.modelProperties,
      userKubeConfig: {
        serializedName: "userKubeConfig",
        type: {
          name: "String"
        }
      },
      adminKubeConfig: {
        serializedName: "adminKubeConfig",
        type: {
          name: "String"
        }
      },
      imagePullSecretName: {
        serializedName: "imagePullSecretName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineSecrets: msRest.CompositeMapper = {
  serializedName: "VirtualMachine",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ComputeSecrets.type.polymorphicDiscriminator,
    uberParent: "ComputeSecrets",
    className: "VirtualMachineSecrets",
    modelProperties: {
      ...ComputeSecrets.type.modelProperties,
      administratorAccount: {
        serializedName: "administratorAccount",
        type: {
          name: "Composite",
          className: "VirtualMachineSshCredentials"
        }
      }
    }
  }
};

export const DatabricksComputeSecrets: msRest.CompositeMapper = {
  serializedName: "Databricks",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ComputeSecrets.type.polymorphicDiscriminator,
    uberParent: "ComputeSecrets",
    className: "DatabricksComputeSecrets",
    modelProperties: {
      ...ComputeSecrets.type.modelProperties,
      databricksAccessToken: {
        serializedName: "databricksAccessToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SKUCapability: msRest.CompositeMapper = {
  serializedName: "SKUCapability",
  type: {
    name: "Composite",
    className: "SKUCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceSkuZoneDetails: msRest.CompositeMapper = {
  serializedName: "ResourceSkuZoneDetails",
  type: {
    name: "Composite",
    className: "ResourceSkuZoneDetails",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        readOnly: true,
        serializedName: "capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SKUCapability"
            }
          }
        }
      }
    }
  }
};

export const ResourceSkuLocationInfo: msRest.CompositeMapper = {
  serializedName: "ResourceSkuLocationInfo",
  type: {
    name: "Composite",
    className: "ResourceSkuLocationInfo",
    modelProperties: {
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      zones: {
        readOnly: true,
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      zoneDetails: {
        readOnly: true,
        serializedName: "zoneDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceSkuZoneDetails"
            }
          }
        }
      }
    }
  }
};

export const Restriction: msRest.CompositeMapper = {
  serializedName: "Restriction",
  type: {
    name: "Composite",
    className: "Restriction",
    modelProperties: {
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      values: {
        readOnly: true,
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      reasonCode: {
        serializedName: "reasonCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuSettings: msRest.CompositeMapper = {
  serializedName: "SkuSettings",
  type: {
    name: "Composite",
    className: "SkuSettings",
    modelProperties: {
      locations: {
        readOnly: true,
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      locationInfo: {
        readOnly: true,
        serializedName: "locationInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceSkuLocationInfo"
            }
          }
        }
      },
      tier: {
        readOnly: true,
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      resourceType: {
        readOnly: true,
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      capabilities: {
        readOnly: true,
        serializedName: "capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SKUCapability"
            }
          }
        }
      },
      restrictions: {
        serializedName: "restrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Restriction"
            }
          }
        }
      }
    }
  }
};

export const WorkspaceSku: msRest.CompositeMapper = {
  serializedName: "WorkspaceSku",
  type: {
    name: "Composite",
    className: "WorkspaceSku",
    modelProperties: {
      resourceType: {
        readOnly: true,
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      skus: {
        readOnly: true,
        serializedName: "skus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuSettings"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResource: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResource",
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupId: {
        readOnly: true,
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        readOnly: true,
        serializedName: "properties.requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResourceListResult",
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const WorkspaceConnection: msRest.CompositeMapper = {
  serializedName: "WorkspaceConnection",
  type: {
    name: "Composite",
    className: "WorkspaceConnection",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "properties.category",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "properties.target",
        type: {
          name: "String"
        }
      },
      authType: {
        serializedName: "properties.authType",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "properties.value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceConnectionDto: msRest.CompositeMapper = {
  serializedName: "WorkspaceConnectionDto",
  type: {
    name: "Composite",
    className: "WorkspaceConnectionDto",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "properties.category",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "properties.target",
        type: {
          name: "String"
        }
      },
      authType: {
        serializedName: "properties.authType",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "properties.value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MachineLearningComputeCreateOrUpdateHeaders: msRest.CompositeMapper = {
  serializedName: "machinelearningcompute-createorupdate-headers",
  type: {
    name: "Composite",
    className: "MachineLearningComputeCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MachineLearningComputeDeleteHeaders: msRest.CompositeMapper = {
  serializedName: "machinelearningcompute-delete-headers",
  type: {
    name: "Composite",
    className: "MachineLearningComputeDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const WorkspaceListResult: msRest.CompositeMapper = {
  serializedName: "WorkspaceListResult",
  type: {
    name: "Composite",
    className: "WorkspaceListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Workspace"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListAmlUserFeatureResult: msRest.CompositeMapper = {
  serializedName: "ListAmlUserFeatureResult",
  type: {
    name: "Composite",
    className: "ListAmlUserFeatureResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AmlUserFeature"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListUsagesResult: msRest.CompositeMapper = {
  serializedName: "ListUsagesResult",
  type: {
    name: "Composite",
    className: "ListUsagesResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListWorkspaceQuotas: msRest.CompositeMapper = {
  serializedName: "ListWorkspaceQuotas",
  type: {
    name: "Composite",
    className: "ListWorkspaceQuotas",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceQuota"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PaginatedWorkspaceConnectionsList: msRest.CompositeMapper = {
  serializedName: "PaginatedWorkspaceConnectionsList",
  type: {
    name: "Composite",
    className: "PaginatedWorkspaceConnectionsList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkspaceConnection"
            }
          }
        }
      }
    }
  }
};

export const PaginatedComputeResourcesList: msRest.CompositeMapper = {
  serializedName: "PaginatedComputeResourcesList",
  type: {
    name: "Composite",
    className: "PaginatedComputeResourcesList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuListResult: msRest.CompositeMapper = {
  serializedName: "SkuListResult",
  type: {
    name: "Composite",
    className: "SkuListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkspaceSku"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const discriminators = {
  'Compute' : Compute,
  'Compute.AKS' : AKS,
  'Compute.AmlCompute' : AmlCompute,
  'Compute.ComputeInstance' : ComputeInstance,
  'Compute.VirtualMachine' : VirtualMachine,
  'Compute.HDInsight' : HDInsight,
  'Compute.DataFactory' : DataFactory,
  'Compute.Databricks' : Databricks,
  'Compute.DataLakeAnalytics' : DataLakeAnalytics,
  'ComputeNodesInformation' : ComputeNodesInformation,
  'ComputeNodesInformation.AmlCompute' : AmlComputeNodesInformation,
  'ComputeSecrets' : ComputeSecrets,
  'ComputeSecrets.AKS' : AksComputeSecrets,
  'ComputeSecrets.VirtualMachine' : VirtualMachineSecrets,
  'ComputeSecrets.Databricks' : DatabricksComputeSecrets

};
