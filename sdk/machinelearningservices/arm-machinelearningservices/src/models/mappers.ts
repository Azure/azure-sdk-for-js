/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const EncryptionProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionProperty",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityForCmk"
        }
      },
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      }
    }
  }
};

export const IdentityForCmk: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityForCmk",
    modelProperties: {
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyVaultArmId: {
        serializedName: "keyVaultArmId",
        required: true,
        type: {
          name: "String"
        }
      },
      keyIdentifier: {
        serializedName: "keyIdentifier",
        required: true,
        type: {
          name: "String"
        }
      },
      identityClientId: {
        serializedName: "identityClientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnetArmId: {
        serializedName: "subnetArmId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "SystemAssigned",
            "SystemAssigned,UserAssigned",
            "UserAssigned",
            "None"
          ]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SharedPrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SharedPrivateLinkResource",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      privateLinkResourceId: {
        serializedName: "properties.privateLinkResourceId",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      requestMessage: {
        serializedName: "properties.requestMessage",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotebookResourceInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotebookResourceInfo",
    modelProperties: {
      fqdn: {
        serializedName: "fqdn",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      notebookPreparationError: {
        serializedName: "notebookPreparationError",
        type: {
          name: "Composite",
          className: "NotebookPreparationError"
        }
      }
    }
  }
};

export const NotebookPreparationError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotebookPreparationError",
    modelProperties: {
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      statusCode: {
        serializedName: "statusCode",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServiceManagedResourcesSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServiceManagedResourcesSettings",
    modelProperties: {
      cosmosDb: {
        serializedName: "cosmosDb",
        type: {
          name: "Composite",
          className: "CosmosDbSettings"
        }
      }
    }
  }
};

export const CosmosDbSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CosmosDbSettings",
    modelProperties: {
      collectionsThroughput: {
        serializedName: "collectionsThroughput",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const WorkspaceUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      imageBuildCompute: {
        serializedName: "properties.imageBuildCompute",
        type: {
          name: "String"
        }
      },
      serviceManagedResourcesSettings: {
        serializedName: "properties.serviceManagedResourcesSettings",
        type: {
          name: "Composite",
          className: "ServiceManagedResourcesSettings"
        }
      },
      primaryUserAssignedIdentity: {
        serializedName: "properties.primaryUserAssignedIdentity",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Workspace"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiagnoseWorkspaceParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnoseWorkspaceParameters",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "DiagnoseRequestProperties"
        }
      }
    }
  }
};

export const DiagnoseRequestProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnoseRequestProperties",
    modelProperties: {
      udr: {
        serializedName: "udr",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      nsg: {
        serializedName: "nsg",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      resourceLock: {
        serializedName: "resourceLock",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      dnsResolution: {
        serializedName: "dnsResolution",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      storageAccount: {
        serializedName: "storageAccount",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      keyVault: {
        serializedName: "keyVault",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      containerRegistry: {
        serializedName: "containerRegistry",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      applicationInsights: {
        serializedName: "applicationInsights",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      others: {
        serializedName: "others",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const DiagnoseResponseResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnoseResponseResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "DiagnoseResponseResultValue"
        }
      }
    }
  }
};

export const DiagnoseResponseResultValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnoseResponseResultValue",
    modelProperties: {
      userDefinedRouteResults: {
        serializedName: "userDefinedRouteResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      networkSecurityRuleResults: {
        serializedName: "networkSecurityRuleResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      resourceLockResults: {
        serializedName: "resourceLockResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      dnsResolutionResults: {
        serializedName: "dnsResolutionResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      storageAccountResults: {
        serializedName: "storageAccountResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      keyVaultResults: {
        serializedName: "keyVaultResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      containerRegistryResults: {
        serializedName: "containerRegistryResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      applicationInsightsResults: {
        serializedName: "applicationInsightsResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      },
      otherResults: {
        serializedName: "otherResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnoseResult"
            }
          }
        }
      }
    }
  }
};

export const DiagnoseResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnoseResult",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      level: {
        serializedName: "level",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListWorkspaceKeysResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListWorkspaceKeysResult",
    modelProperties: {
      userStorageKey: {
        serializedName: "userStorageKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userStorageResourceId: {
        serializedName: "userStorageResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      appInsightsInstrumentationKey: {
        serializedName: "appInsightsInstrumentationKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      containerRegistryCredentials: {
        serializedName: "containerRegistryCredentials",
        type: {
          name: "Composite",
          className: "RegistryListCredentialsResult"
        }
      },
      notebookAccessKeys: {
        serializedName: "notebookAccessKeys",
        type: {
          name: "Composite",
          className: "ListNotebookKeysResult"
        }
      }
    }
  }
};

export const RegistryListCredentialsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryListCredentialsResult",
    modelProperties: {
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      passwords: {
        serializedName: "passwords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Password"
            }
          }
        }
      }
    }
  }
};

export const Password: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Password",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListNotebookKeysResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListNotebookKeysResult",
    modelProperties: {
      primaryAccessKey: {
        serializedName: "primaryAccessKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      secondaryAccessKey: {
        serializedName: "secondaryAccessKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListUsagesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListUsagesResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Usage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      amlWorkspaceLocation: {
        serializedName: "amlWorkspaceLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "UsageName"
        }
      }
    }
  }
};

export const UsageName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineSizeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineSizeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualMachineSize"
            }
          }
        }
      }
    }
  }
};

export const VirtualMachineSize: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineSize",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vCPUs: {
        serializedName: "vCPUs",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      gpus: {
        serializedName: "gpus",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      osVhdSizeMB: {
        serializedName: "osVhdSizeMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxResourceVolumeMB: {
        serializedName: "maxResourceVolumeMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      memoryGB: {
        serializedName: "memoryGB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lowPriorityCapable: {
        serializedName: "lowPriorityCapable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      premiumIO: {
        serializedName: "premiumIO",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      estimatedVMPrices: {
        serializedName: "estimatedVMPrices",
        type: {
          name: "Composite",
          className: "EstimatedVMPrices"
        }
      },
      supportedComputeTypes: {
        serializedName: "supportedComputeTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const EstimatedVMPrices: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EstimatedVMPrices",
    modelProperties: {
      billingCurrency: {
        serializedName: "billingCurrency",
        required: true,
        type: {
          name: "String"
        }
      },
      unitOfMeasure: {
        serializedName: "unitOfMeasure",
        required: true,
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EstimatedVMPrice"
            }
          }
        }
      }
    }
  }
};

export const EstimatedVMPrice: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EstimatedVMPrice",
    modelProperties: {
      retailPrice: {
        serializedName: "retailPrice",
        required: true,
        type: {
          name: "Number"
        }
      },
      osType: {
        serializedName: "osType",
        required: true,
        type: {
          name: "String"
        }
      },
      vmTier: {
        serializedName: "vmTier",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaUpdateParameters",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QuotaBaseProperties"
            }
          }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QuotaBaseProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaBaseProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateWorkspaceQuotasResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateWorkspaceQuotasResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateWorkspaceQuotas"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateWorkspaceQuotas: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateWorkspaceQuotas",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListWorkspaceQuotas: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListWorkspaceQuotas",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceQuota"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceQuota: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceQuota",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      amlWorkspaceLocation: {
        serializedName: "amlWorkspaceLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "ResourceName"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PaginatedComputeResourcesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PaginatedComputeResourcesList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Components1D3SwueSchemasComputeresourceAllof1: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Components1D3SwueSchemasComputeresourceAllof1",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "Compute"
        }
      }
    }
  }
};

export const Compute: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Compute",
    uberParent: "Compute",
    polymorphicDiscriminator: {
      serializedName: "computeType",
      clientName: "computeType"
    },
    modelProperties: {
      computeType: {
        serializedName: "computeType",
        required: true,
        type: {
          name: "String"
        }
      },
      computeLocation: {
        serializedName: "computeLocation",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      createdOn: {
        serializedName: "createdOn",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      modifiedOn: {
        serializedName: "modifiedOn",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      provisioningErrors: {
        serializedName: "provisioningErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponse"
            }
          }
        }
      },
      isAttachedCompute: {
        serializedName: "isAttachedCompute",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      disableLocalAuth: {
        serializedName: "disableLocalAuth",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ClusterUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterUpdateParameters",
    modelProperties: {
      properties: {
        serializedName: "properties.properties",
        type: {
          name: "Composite",
          className: "ScaleSettingsInformation"
        }
      }
    }
  }
};

export const ScaleSettingsInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleSettingsInformation",
    modelProperties: {
      scaleSettings: {
        serializedName: "scaleSettings",
        type: {
          name: "Composite",
          className: "ScaleSettings"
        }
      }
    }
  }
};

export const ScaleSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScaleSettings",
    modelProperties: {
      maxNodeCount: {
        serializedName: "maxNodeCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      minNodeCount: {
        defaultValue: 0,
        serializedName: "minNodeCount",
        type: {
          name: "Number"
        }
      },
      nodeIdleTimeBeforeScaleDown: {
        serializedName: "nodeIdleTimeBeforeScaleDown",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const AmlComputeNodesInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AmlComputeNodesInformation",
    modelProperties: {
      nodes: {
        serializedName: "nodes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AmlComputeNodeInformation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AmlComputeNodeInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AmlComputeNodeInformation",
    modelProperties: {
      nodeId: {
        serializedName: "nodeId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateIpAddress: {
        serializedName: "privateIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicIpAddress: {
        serializedName: "publicIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nodeState: {
        serializedName: "nodeState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      runId: {
        serializedName: "runId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotebookAccessTokenResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotebookAccessTokenResult",
    modelProperties: {
      notebookResourceId: {
        serializedName: "notebookResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicDns: {
        serializedName: "publicDns",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accessToken: {
        serializedName: "accessToken",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tokenType: {
        serializedName: "tokenType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expiresIn: {
        serializedName: "expiresIn",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      refreshToken: {
        serializedName: "refreshToken",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "scope",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeSecrets: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeSecrets",
    uberParent: "ComputeSecrets",
    polymorphicDiscriminator: {
      serializedName: "computeType",
      clientName: "computeType"
    },
    modelProperties: {
      computeType: {
        serializedName: "computeType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const ListStorageAccountKeysResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListStorageAccountKeysResult",
    modelProperties: {
      userStorageKey: {
        serializedName: "userStorageKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PaginatedWorkspaceConnectionsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PaginatedWorkspaceConnectionsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkspaceConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceConnection",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "properties.category",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "properties.target",
        type: {
          name: "String"
        }
      },
      authType: {
        serializedName: "properties.authType",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "properties.value",
        type: {
          name: "String"
        }
      },
      valueFormat: {
        serializedName: "properties.valueFormat",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExternalFqdnResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExternalFqdnResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FqdnEndpoints"
            }
          }
        }
      }
    }
  }
};

export const FqdnEndpoints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FqdnEndpoints",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FqdnEndpointsProperties"
        }
      }
    }
  }
};

export const FqdnEndpointsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FqdnEndpointsProperties",
    modelProperties: {
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FqdnEndpoint"
            }
          }
        }
      }
    }
  }
};

export const FqdnEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FqdnEndpoint",
    modelProperties: {
      domainName: {
        serializedName: "domainName",
        type: {
          name: "String"
        }
      },
      endpointDetails: {
        serializedName: "endpointDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FqdnEndpointDetail"
            }
          }
        }
      }
    }
  }
};

export const FqdnEndpointDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FqdnEndpointDetail",
    modelProperties: {
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ListAmlUserFeatureResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListAmlUserFeatureResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AmlUserFeature"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AmlUserFeature: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AmlUserFeature",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkspaceSku"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceSku",
    modelProperties: {
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      locationInfo: {
        serializedName: "locationInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceSkuLocationInfo"
            }
          }
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SKUCapability"
            }
          }
        }
      },
      restrictions: {
        serializedName: "restrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Restriction"
            }
          }
        }
      }
    }
  }
};

export const ResourceSkuLocationInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSkuLocationInfo",
    modelProperties: {
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      zoneDetails: {
        serializedName: "zoneDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceSkuZoneDetails"
            }
          }
        }
      }
    }
  }
};

export const ResourceSkuZoneDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSkuZoneDetails",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SKUCapability"
            }
          }
        }
      }
    }
  }
};

export const SKUCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SKUCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Restriction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Restriction",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      reasonCode: {
        serializedName: "reasonCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceId",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AKSProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AKSProperties",
    modelProperties: {
      clusterFqdn: {
        serializedName: "clusterFqdn",
        type: {
          name: "String"
        }
      },
      systemServices: {
        serializedName: "systemServices",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SystemService"
            }
          }
        }
      },
      agentCount: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "agentCount",
        type: {
          name: "Number"
        }
      },
      agentVmSize: {
        serializedName: "agentVmSize",
        type: {
          name: "String"
        }
      },
      clusterPurpose: {
        defaultValue: "FastProd",
        serializedName: "clusterPurpose",
        type: {
          name: "String"
        }
      },
      sslConfiguration: {
        serializedName: "sslConfiguration",
        type: {
          name: "Composite",
          className: "SslConfiguration"
        }
      },
      aksNetworkingConfiguration: {
        serializedName: "aksNetworkingConfiguration",
        type: {
          name: "Composite",
          className: "AksNetworkingConfiguration"
        }
      },
      loadBalancerType: {
        defaultValue: "PublicIp",
        serializedName: "loadBalancerType",
        type: {
          name: "String"
        }
      },
      loadBalancerSubnet: {
        serializedName: "loadBalancerSubnet",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemService: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemService",
    modelProperties: {
      systemServiceType: {
        serializedName: "systemServiceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicIpAddress: {
        serializedName: "publicIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SslConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SslConfiguration",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      cert: {
        serializedName: "cert",
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "String"
        }
      },
      cname: {
        serializedName: "cname",
        type: {
          name: "String"
        }
      },
      leafDomainLabel: {
        serializedName: "leafDomainLabel",
        type: {
          name: "String"
        }
      },
      overwriteExistingDomain: {
        serializedName: "overwriteExistingDomain",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AksNetworkingConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AksNetworkingConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      },
      serviceCidr: {
        constraints: {
          Pattern: new RegExp(
            "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
          )
        },
        serializedName: "serviceCidr",
        type: {
          name: "String"
        }
      },
      dnsServiceIP: {
        constraints: {
          Pattern: new RegExp(
            "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
          )
        },
        serializedName: "dnsServiceIP",
        type: {
          name: "String"
        }
      },
      dockerBridgeCidr: {
        constraints: {
          Pattern: new RegExp(
            "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
          )
        },
        serializedName: "dockerBridgeCidr",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KubernetesSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesSchema",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "KubernetesProperties"
        }
      }
    }
  }
};

export const KubernetesProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KubernetesProperties",
    modelProperties: {
      relayConnectionString: {
        serializedName: "relayConnectionString",
        type: {
          name: "String"
        }
      },
      serviceBusConnectionString: {
        serializedName: "serviceBusConnectionString",
        type: {
          name: "String"
        }
      },
      extensionPrincipalId: {
        serializedName: "extensionPrincipalId",
        type: {
          name: "String"
        }
      },
      extensionInstanceReleaseTrain: {
        serializedName: "extensionInstanceReleaseTrain",
        type: {
          name: "String"
        }
      },
      vcName: {
        serializedName: "vcName",
        type: {
          name: "String"
        }
      },
      namespace: {
        defaultValue: "default",
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      defaultInstanceType: {
        serializedName: "defaultInstanceType",
        type: {
          name: "String"
        }
      },
      instanceTypes: {
        serializedName: "instanceTypes",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "InstanceTypeSchema" }
          }
        }
      }
    }
  }
};

export const InstanceTypeSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstanceTypeSchema",
    modelProperties: {
      nodeSelector: {
        serializedName: "nodeSelector",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Composite",
          className: "InstanceTypeSchemaResources"
        }
      }
    }
  }
};

export const InstanceTypeSchemaResources: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InstanceTypeSchemaResources",
    modelProperties: {
      requests: {
        serializedName: "requests",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      limits: {
        serializedName: "limits",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AmlComputeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AmlComputeProperties",
    modelProperties: {
      osType: {
        defaultValue: "Linux",
        serializedName: "osType",
        type: {
          name: "String"
        }
      },
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      vmPriority: {
        serializedName: "vmPriority",
        type: {
          name: "String"
        }
      },
      virtualMachineImage: {
        serializedName: "virtualMachineImage",
        type: {
          name: "Composite",
          className: "VirtualMachineImage"
        }
      },
      isolatedNetwork: {
        serializedName: "isolatedNetwork",
        type: {
          name: "Boolean"
        }
      },
      scaleSettings: {
        serializedName: "scaleSettings",
        type: {
          name: "Composite",
          className: "ScaleSettings"
        }
      },
      userAccountCredentials: {
        serializedName: "userAccountCredentials",
        type: {
          name: "Composite",
          className: "UserAccountCredentials"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      remoteLoginPortPublicAccess: {
        defaultValue: "NotSpecified",
        serializedName: "remoteLoginPortPublicAccess",
        type: {
          name: "String"
        }
      },
      allocationState: {
        serializedName: "allocationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allocationStateTransitionTime: {
        serializedName: "allocationStateTransitionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponse"
            }
          }
        }
      },
      currentNodeCount: {
        serializedName: "currentNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      targetNodeCount: {
        serializedName: "targetNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nodeStateCounts: {
        serializedName: "nodeStateCounts",
        type: {
          name: "Composite",
          className: "NodeStateCounts"
        }
      },
      enableNodePublicIp: {
        defaultValue: true,
        serializedName: "enableNodePublicIp",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VirtualMachineImage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineImage",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UserAccountCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAccountCredentials",
    modelProperties: {
      adminUserName: {
        serializedName: "adminUserName",
        required: true,
        type: {
          name: "String"
        }
      },
      adminUserSshPublicKey: {
        serializedName: "adminUserSshPublicKey",
        type: {
          name: "String"
        }
      },
      adminUserPassword: {
        serializedName: "adminUserPassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NodeStateCounts: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NodeStateCounts",
    modelProperties: {
      idleNodeCount: {
        serializedName: "idleNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      runningNodeCount: {
        serializedName: "runningNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      preparingNodeCount: {
        serializedName: "preparingNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unusableNodeCount: {
        serializedName: "unusableNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      leavingNodeCount: {
        serializedName: "leavingNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      preemptedNodeCount: {
        serializedName: "preemptedNodeCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ComputeInstanceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceProperties",
    modelProperties: {
      vmSize: {
        serializedName: "vmSize",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "Composite",
          className: "ResourceId"
        }
      },
      applicationSharingPolicy: {
        defaultValue: "Shared",
        serializedName: "applicationSharingPolicy",
        type: {
          name: "String"
        }
      },
      sshSettings: {
        serializedName: "sshSettings",
        type: {
          name: "Composite",
          className: "ComputeInstanceSshSettings"
        }
      },
      connectivityEndpoints: {
        serializedName: "connectivityEndpoints",
        type: {
          name: "Composite",
          className: "ComputeInstanceConnectivityEndpoints"
        }
      },
      applications: {
        serializedName: "applications",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputeInstanceApplication"
            }
          }
        }
      },
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "Composite",
          className: "ComputeInstanceCreatedBy"
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorResponse"
            }
          }
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      computeInstanceAuthorizationType: {
        defaultValue: "personal",
        serializedName: "computeInstanceAuthorizationType",
        type: {
          name: "String"
        }
      },
      personalComputeInstanceSettings: {
        serializedName: "personalComputeInstanceSettings",
        type: {
          name: "Composite",
          className: "PersonalComputeInstanceSettings"
        }
      },
      setupScripts: {
        serializedName: "setupScripts",
        type: {
          name: "Composite",
          className: "SetupScripts"
        }
      },
      lastOperation: {
        serializedName: "lastOperation",
        type: {
          name: "Composite",
          className: "ComputeInstanceLastOperation"
        }
      }
    }
  }
};

export const ComputeInstanceSshSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceSshSettings",
    modelProperties: {
      sshPublicAccess: {
        defaultValue: "Disabled",
        serializedName: "sshPublicAccess",
        type: {
          name: "String"
        }
      },
      adminUserName: {
        serializedName: "adminUserName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sshPort: {
        serializedName: "sshPort",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      adminPublicKey: {
        serializedName: "adminPublicKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceConnectivityEndpoints: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceConnectivityEndpoints",
    modelProperties: {
      publicIpAddress: {
        serializedName: "publicIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateIpAddress: {
        serializedName: "privateIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceApplication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceApplication",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      endpointUri: {
        serializedName: "endpointUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceCreatedBy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceCreatedBy",
    modelProperties: {
      userName: {
        serializedName: "userName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userOrgId: {
        serializedName: "userOrgId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userId: {
        serializedName: "userId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PersonalComputeInstanceSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PersonalComputeInstanceSettings",
    modelProperties: {
      assignedUser: {
        serializedName: "assignedUser",
        type: {
          name: "Composite",
          className: "AssignedUser"
        }
      }
    }
  }
};

export const AssignedUser: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AssignedUser",
    modelProperties: {
      objectId: {
        serializedName: "objectId",
        required: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SetupScripts: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SetupScripts",
    modelProperties: {
      scripts: {
        serializedName: "scripts",
        type: {
          name: "Composite",
          className: "ScriptsToExecute"
        }
      }
    }
  }
};

export const ScriptsToExecute: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScriptsToExecute",
    modelProperties: {
      startupScript: {
        serializedName: "startupScript",
        type: {
          name: "Composite",
          className: "ScriptReference"
        }
      },
      creationScript: {
        serializedName: "creationScript",
        type: {
          name: "Composite",
          className: "ScriptReference"
        }
      }
    }
  }
};

export const ScriptReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScriptReference",
    modelProperties: {
      scriptSource: {
        serializedName: "scriptSource",
        type: {
          name: "String"
        }
      },
      scriptData: {
        serializedName: "scriptData",
        type: {
          name: "String"
        }
      },
      scriptArguments: {
        serializedName: "scriptArguments",
        type: {
          name: "String"
        }
      },
      timeout: {
        serializedName: "timeout",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeInstanceLastOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeInstanceLastOperation",
    modelProperties: {
      operationName: {
        serializedName: "operationName",
        type: {
          name: "String"
        }
      },
      operationTime: {
        serializedName: "operationTime",
        type: {
          name: "DateTime"
        }
      },
      operationStatus: {
        serializedName: "operationStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualMachineProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineProperties",
    modelProperties: {
      virtualMachineSize: {
        serializedName: "virtualMachineSize",
        type: {
          name: "String"
        }
      },
      sshPort: {
        serializedName: "sshPort",
        type: {
          name: "Number"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      administratorAccount: {
        serializedName: "administratorAccount",
        type: {
          name: "Composite",
          className: "VirtualMachineSshCredentials"
        }
      },
      isNotebookInstanceCompute: {
        serializedName: "isNotebookInstanceCompute",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VirtualMachineSshCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualMachineSshCredentials",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      publicKeyData: {
        serializedName: "publicKeyData",
        type: {
          name: "String"
        }
      },
      privateKeyData: {
        serializedName: "privateKeyData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HDInsightProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HDInsightProperties",
    modelProperties: {
      sshPort: {
        serializedName: "sshPort",
        type: {
          name: "Number"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      administratorAccount: {
        serializedName: "administratorAccount",
        type: {
          name: "Composite",
          className: "VirtualMachineSshCredentials"
        }
      }
    }
  }
};

export const DatabricksProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabricksProperties",
    modelProperties: {
      databricksAccessToken: {
        serializedName: "databricksAccessToken",
        type: {
          name: "String"
        }
      },
      workspaceUrl: {
        serializedName: "workspaceUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeAnalyticsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataLakeAnalyticsProperties",
    modelProperties: {
      dataLakeStoreAccountName: {
        serializedName: "dataLakeStoreAccountName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SynapseSparkProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SynapseSparkProperties",
    modelProperties: {
      autoScaleProperties: {
        serializedName: "autoScaleProperties",
        type: {
          name: "Composite",
          className: "AutoScaleProperties"
        }
      },
      autoPauseProperties: {
        serializedName: "autoPauseProperties",
        type: {
          name: "Composite",
          className: "AutoPauseProperties"
        }
      },
      sparkVersion: {
        serializedName: "sparkVersion",
        type: {
          name: "String"
        }
      },
      nodeCount: {
        serializedName: "nodeCount",
        type: {
          name: "Number"
        }
      },
      nodeSize: {
        serializedName: "nodeSize",
        type: {
          name: "String"
        }
      },
      nodeSizeFamily: {
        serializedName: "nodeSizeFamily",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      },
      workspaceName: {
        serializedName: "workspaceName",
        type: {
          name: "String"
        }
      },
      poolName: {
        serializedName: "poolName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoScaleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoScaleProperties",
    modelProperties: {
      minNodeCount: {
        serializedName: "minNodeCount",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      maxNodeCount: {
        serializedName: "maxNodeCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AutoPauseProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoPauseProperties",
    modelProperties: {
      delayInMinutes: {
        serializedName: "delayInMinutes",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ServicePrincipalCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServicePrincipalCredentials",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        required: true,
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AksComputeSecretsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AksComputeSecretsProperties",
    modelProperties: {
      userKubeConfig: {
        serializedName: "userKubeConfig",
        type: {
          name: "String"
        }
      },
      adminKubeConfig: {
        serializedName: "adminKubeConfig",
        type: {
          name: "String"
        }
      },
      imagePullSecretName: {
        serializedName: "imagePullSecretName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabricksComputeSecretsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabricksComputeSecretsProperties",
    modelProperties: {
      databricksAccessToken: {
        serializedName: "databricksAccessToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContainerResourceRequirements: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContainerResourceRequirements",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        type: {
          name: "Number"
        }
      },
      cpuLimit: {
        serializedName: "cpuLimit",
        type: {
          name: "Number"
        }
      },
      memoryInGB: {
        serializedName: "memoryInGB",
        type: {
          name: "Number"
        }
      },
      memoryInGBLimit: {
        serializedName: "memoryInGBLimit",
        type: {
          name: "Number"
        }
      },
      gpu: {
        serializedName: "gpu",
        type: {
          name: "Number"
        }
      },
      fpga: {
        serializedName: "fpga",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Workspace: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Workspace",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      workspaceId: {
        serializedName: "properties.workspaceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      keyVault: {
        serializedName: "properties.keyVault",
        type: {
          name: "String"
        }
      },
      applicationInsights: {
        serializedName: "properties.applicationInsights",
        type: {
          name: "String"
        }
      },
      containerRegistry: {
        serializedName: "properties.containerRegistry",
        nullable: true,
        type: {
          name: "String"
        }
      },
      storageAccount: {
        serializedName: "properties.storageAccount",
        type: {
          name: "String"
        }
      },
      discoveryUrl: {
        serializedName: "properties.discoveryUrl",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "EncryptionProperty"
        }
      },
      hbiWorkspace: {
        defaultValue: false,
        serializedName: "properties.hbiWorkspace",
        type: {
          name: "Boolean"
        }
      },
      serviceProvisionedResourceGroup: {
        serializedName: "properties.serviceProvisionedResourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateLinkCount: {
        serializedName: "properties.privateLinkCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      imageBuildCompute: {
        serializedName: "properties.imageBuildCompute",
        type: {
          name: "String"
        }
      },
      allowPublicAccessWhenBehindVnet: {
        defaultValue: false,
        serializedName: "properties.allowPublicAccessWhenBehindVnet",
        type: {
          name: "Boolean"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      sharedPrivateLinkResources: {
        serializedName: "properties.sharedPrivateLinkResources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SharedPrivateLinkResource"
            }
          }
        }
      },
      notebookInfo: {
        serializedName: "properties.notebookInfo",
        type: {
          name: "Composite",
          className: "NotebookResourceInfo"
        }
      },
      serviceManagedResourcesSettings: {
        serializedName: "properties.serviceManagedResourcesSettings",
        type: {
          name: "Composite",
          className: "ServiceManagedResourcesSettings"
        }
      },
      primaryUserAssignedIdentity: {
        serializedName: "properties.primaryUserAssignedIdentity",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageHnsEnabled: {
        serializedName: "properties.storageHnsEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      mlFlowTrackingUri: {
        serializedName: "properties.mlFlowTrackingUri",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      ...Components1D3SwueSchemasComputeresourceAllof1.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Aks: coreClient.CompositeMapper = {
  serializedName: "AKS",
  type: {
    name: "Composite",
    className: "Aks",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AKSProperties"
        }
      }
    }
  }
};

export const Kubernetes: coreClient.CompositeMapper = {
  serializedName: "Kubernetes",
  type: {
    name: "Composite",
    className: "Kubernetes",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      ...KubernetesSchema.type.modelProperties
    }
  }
};

export const AmlCompute: coreClient.CompositeMapper = {
  serializedName: "AmlCompute",
  type: {
    name: "Composite",
    className: "AmlCompute",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "AmlComputeProperties"
        }
      }
    }
  }
};

export const ComputeInstance: coreClient.CompositeMapper = {
  serializedName: "ComputeInstance",
  type: {
    name: "Composite",
    className: "ComputeInstance",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ComputeInstanceProperties"
        }
      }
    }
  }
};

export const VirtualMachine: coreClient.CompositeMapper = {
  serializedName: "VirtualMachine",
  type: {
    name: "Composite",
    className: "VirtualMachine",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VirtualMachineProperties"
        }
      }
    }
  }
};

export const HDInsight: coreClient.CompositeMapper = {
  serializedName: "HDInsight",
  type: {
    name: "Composite",
    className: "HDInsight",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "HDInsightProperties"
        }
      }
    }
  }
};

export const DataFactory: coreClient.CompositeMapper = {
  serializedName: "DataFactory",
  type: {
    name: "Composite",
    className: "DataFactory",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties
    }
  }
};

export const Databricks: coreClient.CompositeMapper = {
  serializedName: "Databricks",
  type: {
    name: "Composite",
    className: "Databricks",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DatabricksProperties"
        }
      }
    }
  }
};

export const DataLakeAnalytics: coreClient.CompositeMapper = {
  serializedName: "DataLakeAnalytics",
  type: {
    name: "Composite",
    className: "DataLakeAnalytics",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataLakeAnalyticsProperties"
        }
      }
    }
  }
};

export const SynapseSpark: coreClient.CompositeMapper = {
  serializedName: "SynapseSpark",
  type: {
    name: "Composite",
    className: "SynapseSpark",
    uberParent: "Compute",
    polymorphicDiscriminator: Compute.type.polymorphicDiscriminator,
    modelProperties: {
      ...Compute.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "SynapseSparkProperties"
        }
      }
    }
  }
};

export const AksComputeSecrets: coreClient.CompositeMapper = {
  serializedName: "AKS",
  type: {
    name: "Composite",
    className: "AksComputeSecrets",
    uberParent: "ComputeSecrets",
    polymorphicDiscriminator: ComputeSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...ComputeSecrets.type.modelProperties,
      ...AksComputeSecretsProperties.type.modelProperties
    }
  }
};

export const VirtualMachineSecrets: coreClient.CompositeMapper = {
  serializedName: "VirtualMachine",
  type: {
    name: "Composite",
    className: "VirtualMachineSecrets",
    uberParent: "ComputeSecrets",
    polymorphicDiscriminator: ComputeSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...ComputeSecrets.type.modelProperties,
      administratorAccount: {
        serializedName: "administratorAccount",
        type: {
          name: "Composite",
          className: "VirtualMachineSshCredentials"
        }
      }
    }
  }
};

export const DatabricksComputeSecrets: coreClient.CompositeMapper = {
  serializedName: "Databricks",
  type: {
    name: "Composite",
    className: "DatabricksComputeSecrets",
    uberParent: "ComputeSecrets",
    polymorphicDiscriminator: ComputeSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...ComputeSecrets.type.modelProperties,
      ...DatabricksComputeSecretsProperties.type.modelProperties
    }
  }
};

export const WorkspacesDiagnoseHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspacesDiagnoseHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        constraints: {
          InclusiveMaximum: 600,
          InclusiveMinimum: 10
        },
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ComputeCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputeDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputeDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  Compute: Compute,
  ComputeSecrets: ComputeSecrets,
  "Compute.AKS": Aks,
  "Compute.Kubernetes": Kubernetes,
  "Compute.AmlCompute": AmlCompute,
  "Compute.ComputeInstance": ComputeInstance,
  "Compute.VirtualMachine": VirtualMachine,
  "Compute.HDInsight": HDInsight,
  "Compute.DataFactory": DataFactory,
  "Compute.Databricks": Databricks,
  "Compute.DataLakeAnalytics": DataLakeAnalytics,
  "Compute.SynapseSpark": SynapseSpark,
  "ComputeSecrets.AKS": AksComputeSecrets,
  "ComputeSecrets.VirtualMachine": VirtualMachineSecrets,
  "ComputeSecrets.Databricks": DatabricksComputeSecrets
};
