/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  InformaticaServerlessRuntimeResource,
  ServerlessRuntimesListByInformaticaOrganizationResourceOptionalParams,
  ServerlessRuntimesGetOptionalParams,
  ServerlessRuntimesGetResponse,
  ServerlessRuntimesCreateOrUpdateOptionalParams,
  ServerlessRuntimesCreateOrUpdateResponse,
  InformaticaServerlessRuntimeResourceUpdate,
  ServerlessRuntimesUpdateOptionalParams,
  ServerlessRuntimesUpdateResponse,
  ServerlessRuntimesDeleteOptionalParams,
  ServerlessRuntimesDeleteResponse,
  ServerlessRuntimesCheckDependenciesOptionalParams,
  ServerlessRuntimesCheckDependenciesResponse,
  ServerlessRuntimesServerlessResourceByIdOptionalParams,
  ServerlessRuntimesServerlessResourceByIdResponse,
  ServerlessRuntimesStartFailedServerlessRuntimeOptionalParams,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a ServerlessRuntimes. */
export interface ServerlessRuntimes {
  /**
   * List InformaticaServerlessRuntimeResource resources by InformaticaOrganizationResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param options The options parameters.
   */
  listByInformaticaOrganizationResource(
    resourceGroupName: string,
    organizationName: string,
    options?: ServerlessRuntimesListByInformaticaOrganizationResourceOptionalParams,
  ): PagedAsyncIterableIterator<InformaticaServerlessRuntimeResource>;
  /**
   * Get a InformaticaServerlessRuntimeResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    options?: ServerlessRuntimesGetOptionalParams,
  ): Promise<ServerlessRuntimesGetResponse>;
  /**
   * Create a InformaticaServerlessRuntimeResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    resource: InformaticaServerlessRuntimeResource,
    options?: ServerlessRuntimesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ServerlessRuntimesCreateOrUpdateResponse>,
      ServerlessRuntimesCreateOrUpdateResponse
    >
  >;
  /**
   * Create a InformaticaServerlessRuntimeResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    resource: InformaticaServerlessRuntimeResource,
    options?: ServerlessRuntimesCreateOrUpdateOptionalParams,
  ): Promise<ServerlessRuntimesCreateOrUpdateResponse>;
  /**
   * Update a InformaticaServerlessRuntimeResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    properties: InformaticaServerlessRuntimeResourceUpdate,
    options?: ServerlessRuntimesUpdateOptionalParams,
  ): Promise<ServerlessRuntimesUpdateResponse>;
  /**
   * Delete a InformaticaServerlessRuntimeResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    options?: ServerlessRuntimesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ServerlessRuntimesDeleteResponse>,
      ServerlessRuntimesDeleteResponse
    >
  >;
  /**
   * Delete a InformaticaServerlessRuntimeResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    options?: ServerlessRuntimesDeleteOptionalParams,
  ): Promise<ServerlessRuntimesDeleteResponse>;
  /**
   * Checks all dependencies for a serverless runtime resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param options The options parameters.
   */
  checkDependencies(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    options?: ServerlessRuntimesCheckDependenciesOptionalParams,
  ): Promise<ServerlessRuntimesCheckDependenciesResponse>;
  /**
   * Returns a serverless runtime resource by ID
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param options The options parameters.
   */
  serverlessResourceById(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    options?: ServerlessRuntimesServerlessResourceByIdOptionalParams,
  ): Promise<ServerlessRuntimesServerlessResourceByIdResponse>;
  /**
   * Starts a failed runtime resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param options The options parameters.
   */
  startFailedServerlessRuntime(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    options?: ServerlessRuntimesStartFailedServerlessRuntimeOptionalParams,
  ): Promise<void>;
}
