/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ServerlessRuntimes } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { InformaticaDataManagement } from "../informaticaDataManagement";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  InformaticaServerlessRuntimeResource,
  ServerlessRuntimesListByInformaticaOrganizationResourceNextOptionalParams,
  ServerlessRuntimesListByInformaticaOrganizationResourceOptionalParams,
  ServerlessRuntimesListByInformaticaOrganizationResourceResponse,
  ServerlessRuntimesGetOptionalParams,
  ServerlessRuntimesGetResponse,
  ServerlessRuntimesCreateOrUpdateOptionalParams,
  ServerlessRuntimesCreateOrUpdateResponse,
  InformaticaServerlessRuntimeResourceUpdate,
  ServerlessRuntimesUpdateOptionalParams,
  ServerlessRuntimesUpdateResponse,
  ServerlessRuntimesDeleteOptionalParams,
  ServerlessRuntimesDeleteResponse,
  ServerlessRuntimesCheckDependenciesOptionalParams,
  ServerlessRuntimesCheckDependenciesResponse,
  ServerlessRuntimesServerlessResourceByIdOptionalParams,
  ServerlessRuntimesServerlessResourceByIdResponse,
  ServerlessRuntimesStartFailedServerlessRuntimeOptionalParams,
  ServerlessRuntimesListByInformaticaOrganizationResourceNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ServerlessRuntimes operations. */
export class ServerlessRuntimesImpl implements ServerlessRuntimes {
  private readonly client: InformaticaDataManagement;

  /**
   * Initialize a new instance of the class ServerlessRuntimes class.
   * @param client Reference to the service client
   */
  constructor(client: InformaticaDataManagement) {
    this.client = client;
  }

  /**
   * List InformaticaServerlessRuntimeResource resources by InformaticaOrganizationResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param options The options parameters.
   */
  public listByInformaticaOrganizationResource(
    resourceGroupName: string,
    organizationName: string,
    options?: ServerlessRuntimesListByInformaticaOrganizationResourceOptionalParams,
  ): PagedAsyncIterableIterator<InformaticaServerlessRuntimeResource> {
    const iter = this.listByInformaticaOrganizationResourcePagingAll(
      resourceGroupName,
      organizationName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByInformaticaOrganizationResourcePagingPage(
          resourceGroupName,
          organizationName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByInformaticaOrganizationResourcePagingPage(
    resourceGroupName: string,
    organizationName: string,
    options?: ServerlessRuntimesListByInformaticaOrganizationResourceOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<InformaticaServerlessRuntimeResource[]> {
    let result: ServerlessRuntimesListByInformaticaOrganizationResourceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByInformaticaOrganizationResource(
        resourceGroupName,
        organizationName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByInformaticaOrganizationResourceNext(
        resourceGroupName,
        organizationName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByInformaticaOrganizationResourcePagingAll(
    resourceGroupName: string,
    organizationName: string,
    options?: ServerlessRuntimesListByInformaticaOrganizationResourceOptionalParams,
  ): AsyncIterableIterator<InformaticaServerlessRuntimeResource> {
    for await (const page of this.listByInformaticaOrganizationResourcePagingPage(
      resourceGroupName,
      organizationName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List InformaticaServerlessRuntimeResource resources by InformaticaOrganizationResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param options The options parameters.
   */
  private _listByInformaticaOrganizationResource(
    resourceGroupName: string,
    organizationName: string,
    options?: ServerlessRuntimesListByInformaticaOrganizationResourceOptionalParams,
  ): Promise<ServerlessRuntimesListByInformaticaOrganizationResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, organizationName, options },
      listByInformaticaOrganizationResourceOperationSpec,
    );
  }

  /**
   * Get a InformaticaServerlessRuntimeResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    options?: ServerlessRuntimesGetOptionalParams,
  ): Promise<ServerlessRuntimesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, organizationName, serverlessRuntimeName, options },
      getOperationSpec,
    );
  }

  /**
   * Create a InformaticaServerlessRuntimeResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    resource: InformaticaServerlessRuntimeResource,
    options?: ServerlessRuntimesCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ServerlessRuntimesCreateOrUpdateResponse>,
      ServerlessRuntimesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ServerlessRuntimesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        organizationName,
        serverlessRuntimeName,
        resource,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      ServerlessRuntimesCreateOrUpdateResponse,
      OperationState<ServerlessRuntimesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a InformaticaServerlessRuntimeResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    resource: InformaticaServerlessRuntimeResource,
    options?: ServerlessRuntimesCreateOrUpdateOptionalParams,
  ): Promise<ServerlessRuntimesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      organizationName,
      serverlessRuntimeName,
      resource,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a InformaticaServerlessRuntimeResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    properties: InformaticaServerlessRuntimeResourceUpdate,
    options?: ServerlessRuntimesUpdateOptionalParams,
  ): Promise<ServerlessRuntimesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        organizationName,
        serverlessRuntimeName,
        properties,
        options,
      },
      updateOperationSpec,
    );
  }

  /**
   * Delete a InformaticaServerlessRuntimeResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    options?: ServerlessRuntimesDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ServerlessRuntimesDeleteResponse>,
      ServerlessRuntimesDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ServerlessRuntimesDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        organizationName,
        serverlessRuntimeName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ServerlessRuntimesDeleteResponse,
      OperationState<ServerlessRuntimesDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a InformaticaServerlessRuntimeResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    options?: ServerlessRuntimesDeleteOptionalParams,
  ): Promise<ServerlessRuntimesDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      organizationName,
      serverlessRuntimeName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Checks all dependencies for a serverless runtime resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param options The options parameters.
   */
  checkDependencies(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    options?: ServerlessRuntimesCheckDependenciesOptionalParams,
  ): Promise<ServerlessRuntimesCheckDependenciesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, organizationName, serverlessRuntimeName, options },
      checkDependenciesOperationSpec,
    );
  }

  /**
   * Returns a serverless runtime resource by ID
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param options The options parameters.
   */
  serverlessResourceById(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    options?: ServerlessRuntimesServerlessResourceByIdOptionalParams,
  ): Promise<ServerlessRuntimesServerlessResourceByIdResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, organizationName, serverlessRuntimeName, options },
      serverlessResourceByIdOperationSpec,
    );
  }

  /**
   * Starts a failed runtime resource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param serverlessRuntimeName Name of the Serverless Runtime resource
   * @param options The options parameters.
   */
  startFailedServerlessRuntime(
    resourceGroupName: string,
    organizationName: string,
    serverlessRuntimeName: string,
    options?: ServerlessRuntimesStartFailedServerlessRuntimeOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, organizationName, serverlessRuntimeName, options },
      startFailedServerlessRuntimeOperationSpec,
    );
  }

  /**
   * ListByInformaticaOrganizationResourceNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Name of the Organizations resource
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListByInformaticaOrganizationResource method.
   * @param options The options parameters.
   */
  private _listByInformaticaOrganizationResourceNext(
    resourceGroupName: string,
    organizationName: string,
    nextLink: string,
    options?: ServerlessRuntimesListByInformaticaOrganizationResourceNextOptionalParams,
  ): Promise<ServerlessRuntimesListByInformaticaOrganizationResourceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, organizationName, nextLink, options },
      listByInformaticaOrganizationResourceNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByInformaticaOrganizationResourceOperationSpec: coreClient.OperationSpec =
  {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.InformaticaServerlessRuntimeResourceListResult,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
      Parameters.$host,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.organizationName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InformaticaServerlessRuntimeResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName,
    Parameters.serverlessRuntimeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.InformaticaServerlessRuntimeResource,
    },
    201: {
      bodyMapper: Mappers.InformaticaServerlessRuntimeResource,
    },
    202: {
      bodyMapper: Mappers.InformaticaServerlessRuntimeResource,
    },
    204: {
      bodyMapper: Mappers.InformaticaServerlessRuntimeResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.resource1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName,
    Parameters.serverlessRuntimeName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.InformaticaServerlessRuntimeResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.properties1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName,
    Parameters.serverlessRuntimeName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ServerlessRuntimesDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ServerlessRuntimesDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ServerlessRuntimesDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ServerlessRuntimesDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName,
    Parameters.serverlessRuntimeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const checkDependenciesOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}/checkDependencies",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckDependenciesResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName,
    Parameters.serverlessRuntimeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const serverlessResourceByIdOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}/serverlessResourceById",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.InformaticaServerlessRuntimeResource,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName,
    Parameters.serverlessRuntimeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const startFailedServerlessRuntimeOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}/startFailedServerlessRuntime",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName,
    Parameters.serverlessRuntimeName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByInformaticaOrganizationResourceNextOperationSpec: coreClient.OperationSpec =
  {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.InformaticaServerlessRuntimeResourceListResult,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    urlParameters: [
      Parameters.$host,
      Parameters.nextLink,
      Parameters.subscriptionId,
      Parameters.resourceGroupName,
      Parameters.organizationName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
